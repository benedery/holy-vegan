(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "./node_modules/@babel/runtime/helpers/arrayWithHoles.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayWithHoles.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

module.exports = _arrayWithHoles;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _arrayWithHoles; });
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _assertThisInitialized; });
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/defineProperty.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _defineProperty; });
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/extends.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/extends.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _extends; });
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _inheritsLoose; });
function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js ***!
  \*************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _iterableToArrayLimit; });
function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js":
/*!********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _nonIterableRest; });
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/objectSpread.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/objectSpread.js ***!
  \*****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _objectSpread; });
/* harmony import */ var _defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./defineProperty */ "./node_modules/@babel/runtime/helpers/esm/defineProperty.js");

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      Object(_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]);
    });
  }

  return target;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js ***!
  \*********************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _objectWithoutPropertiesLoose; });
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/esm/slicedToArray.js":
/*!******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _slicedToArray; });
/* harmony import */ var _arrayWithHoles__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arrayWithHoles */ "./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js");
/* harmony import */ var _iterableToArrayLimit__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./iterableToArrayLimit */ "./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js");
/* harmony import */ var _nonIterableRest__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./nonIterableRest */ "./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js");



function _slicedToArray(arr, i) {
  return Object(_arrayWithHoles__WEBPACK_IMPORTED_MODULE_0__["default"])(arr) || Object(_iterableToArrayLimit__WEBPACK_IMPORTED_MODULE_1__["default"])(arr, i) || Object(_nonIterableRest__WEBPACK_IMPORTED_MODULE_2__["default"])();
}

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/inheritsLoose.js":
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/inheritsLoose.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

module.exports = _inheritsLoose;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

module.exports = _iterableToArrayLimit;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/nonIterableRest.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/nonIterableRest.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

module.exports = _nonIterableRest;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/slicedToArray.js":
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/slicedToArray.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayWithHoles = __webpack_require__(/*! ./arrayWithHoles */ "./node_modules/@babel/runtime/helpers/arrayWithHoles.js");

var iterableToArrayLimit = __webpack_require__(/*! ./iterableToArrayLimit */ "./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js");

var nonIterableRest = __webpack_require__(/*! ./nonIterableRest */ "./node_modules/@babel/runtime/helpers/nonIterableRest.js");

function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();
}

module.exports = _slicedToArray;

/***/ }),

/***/ "./node_modules/@firebase/app/dist/index.cjs.js":
/*!******************************************************!*\
  !*** ./node_modules/@firebase/app/dist/index.cjs.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, '__esModule', {
  value: true
});

var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

var util = __webpack_require__(/*! @firebase/util */ "./node_modules/@firebase/util/dist/index.cjs.js");

var logger$1 = __webpack_require__(/*! @firebase/logger */ "./node_modules/@firebase/logger/dist/index.esm.js");
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var _a;

var ERRORS = (_a = {}, _a["no-app"
/* NO_APP */
] = "No Firebase App '{$name}' has been created - " + 'call Firebase App.initializeApp()', _a["bad-app-name"
/* BAD_APP_NAME */
] = "Illegal App name: '{$name}", _a["duplicate-app"
/* DUPLICATE_APP */
] = "Firebase App named '{$name}' already exists", _a["app-deleted"
/* APP_DELETED */
] = "Firebase App named '{$name}' already deleted", _a["duplicate-service"
/* DUPLICATE_SERVICE */
] = "Firebase service named '{$name}' already registered", _a["invalid-app-argument"
/* INVALID_APP_ARGUMENT */
] = 'firebase.{$name}() takes either no argument or a ' + 'Firebase App instance.', _a);
var ERROR_FACTORY = new util.ErrorFactory('app', 'Firebase', ERRORS);
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var DEFAULT_ENTRY_NAME = '[DEFAULT]';
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// An array to capture listeners before the true auth functions
// exist

var tokenListeners = [];
/**
 * Global context object for a collection of services using
 * a shared authentication state.
 */

var FirebaseAppImpl =
/** @class */
function () {
  function FirebaseAppImpl(options, config, firebase_) {
    this.firebase_ = firebase_;
    this.isDeleted_ = false;
    this.services_ = {};
    this.name_ = config.name;
    this.automaticDataCollectionEnabled_ = config.automaticDataCollectionEnabled || false;
    this.options_ = util.deepCopy(options);
    this.INTERNAL = {
      getUid: function () {
        return null;
      },
      getToken: function () {
        return Promise.resolve(null);
      },
      addAuthTokenListener: function (callback) {
        tokenListeners.push(callback); // Make sure callback is called, asynchronously, in the absence of the auth module

        setTimeout(function () {
          return callback(null);
        }, 0);
      },
      removeAuthTokenListener: function (callback) {
        tokenListeners = tokenListeners.filter(function (listener) {
          return listener !== callback;
        });
      }
    };
  }

  Object.defineProperty(FirebaseAppImpl.prototype, "automaticDataCollectionEnabled", {
    get: function () {
      this.checkDestroyed_();
      return this.automaticDataCollectionEnabled_;
    },
    set: function (val) {
      this.checkDestroyed_();
      this.automaticDataCollectionEnabled_ = val;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FirebaseAppImpl.prototype, "name", {
    get: function () {
      this.checkDestroyed_();
      return this.name_;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FirebaseAppImpl.prototype, "options", {
    get: function () {
      this.checkDestroyed_();
      return this.options_;
    },
    enumerable: true,
    configurable: true
  });

  FirebaseAppImpl.prototype.delete = function () {
    var _this = this;

    return new Promise(function (resolve) {
      _this.checkDestroyed_();

      resolve();
    }).then(function () {
      _this.firebase_.INTERNAL.removeApp(_this.name_);

      var services = [];

      for (var _i = 0, _a = Object.keys(_this.services_); _i < _a.length; _i++) {
        var serviceKey = _a[_i];

        for (var _b = 0, _c = Object.keys(_this.services_[serviceKey]); _b < _c.length; _b++) {
          var instanceKey = _c[_b];
          services.push(_this.services_[serviceKey][instanceKey]);
        }
      }

      return Promise.all(services.filter(function (service) {
        return 'INTERNAL' in service;
      }).map(function (service) {
        return service.INTERNAL.delete();
      }));
    }).then(function () {
      _this.isDeleted_ = true;
      _this.services_ = {};
    });
  };
  /**
   * Return a service instance associated with this app (creating it
   * on demand), identified by the passed instanceIdentifier.
   *
   * NOTE: Currently storage is the only one that is leveraging this
   * functionality. They invoke it by calling:
   *
   * ```javascript
   * firebase.app().storage('STORAGE BUCKET ID')
   * ```
   *
   * The service name is passed to this already
   * @internal
   */


  FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {
    if (instanceIdentifier === void 0) {
      instanceIdentifier = DEFAULT_ENTRY_NAME;
    }

    this.checkDestroyed_();

    if (!this.services_[name]) {
      this.services_[name] = {};
    }

    if (!this.services_[name][instanceIdentifier]) {
      /**
       * If a custom instance has been defined (i.e. not '[DEFAULT]')
       * then we will pass that instance on, otherwise we pass `null`
       */
      var instanceSpecifier = instanceIdentifier !== DEFAULT_ENTRY_NAME ? instanceIdentifier : undefined;
      var service = this.firebase_.INTERNAL.factories[name](this, this.extendApp.bind(this), instanceSpecifier);
      this.services_[name][instanceIdentifier] = service;
    }

    return this.services_[name][instanceIdentifier];
  };
  /**
   * Callback function used to extend an App instance at the time
   * of service instance creation.
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any


  FirebaseAppImpl.prototype.extendApp = function (props) {
    var _this = this; // Copy the object onto the FirebaseAppImpl prototype


    util.deepExtend(this, props);
    /**
     * If the app has overwritten the addAuthTokenListener stub, forward
     * the active token listeners on to the true fxn.
     *
     * TODO: This function is required due to our current module
     * structure. Once we are able to rely strictly upon a single module
     * implementation, this code should be refactored and Auth should
     * provide these stubs and the upgrade logic
     */

    if (props.INTERNAL && props.INTERNAL.addAuthTokenListener) {
      tokenListeners.forEach(function (listener) {
        _this.INTERNAL.addAuthTokenListener(listener);
      });
      tokenListeners = [];
    }
  };
  /**
   * This function will throw an Error if the App has already been deleted -
   * use before performing API actions on the App.
   */


  FirebaseAppImpl.prototype.checkDestroyed_ = function () {
    if (this.isDeleted_) {
      throw ERROR_FACTORY.create("app-deleted"
      /* APP_DELETED */
      , {
        name: this.name_
      });
    }
  };

  return FirebaseAppImpl;
}(); // Prevent dead-code elimination of these methods w/o invalid property
// copying.


FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options || FirebaseAppImpl.prototype.delete || console.log('dc');
var version = "6.2.3";
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Because auth can't share code with other components, we attach the utility functions
 * in an internal namespace to share code.
 * This function return a firebase namespace object without
 * any utility functions, so it can be shared between the regular firebaseNamespace and
 * the lite version.
 */

function createFirebaseNamespaceCore(firebaseAppImpl) {
  var apps = {};
  var factories = {};
  var appHooks = {}; // A namespace is a plain JavaScript Object.

  var namespace = {
    // Hack to prevent Babel from modifying the object returned
    // as the firebase namespace.
    // @ts-ignore
    __esModule: true,
    initializeApp: initializeApp,
    // @ts-ignore
    app: app,
    // @ts-ignore
    apps: null,
    SDK_VERSION: version,
    INTERNAL: {
      registerService: registerService,
      removeApp: removeApp,
      factories: factories,
      useAsService: useAsService
    }
  }; // Inject a circular default export to allow Babel users who were previously
  // using:
  //
  //   import firebase from 'firebase';
  //   which becomes: var firebase = require('firebase').default;
  //
  // instead of
  //
  //   import * as firebase from 'firebase';
  //   which becomes: var firebase = require('firebase');
  // eslint-disable-next-line @typescript-eslint/no-explicit-any

  namespace['default'] = namespace; // firebase.apps is a read-only getter.

  Object.defineProperty(namespace, 'apps', {
    get: getApps
  });
  /**
   * Called by App.delete() - but before any services associated with the App
   * are deleted.
   */

  function removeApp(name) {
    var app = apps[name];
    callAppHooks(app, 'delete');
    delete apps[name];
  }
  /**
   * Get the App object for a given name (or DEFAULT).
   */


  function app(name) {
    name = name || DEFAULT_ENTRY_NAME;

    if (!util.contains(apps, name)) {
      throw ERROR_FACTORY.create("no-app"
      /* NO_APP */
      , {
        name: name
      });
    }

    return apps[name];
  } // @ts-ignore


  app['App'] = firebaseAppImpl;

  function initializeApp(options, rawConfig) {
    if (rawConfig === void 0) {
      rawConfig = {};
    }

    if (typeof rawConfig !== 'object' || rawConfig === null) {
      var name_1 = rawConfig;
      rawConfig = {
        name: name_1
      };
    }

    var config = rawConfig;

    if (config.name === undefined) {
      config.name = DEFAULT_ENTRY_NAME;
    }

    var name = config.name;

    if (typeof name !== 'string' || !name) {
      throw ERROR_FACTORY.create("bad-app-name"
      /* BAD_APP_NAME */
      , {
        name: String(name)
      });
    }

    if (util.contains(apps, name)) {
      throw ERROR_FACTORY.create("duplicate-app"
      /* DUPLICATE_APP */
      , {
        name: name
      });
    }

    var app = new firebaseAppImpl(options, config, namespace);
    apps[name] = app;
    callAppHooks(app, 'create');
    return app;
  }
  /*
   * Return an array of all the non-deleted FirebaseApps.
   */


  function getApps() {
    // Make a copy so caller cannot mutate the apps list.
    return Object.keys(apps).map(function (name) {
      return apps[name];
    });
  }
  /*
   * Register a Firebase Service.
   *
   * firebase.INTERNAL.registerService()
   *
   * TODO: Implement serviceProperties.
   */


  function registerService(name, createService, serviceProperties, appHook, allowMultipleInstances) {
    if (allowMultipleInstances === void 0) {
      allowMultipleInstances = false;
    } // Cannot re-register a service that already exists


    if (factories[name]) {
      throw ERROR_FACTORY.create("duplicate-service"
      /* DUPLICATE_SERVICE */
      , {
        name: name
      });
    } // Capture the service factory for later service instantiation


    factories[name] = createService; // Capture the appHook, if passed

    if (appHook) {
      appHooks[name] = appHook; // Run the **new** app hook on all existing apps

      getApps().forEach(function (app) {
        appHook('create', app);
      });
    } // The Service namespace is an accessor function ...


    function serviceNamespace(appArg) {
      if (appArg === void 0) {
        appArg = app();
      } // @ts-ignore


      if (typeof appArg[name] !== 'function') {
        // Invalid argument.
        // This happens in the following case: firebase.storage('gs:/')
        throw ERROR_FACTORY.create("invalid-app-argument"
        /* INVALID_APP_ARGUMENT */
        , {
          name: name
        });
      } // Forward service instance lookup to the FirebaseApp.
      // @ts-ignore


      return appArg[name]();
    } // ... and a container for service-level properties.


    if (serviceProperties !== undefined) {
      util.deepExtend(serviceNamespace, serviceProperties);
    } // Monkey-patch the serviceNamespace onto the firebase namespace
    // @ts-ignore


    namespace[name] = serviceNamespace; // Patch the FirebaseAppImpl prototype
    // @ts-ignore

    firebaseAppImpl.prototype[name] = function () {
      var args = [];

      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }

      var serviceFxn = this._getService.bind(this, name);

      return serviceFxn.apply(this, allowMultipleInstances ? args : []);
    };

    return serviceNamespace;
  }

  function callAppHooks(app, eventName) {
    for (var _i = 0, _a = Object.keys(factories); _i < _a.length; _i++) {
      var serviceName = _a[_i]; // Ignore virtual services

      var factoryName = useAsService(app, serviceName);

      if (factoryName === null) {
        return;
      }

      if (appHooks[factoryName]) {
        appHooks[factoryName](eventName, app);
      }
    }
  } // Map the requested service to a registered service name
  // (used to map auth to serverAuth service when needed).


  function useAsService(app, name) {
    if (name === 'serverAuth') {
      return null;
    }

    var useService = name;
    return useService;
  }

  return namespace;
}
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Return a firebase namespace object.
 *
 * In production, this will be called exactly once and the result
 * assigned to the 'firebase' global.  It may be called multiple times
 * in unit tests.
 */


function createFirebaseNamespace() {
  var namespace = createFirebaseNamespaceCore(FirebaseAppImpl);
  namespace.INTERNAL = tslib_1.__assign({}, namespace.INTERNAL, {
    createFirebaseNamespace: createFirebaseNamespace,
    extendNamespace: extendNamespace,
    createSubscribe: util.createSubscribe,
    ErrorFactory: util.ErrorFactory,
    deepExtend: util.deepExtend
  });
  /**
   * Patch the top-level firebase namespace with additional properties.
   *
   * firebase.INTERNAL.extendNamespace()
   */

  function extendNamespace(props) {
    util.deepExtend(namespace, props);
  }

  return namespace;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var logger = new logger$1.Logger('@firebase/app'); // Firebase Lite detection
// eslint-disable-next-line @typescript-eslint/no-explicit-any

if (util.isBrowser() && self.firebase !== undefined) {
  logger.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  "); // eslint-disable-next-line

  var sdkVersion = self.firebase.SDK_VERSION;

  if (sdkVersion && sdkVersion.indexOf('LITE') >= 0) {
    logger.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ");
  }
}

var firebaseNamespace = createFirebaseNamespace();
var initializeApp = firebaseNamespace.initializeApp;

firebaseNamespace.initializeApp = function () {
  // Environment check before initializing app
  // Do the check in initializeApp, so people have a chance to disable it by setting logLevel
  // in @firebase/logger
  if (util.isNode()) {
    logger.warn("\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the \"main\" field in package.json.\n      \n      If you are using Webpack, you can specify \"main\" as the first item in\n      \"resolve.mainFields\":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the rollup-plugin-node-resolve plugin and set \"module\"\n      to false and \"main\" to true:\n      https://github.com/rollup/rollup-plugin-node-resolve\n      ");
  }

  return initializeApp.apply(undefined, arguments);
};

var firebase = firebaseNamespace;
exports.default = firebase;
exports.firebase = firebase;

/***/ }),

/***/ "./node_modules/@firebase/auth/dist/auth.esm.js":
/*!******************************************************!*\
  !*** ./node_modules/@firebase/auth/dist/auth.esm.js ***!
  \******************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony import */ var _firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/app */ "./node_modules/@firebase/app/dist/index.cjs.js");
/* harmony import */ var _firebase_app__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_firebase_app__WEBPACK_IMPORTED_MODULE_0__);

(function () {
  var k,
      aa = "function" == typeof Object.defineProperties ? Object.defineProperty : function (a, b, c) {
    a != Array.prototype && a != Object.prototype && (a[b] = c.value);
  },
      ba = "undefined" != typeof window && window === this ? this : "undefined" != typeof global && null != global ? global : this;

  function ca(a, b) {
    if (b) {
      var c = ba;
      a = a.split(".");

      for (var d = 0; d < a.length - 1; d++) {
        var e = a[d];
        e in c || (c[e] = {});
        c = c[e];
      }

      a = a[a.length - 1];
      d = c[a];
      b = b(d);
      b != d && null != b && aa(c, a, {
        configurable: !0,
        writable: !0,
        value: b
      });
    }
  }

  function da(a) {
    var b = 0;
    return function () {
      return b < a.length ? {
        done: !1,
        value: a[b++]
      } : {
        done: !0
      };
    };
  }

  function ea(a) {
    var b = "undefined" != typeof Symbol && Symbol.iterator && a[Symbol.iterator];
    return b ? b.call(a) : {
      next: da(a)
    };
  }

  ca("Promise", function (a) {
    function b(g) {
      this.b = 0;
      this.c = void 0;
      this.a = [];
      var h = this.f();

      try {
        g(h.resolve, h.reject);
      } catch (m) {
        h.reject(m);
      }
    }

    function c() {
      this.a = null;
    }

    function d(g) {
      return g instanceof b ? g : new b(function (h) {
        h(g);
      });
    }

    if (a) return a;

    c.prototype.b = function (g) {
      if (null == this.a) {
        this.a = [];
        var h = this;
        this.c(function () {
          h.g();
        });
      }

      this.a.push(g);
    };

    var e = ba.setTimeout;

    c.prototype.c = function (g) {
      e(g, 0);
    };

    c.prototype.g = function () {
      for (; this.a && this.a.length;) {
        var g = this.a;
        this.a = [];

        for (var h = 0; h < g.length; ++h) {
          var m = g[h];
          g[h] = null;

          try {
            m();
          } catch (p) {
            this.f(p);
          }
        }
      }

      this.a = null;
    };

    c.prototype.f = function (g) {
      this.c(function () {
        throw g;
      });
    };

    b.prototype.f = function () {
      function g(p) {
        return function (v) {
          m || (m = !0, p.call(h, v));
        };
      }

      var h = this,
          m = !1;
      return {
        resolve: g(this.o),
        reject: g(this.g)
      };
    };

    b.prototype.o = function (g) {
      if (g === this) this.g(new TypeError("A Promise cannot resolve to itself"));else if (g instanceof b) this.u(g);else {
        a: switch (typeof g) {
          case "object":
            var h = null != g;
            break a;

          case "function":
            h = !0;
            break a;

          default:
            h = !1;
        }

        h ? this.l(g) : this.h(g);
      }
    };

    b.prototype.l = function (g) {
      var h = void 0;

      try {
        h = g.then;
      } catch (m) {
        this.g(m);
        return;
      }

      "function" == typeof h ? this.v(h, g) : this.h(g);
    };

    b.prototype.g = function (g) {
      this.i(2, g);
    };

    b.prototype.h = function (g) {
      this.i(1, g);
    };

    b.prototype.i = function (g, h) {
      if (0 != this.b) throw Error("Cannot settle(" + g + ", " + h + "): Promise already settled in state" + this.b);
      this.b = g;
      this.c = h;
      this.m();
    };

    b.prototype.m = function () {
      if (null != this.a) {
        for (var g = 0; g < this.a.length; ++g) f.b(this.a[g]);

        this.a = null;
      }
    };

    var f = new c();

    b.prototype.u = function (g) {
      var h = this.f();
      g.Ja(h.resolve, h.reject);
    };

    b.prototype.v = function (g, h) {
      var m = this.f();

      try {
        g.call(h, m.resolve, m.reject);
      } catch (p) {
        m.reject(p);
      }
    };

    b.prototype.then = function (g, h) {
      function m(H, U) {
        return "function" == typeof H ? function (ta) {
          try {
            p(H(ta));
          } catch (ld) {
            v(ld);
          }
        } : U;
      }

      var p,
          v,
          z = new b(function (H, U) {
        p = H;
        v = U;
      });
      this.Ja(m(g, p), m(h, v));
      return z;
    };

    b.prototype.catch = function (g) {
      return this.then(void 0, g);
    };

    b.prototype.Ja = function (g, h) {
      function m() {
        switch (p.b) {
          case 1:
            g(p.c);
            break;

          case 2:
            h(p.c);
            break;

          default:
            throw Error("Unexpected state: " + p.b);
        }
      }

      var p = this;
      null == this.a ? f.b(m) : this.a.push(m);
    };

    b.resolve = d;

    b.reject = function (g) {
      return new b(function (h, m) {
        m(g);
      });
    };

    b.race = function (g) {
      return new b(function (h, m) {
        for (var p = ea(g), v = p.next(); !v.done; v = p.next()) d(v.value).Ja(h, m);
      });
    };

    b.all = function (g) {
      var h = ea(g),
          m = h.next();
      return m.done ? d([]) : new b(function (p, v) {
        function z(ta) {
          return function (ld) {
            H[ta] = ld;
            U--;
            0 == U && p(H);
          };
        }

        var H = [],
            U = 0;

        do H.push(void 0), U++, d(m.value).Ja(z(H.length - 1), v), m = h.next(); while (!m.done);
      });
    };

    return b;
  });
  var fa = fa || {},
      l = this;

  function n(a) {
    return "string" == typeof a;
  }

  function ha(a) {
    return "boolean" == typeof a;
  }

  var ia = /^[\w+/_-]+[=]{0,2}$/,
      ja = null;

  function ka() {}

  function la(a) {
    var b = typeof a;
    if ("object" == b) {
      if (a) {
        if (a instanceof Array) return "array";
        if (a instanceof Object) return b;
        var c = Object.prototype.toString.call(a);
        if ("[object Window]" == c) return "object";
        if ("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) return "array";
        if ("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) return "function";
      } else return "null";
    } else if ("function" == b && "undefined" == typeof a.call) return "object";
    return b;
  }

  function ma(a) {
    return null === a;
  }

  function na(a) {
    return "array" == la(a);
  }

  function oa(a) {
    var b = la(a);
    return "array" == b || "object" == b && "number" == typeof a.length;
  }

  function q(a) {
    return "function" == la(a);
  }

  function r(a) {
    var b = typeof a;
    return "object" == b && null != a || "function" == b;
  }

  var pa = "closure_uid_" + (1E9 * Math.random() >>> 0),
      qa = 0;

  function ra(a, b, c) {
    return a.call.apply(a.bind, arguments);
  }

  function sa(a, b, c) {
    if (!a) throw Error();

    if (2 < arguments.length) {
      var d = Array.prototype.slice.call(arguments, 2);
      return function () {
        var e = Array.prototype.slice.call(arguments);
        Array.prototype.unshift.apply(e, d);
        return a.apply(b, e);
      };
    }

    return function () {
      return a.apply(b, arguments);
    };
  }

  function t(a, b, c) {
    Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? t = ra : t = sa;
    return t.apply(null, arguments);
  }

  function ua(a, b) {
    var c = Array.prototype.slice.call(arguments, 1);
    return function () {
      var d = c.slice();
      d.push.apply(d, arguments);
      return a.apply(this, d);
    };
  }

  var va = Date.now || function () {
    return +new Date();
  };

  function u(a, b) {
    function c() {}

    c.prototype = b.prototype;
    a.qb = b.prototype;
    a.prototype = new c();
    a.prototype.constructor = a;

    a.cd = function (d, e, f) {
      for (var g = Array(arguments.length - 2), h = 2; h < arguments.length; h++) g[h - 2] = arguments[h];

      return b.prototype[e].apply(d, g);
    };
  }

  ;

  function wa(a) {
    if (!a) return !1;

    try {
      return !!a.$goog_Thenable;
    } catch (b) {
      return !1;
    }
  }

  ;

  function w(a) {
    if (Error.captureStackTrace) Error.captureStackTrace(this, w);else {
      var b = Error().stack;
      b && (this.stack = b);
    }
    a && (this.message = String(a));
  }

  u(w, Error);
  w.prototype.name = "CustomError";

  function xa(a, b) {
    a = a.split("%s");

    for (var c = "", d = a.length - 1, e = 0; e < d; e++) c += a[e] + (e < b.length ? b[e] : "%s");

    w.call(this, c + a[d]);
  }

  u(xa, w);
  xa.prototype.name = "AssertionError";

  function ya(a, b) {
    throw new xa("Failure" + (a ? ": " + a : ""), Array.prototype.slice.call(arguments, 1));
  }

  ;

  function za(a, b) {
    this.c = a;
    this.f = b;
    this.b = 0;
    this.a = null;
  }

  za.prototype.get = function () {
    if (0 < this.b) {
      this.b--;
      var a = this.a;
      this.a = a.next;
      a.next = null;
    } else a = this.c();

    return a;
  };

  function Aa(a, b) {
    a.f(b);
    100 > a.b && (a.b++, b.next = a.a, a.a = b);
  }

  ;

  function Ba() {
    this.b = this.a = null;
  }

  var Da = new za(function () {
    return new Ca();
  }, function (a) {
    a.reset();
  });

  Ba.prototype.add = function (a, b) {
    var c = Da.get();
    c.set(a, b);
    this.b ? this.b.next = c : this.a = c;
    this.b = c;
  };

  function Ea() {
    var a = Fa,
        b = null;
    a.a && (b = a.a, a.a = a.a.next, a.a || (a.b = null), b.next = null);
    return b;
  }

  function Ca() {
    this.next = this.b = this.a = null;
  }

  Ca.prototype.set = function (a, b) {
    this.a = a;
    this.b = b;
    this.next = null;
  };

  Ca.prototype.reset = function () {
    this.next = this.b = this.a = null;
  };

  var Ga = Array.prototype.indexOf ? function (a, b) {
    return Array.prototype.indexOf.call(a, b, void 0);
  } : function (a, b) {
    if (n(a)) return n(b) && 1 == b.length ? a.indexOf(b, 0) : -1;

    for (var c = 0; c < a.length; c++) if (c in a && a[c] === b) return c;

    return -1;
  },
      x = Array.prototype.forEach ? function (a, b, c) {
    Array.prototype.forEach.call(a, b, c);
  } : function (a, b, c) {
    for (var d = a.length, e = n(a) ? a.split("") : a, f = 0; f < d; f++) f in e && b.call(c, e[f], f, a);
  };

  function Ha(a, b) {
    for (var c = n(a) ? a.split("") : a, d = a.length - 1; 0 <= d; --d) d in c && b.call(void 0, c[d], d, a);
  }

  var Ia = Array.prototype.map ? function (a, b) {
    return Array.prototype.map.call(a, b, void 0);
  } : function (a, b) {
    for (var c = a.length, d = Array(c), e = n(a) ? a.split("") : a, f = 0; f < c; f++) f in e && (d[f] = b.call(void 0, e[f], f, a));

    return d;
  },
      Ja = Array.prototype.some ? function (a, b) {
    return Array.prototype.some.call(a, b, void 0);
  } : function (a, b) {
    for (var c = a.length, d = n(a) ? a.split("") : a, e = 0; e < c; e++) if (e in d && b.call(void 0, d[e], e, a)) return !0;

    return !1;
  };

  function Ka(a) {
    a: {
      var b = La;

      for (var c = a.length, d = n(a) ? a.split("") : a, e = 0; e < c; e++) if (e in d && b.call(void 0, d[e], e, a)) {
        b = e;
        break a;
      }

      b = -1;
    }

    return 0 > b ? null : n(a) ? a.charAt(b) : a[b];
  }

  function Ma(a, b) {
    return 0 <= Ga(a, b);
  }

  function Na(a, b) {
    b = Ga(a, b);
    var c;
    (c = 0 <= b) && Array.prototype.splice.call(a, b, 1);
    return c;
  }

  function y(a, b) {
    var c = 0;
    Ha(a, function (d, e) {
      b.call(void 0, d, e, a) && 1 == Array.prototype.splice.call(a, e, 1).length && c++;
    });
  }

  function Oa(a) {
    return Array.prototype.concat.apply([], arguments);
  }

  function Pa(a) {
    var b = a.length;

    if (0 < b) {
      for (var c = Array(b), d = 0; d < b; d++) c[d] = a[d];

      return c;
    }

    return [];
  }

  ;
  var Qa = String.prototype.trim ? function (a) {
    return a.trim();
  } : function (a) {
    return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1];
  },
      Ra = /&/g,
      Sa = /</g,
      Ta = />/g,
      Ua = /"/g,
      Va = /'/g,
      Wa = /\x00/g,
      Xa = /[\x00&<>"']/;

  function A(a, b) {
    return -1 != a.indexOf(b);
  }

  function Ya(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }

  ;
  var Za;

  a: {
    var $a = l.navigator;

    if ($a) {
      var ab = $a.userAgent;

      if (ab) {
        Za = ab;
        break a;
      }
    }

    Za = "";
  }

  function B(a) {
    return A(Za, a);
  }

  ;

  function bb(a, b) {
    for (var c in a) b.call(void 0, a[c], c, a);
  }

  function cb(a) {
    for (var b in a) return !1;

    return !0;
  }

  function db(a) {
    var b = {},
        c;

    for (c in a) b[c] = a[c];

    return b;
  }

  var eb = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");

  function fb(a, b) {
    for (var c, d, e = 1; e < arguments.length; e++) {
      d = arguments[e];

      for (c in d) a[c] = d[c];

      for (var f = 0; f < eb.length; f++) c = eb[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
    }
  }

  ;

  function gb(a, b) {
    for (var c = a.split("%s"), d = "", e = Array.prototype.slice.call(arguments, 1); e.length && 1 < c.length;) d += c.shift() + e.shift();

    return d + c.join("%s");
  }

  function hb(a) {
    Xa.test(a) && (-1 != a.indexOf("&") && (a = a.replace(Ra, "&amp;")), -1 != a.indexOf("<") && (a = a.replace(Sa, "&lt;")), -1 != a.indexOf(">") && (a = a.replace(Ta, "&gt;")), -1 != a.indexOf('"') && (a = a.replace(Ua, "&quot;")), -1 != a.indexOf("'") && (a = a.replace(Va, "&#39;")), -1 != a.indexOf("\x00") && (a = a.replace(Wa, "&#0;")));
    return a;
  }

  ;

  function ib(a) {
    l.setTimeout(function () {
      throw a;
    }, 0);
  }

  var jb;

  function kb() {
    var a = l.MessageChannel;
    "undefined" === typeof a && "undefined" !== typeof window && window.postMessage && window.addEventListener && !B("Presto") && (a = function () {
      var e = document.createElement("IFRAME");
      e.style.display = "none";
      e.src = "";
      document.documentElement.appendChild(e);
      var f = e.contentWindow;
      e = f.document;
      e.open();
      e.write("");
      e.close();
      var g = "callImmediate" + Math.random(),
          h = "file:" == f.location.protocol ? "*" : f.location.protocol + "//" + f.location.host;
      e = t(function (m) {
        if (("*" == h || m.origin == h) && m.data == g) this.port1.onmessage();
      }, this);
      f.addEventListener("message", e, !1);
      this.port1 = {};
      this.port2 = {
        postMessage: function () {
          f.postMessage(g, h);
        }
      };
    });

    if ("undefined" !== typeof a && !B("Trident") && !B("MSIE")) {
      var b = new a(),
          c = {},
          d = c;

      b.port1.onmessage = function () {
        if (void 0 !== c.next) {
          c = c.next;
          var e = c.yb;
          c.yb = null;
          e();
        }
      };

      return function (e) {
        d.next = {
          yb: e
        };
        d = d.next;
        b.port2.postMessage(0);
      };
    }

    return "undefined" !== typeof document && "onreadystatechange" in document.createElement("SCRIPT") ? function (e) {
      var f = document.createElement("SCRIPT");

      f.onreadystatechange = function () {
        f.onreadystatechange = null;
        f.parentNode.removeChild(f);
        f = null;
        e();
        e = null;
      };

      document.documentElement.appendChild(f);
    } : function (e) {
      l.setTimeout(e, 0);
    };
  }

  ;

  function lb(a, b) {
    mb || nb();
    ob || (mb(), ob = !0);
    Fa.add(a, b);
  }

  var mb;

  function nb() {
    if (l.Promise && l.Promise.resolve) {
      var a = l.Promise.resolve(void 0);

      mb = function () {
        a.then(pb);
      };
    } else mb = function () {
      var b = pb;
      !q(l.setImmediate) || l.Window && l.Window.prototype && !B("Edge") && l.Window.prototype.setImmediate == l.setImmediate ? (jb || (jb = kb()), jb(b)) : l.setImmediate(b);
    };
  }

  var ob = !1,
      Fa = new Ba();

  function pb() {
    for (var a; a = Ea();) {
      try {
        a.a.call(a.b);
      } catch (b) {
        ib(b);
      }

      Aa(Da, a);
    }

    ob = !1;
  }

  ;

  function C(a, b) {
    this.a = qb;
    this.i = void 0;
    this.f = this.b = this.c = null;
    this.g = this.h = !1;
    if (a != ka) try {
      var c = this;
      a.call(b, function (d) {
        rb(c, sb, d);
      }, function (d) {
        if (!(d instanceof tb)) try {
          if (d instanceof Error) throw d;
          throw Error("Promise rejected.");
        } catch (e) {}
        rb(c, ub, d);
      });
    } catch (d) {
      rb(this, ub, d);
    }
  }

  var qb = 0,
      sb = 2,
      ub = 3;

  function vb() {
    this.next = this.f = this.b = this.g = this.a = null;
    this.c = !1;
  }

  vb.prototype.reset = function () {
    this.f = this.b = this.g = this.a = null;
    this.c = !1;
  };

  var wb = new za(function () {
    return new vb();
  }, function (a) {
    a.reset();
  });

  function xb(a, b, c) {
    var d = wb.get();
    d.g = a;
    d.b = b;
    d.f = c;
    return d;
  }

  function D(a) {
    if (a instanceof C) return a;
    var b = new C(ka);
    rb(b, sb, a);
    return b;
  }

  function E(a) {
    return new C(function (b, c) {
      c(a);
    });
  }

  function yb(a, b, c) {
    zb(a, b, c, null) || lb(ua(b, a));
  }

  function Ab(a) {
    return new C(function (b, c) {
      var d = a.length,
          e = [];
      if (d) for (var f = function (p, v) {
        d--;
        e[p] = v;
        0 == d && b(e);
      }, g = function (p) {
        c(p);
      }, h = 0, m; h < a.length; h++) m = a[h], yb(m, ua(f, h), g);else b(e);
    });
  }

  function Bb(a) {
    return new C(function (b) {
      var c = a.length,
          d = [];
      if (c) for (var e = function (h, m, p) {
        c--;
        d[h] = m ? {
          Eb: !0,
          value: p
        } : {
          Eb: !1,
          reason: p
        };
        0 == c && b(d);
      }, f = 0, g; f < a.length; f++) g = a[f], yb(g, ua(e, f, !0), ua(e, f, !1));else b(d);
    });
  }

  C.prototype.then = function (a, b, c) {
    return Cb(this, q(a) ? a : null, q(b) ? b : null, c);
  };

  C.prototype.$goog_Thenable = !0;
  k = C.prototype;

  k.ia = function (a, b) {
    a = xb(a, a, b);
    a.c = !0;
    Db(this, a);
    return this;
  };

  k.s = function (a, b) {
    return Cb(this, null, a, b);
  };

  k.cancel = function (a) {
    this.a == qb && lb(function () {
      var b = new tb(a);
      Eb(this, b);
    }, this);
  };

  function Eb(a, b) {
    if (a.a == qb) if (a.c) {
      var c = a.c;

      if (c.b) {
        for (var d = 0, e = null, f = null, g = c.b; g && (g.c || (d++, g.a == a && (e = g), !(e && 1 < d))); g = g.next) e || (f = g);

        e && (c.a == qb && 1 == d ? Eb(c, b) : (f ? (d = f, d.next == c.f && (c.f = d), d.next = d.next.next) : Fb(c), Gb(c, e, ub, b)));
      }

      a.c = null;
    } else rb(a, ub, b);
  }

  function Db(a, b) {
    a.b || a.a != sb && a.a != ub || Hb(a);
    a.f ? a.f.next = b : a.b = b;
    a.f = b;
  }

  function Cb(a, b, c, d) {
    var e = xb(null, null, null);
    e.a = new C(function (f, g) {
      e.g = b ? function (h) {
        try {
          var m = b.call(d, h);
          f(m);
        } catch (p) {
          g(p);
        }
      } : f;
      e.b = c ? function (h) {
        try {
          var m = c.call(d, h);
          void 0 === m && h instanceof tb ? g(h) : f(m);
        } catch (p) {
          g(p);
        }
      } : g;
    });
    e.a.c = a;
    Db(a, e);
    return e.a;
  }

  k.Lc = function (a) {
    this.a = qb;
    rb(this, sb, a);
  };

  k.Mc = function (a) {
    this.a = qb;
    rb(this, ub, a);
  };

  function rb(a, b, c) {
    a.a == qb && (a === c && (b = ub, c = new TypeError("Promise cannot resolve to itself")), a.a = 1, zb(c, a.Lc, a.Mc, a) || (a.i = c, a.a = b, a.c = null, Hb(a), b != ub || c instanceof tb || Ib(a, c)));
  }

  function zb(a, b, c, d) {
    if (a instanceof C) return Db(a, xb(b || ka, c || null, d)), !0;
    if (wa(a)) return a.then(b, c, d), !0;
    if (r(a)) try {
      var e = a.then;
      if (q(e)) return Jb(a, e, b, c, d), !0;
    } catch (f) {
      return c.call(d, f), !0;
    }
    return !1;
  }

  function Jb(a, b, c, d, e) {
    function f(m) {
      h || (h = !0, d.call(e, m));
    }

    function g(m) {
      h || (h = !0, c.call(e, m));
    }

    var h = !1;

    try {
      b.call(a, g, f);
    } catch (m) {
      f(m);
    }
  }

  function Hb(a) {
    a.h || (a.h = !0, lb(a.Xb, a));
  }

  function Fb(a) {
    var b = null;
    a.b && (b = a.b, a.b = b.next, b.next = null);
    a.b || (a.f = null);
    return b;
  }

  k.Xb = function () {
    for (var a; a = Fb(this);) Gb(this, a, this.a, this.i);

    this.h = !1;
  };

  function Gb(a, b, c, d) {
    if (c == ub && b.b && !b.c) for (; a && a.g; a = a.c) a.g = !1;
    if (b.a) b.a.c = null, Kb(b, c, d);else try {
      b.c ? b.g.call(b.f) : Kb(b, c, d);
    } catch (e) {
      Lb.call(null, e);
    }
    Aa(wb, b);
  }

  function Kb(a, b, c) {
    b == sb ? a.g.call(a.f, c) : a.b && a.b.call(a.f, c);
  }

  function Ib(a, b) {
    a.g = !0;
    lb(function () {
      a.g && Lb.call(null, b);
    });
  }

  var Lb = ib;

  function tb(a) {
    w.call(this, a);
  }

  u(tb, w);
  tb.prototype.name = "cancel";

  function Mb() {
    0 != Nb && (Ob[this[pa] || (this[pa] = ++qa)] = this);
    this.qa = this.qa;
    this.ja = this.ja;
  }

  var Nb = 0,
      Ob = {};
  Mb.prototype.qa = !1;

  function Pb(a) {
    if (!a.qa && (a.qa = !0, a.va(), 0 != Nb)) {
      var b = a[pa] || (a[pa] = ++qa);
      if (0 != Nb && a.ja && 0 < a.ja.length) throw Error(a + " did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");
      delete Ob[b];
    }
  }

  Mb.prototype.va = function () {
    if (this.ja) for (; this.ja.length;) this.ja.shift()();
  };

  function Qb(a) {
    Qb[" "](a);
    return a;
  }

  Qb[" "] = ka;

  function Rb(a, b) {
    var c = Sb;
    return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a);
  }

  ;
  var Tb = B("Opera"),
      Ub = B("Trident") || B("MSIE"),
      Vb = B("Edge"),
      Wb = Vb || Ub,
      Xb = B("Gecko") && !(A(Za.toLowerCase(), "webkit") && !B("Edge")) && !(B("Trident") || B("MSIE")) && !B("Edge"),
      Yb = A(Za.toLowerCase(), "webkit") && !B("Edge");

  function Zb() {
    var a = l.document;
    return a ? a.documentMode : void 0;
  }

  var $b;

  a: {
    var ac = "",
        bc = function () {
      var a = Za;
      if (Xb) return /rv:([^\);]+)(\)|;)/.exec(a);
      if (Vb) return /Edge\/([\d\.]+)/.exec(a);
      if (Ub) return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);
      if (Yb) return /WebKit\/(\S+)/.exec(a);
      if (Tb) return /(?:Version)[ \/]?(\S+)/.exec(a);
    }();

    bc && (ac = bc ? bc[1] : "");

    if (Ub) {
      var cc = Zb();

      if (null != cc && cc > parseFloat(ac)) {
        $b = String(cc);
        break a;
      }
    }

    $b = ac;
  }

  var Sb = {};

  function dc(a) {
    return Rb(a, function () {
      for (var b = 0, c = Qa(String($b)).split("."), d = Qa(String(a)).split("."), e = Math.max(c.length, d.length), f = 0; 0 == b && f < e; f++) {
        var g = c[f] || "",
            h = d[f] || "";

        do {
          g = /(\d*)(\D*)(.*)/.exec(g) || ["", "", "", ""];
          h = /(\d*)(\D*)(.*)/.exec(h) || ["", "", "", ""];
          if (0 == g[0].length && 0 == h[0].length) break;
          b = Ya(0 == g[1].length ? 0 : parseInt(g[1], 10), 0 == h[1].length ? 0 : parseInt(h[1], 10)) || Ya(0 == g[2].length, 0 == h[2].length) || Ya(g[2], h[2]);
          g = g[3];
          h = h[3];
        } while (0 == b);
      }

      return 0 <= b;
    });
  }

  var ec;
  var fc = l.document;
  ec = fc && Ub ? Zb() || ("CSS1Compat" == fc.compatMode ? parseInt($b, 10) : 5) : void 0;

  var gc = Object.freeze || function (a) {
    return a;
  };

  var hc = !Ub || 9 <= Number(ec),
      ic = Ub && !dc("9"),
      jc = function () {
    if (!l.addEventListener || !Object.defineProperty) return !1;
    var a = !1,
        b = Object.defineProperty({}, "passive", {
      get: function () {
        a = !0;
      }
    });

    try {
      l.addEventListener("test", ka, b), l.removeEventListener("test", ka, b);
    } catch (c) {}

    return a;
  }();

  function kc(a, b) {
    this.type = a;
    this.b = this.target = b;
    this.Kb = !0;
  }

  kc.prototype.preventDefault = function () {
    this.Kb = !1;
  };

  function lc(a, b) {
    kc.call(this, a ? a.type : "");
    this.relatedTarget = this.b = this.target = null;
    this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
    this.key = "";
    this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;
    this.pointerId = 0;
    this.pointerType = "";
    this.a = null;

    if (a) {
      var c = this.type = a.type,
          d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
      this.target = a.target || a.srcElement;
      this.b = b;

      if (b = a.relatedTarget) {
        if (Xb) {
          a: {
            try {
              Qb(b.nodeName);
              var e = !0;
              break a;
            } catch (f) {}

            e = !1;
          }

          e || (b = null);
        }
      } else "mouseover" == c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);

      this.relatedTarget = b;
      d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
      this.button = a.button;
      this.key = a.key || "";
      this.ctrlKey = a.ctrlKey;
      this.altKey = a.altKey;
      this.shiftKey = a.shiftKey;
      this.metaKey = a.metaKey;
      this.pointerId = a.pointerId || 0;
      this.pointerType = n(a.pointerType) ? a.pointerType : mc[a.pointerType] || "";
      this.a = a;
      a.defaultPrevented && this.preventDefault();
    }
  }

  u(lc, kc);
  var mc = gc({
    2: "touch",
    3: "pen",
    4: "mouse"
  });

  lc.prototype.preventDefault = function () {
    lc.qb.preventDefault.call(this);
    var a = this.a;
    if (a.preventDefault) a.preventDefault();else if (a.returnValue = !1, ic) try {
      if (a.ctrlKey || 112 <= a.keyCode && 123 >= a.keyCode) a.keyCode = -1;
    } catch (b) {}
  };

  lc.prototype.f = function () {
    return this.a;
  };

  var nc = "closure_listenable_" + (1E6 * Math.random() | 0),
      oc = 0;

  function pc(a, b, c, d, e) {
    this.listener = a;
    this.proxy = null;
    this.src = b;
    this.type = c;
    this.capture = !!d;
    this.Na = e;
    this.key = ++oc;
    this.oa = this.Ia = !1;
  }

  function qc(a) {
    a.oa = !0;
    a.listener = null;
    a.proxy = null;
    a.src = null;
    a.Na = null;
  }

  ;

  function rc(a) {
    this.src = a;
    this.a = {};
    this.b = 0;
  }

  rc.prototype.add = function (a, b, c, d, e) {
    var f = a.toString();
    a = this.a[f];
    a || (a = this.a[f] = [], this.b++);
    var g = sc(a, b, d, e);
    -1 < g ? (b = a[g], c || (b.Ia = !1)) : (b = new pc(b, this.src, f, !!d, e), b.Ia = c, a.push(b));
    return b;
  };

  function tc(a, b) {
    var c = b.type;
    c in a.a && Na(a.a[c], b) && (qc(b), 0 == a.a[c].length && (delete a.a[c], a.b--));
  }

  function sc(a, b, c, d) {
    for (var e = 0; e < a.length; ++e) {
      var f = a[e];
      if (!f.oa && f.listener == b && f.capture == !!c && f.Na == d) return e;
    }

    return -1;
  }

  ;
  var uc = "closure_lm_" + (1E6 * Math.random() | 0),
      vc = {},
      wc = 0;

  function xc(a, b, c, d, e) {
    if (d && d.once) yc(a, b, c, d, e);else if (na(b)) for (var f = 0; f < b.length; f++) xc(a, b[f], c, d, e);else c = zc(c), a && a[nc] ? Ac(a, b, c, r(d) ? !!d.capture : !!d, e) : Bc(a, b, c, !1, d, e);
  }

  function Bc(a, b, c, d, e, f) {
    if (!b) throw Error("Invalid event type");
    var g = r(e) ? !!e.capture : !!e,
        h = Cc(a);
    h || (a[uc] = h = new rc(a));
    c = h.add(b, c, d, g, f);

    if (!c.proxy) {
      d = Dc();
      c.proxy = d;
      d.src = a;
      d.listener = c;
      if (a.addEventListener) jc || (e = g), void 0 === e && (e = !1), a.addEventListener(b.toString(), d, e);else if (a.attachEvent) a.attachEvent(Ec(b.toString()), d);else if (a.addListener && a.removeListener) a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");
      wc++;
    }
  }

  function Dc() {
    var a = Fc,
        b = hc ? function (c) {
      return a.call(b.src, b.listener, c);
    } : function (c) {
      c = a.call(b.src, b.listener, c);
      if (!c) return c;
    };
    return b;
  }

  function yc(a, b, c, d, e) {
    if (na(b)) for (var f = 0; f < b.length; f++) yc(a, b[f], c, d, e);else c = zc(c), a && a[nc] ? Gc(a, b, c, r(d) ? !!d.capture : !!d, e) : Bc(a, b, c, !0, d, e);
  }

  function Hc(a, b, c, d, e) {
    if (na(b)) for (var f = 0; f < b.length; f++) Hc(a, b[f], c, d, e);else (d = r(d) ? !!d.capture : !!d, c = zc(c), a && a[nc]) ? (a = a.m, b = String(b).toString(), b in a.a && (f = a.a[b], c = sc(f, c, d, e), -1 < c && (qc(f[c]), Array.prototype.splice.call(f, c, 1), 0 == f.length && (delete a.a[b], a.b--)))) : a && (a = Cc(a)) && (b = a.a[b.toString()], a = -1, b && (a = sc(b, c, d, e)), (c = -1 < a ? b[a] : null) && Ic(c));
  }

  function Ic(a) {
    if ("number" != typeof a && a && !a.oa) {
      var b = a.src;
      if (b && b[nc]) tc(b.m, a);else {
        var c = a.type,
            d = a.proxy;
        b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(Ec(c), d) : b.addListener && b.removeListener && b.removeListener(d);
        wc--;
        (c = Cc(b)) ? (tc(c, a), 0 == c.b && (c.src = null, b[uc] = null)) : qc(a);
      }
    }
  }

  function Ec(a) {
    return a in vc ? vc[a] : vc[a] = "on" + a;
  }

  function Jc(a, b, c, d) {
    var e = !0;
    if (a = Cc(a)) if (b = a.a[b.toString()]) for (b = b.concat(), a = 0; a < b.length; a++) {
      var f = b[a];
      f && f.capture == c && !f.oa && (f = Kc(f, d), e = e && !1 !== f);
    }
    return e;
  }

  function Kc(a, b) {
    var c = a.listener,
        d = a.Na || a.src;
    a.Ia && Ic(a);
    return c.call(d, b);
  }

  function Fc(a, b) {
    if (a.oa) return !0;

    if (!hc) {
      if (!b) a: {
        b = ["window", "event"];

        for (var c = l, d = 0; d < b.length; d++) if (c = c[b[d]], null == c) {
          b = null;
          break a;
        }

        b = c;
      }
      d = b;
      b = new lc(d, this);
      c = !0;

      if (!(0 > d.keyCode || void 0 != d.returnValue)) {
        a: {
          var e = !1;
          if (0 == d.keyCode) try {
            d.keyCode = -1;
            break a;
          } catch (g) {
            e = !0;
          }
          if (e || void 0 == d.returnValue) d.returnValue = !0;
        }

        d = [];

        for (e = b.b; e; e = e.parentNode) d.push(e);

        a = a.type;

        for (e = d.length - 1; 0 <= e; e--) {
          b.b = d[e];
          var f = Jc(d[e], a, !0, b);
          c = c && f;
        }

        for (e = 0; e < d.length; e++) b.b = d[e], f = Jc(d[e], a, !1, b), c = c && f;
      }

      return c;
    }

    return Kc(a, new lc(b, this));
  }

  function Cc(a) {
    a = a[uc];
    return a instanceof rc ? a : null;
  }

  var Lc = "__closure_events_fn_" + (1E9 * Math.random() >>> 0);

  function zc(a) {
    if (q(a)) return a;
    a[Lc] || (a[Lc] = function (b) {
      return a.handleEvent(b);
    });
    return a[Lc];
  }

  ;

  function F() {
    Mb.call(this);
    this.m = new rc(this);
    this.Qb = this;
    this.Va = null;
  }

  u(F, Mb);
  F.prototype[nc] = !0;

  F.prototype.addEventListener = function (a, b, c, d) {
    xc(this, a, b, c, d);
  };

  F.prototype.removeEventListener = function (a, b, c, d) {
    Hc(this, a, b, c, d);
  };

  F.prototype.dispatchEvent = function (a) {
    var b,
        c = this.Va;
    if (c) for (b = []; c; c = c.Va) b.push(c);
    c = this.Qb;
    var d = a.type || a;
    if (n(a)) a = new kc(a, c);else if (a instanceof kc) a.target = a.target || c;else {
      var e = a;
      a = new kc(d, c);
      fb(a, e);
    }
    e = !0;
    if (b) for (var f = b.length - 1; 0 <= f; f--) {
      var g = a.b = b[f];
      e = Mc(g, d, !0, a) && e;
    }
    g = a.b = c;
    e = Mc(g, d, !0, a) && e;
    e = Mc(g, d, !1, a) && e;
    if (b) for (f = 0; f < b.length; f++) g = a.b = b[f], e = Mc(g, d, !1, a) && e;
    return e;
  };

  F.prototype.va = function () {
    F.qb.va.call(this);

    if (this.m) {
      var a = this.m,
          b = 0,
          c;

      for (c in a.a) {
        for (var d = a.a[c], e = 0; e < d.length; e++) ++b, qc(d[e]);

        delete a.a[c];
        a.b--;
      }
    }

    this.Va = null;
  };

  function Ac(a, b, c, d, e) {
    a.m.add(String(b), c, !1, d, e);
  }

  function Gc(a, b, c, d, e) {
    a.m.add(String(b), c, !0, d, e);
  }

  function Mc(a, b, c, d) {
    b = a.m.a[String(b)];
    if (!b) return !0;
    b = b.concat();

    for (var e = !0, f = 0; f < b.length; ++f) {
      var g = b[f];

      if (g && !g.oa && g.capture == c) {
        var h = g.listener,
            m = g.Na || g.src;
        g.Ia && tc(a.m, g);
        e = !1 !== h.call(m, d) && e;
      }
    }

    return e && 0 != d.Kb;
  }

  ;

  function Nc(a, b, c) {
    if (q(a)) c && (a = t(a, c));else if (a && "function" == typeof a.handleEvent) a = t(a.handleEvent, a);else throw Error("Invalid listener argument");
    return 2147483647 < Number(b) ? -1 : l.setTimeout(a, b || 0);
  }

  function Oc(a) {
    var b = null;
    return new C(function (c, d) {
      b = Nc(function () {
        c(void 0);
      }, a);
      -1 == b && d(Error("Failed to schedule timer."));
    }).s(function (c) {
      l.clearTimeout(b);
      throw c;
    });
  }

  ;

  function Pc(a) {
    if (a.S && "function" == typeof a.S) return a.S();
    if (n(a)) return a.split("");

    if (oa(a)) {
      for (var b = [], c = a.length, d = 0; d < c; d++) b.push(a[d]);

      return b;
    }

    b = [];
    c = 0;

    for (d in a) b[c++] = a[d];

    return b;
  }

  function Qc(a) {
    if (a.U && "function" == typeof a.U) return a.U();

    if (!a.S || "function" != typeof a.S) {
      if (oa(a) || n(a)) {
        var b = [];
        a = a.length;

        for (var c = 0; c < a; c++) b.push(c);

        return b;
      }

      b = [];
      c = 0;

      for (var d in a) b[c++] = d;

      return b;
    }
  }

  function Rc(a, b) {
    if (a.forEach && "function" == typeof a.forEach) a.forEach(b, void 0);else if (oa(a) || n(a)) x(a, b, void 0);else for (var c = Qc(a), d = Pc(a), e = d.length, f = 0; f < e; f++) b.call(void 0, d[f], c && c[f], a);
  }

  ;

  function Sc(a, b) {
    this.b = {};
    this.a = [];
    this.c = 0;
    var c = arguments.length;

    if (1 < c) {
      if (c % 2) throw Error("Uneven number of arguments");

      for (var d = 0; d < c; d += 2) this.set(arguments[d], arguments[d + 1]);
    } else if (a) if (a instanceof Sc) for (c = a.U(), d = 0; d < c.length; d++) this.set(c[d], a.get(c[d]));else for (d in a) this.set(d, a[d]);
  }

  k = Sc.prototype;

  k.S = function () {
    Tc(this);

    for (var a = [], b = 0; b < this.a.length; b++) a.push(this.b[this.a[b]]);

    return a;
  };

  k.U = function () {
    Tc(this);
    return this.a.concat();
  };

  k.clear = function () {
    this.b = {};
    this.c = this.a.length = 0;
  };

  function Tc(a) {
    if (a.c != a.a.length) {
      for (var b = 0, c = 0; b < a.a.length;) {
        var d = a.a[b];
        Uc(a.b, d) && (a.a[c++] = d);
        b++;
      }

      a.a.length = c;
    }

    if (a.c != a.a.length) {
      var e = {};

      for (c = b = 0; b < a.a.length;) d = a.a[b], Uc(e, d) || (a.a[c++] = d, e[d] = 1), b++;

      a.a.length = c;
    }
  }

  k.get = function (a, b) {
    return Uc(this.b, a) ? this.b[a] : b;
  };

  k.set = function (a, b) {
    Uc(this.b, a) || (this.c++, this.a.push(a));
    this.b[a] = b;
  };

  k.forEach = function (a, b) {
    for (var c = this.U(), d = 0; d < c.length; d++) {
      var e = c[d],
          f = this.get(e);
      a.call(b, f, e, this);
    }
  };

  function Uc(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
  }

  ;
  var Vc = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;

  function Wc(a, b) {
    if (a) {
      a = a.split("&");

      for (var c = 0; c < a.length; c++) {
        var d = a[c].indexOf("="),
            e = null;

        if (0 <= d) {
          var f = a[c].substring(0, d);
          e = a[c].substring(d + 1);
        } else f = a[c];

        b(f, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
      }
    }
  }

  ;

  function Xc(a, b) {
    this.b = this.i = this.f = "";
    this.m = null;
    this.g = this.c = "";
    this.h = !1;
    var c;
    a instanceof Xc ? (this.h = void 0 !== b ? b : a.h, Yc(this, a.f), this.i = a.i, this.b = a.b, Zc(this, a.m), this.c = a.c, $c(this, ad(a.a)), this.g = a.g) : a && (c = String(a).match(Vc)) ? (this.h = !!b, Yc(this, c[1] || "", !0), this.i = bd(c[2] || ""), this.b = bd(c[3] || "", !0), Zc(this, c[4]), this.c = bd(c[5] || "", !0), $c(this, c[6] || "", !0), this.g = bd(c[7] || "")) : (this.h = !!b, this.a = new cd(null, this.h));
  }

  Xc.prototype.toString = function () {
    var a = [],
        b = this.f;
    b && a.push(dd(b, ed, !0), ":");
    var c = this.b;
    if (c || "file" == b) a.push("//"), (b = this.i) && a.push(dd(b, ed, !0), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.m, null != c && a.push(":", String(c));
    if (c = this.c) this.b && "/" != c.charAt(0) && a.push("/"), a.push(dd(c, "/" == c.charAt(0) ? fd : gd, !0));
    (c = this.a.toString()) && a.push("?", c);
    (c = this.g) && a.push("#", dd(c, hd));
    return a.join("");
  };

  Xc.prototype.resolve = function (a) {
    var b = new Xc(this),
        c = !!a.f;
    c ? Yc(b, a.f) : c = !!a.i;
    c ? b.i = a.i : c = !!a.b;
    c ? b.b = a.b : c = null != a.m;
    var d = a.c;
    if (c) Zc(b, a.m);else if (c = !!a.c) {
      if ("/" != d.charAt(0)) if (this.b && !this.c) d = "/" + d;else {
        var e = b.c.lastIndexOf("/");
        -1 != e && (d = b.c.substr(0, e + 1) + d);
      }
      e = d;
      if (".." == e || "." == e) d = "";else if (A(e, "./") || A(e, "/.")) {
        d = 0 == e.lastIndexOf("/", 0);
        e = e.split("/");

        for (var f = [], g = 0; g < e.length;) {
          var h = e[g++];
          "." == h ? d && g == e.length && f.push("") : ".." == h ? ((1 < f.length || 1 == f.length && "" != f[0]) && f.pop(), d && g == e.length && f.push("")) : (f.push(h), d = !0);
        }

        d = f.join("/");
      } else d = e;
    }
    c ? b.c = d : c = "" !== a.a.toString();
    c ? $c(b, ad(a.a)) : c = !!a.g;
    c && (b.g = a.g);
    return b;
  };

  function Yc(a, b, c) {
    a.f = c ? bd(b, !0) : b;
    a.f && (a.f = a.f.replace(/:$/, ""));
  }

  function Zc(a, b) {
    if (b) {
      b = Number(b);
      if (isNaN(b) || 0 > b) throw Error("Bad port number " + b);
      a.m = b;
    } else a.m = null;
  }

  function $c(a, b, c) {
    b instanceof cd ? (a.a = b, id(a.a, a.h)) : (c || (b = dd(b, jd)), a.a = new cd(b, a.h));
  }

  function G(a, b, c) {
    a.a.set(b, c);
  }

  function kd(a, b) {
    return a.a.get(b);
  }

  function md(a) {
    return a instanceof Xc ? new Xc(a) : new Xc(a, void 0);
  }

  function nd(a, b) {
    var c = new Xc(null, void 0);
    Yc(c, "https");
    a && (c.b = a);
    b && (c.c = b);
    return c;
  }

  function bd(a, b) {
    return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
  }

  function dd(a, b, c) {
    return n(a) ? (a = encodeURI(a).replace(b, od), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
  }

  function od(a) {
    a = a.charCodeAt(0);
    return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
  }

  var ed = /[#\/\?@]/g,
      gd = /[#\?:]/g,
      fd = /[#\?]/g,
      jd = /[#\?@]/g,
      hd = /#/g;

  function cd(a, b) {
    this.b = this.a = null;
    this.c = a || null;
    this.f = !!b;
  }

  function pd(a) {
    a.a || (a.a = new Sc(), a.b = 0, a.c && Wc(a.c, function (b, c) {
      a.add(decodeURIComponent(b.replace(/\+/g, " ")), c);
    }));
  }

  function qd(a) {
    var b = Qc(a);
    if ("undefined" == typeof b) throw Error("Keys are undefined");
    var c = new cd(null, void 0);
    a = Pc(a);

    for (var d = 0; d < b.length; d++) {
      var e = b[d],
          f = a[d];
      na(f) ? rd(c, e, f) : c.add(e, f);
    }

    return c;
  }

  k = cd.prototype;

  k.add = function (a, b) {
    pd(this);
    this.c = null;
    a = sd(this, a);
    var c = this.a.get(a);
    c || this.a.set(a, c = []);
    c.push(b);
    this.b += 1;
    return this;
  };

  function td(a, b) {
    pd(a);
    b = sd(a, b);
    Uc(a.a.b, b) && (a.c = null, a.b -= a.a.get(b).length, a = a.a, Uc(a.b, b) && (delete a.b[b], a.c--, a.a.length > 2 * a.c && Tc(a)));
  }

  k.clear = function () {
    this.a = this.c = null;
    this.b = 0;
  };

  function ud(a, b) {
    pd(a);
    b = sd(a, b);
    return Uc(a.a.b, b);
  }

  k.forEach = function (a, b) {
    pd(this);
    this.a.forEach(function (c, d) {
      x(c, function (e) {
        a.call(b, e, d, this);
      }, this);
    }, this);
  };

  k.U = function () {
    pd(this);

    for (var a = this.a.S(), b = this.a.U(), c = [], d = 0; d < b.length; d++) for (var e = a[d], f = 0; f < e.length; f++) c.push(b[d]);

    return c;
  };

  k.S = function (a) {
    pd(this);
    var b = [];
    if (n(a)) ud(this, a) && (b = Oa(b, this.a.get(sd(this, a))));else {
      a = this.a.S();

      for (var c = 0; c < a.length; c++) b = Oa(b, a[c]);
    }
    return b;
  };

  k.set = function (a, b) {
    pd(this);
    this.c = null;
    a = sd(this, a);
    ud(this, a) && (this.b -= this.a.get(a).length);
    this.a.set(a, [b]);
    this.b += 1;
    return this;
  };

  k.get = function (a, b) {
    if (!a) return b;
    a = this.S(a);
    return 0 < a.length ? String(a[0]) : b;
  };

  function rd(a, b, c) {
    td(a, b);
    0 < c.length && (a.c = null, a.a.set(sd(a, b), Pa(c)), a.b += c.length);
  }

  k.toString = function () {
    if (this.c) return this.c;
    if (!this.a) return "";

    for (var a = [], b = this.a.U(), c = 0; c < b.length; c++) {
      var d = b[c],
          e = encodeURIComponent(String(d));
      d = this.S(d);

      for (var f = 0; f < d.length; f++) {
        var g = e;
        "" !== d[f] && (g += "=" + encodeURIComponent(String(d[f])));
        a.push(g);
      }
    }

    return this.c = a.join("&");
  };

  function ad(a) {
    var b = new cd();
    b.c = a.c;
    a.a && (b.a = new Sc(a.a), b.b = a.b);
    return b;
  }

  function sd(a, b) {
    b = String(b);
    a.f && (b = b.toLowerCase());
    return b;
  }

  function id(a, b) {
    b && !a.f && (pd(a), a.c = null, a.a.forEach(function (c, d) {
      var e = d.toLowerCase();
      d != e && (td(this, d), rd(this, e, c));
    }, a));
    a.f = b;
  }

  ;
  var vd = !Ub || 9 <= Number(ec);

  function wd(a, b) {
    this.a = a === xd && b || "";
    this.b = yd;
  }

  wd.prototype.na = !0;

  wd.prototype.ma = function () {
    return this.a;
  };

  wd.prototype.toString = function () {
    return "Const{" + this.a + "}";
  };

  function zd(a) {
    if (a instanceof wd && a.constructor === wd && a.b === yd) return a.a;
    ya("expected object of type Const, got '" + a + "'");
    return "type_error:Const";
  }

  var yd = {},
      xd = {};

  function Ad() {
    this.a = "";
    this.b = Bd;
  }

  Ad.prototype.na = !0;

  Ad.prototype.ma = function () {
    return this.a.toString();
  };

  Ad.prototype.toString = function () {
    return "TrustedResourceUrl{" + this.a + "}";
  };

  function Cd(a) {
    if (a instanceof Ad && a.constructor === Ad && a.b === Bd) return a.a;
    ya("expected object of type TrustedResourceUrl, got '" + a + "' of type " + la(a));
    return "type_error:TrustedResourceUrl";
  }

  function Dd(a, b) {
    var c = zd(a);
    if (!Ed.test(c)) throw Error("Invalid TrustedResourceUrl format: " + c);
    a = c.replace(Fd, function (d, e) {
      if (!Object.prototype.hasOwnProperty.call(b, e)) throw Error('Found marker, "' + e + '", in format string, "' + c + '", but no valid label mapping found in args: ' + JSON.stringify(b));
      d = b[e];
      return d instanceof wd ? zd(d) : encodeURIComponent(String(d));
    });
    return Gd(a);
  }

  var Fd = /%{(\w+)}/g,
      Ed = /^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i,
      Bd = {};

  function Gd(a) {
    var b = new Ad();
    b.a = a;
    return b;
  }

  ;

  function Hd() {
    this.a = "";
    this.b = Id;
  }

  Hd.prototype.na = !0;

  Hd.prototype.ma = function () {
    return this.a.toString();
  };

  Hd.prototype.toString = function () {
    return "SafeUrl{" + this.a + "}";
  };

  function Jd(a) {
    if (a instanceof Hd && a.constructor === Hd && a.b === Id) return a.a;
    ya("expected object of type SafeUrl, got '" + a + "' of type " + la(a));
    return "type_error:SafeUrl";
  }

  var Kd = /^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;

  function Ld(a) {
    if (a instanceof Hd) return a;
    a = "object" == typeof a && a.na ? a.ma() : String(a);
    Kd.test(a) || (a = "about:invalid#zClosurez");
    return Md(a);
  }

  var Id = {};

  function Md(a) {
    var b = new Hd();
    b.a = a;
    return b;
  }

  Md("about:blank");

  function Nd() {
    this.a = "";
    this.b = Od;
  }

  Nd.prototype.na = !0;

  Nd.prototype.ma = function () {
    return this.a.toString();
  };

  Nd.prototype.toString = function () {
    return "SafeHtml{" + this.a + "}";
  };

  function Pd(a) {
    if (a instanceof Nd && a.constructor === Nd && a.b === Od) return a.a;
    ya("expected object of type SafeHtml, got '" + a + "' of type " + la(a));
    return "type_error:SafeHtml";
  }

  var Od = {};

  function Qd(a) {
    var b = new Nd();
    b.a = a;
    return b;
  }

  Qd("<!DOCTYPE html>");
  Qd("");
  Qd("<br>");

  function Rd(a, b) {
    a.src = Cd(b);
    if (null === ja) b: {
      b = l.document;

      if ((b = b.querySelector && b.querySelector("script[nonce]")) && (b = b.nonce || b.getAttribute("nonce")) && ia.test(b)) {
        ja = b;
        break b;
      }

      ja = "";
    }
    b = ja;
    b && a.setAttribute("nonce", b);
  }

  ;

  function Sd(a) {
    var b = document;
    return n(a) ? b.getElementById(a) : a;
  }

  function Td(a, b) {
    bb(b, function (c, d) {
      c && "object" == typeof c && c.na && (c = c.ma());
      "style" == d ? a.style.cssText = c : "class" == d ? a.className = c : "for" == d ? a.htmlFor = c : Ud.hasOwnProperty(d) ? a.setAttribute(Ud[d], c) : 0 == d.lastIndexOf("aria-", 0) || 0 == d.lastIndexOf("data-", 0) ? a.setAttribute(d, c) : a[d] = c;
    });
  }

  var Ud = {
    cellpadding: "cellPadding",
    cellspacing: "cellSpacing",
    colspan: "colSpan",
    frameborder: "frameBorder",
    height: "height",
    maxlength: "maxLength",
    nonce: "nonce",
    role: "role",
    rowspan: "rowSpan",
    type: "type",
    usemap: "useMap",
    valign: "vAlign",
    width: "width"
  };

  function Vd(a, b, c) {
    var d = arguments,
        e = document,
        f = String(d[0]),
        g = d[1];

    if (!vd && g && (g.name || g.type)) {
      f = ["<", f];
      g.name && f.push(' name="', hb(g.name), '"');

      if (g.type) {
        f.push(' type="', hb(g.type), '"');
        var h = {};
        fb(h, g);
        delete h.type;
        g = h;
      }

      f.push(">");
      f = f.join("");
    }

    f = e.createElement(f);
    g && (n(g) ? f.className = g : na(g) ? f.className = g.join(" ") : Td(f, g));
    2 < d.length && Wd(e, f, d);
    return f;
  }

  function Wd(a, b, c) {
    function d(g) {
      g && b.appendChild(n(g) ? a.createTextNode(g) : g);
    }

    for (var e = 2; e < c.length; e++) {
      var f = c[e];
      !oa(f) || r(f) && 0 < f.nodeType ? d(f) : x(Xd(f) ? Pa(f) : f, d);
    }
  }

  function Xd(a) {
    if (a && "number" == typeof a.length) {
      if (r(a)) return "function" == typeof a.item || "string" == typeof a.item;
      if (q(a)) return "function" == typeof a.item;
    }

    return !1;
  }

  ;

  function Yd(a) {
    var b = [];
    Zd(new $d(), a, b);
    return b.join("");
  }

  function $d() {}

  function Zd(a, b, c) {
    if (null == b) c.push("null");else {
      if ("object" == typeof b) {
        if (na(b)) {
          var d = b;
          b = d.length;
          c.push("[");

          for (var e = "", f = 0; f < b; f++) c.push(e), Zd(a, d[f], c), e = ",";

          c.push("]");
          return;
        }

        if (b instanceof String || b instanceof Number || b instanceof Boolean) b = b.valueOf();else {
          c.push("{");
          e = "";

          for (d in b) Object.prototype.hasOwnProperty.call(b, d) && (f = b[d], "function" != typeof f && (c.push(e), ae(d, c), c.push(":"), Zd(a, f, c), e = ","));

          c.push("}");
          return;
        }
      }

      switch (typeof b) {
        case "string":
          ae(b, c);
          break;

        case "number":
          c.push(isFinite(b) && !isNaN(b) ? String(b) : "null");
          break;

        case "boolean":
          c.push(String(b));
          break;

        case "function":
          c.push("null");
          break;

        default:
          throw Error("Unknown type: " + typeof b);
      }
    }
  }

  var be = {
    '"': '\\"',
    "\\": "\\\\",
    "/": "\\/",
    "\b": "\\b",
    "\f": "\\f",
    "\n": "\\n",
    "\r": "\\r",
    "\t": "\\t",
    "\x0B": "\\u000b"
  },
      ce = /\uffff/.test("\uffff") ? /[\\"\x00-\x1f\x7f-\uffff]/g : /[\\"\x00-\x1f\x7f-\xff]/g;

  function ae(a, b) {
    b.push('"', a.replace(ce, function (c) {
      var d = be[c];
      d || (d = "\\u" + (c.charCodeAt(0) | 65536).toString(16).substr(1), be[c] = d);
      return d;
    }), '"');
  }

  ;
  /*
  Copyright 2017 Google Inc.
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */

  function de() {
    var a = I();
    return Ub && !!ec && 11 == ec || /Edge\/\d+/.test(a);
  }

  function ee() {
    return l.window && l.window.location.href || self && self.location && self.location.href || "";
  }

  function fe(a, b) {
    b = b || l.window;
    var c = "about:blank";
    a && (c = Jd(Ld(a)).toString());
    b.location.href = c;
  }

  function ge(a, b) {
    var c = [],
        d;

    for (d in a) d in b ? typeof a[d] != typeof b[d] ? c.push(d) : "object" == typeof a[d] && null != a[d] && null != b[d] ? 0 < ge(a[d], b[d]).length && c.push(d) : a[d] !== b[d] && c.push(d) : c.push(d);

    for (d in b) d in a || c.push(d);

    return c;
  }

  function he() {
    var a = I();
    a = ie(a) != je ? null : (a = a.match(/\sChrome\/(\d+)/i)) && 2 == a.length ? parseInt(a[1], 10) : null;
    return a && 30 > a ? !1 : !Ub || !ec || 9 < ec;
  }

  function ke(a) {
    a = (a || I()).toLowerCase();
    return a.match(/android/) || a.match(/webos/) || a.match(/iphone|ipad|ipod/) || a.match(/blackberry/) || a.match(/windows phone/) || a.match(/iemobile/) ? !0 : !1;
  }

  function le(a) {
    a = a || l.window;

    try {
      a.close();
    } catch (b) {}
  }

  function me(a, b, c) {
    var d = Math.floor(1E9 * Math.random()).toString();
    b = b || 500;
    c = c || 600;
    var e = (window.screen.availHeight - c) / 2,
        f = (window.screen.availWidth - b) / 2;
    b = {
      width: b,
      height: c,
      top: 0 < e ? e : 0,
      left: 0 < f ? f : 0,
      location: !0,
      resizable: !0,
      statusbar: !0,
      toolbar: !1
    };
    c = I().toLowerCase();
    d && (b.target = d, A(c, "crios/") && (b.target = "_blank"));
    ie(I()) == ne && (a = a || "http://localhost", b.scrollbars = !0);
    c = a || "";
    (a = b) || (a = {});
    d = window;
    b = c instanceof Hd ? c : Ld("undefined" != typeof c.href ? c.href : String(c));
    c = a.target || c.target;
    e = [];

    for (g in a) switch (g) {
      case "width":
      case "height":
      case "top":
      case "left":
        e.push(g + "=" + a[g]);
        break;

      case "target":
      case "noopener":
      case "noreferrer":
        break;

      default:
        e.push(g + "=" + (a[g] ? 1 : 0));
    }

    var g = e.join(",");
    (B("iPhone") && !B("iPod") && !B("iPad") || B("iPad") || B("iPod")) && d.navigator && d.navigator.standalone && c && "_self" != c ? (g = d.document.createElement("A"), b instanceof Hd || b instanceof Hd || (b = "object" == typeof b && b.na ? b.ma() : String(b), Kd.test(b) || (b = "about:invalid#zClosurez"), b = Md(b)), g.href = Jd(b), g.setAttribute("target", c), a.noreferrer && g.setAttribute("rel", "noreferrer"), a = document.createEvent("MouseEvent"), a.initMouseEvent("click", !0, !0, d, 1), g.dispatchEvent(a), g = {}) : a.noreferrer ? (g = d.open("", c, g), a = Jd(b).toString(), g && (Wb && A(a, ";") && (a = "'" + a.replace(/'/g, "%27") + "'"), g.opener = null, a = Qd('<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url=' + hb(a) + '">'), g.document.write(Pd(a)), g.document.close())) : (g = d.open(Jd(b).toString(), c, g)) && a.noopener && (g.opener = null);
    if (g) try {
      g.focus();
    } catch (h) {}
    return g;
  }

  function oe(a) {
    return new C(function (b) {
      function c() {
        Oc(2E3).then(function () {
          if (!a || a.closed) b();else return c();
        });
      }

      return c();
    });
  }

  var pe = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,
      qe = /^[^@]+@[^@]+$/;

  function re() {
    var a = null;
    return new C(function (b) {
      "complete" == l.document.readyState ? b() : (a = function () {
        b();
      }, yc(window, "load", a));
    }).s(function (b) {
      Hc(window, "load", a);
      throw b;
    });
  }

  function se() {
    return te(void 0) ? re().then(function () {
      return new C(function (a, b) {
        var c = l.document,
            d = setTimeout(function () {
          b(Error("Cordova framework is not ready."));
        }, 1E3);
        c.addEventListener("deviceready", function () {
          clearTimeout(d);
          a();
        }, !1);
      });
    }) : E(Error("Cordova must run in an Android or iOS file scheme."));
  }

  function te(a) {
    a = a || I();
    return !("file:" !== ue() || !a.toLowerCase().match(/iphone|ipad|ipod|android/));
  }

  function ve() {
    var a = l.window;

    try {
      return !(!a || a == a.top);
    } catch (b) {
      return !1;
    }
  }

  function we() {
    return "undefined" !== typeof l.WorkerGlobalScope && "function" === typeof l.importScripts;
  }

  function xe() {
    return _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.INTERNAL.hasOwnProperty("reactNative") ? "ReactNative" : _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.INTERNAL.hasOwnProperty("node") ? "Node" : we() ? "Worker" : "Browser";
  }

  function ye() {
    var a = xe();
    return "ReactNative" === a || "Node" === a;
  }

  function ze() {
    for (var a = 50, b = []; 0 < a;) b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62 * Math.random()))), a--;

    return b.join("");
  }

  var ne = "Firefox",
      je = "Chrome";

  function ie(a) {
    var b = a.toLowerCase();
    if (A(b, "opera/") || A(b, "opr/") || A(b, "opios/")) return "Opera";
    if (A(b, "iemobile")) return "IEMobile";
    if (A(b, "msie") || A(b, "trident/")) return "IE";
    if (A(b, "edge/")) return "Edge";
    if (A(b, "firefox/")) return ne;
    if (A(b, "silk/")) return "Silk";
    if (A(b, "blackberry")) return "Blackberry";
    if (A(b, "webos")) return "Webos";
    if (!A(b, "safari/") || A(b, "chrome/") || A(b, "crios/") || A(b, "android")) {
      if (!A(b, "chrome/") && !A(b, "crios/") || A(b, "edge/")) {
        if (A(b, "android")) return "Android";
        if ((a = a.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/)) && 2 == a.length) return a[1];
      } else return je;
    } else return "Safari";
    return "Other";
  }

  var Ae = {
    Sc: "FirebaseCore-web",
    Uc: "FirebaseUI-web"
  };

  function Be(a, b) {
    b = b || [];
    var c = [],
        d = {},
        e;

    for (e in Ae) d[Ae[e]] = !0;

    for (e = 0; e < b.length; e++) "undefined" !== typeof d[b[e]] && (delete d[b[e]], c.push(b[e]));

    c.sort();
    b = c;
    b.length || (b = ["FirebaseCore-web"]);
    c = xe();
    "Browser" === c ? (d = I(), c = ie(d)) : "Worker" === c && (d = I(), c = ie(d) + "-" + c);
    return c + "/JsCore/" + a + "/" + b.join(",");
  }

  function I() {
    return l.navigator && l.navigator.userAgent || "";
  }

  function J(a, b) {
    a = a.split(".");
    b = b || l;

    for (var c = 0; c < a.length && "object" == typeof b && null != b; c++) b = b[a[c]];

    c != a.length && (b = void 0);
    return b;
  }

  function Ce() {
    try {
      var a = l.localStorage,
          b = De();
      if (a) return a.setItem(b, "1"), a.removeItem(b), de() ? !!l.indexedDB : !0;
    } catch (c) {
      return we() && !!l.indexedDB;
    }

    return !1;
  }

  function Ee() {
    return (Fe() || "chrome-extension:" === ue() || te()) && !ye() && Ce() && !we();
  }

  function Fe() {
    return "http:" === ue() || "https:" === ue();
  }

  function ue() {
    return l.location && l.location.protocol || null;
  }

  function Ge(a) {
    a = a || I();
    return ke(a) || ie(a) == ne ? !1 : !0;
  }

  function He(a) {
    return "undefined" === typeof a ? null : Yd(a);
  }

  function Ie(a) {
    var b = {},
        c;

    for (c in a) a.hasOwnProperty(c) && null !== a[c] && void 0 !== a[c] && (b[c] = a[c]);

    return b;
  }

  function Je(a) {
    if (null !== a) return JSON.parse(a);
  }

  function De(a) {
    return a ? a : Math.floor(1E9 * Math.random()).toString();
  }

  function Ke(a) {
    a = a || I();
    return "Safari" == ie(a) || a.toLowerCase().match(/iphone|ipad|ipod/) ? !1 : !0;
  }

  function Le() {
    var a = l.___jsl;
    if (a && a.H) for (var b in a.H) if (a.H[b].r = a.H[b].r || [], a.H[b].L = a.H[b].L || [], a.H[b].r = a.H[b].L.concat(), a.CP) for (var c = 0; c < a.CP.length; c++) a.CP[c] = null;
  }

  function Me(a, b) {
    if (a > b) throw Error("Short delay should be less than long delay!");
    this.a = a;
    this.c = b;
    a = I();
    b = xe();
    this.b = ke(a) || "ReactNative" === b;
  }

  Me.prototype.get = function () {
    var a = l.navigator;
    return (a && "boolean" === typeof a.onLine && (Fe() || "chrome-extension:" === ue() || "undefined" !== typeof a.connection) ? a.onLine : 1) ? this.b ? this.c : this.a : Math.min(5E3, this.a);
  };

  function Ne() {
    var a = l.document;
    return a && "undefined" !== typeof a.visibilityState ? "visible" == a.visibilityState : !0;
  }

  function Oe() {
    var a = l.document,
        b = null;
    return Ne() || !a ? D() : new C(function (c) {
      b = function () {
        Ne() && (a.removeEventListener("visibilitychange", b, !1), c());
      };

      a.addEventListener("visibilitychange", b, !1);
    }).s(function (c) {
      a.removeEventListener("visibilitychange", b, !1);
      throw c;
    });
  }

  function Pe(a) {
    try {
      var b = new Date(parseInt(a, 10));
      if (!isNaN(b.getTime()) && !/[^0-9]/.test(a)) return b.toUTCString();
    } catch (c) {}

    return null;
  }

  function Qe() {
    return !(!J("fireauth.oauthhelper", l) && !J("fireauth.iframe", l));
  }

  function Re() {
    var a = l.navigator;
    return a && a.serviceWorker && a.serviceWorker.controller || null;
  }

  function Se() {
    var a = l.navigator;
    return a && a.serviceWorker ? D().then(function () {
      return a.serviceWorker.ready;
    }).then(function (b) {
      return b.active || null;
    }).s(function () {
      return null;
    }) : D(null);
  }

  ;
  var Te = {};

  function Ue(a) {
    Te[a] || (Te[a] = !0, "undefined" !== typeof console && "function" === typeof console.warn && console.warn(a));
  }

  ;
  var Ve;

  try {
    var We = {};
    Object.defineProperty(We, "abcd", {
      configurable: !0,
      enumerable: !0,
      value: 1
    });
    Object.defineProperty(We, "abcd", {
      configurable: !0,
      enumerable: !0,
      value: 2
    });
    Ve = 2 == We.abcd;
  } catch (a) {
    Ve = !1;
  }

  function K(a, b, c) {
    Ve ? Object.defineProperty(a, b, {
      configurable: !0,
      enumerable: !0,
      value: c
    }) : a[b] = c;
  }

  function L(a, b) {
    if (b) for (var c in b) b.hasOwnProperty(c) && K(a, c, b[c]);
  }

  function Xe(a) {
    var b = {};
    L(b, a);
    return b;
  }

  function Ye(a) {
    var b = {},
        c;

    for (c in a) a.hasOwnProperty(c) && (b[c] = a[c]);

    return b;
  }

  function Ze(a, b) {
    if (!b || !b.length) return !0;
    if (!a) return !1;

    for (var c = 0; c < b.length; c++) {
      var d = a[b[c]];
      if (void 0 === d || null === d || "" === d) return !1;
    }

    return !0;
  }

  function $e(a) {
    var b = a;

    if ("object" == typeof a && null != a) {
      b = "length" in a ? [] : {};

      for (var c in a) K(b, c, $e(a[c]));
    }

    return b;
  }

  ;

  function af(a) {
    var b = {},
        c = a[bf],
        d = a[cf];
    a = a[df];
    if (!a || a != ef && !c) throw Error("Invalid provider user info!");
    b[ff] = d || null;
    b[gf] = c || null;
    K(this, hf, a);
    K(this, jf, $e(b));
  }

  var ef = "EMAIL_SIGNIN",
      bf = "email",
      cf = "newEmail",
      df = "requestType",
      gf = "email",
      ff = "fromEmail",
      jf = "data",
      hf = "operation";

  function M(a, b) {
    this.code = kf + a;
    this.message = b || lf[a] || "";
  }

  u(M, Error);

  M.prototype.w = function () {
    return {
      code: this.code,
      message: this.message
    };
  };

  M.prototype.toJSON = function () {
    return this.w();
  };

  function mf(a) {
    var b = a && a.code;
    return b ? new M(b.substring(kf.length), a.message) : null;
  }

  var kf = "auth/",
      lf = {
    "admin-restricted-operation": "This operation is restricted to administrators only.",
    "argument-error": "",
    "app-not-authorized": "This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.",
    "app-not-installed": "The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.",
    "captcha-check-failed": "The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.",
    "code-expired": "The SMS code has expired. Please re-send the verification code to try again.",
    "cordova-not-ready": "Cordova framework is not ready.",
    "cors-unsupported": "This browser is not supported.",
    "credential-already-in-use": "This credential is already associated with a different user account.",
    "custom-token-mismatch": "The custom token corresponds to a different audience.",
    "requires-recent-login": "This operation is sensitive and requires recent authentication. Log in again before retrying this request.",
    "dynamic-link-not-activated": "Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.",
    "email-already-in-use": "The email address is already in use by another account.",
    "expired-action-code": "The action code has expired. ",
    "cancelled-popup-request": "This operation has been cancelled due to another conflicting popup being opened.",
    "internal-error": "An internal error has occurred.",
    "invalid-app-credential": "The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.",
    "invalid-app-id": "The mobile app identifier is not registed for the current project.",
    "invalid-user-token": "This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.",
    "invalid-auth-event": "An internal error has occurred.",
    "invalid-verification-code": "The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.",
    "invalid-continue-uri": "The continue URL provided in the request is invalid.",
    "invalid-cordova-configuration": "The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.",
    "invalid-custom-token": "The custom token format is incorrect. Please check the documentation.",
    "invalid-dynamic-link-domain": "The provided dynamic link domain is not configured or authorized for the current project.",
    "invalid-email": "The email address is badly formatted.",
    "invalid-api-key": "Your API key is invalid, please check you have copied it correctly.",
    "invalid-cert-hash": "The SHA-1 certificate hash provided is invalid.",
    "invalid-credential": "The supplied auth credential is malformed or has expired.",
    "invalid-message-payload": "The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.",
    "invalid-oauth-provider": "EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.",
    "invalid-oauth-client-id": "The OAuth client ID provided is either invalid or does not match the specified API key.",
    "unauthorized-domain": "This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.",
    "invalid-action-code": "The action code is invalid. This can happen if the code is malformed, expired, or has already been used.",
    "wrong-password": "The password is invalid or the user does not have a password.",
    "invalid-persistence-type": "The specified persistence type is invalid. It can only be local, session or none.",
    "invalid-phone-number": "The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].",
    "invalid-provider-id": "The specified provider ID is invalid.",
    "invalid-recipient-email": "The email corresponding to this action failed to send as the provided recipient email address is invalid.",
    "invalid-sender": "The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.",
    "invalid-verification-id": "The verification ID used to create the phone auth credential is invalid.",
    "missing-android-pkg-name": "An Android Package Name must be provided if the Android App is required to be installed.",
    "auth-domain-config-required": "Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.",
    "missing-app-credential": "The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.",
    "missing-verification-code": "The phone auth credential was created with an empty SMS verification code.",
    "missing-continue-uri": "A continue URL must be provided in the request.",
    "missing-iframe-start": "An internal error has occurred.",
    "missing-ios-bundle-id": "An iOS Bundle ID must be provided if an App Store ID is provided.",
    "missing-or-invalid-nonce": "The OIDC ID token requires a valid unhashed nonce.",
    "missing-phone-number": "To send verification codes, provide a phone number for the recipient.",
    "missing-verification-id": "The phone auth credential was created with an empty verification ID.",
    "app-deleted": "This instance of FirebaseApp has been deleted.",
    "account-exists-with-different-credential": "An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.",
    "network-request-failed": "A network error (such as timeout, interrupted connection or unreachable host) has occurred.",
    "no-auth-event": "An internal error has occurred.",
    "no-such-provider": "User was not linked to an account with the given provider.",
    "null-user": "A null user object was provided as the argument for an operation which requires a non-null user object.",
    "operation-not-allowed": "The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.",
    "operation-not-supported-in-this-environment": 'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',
    "popup-blocked": "Unable to establish a connection with the popup. It may have been blocked by the browser.",
    "popup-closed-by-user": "The popup has been closed by the user before finalizing the operation.",
    "provider-already-linked": "User can only be linked to one identity for the given provider.",
    "quota-exceeded": "The project's quota for this operation has been exceeded.",
    "redirect-cancelled-by-user": "The redirect operation has been cancelled by the user before finalizing.",
    "redirect-operation-pending": "A redirect sign-in operation is already pending.",
    "rejected-credential": "The request contains malformed or mismatching credentials.",
    timeout: "The operation has timed out.",
    "user-token-expired": "The user's credential is no longer valid. The user must sign in again.",
    "too-many-requests": "We have blocked all requests from this device due to unusual activity. Try again later.",
    "unauthorized-continue-uri": "The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.",
    "unsupported-persistence-type": "The current environment does not support the specified persistence type.",
    "user-cancelled": "User did not grant your application the permissions it requested.",
    "user-not-found": "There is no user record corresponding to this identifier. The user may have been deleted.",
    "user-disabled": "The user account has been disabled by an administrator.",
    "user-mismatch": "The supplied credentials do not correspond to the previously signed in user.",
    "user-signed-out": "",
    "weak-password": "The password must be 6 characters long or more.",
    "web-storage-unsupported": "This browser is not supported or 3rd party cookies and data may be disabled."
  };

  function nf(a) {
    var b = a[of];
    if ("undefined" === typeof b) throw new M("missing-continue-uri");
    if ("string" !== typeof b || "string" === typeof b && !b.length) throw new M("invalid-continue-uri");
    this.h = b;
    this.b = this.a = null;
    this.g = !1;
    var c = a[pf];

    if (c && "object" === typeof c) {
      b = c[qf];
      var d = c[rf];
      c = c[sf];

      if ("string" === typeof b && b.length) {
        this.a = b;
        if ("undefined" !== typeof d && "boolean" !== typeof d) throw new M("argument-error", rf + " property must be a boolean when specified.");
        this.g = !!d;
        if ("undefined" !== typeof c && ("string" !== typeof c || "string" === typeof c && !c.length)) throw new M("argument-error", sf + " property must be a non empty string when specified.");
        this.b = c || null;
      } else {
        if ("undefined" !== typeof b) throw new M("argument-error", qf + " property must be a non empty string when specified.");
        if ("undefined" !== typeof d || "undefined" !== typeof c) throw new M("missing-android-pkg-name");
      }
    } else if ("undefined" !== typeof c) throw new M("argument-error", pf + " property must be a non null object when specified.");

    this.f = null;
    if ((b = a[tf]) && "object" === typeof b) {
      if (b = b[uf], "string" === typeof b && b.length) this.f = b;else {
        if ("undefined" !== typeof b) throw new M("argument-error", uf + " property must be a non empty string when specified.");
      }
    } else if ("undefined" !== typeof b) throw new M("argument-error", tf + " property must be a non null object when specified.");
    b = a[vf];
    if ("undefined" !== typeof b && "boolean" !== typeof b) throw new M("argument-error", vf + " property must be a boolean when specified.");
    this.c = !!b;
    a = a[wf];
    if ("undefined" !== typeof a && ("string" !== typeof a || "string" === typeof a && !a.length)) throw new M("argument-error", wf + " property must be a non empty string when specified.");
    this.i = a || null;
  }

  var pf = "android",
      wf = "dynamicLinkDomain",
      vf = "handleCodeInApp",
      tf = "iOS",
      of = "url",
      rf = "installApp",
      sf = "minimumVersion",
      qf = "packageName",
      uf = "bundleId";

  function xf(a) {
    var b = {};
    b.continueUrl = a.h;
    b.canHandleCodeInApp = a.c;
    if (b.androidPackageName = a.a) b.androidMinimumVersion = a.b, b.androidInstallApp = a.g;
    b.iOSBundleId = a.f;
    b.dynamicLinkDomain = a.i;

    for (var c in b) null === b[c] && delete b[c];

    return b;
  }

  ;

  function yf(a) {
    return Ia(a, function (b) {
      b = b.toString(16);
      return 1 < b.length ? b : "0" + b;
    }).join("");
  }

  ;
  var zf = null,
      Af = null;

  function Bf(a) {
    var b = "";
    Cf(a, function (c) {
      b += String.fromCharCode(c);
    });
    return b;
  }

  function Cf(a, b) {
    function c(m) {
      for (; d < a.length;) {
        var p = a.charAt(d++),
            v = Af[p];
        if (null != v) return v;
        if (!/^[\s\xa0]*$/.test(p)) throw Error("Unknown base64 encoding at char: " + p);
      }

      return m;
    }

    Df();

    for (var d = 0;;) {
      var e = c(-1),
          f = c(0),
          g = c(64),
          h = c(64);
      if (64 === h && -1 === e) break;
      b(e << 2 | f >> 4);
      64 != g && (b(f << 4 & 240 | g >> 2), 64 != h && b(g << 6 & 192 | h));
    }
  }

  function Df() {
    if (!zf) {
      zf = {};
      Af = {};

      for (var a = 0; 65 > a; a++) zf[a] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a), Af[zf[a]] = a, 62 <= a && (Af["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(a)] = a);
    }
  }

  ;

  function Ef(a) {
    this.c = a.sub;
    va();
    this.a = a.provider_id || a.firebase && a.firebase.sign_in_provider || null;
    this.b = !!a.is_anonymous || "anonymous" == this.a;
  }

  Ef.prototype.f = function () {
    return this.b;
  };

  function Ff(a) {
    return (a = Gf(a)) && a.sub && a.iss && a.aud && a.exp ? new Ef(a) : null;
  }

  function Gf(a) {
    if (!a) return null;
    a = a.split(".");
    if (3 != a.length) return null;
    a = a[1];

    for (var b = (4 - a.length % 4) % 4, c = 0; c < b; c++) a += ".";

    try {
      return JSON.parse(Bf(a));
    } catch (d) {}

    return null;
  }

  ;
  var Hf = {
    Yc: {
      ab: "https://www.googleapis.com/identitytoolkit/v3/relyingparty/",
      ib: "https://securetoken.googleapis.com/v1/token",
      id: "p"
    },
    $c: {
      ab: "https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",
      ib: "https://staging-securetoken.sandbox.googleapis.com/v1/token",
      id: "s"
    },
    ad: {
      ab: "https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",
      ib: "https://test-securetoken.sandbox.googleapis.com/v1/token",
      id: "t"
    }
  };

  function If(a) {
    for (var b in Hf) if (Hf[b].id === a) return a = Hf[b], {
      firebaseEndpoint: a.ab,
      secureTokenEndpoint: a.ib
    };

    return null;
  }

  var Jf;
  Jf = If("__EID__") ? "__EID__" : void 0;
  var Kf = "oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),
      Lf = ["client_id", "response_type", "scope", "redirect_uri", "state"],
      Mf = {
    Tc: {
      Oa: "locale",
      Ba: 500,
      Aa: 600,
      Pa: "facebook.com",
      hb: Lf
    },
    Vc: {
      Oa: null,
      Ba: 500,
      Aa: 620,
      Pa: "github.com",
      hb: Lf
    },
    Wc: {
      Oa: "hl",
      Ba: 515,
      Aa: 680,
      Pa: "google.com",
      hb: Lf
    },
    bd: {
      Oa: "lang",
      Ba: 485,
      Aa: 705,
      Pa: "twitter.com",
      hb: Kf
    }
  };

  function Nf(a) {
    for (var b in Mf) if (Mf[b].Pa == a) return Mf[b];

    return null;
  }

  ;

  function Of(a) {
    var b = {};
    b["facebook.com"] = Pf;
    b["google.com"] = Qf;
    b["github.com"] = Rf;
    b["twitter.com"] = Sf;
    var c = a && a[Tf];

    try {
      if (c) return b[c] ? new b[c](a) : new Uf(a);
      if ("undefined" !== typeof a[Vf]) return new Wf(a);
    } catch (d) {}

    return null;
  }

  var Vf = "idToken",
      Tf = "providerId";

  function Wf(a) {
    var b = a[Tf];

    if (!b && a[Vf]) {
      var c = Ff(a[Vf]);
      c && c.a && (b = c.a);
    }

    if (!b) throw Error("Invalid additional user info!");
    if ("anonymous" == b || "custom" == b) b = null;
    c = !1;
    "undefined" !== typeof a.isNewUser ? c = !!a.isNewUser : "identitytoolkit#SignupNewUserResponse" === a.kind && (c = !0);
    K(this, "providerId", b);
    K(this, "isNewUser", c);
  }

  function Uf(a) {
    Wf.call(this, a);
    a = Je(a.rawUserInfo || "{}");
    K(this, "profile", $e(a || {}));
  }

  u(Uf, Wf);

  function Pf(a) {
    Uf.call(this, a);
    if ("facebook.com" != this.providerId) throw Error("Invalid provider ID!");
  }

  u(Pf, Uf);

  function Rf(a) {
    Uf.call(this, a);
    if ("github.com" != this.providerId) throw Error("Invalid provider ID!");
    K(this, "username", this.profile && this.profile.login || null);
  }

  u(Rf, Uf);

  function Qf(a) {
    Uf.call(this, a);
    if ("google.com" != this.providerId) throw Error("Invalid provider ID!");
  }

  u(Qf, Uf);

  function Sf(a) {
    Uf.call(this, a);
    if ("twitter.com" != this.providerId) throw Error("Invalid provider ID!");
    K(this, "username", a.screenName || null);
  }

  u(Sf, Uf);

  function Xf(a) {
    this.a = md(a);
  }

  ;

  function Yf(a) {
    var b = md(a),
        c = kd(b, "link"),
        d = kd(md(c), "link");
    b = kd(b, "deep_link_id");
    return kd(md(b), "link") || b || d || c || a;
  }

  ;

  function Zf() {}

  function $f(a, b) {
    return a.then(function (c) {
      if (c[ag]) {
        var d = Ff(c[ag]);
        if (!d || b != d.c) throw new M("user-mismatch");
        return c;
      }

      throw new M("user-mismatch");
    }).s(function (c) {
      throw c && c.code && c.code == kf + "user-not-found" ? new M("user-mismatch") : c;
    });
  }

  function bg(a, b) {
    if (b) this.a = b;else throw new M("internal-error", "failed to construct a credential");
    K(this, "providerId", a);
    K(this, "signInMethod", a);
  }

  bg.prototype.la = function (a) {
    return cg(a, dg(this));
  };

  bg.prototype.b = function (a, b) {
    var c = dg(this);
    c.idToken = b;
    return eg(a, c);
  };

  bg.prototype.f = function (a, b) {
    return $f(fg(a, dg(this)), b);
  };

  function dg(a) {
    return {
      pendingToken: a.a,
      requestUri: "http://localhost"
    };
  }

  bg.prototype.w = function () {
    return {
      providerId: this.providerId,
      signInMethod: this.signInMethod,
      pendingToken: this.a
    };
  };

  function gg(a) {
    if (a && a.providerId && a.signInMethod && 0 == a.providerId.indexOf("saml.") && a.pendingToken) try {
      return new bg(a.providerId, a.pendingToken);
    } catch (b) {}
    return null;
  }

  function hg(a, b, c) {
    this.a = null;
    if (b.idToken || b.accessToken) b.idToken && K(this, "idToken", b.idToken), b.accessToken && K(this, "accessToken", b.accessToken), b.nonce && !b.pendingToken && K(this, "nonce", b.nonce), b.pendingToken && (this.a = b.pendingToken);else if (b.oauthToken && b.oauthTokenSecret) K(this, "accessToken", b.oauthToken), K(this, "secret", b.oauthTokenSecret);else throw new M("internal-error", "failed to construct a credential");
    K(this, "providerId", a);
    K(this, "signInMethod", c);
  }

  hg.prototype.la = function (a) {
    return cg(a, ig(this));
  };

  hg.prototype.b = function (a, b) {
    var c = ig(this);
    c.idToken = b;
    return eg(a, c);
  };

  hg.prototype.f = function (a, b) {
    var c = ig(this);
    return $f(fg(a, c), b);
  };

  function ig(a) {
    var b = {};
    a.idToken && (b.id_token = a.idToken);
    a.accessToken && (b.access_token = a.accessToken);
    a.secret && (b.oauth_token_secret = a.secret);
    b.providerId = a.providerId;
    a.nonce && !a.a && (b.nonce = a.nonce);
    b = {
      postBody: qd(b).toString(),
      requestUri: "http://localhost"
    };
    a.a && (delete b.postBody, b.pendingToken = a.a);
    return b;
  }

  hg.prototype.w = function () {
    var a = {
      providerId: this.providerId,
      signInMethod: this.signInMethod
    };
    this.idToken && (a.oauthIdToken = this.idToken);
    this.accessToken && (a.oauthAccessToken = this.accessToken);
    this.secret && (a.oauthTokenSecret = this.secret);
    this.nonce && (a.nonce = this.nonce);
    this.a && (a.pendingToken = this.a);
    return a;
  };

  function jg(a) {
    if (a && a.providerId && a.signInMethod) {
      var b = {
        idToken: a.oauthIdToken,
        accessToken: a.oauthTokenSecret ? null : a.oauthAccessToken,
        oauthTokenSecret: a.oauthTokenSecret,
        oauthToken: a.oauthTokenSecret && a.oauthAccessToken,
        nonce: a.nonce,
        pendingToken: a.pendingToken
      };

      try {
        return new hg(a.providerId, b, a.signInMethod);
      } catch (c) {}
    }

    return null;
  }

  function kg(a, b) {
    this.Dc = b || [];
    L(this, {
      providerId: a,
      isOAuthProvider: !0
    });
    this.zb = {};
    this.cb = (Nf(a) || {}).Oa || null;
    this.$a = null;
  }

  kg.prototype.Da = function (a) {
    this.zb = db(a);
    return this;
  };

  function lg(a) {
    if ("string" !== typeof a || 0 != a.indexOf("saml.")) throw new M("argument-error", 'SAML provider IDs must be prefixed with "saml."');
    kg.call(this, a, []);
  }

  u(lg, kg);

  function N(a) {
    kg.call(this, a, Lf);
    this.a = [];
  }

  u(N, kg);

  N.prototype.ua = function (a) {
    Ma(this.a, a) || this.a.push(a);
    return this;
  };

  N.prototype.Fb = function () {
    return Pa(this.a);
  };

  N.prototype.credential = function (a, b) {
    var c;
    r(a) ? c = {
      idToken: a.idToken || null,
      accessToken: a.accessToken || null,
      nonce: a.rawNonce || null
    } : c = {
      idToken: a || null,
      accessToken: b || null
    };
    if (!c.idToken && !c.accessToken) throw new M("argument-error", "credential failed: must provide the ID token and/or the access token.");
    return new hg(this.providerId, c, this.providerId);
  };

  function mg() {
    N.call(this, "facebook.com");
  }

  u(mg, N);
  K(mg, "PROVIDER_ID", "facebook.com");
  K(mg, "FACEBOOK_SIGN_IN_METHOD", "facebook.com");

  function ng(a) {
    if (!a) throw new M("argument-error", "credential failed: expected 1 argument (the OAuth access token).");
    var b = a;
    r(a) && (b = a.accessToken);
    return new mg().credential({
      accessToken: b
    });
  }

  function og() {
    N.call(this, "github.com");
  }

  u(og, N);
  K(og, "PROVIDER_ID", "github.com");
  K(og, "GITHUB_SIGN_IN_METHOD", "github.com");

  function pg(a) {
    if (!a) throw new M("argument-error", "credential failed: expected 1 argument (the OAuth access token).");
    var b = a;
    r(a) && (b = a.accessToken);
    return new og().credential({
      accessToken: b
    });
  }

  function qg() {
    N.call(this, "google.com");
    this.ua("profile");
  }

  u(qg, N);
  K(qg, "PROVIDER_ID", "google.com");
  K(qg, "GOOGLE_SIGN_IN_METHOD", "google.com");

  function rg(a, b) {
    var c = a;
    r(a) && (c = a.idToken, b = a.accessToken);
    return new qg().credential({
      idToken: c,
      accessToken: b
    });
  }

  function sg() {
    kg.call(this, "twitter.com", Kf);
  }

  u(sg, kg);
  K(sg, "PROVIDER_ID", "twitter.com");
  K(sg, "TWITTER_SIGN_IN_METHOD", "twitter.com");

  function tg(a, b) {
    var c = a;
    r(c) || (c = {
      oauthToken: a,
      oauthTokenSecret: b
    });
    if (!c.oauthToken || !c.oauthTokenSecret) throw new M("argument-error", "credential failed: expected 2 arguments (the OAuth access token and secret).");
    return new hg("twitter.com", c, "twitter.com");
  }

  function ug(a, b, c) {
    this.a = a;
    this.c = b;
    K(this, "providerId", "password");
    K(this, "signInMethod", c === vg.EMAIL_LINK_SIGN_IN_METHOD ? vg.EMAIL_LINK_SIGN_IN_METHOD : vg.EMAIL_PASSWORD_SIGN_IN_METHOD);
  }

  ug.prototype.la = function (a) {
    return this.signInMethod == vg.EMAIL_LINK_SIGN_IN_METHOD ? O(a, wg, {
      email: this.a,
      oobCode: this.c
    }) : O(a, xg, {
      email: this.a,
      password: this.c
    });
  };

  ug.prototype.b = function (a, b) {
    return this.signInMethod == vg.EMAIL_LINK_SIGN_IN_METHOD ? O(a, yg, {
      idToken: b,
      email: this.a,
      oobCode: this.c
    }) : O(a, zg, {
      idToken: b,
      email: this.a,
      password: this.c
    });
  };

  ug.prototype.f = function (a, b) {
    return $f(this.la(a), b);
  };

  ug.prototype.w = function () {
    return {
      email: this.a,
      password: this.c,
      signInMethod: this.signInMethod
    };
  };

  function Ag(a) {
    return a && a.email && a.password ? new ug(a.email, a.password, a.signInMethod) : null;
  }

  function vg() {
    L(this, {
      providerId: "password",
      isOAuthProvider: !1
    });
  }

  function Bg(a, b) {
    b = Cg(b);
    if (!b) throw new M("argument-error", "Invalid email link!");
    return new ug(a, b, vg.EMAIL_LINK_SIGN_IN_METHOD);
  }

  function Cg(a) {
    a = Yf(a);
    a = new Xf(a);
    var b = kd(a.a, "oobCode") || null;
    return "signIn" === (kd(a.a, "mode") || null) && b ? b : null;
  }

  L(vg, {
    PROVIDER_ID: "password"
  });
  L(vg, {
    EMAIL_LINK_SIGN_IN_METHOD: "emailLink"
  });
  L(vg, {
    EMAIL_PASSWORD_SIGN_IN_METHOD: "password"
  });

  function Dg(a) {
    if (!(a.Ta && a.Sa || a.Fa && a.$)) throw new M("internal-error");
    this.a = a;
    K(this, "providerId", "phone");
    K(this, "signInMethod", "phone");
  }

  Dg.prototype.la = function (a) {
    return a.Ua(Eg(this));
  };

  Dg.prototype.b = function (a, b) {
    var c = Eg(this);
    c.idToken = b;
    return O(a, Fg, c);
  };

  Dg.prototype.f = function (a, b) {
    var c = Eg(this);
    c.operation = "REAUTH";
    a = O(a, Gg, c);
    return $f(a, b);
  };

  Dg.prototype.w = function () {
    var a = {
      providerId: "phone"
    };
    this.a.Ta && (a.verificationId = this.a.Ta);
    this.a.Sa && (a.verificationCode = this.a.Sa);
    this.a.Fa && (a.temporaryProof = this.a.Fa);
    this.a.$ && (a.phoneNumber = this.a.$);
    return a;
  };

  function Hg(a) {
    if (a && "phone" === a.providerId && (a.verificationId && a.verificationCode || a.temporaryProof && a.phoneNumber)) {
      var b = {};
      x(["verificationId", "verificationCode", "temporaryProof", "phoneNumber"], function (c) {
        a[c] && (b[c] = a[c]);
      });
      return new Dg(b);
    }

    return null;
  }

  function Eg(a) {
    return a.a.Fa && a.a.$ ? {
      temporaryProof: a.a.Fa,
      phoneNumber: a.a.$
    } : {
      sessionInfo: a.a.Ta,
      code: a.a.Sa
    };
  }

  function Ig(a) {
    try {
      this.a = a || _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.auth();
    } catch (b) {
      throw new M("argument-error", "Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().");
    }

    L(this, {
      providerId: "phone",
      isOAuthProvider: !1
    });
  }

  Ig.prototype.Ua = function (a, b) {
    var c = this.a.c;
    return D(b.verify()).then(function (d) {
      if (!n(d)) throw new M("argument-error", "An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");

      switch (b.type) {
        case "recaptcha":
          return Jg(c, {
            phoneNumber: a,
            recaptchaToken: d
          }).then(function (e) {
            "function" === typeof b.reset && b.reset();
            return e;
          }, function (e) {
            "function" === typeof b.reset && b.reset();
            throw e;
          });

        default:
          throw new M("argument-error", 'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.');
      }
    });
  };

  function Kg(a, b) {
    if (!a) throw new M("missing-verification-id");
    if (!b) throw new M("missing-verification-code");
    return new Dg({
      Ta: a,
      Sa: b
    });
  }

  L(Ig, {
    PROVIDER_ID: "phone"
  });
  L(Ig, {
    PHONE_SIGN_IN_METHOD: "phone"
  });

  function Lg(a) {
    if (a.temporaryProof && a.phoneNumber) return new Dg({
      Fa: a.temporaryProof,
      $: a.phoneNumber
    });
    var b = a && a.providerId;
    if (!b || "password" === b) return null;
    var c = a && a.oauthAccessToken,
        d = a && a.oauthTokenSecret,
        e = a && a.nonce,
        f = a && a.oauthIdToken,
        g = a && a.pendingToken;

    try {
      switch (b) {
        case "google.com":
          return rg(f, c);

        case "facebook.com":
          return ng(c);

        case "github.com":
          return pg(c);

        case "twitter.com":
          return tg(c, d);

        default:
          return c || d || f || g ? g ? 0 == b.indexOf("saml.") ? new bg(b, g) : new hg(b, {
            pendingToken: g,
            idToken: a.oauthIdToken,
            accessToken: a.oauthAccessToken
          }, b) : new N(b).credential({
            idToken: f,
            accessToken: c,
            rawNonce: e
          }) : null;
      }
    } catch (h) {
      return null;
    }
  }

  function Mg(a) {
    if (!a.isOAuthProvider) throw new M("invalid-oauth-provider");
  }

  ;

  function Ng(a, b, c, d, e, f) {
    this.c = a;
    this.b = b || null;
    this.g = c || null;
    this.f = d || null;
    this.h = f || null;
    this.a = e || null;

    if (this.g || this.a) {
      if (this.g && this.a) throw new M("invalid-auth-event");
      if (this.g && !this.f) throw new M("invalid-auth-event");
    } else throw new M("invalid-auth-event");
  }

  Ng.prototype.getUid = function () {
    var a = [];
    a.push(this.c);
    this.b && a.push(this.b);
    this.f && a.push(this.f);
    this.i && a.push(this.i);
    return a.join("-");
  };

  Ng.prototype.w = function () {
    return {
      type: this.c,
      eventId: this.b,
      urlResponse: this.g,
      sessionId: this.f,
      postBody: this.h,
      error: this.a && this.a.w()
    };
  };

  function Og(a) {
    a = a || {};
    return a.type ? new Ng(a.type, a.eventId, a.urlResponse, a.sessionId, a.error && mf(a.error), a.postBody) : null;
  }

  ;
  /*
  Copyright 2018 Google Inc.
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */

  function Pg() {
    this.b = null;
    this.a = [];
  }

  var Qg = null;

  Pg.prototype.subscribe = function (a) {
    var b = this;
    this.a.push(a);
    this.b || (this.b = function (c) {
      for (var d = 0; d < b.a.length; d++) b.a[d](c);
    }, a = J("universalLinks.subscribe", l), "function" === typeof a && a(null, this.b));
  };

  Pg.prototype.unsubscribe = function (a) {
    y(this.a, function (b) {
      return b == a;
    });
  };

  function Rg(a) {
    var b = "unauthorized-domain",
        c = void 0,
        d = md(a);
    a = d.b;
    d = d.f;
    "chrome-extension" == d ? c = gb("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.", a) : "http" == d || "https" == d ? c = gb("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.", a) : b = "operation-not-supported-in-this-environment";
    M.call(this, b, c);
  }

  u(Rg, M);

  function Sg(a, b, c) {
    M.call(this, a, c);
    a = b || {};
    a.Ab && K(this, "email", a.Ab);
    a.$ && K(this, "phoneNumber", a.$);
    a.credential && K(this, "credential", a.credential);
  }

  u(Sg, M);

  Sg.prototype.w = function () {
    var a = {
      code: this.code,
      message: this.message
    };
    this.email && (a.email = this.email);
    this.phoneNumber && (a.phoneNumber = this.phoneNumber);
    var b = this.credential && this.credential.w();
    b && fb(a, b);
    return a;
  };

  Sg.prototype.toJSON = function () {
    return this.w();
  };

  function Tg(a) {
    if (a.code) {
      var b = a.code || "";
      0 == b.indexOf(kf) && (b = b.substring(kf.length));
      var c = {
        credential: Lg(a)
      };
      if (a.email) c.Ab = a.email;else if (a.phoneNumber) c.$ = a.phoneNumber;else if (!c.credential) return new M(b, a.message || void 0);
      return new Sg(b, c, a.message);
    }

    return null;
  }

  ;

  function Ug() {}

  Ug.prototype.c = null;

  function Vg(a) {
    return a.c || (a.c = a.b());
  }

  ;
  var Wg;

  function Xg() {}

  u(Xg, Ug);

  Xg.prototype.a = function () {
    var a = Yg(this);
    return a ? new ActiveXObject(a) : new XMLHttpRequest();
  };

  Xg.prototype.b = function () {
    var a = {};
    Yg(this) && (a[0] = !0, a[1] = !0);
    return a;
  };

  function Yg(a) {
    if (!a.f && "undefined" == typeof XMLHttpRequest && "undefined" != typeof ActiveXObject) {
      for (var b = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"], c = 0; c < b.length; c++) {
        var d = b[c];

        try {
          return new ActiveXObject(d), a.f = d;
        } catch (e) {}
      }

      throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed");
    }

    return a.f;
  }

  Wg = new Xg();

  function Zg() {}

  u(Zg, Ug);

  Zg.prototype.a = function () {
    var a = new XMLHttpRequest();
    if ("withCredentials" in a) return a;
    if ("undefined" != typeof XDomainRequest) return new $g();
    throw Error("Unsupported browser");
  };

  Zg.prototype.b = function () {
    return {};
  };

  function $g() {
    this.a = new XDomainRequest();
    this.readyState = 0;
    this.onreadystatechange = null;
    this.responseType = this.responseText = this.response = "";
    this.status = -1;
    this.statusText = "";
    this.a.onload = t(this.dc, this);
    this.a.onerror = t(this.Gb, this);
    this.a.onprogress = t(this.ec, this);
    this.a.ontimeout = t(this.ic, this);
  }

  k = $g.prototype;

  k.open = function (a, b, c) {
    if (null != c && !c) throw Error("Only async requests are supported.");
    this.a.open(a, b);
  };

  k.send = function (a) {
    if (a) {
      if ("string" == typeof a) this.a.send(a);else throw Error("Only string data is supported");
    } else this.a.send();
  };

  k.abort = function () {
    this.a.abort();
  };

  k.setRequestHeader = function () {};

  k.getResponseHeader = function (a) {
    return "content-type" == a.toLowerCase() ? this.a.contentType : "";
  };

  k.dc = function () {
    this.status = 200;
    this.response = this.responseText = this.a.responseText;
    ah(this, 4);
  };

  k.Gb = function () {
    this.status = 500;
    this.response = this.responseText = "";
    ah(this, 4);
  };

  k.ic = function () {
    this.Gb();
  };

  k.ec = function () {
    this.status = 200;
    ah(this, 1);
  };

  function ah(a, b) {
    a.readyState = b;
    if (a.onreadystatechange) a.onreadystatechange();
  }

  k.getAllResponseHeaders = function () {
    return "content-type: " + this.a.contentType;
  };

  function bh(a, b, c) {
    this.reset(a, b, c, void 0, void 0);
  }

  bh.prototype.a = null;
  var ch = 0;

  bh.prototype.reset = function (a, b, c, d, e) {
    "number" == typeof e || ch++;
    d || va();
    delete this.a;
  };

  function dh(a) {
    this.f = a;
    this.b = this.c = this.a = null;
  }

  function eh(a, b) {
    this.name = a;
    this.value = b;
  }

  eh.prototype.toString = function () {
    return this.name;
  };

  var fh = new eh("SEVERE", 1E3),
      gh = new eh("WARNING", 900),
      hh = new eh("CONFIG", 700),
      ih = new eh("FINE", 500);

  function jh(a) {
    if (a.c) return a.c;
    if (a.a) return jh(a.a);
    ya("Root logger has no level set.");
    return null;
  }

  dh.prototype.log = function (a, b, c) {
    if (a.value >= jh(this).value) for (q(b) && (b = b()), a = new bh(a, String(b), this.f), c && (a.a = c), c = this; c;) c = c.a;
  };

  var kh = {},
      lh = null;

  function mh(a) {
    lh || (lh = new dh(""), kh[""] = lh, lh.c = hh);
    var b;

    if (!(b = kh[a])) {
      b = new dh(a);
      var c = a.lastIndexOf("."),
          d = a.substr(c + 1);
      c = mh(a.substr(0, c));
      c.b || (c.b = {});
      c.b[d] = b;
      b.a = c;
      kh[a] = b;
    }

    return b;
  }

  ;

  function nh(a, b) {
    a && a.log(ih, b, void 0);
  }

  ;

  function oh(a) {
    this.f = a;
  }

  u(oh, Ug);

  oh.prototype.a = function () {
    return new ph(this.f);
  };

  oh.prototype.b = function (a) {
    return function () {
      return a;
    };
  }({});

  function ph(a) {
    F.call(this);
    this.u = a;
    this.readyState = qh;
    this.status = 0;
    this.responseType = this.responseText = this.response = this.statusText = "";
    this.onreadystatechange = null;
    this.i = new Headers();
    this.b = null;
    this.o = "GET";
    this.g = "";
    this.a = !1;
    this.h = mh("goog.net.FetchXmlHttp");
    this.l = this.c = this.f = null;
  }

  u(ph, F);
  var qh = 0;
  k = ph.prototype;

  k.open = function (a, b) {
    if (this.readyState != qh) throw this.abort(), Error("Error reopening a connection");
    this.o = a;
    this.g = b;
    this.readyState = 1;
    rh(this);
  };

  k.send = function (a) {
    if (1 != this.readyState) throw this.abort(), Error("need to call open() first. ");
    this.a = !0;
    var b = {
      headers: this.i,
      method: this.o,
      credentials: void 0,
      cache: void 0
    };
    a && (b.body = a);
    this.u.fetch(new Request(this.g, b)).then(this.hc.bind(this), this.Ma.bind(this));
  };

  k.abort = function () {
    this.response = this.responseText = "";
    this.i = new Headers();
    this.status = 0;
    this.c && this.c.cancel("Request was aborted.");
    1 <= this.readyState && this.a && 4 != this.readyState && (this.a = !1, sh(this, !1));
    this.readyState = qh;
  };

  k.hc = function (a) {
    this.a && (this.f = a, this.b || (this.b = a.headers, this.readyState = 2, rh(this)), this.a && (this.readyState = 3, rh(this), this.a && ("arraybuffer" === this.responseType ? a.arrayBuffer().then(this.fc.bind(this), this.Ma.bind(this)) : "undefined" !== typeof l.ReadableStream && "body" in a ? (this.response = this.responseText = "", this.c = a.body.getReader(), this.l = new TextDecoder(), th(this)) : a.text().then(this.gc.bind(this), this.Ma.bind(this)))));
  };

  function th(a) {
    a.c.read().then(a.cc.bind(a)).catch(a.Ma.bind(a));
  }

  k.cc = function (a) {
    if (this.a) {
      var b = this.l.decode(a.value ? a.value : new Uint8Array(0), {
        stream: !a.done
      });
      b && (this.response = this.responseText += b);
      a.done ? sh(this, !0) : rh(this);
      3 == this.readyState && th(this);
    }
  };

  k.gc = function (a) {
    this.a && (this.response = this.responseText = a, sh(this, !0));
  };

  k.fc = function (a) {
    this.a && (this.response = a, sh(this, !0));
  };

  k.Ma = function (a) {
    var b = this.h;
    b && b.log(gh, "Failed to fetch url " + this.g, a instanceof Error ? a : Error(a));
    this.a && sh(this, !0);
  };

  function sh(a, b) {
    b && a.f && (a.status = a.f.status, a.statusText = a.f.statusText);
    a.readyState = 4;
    a.f = null;
    a.c = null;
    a.l = null;
    rh(a);
  }

  k.setRequestHeader = function (a, b) {
    this.i.append(a, b);
  };

  k.getResponseHeader = function (a) {
    return this.b ? this.b.get(a.toLowerCase()) || "" : ((a = this.h) && a.log(gh, "Attempting to get response header but no headers have been received for url: " + this.g, void 0), "");
  };

  k.getAllResponseHeaders = function () {
    if (!this.b) {
      var a = this.h;
      a && a.log(gh, "Attempting to get all response headers but no headers have been received for url: " + this.g, void 0);
      return "";
    }

    a = [];

    for (var b = this.b.entries(), c = b.next(); !c.done;) c = c.value, a.push(c[0] + ": " + c[1]), c = b.next();

    return a.join("\r\n");
  };

  function rh(a) {
    a.onreadystatechange && a.onreadystatechange.call(a);
  }

  ;

  function uh(a) {
    F.call(this);
    this.headers = new Sc();
    this.D = a || null;
    this.c = !1;
    this.A = this.a = null;
    this.h = this.N = this.l = "";
    this.f = this.I = this.i = this.G = !1;
    this.g = 0;
    this.u = null;
    this.o = vh;
    this.v = this.O = !1;
  }

  u(uh, F);
  var vh = "";
  uh.prototype.b = mh("goog.net.XhrIo");
  var wh = /^https?$/i,
      xh = ["POST", "PUT"];

  function yh(a, b, c, d, e) {
    if (a.a) throw Error("[goog.net.XhrIo] Object is active with another request=" + a.l + "; newUri=" + b);
    c = c ? c.toUpperCase() : "GET";
    a.l = b;
    a.h = "";
    a.N = c;
    a.G = !1;
    a.c = !0;
    a.a = a.D ? a.D.a() : Wg.a();
    a.A = a.D ? Vg(a.D) : Vg(Wg);
    a.a.onreadystatechange = t(a.Jb, a);

    try {
      nh(a.b, zh(a, "Opening Xhr")), a.I = !0, a.a.open(c, String(b), !0), a.I = !1;
    } catch (g) {
      nh(a.b, zh(a, "Error opening Xhr: " + g.message));
      Ah(a, g);
      return;
    }

    b = d || "";
    var f = new Sc(a.headers);
    e && Rc(e, function (g, h) {
      f.set(h, g);
    });
    e = Ka(f.U());
    d = l.FormData && b instanceof l.FormData;
    !Ma(xh, c) || e || d || f.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
    f.forEach(function (g, h) {
      this.a.setRequestHeader(h, g);
    }, a);
    a.o && (a.a.responseType = a.o);
    "withCredentials" in a.a && a.a.withCredentials !== a.O && (a.a.withCredentials = a.O);

    try {
      Bh(a), 0 < a.g && (a.v = Ch(a.a), nh(a.b, zh(a, "Will abort after " + a.g + "ms if incomplete, xhr2 " + a.v)), a.v ? (a.a.timeout = a.g, a.a.ontimeout = t(a.Ga, a)) : a.u = Nc(a.Ga, a.g, a)), nh(a.b, zh(a, "Sending request")), a.i = !0, a.a.send(b), a.i = !1;
    } catch (g) {
      nh(a.b, zh(a, "Send error: " + g.message)), Ah(a, g);
    }
  }

  function Ch(a) {
    return Ub && dc(9) && "number" == typeof a.timeout && void 0 !== a.ontimeout;
  }

  function La(a) {
    return "content-type" == a.toLowerCase();
  }

  k = uh.prototype;

  k.Ga = function () {
    "undefined" != typeof fa && this.a && (this.h = "Timed out after " + this.g + "ms, aborting", nh(this.b, zh(this, this.h)), this.dispatchEvent("timeout"), this.abort(8));
  };

  function Ah(a, b) {
    a.c = !1;
    a.a && (a.f = !0, a.a.abort(), a.f = !1);
    a.h = b;
    Dh(a);
    Eh(a);
  }

  function Dh(a) {
    a.G || (a.G = !0, a.dispatchEvent("complete"), a.dispatchEvent("error"));
  }

  k.abort = function () {
    this.a && this.c && (nh(this.b, zh(this, "Aborting")), this.c = !1, this.f = !0, this.a.abort(), this.f = !1, this.dispatchEvent("complete"), this.dispatchEvent("abort"), Eh(this));
  };

  k.va = function () {
    this.a && (this.c && (this.c = !1, this.f = !0, this.a.abort(), this.f = !1), Eh(this, !0));
    uh.qb.va.call(this);
  };

  k.Jb = function () {
    this.qa || (this.I || this.i || this.f ? Fh(this) : this.wc());
  };

  k.wc = function () {
    Fh(this);
  };

  function Fh(a) {
    if (a.c && "undefined" != typeof fa) if (a.A[1] && 4 == Gh(a) && 2 == Hh(a)) nh(a.b, zh(a, "Local request error detected and ignored"));else if (a.i && 4 == Gh(a)) Nc(a.Jb, 0, a);else if (a.dispatchEvent("readystatechange"), 4 == Gh(a)) {
      nh(a.b, zh(a, "Request complete"));
      a.c = !1;

      try {
        var b = Hh(a);

        a: switch (b) {
          case 200:
          case 201:
          case 202:
          case 204:
          case 206:
          case 304:
          case 1223:
            var c = !0;
            break a;

          default:
            c = !1;
        }

        var d;

        if (!(d = c)) {
          var e;

          if (e = 0 === b) {
            var f = String(a.l).match(Vc)[1] || null;

            if (!f && l.self && l.self.location) {
              var g = l.self.location.protocol;
              f = g.substr(0, g.length - 1);
            }

            e = !wh.test(f ? f.toLowerCase() : "");
          }

          d = e;
        }

        if (d) a.dispatchEvent("complete"), a.dispatchEvent("success");else {
          try {
            var h = 2 < Gh(a) ? a.a.statusText : "";
          } catch (m) {
            nh(a.b, "Can not get status: " + m.message), h = "";
          }

          a.h = h + " [" + Hh(a) + "]";
          Dh(a);
        }
      } finally {
        Eh(a);
      }
    }
  }

  function Eh(a, b) {
    if (a.a) {
      Bh(a);
      var c = a.a,
          d = a.A[0] ? ka : null;
      a.a = null;
      a.A = null;
      b || a.dispatchEvent("ready");

      try {
        c.onreadystatechange = d;
      } catch (e) {
        (a = a.b) && a.log(fh, "Problem encountered resetting onreadystatechange: " + e.message, void 0);
      }
    }
  }

  function Bh(a) {
    a.a && a.v && (a.a.ontimeout = null);
    a.u && (l.clearTimeout(a.u), a.u = null);
  }

  function Gh(a) {
    return a.a ? a.a.readyState : 0;
  }

  function Hh(a) {
    try {
      return 2 < Gh(a) ? a.a.status : -1;
    } catch (b) {
      return -1;
    }
  }

  function Ih(a) {
    try {
      return a.a ? a.a.responseText : "";
    } catch (b) {
      return nh(a.b, "Can not get responseText: " + b.message), "";
    }
  }

  k.getResponse = function () {
    try {
      if (!this.a) return null;
      if ("response" in this.a) return this.a.response;

      switch (this.o) {
        case vh:
        case "text":
          return this.a.responseText;

        case "arraybuffer":
          if ("mozResponseArrayBuffer" in this.a) return this.a.mozResponseArrayBuffer;
      }

      var a = this.b;
      a && a.log(fh, "Response type " + this.o + " is not supported on this browser", void 0);
      return null;
    } catch (b) {
      return nh(this.b, "Can not get response: " + b.message), null;
    }
  };

  function zh(a, b) {
    return b + " [" + a.N + " " + a.l + " " + Hh(a) + "]";
  }

  ;
  /*
  Portions of this code are from MochiKit, received by
  The Closure Authors under the MIT license. All other code is Copyright
  2005-2009 The Closure Authors. All Rights Reserved.
  */

  function Jh(a) {
    var b = Kh;
    this.g = [];
    this.v = b;
    this.u = a || null;
    this.f = this.a = !1;
    this.c = void 0;
    this.l = this.A = this.i = !1;
    this.h = 0;
    this.b = null;
    this.m = 0;
  }

  Jh.prototype.cancel = function (a) {
    if (this.a) this.c instanceof Jh && this.c.cancel();else {
      if (this.b) {
        var b = this.b;
        delete this.b;
        a ? b.cancel(a) : (b.m--, 0 >= b.m && b.cancel());
      }

      this.v ? this.v.call(this.u, this) : this.l = !0;
      this.a || (a = new Lh(this), Mh(this), Nh(this, !1, a));
    }
  };

  Jh.prototype.o = function (a, b) {
    this.i = !1;
    Nh(this, a, b);
  };

  function Nh(a, b, c) {
    a.a = !0;
    a.c = c;
    a.f = !b;
    Oh(a);
  }

  function Mh(a) {
    if (a.a) {
      if (!a.l) throw new Ph(a);
      a.l = !1;
    }
  }

  function Qh(a, b) {
    Rh(a, null, b, void 0);
  }

  function Rh(a, b, c, d) {
    a.g.push([b, c, d]);
    a.a && Oh(a);
  }

  Jh.prototype.then = function (a, b, c) {
    var d,
        e,
        f = new C(function (g, h) {
      d = g;
      e = h;
    });
    Rh(this, d, function (g) {
      g instanceof Lh ? f.cancel() : e(g);
    });
    return f.then(a, b, c);
  };

  Jh.prototype.$goog_Thenable = !0;

  function Sh(a) {
    return Ja(a.g, function (b) {
      return q(b[1]);
    });
  }

  function Oh(a) {
    if (a.h && a.a && Sh(a)) {
      var b = a.h,
          c = Th[b];
      c && (l.clearTimeout(c.a), delete Th[b]);
      a.h = 0;
    }

    a.b && (a.b.m--, delete a.b);
    b = a.c;

    for (var d = c = !1; a.g.length && !a.i;) {
      var e = a.g.shift(),
          f = e[0],
          g = e[1];
      e = e[2];
      if (f = a.f ? g : f) try {
        var h = f.call(e || a.u, b);
        void 0 !== h && (a.f = a.f && (h == b || h instanceof Error), a.c = b = h);
        if (wa(b) || "function" === typeof l.Promise && b instanceof l.Promise) d = !0, a.i = !0;
      } catch (m) {
        b = m, a.f = !0, Sh(a) || (c = !0);
      }
    }

    a.c = b;
    d && (h = t(a.o, a, !0), d = t(a.o, a, !1), b instanceof Jh ? (Rh(b, h, d), b.A = !0) : b.then(h, d));
    c && (b = new Uh(b), Th[b.a] = b, a.h = b.a);
  }

  function Ph() {
    w.call(this);
  }

  u(Ph, w);
  Ph.prototype.message = "Deferred has already fired";
  Ph.prototype.name = "AlreadyCalledError";

  function Lh() {
    w.call(this);
  }

  u(Lh, w);
  Lh.prototype.message = "Deferred was canceled";
  Lh.prototype.name = "CanceledError";

  function Uh(a) {
    this.a = l.setTimeout(t(this.c, this), 0);
    this.b = a;
  }

  Uh.prototype.c = function () {
    delete Th[this.a];
    throw this.b;
  };

  var Th = {};

  function Vh(a) {
    var b = {},
        c = b.document || document,
        d = Cd(a).toString(),
        e = document.createElement("SCRIPT"),
        f = {
      Lb: e,
      Ga: void 0
    },
        g = new Jh(f),
        h = null,
        m = null != b.timeout ? b.timeout : 5E3;
    0 < m && (h = window.setTimeout(function () {
      Wh(e, !0);
      var p = new Xh(Yh, "Timeout reached for loading script " + d);
      Mh(g);
      Nh(g, !1, p);
    }, m), f.Ga = h);

    e.onload = e.onreadystatechange = function () {
      e.readyState && "loaded" != e.readyState && "complete" != e.readyState || (Wh(e, b.dd || !1, h), Mh(g), Nh(g, !0, null));
    };

    e.onerror = function () {
      Wh(e, !0, h);
      var p = new Xh(Zh, "Error while loading script " + d);
      Mh(g);
      Nh(g, !1, p);
    };

    f = b.attributes || {};
    fb(f, {
      type: "text/javascript",
      charset: "UTF-8"
    });
    Td(e, f);
    Rd(e, a);
    $h(c).appendChild(e);
    return g;
  }

  function $h(a) {
    var b;
    return (b = (a || document).getElementsByTagName("HEAD")) && 0 != b.length ? b[0] : a.documentElement;
  }

  function Kh() {
    if (this && this.Lb) {
      var a = this.Lb;
      a && "SCRIPT" == a.tagName && Wh(a, !0, this.Ga);
    }
  }

  function Wh(a, b, c) {
    null != c && l.clearTimeout(c);
    a.onload = ka;
    a.onerror = ka;
    a.onreadystatechange = ka;
    b && window.setTimeout(function () {
      a && a.parentNode && a.parentNode.removeChild(a);
    }, 0);
  }

  var Zh = 0,
      Yh = 1;

  function Xh(a, b) {
    var c = "Jsloader error (code #" + a + ")";
    b && (c += ": " + b);
    w.call(this, c);
    this.code = a;
  }

  u(Xh, w);

  function ai(a) {
    this.f = a;
  }

  u(ai, Ug);

  ai.prototype.a = function () {
    return new this.f();
  };

  ai.prototype.b = function () {
    return {};
  };

  function bi(a, b, c) {
    this.b = a;
    a = b || {};
    this.i = a.secureTokenEndpoint || "https://securetoken.googleapis.com/v1/token";
    this.m = a.secureTokenTimeout || ci;
    this.f = db(a.secureTokenHeaders || di);
    this.g = a.firebaseEndpoint || "https://www.googleapis.com/identitytoolkit/v3/relyingparty/";
    this.h = a.firebaseTimeout || ei;
    this.a = db(a.firebaseHeaders || fi);
    c && (this.a["X-Client-Version"] = c, this.f["X-Client-Version"] = c);
    c = "Node" == xe();
    c = l.XMLHttpRequest || c && _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.INTERNAL.node && _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.INTERNAL.node.XMLHttpRequest;
    if (!c && !we()) throw new M("internal-error", "The XMLHttpRequest compatibility library was not found.");
    this.c = void 0;
    we() ? this.c = new oh(self) : ye() ? this.c = new ai(c) : this.c = new Zg();
  }

  var gi,
      ag = "idToken",
      ci = new Me(3E4, 6E4),
      di = {
    "Content-Type": "application/x-www-form-urlencoded"
  },
      ei = new Me(3E4, 6E4),
      fi = {
    "Content-Type": "application/json"
  };

  function hi(a, b) {
    b ? a.a["X-Firebase-Locale"] = b : delete a.a["X-Firebase-Locale"];
  }

  function ii(a, b) {
    b ? (a.a["X-Client-Version"] = b, a.f["X-Client-Version"] = b) : (delete a.a["X-Client-Version"], delete a.f["X-Client-Version"]);
  }

  function ji(a, b, c, d, e, f, g) {
    he() || we() ? a = t(a.o, a) : (gi || (gi = new C(function (h, m) {
      ki(h, m);
    })), a = t(a.l, a));
    a(b, c, d, e, f, g);
  }

  bi.prototype.o = function (a, b, c, d, e, f) {
    if (we() && ("undefined" === typeof l.fetch || "undefined" === typeof l.Headers || "undefined" === typeof l.Request)) throw new M("operation-not-supported-in-this-environment", "fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");
    var g = new uh(this.c);

    if (f) {
      g.g = Math.max(0, f);
      var h = setTimeout(function () {
        g.dispatchEvent("timeout");
      }, f);
    }

    Ac(g, "complete", function () {
      h && clearTimeout(h);
      var m = null;

      try {
        m = JSON.parse(Ih(this)) || null;
      } catch (p) {
        m = null;
      }

      b && b(m);
    });
    Gc(g, "ready", function () {
      h && clearTimeout(h);
      Pb(this);
    });
    Gc(g, "timeout", function () {
      h && clearTimeout(h);
      Pb(this);
      b && b(null);
    });
    yh(g, a, c, d, e);
  };

  var li = new wd(xd, "https://apis.google.com/js/client.js?onload=%{onload}"),
      mi = "__fcb" + Math.floor(1E6 * Math.random()).toString();

  function ki(a, b) {
    if (((window.gapi || {}).client || {}).request) a();else {
      l[mi] = function () {
        ((window.gapi || {}).client || {}).request ? a() : b(Error("CORS_UNSUPPORTED"));
      };

      var c = Dd(li, {
        onload: mi
      });
      Qh(Vh(c), function () {
        b(Error("CORS_UNSUPPORTED"));
      });
    }
  }

  bi.prototype.l = function (a, b, c, d, e) {
    var f = this;
    gi.then(function () {
      window.gapi.client.setApiKey(f.b);
      var g = window.gapi.auth.getToken();
      window.gapi.auth.setToken(null);
      window.gapi.client.request({
        path: a,
        method: c,
        body: d,
        headers: e,
        authType: "none",
        callback: function (h) {
          window.gapi.auth.setToken(g);
          b && b(h);
        }
      });
    }).s(function (g) {
      b && b({
        error: {
          message: g && g.message || "CORS_UNSUPPORTED"
        }
      });
    });
  };

  function ni(a, b) {
    return new C(function (c, d) {
      "refresh_token" == b.grant_type && b.refresh_token || "authorization_code" == b.grant_type && b.code ? ji(a, a.i + "?key=" + encodeURIComponent(a.b), function (e) {
        e ? e.error ? d(oi(e)) : e.access_token && e.refresh_token ? c(e) : d(new M("internal-error")) : d(new M("network-request-failed"));
      }, "POST", qd(b).toString(), a.f, a.m.get()) : d(new M("internal-error"));
    });
  }

  function pi(a, b, c, d, e, f) {
    var g = md(a.g + b);
    G(g, "key", a.b);
    f && G(g, "cb", va().toString());
    var h = "GET" == c;
    if (h) for (var m in d) d.hasOwnProperty(m) && G(g, m, d[m]);
    return new C(function (p, v) {
      ji(a, g.toString(), function (z) {
        z ? z.error ? v(oi(z, e || {})) : p(z) : v(new M("network-request-failed"));
      }, c, h ? void 0 : Yd(Ie(d)), a.a, a.h.get());
    });
  }

  function qi(a) {
    a = a.email;
    if (!n(a) || !qe.test(a)) throw new M("invalid-email");
  }

  function ri(a) {
    "email" in a && qi(a);
  }

  function si(a, b) {
    return O(a, ti, {
      identifier: b,
      continueUri: Fe() ? ee() : "http://localhost"
    }).then(function (c) {
      return c.signinMethods || [];
    });
  }

  function ui(a) {
    return O(a, vi, {}).then(function (b) {
      return b.authorizedDomains || [];
    });
  }

  function wi(a) {
    if (!a[ag]) throw new M("internal-error");
  }

  function xi(a) {
    if (a.phoneNumber || a.temporaryProof) {
      if (!a.phoneNumber || !a.temporaryProof) throw new M("internal-error");
    } else {
      if (!a.sessionInfo) throw new M("missing-verification-id");
      if (!a.code) throw new M("missing-verification-code");
    }
  }

  bi.prototype.ob = function () {
    return O(this, yi, {});
  };

  bi.prototype.rb = function (a, b) {
    return O(this, zi, {
      idToken: a,
      email: b
    });
  };

  bi.prototype.sb = function (a, b) {
    return O(this, zg, {
      idToken: a,
      password: b
    });
  };

  var Ai = {
    displayName: "DISPLAY_NAME",
    photoUrl: "PHOTO_URL"
  };
  k = bi.prototype;

  k.tb = function (a, b) {
    var c = {
      idToken: a
    },
        d = [];
    bb(Ai, function (e, f) {
      var g = b[f];
      null === g ? d.push(e) : f in b && (c[f] = g);
    });
    d.length && (c.deleteAttribute = d);
    return O(this, zi, c);
  };

  k.kb = function (a, b) {
    a = {
      requestType: "PASSWORD_RESET",
      email: a
    };
    fb(a, b);
    return O(this, Bi, a);
  };

  k.lb = function (a, b) {
    a = {
      requestType: "EMAIL_SIGNIN",
      email: a
    };
    fb(a, b);
    return O(this, Ci, a);
  };

  k.jb = function (a, b) {
    a = {
      requestType: "VERIFY_EMAIL",
      idToken: a
    };
    fb(a, b);
    return O(this, Di, a);
  };

  function Jg(a, b) {
    return O(a, Ei, b);
  }

  k.Ua = function (a) {
    return O(this, Fi, a);
  };

  function Gi(a, b, c) {
    return O(a, Hi, {
      idToken: b,
      deleteProvider: c
    });
  }

  function Ii(a) {
    if (!a.requestUri || !a.sessionId && !a.postBody && !a.pendingToken) throw new M("internal-error");
  }

  function Ji(a, b) {
    b.oauthIdToken && b.providerId && 0 == b.providerId.indexOf("oidc.") && !b.pendingToken && (a.sessionId ? b.nonce = a.sessionId : a.postBody && (a = new cd(a.postBody), ud(a, "nonce") && (b.nonce = a.get("nonce"))));
    return b;
  }

  function Ki(a) {
    var b = null;
    a.needConfirmation ? (a.code = "account-exists-with-different-credential", b = Tg(a)) : "FEDERATED_USER_ID_ALREADY_LINKED" == a.errorMessage ? (a.code = "credential-already-in-use", b = Tg(a)) : "EMAIL_EXISTS" == a.errorMessage ? (a.code = "email-already-in-use", b = Tg(a)) : a.errorMessage && (b = Li(a.errorMessage));
    if (b) throw b;
    if (!a[ag]) throw new M("internal-error");
  }

  function cg(a, b) {
    b.returnIdpCredential = !0;
    return O(a, Mi, b);
  }

  function eg(a, b) {
    b.returnIdpCredential = !0;
    return O(a, Ni, b);
  }

  function fg(a, b) {
    b.returnIdpCredential = !0;
    b.autoCreate = !1;
    return O(a, Oi, b);
  }

  function Pi(a) {
    if (!a.oobCode) throw new M("invalid-action-code");
  }

  k.Za = function (a, b) {
    return O(this, Qi, {
      oobCode: a,
      newPassword: b
    });
  };

  k.Ka = function (a) {
    return O(this, Ri, {
      oobCode: a
    });
  };

  k.Wa = function (a) {
    return O(this, Si, {
      oobCode: a
    });
  };

  var Si = {
    endpoint: "setAccountInfo",
    C: Pi,
    da: "email"
  },
      Ri = {
    endpoint: "resetPassword",
    C: Pi,
    J: function (a) {
      var b = a.requestType;
      if (!b || !a.email && "EMAIL_SIGNIN" != b) throw new M("internal-error");
    }
  },
      Ti = {
    endpoint: "signupNewUser",
    C: function (a) {
      qi(a);
      if (!a.password) throw new M("weak-password");
    },
    J: wi,
    R: !0
  },
      ti = {
    endpoint: "createAuthUri"
  },
      Ui = {
    endpoint: "deleteAccount",
    T: ["idToken"]
  },
      Hi = {
    endpoint: "setAccountInfo",
    T: ["idToken", "deleteProvider"],
    C: function (a) {
      if (!na(a.deleteProvider)) throw new M("internal-error");
    }
  },
      wg = {
    endpoint: "emailLinkSignin",
    T: ["email", "oobCode"],
    C: qi,
    J: wi,
    R: !0
  },
      yg = {
    endpoint: "emailLinkSignin",
    T: ["idToken", "email", "oobCode"],
    C: qi,
    J: wi,
    R: !0
  },
      Vi = {
    endpoint: "getAccountInfo"
  },
      Ci = {
    endpoint: "getOobConfirmationCode",
    T: ["requestType"],
    C: function (a) {
      if ("EMAIL_SIGNIN" != a.requestType) throw new M("internal-error");
      qi(a);
    },
    da: "email"
  },
      Di = {
    endpoint: "getOobConfirmationCode",
    T: ["idToken", "requestType"],
    C: function (a) {
      if ("VERIFY_EMAIL" != a.requestType) throw new M("internal-error");
    },
    da: "email"
  },
      Bi = {
    endpoint: "getOobConfirmationCode",
    T: ["requestType"],
    C: function (a) {
      if ("PASSWORD_RESET" != a.requestType) throw new M("internal-error");
      qi(a);
    },
    da: "email"
  },
      vi = {
    wb: !0,
    endpoint: "getProjectConfig",
    Ib: "GET"
  },
      Wi = {
    wb: !0,
    endpoint: "getRecaptchaParam",
    Ib: "GET",
    J: function (a) {
      if (!a.recaptchaSiteKey) throw new M("internal-error");
    }
  },
      Qi = {
    endpoint: "resetPassword",
    C: Pi,
    da: "email"
  },
      Ei = {
    endpoint: "sendVerificationCode",
    T: ["phoneNumber", "recaptchaToken"],
    da: "sessionInfo"
  },
      zi = {
    endpoint: "setAccountInfo",
    T: ["idToken"],
    C: ri,
    R: !0
  },
      zg = {
    endpoint: "setAccountInfo",
    T: ["idToken"],
    C: function (a) {
      ri(a);
      if (!a.password) throw new M("weak-password");
    },
    J: wi,
    R: !0
  },
      yi = {
    endpoint: "signupNewUser",
    J: wi,
    R: !0
  },
      Mi = {
    endpoint: "verifyAssertion",
    C: Ii,
    Qa: Ji,
    J: Ki,
    R: !0
  },
      Oi = {
    endpoint: "verifyAssertion",
    C: Ii,
    Qa: Ji,
    J: function (a) {
      if (a.errorMessage && "USER_NOT_FOUND" == a.errorMessage) throw new M("user-not-found");
      if (a.errorMessage) throw Li(a.errorMessage);
      if (!a[ag]) throw new M("internal-error");
    },
    R: !0
  },
      Ni = {
    endpoint: "verifyAssertion",
    C: function (a) {
      Ii(a);
      if (!a.idToken) throw new M("internal-error");
    },
    Qa: Ji,
    J: Ki,
    R: !0
  },
      Xi = {
    endpoint: "verifyCustomToken",
    C: function (a) {
      if (!a.token) throw new M("invalid-custom-token");
    },
    J: wi,
    R: !0
  },
      xg = {
    endpoint: "verifyPassword",
    C: function (a) {
      qi(a);
      if (!a.password) throw new M("wrong-password");
    },
    J: wi,
    R: !0
  },
      Fi = {
    endpoint: "verifyPhoneNumber",
    C: xi,
    J: wi
  },
      Fg = {
    endpoint: "verifyPhoneNumber",
    C: function (a) {
      if (!a.idToken) throw new M("internal-error");
      xi(a);
    },
    J: function (a) {
      if (a.temporaryProof) throw a.code = "credential-already-in-use", Tg(a);
      wi(a);
    }
  },
      Gg = {
    Wb: {
      USER_NOT_FOUND: "user-not-found"
    },
    endpoint: "verifyPhoneNumber",
    C: xi,
    J: wi
  };

  function O(a, b, c) {
    if (!Ze(c, b.T)) return E(new M("internal-error"));
    var d = b.Ib || "POST",
        e;
    return D(c).then(b.C).then(function () {
      b.R && (c.returnSecureToken = !0);
      return pi(a, b.endpoint, d, c, b.Wb, b.wb || !1);
    }).then(function (f) {
      e = f;
      return b.Qa ? b.Qa(c, e) : e;
    }).then(b.J).then(function () {
      if (!b.da) return e;
      if (!(b.da in e)) throw new M("internal-error");
      return e[b.da];
    });
  }

  function Li(a) {
    return oi({
      error: {
        errors: [{
          message: a
        }],
        code: 400,
        message: a
      }
    });
  }

  function oi(a, b) {
    var c = (a.error && a.error.errors && a.error.errors[0] || {}).reason || "";
    var d = {
      keyInvalid: "invalid-api-key",
      ipRefererBlocked: "app-not-authorized"
    };
    if (c = d[c] ? new M(d[c]) : null) return c;
    c = a.error && a.error.message || "";
    d = {
      INVALID_CUSTOM_TOKEN: "invalid-custom-token",
      CREDENTIAL_MISMATCH: "custom-token-mismatch",
      MISSING_CUSTOM_TOKEN: "internal-error",
      INVALID_IDENTIFIER: "invalid-email",
      MISSING_CONTINUE_URI: "internal-error",
      INVALID_EMAIL: "invalid-email",
      INVALID_PASSWORD: "wrong-password",
      USER_DISABLED: "user-disabled",
      MISSING_PASSWORD: "internal-error",
      EMAIL_EXISTS: "email-already-in-use",
      PASSWORD_LOGIN_DISABLED: "operation-not-allowed",
      INVALID_IDP_RESPONSE: "invalid-credential",
      INVALID_PENDING_TOKEN: "invalid-credential",
      FEDERATED_USER_ID_ALREADY_LINKED: "credential-already-in-use",
      MISSING_OR_INVALID_NONCE: "missing-or-invalid-nonce",
      INVALID_MESSAGE_PAYLOAD: "invalid-message-payload",
      INVALID_RECIPIENT_EMAIL: "invalid-recipient-email",
      INVALID_SENDER: "invalid-sender",
      EMAIL_NOT_FOUND: "user-not-found",
      RESET_PASSWORD_EXCEED_LIMIT: "too-many-requests",
      EXPIRED_OOB_CODE: "expired-action-code",
      INVALID_OOB_CODE: "invalid-action-code",
      MISSING_OOB_CODE: "internal-error",
      INVALID_PROVIDER_ID: "invalid-provider-id",
      CREDENTIAL_TOO_OLD_LOGIN_AGAIN: "requires-recent-login",
      INVALID_ID_TOKEN: "invalid-user-token",
      TOKEN_EXPIRED: "user-token-expired",
      USER_NOT_FOUND: "user-token-expired",
      CORS_UNSUPPORTED: "cors-unsupported",
      DYNAMIC_LINK_NOT_ACTIVATED: "dynamic-link-not-activated",
      INVALID_APP_ID: "invalid-app-id",
      TOO_MANY_ATTEMPTS_TRY_LATER: "too-many-requests",
      WEAK_PASSWORD: "weak-password",
      OPERATION_NOT_ALLOWED: "operation-not-allowed",
      USER_CANCELLED: "user-cancelled",
      CAPTCHA_CHECK_FAILED: "captcha-check-failed",
      INVALID_APP_CREDENTIAL: "invalid-app-credential",
      INVALID_CODE: "invalid-verification-code",
      INVALID_PHONE_NUMBER: "invalid-phone-number",
      INVALID_SESSION_INFO: "invalid-verification-id",
      INVALID_TEMPORARY_PROOF: "invalid-credential",
      MISSING_APP_CREDENTIAL: "missing-app-credential",
      MISSING_CODE: "missing-verification-code",
      MISSING_PHONE_NUMBER: "missing-phone-number",
      MISSING_SESSION_INFO: "missing-verification-id",
      QUOTA_EXCEEDED: "quota-exceeded",
      SESSION_EXPIRED: "code-expired",
      REJECTED_CREDENTIAL: "rejected-credential",
      INVALID_CONTINUE_URI: "invalid-continue-uri",
      MISSING_ANDROID_PACKAGE_NAME: "missing-android-pkg-name",
      MISSING_IOS_BUNDLE_ID: "missing-ios-bundle-id",
      UNAUTHORIZED_DOMAIN: "unauthorized-continue-uri",
      INVALID_DYNAMIC_LINK_DOMAIN: "invalid-dynamic-link-domain",
      INVALID_OAUTH_CLIENT_ID: "invalid-oauth-client-id",
      INVALID_CERT_HASH: "invalid-cert-hash",
      ADMIN_ONLY_OPERATION: "admin-restricted-operation"
    };
    fb(d, b || {});
    b = (b = c.match(/^[^\s]+\s*:\s*(.*)$/)) && 1 < b.length ? b[1] : void 0;

    for (var e in d) if (0 === c.indexOf(e)) return new M(d[e], b);

    !b && a && (b = He(a));
    return new M("internal-error", b);
  }

  ;

  function Yi(a) {
    this.b = a;
    this.a = null;
    this.fb = Zi(this);
  }

  function Zi(a) {
    return $i().then(function () {
      return new C(function (b, c) {
        J("gapi.iframes.getContext")().open({
          where: document.body,
          url: a.b,
          messageHandlersFilter: J("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),
          attributes: {
            style: {
              position: "absolute",
              top: "-100px",
              width: "1px",
              height: "1px"
            }
          },
          dontclear: !0
        }, function (d) {
          function e() {
            clearTimeout(f);
            b();
          }

          a.a = d;
          a.a.restyle({
            setHideOnLeave: !1
          });
          var f = setTimeout(function () {
            c(Error("Network Error"));
          }, aj.get());
          d.ping(e).then(e, function () {
            c(Error("Network Error"));
          });
        });
      });
    });
  }

  function bj(a, b) {
    return a.fb.then(function () {
      return new C(function (c) {
        a.a.send(b.type, b, c, J("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));
      });
    });
  }

  function cj(a, b) {
    a.fb.then(function () {
      a.a.register("authEvent", b, J("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));
    });
  }

  var dj = new wd(xd, "https://apis.google.com/js/api.js?onload=%{onload}"),
      ej = new Me(3E4, 6E4),
      aj = new Me(5E3, 15E3),
      fj = null;

  function $i() {
    return fj ? fj : fj = new C(function (a, b) {
      function c() {
        Le();
        J("gapi.load")("gapi.iframes", {
          callback: a,
          ontimeout: function () {
            Le();
            b(Error("Network Error"));
          },
          timeout: ej.get()
        });
      }

      if (J("gapi.iframes.Iframe")) a();else if (J("gapi.load")) c();else {
        var d = "__iframefcb" + Math.floor(1E6 * Math.random()).toString();

        l[d] = function () {
          J("gapi.load") ? c() : b(Error("Network Error"));
        };

        d = Dd(dj, {
          onload: d
        });
        D(Vh(d)).s(function () {
          b(Error("Network Error"));
        });
      }
    }).s(function (a) {
      fj = null;
      throw a;
    });
  }

  ;

  function gj(a, b, c) {
    this.i = a;
    this.g = b;
    this.h = c;
    this.f = null;
    this.a = nd(this.i, "/__/auth/iframe");
    G(this.a, "apiKey", this.g);
    G(this.a, "appName", this.h);
    this.b = null;
    this.c = [];
  }

  gj.prototype.toString = function () {
    this.f ? G(this.a, "v", this.f) : td(this.a.a, "v");
    this.b ? G(this.a, "eid", this.b) : td(this.a.a, "eid");
    this.c.length ? G(this.a, "fw", this.c.join(",")) : td(this.a.a, "fw");
    return this.a.toString();
  };

  function hj(a, b, c, d, e) {
    this.o = a;
    this.l = b;
    this.c = c;
    this.m = d;
    this.h = this.g = this.i = null;
    this.a = e;
    this.f = null;
  }

  hj.prototype.toString = function () {
    var a = nd(this.o, "/__/auth/handler");
    G(a, "apiKey", this.l);
    G(a, "appName", this.c);
    G(a, "authType", this.m);

    if (this.a.isOAuthProvider) {
      var b = this.a;

      try {
        var c = _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.app(this.c).auth().ea();
      } catch (h) {
        c = null;
      }

      b.$a = c;
      G(a, "providerId", this.a.providerId);
      b = this.a;
      c = Ie(b.zb);

      for (var d in c) c[d] = c[d].toString();

      d = b.Dc;
      c = db(c);

      for (var e = 0; e < d.length; e++) {
        var f = d[e];
        f in c && delete c[f];
      }

      b.cb && b.$a && !c[b.cb] && (c[b.cb] = b.$a);
      cb(c) || G(a, "customParameters", He(c));
    }

    "function" === typeof this.a.Fb && (b = this.a.Fb(), b.length && G(a, "scopes", b.join(",")));
    this.i ? G(a, "redirectUrl", this.i) : td(a.a, "redirectUrl");
    this.g ? G(a, "eventId", this.g) : td(a.a, "eventId");
    this.h ? G(a, "v", this.h) : td(a.a, "v");
    if (this.b) for (var g in this.b) this.b.hasOwnProperty(g) && !kd(a, g) && G(a, g, this.b[g]);
    this.f ? G(a, "eid", this.f) : td(a.a, "eid");
    g = ij(this.c);
    g.length && G(a, "fw", g.join(","));
    return a.toString();
  };

  function ij(a) {
    try {
      return _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.app(a).auth().ya();
    } catch (b) {
      return [];
    }
  }

  function jj(a, b, c, d, e) {
    this.l = a;
    this.f = b;
    this.b = c;
    this.c = d || null;
    this.h = e || null;
    this.o = this.u = this.v = null;
    this.g = [];
    this.m = this.a = null;
  }

  function kj(a) {
    var b = ee();
    return ui(a).then(function (c) {
      a: {
        var d = md(b),
            e = d.f;
        d = d.b;

        for (var f = 0; f < c.length; f++) {
          var g = c[f];
          var h = d;
          var m = e;
          0 == g.indexOf("chrome-extension://") ? h = md(g).b == h && "chrome-extension" == m : "http" != m && "https" != m ? h = !1 : pe.test(g) ? h = h == g : (g = g.split(".").join("\\."), h = new RegExp("^(.+\\." + g + "|" + g + ")$", "i").test(h));

          if (h) {
            c = !0;
            break a;
          }
        }

        c = !1;
      }

      if (!c) throw new Rg(ee());
    });
  }

  function lj(a) {
    if (a.m) return a.m;
    a.m = re().then(function () {
      if (!a.u) {
        var b = a.c,
            c = a.h,
            d = ij(a.b),
            e = new gj(a.l, a.f, a.b);
        e.f = b;
        e.b = c;
        e.c = Pa(d || []);
        a.u = e.toString();
      }

      a.i = new Yi(a.u);
      mj(a);
    });
    return a.m;
  }

  k = jj.prototype;

  k.Ea = function (a, b, c) {
    var d = new M("popup-closed-by-user"),
        e = new M("web-storage-unsupported"),
        f = this,
        g = !1;
    return this.ga().then(function () {
      nj(f).then(function (h) {
        h || (a && le(a), b(e), g = !0);
      });
    }).s(function () {}).then(function () {
      if (!g) return oe(a);
    }).then(function () {
      if (!g) return Oc(c).then(function () {
        b(d);
      });
    });
  };

  k.Mb = function () {
    var a = I();
    return !Ge(a) && !Ke(a);
  };

  k.Hb = function () {
    return !1;
  };

  k.Db = function (a, b, c, d, e, f, g) {
    if (!a) return E(new M("popup-blocked"));
    if (g && !Ge()) return this.ga().s(function (m) {
      le(a);
      e(m);
    }), d(), D();
    this.a || (this.a = kj(oj(this)));
    var h = this;
    return this.a.then(function () {
      var m = h.ga().s(function (p) {
        le(a);
        e(p);
        throw p;
      });
      d();
      return m;
    }).then(function () {
      Mg(c);

      if (!g) {
        var m = pj(h.l, h.f, h.b, b, c, null, f, h.c, void 0, h.h);
        fe(m, a);
      }
    }).s(function (m) {
      "auth/network-request-failed" == m.code && (h.a = null);
      throw m;
    });
  };

  function oj(a) {
    a.o || (a.v = a.c ? Be(a.c, ij(a.b)) : null, a.o = new bi(a.f, If(a.h), a.v));
    return a.o;
  }

  k.Ca = function (a, b, c) {
    this.a || (this.a = kj(oj(this)));
    var d = this;
    return this.a.then(function () {
      Mg(b);
      var e = pj(d.l, d.f, d.b, a, b, ee(), c, d.c, void 0, d.h);
      fe(e);
    }).s(function (e) {
      "auth/network-request-failed" == e.code && (d.a = null);
      throw e;
    });
  };

  k.ga = function () {
    var a = this;
    return lj(this).then(function () {
      return a.i.fb;
    }).s(function () {
      a.a = null;
      throw new M("network-request-failed");
    });
  };

  k.Pb = function () {
    return !0;
  };

  function pj(a, b, c, d, e, f, g, h, m, p) {
    a = new hj(a, b, c, d, e);
    a.i = f;
    a.g = g;
    a.h = h;
    a.b = db(m || null);
    a.f = p;
    return a.toString();
  }

  function mj(a) {
    if (!a.i) throw Error("IfcHandler must be initialized!");
    cj(a.i, function (b) {
      var c = {};

      if (b && b.authEvent) {
        var d = !1;
        b = Og(b.authEvent);

        for (c = 0; c < a.g.length; c++) d = a.g[c](b) || d;

        c = {};
        c.status = d ? "ACK" : "ERROR";
        return D(c);
      }

      c.status = "ERROR";
      return D(c);
    });
  }

  function nj(a) {
    var b = {
      type: "webStorageSupport"
    };
    return lj(a).then(function () {
      return bj(a.i, b);
    }).then(function (c) {
      if (c && c.length && "undefined" !== typeof c[0].webStorageSupport) return c[0].webStorageSupport;
      throw Error();
    });
  }

  k.wa = function (a) {
    this.g.push(a);
  };

  k.La = function (a) {
    y(this.g, function (b) {
      return b == a;
    });
  };

  function qj(a) {
    this.a = a || _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.INTERNAL.reactNative && _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.INTERNAL.reactNative.AsyncStorage;
    if (!this.a) throw new M("internal-error", "The React Native compatibility library was not found.");
    this.type = "asyncStorage";
  }

  k = qj.prototype;

  k.get = function (a) {
    return D(this.a.getItem(a)).then(function (b) {
      return b && Je(b);
    });
  };

  k.set = function (a, b) {
    return D(this.a.setItem(a, He(b)));
  };

  k.P = function (a) {
    return D(this.a.removeItem(a));
  };

  k.Y = function () {};

  k.ca = function () {};

  function rj(a) {
    this.b = a;
    this.a = {};
    this.c = t(this.f, this);
  }

  var sj = [];

  function tj() {
    var a = we() ? self : null;
    x(sj, function (c) {
      c.b == a && (b = c);
    });

    if (!b) {
      var b = new rj(a);
      sj.push(b);
    }

    return b;
  }

  rj.prototype.f = function (a) {
    var b = a.data.eventType,
        c = a.data.eventId,
        d = this.a[b];

    if (d && 0 < d.length) {
      a.ports[0].postMessage({
        status: "ack",
        eventId: c,
        eventType: b,
        response: null
      });
      var e = [];
      x(d, function (f) {
        e.push(D().then(function () {
          return f(a.origin, a.data.data);
        }));
      });
      Bb(e).then(function (f) {
        var g = [];
        x(f, function (h) {
          g.push({
            fulfilled: h.Eb,
            value: h.value,
            reason: h.reason ? h.reason.message : void 0
          });
        });
        x(g, function (h) {
          for (var m in h) "undefined" === typeof h[m] && delete h[m];
        });
        a.ports[0].postMessage({
          status: "done",
          eventId: c,
          eventType: b,
          response: g
        });
      });
    }
  };

  rj.prototype.subscribe = function (a, b) {
    cb(this.a) && this.b.addEventListener("message", this.c);
    "undefined" === typeof this.a[a] && (this.a[a] = []);
    this.a[a].push(b);
  };

  rj.prototype.unsubscribe = function (a, b) {
    "undefined" !== typeof this.a[a] && b ? (y(this.a[a], function (c) {
      return c == b;
    }), 0 == this.a[a].length && delete this.a[a]) : b || delete this.a[a];
    cb(this.a) && this.b.removeEventListener("message", this.c);
  };

  function uj(a) {
    this.a = a;
  }

  uj.prototype.postMessage = function (a, b) {
    this.a.postMessage(a, b);
  };

  function vj(a) {
    this.c = a;
    this.b = !1;
    this.a = [];
  }

  function wj(a, b, c, d) {
    var e,
        f = c || {},
        g,
        h,
        m,
        p = null;
    if (a.b) return E(Error("connection_unavailable"));
    var v = d ? 800 : 50,
        z = "undefined" !== typeof MessageChannel ? new MessageChannel() : null;
    return new C(function (H, U) {
      z ? (e = Math.floor(Math.random() * Math.pow(10, 20)).toString(), z.port1.start(), h = setTimeout(function () {
        U(Error("unsupported_event"));
      }, v), g = function (ta) {
        ta.data.eventId === e && ("ack" === ta.data.status ? (clearTimeout(h), m = setTimeout(function () {
          U(Error("timeout"));
        }, 3E3)) : "done" === ta.data.status ? (clearTimeout(m), "undefined" !== typeof ta.data.response ? H(ta.data.response) : U(Error("unknown_error"))) : (clearTimeout(h), clearTimeout(m), U(Error("invalid_response"))));
      }, p = {
        messageChannel: z,
        onMessage: g
      }, a.a.push(p), z.port1.addEventListener("message", g), a.c.postMessage({
        eventType: b,
        eventId: e,
        data: f
      }, [z.port2])) : U(Error("connection_unavailable"));
    }).then(function (H) {
      xj(a, p);
      return H;
    }).s(function (H) {
      xj(a, p);
      throw H;
    });
  }

  function xj(a, b) {
    if (b) {
      var c = b.messageChannel,
          d = b.onMessage;
      c && (c.port1.removeEventListener("message", d), c.port1.close());
      y(a.a, function (e) {
        return e == b;
      });
    }
  }

  vj.prototype.close = function () {
    for (; 0 < this.a.length;) xj(this, this.a[0]);

    this.b = !0;
  };

  function yj() {
    if (!zj()) throw new M("web-storage-unsupported");
    this.c = {};
    this.a = [];
    this.b = 0;
    this.l = l.indexedDB;
    this.type = "indexedDB";
    this.g = this.m = this.f = this.i = null;
    this.u = !1;
    this.h = null;
    var a = this;
    we() && self ? (this.m = tj(), this.m.subscribe("keyChanged", function (b, c) {
      return Aj(a).then(function (d) {
        0 < d.length && x(a.a, function (e) {
          e(d);
        });
        return {
          keyProcessed: Ma(d, c.key)
        };
      });
    }), this.m.subscribe("ping", function () {
      return D(["keyChanged"]);
    })) : Se().then(function (b) {
      if (a.h = b) a.g = new vj(new uj(b)), wj(a.g, "ping", null, !0).then(function (c) {
        c[0].fulfilled && Ma(c[0].value, "keyChanged") && (a.u = !0);
      }).s(function () {});
    });
  }

  var Bj;

  function Cj(a) {
    return new C(function (b, c) {
      var d = a.l.deleteDatabase("firebaseLocalStorageDb");

      d.onsuccess = function () {
        b();
      };

      d.onerror = function (e) {
        c(Error(e.target.error));
      };
    });
  }

  function Dj(a) {
    return new C(function (b, c) {
      var d = a.l.open("firebaseLocalStorageDb", 1);

      d.onerror = function (e) {
        try {
          e.preventDefault();
        } catch (f) {}

        c(Error(e.target.error));
      };

      d.onupgradeneeded = function (e) {
        e = e.target.result;

        try {
          e.createObjectStore("firebaseLocalStorage", {
            keyPath: "fbase_key"
          });
        } catch (f) {
          c(f);
        }
      };

      d.onsuccess = function (e) {
        e = e.target.result;
        e.objectStoreNames.contains("firebaseLocalStorage") ? b(e) : Cj(a).then(function () {
          return Dj(a);
        }).then(function (f) {
          b(f);
        }).s(function (f) {
          c(f);
        });
      };
    });
  }

  function Ej(a) {
    a.o || (a.o = Dj(a));
    return a.o;
  }

  function zj() {
    try {
      return !!l.indexedDB;
    } catch (a) {
      return !1;
    }
  }

  function Fj(a) {
    return a.objectStore("firebaseLocalStorage");
  }

  function Gj(a, b) {
    return a.transaction(["firebaseLocalStorage"], b ? "readwrite" : "readonly");
  }

  function Hj(a) {
    return new C(function (b, c) {
      a.onsuccess = function (d) {
        d && d.target ? b(d.target.result) : b();
      };

      a.onerror = function (d) {
        c(d.target.error);
      };
    });
  }

  k = yj.prototype;

  k.set = function (a, b) {
    var c = !1,
        d,
        e = this;
    return Ej(this).then(function (f) {
      d = f;
      f = Fj(Gj(d, !0));
      return Hj(f.get(a));
    }).then(function (f) {
      var g = Fj(Gj(d, !0));
      if (f) return f.value = b, Hj(g.put(f));
      e.b++;
      c = !0;
      f = {};
      f.fbase_key = a;
      f.value = b;
      return Hj(g.add(f));
    }).then(function () {
      e.c[a] = b;
      return Ij(e, a);
    }).ia(function () {
      c && e.b--;
    });
  };

  function Ij(a, b) {
    return a.g && a.h && Re() === a.h ? wj(a.g, "keyChanged", {
      key: b
    }, a.u).then(function () {}).s(function () {}) : D();
  }

  k.get = function (a) {
    return Ej(this).then(function (b) {
      return Hj(Fj(Gj(b, !1)).get(a));
    }).then(function (b) {
      return b && b.value;
    });
  };

  k.P = function (a) {
    var b = !1,
        c = this;
    return Ej(this).then(function (d) {
      b = !0;
      c.b++;
      return Hj(Fj(Gj(d, !0))["delete"](a));
    }).then(function () {
      delete c.c[a];
      return Ij(c, a);
    }).ia(function () {
      b && c.b--;
    });
  };

  function Aj(a) {
    return Ej(a).then(function (b) {
      var c = Fj(Gj(b, !1));
      return c.getAll ? Hj(c.getAll()) : new C(function (d, e) {
        var f = [],
            g = c.openCursor();

        g.onsuccess = function (h) {
          (h = h.target.result) ? (f.push(h.value), h["continue"]()) : d(f);
        };

        g.onerror = function (h) {
          e(h.target.error);
        };
      });
    }).then(function (b) {
      var c = {},
          d = [];

      if (0 == a.b) {
        for (d = 0; d < b.length; d++) c[b[d].fbase_key] = b[d].value;

        d = ge(a.c, c);
        a.c = c;
      }

      return d;
    });
  }

  k.Y = function (a) {
    0 == this.a.length && Jj(this);
    this.a.push(a);
  };

  k.ca = function (a) {
    y(this.a, function (b) {
      return b == a;
    });
    0 == this.a.length && Kj(this);
  };

  function Jj(a) {
    function b() {
      a.f = setTimeout(function () {
        a.i = Aj(a).then(function (c) {
          0 < c.length && x(a.a, function (d) {
            d(c);
          });
        }).then(function () {
          b();
        }).s(function (c) {
          "STOP_EVENT" != c.message && b();
        });
      }, 800);
    }

    Kj(a);
    b();
  }

  function Kj(a) {
    a.i && a.i.cancel("STOP_EVENT");
    a.f && (clearTimeout(a.f), a.f = null);
  }

  ;

  function Lj(a) {
    var b = this,
        c = null;
    this.a = [];
    this.type = "indexedDB";
    this.c = a;
    this.b = D().then(function () {
      if (zj()) {
        var d = De(),
            e = "__sak" + d;
        Bj || (Bj = new yj());
        c = Bj;
        return c.set(e, d).then(function () {
          return c.get(e);
        }).then(function (f) {
          if (f !== d) throw Error("indexedDB not supported!");
          return c.P(e);
        }).then(function () {
          return c;
        }).s(function () {
          return b.c;
        });
      }

      return b.c;
    }).then(function (d) {
      b.type = d.type;
      d.Y(function (e) {
        x(b.a, function (f) {
          f(e);
        });
      });
      return d;
    });
  }

  k = Lj.prototype;

  k.get = function (a) {
    return this.b.then(function (b) {
      return b.get(a);
    });
  };

  k.set = function (a, b) {
    return this.b.then(function (c) {
      return c.set(a, b);
    });
  };

  k.P = function (a) {
    return this.b.then(function (b) {
      return b.P(a);
    });
  };

  k.Y = function (a) {
    this.a.push(a);
  };

  k.ca = function (a) {
    y(this.a, function (b) {
      return b == a;
    });
  };

  function Mj() {
    this.a = {};
    this.type = "inMemory";
  }

  k = Mj.prototype;

  k.get = function (a) {
    return D(this.a[a]);
  };

  k.set = function (a, b) {
    this.a[a] = b;
    return D();
  };

  k.P = function (a) {
    delete this.a[a];
    return D();
  };

  k.Y = function () {};

  k.ca = function () {};

  function Nj() {
    if (!Oj()) {
      if ("Node" == xe()) throw new M("internal-error", "The LocalStorage compatibility library was not found.");
      throw new M("web-storage-unsupported");
    }

    this.a = Pj() || _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.INTERNAL.node.localStorage;
    this.type = "localStorage";
  }

  function Pj() {
    try {
      var a = l.localStorage,
          b = De();
      a && (a.setItem(b, "1"), a.removeItem(b));
      return a;
    } catch (c) {
      return null;
    }
  }

  function Oj() {
    var a = "Node" == xe();
    a = Pj() || a && _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.INTERNAL.node && _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.INTERNAL.node.localStorage;
    if (!a) return !1;

    try {
      return a.setItem("__sak", "1"), a.removeItem("__sak"), !0;
    } catch (b) {
      return !1;
    }
  }

  k = Nj.prototype;

  k.get = function (a) {
    var b = this;
    return D().then(function () {
      var c = b.a.getItem(a);
      return Je(c);
    });
  };

  k.set = function (a, b) {
    var c = this;
    return D().then(function () {
      var d = He(b);
      null === d ? c.P(a) : c.a.setItem(a, d);
    });
  };

  k.P = function (a) {
    var b = this;
    return D().then(function () {
      b.a.removeItem(a);
    });
  };

  k.Y = function (a) {
    l.window && xc(l.window, "storage", a);
  };

  k.ca = function (a) {
    l.window && Hc(l.window, "storage", a);
  };

  function Qj() {
    this.type = "nullStorage";
  }

  k = Qj.prototype;

  k.get = function () {
    return D(null);
  };

  k.set = function () {
    return D();
  };

  k.P = function () {
    return D();
  };

  k.Y = function () {};

  k.ca = function () {};

  function Rj() {
    if (!Sj()) {
      if ("Node" == xe()) throw new M("internal-error", "The SessionStorage compatibility library was not found.");
      throw new M("web-storage-unsupported");
    }

    this.a = Tj() || _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.INTERNAL.node.sessionStorage;
    this.type = "sessionStorage";
  }

  function Tj() {
    try {
      var a = l.sessionStorage,
          b = De();
      a && (a.setItem(b, "1"), a.removeItem(b));
      return a;
    } catch (c) {
      return null;
    }
  }

  function Sj() {
    var a = "Node" == xe();
    a = Tj() || a && _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.INTERNAL.node && _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.INTERNAL.node.sessionStorage;
    if (!a) return !1;

    try {
      return a.setItem("__sak", "1"), a.removeItem("__sak"), !0;
    } catch (b) {
      return !1;
    }
  }

  k = Rj.prototype;

  k.get = function (a) {
    var b = this;
    return D().then(function () {
      var c = b.a.getItem(a);
      return Je(c);
    });
  };

  k.set = function (a, b) {
    var c = this;
    return D().then(function () {
      var d = He(b);
      null === d ? c.P(a) : c.a.setItem(a, d);
    });
  };

  k.P = function (a) {
    var b = this;
    return D().then(function () {
      b.a.removeItem(a);
    });
  };

  k.Y = function () {};

  k.ca = function () {};

  function Uj() {
    var a = {};
    a.Browser = Vj;
    a.Node = Wj;
    a.ReactNative = Xj;
    a.Worker = Yj;
    this.a = a[xe()];
  }

  var Zj,
      Vj = {
    B: Nj,
    Ra: Rj
  },
      Wj = {
    B: Nj,
    Ra: Rj
  },
      Xj = {
    B: qj,
    Ra: Qj
  },
      Yj = {
    B: Nj,
    Ra: Qj
  };
  var ak = {
    Xc: "local",
    NONE: "none",
    Zc: "session"
  };

  function bk(a) {
    var b = new M("invalid-persistence-type"),
        c = new M("unsupported-persistence-type");

    a: {
      for (d in ak) if (ak[d] == a) {
        var d = !0;
        break a;
      }

      d = !1;
    }

    if (!d || "string" !== typeof a) throw b;

    switch (xe()) {
      case "ReactNative":
        if ("session" === a) throw c;
        break;

      case "Node":
        if ("none" !== a) throw c;
        break;

      default:
        if (!Ce() && "none" !== a) throw c;
    }
  }

  function ck() {
    var a = !Ke(I()) && ve() ? !0 : !1,
        b = Ge(),
        c = Ce();
    this.o = a;
    this.h = b;
    this.m = c;
    this.a = {};
    Zj || (Zj = new Uj());
    a = Zj;

    try {
      this.g = !de() && Qe() || !l.indexedDB ? new a.a.B() : new Lj(we() ? new Mj() : new a.a.B());
    } catch (d) {
      this.g = new Mj(), this.h = !0;
    }

    try {
      this.i = new a.a.Ra();
    } catch (d) {
      this.i = new Mj();
    }

    this.l = new Mj();
    this.f = t(this.Ob, this);
    this.b = {};
  }

  var dk;

  function ek() {
    dk || (dk = new ck());
    return dk;
  }

  function fk(a, b) {
    switch (b) {
      case "session":
        return a.i;

      case "none":
        return a.l;

      default:
        return a.g;
    }
  }

  function gk(a, b) {
    return "firebase:" + a.name + (b ? ":" + b : "");
  }

  function hk(a, b, c) {
    var d = gk(b, c),
        e = fk(a, b.B);
    return a.get(b, c).then(function (f) {
      var g = null;

      try {
        g = Je(l.localStorage.getItem(d));
      } catch (h) {}

      if (g && !f) return l.localStorage.removeItem(d), a.set(b, g, c);
      g && f && "localStorage" != e.type && l.localStorage.removeItem(d);
    });
  }

  k = ck.prototype;

  k.get = function (a, b) {
    return fk(this, a.B).get(gk(a, b));
  };

  function ik(a, b, c) {
    c = gk(b, c);
    "local" == b.B && (a.b[c] = null);
    return fk(a, b.B).P(c);
  }

  k.set = function (a, b, c) {
    var d = gk(a, c),
        e = this,
        f = fk(this, a.B);
    return f.set(d, b).then(function () {
      return f.get(d);
    }).then(function (g) {
      "local" == a.B && (e.b[d] = g);
    });
  };

  k.addListener = function (a, b, c) {
    a = gk(a, b);
    this.m && (this.b[a] = l.localStorage.getItem(a));
    cb(this.a) && (fk(this, "local").Y(this.f), this.h || (de() || !Qe()) && l.indexedDB || !this.m || jk(this));
    this.a[a] || (this.a[a] = []);
    this.a[a].push(c);
  };

  k.removeListener = function (a, b, c) {
    a = gk(a, b);
    this.a[a] && (y(this.a[a], function (d) {
      return d == c;
    }), 0 == this.a[a].length && delete this.a[a]);
    cb(this.a) && (fk(this, "local").ca(this.f), kk(this));
  };

  function jk(a) {
    kk(a);
    a.c = setInterval(function () {
      for (var b in a.a) {
        var c = l.localStorage.getItem(b),
            d = a.b[b];
        c != d && (a.b[b] = c, c = new lc({
          type: "storage",
          key: b,
          target: window,
          oldValue: d,
          newValue: c,
          a: !0
        }), a.Ob(c));
      }
    }, 1E3);
  }

  function kk(a) {
    a.c && (clearInterval(a.c), a.c = null);
  }

  k.Ob = function (a) {
    if (a && a.f) {
      var b = a.a.key;
      if (null == b) for (var c in this.a) {
        var d = this.b[c];
        "undefined" === typeof d && (d = null);
        var e = l.localStorage.getItem(c);
        e !== d && (this.b[c] = e, this.Xa(c));
      } else if (0 == b.indexOf("firebase:") && this.a[b]) {
        "undefined" !== typeof a.a.a ? fk(this, "local").ca(this.f) : kk(this);
        if (this.o) if (c = l.localStorage.getItem(b), d = a.a.newValue, d !== c) null !== d ? l.localStorage.setItem(b, d) : l.localStorage.removeItem(b);else if (this.b[b] === d && "undefined" === typeof a.a.a) return;
        var f = this;

        c = function () {
          if ("undefined" !== typeof a.a.a || f.b[b] !== l.localStorage.getItem(b)) f.b[b] = l.localStorage.getItem(b), f.Xa(b);
        };

        Ub && ec && 10 == ec && l.localStorage.getItem(b) !== a.a.newValue && a.a.newValue !== a.a.oldValue ? setTimeout(c, 10) : c();
      }
    } else x(a, t(this.Xa, this));
  };

  k.Xa = function (a) {
    this.a[a] && x(this.a[a], function (b) {
      b();
    });
  };

  function lk(a) {
    this.a = a;
    this.b = ek();
  }

  var mk = {
    name: "authEvent",
    B: "local"
  };

  function nk(a) {
    return a.b.get(mk, a.a).then(function (b) {
      return Og(b);
    });
  }

  ;

  function ok() {
    this.a = ek();
  }

  ;

  function pk() {
    this.b = -1;
  }

  ;

  function qk(a, b) {
    this.b = rk;
    this.f = l.Uint8Array ? new Uint8Array(this.b) : Array(this.b);
    this.g = this.c = 0;
    this.a = [];
    this.i = a;
    this.h = b;
    this.m = l.Int32Array ? new Int32Array(64) : Array(64);
    void 0 !== sk || (l.Int32Array ? sk = new Int32Array(tk) : sk = tk);
    this.reset();
  }

  var sk;
  u(qk, pk);

  for (var rk = 64, uk = rk - 1, vk = [], wk = 0; wk < uk; wk++) vk[wk] = 0;

  var xk = Oa(128, vk);

  qk.prototype.reset = function () {
    this.g = this.c = 0;
    this.a = l.Int32Array ? new Int32Array(this.h) : Pa(this.h);
  };

  function yk(a) {
    for (var b = a.f, c = a.m, d = 0, e = 0; e < b.length;) c[d++] = b[e] << 24 | b[e + 1] << 16 | b[e + 2] << 8 | b[e + 3], e = 4 * d;

    for (b = 16; 64 > b; b++) {
      e = c[b - 15] | 0;
      d = c[b - 2] | 0;
      var f = (c[b - 16] | 0) + ((e >>> 7 | e << 25) ^ (e >>> 18 | e << 14) ^ e >>> 3) | 0,
          g = (c[b - 7] | 0) + ((d >>> 17 | d << 15) ^ (d >>> 19 | d << 13) ^ d >>> 10) | 0;
      c[b] = f + g | 0;
    }

    d = a.a[0] | 0;
    e = a.a[1] | 0;
    var h = a.a[2] | 0,
        m = a.a[3] | 0,
        p = a.a[4] | 0,
        v = a.a[5] | 0,
        z = a.a[6] | 0;
    f = a.a[7] | 0;

    for (b = 0; 64 > b; b++) {
      var H = ((d >>> 2 | d << 30) ^ (d >>> 13 | d << 19) ^ (d >>> 22 | d << 10)) + (d & e ^ d & h ^ e & h) | 0;
      g = p & v ^ ~p & z;
      f = f + ((p >>> 6 | p << 26) ^ (p >>> 11 | p << 21) ^ (p >>> 25 | p << 7)) | 0;
      g = g + (sk[b] | 0) | 0;
      g = f + (g + (c[b] | 0) | 0) | 0;
      f = z;
      z = v;
      v = p;
      p = m + g | 0;
      m = h;
      h = e;
      e = d;
      d = g + H | 0;
    }

    a.a[0] = a.a[0] + d | 0;
    a.a[1] = a.a[1] + e | 0;
    a.a[2] = a.a[2] + h | 0;
    a.a[3] = a.a[3] + m | 0;
    a.a[4] = a.a[4] + p | 0;
    a.a[5] = a.a[5] + v | 0;
    a.a[6] = a.a[6] + z | 0;
    a.a[7] = a.a[7] + f | 0;
  }

  function zk(a, b, c) {
    void 0 === c && (c = b.length);
    var d = 0,
        e = a.c;
    if (n(b)) for (; d < c;) a.f[e++] = b.charCodeAt(d++), e == a.b && (yk(a), e = 0);else if (oa(b)) for (; d < c;) {
      var f = b[d++];
      if (!("number" == typeof f && 0 <= f && 255 >= f && f == (f | 0))) throw Error("message must be a byte array");
      a.f[e++] = f;
      e == a.b && (yk(a), e = 0);
    } else throw Error("message must be string or array");
    a.c = e;
    a.g += c;
  }

  var tk = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];

  function Ak() {
    qk.call(this, 8, Bk);
  }

  u(Ak, qk);
  var Bk = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225];

  function Ck(a, b, c, d, e) {
    this.l = a;
    this.i = b;
    this.m = c;
    this.o = d || null;
    this.u = e || null;
    this.h = b + ":" + c;
    this.v = new ok();
    this.g = new lk(this.h);
    this.f = null;
    this.b = [];
    this.a = this.c = null;
  }

  function Dk(a) {
    return new M("invalid-cordova-configuration", a);
  }

  k = Ck.prototype;

  k.ga = function () {
    return this.za ? this.za : this.za = se().then(function () {
      if ("function" !== typeof J("universalLinks.subscribe", l)) throw Dk("cordova-universal-links-plugin-fix is not installed");
      if ("undefined" === typeof J("BuildInfo.packageName", l)) throw Dk("cordova-plugin-buildinfo is not installed");
      if ("function" !== typeof J("cordova.plugins.browsertab.openUrl", l)) throw Dk("cordova-plugin-browsertab is not installed");
      if ("function" !== typeof J("cordova.InAppBrowser.open", l)) throw Dk("cordova-plugin-inappbrowser is not installed");
    }, function () {
      throw new M("cordova-not-ready");
    });
  };

  function Ek() {
    for (var a = 20, b = []; 0 < a;) b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62 * Math.random()))), a--;

    return b.join("");
  }

  function Fk(a) {
    var b = new Ak();
    zk(b, a);
    a = [];
    var c = 8 * b.g;
    56 > b.c ? zk(b, xk, 56 - b.c) : zk(b, xk, b.b - (b.c - 56));

    for (var d = 63; 56 <= d; d--) b.f[d] = c & 255, c /= 256;

    yk(b);

    for (d = c = 0; d < b.i; d++) for (var e = 24; 0 <= e; e -= 8) a[c++] = b.a[d] >> e & 255;

    return yf(a);
  }

  k.Ea = function (a, b) {
    b(new M("operation-not-supported-in-this-environment"));
    return D();
  };

  k.Db = function () {
    return E(new M("operation-not-supported-in-this-environment"));
  };

  k.Pb = function () {
    return !1;
  };

  k.Mb = function () {
    return !0;
  };

  k.Hb = function () {
    return !0;
  };

  k.Ca = function (a, b, c) {
    if (this.c) return E(new M("redirect-operation-pending"));
    var d = this,
        e = l.document,
        f = null,
        g = null,
        h = null,
        m = null;
    return this.c = D().then(function () {
      Mg(b);
      return Gk(d);
    }).then(function () {
      return Hk(d, a, b, c);
    }).then(function () {
      return new C(function (p, v) {
        g = function () {
          var z = J("cordova.plugins.browsertab.close", l);
          p();
          "function" === typeof z && z();
          d.a && "function" === typeof d.a.close && (d.a.close(), d.a = null);
          return !1;
        };

        d.wa(g);

        h = function () {
          f || (f = Oc(2E3).then(function () {
            v(new M("redirect-cancelled-by-user"));
          }));
        };

        m = function () {
          Ne() && h();
        };

        e.addEventListener("resume", h, !1);
        I().toLowerCase().match(/android/) || e.addEventListener("visibilitychange", m, !1);
      }).s(function (p) {
        return Ik(d).then(function () {
          throw p;
        });
      });
    }).ia(function () {
      h && e.removeEventListener("resume", h, !1);
      m && e.removeEventListener("visibilitychange", m, !1);
      f && f.cancel();
      g && d.La(g);
      d.c = null;
    });
  };

  function Hk(a, b, c, d) {
    var e = Ek(),
        f = new Ng(b, d, null, e, new M("no-auth-event")),
        g = J("BuildInfo.packageName", l);
    if ("string" !== typeof g) throw new M("invalid-cordova-configuration");
    var h = J("BuildInfo.displayName", l),
        m = {};
    if (I().toLowerCase().match(/iphone|ipad|ipod/)) m.ibi = g;else if (I().toLowerCase().match(/android/)) m.apn = g;else return E(new M("operation-not-supported-in-this-environment"));
    h && (m.appDisplayName = h);
    e = Fk(e);
    m.sessionId = e;
    var p = pj(a.l, a.i, a.m, b, c, null, d, a.o, m, a.u);
    return a.ga().then(function () {
      var v = a.h;
      return a.v.a.set(mk, f.w(), v);
    }).then(function () {
      var v = J("cordova.plugins.browsertab.isAvailable", l);
      if ("function" !== typeof v) throw new M("invalid-cordova-configuration");
      var z = null;
      v(function (H) {
        if (H) {
          z = J("cordova.plugins.browsertab.openUrl", l);
          if ("function" !== typeof z) throw new M("invalid-cordova-configuration");
          z(p);
        } else {
          z = J("cordova.InAppBrowser.open", l);
          if ("function" !== typeof z) throw new M("invalid-cordova-configuration");
          H = I();
          a.a = z(p, H.match(/(iPad|iPhone|iPod).*OS 7_\d/i) || H.match(/(iPad|iPhone|iPod).*OS 8_\d/i) ? "_blank" : "_system", "location=yes");
        }
      });
    });
  }

  function Jk(a, b) {
    for (var c = 0; c < a.b.length; c++) try {
      a.b[c](b);
    } catch (d) {}
  }

  function Gk(a) {
    a.f || (a.f = a.ga().then(function () {
      return new C(function (b) {
        function c(d) {
          b(d);
          a.La(c);
          return !1;
        }

        a.wa(c);
        Kk(a);
      });
    }));
    return a.f;
  }

  function Ik(a) {
    var b = null;
    return nk(a.g).then(function (c) {
      b = c;
      c = a.g;
      return ik(c.b, mk, c.a);
    }).then(function () {
      return b;
    });
  }

  function Kk(a) {
    function b(g) {
      d = !0;
      e && e.cancel();
      Ik(a).then(function (h) {
        var m = c;

        if (h && g && g.url) {
          var p = null;
          m = Yf(g.url);
          -1 != m.indexOf("/__/auth/callback") && (p = md(m), p = Je(kd(p, "firebaseError") || null), p = (p = "object" === typeof p ? mf(p) : null) ? new Ng(h.c, h.b, null, null, p) : new Ng(h.c, h.b, m, h.f));
          m = p || c;
        }

        Jk(a, m);
      });
    }

    var c = new Ng("unknown", null, null, null, new M("no-auth-event")),
        d = !1,
        e = Oc(500).then(function () {
      return Ik(a).then(function () {
        d || Jk(a, c);
      });
    }),
        f = l.handleOpenURL;

    l.handleOpenURL = function (g) {
      0 == g.toLowerCase().indexOf(J("BuildInfo.packageName", l).toLowerCase() + "://") && b({
        url: g
      });
      if ("function" === typeof f) try {
        f(g);
      } catch (h) {
        console.error(h);
      }
    };

    Qg || (Qg = new Pg());
    Qg.subscribe(b);
  }

  k.wa = function (a) {
    this.b.push(a);
    Gk(this).s(function (b) {
      "auth/invalid-cordova-configuration" === b.code && (b = new Ng("unknown", null, null, null, new M("no-auth-event")), a(b));
    });
  };

  k.La = function (a) {
    y(this.b, function (b) {
      return b == a;
    });
  };

  function Lk(a) {
    this.a = a;
    this.b = ek();
  }

  var Mk = {
    name: "pendingRedirect",
    B: "session"
  };

  function Nk(a) {
    return a.b.set(Mk, "pending", a.a);
  }

  function Ok(a) {
    return ik(a.b, Mk, a.a);
  }

  function Pk(a) {
    return a.b.get(Mk, a.a).then(function (b) {
      return "pending" == b;
    });
  }

  ;

  function Qk(a, b, c) {
    this.i = {};
    this.u = 0;
    this.A = a;
    this.l = b;
    this.o = c;
    this.h = [];
    this.f = !1;
    this.m = t(this.bb, this);
    this.b = new Rk();
    this.v = new Sk();
    this.g = new Lk(this.l + ":" + this.o);
    this.c = {};
    this.c.unknown = this.b;
    this.c.signInViaRedirect = this.b;
    this.c.linkViaRedirect = this.b;
    this.c.reauthViaRedirect = this.b;
    this.c.signInViaPopup = this.v;
    this.c.linkViaPopup = this.v;
    this.c.reauthViaPopup = this.v;
    this.a = Tk(this.A, this.l, this.o, Jf);
  }

  function Tk(a, b, c, d) {
    var e = _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.SDK_VERSION || null;
    return te() ? new Ck(a, b, c, e, d) : new jj(a, b, c, e, d);
  }

  k = Qk.prototype;

  k.reset = function () {
    this.f = !1;
    this.a.La(this.m);
    this.a = Tk(this.A, this.l, this.o);
    this.i = {};
  };

  k.Ya = function () {
    this.b.Ya();
  };

  function Uk(a) {
    a.f || (a.f = !0, a.a.wa(a.m));
    var b = a.a;
    return a.a.ga().s(function (c) {
      a.a == b && a.reset();
      throw c;
    });
  }

  function Vk(a) {
    a.a.Mb() && Uk(a).s(function (b) {
      var c = new Ng("unknown", null, null, null, new M("operation-not-supported-in-this-environment"));
      Wk(b) && a.bb(c);
    });
    a.a.Hb() || Xk(a.b);
  }

  k.subscribe = function (a) {
    Ma(this.h, a) || this.h.push(a);

    if (!this.f) {
      var b = this;
      Pk(this.g).then(function (c) {
        c ? Ok(b.g).then(function () {
          Uk(b).s(function (d) {
            var e = new Ng("unknown", null, null, null, new M("operation-not-supported-in-this-environment"));
            Wk(d) && b.bb(e);
          });
        }) : Vk(b);
      }).s(function () {
        Vk(b);
      });
    }
  };

  k.unsubscribe = function (a) {
    y(this.h, function (b) {
      return b == a;
    });
  };

  k.bb = function (a) {
    if (!a) throw new M("invalid-auth-event");
    6E5 <= va() - this.u && (this.i = {}, this.u = 0);
    if (a && a.getUid() && this.i.hasOwnProperty(a.getUid())) return !1;

    for (var b = !1, c = 0; c < this.h.length; c++) {
      var d = this.h[c];

      if (d.xb(a.c, a.b)) {
        if (b = this.c[a.c]) b.h(a, d), a && (a.f || a.b) && (this.i[a.getUid()] = !0, this.u = va());
        b = !0;
        break;
      }
    }

    Xk(this.b);
    return b;
  };

  var Yk = new Me(2E3, 1E4),
      Zk = new Me(3E4, 6E4);

  Qk.prototype.fa = function () {
    return this.b.fa();
  };

  function $k(a, b, c, d, e, f) {
    return a.a.Db(b, c, d, function () {
      a.f || (a.f = !0, a.a.wa(a.m));
    }, function () {
      a.reset();
    }, e, f);
  }

  function Wk(a) {
    return a && "auth/cordova-not-ready" == a.code ? !0 : !1;
  }

  Qk.prototype.Ca = function (a, b, c) {
    var d = this,
        e;
    return Nk(this.g).then(function () {
      return d.a.Ca(a, b, c).s(function (f) {
        if (Wk(f)) throw new M("operation-not-supported-in-this-environment");
        e = f;
        return Ok(d.g).then(function () {
          throw e;
        });
      }).then(function () {
        return d.a.Pb() ? new C(function () {}) : Ok(d.g).then(function () {
          return d.fa();
        }).then(function () {}).s(function () {});
      });
    });
  };

  Qk.prototype.Ea = function (a, b, c, d) {
    return this.a.Ea(c, function (e) {
      a.ha(b, null, e, d);
    }, Yk.get());
  };

  var al = {};

  function bl(a, b, c) {
    var d = b + ":" + c;
    al[d] || (al[d] = new Qk(a, b, c));
    return al[d];
  }

  function Rk() {
    this.b = null;
    this.f = [];
    this.c = [];
    this.a = null;
    this.i = this.g = !1;
  }

  Rk.prototype.reset = function () {
    this.b = null;
    this.a && (this.a.cancel(), this.a = null);
  };

  Rk.prototype.h = function (a, b) {
    if (a) {
      this.reset();
      this.g = !0;
      var c = a.c,
          d = a.b,
          e = a.a && "auth/web-storage-unsupported" == a.a.code,
          f = a.a && "auth/operation-not-supported-in-this-environment" == a.a.code;
      this.i = !(!e && !f);
      "unknown" != c || e || f ? a.a ? (cl(this, !0, null, a.a), D()) : b.xa(c, d) ? dl(this, a, b) : E(new M("invalid-auth-event")) : (cl(this, !1, null, null), D());
    } else E(new M("invalid-auth-event"));
  };

  function Xk(a) {
    a.g || (a.g = !0, cl(a, !1, null, null));
  }

  Rk.prototype.Ya = function () {
    this.g && !this.i && cl(this, !1, null, null);
  };

  function dl(a, b, c) {
    c = c.xa(b.c, b.b);
    var d = b.g,
        e = b.f,
        f = b.h,
        g = !!b.c.match(/Redirect$/);
    c(d, e, f).then(function (h) {
      cl(a, g, h, null);
    }).s(function (h) {
      cl(a, g, null, h);
    });
  }

  function el(a, b) {
    a.b = function () {
      return E(b);
    };

    if (a.c.length) for (var c = 0; c < a.c.length; c++) a.c[c](b);
  }

  function fl(a, b) {
    a.b = function () {
      return D(b);
    };

    if (a.f.length) for (var c = 0; c < a.f.length; c++) a.f[c](b);
  }

  function cl(a, b, c, d) {
    b ? d ? el(a, d) : fl(a, c) : fl(a, {
      user: null
    });
    a.f = [];
    a.c = [];
  }

  Rk.prototype.fa = function () {
    var a = this;
    return new C(function (b, c) {
      a.b ? a.b().then(b, c) : (a.f.push(b), a.c.push(c), gl(a));
    });
  };

  function gl(a) {
    var b = new M("timeout");
    a.a && a.a.cancel();
    a.a = Oc(Zk.get()).then(function () {
      a.b || (a.g = !0, cl(a, !0, null, b));
    });
  }

  function Sk() {}

  Sk.prototype.h = function (a, b) {
    if (a) {
      var c = a.c,
          d = a.b;
      a.a ? (b.ha(a.c, null, a.a, a.b), D()) : b.xa(c, d) ? hl(a, b) : E(new M("invalid-auth-event"));
    } else E(new M("invalid-auth-event"));
  };

  function hl(a, b) {
    var c = a.b,
        d = a.c;
    b.xa(d, c)(a.g, a.f, a.h).then(function (e) {
      b.ha(d, e, null, c);
    }).s(function (e) {
      b.ha(d, null, e, c);
    });
  }

  ;

  function il() {
    this.ub = !1;
    Object.defineProperty(this, "appVerificationDisabled", {
      get: function () {
        return this.ub;
      },
      set: function (a) {
        this.ub = a;
      },
      enumerable: !1
    });
  }

  ;

  function jl(a, b) {
    this.a = b;
    K(this, "verificationId", a);
  }

  jl.prototype.confirm = function (a) {
    a = Kg(this.verificationId, a);
    return this.a(a);
  };

  function kl(a, b, c, d) {
    return new Ig(a).Ua(b, c).then(function (e) {
      return new jl(e, d);
    });
  }

  ;

  function ll(a) {
    var b = Gf(a);
    if (!(b && b.exp && b.auth_time && b.iat)) throw new M("internal-error", "An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");
    L(this, {
      token: a,
      expirationTime: Pe(1E3 * b.exp),
      authTime: Pe(1E3 * b.auth_time),
      issuedAtTime: Pe(1E3 * b.iat),
      signInProvider: b.firebase && b.firebase.sign_in_provider ? b.firebase.sign_in_provider : null,
      claims: b
    });
  }

  ;

  function ml(a, b, c) {
    this.h = a;
    this.i = b;
    this.g = c;
    this.c = 3E4;
    this.f = 96E4;
    this.b = null;
    this.a = this.c;
    if (this.f < this.c) throw Error("Proactive refresh lower bound greater than upper bound!");
  }

  ml.prototype.start = function () {
    this.a = this.c;
    nl(this, !0);
  };

  function ol(a, b) {
    if (b) return a.a = a.c, a.g();
    b = a.a;
    a.a *= 2;
    a.a > a.f && (a.a = a.f);
    return b;
  }

  function nl(a, b) {
    a.stop();
    a.b = Oc(ol(a, b)).then(function () {
      return Oe();
    }).then(function () {
      return a.h();
    }).then(function () {
      nl(a, !0);
    }).s(function (c) {
      a.i(c) && nl(a, !1);
    });
  }

  ml.prototype.stop = function () {
    this.b && (this.b.cancel(), this.b = null);
  };

  function pl(a) {
    this.f = a;
    this.b = this.a = null;
    this.c = 0;
  }

  pl.prototype.w = function () {
    return {
      apiKey: this.f.b,
      refreshToken: this.a,
      accessToken: this.b,
      expirationTime: this.c
    };
  };

  function ql(a, b) {
    var c = b[ag],
        d = b.refreshToken;
    b = rl(b.expiresIn);
    a.b = c;
    a.c = b;
    a.a = d;
  }

  function sl(a, b) {
    a.b = b.b;
    a.a = b.a;
    a.c = b.c;
  }

  function rl(a) {
    return va() + 1E3 * parseInt(a, 10);
  }

  function tl(a, b) {
    return ni(a.f, b).then(function (c) {
      a.b = c.access_token;
      a.c = rl(c.expires_in);
      a.a = c.refresh_token;
      return {
        accessToken: a.b,
        expirationTime: a.c,
        refreshToken: a.a
      };
    }).s(function (c) {
      "auth/user-token-expired" == c.code && (a.a = null);
      throw c;
    });
  }

  pl.prototype.getToken = function (a) {
    a = !!a;
    return this.b && !this.a ? E(new M("user-token-expired")) : a || !this.b || va() > this.c - 3E4 ? this.a ? tl(this, {
      grant_type: "refresh_token",
      refresh_token: this.a
    }) : D(null) : D({
      accessToken: this.b,
      expirationTime: this.c,
      refreshToken: this.a
    });
  };

  function ul(a, b) {
    this.a = a || null;
    this.b = b || null;
    L(this, {
      lastSignInTime: Pe(b || null),
      creationTime: Pe(a || null)
    });
  }

  function vl(a) {
    return new ul(a.a, a.b);
  }

  ul.prototype.w = function () {
    return {
      lastLoginAt: this.b,
      createdAt: this.a
    };
  };

  function wl(a, b, c, d, e, f) {
    L(this, {
      uid: a,
      displayName: d || null,
      photoURL: e || null,
      email: c || null,
      phoneNumber: f || null,
      providerId: b
    });
  }

  function xl(a, b) {
    kc.call(this, a);

    for (var c in b) this[c] = b[c];
  }

  u(xl, kc);

  function P(a, b, c) {
    this.G = [];
    this.l = a.apiKey;
    this.o = a.appName;
    this.u = a.authDomain || null;
    a = _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.SDK_VERSION ? Be(_firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.SDK_VERSION) : null;
    this.c = new bi(this.l, If(Jf), a);
    this.h = new pl(this.c);
    yl(this, b[ag]);
    ql(this.h, b);
    K(this, "refreshToken", this.h.a);
    zl(this, c || {});
    F.call(this);
    this.I = !1;
    this.u && Ee() && (this.a = bl(this.u, this.l, this.o));
    this.N = [];
    this.i = null;
    this.A = Al(this);
    this.V = t(this.Ha, this);
    var d = this;
    this.ka = null;

    this.ta = function (e) {
      d.pa(e.g);
    };

    this.X = null;
    this.O = [];

    this.sa = function (e) {
      Bl(d, e.c);
    };

    this.W = null;
  }

  u(P, F);

  P.prototype.pa = function (a) {
    this.ka = a;
    hi(this.c, a);
  };

  P.prototype.ea = function () {
    return this.ka;
  };

  function Cl(a, b) {
    a.X && Hc(a.X, "languageCodeChanged", a.ta);
    (a.X = b) && xc(b, "languageCodeChanged", a.ta);
  }

  function Bl(a, b) {
    a.O = b;
    ii(a.c, _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.SDK_VERSION ? Be(_firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.SDK_VERSION, a.O) : null);
  }

  P.prototype.ya = function () {
    return Pa(this.O);
  };

  function Dl(a, b) {
    a.W && Hc(a.W, "frameworkChanged", a.sa);
    (a.W = b) && xc(b, "frameworkChanged", a.sa);
  }

  P.prototype.Ha = function () {
    this.A.b && (this.A.stop(), this.A.start());
  };

  function El(a) {
    try {
      return _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.app(a.o).auth();
    } catch (b) {
      throw new M("internal-error", "No firebase.auth.Auth instance is available for the Firebase App '" + a.o + "'!");
    }
  }

  function Al(a) {
    return new ml(function () {
      return a.F(!0);
    }, function (b) {
      return b && "auth/network-request-failed" == b.code ? !0 : !1;
    }, function () {
      var b = a.h.c - va() - 3E5;
      return 0 < b ? b : 0;
    });
  }

  function Fl(a) {
    a.D || a.A.b || (a.A.start(), Hc(a, "tokenChanged", a.V), xc(a, "tokenChanged", a.V));
  }

  function Gl(a) {
    Hc(a, "tokenChanged", a.V);
    a.A.stop();
  }

  function yl(a, b) {
    a.ra = b;
    K(a, "_lat", b);
  }

  function Hl(a, b) {
    y(a.N, function (c) {
      return c == b;
    });
  }

  function Il(a) {
    for (var b = [], c = 0; c < a.N.length; c++) b.push(a.N[c](a));

    return Bb(b).then(function () {
      return a;
    });
  }

  function Jl(a) {
    a.a && !a.I && (a.I = !0, a.a.subscribe(a));
  }

  function zl(a, b) {
    L(a, {
      uid: b.uid,
      displayName: b.displayName || null,
      photoURL: b.photoURL || null,
      email: b.email || null,
      emailVerified: b.emailVerified || !1,
      phoneNumber: b.phoneNumber || null,
      isAnonymous: b.isAnonymous || !1,
      metadata: new ul(b.createdAt, b.lastLoginAt),
      providerData: []
    });
  }

  K(P.prototype, "providerId", "firebase");

  function Kl() {}

  function Ll(a) {
    return D().then(function () {
      if (a.D) throw new M("app-deleted");
    });
  }

  function Ml(a) {
    return Ia(a.providerData, function (b) {
      return b.providerId;
    });
  }

  function Nl(a, b) {
    b && (Ol(a, b.providerId), a.providerData.push(b));
  }

  function Ol(a, b) {
    y(a.providerData, function (c) {
      return c.providerId == b;
    });
  }

  function Pl(a, b, c) {
    ("uid" != b || c) && a.hasOwnProperty(b) && K(a, b, c);
  }

  function Ql(a, b) {
    a != b && (L(a, {
      uid: b.uid,
      displayName: b.displayName,
      photoURL: b.photoURL,
      email: b.email,
      emailVerified: b.emailVerified,
      phoneNumber: b.phoneNumber,
      isAnonymous: b.isAnonymous,
      providerData: []
    }), b.metadata ? K(a, "metadata", vl(b.metadata)) : K(a, "metadata", new ul()), x(b.providerData, function (c) {
      Nl(a, c);
    }), sl(a.h, b.h), K(a, "refreshToken", a.h.a));
  }

  k = P.prototype;

  k.reload = function () {
    var a = this;
    return Q(this, Ll(this).then(function () {
      return Rl(a).then(function () {
        return Il(a);
      }).then(Kl);
    }));
  };

  function Rl(a) {
    return a.F().then(function (b) {
      var c = a.isAnonymous;
      return Sl(a, b).then(function () {
        c || Pl(a, "isAnonymous", !1);
        return b;
      });
    });
  }

  k.bc = function (a) {
    return this.F(a).then(function (b) {
      return new ll(b);
    });
  };

  k.F = function (a) {
    var b = this;
    return Q(this, Ll(this).then(function () {
      return b.h.getToken(a);
    }).then(function (c) {
      if (!c) throw new M("internal-error");
      c.accessToken != b.ra && (yl(b, c.accessToken), b.dispatchEvent(new xl("tokenChanged")));
      Pl(b, "refreshToken", c.refreshToken);
      return c.accessToken;
    }));
  };

  function Tl(a, b) {
    b[ag] && a.ra != b[ag] && (ql(a.h, b), a.dispatchEvent(new xl("tokenChanged")), yl(a, b[ag]), Pl(a, "refreshToken", a.h.a));
  }

  function Sl(a, b) {
    return O(a.c, Vi, {
      idToken: b
    }).then(t(a.xc, a));
  }

  k.xc = function (a) {
    a = a.users;
    if (!a || !a.length) throw new M("internal-error");
    a = a[0];
    zl(this, {
      uid: a.localId,
      displayName: a.displayName,
      photoURL: a.photoUrl,
      email: a.email,
      emailVerified: !!a.emailVerified,
      phoneNumber: a.phoneNumber,
      lastLoginAt: a.lastLoginAt,
      createdAt: a.createdAt
    });

    for (var b = Ul(a), c = 0; c < b.length; c++) Nl(this, b[c]);

    Pl(this, "isAnonymous", !(this.email && a.passwordHash) && !(this.providerData && this.providerData.length));
  };

  function Ul(a) {
    return (a = a.providerUserInfo) && a.length ? Ia(a, function (b) {
      return new wl(b.rawId, b.providerId, b.email, b.displayName, b.photoUrl, b.phoneNumber);
    }) : [];
  }

  k.yc = function (a) {
    Ue("firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateWithCredential instead.");
    return this.gb(a);
  };

  k.gb = function (a) {
    var b = this,
        c = null;
    return Q(this, a.f(this.c, this.uid).then(function (d) {
      Tl(b, d);
      c = Vl(b, d, "reauthenticate");
      b.i = null;
      return b.reload();
    }).then(function () {
      return c;
    }), !0);
  };

  function Wl(a, b) {
    return Rl(a).then(function () {
      if (Ma(Ml(a), b)) return Il(a).then(function () {
        throw new M("provider-already-linked");
      });
    });
  }

  k.pc = function (a) {
    Ue("firebase.User.prototype.linkAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.linkWithCredential instead.");
    return this.eb(a);
  };

  k.eb = function (a) {
    var b = this,
        c = null;
    return Q(this, Wl(this, a.providerId).then(function () {
      return b.F();
    }).then(function (d) {
      return a.b(b.c, d);
    }).then(function (d) {
      c = Vl(b, d, "link");
      return Xl(b, d);
    }).then(function () {
      return c;
    }));
  };

  k.qc = function (a, b) {
    var c = this;
    return Q(this, Wl(this, "phone").then(function () {
      return kl(El(c), a, b, t(c.eb, c));
    }));
  };

  k.zc = function (a, b) {
    var c = this;
    return Q(this, D().then(function () {
      return kl(El(c), a, b, t(c.gb, c));
    }), !0);
  };

  function Vl(a, b, c) {
    var d = Lg(b);
    b = Of(b);
    return Xe({
      user: a,
      credential: d,
      additionalUserInfo: b,
      operationType: c
    });
  }

  function Xl(a, b) {
    Tl(a, b);
    return a.reload().then(function () {
      return a;
    });
  }

  k.rb = function (a) {
    var b = this;
    return Q(this, this.F().then(function (c) {
      return b.c.rb(c, a);
    }).then(function (c) {
      Tl(b, c);
      return b.reload();
    }));
  };

  k.Pc = function (a) {
    var b = this;
    return Q(this, this.F().then(function (c) {
      return a.b(b.c, c);
    }).then(function (c) {
      Tl(b, c);
      return b.reload();
    }));
  };

  k.sb = function (a) {
    var b = this;
    return Q(this, this.F().then(function (c) {
      return b.c.sb(c, a);
    }).then(function (c) {
      Tl(b, c);
      return b.reload();
    }));
  };

  k.tb = function (a) {
    if (void 0 === a.displayName && void 0 === a.photoURL) return Ll(this);
    var b = this;
    return Q(this, this.F().then(function (c) {
      return b.c.tb(c, {
        displayName: a.displayName,
        photoUrl: a.photoURL
      });
    }).then(function (c) {
      Tl(b, c);
      Pl(b, "displayName", c.displayName || null);
      Pl(b, "photoURL", c.photoUrl || null);
      x(b.providerData, function (d) {
        "password" === d.providerId && (K(d, "displayName", b.displayName), K(d, "photoURL", b.photoURL));
      });
      return Il(b);
    }).then(Kl));
  };

  k.Nc = function (a) {
    var b = this;
    return Q(this, Rl(this).then(function (c) {
      return Ma(Ml(b), a) ? Gi(b.c, c, [a]).then(function (d) {
        var e = {};
        x(d.providerUserInfo || [], function (f) {
          e[f.providerId] = !0;
        });
        x(Ml(b), function (f) {
          e[f] || Ol(b, f);
        });
        e[Ig.PROVIDER_ID] || K(b, "phoneNumber", null);
        return Il(b);
      }) : Il(b).then(function () {
        throw new M("no-such-provider");
      });
    }));
  };

  k.delete = function () {
    var a = this;
    return Q(this, this.F().then(function (b) {
      return O(a.c, Ui, {
        idToken: b
      });
    }).then(function () {
      a.dispatchEvent(new xl("userDeleted"));
    })).then(function () {
      for (var b = 0; b < a.G.length; b++) a.G[b].cancel("app-deleted");

      Cl(a, null);
      Dl(a, null);
      a.G = [];
      a.D = !0;
      Gl(a);
      K(a, "refreshToken", null);
      a.a && a.a.unsubscribe(a);
    });
  };

  k.xb = function (a, b) {
    return "linkViaPopup" == a && (this.g || null) == b && this.f || "reauthViaPopup" == a && (this.g || null) == b && this.f || "linkViaRedirect" == a && (this.aa || null) == b || "reauthViaRedirect" == a && (this.aa || null) == b ? !0 : !1;
  };

  k.ha = function (a, b, c, d) {
    "linkViaPopup" != a && "reauthViaPopup" != a || d != (this.g || null) || (c && this.v ? this.v(c) : b && !c && this.f && this.f(b), this.b && (this.b.cancel(), this.b = null), delete this.f, delete this.v);
  };

  k.xa = function (a, b) {
    return "linkViaPopup" == a && b == (this.g || null) ? t(this.Bb, this) : "reauthViaPopup" == a && b == (this.g || null) ? t(this.Cb, this) : "linkViaRedirect" == a && (this.aa || null) == b ? t(this.Bb, this) : "reauthViaRedirect" == a && (this.aa || null) == b ? t(this.Cb, this) : null;
  };

  k.rc = function (a) {
    var b = this;
    return Yl(this, "linkViaPopup", a, function () {
      return Wl(b, a.providerId).then(function () {
        return Il(b);
      });
    }, !1);
  };

  k.Ac = function (a) {
    return Yl(this, "reauthViaPopup", a, function () {
      return D();
    }, !0);
  };

  function Yl(a, b, c, d, e) {
    if (!Ee()) return E(new M("operation-not-supported-in-this-environment"));
    if (a.i && !e) return E(a.i);
    var f = Nf(c.providerId),
        g = De(a.uid + ":::"),
        h = null;
    (!Ge() || ve()) && a.u && c.isOAuthProvider && (h = pj(a.u, a.l, a.o, b, c, null, g, _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.SDK_VERSION || null));
    var m = me(h, f && f.Ba, f && f.Aa);
    d = d().then(function () {
      Zl(a);
      if (!e) return a.F().then(function () {});
    }).then(function () {
      return $k(a.a, m, b, c, g, !!h);
    }).then(function () {
      return new C(function (p, v) {
        a.ha(b, null, new M("cancelled-popup-request"), a.g || null);
        a.f = p;
        a.v = v;
        a.g = g;
        a.b = a.a.Ea(a, b, m, g);
      });
    }).then(function (p) {
      m && le(m);
      return p ? Xe(p) : null;
    }).s(function (p) {
      m && le(m);
      throw p;
    });
    return Q(a, d, e);
  }

  k.sc = function (a) {
    var b = this;
    return $l(this, "linkViaRedirect", a, function () {
      return Wl(b, a.providerId);
    }, !1);
  };

  k.Bc = function (a) {
    return $l(this, "reauthViaRedirect", a, function () {
      return D();
    }, !0);
  };

  function $l(a, b, c, d, e) {
    if (!Ee()) return E(new M("operation-not-supported-in-this-environment"));
    if (a.i && !e) return E(a.i);
    var f = null,
        g = De(a.uid + ":::");
    d = d().then(function () {
      Zl(a);
      if (!e) return a.F().then(function () {});
    }).then(function () {
      a.aa = g;
      return Il(a);
    }).then(function (h) {
      a.ba && (h = a.ba, h = h.b.set(am, a.w(), h.a));
      return h;
    }).then(function () {
      return a.a.Ca(b, c, g);
    }).s(function (h) {
      f = h;
      if (a.ba) return bm(a.ba);
      throw f;
    }).then(function () {
      if (f) throw f;
    });
    return Q(a, d, e);
  }

  function Zl(a) {
    if (!a.a || !a.I) {
      if (a.a && !a.I) throw new M("internal-error");
      throw new M("auth-domain-config-required");
    }
  }

  k.Bb = function (a, b, c) {
    var d = this;
    this.b && (this.b.cancel(), this.b = null);
    var e = null,
        f = this.F().then(function (g) {
      return eg(d.c, {
        requestUri: a,
        postBody: c,
        sessionId: b,
        idToken: g
      });
    }).then(function (g) {
      e = Vl(d, g, "link");
      return Xl(d, g);
    }).then(function () {
      return e;
    });
    return Q(this, f);
  };

  k.Cb = function (a, b, c) {
    var d = this;
    this.b && (this.b.cancel(), this.b = null);
    var e = null,
        f = D().then(function () {
      return $f(fg(d.c, {
        requestUri: a,
        sessionId: b,
        postBody: c
      }), d.uid);
    }).then(function (g) {
      e = Vl(d, g, "reauthenticate");
      Tl(d, g);
      d.i = null;
      return d.reload();
    }).then(function () {
      return e;
    });
    return Q(this, f, !0);
  };

  k.jb = function (a) {
    var b = this,
        c = null;
    return Q(this, this.F().then(function (d) {
      c = d;
      return "undefined" === typeof a || cb(a) ? {} : xf(new nf(a));
    }).then(function (d) {
      return b.c.jb(c, d);
    }).then(function (d) {
      if (b.email != d) return b.reload();
    }).then(function () {}));
  };

  function Q(a, b, c) {
    var d = cm(a, b, c);
    a.G.push(d);
    d.ia(function () {
      Na(a.G, d);
    });
    return d;
  }

  function cm(a, b, c) {
    return a.i && !c ? (b.cancel(), E(a.i)) : b.s(function (d) {
      !d || "auth/user-disabled" != d.code && "auth/user-token-expired" != d.code || (a.i || a.dispatchEvent(new xl("userInvalidated")), a.i = d);
      throw d;
    });
  }

  k.toJSON = function () {
    return this.w();
  };

  k.w = function () {
    var a = {
      uid: this.uid,
      displayName: this.displayName,
      photoURL: this.photoURL,
      email: this.email,
      emailVerified: this.emailVerified,
      phoneNumber: this.phoneNumber,
      isAnonymous: this.isAnonymous,
      providerData: [],
      apiKey: this.l,
      appName: this.o,
      authDomain: this.u,
      stsTokenManager: this.h.w(),
      redirectEventId: this.aa || null
    };
    this.metadata && fb(a, this.metadata.w());
    x(this.providerData, function (b) {
      a.providerData.push(Ye(b));
    });
    return a;
  };

  function dm(a) {
    if (!a.apiKey) return null;
    var b = {
      apiKey: a.apiKey,
      authDomain: a.authDomain,
      appName: a.appName
    },
        c = {};
    if (a.stsTokenManager && a.stsTokenManager.accessToken && a.stsTokenManager.expirationTime) c[ag] = a.stsTokenManager.accessToken, c.refreshToken = a.stsTokenManager.refreshToken || null, c.expiresIn = (a.stsTokenManager.expirationTime - va()) / 1E3;else return null;
    var d = new P(b, c, a);
    a.providerData && x(a.providerData, function (e) {
      e && Nl(d, Xe(e));
    });
    a.redirectEventId && (d.aa = a.redirectEventId);
    return d;
  }

  function em(a, b, c, d) {
    var e = new P(a, b);
    c && (e.ba = c);
    d && Bl(e, d);
    return e.reload().then(function () {
      return e;
    });
  }

  function fm(a, b, c, d) {
    b = b || {
      apiKey: a.l,
      authDomain: a.u,
      appName: a.o
    };
    var e = a.h,
        f = {};
    f[ag] = e.b;
    f.refreshToken = e.a;
    f.expiresIn = (e.c - va()) / 1E3;
    b = new P(b, f);
    c && (b.ba = c);
    d && Bl(b, d);
    Ql(b, a);
    return b;
  }

  ;

  function gm(a) {
    this.a = a;
    this.b = ek();
  }

  var am = {
    name: "redirectUser",
    B: "session"
  };

  function bm(a) {
    return ik(a.b, am, a.a);
  }

  function hm(a, b) {
    return a.b.get(am, a.a).then(function (c) {
      c && b && (c.authDomain = b);
      return dm(c || {});
    });
  }

  ;

  function im(a) {
    this.a = a;
    this.b = ek();
    this.c = null;
    this.f = jm(this);
    this.b.addListener(km("local"), this.a, t(this.g, this));
  }

  im.prototype.g = function () {
    var a = this,
        b = km("local");
    lm(this, function () {
      return D().then(function () {
        return a.c && "local" != a.c.B ? a.b.get(b, a.a) : null;
      }).then(function (c) {
        if (c) return mm(a, "local").then(function () {
          a.c = b;
        });
      });
    });
  };

  function mm(a, b) {
    var c = [],
        d;

    for (d in ak) ak[d] !== b && c.push(ik(a.b, km(ak[d]), a.a));

    c.push(ik(a.b, nm, a.a));
    return Ab(c);
  }

  function jm(a) {
    var b = km("local"),
        c = km("session"),
        d = km("none");
    return hk(a.b, b, a.a).then(function () {
      return a.b.get(c, a.a);
    }).then(function (e) {
      return e ? c : a.b.get(d, a.a).then(function (f) {
        return f ? d : a.b.get(b, a.a).then(function (g) {
          return g ? b : a.b.get(nm, a.a).then(function (h) {
            return h ? km(h) : b;
          });
        });
      });
    }).then(function (e) {
      a.c = e;
      return mm(a, e.B);
    }).s(function () {
      a.c || (a.c = b);
    });
  }

  var nm = {
    name: "persistence",
    B: "session"
  };

  function km(a) {
    return {
      name: "authUser",
      B: a
    };
  }

  im.prototype.mb = function (a) {
    var b = null,
        c = this;
    bk(a);
    return lm(this, function () {
      return a != c.c.B ? c.b.get(c.c, c.a).then(function (d) {
        b = d;
        return mm(c, a);
      }).then(function () {
        c.c = km(a);
        if (b) return c.b.set(c.c, b, c.a);
      }) : D();
    });
  };

  function om(a) {
    return lm(a, function () {
      return a.b.set(nm, a.c.B, a.a);
    });
  }

  function pm(a, b) {
    return lm(a, function () {
      return a.b.set(a.c, b.w(), a.a);
    });
  }

  function qm(a) {
    return lm(a, function () {
      return ik(a.b, a.c, a.a);
    });
  }

  function rm(a, b) {
    return lm(a, function () {
      return a.b.get(a.c, a.a).then(function (c) {
        c && b && (c.authDomain = b);
        return dm(c || {});
      });
    });
  }

  function lm(a, b) {
    a.f = a.f.then(b, b);
    return a.f;
  }

  ;

  function sm(a) {
    this.l = !1;
    K(this, "settings", new il());
    K(this, "app", a);
    if (R(this).options && R(this).options.apiKey) a = _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.SDK_VERSION ? Be(_firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.SDK_VERSION) : null, this.c = new bi(R(this).options && R(this).options.apiKey, If(Jf), a);else throw new M("invalid-api-key");
    this.N = [];
    this.o = [];
    this.I = [];
    this.Sb = _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.INTERNAL.createSubscribe(t(this.mc, this));
    this.O = void 0;
    this.Tb = _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.INTERNAL.createSubscribe(t(this.nc, this));
    tm(this, null);
    this.h = new im(R(this).options.apiKey + ":" + R(this).name);
    this.A = new gm(R(this).options.apiKey + ":" + R(this).name);
    this.V = S(this, um(this));
    this.i = S(this, vm(this));
    this.X = !1;
    this.ka = t(this.Kc, this);
    this.Ha = t(this.Z, this);
    this.ra = t(this.$b, this);
    this.sa = t(this.jc, this);
    this.ta = t(this.kc, this);
    wm(this);
    this.INTERNAL = {};
    this.INTERNAL["delete"] = t(this.delete, this);
    this.INTERNAL.logFramework = t(this.tc, this);
    this.u = 0;
    F.call(this);
    xm(this);
    this.G = [];
  }

  u(sm, F);

  function ym(a) {
    kc.call(this, "languageCodeChanged");
    this.g = a;
  }

  u(ym, kc);

  function zm(a) {
    kc.call(this, "frameworkChanged");
    this.c = a;
  }

  u(zm, kc);
  k = sm.prototype;

  k.mb = function (a) {
    a = this.h.mb(a);
    return S(this, a);
  };

  k.pa = function (a) {
    this.W === a || this.l || (this.W = a, hi(this.c, this.W), this.dispatchEvent(new ym(this.ea())));
  };

  k.ea = function () {
    return this.W;
  };

  k.Qc = function () {
    var a = l.navigator;
    this.pa(a ? a.languages && a.languages[0] || a.language || a.userLanguage || null : null);
  };

  k.tc = function (a) {
    this.G.push(a);
    ii(this.c, _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.SDK_VERSION ? Be(_firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.SDK_VERSION, this.G) : null);
    this.dispatchEvent(new zm(this.G));
  };

  k.ya = function () {
    return Pa(this.G);
  };

  function xm(a) {
    Object.defineProperty(a, "lc", {
      get: function () {
        return this.ea();
      },
      set: function (b) {
        this.pa(b);
      },
      enumerable: !1
    });
    a.W = null;
  }

  k.toJSON = function () {
    return {
      apiKey: R(this).options.apiKey,
      authDomain: R(this).options.authDomain,
      appName: R(this).name,
      currentUser: T(this) && T(this).w()
    };
  };

  function Am(a) {
    return a.Rb || E(new M("auth-domain-config-required"));
  }

  function wm(a) {
    var b = R(a).options.authDomain,
        c = R(a).options.apiKey;
    b && Ee() && (a.Rb = a.V.then(function () {
      if (!a.l) {
        a.a = bl(b, c, R(a).name);
        a.a.subscribe(a);
        T(a) && Jl(T(a));

        if (a.D) {
          Jl(a.D);
          var d = a.D;
          d.pa(a.ea());
          Cl(d, a);
          d = a.D;
          Bl(d, a.G);
          Dl(d, a);
          a.D = null;
        }

        return a.a;
      }
    }));
  }

  k.xb = function (a, b) {
    switch (a) {
      case "unknown":
      case "signInViaRedirect":
        return !0;

      case "signInViaPopup":
        return this.g == b && !!this.f;

      default:
        return !1;
    }
  };

  k.ha = function (a, b, c, d) {
    "signInViaPopup" == a && this.g == d && (c && this.v ? this.v(c) : b && !c && this.f && this.f(b), this.b && (this.b.cancel(), this.b = null), delete this.f, delete this.v);
  };

  k.xa = function (a, b) {
    return "signInViaRedirect" == a || "signInViaPopup" == a && this.g == b && this.f ? t(this.Zb, this) : null;
  };

  k.Zb = function (a, b, c) {
    var d = this;
    a = {
      requestUri: a,
      postBody: c,
      sessionId: b
    };
    this.b && (this.b.cancel(), this.b = null);
    var e = null,
        f = null,
        g = cg(d.c, a).then(function (h) {
      e = Lg(h);
      f = Of(h);
      return h;
    });
    a = d.V.then(function () {
      return g;
    }).then(function (h) {
      return Bm(d, h);
    }).then(function () {
      return Xe({
        user: T(d),
        credential: e,
        additionalUserInfo: f,
        operationType: "signIn"
      });
    });
    return S(this, a);
  };

  k.Ic = function (a) {
    if (!Ee()) return E(new M("operation-not-supported-in-this-environment"));
    var b = this,
        c = Nf(a.providerId),
        d = De(),
        e = null;
    (!Ge() || ve()) && R(this).options.authDomain && a.isOAuthProvider && (e = pj(R(this).options.authDomain, R(this).options.apiKey, R(this).name, "signInViaPopup", a, null, d, _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.SDK_VERSION || null));
    var f = me(e, c && c.Ba, c && c.Aa);
    c = Am(this).then(function (g) {
      return $k(g, f, "signInViaPopup", a, d, !!e);
    }).then(function () {
      return new C(function (g, h) {
        b.ha("signInViaPopup", null, new M("cancelled-popup-request"), b.g);
        b.f = g;
        b.v = h;
        b.g = d;
        b.b = b.a.Ea(b, "signInViaPopup", f, d);
      });
    }).then(function (g) {
      f && le(f);
      return g ? Xe(g) : null;
    }).s(function (g) {
      f && le(f);
      throw g;
    });
    return S(this, c);
  };

  k.Jc = function (a) {
    if (!Ee()) return E(new M("operation-not-supported-in-this-environment"));
    var b = this,
        c = Am(this).then(function () {
      return om(b.h);
    }).then(function () {
      return b.a.Ca("signInViaRedirect", a);
    });
    return S(this, c);
  };

  k.fa = function () {
    if (!Ee()) return E(new M("operation-not-supported-in-this-environment"));
    var a = this,
        b = Am(this).then(function () {
      return a.a.fa();
    }).then(function (c) {
      return c ? Xe(c) : null;
    });
    return S(this, b);
  };

  k.Oc = function (a) {
    if (!a) return E(new M("null-user"));
    var b = this,
        c = {};
    c.apiKey = R(this).options.apiKey;
    c.authDomain = R(this).options.authDomain;
    c.appName = R(this).name;
    var d = fm(a, c, b.A, b.ya());
    return S(this, this.i.then(function () {
      if (R(b).options.apiKey != a.l) return d.reload();
    }).then(function () {
      if (T(b) && a.uid == T(b).uid) return Ql(T(b), a), b.Z(a);
      tm(b, d);
      Jl(d);
      return b.Z(d);
    }).then(function () {
      Cm(b);
    }));
  };

  function Bm(a, b) {
    var c = {};
    c.apiKey = R(a).options.apiKey;
    c.authDomain = R(a).options.authDomain;
    c.appName = R(a).name;
    return a.V.then(function () {
      return em(c, b, a.A, a.ya());
    }).then(function (d) {
      if (T(a) && d.uid == T(a).uid) return Ql(T(a), d), a.Z(d);
      tm(a, d);
      Jl(d);
      return a.Z(d);
    }).then(function () {
      Cm(a);
    });
  }

  function tm(a, b) {
    T(a) && (Hl(T(a), a.Ha), Hc(T(a), "tokenChanged", a.ra), Hc(T(a), "userDeleted", a.sa), Hc(T(a), "userInvalidated", a.ta), Gl(T(a)));
    b && (b.N.push(a.Ha), xc(b, "tokenChanged", a.ra), xc(b, "userDeleted", a.sa), xc(b, "userInvalidated", a.ta), 0 < a.u && Fl(b));
    K(a, "currentUser", b);
    b && (b.pa(a.ea()), Cl(b, a), Bl(b, a.G), Dl(b, a));
  }

  k.pb = function () {
    var a = this,
        b = this.i.then(function () {
      if (!T(a)) return D();
      tm(a, null);
      return qm(a.h).then(function () {
        Cm(a);
      });
    });
    return S(this, b);
  };

  function Dm(a) {
    var b = hm(a.A, R(a).options.authDomain).then(function (c) {
      if (a.D = c) c.ba = a.A;
      return bm(a.A);
    });
    return S(a, b);
  }

  function um(a) {
    var b = R(a).options.authDomain,
        c = Dm(a).then(function () {
      return rm(a.h, b);
    }).then(function (d) {
      return d ? (d.ba = a.A, a.D && (a.D.aa || null) == (d.aa || null) ? d : d.reload().then(function () {
        return pm(a.h, d).then(function () {
          return d;
        });
      }).s(function (e) {
        return "auth/network-request-failed" == e.code ? d : qm(a.h);
      })) : null;
    }).then(function (d) {
      tm(a, d || null);
    });
    return S(a, c);
  }

  function vm(a) {
    return a.V.then(function () {
      return a.fa();
    }).s(function () {}).then(function () {
      if (!a.l) return a.ka();
    }).s(function () {}).then(function () {
      if (!a.l) {
        a.X = !0;
        var b = a.h;
        b.b.addListener(km("local"), b.a, a.ka);
      }
    });
  }

  k.Kc = function () {
    var a = this;
    return rm(this.h, R(this).options.authDomain).then(function (b) {
      if (!a.l) {
        var c;

        if (c = T(a) && b) {
          c = T(a).uid;
          var d = b.uid;
          c = void 0 === c || null === c || "" === c || void 0 === d || null === d || "" === d ? !1 : c == d;
        }

        if (c) return Ql(T(a), b), T(a).F();
        if (T(a) || b) tm(a, b), b && (Jl(b), b.ba = a.A), a.a && a.a.subscribe(a), Cm(a);
      }
    });
  };

  k.Z = function (a) {
    return pm(this.h, a);
  };

  k.$b = function () {
    Cm(this);
    this.Z(T(this));
  };

  k.jc = function () {
    this.pb();
  };

  k.kc = function () {
    this.pb();
  };

  function Em(a, b) {
    var c = null,
        d = null;
    return S(a, b.then(function (e) {
      c = Lg(e);
      d = Of(e);
      return Bm(a, e);
    }).then(function () {
      return Xe({
        user: T(a),
        credential: c,
        additionalUserInfo: d,
        operationType: "signIn"
      });
    }));
  }

  k.mc = function (a) {
    var b = this;
    this.addAuthTokenListener(function () {
      a.next(T(b));
    });
  };

  k.nc = function (a) {
    var b = this;
    Fm(this, function () {
      a.next(T(b));
    });
  };

  k.vc = function (a, b, c) {
    var d = this;
    this.X && Promise.resolve().then(function () {
      q(a) ? a(T(d)) : q(a.next) && a.next(T(d));
    });
    return this.Sb(a, b, c);
  };

  k.uc = function (a, b, c) {
    var d = this;
    this.X && Promise.resolve().then(function () {
      d.O = d.getUid();
      q(a) ? a(T(d)) : q(a.next) && a.next(T(d));
    });
    return this.Tb(a, b, c);
  };

  k.ac = function (a) {
    var b = this,
        c = this.i.then(function () {
      return T(b) ? T(b).F(a).then(function (d) {
        return {
          accessToken: d
        };
      }) : null;
    });
    return S(this, c);
  };

  k.Ec = function (a) {
    var b = this;
    return this.i.then(function () {
      return Em(b, O(b.c, Xi, {
        token: a
      }));
    }).then(function (c) {
      var d = c.user;
      Pl(d, "isAnonymous", !1);
      b.Z(d);
      return c;
    });
  };

  k.Fc = function (a, b) {
    var c = this;
    return this.i.then(function () {
      return Em(c, O(c.c, xg, {
        email: a,
        password: b
      }));
    });
  };

  k.Vb = function (a, b) {
    var c = this;
    return this.i.then(function () {
      return Em(c, O(c.c, Ti, {
        email: a,
        password: b
      }));
    });
  };

  k.Nb = function (a) {
    var b = this;
    return this.i.then(function () {
      return Em(b, a.la(b.c));
    });
  };

  k.nb = function (a) {
    Ue("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInWithCredential instead.");
    return this.Nb(a);
  };

  k.ob = function () {
    var a = this;
    return this.i.then(function () {
      var b = T(a);

      if (b && b.isAnonymous) {
        var c = Xe({
          providerId: null,
          isNewUser: !1
        });
        return Xe({
          user: b,
          credential: null,
          additionalUserInfo: c,
          operationType: "signIn"
        });
      }

      return Em(a, a.c.ob()).then(function (d) {
        var e = d.user;
        Pl(e, "isAnonymous", !0);
        a.Z(e);
        return d;
      });
    });
  };

  function R(a) {
    return a.app;
  }

  function T(a) {
    return a.currentUser;
  }

  k.getUid = function () {
    return T(this) && T(this).uid || null;
  };

  function Gm(a) {
    return T(a) && T(a)._lat || null;
  }

  function Cm(a) {
    if (a.X) {
      for (var b = 0; b < a.o.length; b++) if (a.o[b]) a.o[b](Gm(a));

      if (a.O !== a.getUid() && a.I.length) for (a.O = a.getUid(), b = 0; b < a.I.length; b++) if (a.I[b]) a.I[b](Gm(a));
    }
  }

  k.Ub = function (a) {
    this.addAuthTokenListener(a);
    this.u++;
    0 < this.u && T(this) && Fl(T(this));
  };

  k.Cc = function (a) {
    var b = this;
    x(this.o, function (c) {
      c == a && b.u--;
    });
    0 > this.u && (this.u = 0);
    0 == this.u && T(this) && Gl(T(this));
    this.removeAuthTokenListener(a);
  };

  k.addAuthTokenListener = function (a) {
    var b = this;
    this.o.push(a);
    S(this, this.i.then(function () {
      b.l || Ma(b.o, a) && a(Gm(b));
    }));
  };

  k.removeAuthTokenListener = function (a) {
    y(this.o, function (b) {
      return b == a;
    });
  };

  function Fm(a, b) {
    a.I.push(b);
    S(a, a.i.then(function () {
      !a.l && Ma(a.I, b) && a.O !== a.getUid() && (a.O = a.getUid(), b(Gm(a)));
    }));
  }

  k.delete = function () {
    this.l = !0;

    for (var a = 0; a < this.N.length; a++) this.N[a].cancel("app-deleted");

    this.N = [];
    this.h && (a = this.h, a.b.removeListener(km("local"), a.a, this.ka));
    this.a && (this.a.unsubscribe(this), this.a.Ya());
    return Promise.resolve();
  };

  function S(a, b) {
    a.N.push(b);
    b.ia(function () {
      Na(a.N, b);
    });
    return b;
  }

  k.Yb = function (a) {
    return S(this, si(this.c, a));
  };

  k.oc = function (a) {
    return !!Cg(a);
  };

  k.lb = function (a, b) {
    var c = this;
    return S(this, D().then(function () {
      var d = new nf(b);
      if (!d.c) throw new M("argument-error", vf + " must be true when sending sign in link to email");
      return xf(d);
    }).then(function (d) {
      return c.c.lb(a, d);
    }).then(function () {}));
  };

  k.Rc = function (a) {
    return this.Ka(a).then(function (b) {
      return b.data.email;
    });
  };

  k.Za = function (a, b) {
    return S(this, this.c.Za(a, b).then(function () {}));
  };

  k.Ka = function (a) {
    return S(this, this.c.Ka(a).then(function (b) {
      return new af(b);
    }));
  };

  k.Wa = function (a) {
    return S(this, this.c.Wa(a).then(function () {}));
  };

  k.kb = function (a, b) {
    var c = this;
    return S(this, D().then(function () {
      return "undefined" === typeof b || cb(b) ? {} : xf(new nf(b));
    }).then(function (d) {
      return c.c.kb(a, d);
    }).then(function () {}));
  };

  k.Hc = function (a, b) {
    return S(this, kl(this, a, b, t(this.nb, this)));
  };

  k.Gc = function (a, b) {
    var c = this;
    return S(this, D().then(function () {
      var d = Bg(a, b || ee());
      return c.nb(d);
    }));
  };

  function Hm() {}

  Hm.prototype.render = function () {};

  Hm.prototype.reset = function () {};

  Hm.prototype.getResponse = function () {};

  Hm.prototype.execute = function () {};

  function Im() {
    this.a = {};
    this.b = 1E12;
  }

  var Jm = null;

  Im.prototype.render = function (a, b) {
    this.a[this.b.toString()] = new Km(a, b);
    return this.b++;
  };

  Im.prototype.reset = function (a) {
    var b = Lm(this, a);
    a = Mm(a);
    b && a && (b.delete(), delete this.a[a]);
  };

  Im.prototype.getResponse = function (a) {
    return (a = Lm(this, a)) ? a.getResponse() : null;
  };

  Im.prototype.execute = function (a) {
    (a = Lm(this, a)) && a.execute();
  };

  function Lm(a, b) {
    return (b = Mm(b)) ? a.a[b] || null : null;
  }

  function Mm(a) {
    return (a = "undefined" === typeof a ? 1E12 : a) ? a.toString() : null;
  }

  function Km(a, b) {
    this.g = !1;
    this.c = b;
    this.a = this.b = null;
    this.h = "invisible" !== this.c.size;
    this.f = Sd(a);
    var c = this;

    this.i = function () {
      c.execute();
    };

    this.h ? this.execute() : xc(this.f, "click", this.i);
  }

  Km.prototype.getResponse = function () {
    Nm(this);
    return this.b;
  };

  Km.prototype.execute = function () {
    Nm(this);
    var a = this;
    this.a || (this.a = setTimeout(function () {
      a.b = ze();
      var b = a.c.callback,
          c = a.c["expired-callback"];
      if (b) try {
        b(a.b);
      } catch (d) {}
      a.a = setTimeout(function () {
        a.a = null;
        a.b = null;
        if (c) try {
          c();
        } catch (d) {}
        a.h && a.execute();
      }, 6E4);
    }, 500));
  };

  Km.prototype.delete = function () {
    Nm(this);
    this.g = !0;
    clearTimeout(this.a);
    this.a = null;
    Hc(this.f, "click", this.i);
  };

  function Nm(a) {
    if (a.g) throw Error("reCAPTCHA mock was already deleted!");
  }

  ;

  function Om() {}

  Om.prototype.g = function () {
    Jm || (Jm = new Im());
    return D(Jm);
  };

  Om.prototype.c = function () {};

  var Pm = null;

  function Qm() {
    this.b = l.grecaptcha ? Infinity : 0;
    this.f = null;
    this.a = "__rcb" + Math.floor(1E6 * Math.random()).toString();
  }

  var Rm = new wd(xd, "https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"),
      Sm = new Me(3E4, 6E4);

  Qm.prototype.g = function (a) {
    var b = this;
    return new C(function (c, d) {
      var e = setTimeout(function () {
        d(new M("network-request-failed"));
      }, Sm.get());

      if (!l.grecaptcha || a !== b.f && !b.b) {
        l[b.a] = function () {
          if (l.grecaptcha) {
            b.f = a;
            var g = l.grecaptcha.render;

            l.grecaptcha.render = function (h, m) {
              h = g(h, m);
              b.b++;
              return h;
            };

            clearTimeout(e);
            c(l.grecaptcha);
          } else clearTimeout(e), d(new M("internal-error"));

          delete l[b.a];
        };

        var f = Dd(Rm, {
          onload: b.a,
          hl: a || ""
        });
        D(Vh(f)).s(function () {
          clearTimeout(e);
          d(new M("internal-error", "Unable to load external reCAPTCHA dependencies!"));
        });
      } else clearTimeout(e), c(l.grecaptcha);
    });
  };

  Qm.prototype.c = function () {
    this.b--;
  };

  var Tm = null;

  function Um(a, b, c, d, e, f, g) {
    K(this, "type", "recaptcha");
    this.c = this.f = null;
    this.D = !1;
    this.l = b;
    this.g = null;
    g ? (Pm || (Pm = new Om()), g = Pm) : (Tm || (Tm = new Qm()), g = Tm);
    this.o = g;
    this.a = c || {
      theme: "light",
      type: "image"
    };
    this.h = [];
    if (this.a[Vm]) throw new M("argument-error", "sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");
    this.i = "invisible" === this.a[Wm];
    if (!l.document) throw new M("operation-not-supported-in-this-environment", "RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");
    if (!Sd(b) || !this.i && Sd(b).hasChildNodes()) throw new M("argument-error", "reCAPTCHA container is either not found or already contains inner elements!");
    this.u = new bi(a, f || null, e || null);

    this.v = d || function () {
      return null;
    };

    var h = this;
    this.m = [];
    var m = this.a[Xm];

    this.a[Xm] = function (v) {
      Ym(h, v);
      if ("function" === typeof m) m(v);else if ("string" === typeof m) {
        var z = J(m, l);
        "function" === typeof z && z(v);
      }
    };

    var p = this.a[Zm];

    this.a[Zm] = function () {
      Ym(h, null);
      if ("function" === typeof p) p();else if ("string" === typeof p) {
        var v = J(p, l);
        "function" === typeof v && v();
      }
    };
  }

  var Xm = "callback",
      Zm = "expired-callback",
      Vm = "sitekey",
      Wm = "size";

  function Ym(a, b) {
    for (var c = 0; c < a.m.length; c++) try {
      a.m[c](b);
    } catch (d) {}
  }

  function $m(a, b) {
    y(a.m, function (c) {
      return c == b;
    });
  }

  function an(a, b) {
    a.h.push(b);
    b.ia(function () {
      Na(a.h, b);
    });
    return b;
  }

  k = Um.prototype;

  k.za = function () {
    var a = this;
    return this.f ? this.f : this.f = an(this, D().then(function () {
      if (Fe() && !we()) return re();
      throw new M("operation-not-supported-in-this-environment", "RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.");
    }).then(function () {
      return a.o.g(a.v());
    }).then(function (b) {
      a.g = b;
      return O(a.u, Wi, {});
    }).then(function (b) {
      a.a[Vm] = b.recaptchaSiteKey;
    }).s(function (b) {
      a.f = null;
      throw b;
    }));
  };

  k.render = function () {
    bn(this);
    var a = this;
    return an(this, this.za().then(function () {
      if (null === a.c) {
        var b = a.l;

        if (!a.i) {
          var c = Sd(b);
          b = Vd("DIV");
          c.appendChild(b);
        }

        a.c = a.g.render(b, a.a);
      }

      return a.c;
    }));
  };

  k.verify = function () {
    bn(this);
    var a = this;
    return an(this, this.render().then(function (b) {
      return new C(function (c) {
        var d = a.g.getResponse(b);
        if (d) c(d);else {
          var e = function (f) {
            f && ($m(a, e), c(f));
          };

          a.m.push(e);
          a.i && a.g.execute(a.c);
        }
      });
    }));
  };

  k.reset = function () {
    bn(this);
    null !== this.c && this.g.reset(this.c);
  };

  function bn(a) {
    if (a.D) throw new M("internal-error", "RecaptchaVerifier instance has been destroyed.");
  }

  k.clear = function () {
    bn(this);
    this.D = !0;
    this.o.c();

    for (var a = 0; a < this.h.length; a++) this.h[a].cancel("RecaptchaVerifier instance has been destroyed.");

    if (!this.i) {
      a = Sd(this.l);

      for (var b; b = a.firstChild;) a.removeChild(b);
    }
  };

  function cn(a, b, c) {
    var d = !1;

    try {
      this.b = c || _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.app();
    } catch (g) {
      throw new M("argument-error", "No firebase.app.App instance is currently initialized.");
    }

    if (this.b.options && this.b.options.apiKey) c = this.b.options.apiKey;else throw new M("invalid-api-key");
    var e = this,
        f = null;

    try {
      f = this.b.auth().ya();
    } catch (g) {}

    try {
      d = this.b.auth().settings.appVerificationDisabledForTesting;
    } catch (g) {}

    f = _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.SDK_VERSION ? Be(_firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.SDK_VERSION, f) : null;
    Um.call(this, c, a, b, function () {
      try {
        var g = e.b.auth().ea();
      } catch (h) {
        g = null;
      }

      return g;
    }, f, If(Jf), d);
  }

  u(cn, Um);

  function dn(a, b, c, d) {
    a: {
      c = Array.prototype.slice.call(c);
      var e = 0;

      for (var f = !1, g = 0; g < b.length; g++) if (b[g].optional) f = !0;else {
        if (f) throw new M("internal-error", "Argument validator encountered a required argument after an optional argument.");
        e++;
      }

      f = b.length;
      if (c.length < e || f < c.length) d = "Expected " + (e == f ? 1 == e ? "1 argument" : e + " arguments" : e + "-" + f + " arguments") + " but got " + c.length + ".";else {
        for (e = 0; e < c.length; e++) if (f = b[e].optional && void 0 === c[e], !b[e].M(c[e]) && !f) {
          b = b[e];
          if (0 > e || e >= en.length) throw new M("internal-error", "Argument validator received an unsupported number of arguments.");
          c = en[e];
          d = (d ? "" : c + " argument ") + (b.name ? '"' + b.name + '" ' : "") + "must be " + b.K + ".";
          break a;
        }

        d = null;
      }
    }

    if (d) throw new M("argument-error", a + " failed: " + d);
  }

  var en = "First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");

  function V(a, b) {
    return {
      name: a || "",
      K: "a valid string",
      optional: !!b,
      M: n
    };
  }

  function fn(a, b) {
    return {
      name: a || "",
      K: "a boolean",
      optional: !!b,
      M: ha
    };
  }

  function W(a, b) {
    return {
      name: a || "",
      K: "a valid object",
      optional: !!b,
      M: r
    };
  }

  function gn(a, b) {
    return {
      name: a || "",
      K: "a function",
      optional: !!b,
      M: q
    };
  }

  function hn(a, b) {
    return {
      name: a || "",
      K: "null",
      optional: !!b,
      M: ma
    };
  }

  function jn() {
    return {
      name: "",
      K: "an HTML element",
      optional: !1,
      M: function (a) {
        return !!(a && a instanceof Element);
      }
    };
  }

  function kn() {
    return {
      name: "auth",
      K: "an instance of Firebase Auth",
      optional: !0,
      M: function (a) {
        return !!(a && a instanceof sm);
      }
    };
  }

  function ln() {
    return {
      name: "app",
      K: "an instance of Firebase App",
      optional: !0,
      M: function (a) {
        return !!(a && a instanceof _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.app.App);
      }
    };
  }

  function mn(a) {
    return {
      name: a ? a + "Credential" : "credential",
      K: a ? "a valid " + a + " credential" : "a valid credential",
      optional: !1,
      M: function (b) {
        if (!b) return !1;
        var c = !a || b.providerId === a;
        return !(!b.la || !c);
      }
    };
  }

  function nn() {
    return {
      name: "authProvider",
      K: "a valid Auth provider",
      optional: !1,
      M: function (a) {
        return !!(a && a.providerId && a.hasOwnProperty && a.hasOwnProperty("isOAuthProvider"));
      }
    };
  }

  function on() {
    return {
      name: "applicationVerifier",
      K: "an implementation of firebase.auth.ApplicationVerifier",
      optional: !1,
      M: function (a) {
        return !!(a && n(a.type) && q(a.verify));
      }
    };
  }

  function X(a, b, c, d) {
    return {
      name: c || "",
      K: a.K + " or " + b.K,
      optional: !!d,
      M: function (e) {
        return a.M(e) || b.M(e);
      }
    };
  }

  ;

  function Y(a, b) {
    for (var c in b) {
      var d = b[c].name;
      a[d] = pn(d, a[c], b[c].j);
    }
  }

  function qn(a, b) {
    for (var c in b) {
      var d = b[c].name;
      d !== c && Object.defineProperty(a, d, {
        get: ua(function (e) {
          return this[e];
        }, c),
        set: ua(function (e, f, g, h) {
          dn(e, [g], [h], !0);
          this[f] = h;
        }, d, c, b[c].vb),
        enumerable: !0
      });
    }
  }

  function Z(a, b, c, d) {
    a[b] = pn(b, c, d);
  }

  function pn(a, b, c) {
    function d() {
      var g = Array.prototype.slice.call(arguments);
      dn(e, c, g);
      return b.apply(this, g);
    }

    if (!c) return b;
    var e = rn(a),
        f;

    for (f in b) d[f] = b[f];

    for (f in b.prototype) d.prototype[f] = b.prototype[f];

    return d;
  }

  function rn(a) {
    a = a.split(".");
    return a[a.length - 1];
  }

  ;
  Y(sm.prototype, {
    Wa: {
      name: "applyActionCode",
      j: [V("code")]
    },
    Ka: {
      name: "checkActionCode",
      j: [V("code")]
    },
    Za: {
      name: "confirmPasswordReset",
      j: [V("code"), V("newPassword")]
    },
    Vb: {
      name: "createUserWithEmailAndPassword",
      j: [V("email"), V("password")]
    },
    Yb: {
      name: "fetchSignInMethodsForEmail",
      j: [V("email")]
    },
    fa: {
      name: "getRedirectResult",
      j: []
    },
    oc: {
      name: "isSignInWithEmailLink",
      j: [V("emailLink")]
    },
    uc: {
      name: "onAuthStateChanged",
      j: [X(W(), gn(), "nextOrObserver"), gn("opt_error", !0), gn("opt_completed", !0)]
    },
    vc: {
      name: "onIdTokenChanged",
      j: [X(W(), gn(), "nextOrObserver"), gn("opt_error", !0), gn("opt_completed", !0)]
    },
    kb: {
      name: "sendPasswordResetEmail",
      j: [V("email"), X(W("opt_actionCodeSettings", !0), hn(null, !0), "opt_actionCodeSettings", !0)]
    },
    lb: {
      name: "sendSignInLinkToEmail",
      j: [V("email"), W("actionCodeSettings")]
    },
    mb: {
      name: "setPersistence",
      j: [V("persistence")]
    },
    nb: {
      name: "signInAndRetrieveDataWithCredential",
      j: [mn()]
    },
    ob: {
      name: "signInAnonymously",
      j: []
    },
    Nb: {
      name: "signInWithCredential",
      j: [mn()]
    },
    Ec: {
      name: "signInWithCustomToken",
      j: [V("token")]
    },
    Fc: {
      name: "signInWithEmailAndPassword",
      j: [V("email"), V("password")]
    },
    Gc: {
      name: "signInWithEmailLink",
      j: [V("email"), V("emailLink", !0)]
    },
    Hc: {
      name: "signInWithPhoneNumber",
      j: [V("phoneNumber"), on()]
    },
    Ic: {
      name: "signInWithPopup",
      j: [nn()]
    },
    Jc: {
      name: "signInWithRedirect",
      j: [nn()]
    },
    Oc: {
      name: "updateCurrentUser",
      j: [X(function (a) {
        return {
          name: "user",
          K: "an instance of Firebase User",
          optional: !!a,
          M: function (b) {
            return !!(b && b instanceof P);
          }
        };
      }(), hn(), "user")]
    },
    pb: {
      name: "signOut",
      j: []
    },
    toJSON: {
      name: "toJSON",
      j: [V(null, !0)]
    },
    Qc: {
      name: "useDeviceLanguage",
      j: []
    },
    Rc: {
      name: "verifyPasswordResetCode",
      j: [V("code")]
    }
  });
  qn(sm.prototype, {
    lc: {
      name: "languageCode",
      vb: X(V(), hn(), "languageCode")
    }
  });
  sm.Persistence = ak;
  sm.Persistence.LOCAL = "local";
  sm.Persistence.SESSION = "session";
  sm.Persistence.NONE = "none";
  Y(P.prototype, {
    "delete": {
      name: "delete",
      j: []
    },
    bc: {
      name: "getIdTokenResult",
      j: [fn("opt_forceRefresh", !0)]
    },
    F: {
      name: "getIdToken",
      j: [fn("opt_forceRefresh", !0)]
    },
    pc: {
      name: "linkAndRetrieveDataWithCredential",
      j: [mn()]
    },
    eb: {
      name: "linkWithCredential",
      j: [mn()]
    },
    qc: {
      name: "linkWithPhoneNumber",
      j: [V("phoneNumber"), on()]
    },
    rc: {
      name: "linkWithPopup",
      j: [nn()]
    },
    sc: {
      name: "linkWithRedirect",
      j: [nn()]
    },
    yc: {
      name: "reauthenticateAndRetrieveDataWithCredential",
      j: [mn()]
    },
    gb: {
      name: "reauthenticateWithCredential",
      j: [mn()]
    },
    zc: {
      name: "reauthenticateWithPhoneNumber",
      j: [V("phoneNumber"), on()]
    },
    Ac: {
      name: "reauthenticateWithPopup",
      j: [nn()]
    },
    Bc: {
      name: "reauthenticateWithRedirect",
      j: [nn()]
    },
    reload: {
      name: "reload",
      j: []
    },
    jb: {
      name: "sendEmailVerification",
      j: [X(W("opt_actionCodeSettings", !0), hn(null, !0), "opt_actionCodeSettings", !0)]
    },
    toJSON: {
      name: "toJSON",
      j: [V(null, !0)]
    },
    Nc: {
      name: "unlink",
      j: [V("provider")]
    },
    rb: {
      name: "updateEmail",
      j: [V("email")]
    },
    sb: {
      name: "updatePassword",
      j: [V("password")]
    },
    Pc: {
      name: "updatePhoneNumber",
      j: [mn("phone")]
    },
    tb: {
      name: "updateProfile",
      j: [W("profile")]
    }
  });
  Y(Im.prototype, {
    execute: {
      name: "execute"
    },
    render: {
      name: "render"
    },
    reset: {
      name: "reset"
    },
    getResponse: {
      name: "getResponse"
    }
  });
  Y(Hm.prototype, {
    execute: {
      name: "execute"
    },
    render: {
      name: "render"
    },
    reset: {
      name: "reset"
    },
    getResponse: {
      name: "getResponse"
    }
  });
  Y(C.prototype, {
    ia: {
      name: "finally"
    },
    s: {
      name: "catch"
    },
    then: {
      name: "then"
    }
  });
  qn(il.prototype, {
    appVerificationDisabled: {
      name: "appVerificationDisabledForTesting",
      vb: fn("appVerificationDisabledForTesting")
    }
  });
  Y(jl.prototype, {
    confirm: {
      name: "confirm",
      j: [V("verificationCode")]
    }
  });
  Z(Zf, "fromJSON", function (a) {
    a = n(a) ? JSON.parse(a) : a;

    for (var b, c = [jg, Ag, Hg, gg], d = 0; d < c.length; d++) if (b = c[d](a)) return b;

    return null;
  }, [X(V(), W(), "json")]);
  Z(vg, "credential", function (a, b) {
    return new ug(a, b);
  }, [V("email"), V("password")]);
  Y(ug.prototype, {
    w: {
      name: "toJSON",
      j: [V(null, !0)]
    }
  });
  Y(mg.prototype, {
    ua: {
      name: "addScope",
      j: [V("scope")]
    },
    Da: {
      name: "setCustomParameters",
      j: [W("customOAuthParameters")]
    }
  });
  Z(mg, "credential", ng, [X(V(), W(), "token")]);
  Z(vg, "credentialWithLink", Bg, [V("email"), V("emailLink")]);
  Y(og.prototype, {
    ua: {
      name: "addScope",
      j: [V("scope")]
    },
    Da: {
      name: "setCustomParameters",
      j: [W("customOAuthParameters")]
    }
  });
  Z(og, "credential", pg, [X(V(), W(), "token")]);
  Y(qg.prototype, {
    ua: {
      name: "addScope",
      j: [V("scope")]
    },
    Da: {
      name: "setCustomParameters",
      j: [W("customOAuthParameters")]
    }
  });
  Z(qg, "credential", rg, [X(V(), X(W(), hn()), "idToken"), X(V(), hn(), "accessToken", !0)]);
  Y(sg.prototype, {
    Da: {
      name: "setCustomParameters",
      j: [W("customOAuthParameters")]
    }
  });
  Z(sg, "credential", tg, [X(V(), W(), "token"), V("secret", !0)]);
  Y(N.prototype, {
    ua: {
      name: "addScope",
      j: [V("scope")]
    },
    credential: {
      name: "credential",
      j: [X(V(), X(W(), hn()), "optionsOrIdToken"), X(V(), hn(), "accessToken", !0)]
    },
    Da: {
      name: "setCustomParameters",
      j: [W("customOAuthParameters")]
    }
  });
  Y(hg.prototype, {
    w: {
      name: "toJSON",
      j: [V(null, !0)]
    }
  });
  Y(bg.prototype, {
    w: {
      name: "toJSON",
      j: [V(null, !0)]
    }
  });
  Z(Ig, "credential", Kg, [V("verificationId"), V("verificationCode")]);
  Y(Ig.prototype, {
    Ua: {
      name: "verifyPhoneNumber",
      j: [V("phoneNumber"), on()]
    }
  });
  Y(Dg.prototype, {
    w: {
      name: "toJSON",
      j: [V(null, !0)]
    }
  });
  Y(M.prototype, {
    toJSON: {
      name: "toJSON",
      j: [V(null, !0)]
    }
  });
  Y(Sg.prototype, {
    toJSON: {
      name: "toJSON",
      j: [V(null, !0)]
    }
  });
  Y(Rg.prototype, {
    toJSON: {
      name: "toJSON",
      j: [V(null, !0)]
    }
  });
  Y(cn.prototype, {
    clear: {
      name: "clear",
      j: []
    },
    render: {
      name: "render",
      j: []
    },
    verify: {
      name: "verify",
      j: []
    }
  });

  (function () {
    if ("undefined" !== typeof _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a && _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.INTERNAL && _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.INTERNAL.registerService) {
      var a = {
        Auth: sm,
        AuthCredential: Zf,
        Error: M
      };
      Z(a, "EmailAuthProvider", vg, []);
      Z(a, "FacebookAuthProvider", mg, []);
      Z(a, "GithubAuthProvider", og, []);
      Z(a, "GoogleAuthProvider", qg, []);
      Z(a, "TwitterAuthProvider", sg, []);
      Z(a, "OAuthProvider", N, [V("providerId")]);
      Z(a, "SAMLAuthProvider", lg, [V("providerId")]);
      Z(a, "PhoneAuthProvider", Ig, [kn()]);
      Z(a, "RecaptchaVerifier", cn, [X(V(), jn(), "recaptchaContainer"), W("recaptchaParameters", !0), ln()]);
      _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.INTERNAL.registerService("auth", function (b, c) {
        b = new sm(b);
        c({
          INTERNAL: {
            getUid: t(b.getUid, b),
            getToken: t(b.ac, b),
            addAuthTokenListener: t(b.Ub, b),
            removeAuthTokenListener: t(b.Cc, b)
          }
        });
        return b;
      }, a, function (b, c) {
        if ("create" === b) try {
          c.auth();
        } catch (d) {}
      });
      _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.INTERNAL.extendNamespace({
        User: P
      });
    } else throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");
  })();
}).apply(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/@firebase/firestore/dist/index.cjs.js":
/*!************************************************************!*\
  !*** ./node_modules/@firebase/firestore/dist/index.cjs.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var firebase = _interopDefault(__webpack_require__(/*! @firebase/app */ "./node_modules/@firebase/app/dist/index.cjs.js"));

var logger = __webpack_require__(/*! @firebase/logger */ "./node_modules/@firebase/logger/dist/index.esm.js");

var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");

var util = __webpack_require__(/*! @firebase/util */ "./node_modules/@firebase/util/dist/index.cjs.js");

var webchannelWrapper = __webpack_require__(/*! @firebase/webchannel-wrapper */ "./node_modules/@firebase/webchannel-wrapper/dist/index.esm.js");
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** The semver (www.semver.org) version of the SDK. */


var SDK_VERSION = firebase.SDK_VERSION;
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var logClient = new logger.Logger('@firebase/firestore');
var LogLevel;

(function (LogLevel) {
  LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
  LogLevel[LogLevel["ERROR"] = 1] = "ERROR";
  LogLevel[LogLevel["SILENT"] = 2] = "SILENT";
})(LogLevel || (LogLevel = {})); // Helper methods are needed because variables can't be exported as read/write


function getLogLevel() {
  if (logClient.logLevel === logger.LogLevel.DEBUG) {
    return LogLevel.DEBUG;
  } else if (logClient.logLevel === logger.LogLevel.SILENT) {
    return LogLevel.SILENT;
  } else {
    return LogLevel.ERROR;
  }
}

function setLogLevel(newLevel) {
  /**
   * Map the new log level to the associated Firebase Log Level
   */
  switch (newLevel) {
    case LogLevel.DEBUG:
      logClient.logLevel = logger.LogLevel.DEBUG;
      break;

    case LogLevel.ERROR:
      logClient.logLevel = logger.LogLevel.ERROR;
      break;

    case LogLevel.SILENT:
      logClient.logLevel = logger.LogLevel.SILENT;
      break;

    default:
      logClient.error("Firestore (" + SDK_VERSION + "): Invalid value passed to `setLogLevel`");
  }
}

function debug(tag, msg) {
  var obj = [];

  for (var _i = 2; _i < arguments.length; _i++) {
    obj[_i - 2] = arguments[_i];
  }

  if (logClient.logLevel <= logger.LogLevel.DEBUG) {
    var args = obj.map(argToString);
    logClient.debug.apply(logClient, ["Firestore (" + SDK_VERSION + ") [" + tag + "]: " + msg].concat(args));
  }
}

function error(msg) {
  var obj = [];

  for (var _i = 1; _i < arguments.length; _i++) {
    obj[_i - 1] = arguments[_i];
  }

  if (logClient.logLevel <= logger.LogLevel.ERROR) {
    var args = obj.map(argToString);
    logClient.error.apply(logClient, ["Firestore (" + SDK_VERSION + "): " + msg].concat(args));
  }
}
/**
 * Converts an additional log parameter to a string representation.
 */


function argToString(obj) {
  if (typeof obj === 'string') {
    return obj;
  } else {
    var platform = PlatformSupport.getPlatform();

    try {
      return platform.formatJSON(obj);
    } catch (e) {
      // Converting to JSON failed, just log the object directly
      return obj;
    }
  }
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Unconditionally fails, throwing an Error with the given message.
 *
 * Returns any so it can be used in expressions:
 * @example
 * let futureVar = fail('not implemented yet');
 */


function fail(failure) {
  // Log the failure in addition to throw an exception, just in case the
  // exception is swallowed.
  var message = "FIRESTORE (" + SDK_VERSION + ") INTERNAL ASSERTION FAILED: " + failure;
  error(message); // NOTE: We don't use FirestoreError here because these are internal failures
  // that cannot be handled by the user. (Also it would create a circular
  // dependency between the error and assert modules which doesn't work.)

  throw new Error(message);
}
/**
 * Fails if the given assertion condition is false, throwing an Error with the
 * given message if it did.
 */


function assert(assertion, message) {
  if (!assertion) {
    fail(message);
  }
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provides singleton helpers where setup code can inject a platform at runtime.
 * setPlatform needs to be set before Firestore is used and must be set exactly
 * once.
 */


var PlatformSupport =
/** @class */
function () {
  function PlatformSupport() {}

  PlatformSupport.setPlatform = function (platform) {
    if (PlatformSupport.platform) {
      fail('Platform already defined');
    }

    PlatformSupport.platform = platform;
  };

  PlatformSupport.getPlatform = function () {
    if (!PlatformSupport.platform) {
      fail('Platform not set');
    }

    return PlatformSupport.platform;
  };

  return PlatformSupport;
}();
/**
 * Returns the representation of an empty "proto" byte string for the
 * platform.
 */


function emptyByteString() {
  return PlatformSupport.getPlatform().emptyByteString;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// TODO(mcg): Change to a string enum once we've upgraded to typescript 2.4.
//  tslint:disable-next-line:variable-name Intended to look like a TS 2.4 enum


var Code = {
  // Causes are copied from:
  // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h

  /** Not an error; returned on success. */
  OK: 'ok',

  /** The operation was cancelled (typically by the caller). */
  CANCELLED: 'cancelled',

  /** Unknown error or an error from a different error domain. */
  UNKNOWN: 'unknown',

  /**
   * Client specified an invalid argument. Note that this differs from
   * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
   * problematic regardless of the state of the system (e.g., a malformed file
   * name).
   */
  INVALID_ARGUMENT: 'invalid-argument',

  /**
   * Deadline expired before operation could complete. For operations that
   * change the state of the system, this error may be returned even if the
   * operation has completed successfully. For example, a successful response
   * from a server could have been delayed long enough for the deadline to
   * expire.
   */
  DEADLINE_EXCEEDED: 'deadline-exceeded',

  /** Some requested entity (e.g., file or directory) was not found. */
  NOT_FOUND: 'not-found',

  /**
   * Some entity that we attempted to create (e.g., file or directory) already
   * exists.
   */
  ALREADY_EXISTS: 'already-exists',

  /**
   * The caller does not have permission to execute the specified operation.
   * PERMISSION_DENIED must not be used for rejections caused by exhausting
   * some resource (use RESOURCE_EXHAUSTED instead for those errors).
   * PERMISSION_DENIED must not be used if the caller can not be identified
   * (use UNAUTHENTICATED instead for those errors).
   */
  PERMISSION_DENIED: 'permission-denied',

  /**
   * The request does not have valid authentication credentials for the
   * operation.
   */
  UNAUTHENTICATED: 'unauthenticated',

  /**
   * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
   * entire file system is out of space.
   */
  RESOURCE_EXHAUSTED: 'resource-exhausted',

  /**
   * Operation was rejected because the system is not in a state required for
   * the operation's execution. For example, directory to be deleted may be
   * non-empty, an rmdir operation is applied to a non-directory, etc.
   *
   * A litmus test that may help a service implementor in deciding
   * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
   *  (a) Use UNAVAILABLE if the client can retry just the failing call.
   *  (b) Use ABORTED if the client should retry at a higher-level
   *      (e.g., restarting a read-modify-write sequence).
   *  (c) Use FAILED_PRECONDITION if the client should not retry until
   *      the system state has been explicitly fixed. E.g., if an "rmdir"
   *      fails because the directory is non-empty, FAILED_PRECONDITION
   *      should be returned since the client should not retry unless
   *      they have first fixed up the directory by deleting files from it.
   *  (d) Use FAILED_PRECONDITION if the client performs conditional
   *      REST Get/Update/Delete on a resource and the resource on the
   *      server does not match the condition. E.g., conflicting
   *      read-modify-write on the same resource.
   */
  FAILED_PRECONDITION: 'failed-precondition',

  /**
   * The operation was aborted, typically due to a concurrency issue like
   * sequencer check failures, transaction aborts, etc.
   *
   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
   * and UNAVAILABLE.
   */
  ABORTED: 'aborted',

  /**
   * Operation was attempted past the valid range. E.g., seeking or reading
   * past end of file.
   *
   * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
   * if the system state changes. For example, a 32-bit file system will
   * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
   * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
   * an offset past the current file size.
   *
   * There is a fair bit of overlap between FAILED_PRECONDITION and
   * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
   * when it applies so that callers who are iterating through a space can
   * easily look for an OUT_OF_RANGE error to detect when they are done.
   */
  OUT_OF_RANGE: 'out-of-range',

  /** Operation is not implemented or not supported/enabled in this service. */
  UNIMPLEMENTED: 'unimplemented',

  /**
   * Internal errors. Means some invariants expected by underlying System has
   * been broken. If you see one of these errors, Something is very broken.
   */
  INTERNAL: 'internal',

  /**
   * The service is currently unavailable. This is a most likely a transient
   * condition and may be corrected by retrying with a backoff.
   *
   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
   * and UNAVAILABLE.
   */
  UNAVAILABLE: 'unavailable',

  /** Unrecoverable data loss or corruption. */
  DATA_LOSS: 'data-loss'
};
/**
 * An error class used for Firestore-generated errors. Ideally we should be
 * using FirebaseError, but integrating with it is overly arduous at the moment,
 * so we define our own compatible error class (with a `name` of 'FirebaseError'
 * and compatible `code` and `message` fields.)
 */

var FirestoreError =
/** @class */
function (_super) {
  tslib_1.__extends(FirestoreError, _super);

  function FirestoreError(code, message) {
    var _this = _super.call(this, message) || this;

    _this.code = code;
    _this.message = message;
    _this.name = 'FirebaseError'; // HACK: We write a toString property directly because Error is not a real
    // class and so inheritance does not work correctly. We could alternatively
    // do the same "back-door inheritance" trick that FirebaseError does.

    _this.toString = function () {
      return _this.name + ": [code=" + _this.code + "]: " + _this.message;
    };

    return _this;
  }

  return FirestoreError;
}(Error);
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Helper function to prevent instantiation through the constructor.
 *
 * This method creates a new constructor that throws when it's invoked.
 * The prototype of that constructor is then set to the prototype of the hidden
 * "class" to expose all the prototype methods and allow for instanceof
 * checks.
 *
 * To also make all the static methods available, all properties of the
 * original constructor are copied to the new constructor.
 */


function makeConstructorPrivate(cls, optionalMessage) {
  function PublicConstructor() {
    var error = 'This constructor is private.';

    if (optionalMessage) {
      error += ' ';
      error += optionalMessage;
    }

    throw new FirestoreError(Code.INVALID_ARGUMENT, error);
  } // Make sure instanceof checks work and all methods are exposed on the public
  // constructor


  PublicConstructor.prototype = cls.prototype; // Copy any static methods/members

  for (var staticProperty in cls) {
    if (cls.hasOwnProperty(staticProperty)) {
      PublicConstructor[staticProperty] = cls[staticProperty];
    }
  }

  return PublicConstructor;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function contains(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}
/** Returns the given value if it's defined or the defaultValue otherwise. */


function defaulted(value, defaultValue) {
  return value !== undefined ? value : defaultValue;
}

function forEachNumber(obj, fn) {
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var num = Number(key);

      if (!isNaN(num)) {
        fn(num, obj[key]);
      }
    }
  }
}

function values(obj) {
  var vs = [];
  forEach(obj, function (_, v) {
    return vs.push(v);
  });
  return vs;
}

function forEach(obj, fn) {
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      fn(key, obj[key]);
    }
  }
}

function isEmpty(obj) {
  assert(obj != null && typeof obj === 'object', 'isEmpty() expects object parameter.');

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      return false;
    }
  }

  return true;
}

function shallowCopy(obj) {
  assert(obj && typeof obj === 'object', 'shallowCopy() expects object parameter.');
  var result = {};

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      result[key] = obj[key];
    }
  }

  return result;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Validates that no arguments were passed in the invocation of functionName.
 *
 * Forward the magic "arguments" variable as second parameter on which the
 * parameter validation is performed:
 * validateNoArgs('myFunction', arguments);
 */


function validateNoArgs(functionName, args) {
  if (args.length !== 0) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() does not support arguments, " + 'but was called with ' + formatPlural(args.length, 'argument') + '.');
  }
}
/**
 * Validates the invocation of functionName has the exact number of arguments.
 *
 * Forward the magic "arguments" variable as second parameter on which the
 * parameter validation is performed:
 * validateExactNumberOfArgs('myFunction', arguments, 2);
 */


function validateExactNumberOfArgs(functionName, args, numberOfArgs) {
  if (args.length !== numberOfArgs) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires " + formatPlural(numberOfArgs, 'argument') + ', but was called with ' + formatPlural(args.length, 'argument') + '.');
  }
}
/**
 * Validates the invocation of functionName has at least the provided number of
 * arguments (but can have many more).
 *
 * Forward the magic "arguments" variable as second parameter on which the
 * parameter validation is performed:
 * validateAtLeastNumberOfArgs('myFunction', arguments, 2);
 */


function validateAtLeastNumberOfArgs(functionName, args, minNumberOfArgs) {
  if (args.length < minNumberOfArgs) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires at least " + formatPlural(minNumberOfArgs, 'argument') + ', but was called with ' + formatPlural(args.length, 'argument') + '.');
  }
}
/**
 * Validates the invocation of functionName has number of arguments between
 * the values provided.
 *
 * Forward the magic "arguments" variable as second parameter on which the
 * parameter validation is performed:
 * validateBetweenNumberOfArgs('myFunction', arguments, 2, 3);
 */


function validateBetweenNumberOfArgs(functionName, args, minNumberOfArgs, maxNumberOfArgs) {
  if (args.length < minNumberOfArgs || args.length > maxNumberOfArgs) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires between " + minNumberOfArgs + " and " + (maxNumberOfArgs + " arguments, but was called with ") + formatPlural(args.length, 'argument') + '.');
  }
}
/**
 * Validates the provided argument is an array and has as least the expected
 * number of elements.
 */


function validateNamedArrayAtLeastNumberOfElements(functionName, value, name, minNumberOfElements) {
  if (!(value instanceof Array) || value.length < minNumberOfElements) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires its " + name + " argument to be an " + 'array with at least ' + (formatPlural(minNumberOfElements, 'element') + "."));
  }
}
/**
 * Validates the provided positional argument has the native JavaScript type
 * using typeof checks.
 */


function validateArgType(functionName, type, position, argument) {
  validateType(functionName, type, ordinal(position) + " argument", argument);
}
/**
 * Validates the provided argument has the native JavaScript type using
 * typeof checks or is undefined.
 */


function validateOptionalArgType(functionName, type, position, argument) {
  if (argument !== undefined) {
    validateArgType(functionName, type, position, argument);
  }
}
/**
 * Validates the provided named option has the native JavaScript type using
 * typeof checks.
 */


function validateNamedType(functionName, type, optionName, argument) {
  validateType(functionName, type, optionName + " option", argument);
}
/**
 * Validates the provided named option has the native JavaScript type using
 * typeof checks or is undefined.
 */


function validateNamedOptionalType(functionName, type, optionName, argument) {
  if (argument !== undefined) {
    validateNamedType(functionName, type, optionName, argument);
  }
}

function validateArrayElements(functionName, optionName, typeDescription, argument, validator) {
  if (!(argument instanceof Array)) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires its " + optionName + " " + ("option to be an array, but it was: " + valueDescription(argument)));
  }

  for (var i = 0; i < argument.length; ++i) {
    if (!validator(argument[i])) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires all " + optionName + " " + ("elements to be " + typeDescription + ", but the value at index " + i + " ") + ("was: " + valueDescription(argument[i])));
    }
  }
}

function validateOptionalArrayElements(functionName, optionName, typeDescription, argument, validator) {
  if (argument !== undefined) {
    validateArrayElements(functionName, optionName, typeDescription, argument, validator);
  }
}
/**
 * Validates that the provided named option equals one of the expected values.
 */


function validateNamedPropertyEquals(functionName, inputName, optionName, input, expected) {
  var expectedDescription = [];

  for (var _i = 0, expected_1 = expected; _i < expected_1.length; _i++) {
    var val = expected_1[_i];

    if (val === input) {
      return;
    }

    expectedDescription.push(valueDescription(val));
  }

  var actualDescription = valueDescription(input);
  throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid value " + actualDescription + " provided to function " + functionName + "() for option " + ("\"" + optionName + "\". Acceptable values: " + expectedDescription.join(', ')));
}
/**
 * Validates that the provided named option equals one of the expected values or
 * is undefined.
 */


function validateNamedOptionalPropertyEquals(functionName, inputName, optionName, input, expected) {
  if (input !== undefined) {
    validateNamedPropertyEquals(functionName, inputName, optionName, input, expected);
  }
}
/**
 * Validates that the provided argument is a valid enum.
 *
 * @param functionName Function making the validation call.
 * @param enums Array containing all possible values for the enum.
 * @param position Position of the argument in `functionName`.
 * @param argument Arugment to validate.
 */


function validateStringEnum(functionName, enums, position, argument) {
  if (!enums.some(function (element) {
    return element === argument;
  })) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid value " + valueDescription(argument) + " provided to function " + (functionName + "() for its " + ordinal(position) + " argument. Acceptable ") + ("values: " + enums.join(', ')));
  }
}
/** Helper to validate the type of a provided input. */


function validateType(functionName, type, inputName, input) {
  var valid = false;

  if (type === 'object') {
    valid = isPlainObject(input);
  } else if (type === 'non-empty string') {
    valid = typeof input === 'string' && input !== '';
  } else {
    valid = typeof input === type;
  }

  if (!valid) {
    var description = valueDescription(input);
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires its " + inputName + " " + ("to be of type " + type + ", but it was: " + description));
  }
}
/**
 * Returns true if it's a non-null object without a custom prototype
 * (i.e. excludes Array, Date, etc.).
 */


function isPlainObject(input) {
  return typeof input === 'object' && input !== null && (Object.getPrototypeOf(input) === Object.prototype || Object.getPrototypeOf(input) === null);
}
/** Returns a string describing the type / value of the provided input. */


function valueDescription(input) {
  if (input === undefined) {
    return 'undefined';
  } else if (input === null) {
    return 'null';
  } else if (typeof input === 'string') {
    if (input.length > 20) {
      input = input.substring(0, 20) + "...";
    }

    return JSON.stringify(input);
  } else if (typeof input === 'number' || typeof input === 'boolean') {
    return '' + input;
  } else if (typeof input === 'object') {
    if (input instanceof Array) {
      return 'an array';
    } else {
      var customObjectName = tryGetCustomObjectType(input);

      if (customObjectName) {
        return "a custom " + customObjectName + " object";
      } else {
        return 'an object';
      }
    }
  } else if (typeof input === 'function') {
    return 'a function';
  } else {
    return fail('Unknown wrong type: ' + typeof input);
  }
}
/** Hacky method to try to get the constructor name for an object. */


function tryGetCustomObjectType(input) {
  if (input.constructor) {
    var funcNameRegex = /function\s+([^\s(]+)\s*\(/;
    var results = funcNameRegex.exec(input.constructor.toString());

    if (results && results.length > 1) {
      return results[1];
    }
  }

  return null;
}
/** Validates the provided argument is defined. */


function validateDefined(functionName, position, argument) {
  if (argument === undefined) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires a valid " + ordinal(position) + " " + "argument, but it was undefined.");
  }
}
/**
 * Validates the provided positional argument is an object, and its keys and
 * values match the expected keys and types provided in optionTypes.
 */


function validateOptionNames(functionName, options, optionNames) {
  forEach(options, function (key, _) {
    if (optionNames.indexOf(key) < 0) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Unknown option '" + key + "' passed to function " + functionName + "(). " + 'Available options: ' + optionNames.join(', '));
    }
  });
}
/**
 * Helper method to throw an error that the provided argument did not pass
 * an instanceof check.
 */


function invalidClassError(functionName, type, position, argument) {
  var description = valueDescription(argument);
  return new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires its " + ordinal(position) + " " + ("argument to be a " + type + ", but it was: " + description));
}
/** Converts a number to its english word representation */


function ordinal(num) {
  switch (num) {
    case 1:
      return 'first';

    case 2:
      return 'second';

    case 3:
      return 'third';

    default:
      return num + 'th';
  }
}
/**
 * Formats the given word as plural conditionally given the preceding number.
 */


function formatPlural(num, str) {
  return num + " " + str + (num === 1 ? '' : 's');
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// tslint:disable-next-line:class-as-namespace


var AutoId =
/** @class */
function () {
  function AutoId() {}

  AutoId.newId = function () {
    // Alphanumeric characters
    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    var autoId = '';

    for (var i = 0; i < 20; i++) {
      autoId += chars.charAt(Math.floor(Math.random() * chars.length));
    }

    assert(autoId.length === 20, 'Invalid auto ID: ' + autoId);
    return autoId;
  };

  return AutoId;
}();

function primitiveComparator(left, right) {
  if (left < right) return -1;
  if (left > right) return 1;
  return 0;
}
/** Helper to compare nullable (or undefined-able) objects using isEqual(). */


function equals(left, right) {
  if (left !== null && left !== undefined) {
    return !!(right && left.isEqual(right));
  } else {
    // HACK: Explicitly cast since TypeScript's type narrowing apparently isn't
    // smart enough.
    return left === right;
  }
}
/** Helper to compare arrays using isEqual(). */


function arrayEquals(left, right) {
  if (left.length !== right.length) {
    return false;
  }

  for (var i = 0; i < left.length; i++) {
    if (!left[i].isEqual(right[i])) {
      return false;
    }
  }

  return true;
}
/**
 * Returns the immediate lexicographically-following string. This is useful to
 * construct an inclusive range for indexeddb iterators.
 */


function immediateSuccessor(s) {
  // Return the input string, with an additional NUL byte appended.
  return s + '\0';
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Helper function to assert Uint8Array is available at runtime. */


function assertUint8ArrayAvailable() {
  if (typeof Uint8Array === 'undefined') {
    throw new FirestoreError(Code.UNIMPLEMENTED, 'Uint8Arrays are not available in this environment.');
  }
}
/** Helper function to assert Base64 functions are available at runtime. */


function assertBase64Available() {
  if (!PlatformSupport.getPlatform().base64Available) {
    throw new FirestoreError(Code.UNIMPLEMENTED, 'Blobs are unavailable in Firestore in this environment.');
  }
}
/**
 * Immutable class holding a blob (binary data).
 * This class is directly exposed in the public API.
 *
 * Note that while you can't hide the constructor in JavaScript code, we are
 * using the hack above to make sure no-one outside this module can call it.
 */


var Blob =
/** @class */
function () {
  function Blob(binaryString) {
    assertBase64Available();
    this._binaryString = binaryString;
  }

  Blob.fromBase64String = function (base64) {
    validateExactNumberOfArgs('Blob.fromBase64String', arguments, 1);
    validateArgType('Blob.fromBase64String', 'string', 1, base64);
    assertBase64Available();

    try {
      var binaryString = PlatformSupport.getPlatform().atob(base64);
      return new Blob(binaryString);
    } catch (e) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Failed to construct Blob from Base64 string: ' + e);
    }
  };

  Blob.fromUint8Array = function (array) {
    validateExactNumberOfArgs('Blob.fromUint8Array', arguments, 1);
    assertUint8ArrayAvailable();

    if (!(array instanceof Uint8Array)) {
      throw invalidClassError('Blob.fromUint8Array', 'Uint8Array', 1, array);
    } // We can't call array.map directly because it expects the return type to
    // be a Uint8Array, whereas we can convert it to a regular array by invoking
    // map on the Array prototype.


    var binaryString = Array.prototype.map.call(array, function (char) {
      return String.fromCharCode(char);
    }).join('');
    return new Blob(binaryString);
  };

  Blob.prototype.toBase64 = function () {
    validateExactNumberOfArgs('Blob.toBase64', arguments, 0);
    assertBase64Available();
    return PlatformSupport.getPlatform().btoa(this._binaryString);
  };

  Blob.prototype.toUint8Array = function () {
    validateExactNumberOfArgs('Blob.toUint8Array', arguments, 0);
    assertUint8ArrayAvailable();
    var buffer = new Uint8Array(this._binaryString.length);

    for (var i = 0; i < this._binaryString.length; i++) {
      buffer[i] = this._binaryString.charCodeAt(i);
    }

    return buffer;
  };

  Blob.prototype.toString = function () {
    return 'Blob(base64: ' + this.toBase64() + ')';
  };

  Blob.prototype.isEqual = function (other) {
    return this._binaryString === other._binaryString;
  };
  /**
   * Actually private to JS consumers of our API, so this function is prefixed
   * with an underscore.
   */


  Blob.prototype._compareTo = function (other) {
    return primitiveComparator(this._binaryString, other._binaryString);
  };

  return Blob;
}(); // Public instance that disallows construction at runtime. This constructor is
// used when exporting Blob on firebase.firestore.Blob and will be called Blob
// publicly. Internally we still use Blob which has a type checked private
// constructor. Note that Blob and PublicBlob can be used interchangeably in
// instanceof checks.
// For our internal TypeScript code PublicBlob doesn't exist as a type, and so
// we need to use Blob as type and export it too.
// tslint:disable-next-line:variable-name We're treating this as a class name.


var PublicBlob = makeConstructorPrivate(Blob, 'Use Blob.fromUint8Array() or Blob.fromBase64String() instead.');
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var DatabaseInfo =
/** @class */
function () {
  /**
   * Constructs a DatabaseInfo using the provided host, databaseId and
   * persistenceKey.
   *
   * @param databaseId The database to use.
   * @param persistenceKey A unique identifier for this Firestore's local
   * storage (used in conjunction with the databaseId).
   * @param host The Firestore backend host to connect to.
   * @param ssl Whether to use SSL when connecting.
   * @param forceLongPolling Whether to use the forceLongPolling option
   * when using WebChannel as the network transport.
   */
  function DatabaseInfo(databaseId, persistenceKey, host, ssl, forceLongPolling) {
    this.databaseId = databaseId;
    this.persistenceKey = persistenceKey;
    this.host = host;
    this.ssl = ssl;
    this.forceLongPolling = forceLongPolling;
  }

  return DatabaseInfo;
}();
/** The default database name for a project. */


var DEFAULT_DATABASE_NAME = '(default)';
/** Represents the database ID a Firestore client is associated with. */

var DatabaseId =
/** @class */
function () {
  function DatabaseId(projectId, database) {
    this.projectId = projectId;
    this.database = database ? database : DEFAULT_DATABASE_NAME;
  }

  Object.defineProperty(DatabaseId.prototype, "isDefaultDatabase", {
    get: function () {
      return this.database === DEFAULT_DATABASE_NAME;
    },
    enumerable: true,
    configurable: true
  });

  DatabaseId.prototype.isEqual = function (other) {
    return other instanceof DatabaseId && other.projectId === this.projectId && other.database === this.database;
  };

  DatabaseId.prototype.compareTo = function (other) {
    return primitiveComparator(this.projectId, other.projectId) || primitiveComparator(this.database, other.database);
  };

  return DatabaseId;
}();
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to
 * exceed. All subsequent calls to next will return increasing values. If provided with a
 * `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as
 * well as write out sequence numbers that it produces via `next()`.
 */


var ListenSequence =
/** @class */
function () {
  function ListenSequence(previousValue, sequenceNumberSyncer) {
    var _this = this;

    this.previousValue = previousValue;

    if (sequenceNumberSyncer) {
      sequenceNumberSyncer.sequenceNumberHandler = function (sequenceNumber) {
        return _this.setPreviousValue(sequenceNumber);
      };

      this.writeNewSequenceNumber = function (sequenceNumber) {
        return sequenceNumberSyncer.writeSequenceNumber(sequenceNumber);
      };
    }
  }

  ListenSequence.prototype.setPreviousValue = function (externalPreviousValue) {
    this.previousValue = Math.max(externalPreviousValue, this.previousValue);
    return this.previousValue;
  };

  ListenSequence.prototype.next = function () {
    var nextValue = ++this.previousValue;

    if (this.writeNewSequenceNumber) {
      this.writeNewSequenceNumber(nextValue);
    }

    return nextValue;
  };

  ListenSequence.INVALID = -1;
  return ListenSequence;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var DOCUMENT_KEY_NAME = '__name__';
/**
 * Path represents an ordered sequence of string segments.
 */

var Path =
/** @class */
function () {
  function Path(segments, offset, length) {
    this.init(segments, offset, length);
  }
  /**
   * An initialization method that can be called from outside the constructor.
   * We need this so that we can have a non-static construct method that returns
   * the polymorphic `this` type.
   */


  Path.prototype.init = function (segments, offset, length) {
    if (offset === undefined) {
      offset = 0;
    } else if (offset > segments.length) {
      fail('offset ' + offset + ' out of range ' + segments.length);
    }

    if (length === undefined) {
      length = segments.length - offset;
    } else if (length > segments.length - offset) {
      fail('length ' + length + ' out of range ' + (segments.length - offset));
    }

    this.segments = segments;
    this.offset = offset;
    this.len = length;
  };
  /**
   * Constructs a new instance of Path using the same concrete type as `this`.
   * We need this instead of using the normal constructor, because polymorphic
   * `this` doesn't work on static methods.
   */


  Path.prototype.construct = function (segments, offset, length) {
    var path = Object.create(Object.getPrototypeOf(this));
    path.init(segments, offset, length);
    return path;
  };

  Object.defineProperty(Path.prototype, "length", {
    get: function () {
      return this.len;
    },
    enumerable: true,
    configurable: true
  });

  Path.prototype.isEqual = function (other) {
    return Path.comparator(this, other) === 0;
  };

  Path.prototype.child = function (nameOrPath) {
    var segments = this.segments.slice(this.offset, this.limit());

    if (nameOrPath instanceof Path) {
      nameOrPath.forEach(function (segment) {
        segments.push(segment);
      });
    } else if (typeof nameOrPath === 'string') {
      segments.push(nameOrPath);
    } else {
      fail('Unknown parameter type for Path.child(): ' + nameOrPath);
    }

    return this.construct(segments);
  };
  /** The index of one past the last segment of the path. */


  Path.prototype.limit = function () {
    return this.offset + this.length;
  };

  Path.prototype.popFirst = function (size) {
    size = size === undefined ? 1 : size;
    assert(this.length >= size, "Can't call popFirst() with less segments");
    return this.construct(this.segments, this.offset + size, this.length - size);
  };

  Path.prototype.popLast = function () {
    assert(!this.isEmpty(), "Can't call popLast() on empty path");
    return this.construct(this.segments, this.offset, this.length - 1);
  };

  Path.prototype.firstSegment = function () {
    assert(!this.isEmpty(), "Can't call firstSegment() on empty path");
    return this.segments[this.offset];
  };

  Path.prototype.lastSegment = function () {
    return this.get(this.length - 1);
  };

  Path.prototype.get = function (index) {
    assert(index < this.length, 'Index out of range');
    return this.segments[this.offset + index];
  };

  Path.prototype.isEmpty = function () {
    return this.length === 0;
  };

  Path.prototype.isPrefixOf = function (other) {
    if (other.length < this.length) {
      return false;
    }

    for (var i = 0; i < this.length; i++) {
      if (this.get(i) !== other.get(i)) {
        return false;
      }
    }

    return true;
  };

  Path.prototype.isImmediateParentOf = function (potentialChild) {
    if (this.length + 1 !== potentialChild.length) {
      return false;
    }

    for (var i = 0; i < this.length; i++) {
      if (this.get(i) !== potentialChild.get(i)) {
        return false;
      }
    }

    return true;
  };

  Path.prototype.forEach = function (fn) {
    for (var i = this.offset, end = this.limit(); i < end; i++) {
      fn(this.segments[i]);
    }
  };

  Path.prototype.toArray = function () {
    return this.segments.slice(this.offset, this.limit());
  };

  Path.comparator = function (p1, p2) {
    var len = Math.min(p1.length, p2.length);

    for (var i = 0; i < len; i++) {
      var left = p1.get(i);
      var right = p2.get(i);
      if (left < right) return -1;
      if (left > right) return 1;
    }

    if (p1.length < p2.length) return -1;
    if (p1.length > p2.length) return 1;
    return 0;
  };

  return Path;
}();
/**
 * A slash-separated path for navigating resources (documents and collections)
 * within Firestore.
 */


var ResourcePath =
/** @class */
function (_super) {
  tslib_1.__extends(ResourcePath, _super);

  function ResourcePath() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ResourcePath.prototype.canonicalString = function () {
    // NOTE: The client is ignorant of any path segments containing escape
    // sequences (e.g. __id123__) and just passes them through raw (they exist
    // for legacy reasons and should not be used frequently).
    return this.toArray().join('/');
  };

  ResourcePath.prototype.toString = function () {
    return this.canonicalString();
  };
  /**
   * Creates a resource path from the given slash-delimited string.
   */


  ResourcePath.fromString = function (path) {
    // NOTE: The client is ignorant of any path segments containing escape
    // sequences (e.g. __id123__) and just passes them through raw (they exist
    // for legacy reasons and should not be used frequently).
    if (path.indexOf('//') >= 0) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid path (" + path + "). Paths must not contain // in them.");
    } // We may still have an empty segment at the beginning or end if they had a
    // leading or trailing slash (which we allow).


    var segments = path.split('/').filter(function (segment) {
      return segment.length > 0;
    });
    return new ResourcePath(segments);
  };

  ResourcePath.EMPTY_PATH = new ResourcePath([]);
  return ResourcePath;
}(Path);

var identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
/** A dot-separated path for navigating sub-objects within a document. */

var FieldPath =
/** @class */
function (_super) {
  tslib_1.__extends(FieldPath, _super);

  function FieldPath() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  /**
   * Returns true if the string could be used as a segment in a field path
   * without escaping.
   */


  FieldPath.isValidIdentifier = function (segment) {
    return identifierRegExp.test(segment);
  };

  FieldPath.prototype.canonicalString = function () {
    return this.toArray().map(function (str) {
      str = str.replace('\\', '\\\\').replace('`', '\\`');

      if (!FieldPath.isValidIdentifier(str)) {
        str = '`' + str + '`';
      }

      return str;
    }).join('.');
  };

  FieldPath.prototype.toString = function () {
    return this.canonicalString();
  };
  /**
   * Returns true if this field references the key of a document.
   */


  FieldPath.prototype.isKeyField = function () {
    return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;
  };
  /**
   * The field designating the key of a document.
   */


  FieldPath.keyField = function () {
    return new FieldPath([DOCUMENT_KEY_NAME]);
  };
  /**
   * Parses a field string from the given server-formatted string.
   *
   * - Splitting the empty string is not allowed (for now at least).
   * - Empty segments within the string (e.g. if there are two consecutive
   *   separators) are not allowed.
   *
   * TODO(b/37244157): we should make this more strict. Right now, it allows
   * non-identifier path components, even if they aren't escaped.
   */


  FieldPath.fromServerFormat = function (path) {
    var segments = [];
    var current = '';
    var i = 0;

    var addCurrentSegment = function () {
      if (current.length === 0) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid field path (" + path + "). Paths must not be empty, begin " + "with '.', end with '.', or contain '..'");
      }

      segments.push(current);
      current = '';
    };

    var inBackticks = false;

    while (i < path.length) {
      var c = path[i];

      if (c === '\\') {
        if (i + 1 === path.length) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has trailing escape character: ' + path);
        }

        var next = path[i + 1];

        if (!(next === '\\' || next === '.' || next === '`')) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has invalid escape sequence: ' + path);
        }

        current += next;
        i += 2;
      } else if (c === '`') {
        inBackticks = !inBackticks;
        i++;
      } else if (c === '.' && !inBackticks) {
        addCurrentSegment();
        i++;
      } else {
        current += c;
        i++;
      }
    }

    addCurrentSegment();

    if (inBackticks) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Unterminated ` in path: ' + path);
    }

    return new FieldPath(segments);
  };

  FieldPath.EMPTY_PATH = new FieldPath([]);
  return FieldPath;
}(Path);
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var DocumentKey =
/** @class */
function () {
  function DocumentKey(path) {
    this.path = path;
    assert(DocumentKey.isDocumentKey(path), 'Invalid DocumentKey with an odd number of segments: ' + path.toArray().join('/'));
  }
  /** Returns true if the document is in the specified collectionId. */


  DocumentKey.prototype.hasCollectionId = function (collectionId) {
    return this.path.length >= 2 && this.path.get(this.path.length - 2) === collectionId;
  };

  DocumentKey.prototype.isEqual = function (other) {
    return other !== null && ResourcePath.comparator(this.path, other.path) === 0;
  };

  DocumentKey.prototype.toString = function () {
    return this.path.toString();
  };

  DocumentKey.comparator = function (k1, k2) {
    return ResourcePath.comparator(k1.path, k2.path);
  };

  DocumentKey.isDocumentKey = function (path) {
    return path.length % 2 === 0;
  };
  /**
   * Creates and returns a new document key with the given segments.
   *
   * @param path The segments of the path to the document
   * @return A new instance of DocumentKey
   */


  DocumentKey.fromSegments = function (segments) {
    return new DocumentKey(new ResourcePath(segments.slice()));
  };
  /**
   * Creates and returns a new document key using '/' to split the string into
   * segments.
   *
   * @param path The slash-separated path string to the document
   * @return A new instance of DocumentKey
   */


  DocumentKey.fromPathString = function (path) {
    return new DocumentKey(ResourcePath.fromString(path));
  };

  DocumentKey.EMPTY = new DocumentKey(new ResourcePath([]));
  return DocumentKey;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var Deferred =
/** @class */
function () {
  function Deferred() {
    var _this = this;

    this.promise = new Promise(function (resolve, reject) {
      _this.resolve = resolve;
      _this.reject = reject;
    });
  }

  return Deferred;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Wellknown "timer" IDs used when scheduling delayed operations on the
 * AsyncQueue. These IDs can then be used from tests to check for the presence
 * of operations or to run them early.
 *
 * The string values are used when encoding these timer IDs in JSON spec tests.
 */


var TimerId;

(function (TimerId) {
  /** All can be used with runDelayedOperationsEarly() to run all timers. */
  TimerId["All"] = "all";
  /**
   * The following 4 timers are used in persistent_stream.ts for the listen and
   * write streams. The "Idle" timer is used to close the stream due to
   * inactivity. The "ConnectionBackoff" timer is used to restart a stream once
   * the appropriate backoff delay has elapsed.
   */

  TimerId["ListenStreamIdle"] = "listen_stream_idle";
  TimerId["ListenStreamConnectionBackoff"] = "listen_stream_connection_backoff";
  TimerId["WriteStreamIdle"] = "write_stream_idle";
  TimerId["WriteStreamConnectionBackoff"] = "write_stream_connection_backoff";
  /**
   * A timer used in online_state_tracker.ts to transition from
   * OnlineState.Unknown to Offline after a set timeout, rather than waiting
   * indefinitely for success or failure.
   */

  TimerId["OnlineStateTimeout"] = "online_state_timeout";
  /**
   * A timer used to update the client metadata in IndexedDb, which is used
   * to determine the primary leaseholder.
   */

  TimerId["ClientMetadataRefresh"] = "client_metadata_refresh";
  /** A timer used to periodically attempt LRU Garbage collection */

  TimerId["LruGarbageCollection"] = "lru_garbage_collection";
})(TimerId || (TimerId = {}));
/**
 * Represents an operation scheduled to be run in the future on an AsyncQueue.
 *
 * It is created via DelayedOperation.createAndSchedule().
 *
 * Supports cancellation (via cancel()) and early execution (via skipDelay()).
 */


var DelayedOperation =
/** @class */
function () {
  function DelayedOperation(asyncQueue, timerId, targetTimeMs, op, removalCallback) {
    this.asyncQueue = asyncQueue;
    this.timerId = timerId;
    this.targetTimeMs = targetTimeMs;
    this.op = op;
    this.removalCallback = removalCallback;
    this.deferred = new Deferred();
    this.then = this.deferred.promise.then.bind(this.deferred.promise);
    this.catch = this.deferred.promise.catch.bind(this.deferred.promise); // It's normal for the deferred promise to be canceled (due to cancellation)
    // and so we attach a dummy catch callback to avoid
    // 'UnhandledPromiseRejectionWarning' log spam.

    this.deferred.promise.catch(function (err) {});
  }
  /**
   * Creates and returns a DelayedOperation that has been scheduled to be
   * executed on the provided asyncQueue after the provided delayMs.
   *
   * @param asyncQueue The queue to schedule the operation on.
   * @param id A Timer ID identifying the type of operation this is.
   * @param delayMs The delay (ms) before the operation should be scheduled.
   * @param op The operation to run.
   * @param removalCallback A callback to be called synchronously once the
   *   operation is executed or canceled, notifying the AsyncQueue to remove it
   *   from its delayedOperations list.
   *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
   *   the DelayedOperation class public.
   */


  DelayedOperation.createAndSchedule = function (asyncQueue, timerId, delayMs, op, removalCallback) {
    var targetTime = Date.now() + delayMs;
    var delayedOp = new DelayedOperation(asyncQueue, timerId, targetTime, op, removalCallback);
    delayedOp.start(delayMs);
    return delayedOp;
  };
  /**
   * Starts the timer. This is called immediately after construction by
   * createAndSchedule().
   */


  DelayedOperation.prototype.start = function (delayMs) {
    var _this = this;

    this.timerHandle = setTimeout(function () {
      return _this.handleDelayElapsed();
    }, delayMs);
  };
  /**
   * Queues the operation to run immediately (if it hasn't already been run or
   * canceled).
   */


  DelayedOperation.prototype.skipDelay = function () {
    return this.handleDelayElapsed();
  };
  /**
   * Cancels the operation if it hasn't already been executed or canceled. The
   * promise will be rejected.
   *
   * As long as the operation has not yet been run, calling cancel() provides a
   * guarantee that the operation will not be run.
   */


  DelayedOperation.prototype.cancel = function (reason) {
    if (this.timerHandle !== null) {
      this.clearTimeout();
      this.deferred.reject(new FirestoreError(Code.CANCELLED, 'Operation cancelled' + (reason ? ': ' + reason : '')));
    }
  };

  DelayedOperation.prototype.handleDelayElapsed = function () {
    var _this = this;

    this.asyncQueue.enqueueAndForget(function () {
      if (_this.timerHandle !== null) {
        _this.clearTimeout();

        return _this.op().then(function (result) {
          return _this.deferred.resolve(result);
        });
      } else {
        return Promise.resolve();
      }
    });
  };

  DelayedOperation.prototype.clearTimeout = function () {
    if (this.timerHandle !== null) {
      this.removalCallback(this);
      clearTimeout(this.timerHandle);
      this.timerHandle = null;
    }
  };

  return DelayedOperation;
}();

var AsyncQueue =
/** @class */
function () {
  function AsyncQueue() {
    // The last promise in the queue.
    this.tail = Promise.resolve(); // Operations scheduled to be queued in the future. Operations are
    // automatically removed after they are run or canceled.

    this.delayedOperations = []; // Flag set while there's an outstanding AsyncQueue operation, used for
    // assertion sanity-checks.

    this.operationInProgress = false;
  }
  /**
   * Adds a new operation to the queue without waiting for it to complete (i.e.
   * we ignore the Promise result).
   */


  AsyncQueue.prototype.enqueueAndForget = function (op) {
    // tslint:disable-next-line:no-floating-promises
    this.enqueue(op);
  };
  /**
   * Adds a new operation to the queue. Returns a promise that will be resolved
   * when the promise returned by the new operation is (with its value).
   */


  AsyncQueue.prototype.enqueue = function (op) {
    var _this = this;

    this.verifyNotFailed();
    var newTail = this.tail.then(function () {
      _this.operationInProgress = true;
      return op().catch(function (error$1) {
        _this.failure = error$1;
        _this.operationInProgress = false;
        var message = error$1.stack || error$1.message || '';
        error('INTERNAL UNHANDLED ERROR: ', message); // Escape the promise chain and throw the error globally so that
        // e.g. any global crash reporting library detects and reports it.
        // (but not for simulated errors in our tests since this breaks mocha)

        if (message.indexOf('Firestore Test Simulated Error') < 0) {
          setTimeout(function () {
            throw error$1;
          }, 0);
        } // Re-throw the error so that this.tail becomes a rejected Promise and
        // all further attempts to chain (via .then) will just short-circuit
        // and return the rejected Promise.


        throw error$1;
      }).then(function (result) {
        _this.operationInProgress = false;
        return result;
      });
    });
    this.tail = newTail;
    return newTail;
  };
  /**
   * Schedules an operation to be queued on the AsyncQueue once the specified
   * `delayMs` has elapsed. The returned CancelablePromise can be used to cancel
   * the operation prior to its running.
   */


  AsyncQueue.prototype.enqueueAfterDelay = function (timerId, delayMs, op) {
    var _this = this;

    this.verifyNotFailed();
    assert(delayMs >= 0, "Attempted to schedule an operation with a negative delay of " + delayMs); // While not necessarily harmful, we currently don't expect to have multiple
    // ops with the same timer id in the queue, so defensively reject them.

    assert(!this.containsDelayedOperation(timerId), "Attempted to schedule multiple operations with timer id " + timerId + ".");
    var delayedOp = DelayedOperation.createAndSchedule(this, timerId, delayMs, op, function (op) {
      return _this.removeDelayedOperation(op);
    });
    this.delayedOperations.push(delayedOp);
    return delayedOp;
  };

  AsyncQueue.prototype.verifyNotFailed = function () {
    if (this.failure) {
      fail('AsyncQueue is already failed: ' + (this.failure.stack || this.failure.message));
    }
  };
  /**
   * Verifies there's an operation currently in-progress on the AsyncQueue.
   * Unfortunately we can't verify that the running code is in the promise chain
   * of that operation, so this isn't a foolproof check, but it should be enough
   * to catch some bugs.
   */


  AsyncQueue.prototype.verifyOperationInProgress = function () {
    assert(this.operationInProgress, 'verifyOpInProgress() called when no op in progress on this queue.');
  };
  /**
   * Waits until all currently queued tasks are finished executing. Delayed
   * operations are not run.
   */


  AsyncQueue.prototype.drain = function () {
    return this.enqueue(function () {
      return Promise.resolve();
    });
  };
  /**
   * For Tests: Determine if a delayed operation with a particular TimerId
   * exists.
   */


  AsyncQueue.prototype.containsDelayedOperation = function (timerId) {
    for (var _i = 0, _a = this.delayedOperations; _i < _a.length; _i++) {
      var op = _a[_i];

      if (op.timerId === timerId) {
        return true;
      }
    }

    return false;
  };
  /**
   * For Tests: Runs some or all delayed operations early.
   *
   * @param lastTimerId Delayed operations up to and including this TimerId will
   *  be drained. Throws if no such operation exists. Pass TimerId.All to run
   *  all delayed operations.
   * @returns a Promise that resolves once all operations have been run.
   */


  AsyncQueue.prototype.runDelayedOperationsEarly = function (lastTimerId) {
    var _this = this; // Note that draining may generate more delayed ops, so we do that first.


    return this.drain().then(function () {
      assert(lastTimerId === TimerId.All || _this.containsDelayedOperation(lastTimerId), "Attempted to drain to missing operation " + lastTimerId); // Run ops in the same order they'd run if they ran naturally.

      _this.delayedOperations.sort(function (a, b) {
        return a.targetTimeMs - b.targetTimeMs;
      });

      for (var _i = 0, _a = _this.delayedOperations; _i < _a.length; _i++) {
        var op = _a[_i];
        op.skipDelay();

        if (lastTimerId !== TimerId.All && op.timerId === lastTimerId) {
          break;
        }
      }

      return _this.drain();
    });
  };
  /** Called once a DelayedOperation is run or canceled. */


  AsyncQueue.prototype.removeDelayedOperation = function (op) {
    // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.
    var index = this.delayedOperations.indexOf(op);
    assert(index >= 0, 'Delayed operation not found.');
    this.delayedOperations.splice(index, 1);
  };

  return AsyncQueue;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var escapeChar = '\u0001';
var encodedSeparatorChar = '\u0001';
var encodedNul = '\u0010';
var encodedEscape = '\u0011';
/**
 * Encodes a resource path into a IndexedDb-compatible string form.
 */

function encode(path) {
  var result = '';

  for (var i = 0; i < path.length; i++) {
    if (result.length > 0) {
      result = encodeSeparator(result);
    }

    result = encodeSegment(path.get(i), result);
  }

  return encodeSeparator(result);
}
/** Encodes a single segment of a resource path into the given result */


function encodeSegment(segment, resultBuf) {
  var result = resultBuf;
  var length = segment.length;

  for (var i = 0; i < length; i++) {
    var c = segment.charAt(i);

    switch (c) {
      case '\0':
        result += escapeChar + encodedNul;
        break;

      case escapeChar:
        result += escapeChar + encodedEscape;
        break;

      default:
        result += c;
    }
  }

  return result;
}
/** Encodes a path separator into the given result */


function encodeSeparator(result) {
  return result + escapeChar + encodedSeparatorChar;
}
/**
 * Decodes the given IndexedDb-compatible string form of a resource path into
 * a ResourcePath instance. Note that this method is not suitable for use with
 * decoding resource names from the server; those are One Platform format
 * strings.
 */


function decode(path) {
  // Event the empty path must encode as a path of at least length 2. A path
  // with exactly 2 must be the empty path.
  var length = path.length;
  assert(length >= 2, 'Invalid path ' + path);

  if (length === 2) {
    assert(path.charAt(0) === escapeChar && path.charAt(1) === encodedSeparatorChar, 'Non-empty path ' + path + ' had length 2');
    return ResourcePath.EMPTY_PATH;
  } // Escape characters cannot exist past the second-to-last position in the
  // source value.


  var lastReasonableEscapeIndex = length - 2;
  var segments = [];
  var segmentBuilder = '';

  for (var start = 0; start < length;) {
    // The last two characters of a valid encoded path must be a separator, so
    // there must be an end to this segment.
    var end = path.indexOf(escapeChar, start);

    if (end < 0 || end > lastReasonableEscapeIndex) {
      fail('Invalid encoded resource path: "' + path + '"');
    }

    var next = path.charAt(end + 1);

    switch (next) {
      case encodedSeparatorChar:
        var currentPiece = path.substring(start, end);
        var segment = void 0;

        if (segmentBuilder.length === 0) {
          // Avoid copying for the common case of a segment that excludes \0
          // and \001
          segment = currentPiece;
        } else {
          segmentBuilder += currentPiece;
          segment = segmentBuilder;
          segmentBuilder = '';
        }

        segments.push(segment);
        break;

      case encodedNul:
        segmentBuilder += path.substring(start, end);
        segmentBuilder += '\0';
        break;

      case encodedEscape:
        // The escape character can be used in the output to encode itself.
        segmentBuilder += path.substring(start, end + 1);
        break;

      default:
        fail('Invalid encoded resource path: "' + path + '"');
    }

    start = end + 2;
  }

  return new ResourcePath(segments);
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var Timestamp =
/** @class */
function () {
  function Timestamp(seconds, nanoseconds) {
    this.seconds = seconds;
    this.nanoseconds = nanoseconds;

    if (nanoseconds < 0) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp nanoseconds out of range: ' + nanoseconds);
    }

    if (nanoseconds >= 1e9) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp nanoseconds out of range: ' + nanoseconds);
    } // Midnight at the beginning of 1/1/1 is the earliest Firestore supports.


    if (seconds < -62135596800) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp seconds out of range: ' + seconds);
    } // This will break in the year 10,000.


    if (seconds >= 253402300800) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp seconds out of range: ' + seconds);
    }
  }

  Timestamp.now = function () {
    return Timestamp.fromMillis(Date.now());
  };

  Timestamp.fromDate = function (date) {
    return Timestamp.fromMillis(date.getTime());
  };

  Timestamp.fromMillis = function (milliseconds) {
    var seconds = Math.floor(milliseconds / 1000);
    var nanos = (milliseconds - seconds * 1000) * 1e6;
    return new Timestamp(seconds, nanos);
  };

  Timestamp.prototype.toDate = function () {
    return new Date(this.toMillis());
  };

  Timestamp.prototype.toMillis = function () {
    return this.seconds * 1000 + this.nanoseconds / 1e6;
  };

  Timestamp.prototype._compareTo = function (other) {
    if (this.seconds === other.seconds) {
      return primitiveComparator(this.nanoseconds, other.nanoseconds);
    }

    return primitiveComparator(this.seconds, other.seconds);
  };

  Timestamp.prototype.isEqual = function (other) {
    return other.seconds === this.seconds && other.nanoseconds === this.nanoseconds;
  };

  Timestamp.prototype.toString = function () {
    return 'Timestamp(seconds=' + this.seconds + ', nanoseconds=' + this.nanoseconds + ')';
  };

  return Timestamp;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A version of a document in Firestore. This corresponds to the version
 * timestamp, such as update_time or read_time.
 */


var SnapshotVersion =
/** @class */
function () {
  function SnapshotVersion(timestamp) {
    this.timestamp = timestamp;
  } // TODO(b/34176344): Once we no longer need to use the old alpha protos,
  // delete this constructor and use a timestamp-backed version everywhere.


  SnapshotVersion.fromMicroseconds = function (value) {
    var seconds = Math.floor(value / 1e6);
    var nanos = value % 1e6 * 1e3;
    return new SnapshotVersion(new Timestamp(seconds, nanos));
  };

  SnapshotVersion.fromTimestamp = function (value) {
    return new SnapshotVersion(value);
  };

  SnapshotVersion.forDeletedDoc = function () {
    return SnapshotVersion.MIN;
  };

  SnapshotVersion.prototype.compareTo = function (other) {
    return this.timestamp._compareTo(other.timestamp);
  };

  SnapshotVersion.prototype.isEqual = function (other) {
    return this.timestamp.isEqual(other.timestamp);
  };
  /** Returns a number representation of the version for use in spec tests. */


  SnapshotVersion.prototype.toMicroseconds = function () {
    // Convert to microseconds.
    return this.timestamp.seconds * 1e6 + this.timestamp.nanoseconds / 1000;
  };

  SnapshotVersion.prototype.toString = function () {
    return 'SnapshotVersion(' + this.timestamp.toString() + ')';
  };

  SnapshotVersion.prototype.toTimestamp = function () {
    return this.timestamp;
  };

  SnapshotVersion.MIN = new SnapshotVersion(new Timestamp(0, 0));
  return SnapshotVersion;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// An immutable sorted map implementation, based on a Left-leaning Red-Black
// tree.


var SortedMap =
/** @class */
function () {
  function SortedMap(comparator, root) {
    this.comparator = comparator;
    this.root = root ? root : LLRBNode.EMPTY;
  } // Returns a copy of the map, with the specified key/value added or replaced.


  SortedMap.prototype.insert = function (key, value) {
    return new SortedMap(this.comparator, this.root.insert(key, value, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));
  }; // Returns a copy of the map, with the specified key removed.


  SortedMap.prototype.remove = function (key) {
    return new SortedMap(this.comparator, this.root.remove(key, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));
  }; // Returns the value of the node with the given key, or null.


  SortedMap.prototype.get = function (key) {
    var node = this.root;

    while (!node.isEmpty()) {
      var cmp = this.comparator(key, node.key);

      if (cmp === 0) {
        return node.value;
      } else if (cmp < 0) {
        node = node.left;
      } else if (cmp > 0) {
        node = node.right;
      }
    }

    return null;
  }; // Returns the index of the element in this sorted map, or -1 if it doesn't
  // exist.


  SortedMap.prototype.indexOf = function (key) {
    // Number of nodes that were pruned when descending right
    var prunedNodes = 0;
    var node = this.root;

    while (!node.isEmpty()) {
      var cmp = this.comparator(key, node.key);

      if (cmp === 0) {
        return prunedNodes + node.left.size;
      } else if (cmp < 0) {
        node = node.left;
      } else {
        // Count all nodes left of the node plus the node itself
        prunedNodes += node.left.size + 1;
        node = node.right;
      }
    } // Node not found


    return -1;
  };

  SortedMap.prototype.isEmpty = function () {
    return this.root.isEmpty();
  };

  Object.defineProperty(SortedMap.prototype, "size", {
    // Returns the total number of nodes in the map.
    get: function () {
      return this.root.size;
    },
    enumerable: true,
    configurable: true
  }); // Returns the minimum key in the map.

  SortedMap.prototype.minKey = function () {
    return this.root.minKey();
  }; // Returns the maximum key in the map.


  SortedMap.prototype.maxKey = function () {
    return this.root.maxKey();
  }; // Traverses the map in key order and calls the specified action function
  // for each key/value pair. If action returns true, traversal is aborted.
  // Returns the first truthy value returned by action, or the last falsey
  // value returned by action.


  SortedMap.prototype.inorderTraversal = function (action) {
    return this.root.inorderTraversal(action);
  };

  SortedMap.prototype.forEach = function (fn) {
    this.inorderTraversal(function (k, v) {
      fn(k, v);
      return false;
    });
  };

  SortedMap.prototype.toString = function () {
    var descriptions = [];
    this.inorderTraversal(function (k, v) {
      descriptions.push(k + ":" + v);
      return false;
    });
    return "{" + descriptions.join(', ') + "}";
  }; // Traverses the map in reverse key order and calls the specified action
  // function for each key/value pair. If action returns true, traversal is
  // aborted.
  // Returns the first truthy value returned by action, or the last falsey
  // value returned by action.


  SortedMap.prototype.reverseTraversal = function (action) {
    return this.root.reverseTraversal(action);
  }; // Returns an iterator over the SortedMap.


  SortedMap.prototype.getIterator = function () {
    return new SortedMapIterator(this.root, null, this.comparator, false);
  };

  SortedMap.prototype.getIteratorFrom = function (key) {
    return new SortedMapIterator(this.root, key, this.comparator, false);
  };

  SortedMap.prototype.getReverseIterator = function () {
    return new SortedMapIterator(this.root, null, this.comparator, true);
  };

  SortedMap.prototype.getReverseIteratorFrom = function (key) {
    return new SortedMapIterator(this.root, key, this.comparator, true);
  };

  return SortedMap;
}(); // end SortedMap
// An iterator over an LLRBNode.


var SortedMapIterator =
/** @class */
function () {
  function SortedMapIterator(node, startKey, comparator, isReverse) {
    this.isReverse = isReverse;
    this.nodeStack = [];
    var cmp = 1;

    while (!node.isEmpty()) {
      cmp = startKey ? comparator(node.key, startKey) : 1; // flip the comparison if we're going in reverse

      if (isReverse) cmp *= -1;

      if (cmp < 0) {
        // This node is less than our start key. ignore it
        if (this.isReverse) {
          node = node.left;
        } else {
          node = node.right;
        }
      } else if (cmp === 0) {
        // This node is exactly equal to our start key. Push it on the stack,
        // but stop iterating;
        this.nodeStack.push(node);
        break;
      } else {
        // This node is greater than our start key, add it to the stack and move
        // to the next one
        this.nodeStack.push(node);

        if (this.isReverse) {
          node = node.right;
        } else {
          node = node.left;
        }
      }
    }
  }

  SortedMapIterator.prototype.getNext = function () {
    assert(this.nodeStack.length > 0, 'getNext() called on iterator when hasNext() is false.');
    var node = this.nodeStack.pop();
    var result = {
      key: node.key,
      value: node.value
    };

    if (this.isReverse) {
      node = node.left;

      while (!node.isEmpty()) {
        this.nodeStack.push(node);
        node = node.right;
      }
    } else {
      node = node.right;

      while (!node.isEmpty()) {
        this.nodeStack.push(node);
        node = node.left;
      }
    }

    return result;
  };

  SortedMapIterator.prototype.hasNext = function () {
    return this.nodeStack.length > 0;
  };

  SortedMapIterator.prototype.peek = function () {
    if (this.nodeStack.length === 0) return null;
    var node = this.nodeStack[this.nodeStack.length - 1];
    return {
      key: node.key,
      value: node.value
    };
  };

  return SortedMapIterator;
}(); // end SortedMapIterator
// Represents a node in a Left-leaning Red-Black tree.


var LLRBNode =
/** @class */
function () {
  function LLRBNode(key, value, color, left, right) {
    this.key = key;
    this.value = value;
    this.color = color != null ? color : LLRBNode.RED;
    this.left = left != null ? left : LLRBNode.EMPTY;
    this.right = right != null ? right : LLRBNode.EMPTY;
    this.size = this.left.size + 1 + this.right.size;
  } // Returns a copy of the current node, optionally replacing pieces of it.


  LLRBNode.prototype.copy = function (key, value, color, left, right) {
    return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);
  };

  LLRBNode.prototype.isEmpty = function () {
    return false;
  }; // Traverses the tree in key order and calls the specified action function
  // for each node. If action returns true, traversal is aborted.
  // Returns the first truthy value returned by action, or the last falsey
  // value returned by action.


  LLRBNode.prototype.inorderTraversal = function (action) {
    return this.left.inorderTraversal(action) || action(this.key, this.value) || this.right.inorderTraversal(action);
  }; // Traverses the tree in reverse key order and calls the specified action
  // function for each node. If action returns true, traversal is aborted.
  // Returns the first truthy value returned by action, or the last falsey
  // value returned by action.


  LLRBNode.prototype.reverseTraversal = function (action) {
    return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);
  }; // Returns the minimum node in the tree.


  LLRBNode.prototype.min = function () {
    if (this.left.isEmpty()) {
      return this;
    } else {
      return this.left.min();
    }
  }; // Returns the maximum key in the tree.


  LLRBNode.prototype.minKey = function () {
    return this.min().key;
  }; // Returns the maximum key in the tree.


  LLRBNode.prototype.maxKey = function () {
    if (this.right.isEmpty()) {
      return this.key;
    } else {
      return this.right.maxKey();
    }
  }; // Returns new tree, with the key/value added.


  LLRBNode.prototype.insert = function (key, value, comparator) {
    var n = this;
    var cmp = comparator(key, n.key);

    if (cmp < 0) {
      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);
    } else if (cmp === 0) {
      n = n.copy(null, value, null, null, null);
    } else {
      n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));
    }

    return n.fixUp();
  };

  LLRBNode.prototype.removeMin = function () {
    if (this.left.isEmpty()) {
      return LLRBNode.EMPTY;
    }

    var n = this;
    if (!n.left.isRed() && !n.left.left.isRed()) n = n.moveRedLeft();
    n = n.copy(null, null, null, n.left.removeMin(), null);
    return n.fixUp();
  }; // Returns new tree, with the specified item removed.


  LLRBNode.prototype.remove = function (key, comparator) {
    var smallest;
    var n = this;

    if (comparator(key, n.key) < 0) {
      if (!n.left.isEmpty() && !n.left.isRed() && !n.left.left.isRed()) {
        n = n.moveRedLeft();
      }

      n = n.copy(null, null, null, n.left.remove(key, comparator), null);
    } else {
      if (n.left.isRed()) n = n.rotateRight();

      if (!n.right.isEmpty() && !n.right.isRed() && !n.right.left.isRed()) {
        n = n.moveRedRight();
      }

      if (comparator(key, n.key) === 0) {
        if (n.right.isEmpty()) {
          return LLRBNode.EMPTY;
        } else {
          smallest = n.right.min();
          n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin());
        }
      }

      n = n.copy(null, null, null, null, n.right.remove(key, comparator));
    }

    return n.fixUp();
  };

  LLRBNode.prototype.isRed = function () {
    return this.color;
  }; // Returns new tree after performing any needed rotations.


  LLRBNode.prototype.fixUp = function () {
    var n = this;
    if (n.right.isRed() && !n.left.isRed()) n = n.rotateLeft();
    if (n.left.isRed() && n.left.left.isRed()) n = n.rotateRight();
    if (n.left.isRed() && n.right.isRed()) n = n.colorFlip();
    return n;
  };

  LLRBNode.prototype.moveRedLeft = function () {
    var n = this.colorFlip();

    if (n.right.left.isRed()) {
      n = n.copy(null, null, null, null, n.right.rotateRight());
      n = n.rotateLeft();
      n = n.colorFlip();
    }

    return n;
  };

  LLRBNode.prototype.moveRedRight = function () {
    var n = this.colorFlip();

    if (n.left.left.isRed()) {
      n = n.rotateRight();
      n = n.colorFlip();
    }

    return n;
  };

  LLRBNode.prototype.rotateLeft = function () {
    var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);
    return this.right.copy(null, null, this.color, nl, null);
  };

  LLRBNode.prototype.rotateRight = function () {
    var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);
    return this.left.copy(null, null, this.color, null, nr);
  };

  LLRBNode.prototype.colorFlip = function () {
    var left = this.left.copy(null, null, !this.left.color, null, null);
    var right = this.right.copy(null, null, !this.right.color, null, null);
    return this.copy(null, null, !this.color, left, right);
  }; // For testing.


  LLRBNode.prototype.checkMaxDepth = function () {
    var blackDepth = this.check();

    if (Math.pow(2.0, blackDepth) <= this.size + 1) {
      return true;
    } else {
      return false;
    }
  }; // In a balanced RB tree, the black-depth (number of black nodes) from root to
  // leaves is equal on both sides.  This function verifies that or asserts.


  LLRBNode.prototype.check = function () {
    if (this.isRed() && this.left.isRed()) {
      throw fail('Red node has red child(' + this.key + ',' + this.value + ')');
    }

    if (this.right.isRed()) {
      throw fail('Right child of (' + this.key + ',' + this.value + ') is red');
    }

    var blackDepth = this.left.check();

    if (blackDepth !== this.right.check()) {
      throw fail('Black depths differ');
    } else {
      return blackDepth + (this.isRed() ? 0 : 1);
    }
  }; // tslint:disable-next-line:no-any Empty node is shared between all LLRB trees.


  LLRBNode.EMPTY = null;
  LLRBNode.RED = true;
  LLRBNode.BLACK = false;
  return LLRBNode;
}(); // end LLRBNode
// Represents an empty node (a leaf node in the Red-Black Tree).


var LLRBEmptyNode =
/** @class */
function () {
  function LLRBEmptyNode() {
    this.size = 0;
  } // Returns a copy of the current node.


  LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {
    return this;
  }; // Returns a copy of the tree, with the specified key/value added.


  LLRBEmptyNode.prototype.insert = function (key, value, comparator) {
    return new LLRBNode(key, value);
  }; // Returns a copy of the tree, with the specified key removed.


  LLRBEmptyNode.prototype.remove = function (key, comparator) {
    return this;
  };

  LLRBEmptyNode.prototype.isEmpty = function () {
    return true;
  };

  LLRBEmptyNode.prototype.inorderTraversal = function (action) {
    return false;
  };

  LLRBEmptyNode.prototype.reverseTraversal = function (action) {
    return false;
  };

  LLRBEmptyNode.prototype.minKey = function () {
    return null;
  };

  LLRBEmptyNode.prototype.maxKey = function () {
    return null;
  };

  LLRBEmptyNode.prototype.isRed = function () {
    return false;
  }; // For testing.


  LLRBEmptyNode.prototype.checkMaxDepth = function () {
    return true;
  };

  LLRBEmptyNode.prototype.check = function () {
    return 0;
  };

  return LLRBEmptyNode;
}(); // end LLRBEmptyNode


LLRBNode.EMPTY = new LLRBEmptyNode();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * SortedSet is an immutable (copy-on-write) collection that holds elements
 * in order specified by the provided comparator.
 *
 * NOTE: if provided comparator returns 0 for two elements, we consider them to
 * be equal!
 */

var SortedSet =
/** @class */
function () {
  function SortedSet(comparator) {
    this.comparator = comparator;
    this.data = new SortedMap(this.comparator);
  }
  /**
   * Creates a SortedSet from the keys of the map.
   * This is currently implemented as an O(n) copy.
   */


  SortedSet.fromMapKeys = function (map) {
    var keys = new SortedSet(map.comparator);
    map.forEach(function (key) {
      keys = keys.add(key);
    });
    return keys;
  };

  SortedSet.prototype.has = function (elem) {
    return this.data.get(elem) !== null;
  };

  SortedSet.prototype.first = function () {
    return this.data.minKey();
  };

  SortedSet.prototype.last = function () {
    return this.data.maxKey();
  };

  Object.defineProperty(SortedSet.prototype, "size", {
    get: function () {
      return this.data.size;
    },
    enumerable: true,
    configurable: true
  });

  SortedSet.prototype.indexOf = function (elem) {
    return this.data.indexOf(elem);
  };
  /** Iterates elements in order defined by "comparator" */


  SortedSet.prototype.forEach = function (cb) {
    this.data.inorderTraversal(function (k, v) {
      cb(k);
      return false;
    });
  };
  /** Iterates over `elem`s such that: range[0] <= elem < range[1]. */


  SortedSet.prototype.forEachInRange = function (range, cb) {
    var iter = this.data.getIteratorFrom(range[0]);

    while (iter.hasNext()) {
      var elem = iter.getNext();
      if (this.comparator(elem.key, range[1]) >= 0) return;
      cb(elem.key);
    }
  };
  /**
   * Iterates over `elem`s such that: start <= elem until false is returned.
   */


  SortedSet.prototype.forEachWhile = function (cb, start) {
    var iter;

    if (start !== undefined) {
      iter = this.data.getIteratorFrom(start);
    } else {
      iter = this.data.getIterator();
    }

    while (iter.hasNext()) {
      var elem = iter.getNext();
      var result = cb(elem.key);
      if (!result) return;
    }
  };
  /** Finds the least element greater than or equal to `elem`. */


  SortedSet.prototype.firstAfterOrEqual = function (elem) {
    var iter = this.data.getIteratorFrom(elem);
    return iter.hasNext() ? iter.getNext().key : null;
  };

  SortedSet.prototype.getIterator = function () {
    return new SortedSetIterator(this.data.getIterator());
  };

  SortedSet.prototype.getIteratorFrom = function (key) {
    return new SortedSetIterator(this.data.getIteratorFrom(key));
  };
  /** Inserts or updates an element */


  SortedSet.prototype.add = function (elem) {
    return this.copy(this.data.remove(elem).insert(elem, true));
  };
  /** Deletes an element */


  SortedSet.prototype.delete = function (elem) {
    if (!this.has(elem)) return this;
    return this.copy(this.data.remove(elem));
  };

  SortedSet.prototype.isEmpty = function () {
    return this.data.isEmpty();
  };

  SortedSet.prototype.unionWith = function (other) {
    var result = this;
    other.forEach(function (elem) {
      result = result.add(elem);
    });
    return result;
  };

  SortedSet.prototype.isEqual = function (other) {
    if (!(other instanceof SortedSet)) return false;
    if (this.size !== other.size) return false;
    var thisIt = this.data.getIterator();
    var otherIt = other.data.getIterator();

    while (thisIt.hasNext()) {
      var thisElem = thisIt.getNext().key;
      var otherElem = otherIt.getNext().key;
      if (this.comparator(thisElem, otherElem) !== 0) return false;
    }

    return true;
  };

  SortedSet.prototype.toArray = function () {
    var res = [];
    this.forEach(function (targetId) {
      res.push(targetId);
    });
    return res;
  };

  SortedSet.prototype.toString = function () {
    var result = [];
    this.forEach(function (elem) {
      return result.push(elem);
    });
    return 'SortedSet(' + result.toString() + ')';
  };

  SortedSet.prototype.copy = function (data) {
    var result = new SortedSet(this.comparator);
    result.data = data;
    return result;
  };

  return SortedSet;
}();

var SortedSetIterator =
/** @class */
function () {
  function SortedSetIterator(iter) {
    this.iter = iter;
  }

  SortedSetIterator.prototype.getNext = function () {
    return this.iter.getNext().key;
  };

  SortedSetIterator.prototype.hasNext = function () {
    return this.iter.hasNext();
  };

  return SortedSetIterator;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var EMPTY_MAYBE_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);

function maybeDocumentMap() {
  return EMPTY_MAYBE_DOCUMENT_MAP;
}

function nullableMaybeDocumentMap() {
  return maybeDocumentMap();
}

var EMPTY_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);

function documentMap() {
  return EMPTY_DOCUMENT_MAP;
}

var EMPTY_DOCUMENT_VERSION_MAP = new SortedMap(DocumentKey.comparator);

function documentVersionMap() {
  return EMPTY_DOCUMENT_VERSION_MAP;
}

var EMPTY_DOCUMENT_KEY_SET = new SortedSet(DocumentKey.comparator);

function documentKeySet() {
  var keys = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    keys[_i] = arguments[_i];
  }

  var set = EMPTY_DOCUMENT_KEY_SET;

  for (var _a = 0, keys_1 = keys; _a < keys_1.length; _a++) {
    var key = keys_1[_a];
    set = set.add(key);
  }

  return set;
}

var EMPTY_TARGET_ID_SET = new SortedSet(primitiveComparator);

function targetIdSet() {
  return EMPTY_TARGET_ID_SET;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var BATCHID_UNKNOWN = -1;
/**
 * A batch of mutations that will be sent as one unit to the backend.
 */

var MutationBatch =
/** @class */
function () {
  /**
   * @param batchId The unique ID of this mutation batch.
   * @param localWriteTime The original write time of this mutation.
   * @param baseMutations Mutations that are used to populate the base
   * values when this mutation is applied locally. This can be used to locally
   * overwrite values that are persisted in the remote document cache. Base
   * mutations are never sent to the backend.
   * @param mutations The user-provided mutations in this mutation batch.
   * User-provided mutations are applied both locally and remotely on the
   * backend.
   */
  function MutationBatch(batchId, localWriteTime, baseMutations, mutations) {
    this.batchId = batchId;
    this.localWriteTime = localWriteTime;
    this.baseMutations = baseMutations;
    this.mutations = mutations;
    assert(mutations.length > 0, 'Cannot create an empty mutation batch');
  }
  /**
   * Applies all the mutations in this MutationBatch to the specified document
   * to create a new remote document
   *
   * @param docKey The key of the document to apply mutations to.
   * @param maybeDoc The document to apply mutations to.
   * @param batchResult The result of applying the MutationBatch to the
   * backend.
   */


  MutationBatch.prototype.applyToRemoteDocument = function (docKey, maybeDoc, batchResult) {
    if (maybeDoc) {
      assert(maybeDoc.key.isEqual(docKey), "applyToRemoteDocument: key " + docKey + " should match maybeDoc key\n        " + maybeDoc.key);
    }

    var mutationResults = batchResult.mutationResults;
    assert(mutationResults.length === this.mutations.length, "Mismatch between mutations length\n      (" + this.mutations.length + ") and mutation results length\n      (" + mutationResults.length + ").");

    for (var i = 0; i < this.mutations.length; i++) {
      var mutation = this.mutations[i];

      if (mutation.key.isEqual(docKey)) {
        var mutationResult = mutationResults[i];
        maybeDoc = mutation.applyToRemoteDocument(maybeDoc, mutationResult);
      }
    }

    return maybeDoc;
  };
  /**
   * Computes the local view of a document given all the mutations in this
   * batch.
   *
   * @param docKey The key of the document to apply mutations to.
   * @param maybeDoc The document to apply mutations to.
   */


  MutationBatch.prototype.applyToLocalView = function (docKey, maybeDoc) {
    if (maybeDoc) {
      assert(maybeDoc.key.isEqual(docKey), "applyToLocalDocument: key " + docKey + " should match maybeDoc key\n        " + maybeDoc.key);
    } // First, apply the base state. This allows us to apply non-idempotent
    // transform against a consistent set of values.


    for (var _i = 0, _a = this.baseMutations; _i < _a.length; _i++) {
      var mutation = _a[_i];

      if (mutation.key.isEqual(docKey)) {
        maybeDoc = mutation.applyToLocalView(maybeDoc, maybeDoc, this.localWriteTime);
      }
    }

    var baseDoc = maybeDoc; // Second, apply all user-provided mutations.

    for (var _b = 0, _c = this.mutations; _b < _c.length; _b++) {
      var mutation = _c[_b];

      if (mutation.key.isEqual(docKey)) {
        maybeDoc = mutation.applyToLocalView(maybeDoc, baseDoc, this.localWriteTime);
      }
    }

    return maybeDoc;
  };
  /**
   * Computes the local view for all provided documents given the mutations in
   * this batch.
   */


  MutationBatch.prototype.applyToLocalDocumentSet = function (maybeDocs) {
    var _this = this; // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations
    // directly (as done in `applyToLocalView()`), we can reduce the complexity
    // to O(n).


    var mutatedDocuments = maybeDocs;
    this.mutations.forEach(function (m) {
      var mutatedDocument = _this.applyToLocalView(m.key, maybeDocs.get(m.key));

      if (mutatedDocument) {
        mutatedDocuments = mutatedDocuments.insert(m.key, mutatedDocument);
      }
    });
    return mutatedDocuments;
  };

  MutationBatch.prototype.keys = function () {
    return this.mutations.reduce(function (keys, m) {
      return keys.add(m.key);
    }, documentKeySet());
  };

  MutationBatch.prototype.isEqual = function (other) {
    return this.batchId === other.batchId && arrayEquals(this.mutations, other.mutations) && arrayEquals(this.baseMutations, other.baseMutations);
  };

  return MutationBatch;
}();
/** The result of applying a mutation batch to the backend. */


var MutationBatchResult =
/** @class */
function () {
  function MutationBatchResult(batch, commitVersion, mutationResults, streamToken,
  /**
   * A pre-computed mapping from each mutated document to the resulting
   * version.
   */
  docVersions) {
    this.batch = batch;
    this.commitVersion = commitVersion;
    this.mutationResults = mutationResults;
    this.streamToken = streamToken;
    this.docVersions = docVersions;
  }
  /**
   * Creates a new MutationBatchResult for the given batch and results. There
   * must be one result for each mutation in the batch. This static factory
   * caches a document=>version mapping (docVersions).
   */


  MutationBatchResult.from = function (batch, commitVersion, results, streamToken) {
    assert(batch.mutations.length === results.length, 'Mutations sent ' + batch.mutations.length + ' must equal results received ' + results.length);
    var versionMap = documentVersionMap();
    var mutations = batch.mutations;

    for (var i = 0; i < mutations.length; i++) {
      versionMap = versionMap.insert(mutations[i].key, results[i].version);
    }

    return new MutationBatchResult(batch, commitVersion, results, streamToken, versionMap);
  };

  return MutationBatchResult;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * PersistencePromise<> is essentially a re-implementation of Promise<> except
 * it has a .next() method instead of .then() and .next() and .catch() callbacks
 * are executed synchronously when a PersistencePromise resolves rather than
 * asynchronously (Promise<> implementations use setImmediate() or similar).
 *
 * This is necessary to interoperate with IndexedDB which will automatically
 * commit transactions if control is returned to the event loop without
 * synchronously initiating another operation on the transaction.
 *
 * NOTE: .then() and .catch() only allow a single consumer, unlike normal
 * Promises.
 */


var PersistencePromise =
/** @class */
function () {
  function PersistencePromise(callback) {
    var _this = this; // NOTE: next/catchCallback will always point to our own wrapper functions,
    // not the user's raw next() or catch() callbacks.
    // tslint:disable-next-line:no-any Accept any result type for the next call in the Promise chain.


    this.nextCallback = null; // tslint:disable-next-line:no-any Accept any result type for the error handler.

    this.catchCallback = null; // When the operation resolves, we'll set result or error and mark isDone.

    this.result = undefined;
    this.error = undefined;
    this.isDone = false; // Set to true when .then() or .catch() are called and prevents additional
    // chaining.

    this.callbackAttached = false;
    callback(function (value) {
      _this.isDone = true;
      _this.result = value;

      if (_this.nextCallback) {
        // value should be defined unless T is Void, but we can't express
        // that in the type system.
        _this.nextCallback(value);
      }
    }, function (error) {
      _this.isDone = true;
      _this.error = error;

      if (_this.catchCallback) {
        _this.catchCallback(error);
      }
    });
  }

  PersistencePromise.prototype.catch = function (fn) {
    return this.next(undefined, fn);
  };

  PersistencePromise.prototype.next = function (nextFn, catchFn) {
    var _this = this;

    if (this.callbackAttached) {
      fail('Called next() or catch() twice for PersistencePromise');
    }

    this.callbackAttached = true;

    if (this.isDone) {
      if (!this.error) {
        return this.wrapSuccess(nextFn, this.result);
      } else {
        return this.wrapFailure(catchFn, this.error);
      }
    } else {
      return new PersistencePromise(function (resolve, reject) {
        _this.nextCallback = function (value) {
          _this.wrapSuccess(nextFn, value).next(resolve, reject);
        };

        _this.catchCallback = function (error) {
          _this.wrapFailure(catchFn, error).next(resolve, reject);
        };
      });
    }
  };

  PersistencePromise.prototype.toPromise = function () {
    var _this = this;

    return new Promise(function (resolve, reject) {
      _this.next(resolve, reject);
    });
  };

  PersistencePromise.prototype.wrapUserFunction = function (fn) {
    try {
      var result = fn();

      if (result instanceof PersistencePromise) {
        return result;
      } else {
        return PersistencePromise.resolve(result);
      }
    } catch (e) {
      return PersistencePromise.reject(e);
    }
  };

  PersistencePromise.prototype.wrapSuccess = function (nextFn, value) {
    if (nextFn) {
      return this.wrapUserFunction(function () {
        return nextFn(value);
      });
    } else {
      // If there's no nextFn, then R must be the same as T but we
      // can't express that in the type system.
      // tslint:disable-next-line:no-any
      return PersistencePromise.resolve(value);
    }
  };

  PersistencePromise.prototype.wrapFailure = function (catchFn, error) {
    if (catchFn) {
      return this.wrapUserFunction(function () {
        return catchFn(error);
      });
    } else {
      return PersistencePromise.reject(error);
    }
  };

  PersistencePromise.resolve = function (result) {
    return new PersistencePromise(function (resolve, reject) {
      resolve(result);
    });
  };

  PersistencePromise.reject = function (error) {
    return new PersistencePromise(function (resolve, reject) {
      reject(error);
    });
  };

  PersistencePromise.waitFor = function ( // tslint:disable-next-line:no-any Accept all Promise types in waitFor().
  all) {
    return new PersistencePromise(function (resolve, reject) {
      var expectedCount = 0;
      var resolvedCount = 0;
      var done = false;
      all.forEach(function (element) {
        ++expectedCount;
        element.next(function () {
          ++resolvedCount;

          if (done && resolvedCount === expectedCount) {
            resolve();
          }
        }, function (err) {
          return reject(err);
        });
      });
      done = true;

      if (resolvedCount === expectedCount) {
        resolve();
      }
    });
  };
  /**
   * Given an array of predicate functions that asynchronously evaluate to a
   * boolean, implements a short-circuiting `or` between the results. Predicates
   * will be evaluated until one of them returns `true`, then stop. The final
   * result will be whether any of them returned `true`.
   */


  PersistencePromise.or = function (predicates) {
    var p = PersistencePromise.resolve(false);

    var _loop_1 = function (predicate) {
      p = p.next(function (isTrue) {
        if (isTrue) {
          return PersistencePromise.resolve(isTrue);
        } else {
          return predicate();
        }
      });
    };

    for (var _i = 0, predicates_1 = predicates; _i < predicates_1.length; _i++) {
      var predicate = predicates_1[_i];

      _loop_1(predicate);
    }

    return p;
  };
  /**
   * Given an iterable, call the given function on each element in the
   * collection and wait for all of the resulting concurrent PersistencePromises
   * to resolve.
   */


  PersistencePromise.forEach = function (collection, f) {
    var _this = this;

    var promises = [];
    collection.forEach(function (r, s) {
      promises.push(f.call(_this, r, s));
    });
    return this.waitFor(promises);
  };

  return PersistencePromise;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** A mutation queue for a specific user, backed by IndexedDB. */


var IndexedDbMutationQueue =
/** @class */
function () {
  function IndexedDbMutationQueue(
  /**
   * The normalized userId (e.g. null UID => "" userId) used to store /
   * retrieve mutations.
   */
  userId, serializer, indexManager, referenceDelegate) {
    this.userId = userId;
    this.serializer = serializer;
    this.indexManager = indexManager;
    this.referenceDelegate = referenceDelegate;
    /**
     * Caches the document keys for pending mutation batches. If the mutation
     * has been removed from IndexedDb, the cached value may continue to
     * be used to retrieve the batch's document keys. To remove a cached value
     * locally, `removeCachedMutationKeys()` should be invoked either directly
     * or through `removeMutationBatches()`.
     *
     * With multi-tab, when the primary client acknowledges or rejects a mutation,
     * this cache is used by secondary clients to invalidate the local
     * view of the documents that were previously affected by the mutation.
     */
    // PORTING NOTE: Multi-tab only.

    this.documentKeysByBatchId = {};
  }
  /**
   * Creates a new mutation queue for the given user.
   * @param user The user for which to create a mutation queue.
   * @param serializer The serializer to use when persisting to IndexedDb.
   */


  IndexedDbMutationQueue.forUser = function (user, serializer, indexManager, referenceDelegate) {
    // TODO(mcg): Figure out what constraints there are on userIDs
    // In particular, are there any reserved characters? are empty ids allowed?
    // For the moment store these together in the same mutations table assuming
    // that empty userIDs aren't allowed.
    assert(user.uid !== '', 'UserID must not be an empty string.');
    var userId = user.isAuthenticated() ? user.uid : '';
    return new IndexedDbMutationQueue(userId, serializer, indexManager, referenceDelegate);
  };

  IndexedDbMutationQueue.prototype.checkEmpty = function (transaction) {
    var empty = true;
    var range = IDBKeyRange.bound([this.userId, Number.NEGATIVE_INFINITY], [this.userId, Number.POSITIVE_INFINITY]);
    return mutationsStore(transaction).iterate({
      index: DbMutationBatch.userMutationsIndex,
      range: range
    }, function (key, value, control) {
      empty = false;
      control.done();
    }).next(function () {
      return empty;
    });
  };

  IndexedDbMutationQueue.prototype.acknowledgeBatch = function (transaction, batch, streamToken) {
    return this.getMutationQueueMetadata(transaction).next(function (metadata) {
      metadata.lastStreamToken = convertStreamToken(streamToken);
      return mutationQueuesStore(transaction).put(metadata);
    });
  };

  IndexedDbMutationQueue.prototype.getLastStreamToken = function (transaction) {
    return this.getMutationQueueMetadata(transaction).next(function (metadata) {
      return metadata.lastStreamToken;
    });
  };

  IndexedDbMutationQueue.prototype.setLastStreamToken = function (transaction, streamToken) {
    return this.getMutationQueueMetadata(transaction).next(function (metadata) {
      metadata.lastStreamToken = convertStreamToken(streamToken);
      return mutationQueuesStore(transaction).put(metadata);
    });
  };

  IndexedDbMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, baseMutations, mutations) {
    var _this = this;

    var documentStore = documentMutationsStore(transaction);
    var mutationStore = mutationsStore(transaction); // The IndexedDb implementation in Chrome (and Firefox) does not handle
    // compound indices that include auto-generated keys correctly. To ensure
    // that the index entry is added correctly in all browsers, we perform two
    // writes: The first write is used to retrieve the next auto-generated Batch
    // ID, and the second write populates the index and stores the actual
    // mutation batch.
    // See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972
    // tslint:disable-next-line:no-any We write an empty object to obtain key

    return mutationStore.add({}).next(function (batchId) {
      assert(typeof batchId === 'number', 'Auto-generated key is not a number');
      var batch = new MutationBatch(batchId, localWriteTime, baseMutations, mutations);

      var dbBatch = _this.serializer.toDbMutationBatch(_this.userId, batch);

      _this.documentKeysByBatchId[batchId] = batch.keys();
      var promises = [];

      for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {
        var mutation = mutations_1[_i];
        var indexKey = DbDocumentMutation.key(_this.userId, mutation.key.path, batchId);
        promises.push(mutationStore.put(dbBatch));
        promises.push(documentStore.put(indexKey, DbDocumentMutation.PLACEHOLDER));
        promises.push(_this.indexManager.addToCollectionParentIndex(transaction, mutation.key.path.popLast()));
      }

      return PersistencePromise.waitFor(promises).next(function () {
        return batch;
      });
    });
  };

  IndexedDbMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {
    var _this = this;

    return mutationsStore(transaction).get(batchId).next(function (dbBatch) {
      if (dbBatch) {
        assert(dbBatch.userId === _this.userId, "Unexpected user '" + dbBatch.userId + "' for mutation batch " + batchId);
        return _this.serializer.fromDbMutationBatch(dbBatch);
      }

      return null;
    });
  };

  IndexedDbMutationQueue.prototype.lookupMutationKeys = function (transaction, batchId) {
    var _this = this;

    if (this.documentKeysByBatchId[batchId]) {
      return PersistencePromise.resolve(this.documentKeysByBatchId[batchId]);
    } else {
      return this.lookupMutationBatch(transaction, batchId).next(function (batch) {
        if (batch) {
          var keys = batch.keys();
          _this.documentKeysByBatchId[batchId] = keys;
          return keys;
        } else {
          return null;
        }
      });
    }
  };

  IndexedDbMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {
    var _this = this;

    var nextBatchId = batchId + 1;
    var range = IDBKeyRange.lowerBound([this.userId, nextBatchId]);
    var foundBatch = null;
    return mutationsStore(transaction).iterate({
      index: DbMutationBatch.userMutationsIndex,
      range: range
    }, function (key, dbBatch, control) {
      if (dbBatch.userId === _this.userId) {
        assert(dbBatch.batchId >= nextBatchId, 'Should have found mutation after ' + nextBatchId);
        foundBatch = _this.serializer.fromDbMutationBatch(dbBatch);
      }

      control.done();
    }).next(function () {
      return foundBatch;
    });
  };

  IndexedDbMutationQueue.prototype.getAllMutationBatches = function (transaction) {
    var _this = this;

    var range = IDBKeyRange.bound([this.userId, BATCHID_UNKNOWN], [this.userId, Number.POSITIVE_INFINITY]);
    return mutationsStore(transaction).loadAll(DbMutationBatch.userMutationsIndex, range).next(function (dbBatches) {
      return dbBatches.map(function (dbBatch) {
        return _this.serializer.fromDbMutationBatch(dbBatch);
      });
    });
  };

  IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {
    var _this = this; // Scan the document-mutation index starting with a prefix starting with
    // the given documentKey.


    var indexPrefix = DbDocumentMutation.prefixForPath(this.userId, documentKey.path);
    var indexStart = IDBKeyRange.lowerBound(indexPrefix);
    var results = [];
    return documentMutationsStore(transaction).iterate({
      range: indexStart
    }, function (indexKey, _, control) {
      var userID = indexKey[0],
          encodedPath = indexKey[1],
          batchId = indexKey[2]; // Only consider rows matching exactly the specific key of
      // interest. Note that because we order by path first, and we
      // order terminators before path separators, we'll encounter all
      // the index rows for documentKey contiguously. In particular, all
      // the rows for documentKey will occur before any rows for
      // documents nested in a subcollection beneath documentKey so we
      // can stop as soon as we hit any such row.

      var path = decode(encodedPath);

      if (userID !== _this.userId || !documentKey.path.isEqual(path)) {
        control.done();
        return;
      } // Look up the mutation batch in the store.


      return mutationsStore(transaction).get(batchId).next(function (mutation) {
        if (!mutation) {
          throw fail('Dangling document-mutation reference found: ' + indexKey + ' which points to ' + batchId);
        }

        assert(mutation.userId === _this.userId, "Unexpected user '" + mutation.userId + "' for mutation batch " + batchId);
        results.push(_this.serializer.fromDbMutationBatch(mutation));
      });
    }).next(function () {
      return results;
    });
  };

  IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKeys = function (transaction, documentKeys) {
    var _this = this;

    var uniqueBatchIDs = new SortedSet(primitiveComparator);
    var promises = [];
    documentKeys.forEach(function (documentKey) {
      var indexStart = DbDocumentMutation.prefixForPath(_this.userId, documentKey.path);
      var range = IDBKeyRange.lowerBound(indexStart);
      var promise = documentMutationsStore(transaction).iterate({
        range: range
      }, function (indexKey, _, control) {
        var userID = indexKey[0],
            encodedPath = indexKey[1],
            batchID = indexKey[2]; // Only consider rows matching exactly the specific key of
        // interest. Note that because we order by path first, and we
        // order terminators before path separators, we'll encounter all
        // the index rows for documentKey contiguously. In particular, all
        // the rows for documentKey will occur before any rows for
        // documents nested in a subcollection beneath documentKey so we
        // can stop as soon as we hit any such row.

        var path = decode(encodedPath);

        if (userID !== _this.userId || !documentKey.path.isEqual(path)) {
          control.done();
          return;
        }

        uniqueBatchIDs = uniqueBatchIDs.add(batchID);
      });
      promises.push(promise);
    });
    return PersistencePromise.waitFor(promises).next(function () {
      return _this.lookupMutationBatches(transaction, uniqueBatchIDs);
    });
  };

  IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {
    var _this = this;

    assert(!query.isDocumentQuery(), "Document queries shouldn't go down this path");
    assert(!query.isCollectionGroupQuery(), 'CollectionGroup queries should be handled in LocalDocumentsView');
    var queryPath = query.path;
    var immediateChildrenLength = queryPath.length + 1; // TODO(mcg): Actually implement a single-collection query
    //
    // This is actually executing an ancestor query, traversing the whole
    // subtree below the collection which can be horrifically inefficient for
    // some structures. The right way to solve this is to implement the full
    // value index, but that's not in the cards in the near future so this is
    // the best we can do for the moment.
    //
    // Since we don't yet index the actual properties in the mutations, our
    // current approach is to just return all mutation batches that affect
    // documents in the collection being queried.

    var indexPrefix = DbDocumentMutation.prefixForPath(this.userId, queryPath);
    var indexStart = IDBKeyRange.lowerBound(indexPrefix); // Collect up unique batchIDs encountered during a scan of the index. Use a
    // SortedSet to accumulate batch IDs so they can be traversed in order in a
    // scan of the main table.

    var uniqueBatchIDs = new SortedSet(primitiveComparator);
    return documentMutationsStore(transaction).iterate({
      range: indexStart
    }, function (indexKey, _, control) {
      var userID = indexKey[0],
          encodedPath = indexKey[1],
          batchID = indexKey[2];
      var path = decode(encodedPath);

      if (userID !== _this.userId || !queryPath.isPrefixOf(path)) {
        control.done();
        return;
      } // Rows with document keys more than one segment longer than the
      // query path can't be matches. For example, a query on 'rooms'
      // can't match the document /rooms/abc/messages/xyx.
      // TODO(mcg): we'll need a different scanner when we implement
      // ancestor queries.


      if (path.length !== immediateChildrenLength) {
        return;
      }

      uniqueBatchIDs = uniqueBatchIDs.add(batchID);
    }).next(function () {
      return _this.lookupMutationBatches(transaction, uniqueBatchIDs);
    });
  };

  IndexedDbMutationQueue.prototype.lookupMutationBatches = function (transaction, batchIDs) {
    var _this = this;

    var results = [];
    var promises = []; // TODO(rockwood): Implement this using iterate.

    batchIDs.forEach(function (batchId) {
      promises.push(mutationsStore(transaction).get(batchId).next(function (mutation) {
        if (mutation === null) {
          throw fail('Dangling document-mutation reference found, ' + 'which points to ' + batchId);
        }

        assert(mutation.userId === _this.userId, "Unexpected user '" + mutation.userId + "' for mutation batch " + batchId);
        results.push(_this.serializer.fromDbMutationBatch(mutation));
      }));
    });
    return PersistencePromise.waitFor(promises).next(function () {
      return results;
    });
  };

  IndexedDbMutationQueue.prototype.removeMutationBatch = function (transaction, batch) {
    var _this = this;

    return removeMutationBatch(transaction.simpleDbTransaction, this.userId, batch).next(function (removedDocuments) {
      _this.removeCachedMutationKeys(batch.batchId);

      return PersistencePromise.forEach(removedDocuments, function (key) {
        return _this.referenceDelegate.removeMutationReference(transaction, key);
      });
    });
  };

  IndexedDbMutationQueue.prototype.removeCachedMutationKeys = function (batchId) {
    delete this.documentKeysByBatchId[batchId];
  };

  IndexedDbMutationQueue.prototype.performConsistencyCheck = function (txn) {
    var _this = this;

    return this.checkEmpty(txn).next(function (empty) {
      if (!empty) {
        return PersistencePromise.resolve();
      } // Verify that there are no entries in the documentMutations index if
      // the queue is empty.


      var startRange = IDBKeyRange.lowerBound(DbDocumentMutation.prefixForUser(_this.userId));
      var danglingMutationReferences = [];
      return documentMutationsStore(txn).iterate({
        range: startRange
      }, function (key, _, control) {
        var userID = key[0];

        if (userID !== _this.userId) {
          control.done();
          return;
        } else {
          var path = decode(key[1]);
          danglingMutationReferences.push(path);
        }
      }).next(function () {
        assert(danglingMutationReferences.length === 0, 'Document leak -- detected dangling mutation references when queue is empty. ' + 'Dangling keys: ' + danglingMutationReferences.map(function (p) {
          return p.canonicalString();
        }));
      });
    });
  };

  IndexedDbMutationQueue.prototype.containsKey = function (txn, key) {
    return mutationQueueContainsKey(txn, this.userId, key);
  }; // PORTING NOTE: Multi-tab only (state is held in memory in other clients).

  /** Returns the mutation queue's metadata from IndexedDb. */


  IndexedDbMutationQueue.prototype.getMutationQueueMetadata = function (transaction) {
    var _this = this;

    return mutationQueuesStore(transaction).get(this.userId).next(function (metadata) {
      return metadata || new DbMutationQueue(_this.userId, BATCHID_UNKNOWN,
      /*lastStreamToken=*/
      '');
    });
  };

  return IndexedDbMutationQueue;
}();
/**
 * @return true if the mutation queue for the given user contains a pending
 *         mutation for the given key.
 */


function mutationQueueContainsKey(txn, userId, key) {
  var indexKey = DbDocumentMutation.prefixForPath(userId, key.path);
  var encodedPath = indexKey[1];
  var startRange = IDBKeyRange.lowerBound(indexKey);
  var containsKey = false;
  return documentMutationsStore(txn).iterate({
    range: startRange,
    keysOnly: true
  }, function (key, value, control) {
    var userID = key[0],
        keyPath = key[1],

    /*batchID*/
    _ = key[2];

    if (userID === userId && keyPath === encodedPath) {
      containsKey = true;
    }

    control.done();
  }).next(function () {
    return containsKey;
  });
}
/** Returns true if any mutation queue contains the given document. */


function mutationQueuesContainKey(txn, docKey) {
  var found = false;
  return mutationQueuesStore(txn).iterateSerial(function (userId) {
    return mutationQueueContainsKey(txn, userId, docKey).next(function (containsKey) {
      if (containsKey) {
        found = true;
      }

      return PersistencePromise.resolve(!containsKey);
    });
  }).next(function () {
    return found;
  });
}
/**
 * Delete a mutation batch and the associated document mutations.
 * @return A PersistencePromise of the document mutations that were removed.
 */


function removeMutationBatch(txn, userId, batch) {
  var mutationStore = txn.store(DbMutationBatch.store);
  var indexTxn = txn.store(DbDocumentMutation.store);
  var promises = [];
  var range = IDBKeyRange.only(batch.batchId);
  var numDeleted = 0;
  var removePromise = mutationStore.iterate({
    range: range
  }, function (key, value, control) {
    numDeleted++;
    return control.delete();
  });
  promises.push(removePromise.next(function () {
    assert(numDeleted === 1, 'Dangling document-mutation reference found: Missing batch ' + batch.batchId);
  }));
  var removedDocuments = [];

  for (var _i = 0, _a = batch.mutations; _i < _a.length; _i++) {
    var mutation = _a[_i];
    var indexKey = DbDocumentMutation.key(userId, mutation.key.path, batch.batchId);
    promises.push(indexTxn.delete(indexKey));
    removedDocuments.push(mutation.key);
  }

  return PersistencePromise.waitFor(promises).next(function () {
    return removedDocuments;
  });
}

function convertStreamToken(token) {
  if (token instanceof Uint8Array) {
    // TODO(b/78771403): Convert tokens to strings during deserialization
    assert(Object({"NODE_ENV":"development","PUBLIC_URL":""}).USE_MOCK_PERSISTENCE === 'YES', 'Persisting non-string stream tokens is only supported with mock persistence.');
    return token.toString();
  } else {
    return token;
  }
}
/**
 * Helper to get a typed SimpleDbStore for the mutations object store.
 */


function mutationsStore(txn) {
  return IndexedDbPersistence.getStore(txn, DbMutationBatch.store);
}
/**
 * Helper to get a typed SimpleDbStore for the mutationQueues object store.
 */


function documentMutationsStore(txn) {
  return IndexedDbPersistence.getStore(txn, DbDocumentMutation.store);
}
/**
 * Helper to get a typed SimpleDbStore for the mutationQueues object store.
 */


function mutationQueuesStore(txn) {
  return IndexedDbPersistence.getStore(txn, DbMutationQueue.store);
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var RESERVED_BITS = 1;
var GeneratorIds;

(function (GeneratorIds) {
  GeneratorIds[GeneratorIds["QueryCache"] = 0] = "QueryCache";
  GeneratorIds[GeneratorIds["SyncEngine"] = 1] = "SyncEngine"; // The target IDs for limbo detection are odd (end in 1).
})(GeneratorIds || (GeneratorIds = {}));
/**
 * Generates monotonically increasing target IDs for sending targets to the
 * watch stream.
 *
 * The client constructs two generators, one for the query cache (via
 * forQueryCache()), and one for limbo documents (via forSyncEngine()). These
 * two generators produce non-overlapping IDs (by using even and odd IDs
 * respectively).
 *
 * By separating the target ID space, the query cache can generate target IDs
 * that persist across client restarts, while sync engine can independently
 * generate in-memory target IDs that are transient and can be reused after a
 * restart.
 */
// TODO(mrschmidt): Explore removing this class in favor of generating these IDs
// directly in SyncEngine and LocalStore.


var TargetIdGenerator =
/** @class */
function () {
  /**
   * Instantiates a new TargetIdGenerator. If a seed is provided, the generator
   * will use the seed value as the next target ID.
   */
  function TargetIdGenerator(generatorId, seed) {
    this.generatorId = generatorId;
    assert((generatorId & RESERVED_BITS) === generatorId, "Generator ID " + generatorId + " contains more than " + RESERVED_BITS + " reserved bits");
    this.seek(seed !== undefined ? seed : this.generatorId);
  }

  TargetIdGenerator.prototype.next = function () {
    var nextId = this.nextId;
    this.nextId += 1 << RESERVED_BITS;
    return nextId;
  };
  /**
   * Returns the ID that follows the given ID. Subsequent calls to `next()`
   * use the newly returned target ID as their base.
   */
  // PORTING NOTE: Multi-tab only.


  TargetIdGenerator.prototype.after = function (targetId) {
    this.seek(targetId + (1 << RESERVED_BITS));
    return this.next();
  };

  TargetIdGenerator.prototype.seek = function (targetId) {
    assert((targetId & RESERVED_BITS) === this.generatorId, 'Cannot supply target ID from different generator ID');
    this.nextId = targetId;
  };

  TargetIdGenerator.forQueryCache = function () {
    // We seed the query cache generator to return '2' as its first ID, as there
    // is no differentiation in the protocol layer between an unset number and
    // the number '0'. If we were to sent a target with target ID '0', the
    // backend would consider it unset and replace it with its own ID.
    var targetIdGenerator = new TargetIdGenerator(GeneratorIds.QueryCache, 2);
    return targetIdGenerator;
  };

  TargetIdGenerator.forSyncEngine = function () {
    // Sync engine assigns target IDs for limbo document detection.
    return new TargetIdGenerator(GeneratorIds.SyncEngine);
  };

  return TargetIdGenerator;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var LOG_TAG = 'SimpleDb';
/**
 * Provides a wrapper around IndexedDb with a simplified interface that uses
 * Promise-like return values to chain operations. Real promises cannot be used
 * since .then() continuations are executed asynchronously (e.g. via
 * .setImmediate), which would cause IndexedDB to end the transaction.
 * See PersistencePromise for more details.
 */

var SimpleDb =
/** @class */
function () {
  function SimpleDb(db) {
    this.db = db;
    var iOSVersion = SimpleDb.getIOSVersion(util.getUA()); // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the
    // bug we're checking for should exist in iOS >= 12.2 and < 13, but for
    // whatever reason it's much harder to hit after 12.2 so we only proactively
    // log on 12.2.

    if (iOSVersion === 12.2) {
      error('Firestore persistence suffers from a bug in iOS 12.2 ' + 'Safari that may cause your app to stop working. See ' + 'https://stackoverflow.com/q/56496296/110915 for details ' + 'and a potential workaround.');
    }
  }
  /**
   * Opens the specified database, creating or upgrading it if necessary.
   *
   * Note that `version` must not be a downgrade. IndexedDB does not support downgrading the schema
   * version. We currently do not support any way to do versioning outside of IndexedDB's versioning
   * mechanism, as only version-upgrade transactions are allowed to do things like create
   * objectstores.
   */


  SimpleDb.openOrCreate = function (name, version, schemaConverter) {
    assert(SimpleDb.isAvailable(), 'IndexedDB not supported in current environment.');
    debug(LOG_TAG, 'Opening database:', name);
    return new PersistencePromise(function (resolve, reject) {
      // TODO(mikelehen): Investigate browser compatibility.
      // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB
      // suggests IE9 and older WebKit browsers handle upgrade
      // differently. They expect setVersion, as described here:
      // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion
      var request = window.indexedDB.open(name, version);

      request.onsuccess = function (event) {
        var db = event.target.result;
        resolve(new SimpleDb(db));
      };

      request.onblocked = function () {
        reject(new FirestoreError(Code.FAILED_PRECONDITION, 'Cannot upgrade IndexedDB schema while another tab is open. ' + 'Close all tabs that access Firestore and reload this page to proceed.'));
      };

      request.onerror = function (event) {
        var error = event.target.error;

        if (error.name === 'VersionError') {
          reject(new FirestoreError(Code.FAILED_PRECONDITION, 'A newer version of the Firestore SDK was previously used and so the persisted ' + 'data is not compatible with the version of the SDK you are now using. The SDK ' + 'will operate with persistence disabled. If you need persistence, please ' + 're-upgrade to a newer version of the SDK or else clear the persisted IndexedDB ' + 'data for your app to start fresh.'));
        } else {
          reject(error);
        }
      };

      request.onupgradeneeded = function (event) {
        debug(LOG_TAG, 'Database "' + name + '" requires upgrade from version:', event.oldVersion);
        var db = event.target.result; // We are provided a version upgrade transaction from the request, so
        // we wrap that in a SimpleDbTransaction to allow use of our friendlier
        // API for schema migration operations.

        var txn = new SimpleDbTransaction(request.transaction);
        schemaConverter.createOrUpgrade(db, txn, event.oldVersion, SCHEMA_VERSION).next(function () {
          debug(LOG_TAG, 'Database upgrade to version ' + SCHEMA_VERSION + ' complete');
        });
      };
    }).toPromise();
  };
  /** Deletes the specified database. */


  SimpleDb.delete = function (name) {
    debug(LOG_TAG, 'Removing database:', name);
    return wrapRequest(window.indexedDB.deleteDatabase(name)).toPromise();
  };
  /** Returns true if IndexedDB is available in the current environment. */


  SimpleDb.isAvailable = function () {
    if (typeof window === 'undefined' || window.indexedDB == null) {
      return false;
    } // We extensively use indexed array values and compound keys,
    // which IE and Edge do not support. However, they still have indexedDB
    // defined on the window, so we need to check for them here and make sure
    // to return that persistence is not enabled for those browsers.
    // For tracking support of this feature, see here:
    // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/
    // If we are running in Node using the IndexedDBShim, `window` is defined,
    // but `window.navigator` is not. In this case, we support IndexedDB and
    // return `true`.


    if (window.navigator === undefined) {
      return Object({"NODE_ENV":"development","PUBLIC_URL":""}).USE_MOCK_PERSISTENCE === 'YES';
    } // Check the UA string to find out the browser.


    var ua = util.getUA(); // IE 10
    // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';
    // IE 11
    // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';
    // Edge
    // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,
    // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';
    // iOS Safari: Disable for users running iOS version < 10.

    var iOSVersion = SimpleDb.getIOSVersion(ua);
    var isUnsupportedIOS = 0 < iOSVersion && iOSVersion < 10; // Android browser: Disable for userse running version < 4.5.

    var androidVersion = SimpleDb.getAndroidVersion(ua);
    var isUnsupportedAndroid = 0 < androidVersion && androidVersion < 4.5;

    if (ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0 || isUnsupportedIOS || isUnsupportedAndroid) {
      return false;
    } else {
      return true;
    }
  };
  /** Helper to get a typed SimpleDbStore from a transaction. */


  SimpleDb.getStore = function (txn, store) {
    return txn.store(store);
  }; // visible for testing

  /** Parse User Agent to determine iOS version. Returns -1 if not found. */


  SimpleDb.getIOSVersion = function (ua) {
    var iOSVersionRegex = ua.match(/i(?:phone|pad|pod) os ([\d_]+)/i);
    var version = iOSVersionRegex ? iOSVersionRegex[1].split('_').slice(0, 2).join('.') : '-1';
    return Number(version);
  }; // visible for testing

  /** Parse User Agent to determine Android version. Returns -1 if not found. */


  SimpleDb.getAndroidVersion = function (ua) {
    var androidVersionRegex = ua.match(/Android ([\d.]+)/i);
    var version = androidVersionRegex ? androidVersionRegex[1].split('.').slice(0, 2).join('.') : '-1';
    return Number(version);
  };

  SimpleDb.prototype.setVersionChangeListener = function (versionChangeListener) {
    this.db.onversionchange = function (event) {
      return versionChangeListener(event);
    };
  };

  SimpleDb.prototype.runTransaction = function (mode, objectStores, transactionFn) {
    var transaction = SimpleDbTransaction.open(this.db, mode, objectStores);
    var transactionFnResult = transactionFn(transaction).catch(function (error) {
      // Abort the transaction if there was an error.
      transaction.abort(error); // We cannot actually recover, and calling `abort()` will cause the transaction's
      // completion promise to be rejected. This in turn means that we won't use
      // `transactionFnResult` below. We return a rejection here so that we don't add the
      // possibility of returning `void` to the type of `transactionFnResult`.

      return PersistencePromise.reject(error);
    }).toPromise(); // As noted above, errors are propagated by aborting the transaction. So
    // we swallow any error here to avoid the browser logging it as unhandled.

    transactionFnResult.catch(function () {}); // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
    // fire), but still return the original transactionFnResult back to the
    // caller.

    return transaction.completionPromise.then(function () {
      return transactionFnResult;
    });
  };

  SimpleDb.prototype.close = function () {
    this.db.close();
  };

  return SimpleDb;
}();
/**
 * A controller for iterating over a key range or index. It allows an iterate
 * callback to delete the currently-referenced object, or jump to a new key
 * within the key range or index.
 */


var IterationController =
/** @class */
function () {
  function IterationController(dbCursor) {
    this.dbCursor = dbCursor;
    this.shouldStop = false;
    this.nextKey = null;
  }

  Object.defineProperty(IterationController.prototype, "isDone", {
    get: function () {
      return this.shouldStop;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(IterationController.prototype, "skipToKey", {
    get: function () {
      return this.nextKey;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(IterationController.prototype, "cursor", {
    set: function (value) {
      this.dbCursor = value;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * This function can be called to stop iteration at any point.
   */

  IterationController.prototype.done = function () {
    this.shouldStop = true;
  };
  /**
   * This function can be called to skip to that next key, which could be
   * an index or a primary key.
   */


  IterationController.prototype.skip = function (key) {
    this.nextKey = key;
  };
  /**
   * Delete the current cursor value from the object store.
   *
   * NOTE: You CANNOT do this with a keysOnly query.
   */


  IterationController.prototype.delete = function () {
    return wrapRequest(this.dbCursor.delete());
  };

  return IterationController;
}();
/**
 * Wraps an IDBTransaction and exposes a store() method to get a handle to a
 * specific object store.
 */


var SimpleDbTransaction =
/** @class */
function () {
  function SimpleDbTransaction(transaction) {
    var _this = this;

    this.transaction = transaction;
    this.aborted = false;
    /**
     * A promise that resolves with the result of the IndexedDb transaction.
     */

    this.completionDeferred = new Deferred();

    this.transaction.oncomplete = function () {
      _this.completionDeferred.resolve();
    };

    this.transaction.onabort = function () {
      if (transaction.error) {
        _this.completionDeferred.reject(transaction.error);
      } else {
        _this.completionDeferred.resolve();
      }
    };

    this.transaction.onerror = function (event) {
      var error = event.target.error;
      checkForAndReportiOSError(error);

      _this.completionDeferred.reject(error);
    };
  }

  SimpleDbTransaction.open = function (db, mode, objectStoreNames) {
    return new SimpleDbTransaction(db.transaction(objectStoreNames, mode));
  };

  Object.defineProperty(SimpleDbTransaction.prototype, "completionPromise", {
    get: function () {
      return this.completionDeferred.promise;
    },
    enumerable: true,
    configurable: true
  });

  SimpleDbTransaction.prototype.abort = function (error) {
    if (error) {
      this.completionDeferred.reject(error);
    }

    if (!this.aborted) {
      debug(LOG_TAG, 'Aborting transaction:', error ? error.message : 'Client-initiated abort');
      this.aborted = true;
      this.transaction.abort();
    }
  };
  /**
   * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All
   * operations performed on the SimpleDbStore happen within the context of this
   * transaction and it cannot be used anymore once the transaction is
   * completed.
   *
   * Note that we can't actually enforce that the KeyType and ValueType are
   * correct, but they allow type safety through the rest of the consuming code.
   */


  SimpleDbTransaction.prototype.store = function (storeName) {
    var store = this.transaction.objectStore(storeName);
    assert(!!store, 'Object store not part of transaction: ' + storeName);
    return new SimpleDbStore(store);
  };

  return SimpleDbTransaction;
}();
/**
 * A wrapper around an IDBObjectStore providing an API that:
 *
 * 1) Has generic KeyType / ValueType parameters to provide strongly-typed
 * methods for acting against the object store.
 * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every
 * method return a PersistencePromise instead.
 * 3) Provides a higher-level API to avoid needing to do excessive wrapping of
 * intermediate IndexedDB types (IDBCursorWithValue, etc.)
 */


var SimpleDbStore =
/** @class */
function () {
  function SimpleDbStore(store) {
    this.store = store;
  }

  SimpleDbStore.prototype.put = function (keyOrValue, value) {
    var request;

    if (value !== undefined) {
      debug(LOG_TAG, 'PUT', this.store.name, keyOrValue, value);
      request = this.store.put(value, keyOrValue);
    } else {
      debug(LOG_TAG, 'PUT', this.store.name, '<auto-key>', keyOrValue);
      request = this.store.put(keyOrValue);
    }

    return wrapRequest(request);
  };
  /**
   * Adds a new value into an Object Store and returns the new key. Similar to
   * IndexedDb's `add()`, this method will fail on primary key collisions.
   *
   * @param value The object to write.
   * @return The key of the value to add.
   */


  SimpleDbStore.prototype.add = function (value) {
    debug(LOG_TAG, 'ADD', this.store.name, value, value);
    var request = this.store.add(value);
    return wrapRequest(request);
  };
  /**
   * Gets the object with the specified key from the specified store, or null
   * if no object exists with the specified key.
   *
   * @key The key of the object to get.
   * @return The object with the specified key or null if no object exists.
   */


  SimpleDbStore.prototype.get = function (key) {
    var _this = this;

    var request = this.store.get(key); // tslint:disable-next-line:no-any We're doing an unsafe cast to ValueType.

    return wrapRequest(request).next(function (result) {
      // Normalize nonexistence to null.
      if (result === undefined) {
        result = null;
      }

      debug(LOG_TAG, 'GET', _this.store.name, key, result);
      return result;
    });
  };

  SimpleDbStore.prototype.delete = function (key) {
    debug(LOG_TAG, 'DELETE', this.store.name, key);
    var request = this.store.delete(key);
    return wrapRequest(request);
  };
  /**
   * If we ever need more of the count variants, we can add overloads. For now,
   * all we need is to count everything in a store.
   *
   * Returns the number of rows in the store.
   */


  SimpleDbStore.prototype.count = function () {
    debug(LOG_TAG, 'COUNT', this.store.name);
    var request = this.store.count();
    return wrapRequest(request);
  };

  SimpleDbStore.prototype.loadAll = function (indexOrRange, range) {
    var cursor = this.cursor(this.options(indexOrRange, range));
    var results = [];
    return this.iterateCursor(cursor, function (key, value) {
      results.push(value);
    }).next(function () {
      return results;
    });
  };

  SimpleDbStore.prototype.deleteAll = function (indexOrRange, range) {
    debug(LOG_TAG, 'DELETE ALL', this.store.name);
    var options = this.options(indexOrRange, range);
    options.keysOnly = false;
    var cursor = this.cursor(options);
    return this.iterateCursor(cursor, function (key, value, control) {
      // NOTE: Calling delete() on a cursor is documented as more efficient than
      // calling delete() on an object store with a single key
      // (https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete),
      // however, this requires us *not* to use a keysOnly cursor
      // (https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete). We
      // may want to compare the performance of each method.
      return control.delete();
    });
  };

  SimpleDbStore.prototype.iterate = function (optionsOrCallback, callback) {
    var options;

    if (!callback) {
      options = {};
      callback = optionsOrCallback;
    } else {
      options = optionsOrCallback;
    }

    var cursor = this.cursor(options);
    return this.iterateCursor(cursor, callback);
  };
  /**
   * Iterates over a store, but waits for the given callback to complete for
   * each entry before iterating the next entry. This allows the callback to do
   * asynchronous work to determine if this iteration should continue.
   *
   * The provided callback should return `true` to continue iteration, and
   * `false` otherwise.
   */


  SimpleDbStore.prototype.iterateSerial = function (callback) {
    var cursorRequest = this.cursor({});
    return new PersistencePromise(function (resolve, reject) {
      cursorRequest.onerror = function (event) {
        var error = event.target.error;
        checkForAndReportiOSError(error);
        reject(error);
      };

      cursorRequest.onsuccess = function (event) {
        var cursor = event.target.result;

        if (!cursor) {
          resolve();
          return;
        }

        callback(cursor.primaryKey, cursor.value).next(function (shouldContinue) {
          if (shouldContinue) {
            cursor.continue();
          } else {
            resolve();
          }
        });
      };
    });
  };

  SimpleDbStore.prototype.iterateCursor = function (cursorRequest, fn) {
    var results = [];
    return new PersistencePromise(function (resolve, reject) {
      cursorRequest.onerror = function (event) {
        reject(event.target.error);
      };

      cursorRequest.onsuccess = function (event) {
        var cursor = event.target.result;

        if (!cursor) {
          resolve();
          return;
        }

        var controller = new IterationController(cursor);
        var userResult = fn(cursor.primaryKey, cursor.value, controller);

        if (userResult instanceof PersistencePromise) {
          var userPromise = userResult.catch(function (err) {
            controller.done();
            return PersistencePromise.reject(err);
          });
          results.push(userPromise);
        }

        if (controller.isDone) {
          resolve();
        } else if (controller.skipToKey === null) {
          cursor.continue();
        } else {
          cursor.continue(controller.skipToKey);
        }
      };
    }).next(function () {
      return PersistencePromise.waitFor(results);
    });
  };

  SimpleDbStore.prototype.options = function (indexOrRange, range) {
    var indexName = undefined;

    if (indexOrRange !== undefined) {
      if (typeof indexOrRange === 'string') {
        indexName = indexOrRange;
      } else {
        assert(range === undefined, '3rd argument must not be defined if 2nd is a range.');
        range = indexOrRange;
      }
    }

    return {
      index: indexName,
      range: range
    };
  };

  SimpleDbStore.prototype.cursor = function (options) {
    var direction = 'next';

    if (options.reverse) {
      direction = 'prev';
    }

    if (options.index) {
      var index = this.store.index(options.index);

      if (options.keysOnly) {
        return index.openKeyCursor(options.range, direction);
      } else {
        return index.openCursor(options.range, direction);
      }
    } else {
      return this.store.openCursor(options.range, direction);
    }
  };

  return SimpleDbStore;
}();
/**
 * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror
 * handlers to resolve / reject the PersistencePromise as appropriate.
 */


function wrapRequest(request) {
  return new PersistencePromise(function (resolve, reject) {
    request.onsuccess = function (event) {
      var result = event.target.result;
      resolve(result);
    };

    request.onerror = function (event) {
      var error = event.target.error;
      checkForAndReportiOSError(error);
      reject(error);
    };
  });
} // Guard so we only report the error once.


var reportedIOSError = false;

function checkForAndReportiOSError(error) {
  if (reportedIOSError) {
    return;
  }

  var iOSVersion = SimpleDb.getIOSVersion(util.getUA());

  if (iOSVersion >= 12.2 && iOSVersion < 13) {
    var IOS_ERROR_1 = 'An internal error was encountered in the Indexed Database server';

    if (error.message.indexOf(IOS_ERROR_1) >= 0) {
      reportedIOSError = true; // Throw a global exception outside of this promise chain, for the user to
      // potentially catch.

      setTimeout(function () {
        throw new FirestoreError('internal', "IOS_INDEXEDDB_BUG1: IndexedDb has thrown '" + IOS_ERROR_1 + "'. This is likely " + "due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 " + "for details and a potential workaround.");
      }, 0);
    }
  }
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var IndexedDbQueryCache =
/** @class */
function () {
  function IndexedDbQueryCache(referenceDelegate, serializer) {
    this.referenceDelegate = referenceDelegate;
    this.serializer = serializer; // PORTING NOTE: We don't cache global metadata for the query cache, since
    // some of it (in particular `highestTargetId`) can be modified by secondary
    // tabs. We could perhaps be more granular (and e.g. still cache
    // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go
    // to IndexedDb whenever we need to read metadata. We can revisit if it turns
    // out to have a meaningful performance impact.

    this.targetIdGenerator = TargetIdGenerator.forQueryCache();
  }

  IndexedDbQueryCache.prototype.allocateTargetId = function (transaction) {
    var _this = this;

    return this.retrieveMetadata(transaction).next(function (metadata) {
      metadata.highestTargetId = _this.targetIdGenerator.after(metadata.highestTargetId);
      return _this.saveMetadata(transaction, metadata).next(function () {
        return metadata.highestTargetId;
      });
    });
  };

  IndexedDbQueryCache.prototype.getLastRemoteSnapshotVersion = function (transaction) {
    return this.retrieveMetadata(transaction).next(function (metadata) {
      return SnapshotVersion.fromTimestamp(new Timestamp(metadata.lastRemoteSnapshotVersion.seconds, metadata.lastRemoteSnapshotVersion.nanoseconds));
    });
  };

  IndexedDbQueryCache.prototype.getHighestSequenceNumber = function (transaction) {
    return getHighestListenSequenceNumber(transaction.simpleDbTransaction);
  };

  IndexedDbQueryCache.prototype.setTargetsMetadata = function (transaction, highestListenSequenceNumber, lastRemoteSnapshotVersion) {
    var _this = this;

    return this.retrieveMetadata(transaction).next(function (metadata) {
      metadata.highestListenSequenceNumber = highestListenSequenceNumber;

      if (lastRemoteSnapshotVersion) {
        metadata.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion.toTimestamp();
      }

      if (highestListenSequenceNumber > metadata.highestListenSequenceNumber) {
        metadata.highestListenSequenceNumber = highestListenSequenceNumber;
      }

      return _this.saveMetadata(transaction, metadata);
    });
  };

  IndexedDbQueryCache.prototype.addQueryData = function (transaction, queryData) {
    var _this = this;

    return this.saveQueryData(transaction, queryData).next(function () {
      return _this.retrieveMetadata(transaction).next(function (metadata) {
        metadata.targetCount += 1;

        _this.updateMetadataFromQueryData(queryData, metadata);

        return _this.saveMetadata(transaction, metadata);
      });
    });
  };

  IndexedDbQueryCache.prototype.updateQueryData = function (transaction, queryData) {
    return this.saveQueryData(transaction, queryData);
  };

  IndexedDbQueryCache.prototype.removeQueryData = function (transaction, queryData) {
    var _this = this;

    return this.removeMatchingKeysForTargetId(transaction, queryData.targetId).next(function () {
      return targetsStore(transaction).delete(queryData.targetId);
    }).next(function () {
      return _this.retrieveMetadata(transaction);
    }).next(function (metadata) {
      assert(metadata.targetCount > 0, 'Removing from an empty query cache');
      metadata.targetCount -= 1;
      return _this.saveMetadata(transaction, metadata);
    });
  };
  /**
   * Drops any targets with sequence number less than or equal to the upper bound, excepting those
   * present in `activeTargetIds`. Document associations for the removed targets are also removed.
   * Returns the number of targets removed.
   */


  IndexedDbQueryCache.prototype.removeTargets = function (txn, upperBound, activeTargetIds) {
    var _this = this;

    var count = 0;
    var promises = [];
    return targetsStore(txn).iterate(function (key, value) {
      var queryData = _this.serializer.fromDbTarget(value);

      if (queryData.sequenceNumber <= upperBound && activeTargetIds[queryData.targetId] === undefined) {
        count++;
        promises.push(_this.removeQueryData(txn, queryData));
      }
    }).next(function () {
      return PersistencePromise.waitFor(promises);
    }).next(function () {
      return count;
    });
  };
  /**
   * Call provided function with each `QueryData` that we have cached.
   */


  IndexedDbQueryCache.prototype.forEachTarget = function (txn, f) {
    var _this = this;

    return targetsStore(txn).iterate(function (key, value) {
      var queryData = _this.serializer.fromDbTarget(value);

      f(queryData);
    });
  };

  IndexedDbQueryCache.prototype.retrieveMetadata = function (transaction) {
    return retrieveMetadata(transaction.simpleDbTransaction);
  };

  IndexedDbQueryCache.prototype.saveMetadata = function (transaction, metadata) {
    return globalTargetStore(transaction).put(DbTargetGlobal.key, metadata);
  };

  IndexedDbQueryCache.prototype.saveQueryData = function (transaction, queryData) {
    return targetsStore(transaction).put(this.serializer.toDbTarget(queryData));
  };
  /**
   * In-place updates the provided metadata to account for values in the given
   * QueryData. Saving is done separately. Returns true if there were any
   * changes to the metadata.
   */


  IndexedDbQueryCache.prototype.updateMetadataFromQueryData = function (queryData, metadata) {
    var updated = false;

    if (queryData.targetId > metadata.highestTargetId) {
      metadata.highestTargetId = queryData.targetId;
      updated = true;
    }

    if (queryData.sequenceNumber > metadata.highestListenSequenceNumber) {
      metadata.highestListenSequenceNumber = queryData.sequenceNumber;
      updated = true;
    }

    return updated;
  };

  IndexedDbQueryCache.prototype.getQueryCount = function (transaction) {
    return this.retrieveMetadata(transaction).next(function (metadata) {
      return metadata.targetCount;
    });
  };

  IndexedDbQueryCache.prototype.getQueryData = function (transaction, query) {
    var _this = this; // Iterating by the canonicalId may yield more than one result because
    // canonicalId values are not required to be unique per target. This query
    // depends on the queryTargets index to be efficient.


    var canonicalId = query.canonicalId();
    var range = IDBKeyRange.bound([canonicalId, Number.NEGATIVE_INFINITY], [canonicalId, Number.POSITIVE_INFINITY]);
    var result = null;
    return targetsStore(transaction).iterate({
      range: range,
      index: DbTarget.queryTargetsIndexName
    }, function (key, value, control) {
      var found = _this.serializer.fromDbTarget(value); // After finding a potential match, check that the query is
      // actually equal to the requested query.


      if (query.isEqual(found.query)) {
        result = found;
        control.done();
      }
    }).next(function () {
      return result;
    });
  };

  IndexedDbQueryCache.prototype.addMatchingKeys = function (txn, keys, targetId) {
    var _this = this; // PORTING NOTE: The reverse index (documentsTargets) is maintained by
    // IndexedDb.


    var promises = [];
    var store = documentTargetStore(txn);
    keys.forEach(function (key) {
      var path = encode(key.path);
      promises.push(store.put(new DbTargetDocument(targetId, path)));
      promises.push(_this.referenceDelegate.addReference(txn, key));
    });
    return PersistencePromise.waitFor(promises);
  };

  IndexedDbQueryCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {
    var _this = this; // PORTING NOTE: The reverse index (documentsTargets) is maintained by
    // IndexedDb.


    var store = documentTargetStore(txn);
    return PersistencePromise.forEach(keys, function (key) {
      var path = encode(key.path);
      return PersistencePromise.waitFor([store.delete([targetId, path]), _this.referenceDelegate.removeReference(txn, key)]);
    });
  };

  IndexedDbQueryCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {
    var store = documentTargetStore(txn);
    var range = IDBKeyRange.bound([targetId], [targetId + 1],
    /*lowerOpen=*/
    false,
    /*upperOpen=*/
    true);
    return store.delete(range);
  };

  IndexedDbQueryCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {
    var range = IDBKeyRange.bound([targetId], [targetId + 1],
    /*lowerOpen=*/
    false,
    /*upperOpen=*/
    true);
    var store = documentTargetStore(txn);
    var result = documentKeySet();
    return store.iterate({
      range: range,
      keysOnly: true
    }, function (key, _, control) {
      var path = decode(key[1]);
      var docKey = new DocumentKey(path);
      result = result.add(docKey);
    }).next(function () {
      return result;
    });
  };

  IndexedDbQueryCache.prototype.containsKey = function (txn, key) {
    var path = encode(key.path);
    var range = IDBKeyRange.bound([path], [immediateSuccessor(path)],
    /*lowerOpen=*/
    false,
    /*upperOpen=*/
    true);
    var count = 0;
    return documentTargetStore(txn).iterate({
      index: DbTargetDocument.documentTargetsIndex,
      keysOnly: true,
      range: range
    }, function (_a, _, control) {
      var targetId = _a[0],
          path = _a[1]; // Having a sentinel row for a document does not count as containing that document;
      // For the query cache, containing the document means the document is part of some
      // target.

      if (targetId !== 0) {
        count++;
        control.done();
      }
    }).next(function () {
      return count > 0;
    });
  };

  IndexedDbQueryCache.prototype.getQueryDataForTarget = function (transaction, targetId) {
    var _this = this;

    return targetsStore(transaction).get(targetId).next(function (found) {
      if (found) {
        return _this.serializer.fromDbTarget(found);
      } else {
        return null;
      }
    });
  };

  return IndexedDbQueryCache;
}();
/**
 * Helper to get a typed SimpleDbStore for the queries object store.
 */


function targetsStore(txn) {
  return IndexedDbPersistence.getStore(txn, DbTarget.store);
}
/**
 * Helper to get a typed SimpleDbStore for the target globals object store.
 */


function globalTargetStore(txn) {
  return IndexedDbPersistence.getStore(txn, DbTargetGlobal.store);
}

function retrieveMetadata(txn) {
  var globalStore = SimpleDb.getStore(txn, DbTargetGlobal.store);
  return globalStore.get(DbTargetGlobal.key).next(function (metadata) {
    assert(metadata !== null, 'Missing metadata row.');
    return metadata;
  });
}

function getHighestListenSequenceNumber(txn) {
  return retrieveMetadata(txn).next(function (targetGlobal) {
    return targetGlobal.highestListenSequenceNumber;
  });
}
/**
 * Helper to get a typed SimpleDbStore for the document target object store.
 */


function documentTargetStore(txn) {
  return IndexedDbPersistence.getStore(txn, DbTargetDocument.store);
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The result of a lookup for a given path may be an existing document or a
 * marker that this document does not exist at a given version.
 */


var MaybeDocument =
/** @class */
function () {
  function MaybeDocument(key, version) {
    this.key = key;
    this.version = version;
  }

  MaybeDocument.compareByKey = function (d1, d2) {
    return DocumentKey.comparator(d1.key, d2.key);
  };

  return MaybeDocument;
}();
/**
 * Represents a document in Firestore with a key, version, data and whether the
 * data has local mutations applied to it.
 */


var Document =
/** @class */
function (_super) {
  tslib_1.__extends(Document, _super);

  function Document(key, version, data, options,
  /**
   * Memoized serialized form of the document for optimization purposes (avoids repeated
   * serialization). Might be undefined.
   */
  proto) {
    var _this = _super.call(this, key, version) || this;

    _this.data = data;
    _this.proto = proto;
    _this.hasLocalMutations = !!options.hasLocalMutations;
    _this.hasCommittedMutations = !!options.hasCommittedMutations;
    return _this;
  }

  Document.prototype.field = function (path) {
    return this.data.field(path);
  };

  Document.prototype.fieldValue = function (path) {
    var field = this.field(path);
    return field ? field.value() : undefined;
  };

  Document.prototype.value = function () {
    return this.data.value();
  };

  Document.prototype.isEqual = function (other) {
    return other instanceof Document && this.key.isEqual(other.key) && this.version.isEqual(other.version) && this.data.isEqual(other.data) && this.hasLocalMutations === other.hasLocalMutations && this.hasCommittedMutations === other.hasCommittedMutations;
  };

  Document.prototype.toString = function () {
    return "Document(" + this.key + ", " + this.version + ", " + this.data.toString() + ", " + ("{hasLocalMutations: " + this.hasLocalMutations + "}), ") + ("{hasCommittedMutations: " + this.hasCommittedMutations + "})");
  };

  Object.defineProperty(Document.prototype, "hasPendingWrites", {
    get: function () {
      return this.hasLocalMutations || this.hasCommittedMutations;
    },
    enumerable: true,
    configurable: true
  });

  Document.compareByField = function (field, d1, d2) {
    var v1 = d1.field(field);
    var v2 = d2.field(field);

    if (v1 !== undefined && v2 !== undefined) {
      return v1.compareTo(v2);
    } else {
      return fail("Trying to compare documents on fields that don't exist");
    }
  };

  return Document;
}(MaybeDocument);
/**
 * A class representing a deleted document.
 * Version is set to 0 if we don't point to any specific time, otherwise it
 * denotes time we know it didn't exist at.
 */


var NoDocument =
/** @class */
function (_super) {
  tslib_1.__extends(NoDocument, _super);

  function NoDocument(key, version, options) {
    var _this = _super.call(this, key, version) || this;

    _this.hasCommittedMutations = !!(options && options.hasCommittedMutations);
    return _this;
  }

  NoDocument.prototype.toString = function () {
    return "NoDocument(" + this.key + ", " + this.version + ")";
  };

  Object.defineProperty(NoDocument.prototype, "hasPendingWrites", {
    get: function () {
      return this.hasCommittedMutations;
    },
    enumerable: true,
    configurable: true
  });

  NoDocument.prototype.isEqual = function (other) {
    return other instanceof NoDocument && other.hasCommittedMutations === this.hasCommittedMutations && other.version.isEqual(this.version) && other.key.isEqual(this.key);
  };

  return NoDocument;
}(MaybeDocument);
/**
 * A class representing an existing document whose data is unknown (e.g. a
 * document that was updated without a known base document).
 */


var UnknownDocument =
/** @class */
function (_super) {
  tslib_1.__extends(UnknownDocument, _super);

  function UnknownDocument(key, version) {
    return _super.call(this, key, version) || this;
  }

  UnknownDocument.prototype.toString = function () {
    return "UnknownDocument(" + this.key + ", " + this.version + ")";
  };

  Object.defineProperty(UnknownDocument.prototype, "hasPendingWrites", {
    get: function () {
      return true;
    },
    enumerable: true,
    configurable: true
  });

  UnknownDocument.prototype.isEqual = function (other) {
    return other instanceof UnknownDocument && other.version.isEqual(this.version) && other.key.isEqual(this.key);
  };

  return UnknownDocument;
}(MaybeDocument);
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A map implementation that uses objects as keys. Objects must implement the
 * Equatable interface and must be immutable. Entries in the map are stored
 * together with the key being produced from the mapKeyFn. This map
 * automatically handles collisions of keys.
 */


var ObjectMap =
/** @class */
function () {
  function ObjectMap(mapKeyFn) {
    this.mapKeyFn = mapKeyFn;
    /**
     * The inner map for a key -> value pair. Due to the possibility of
     * collisions we keep a list of entries that we do a linear search through
     * to find an actual match. Note that collisions should be rare, so we still
     * expect near constant time lookups in practice.
     */

    this.inner = {};
  }
  /** Get a value for this key, or undefined if it does not exist. */


  ObjectMap.prototype.get = function (key) {
    var id = this.mapKeyFn(key);
    var matches = this.inner[id];

    if (matches === undefined) {
      return undefined;
    }

    for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {
      var _a = matches_1[_i],
          otherKey = _a[0],
          value = _a[1];

      if (otherKey.isEqual(key)) {
        return value;
      }
    }

    return undefined;
  };

  ObjectMap.prototype.has = function (key) {
    return this.get(key) !== undefined;
  };
  /** Put this key and value in the map. */


  ObjectMap.prototype.set = function (key, value) {
    var id = this.mapKeyFn(key);
    var matches = this.inner[id];

    if (matches === undefined) {
      this.inner[id] = [[key, value]];
      return;
    }

    for (var i = 0; i < matches.length; i++) {
      if (matches[i][0].isEqual(key)) {
        matches[i] = [key, value];
        return;
      }
    }

    matches.push([key, value]);
  };
  /**
   * Remove this key from the map. Returns a boolean if anything was deleted.
   */


  ObjectMap.prototype.delete = function (key) {
    var id = this.mapKeyFn(key);
    var matches = this.inner[id];

    if (matches === undefined) {
      return false;
    }

    for (var i = 0; i < matches.length; i++) {
      if (matches[i][0].isEqual(key)) {
        if (matches.length === 1) {
          delete this.inner[id];
        } else {
          matches.splice(i, 1);
        }

        return true;
      }
    }

    return false;
  };

  ObjectMap.prototype.forEach = function (fn) {
    forEach(this.inner, function (_, entries) {
      for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
        var _a = entries_1[_i],
            k = _a[0],
            v = _a[1];
        fn(k, v);
      }
    });
  };

  ObjectMap.prototype.isEmpty = function () {
    return isEmpty(this.inner);
  };

  return ObjectMap;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An in-memory buffer of entries to be written to a RemoteDocumentCache.
 * It can be used to batch up a set of changes to be written to the cache, but
 * additionally supports reading entries back with the `getEntry()` method,
 * falling back to the underlying RemoteDocumentCache if no entry is
 * buffered.
 *
 * Entries added to the cache *must* be read first. This is to facilitate
 * calculating the size delta of the pending changes.
 *
 * PORTING NOTE: This class was implemented then removed from other platforms.
 * If byte-counting ends up being needed on the other platforms, consider
 * porting this class as part of that implementation work.
 */


var RemoteDocumentChangeBuffer =
/** @class */
function () {
  function RemoteDocumentChangeBuffer() {
    this.changes = maybeDocumentMap();
    this.documentSizes = new ObjectMap(function (key) {
      return key.toString();
    });
  }
  /** Buffers a `RemoteDocumentCache.addEntry()` call. */


  RemoteDocumentChangeBuffer.prototype.addEntry = function (maybeDocument) {
    var changes = this.assertChanges();
    this.changes = changes.insert(maybeDocument.key, maybeDocument);
  }; // NOTE: removeEntry() is intentionally omitted. If it needs to be added in
  // the future it must take byte counting into account.

  /**
   * Looks up an entry in the cache. The buffered changes will first be checked,
   * and if no buffered change applies, this will forward to
   * `RemoteDocumentCache.getEntry()`.
   *
   * @param transaction The transaction in which to perform any persistence
   *     operations.
   * @param documentKey The key of the entry to look up.
   * @return The cached Document or NoDocument entry, or null if we have nothing
   * cached.
   */


  RemoteDocumentChangeBuffer.prototype.getEntry = function (transaction, documentKey) {
    var _this = this;

    var changes = this.assertChanges();
    var bufferedEntry = changes.get(documentKey);

    if (bufferedEntry) {
      return PersistencePromise.resolve(bufferedEntry);
    } else {
      // Record the size of everything we load from the cache so we can compute a delta later.
      return this.getFromCache(transaction, documentKey).next(function (getResult) {
        if (getResult === null) {
          _this.documentSizes.set(documentKey, 0);

          return null;
        } else {
          _this.documentSizes.set(documentKey, getResult.size);

          return getResult.maybeDocument;
        }
      });
    }
  };
  /**
   * Looks up several entries in the cache, forwarding to
   * `RemoteDocumentCache.getEntry()`.
   *
   * @param transaction The transaction in which to perform any persistence
   *     operations.
   * @param documentKeys The keys of the entries to look up.
   * @return A map of cached `Document`s or `NoDocument`s, indexed by key. If an
   *     entry cannot be found, the corresponding key will be mapped to a null
   *     value.
   */


  RemoteDocumentChangeBuffer.prototype.getEntries = function (transaction, documentKeys) {
    var _this = this; // Record the size of everything we load from the cache so we can compute
    // a delta later.


    return this.getAllFromCache(transaction, documentKeys).next(function (_a) {
      var maybeDocuments = _a.maybeDocuments,
          sizeMap = _a.sizeMap; // Note: `getAllFromCache` returns two maps instead of a single map from
      // keys to `DocumentSizeEntry`s. This is to allow returning the
      // `NullableMaybeDocumentMap` directly, without a conversion.

      sizeMap.forEach(function (documentKey, size) {
        _this.documentSizes.set(documentKey, size);
      });
      return maybeDocuments;
    });
  };
  /**
   * Applies buffered changes to the underlying RemoteDocumentCache, using
   * the provided transaction.
   */


  RemoteDocumentChangeBuffer.prototype.apply = function (transaction) {
    var result = this.applyChanges(transaction); // We should not buffer any more changes.

    this.changes = null;
    return result;
  };
  /** Helper to assert this.changes is not null and return it. */


  RemoteDocumentChangeBuffer.prototype.assertChanges = function () {
    assert(this.changes !== null, 'Changes have already been applied.');
    return this.changes;
  };

  return RemoteDocumentChangeBuffer;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var REMOTE_DOCUMENT_CHANGE_MISSING_ERR_MSG = 'The remote document changelog no longer contains all changes for all ' + 'local query views. It may be necessary to rebuild these views.';

var IndexedDbRemoteDocumentCache =
/** @class */
function () {
  /**
   * @param {LocalSerializer} serializer The document serializer.
   * @param {IndexManager} indexManager The query indexes that need to be maintained.
   * @param keepDocumentChangeLog Whether to keep a document change log in
   * IndexedDb. This change log is required for Multi-Tab synchronization, but
   * not needed in clients that don't share access to their remote document
   * cache.
   */
  function IndexedDbRemoteDocumentCache(serializer, indexManager, keepDocumentChangeLog) {
    this.serializer = serializer;
    this.indexManager = indexManager;
    this.keepDocumentChangeLog = keepDocumentChangeLog;
    /** The last id read by `getNewDocumentChanges()`. */

    this._lastProcessedDocumentChangeId = 0;
  }

  Object.defineProperty(IndexedDbRemoteDocumentCache.prototype, "lastProcessedDocumentChangeId", {
    get: function () {
      return this._lastProcessedDocumentChangeId;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Starts up the remote document cache.
   *
   * Reads the ID of the last  document change from the documentChanges store.
   * Existing changes will not be returned as part of
   * `getNewDocumentChanges()`.
   */
  // PORTING NOTE: This is only used for multi-tab synchronization.

  IndexedDbRemoteDocumentCache.prototype.start = function (transaction) {
    var store = SimpleDb.getStore(transaction, DbRemoteDocumentChanges.store);
    return this.synchronizeLastDocumentChangeId(store);
  };
  /**
   * Adds the supplied entries to the cache. Adds the given size delta to the cached size.
   */


  IndexedDbRemoteDocumentCache.prototype.addEntries = function (transaction, entries, sizeDelta) {
    var promises = [];

    if (entries.length > 0) {
      var documentStore = remoteDocumentsStore(transaction);
      var changedKeys = documentKeySet();

      for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
        var _a = entries_1[_i],
            key = _a.key,
            doc = _a.doc;
        promises.push(documentStore.put(dbKey(key), doc));
        changedKeys = changedKeys.add(key);
        promises.push(this.indexManager.addToCollectionParentIndex(transaction, key.path.popLast()));
      }

      if (this.keepDocumentChangeLog) {
        promises.push(documentChangesStore(transaction).put({
          changes: this.serializer.toDbResourcePaths(changedKeys)
        }));
      }

      promises.push(this.updateSize(transaction, sizeDelta));
    }

    return PersistencePromise.waitFor(promises);
  };
  /**
   * Removes a document from the cache. Note that this method does *not* do any
   * size accounting. It is the responsibility of the caller to count the bytes removed
   * and issue a final updateSize() call after removing documents.
   *
   * @param documentKey The key of the document to remove
   * @return The size of the document that was removed.
   */


  IndexedDbRemoteDocumentCache.prototype.removeEntry = function (transaction, documentKey) {
    // We don't need to keep changelog for these removals since `removeEntry` is
    // only used for garbage collection.
    var store = remoteDocumentsStore(transaction);
    var key = dbKey(documentKey);
    return store.get(key).next(function (document) {
      if (document) {
        return store.delete(key).next(function () {
          return dbDocumentSize(document);
        });
      } else {
        return PersistencePromise.resolve(0);
      }
    });
  };

  IndexedDbRemoteDocumentCache.prototype.getEntry = function (transaction, documentKey) {
    var _this = this;

    return remoteDocumentsStore(transaction).get(dbKey(documentKey)).next(function (dbRemoteDoc) {
      return dbRemoteDoc ? _this.serializer.fromDbRemoteDocument(dbRemoteDoc) : null;
    });
  };
  /**
   * Looks up an entry in the cache.
   *
   * @param documentKey The key of the entry to look up.
   * @return The cached MaybeDocument entry and its size, or null if we have nothing cached.
   */


  IndexedDbRemoteDocumentCache.prototype.getSizedEntry = function (transaction, documentKey) {
    var _this = this;

    return remoteDocumentsStore(transaction).get(dbKey(documentKey)).next(function (dbRemoteDoc) {
      return dbRemoteDoc ? {
        maybeDocument: _this.serializer.fromDbRemoteDocument(dbRemoteDoc),
        size: dbDocumentSize(dbRemoteDoc)
      } : null;
    });
  };

  IndexedDbRemoteDocumentCache.prototype.getEntries = function (transaction, documentKeys) {
    var _this = this;

    var results = nullableMaybeDocumentMap();
    return this.forEachDbEntry(transaction, documentKeys, function (key, dbRemoteDoc) {
      if (dbRemoteDoc) {
        results = results.insert(key, _this.serializer.fromDbRemoteDocument(dbRemoteDoc));
      } else {
        results = results.insert(key, null);
      }
    }).next(function () {
      return results;
    });
  };
  /**
   * Looks up several entries in the cache.
   *
   * @param documentKeys The set of keys entries to look up.
   * @return A map of MaybeDocuments indexed by key (if a document cannot be
   *     found, the key will be mapped to null) and a map of sizes indexed by
   *     key (zero if the key cannot be found).
   */


  IndexedDbRemoteDocumentCache.prototype.getSizedEntries = function (transaction, documentKeys) {
    var _this = this;

    var results = nullableMaybeDocumentMap();
    var sizeMap = new SortedMap(DocumentKey.comparator);
    return this.forEachDbEntry(transaction, documentKeys, function (key, dbRemoteDoc) {
      if (dbRemoteDoc) {
        results = results.insert(key, _this.serializer.fromDbRemoteDocument(dbRemoteDoc));
        sizeMap = sizeMap.insert(key, dbDocumentSize(dbRemoteDoc));
      } else {
        results = results.insert(key, null);
        sizeMap = sizeMap.insert(key, 0);
      }
    }).next(function () {
      return {
        maybeDocuments: results,
        sizeMap: sizeMap
      };
    });
  };

  IndexedDbRemoteDocumentCache.prototype.forEachDbEntry = function (transaction, documentKeys, callback) {
    if (documentKeys.isEmpty()) {
      return PersistencePromise.resolve();
    }

    var range = IDBKeyRange.bound(documentKeys.first().path.toArray(), documentKeys.last().path.toArray());
    var keyIter = documentKeys.getIterator();
    var nextKey = keyIter.getNext();
    return remoteDocumentsStore(transaction).iterate({
      range: range
    }, function (potentialKeyRaw, dbRemoteDoc, control) {
      var potentialKey = DocumentKey.fromSegments(potentialKeyRaw); // Go through keys not found in cache.

      while (nextKey && DocumentKey.comparator(nextKey, potentialKey) < 0) {
        callback(nextKey, null);
        nextKey = keyIter.getNext();
      }

      if (nextKey && nextKey.isEqual(potentialKey)) {
        // Key found in cache.
        callback(nextKey, dbRemoteDoc);
        nextKey = keyIter.hasNext() ? keyIter.getNext() : null;
      } // Skip to the next key (if there is one).


      if (nextKey) {
        control.skip(nextKey.path.toArray());
      } else {
        control.done();
      }
    }).next(function () {
      // The rest of the keys are not in the cache. One case where `iterate`
      // above won't go through them is when the cache is empty.
      while (nextKey) {
        callback(nextKey, null);
        nextKey = keyIter.hasNext() ? keyIter.getNext() : null;
      }
    });
  };

  IndexedDbRemoteDocumentCache.prototype.getDocumentsMatchingQuery = function (transaction, query) {
    var _this = this;

    assert(!query.isCollectionGroupQuery(), 'CollectionGroup queries should be handled in LocalDocumentsView');
    var results = documentMap();
    var immediateChildrenPathLength = query.path.length + 1; // Documents are ordered by key, so we can use a prefix scan to narrow down
    // the documents we need to match the query against.

    var startKey = query.path.toArray();
    var range = IDBKeyRange.lowerBound(startKey);
    return remoteDocumentsStore(transaction).iterate({
      range: range
    }, function (key, dbRemoteDoc, control) {
      // The query is actually returning any path that starts with the query
      // path prefix which may include documents in subcollections. For
      // example, a query on 'rooms' will return rooms/abc/messages/xyx but we
      // shouldn't match it. Fix this by discarding rows with document keys
      // more than one segment longer than the query path.
      if (key.length !== immediateChildrenPathLength) {
        return;
      }

      var maybeDoc = _this.serializer.fromDbRemoteDocument(dbRemoteDoc);

      if (!query.path.isPrefixOf(maybeDoc.key.path)) {
        control.done();
      } else if (maybeDoc instanceof Document && query.matches(maybeDoc)) {
        results = results.insert(maybeDoc.key, maybeDoc);
      }
    }).next(function () {
      return results;
    });
  };

  IndexedDbRemoteDocumentCache.prototype.getNewDocumentChanges = function (transaction) {
    var _this = this;

    assert(this.keepDocumentChangeLog, 'Can only call getNewDocumentChanges() when document change log is enabled');
    var changedKeys = documentKeySet();
    var changedDocs = maybeDocumentMap();
    var range = IDBKeyRange.lowerBound(this._lastProcessedDocumentChangeId + 1);
    var firstIteration = true;
    var changesStore = documentChangesStore(transaction);
    return changesStore.iterate({
      range: range
    }, function (_, documentChange) {
      if (firstIteration) {
        firstIteration = false; // If our client was throttled for more than 30 minutes, another
        // client may have garbage collected the remote document changelog.

        if (_this._lastProcessedDocumentChangeId + 1 !== documentChange.id) {
          // Reset the `lastProcessedDocumentChangeId` to allow further
          // invocations to successfully return the changes after this
          // rejection.
          return _this.synchronizeLastDocumentChangeId(changesStore).next(function () {
            return PersistencePromise.reject(new FirestoreError(Code.DATA_LOSS, REMOTE_DOCUMENT_CHANGE_MISSING_ERR_MSG));
          });
        }
      }

      changedKeys = changedKeys.unionWith(_this.serializer.fromDbResourcePaths(documentChange.changes));
      _this._lastProcessedDocumentChangeId = documentChange.id;
    }).next(function () {
      var documentPromises = [];
      changedKeys.forEach(function (key) {
        documentPromises.push(_this.getEntry(transaction, key).next(function (maybeDocument) {
          var doc = maybeDocument || new NoDocument(key, SnapshotVersion.forDeletedDoc());
          changedDocs = changedDocs.insert(key, doc);
        }));
      });
      return PersistencePromise.waitFor(documentPromises);
    }).next(function () {
      return changedDocs;
    });
  };
  /**
   * Removes all changes in the remote document changelog through `changeId`
   * (inclusive).
   */


  IndexedDbRemoteDocumentCache.prototype.removeDocumentChangesThroughChangeId = function (transaction, changeId) {
    var range = IDBKeyRange.upperBound(changeId);
    return documentChangesStore(transaction).delete(range);
  };

  IndexedDbRemoteDocumentCache.prototype.synchronizeLastDocumentChangeId = function (documentChangesStore) {
    var _this = this; // If there are no existing changes, we set `lastProcessedDocumentChangeId`
    // to 0 since IndexedDb's auto-generated keys start at 1.


    this._lastProcessedDocumentChangeId = 0;
    return documentChangesStore.iterate({
      keysOnly: true,
      reverse: true
    }, function (key, value, control) {
      _this._lastProcessedDocumentChangeId = key;
      control.done();
    });
  };

  IndexedDbRemoteDocumentCache.prototype.newChangeBuffer = function () {
    return new IndexedDbRemoteDocumentChangeBuffer(this);
  };

  IndexedDbRemoteDocumentCache.prototype.getSize = function (txn) {
    return this.getMetadata(txn).next(function (metadata) {
      return metadata.byteSize;
    });
  };

  IndexedDbRemoteDocumentCache.prototype.getMetadata = function (txn) {
    return documentGlobalStore(txn).get(DbRemoteDocumentGlobal.key).next(function (metadata) {
      assert(!!metadata, 'Missing document cache metadata');
      return metadata;
    });
  };

  IndexedDbRemoteDocumentCache.prototype.setMetadata = function (txn, metadata) {
    return documentGlobalStore(txn).put(DbRemoteDocumentGlobal.key, metadata);
  };
  /**
   * Adds the given delta to the cached current size. Callers to removeEntry *must* call this
   * afterwards to update the size of the cache.
   *
   * @param sizeDelta
   */


  IndexedDbRemoteDocumentCache.prototype.updateSize = function (txn, sizeDelta) {
    var _this = this;

    return this.getMetadata(txn).next(function (metadata) {
      metadata.byteSize += sizeDelta;
      return _this.setMetadata(txn, metadata);
    });
  };

  return IndexedDbRemoteDocumentCache;
}();

function documentGlobalStore(txn) {
  return IndexedDbPersistence.getStore(txn, DbRemoteDocumentGlobal.store);
}
/**
 * Handles the details of adding and updating documents in the IndexedDbRemoteDocumentCache
 */


var IndexedDbRemoteDocumentChangeBuffer =
/** @class */
function (_super) {
  tslib_1.__extends(IndexedDbRemoteDocumentChangeBuffer, _super);

  function IndexedDbRemoteDocumentChangeBuffer(documentCache) {
    var _this = _super.call(this) || this;

    _this.documentCache = documentCache;
    return _this;
  }

  IndexedDbRemoteDocumentChangeBuffer.prototype.applyChanges = function (transaction) {
    var _this = this;

    var changes = this.assertChanges();
    var delta = 0;
    var toApply = [];
    changes.forEach(function (key, maybeDocument) {
      var doc = _this.documentCache.serializer.toDbRemoteDocument(maybeDocument);

      var previousSize = _this.documentSizes.get(key); // NOTE: if we ever decide we need to support doing writes without
      // reading first, this assert will need to change to do the read automatically.


      assert(previousSize !== undefined, "Attempting to change document " + key.toString() + " without having read it first");
      var size = dbDocumentSize(doc);
      delta += size - previousSize;
      toApply.push({
        key: key,
        doc: doc
      });
    });
    return this.documentCache.addEntries(transaction, toApply, delta);
  };

  IndexedDbRemoteDocumentChangeBuffer.prototype.getFromCache = function (transaction, documentKey) {
    return this.documentCache.getSizedEntry(transaction, documentKey);
  };

  IndexedDbRemoteDocumentChangeBuffer.prototype.getAllFromCache = function (transaction, documentKeys) {
    return this.documentCache.getSizedEntries(transaction, documentKeys);
  };

  return IndexedDbRemoteDocumentChangeBuffer;
}(RemoteDocumentChangeBuffer);

function isDocumentChangeMissingError(err) {
  return err.code === Code.DATA_LOSS && err.message === REMOTE_DOCUMENT_CHANGE_MISSING_ERR_MSG;
}
/**
 * Helper to get a typed SimpleDbStore for the remoteDocuments object store.
 */


function remoteDocumentsStore(txn) {
  return IndexedDbPersistence.getStore(txn, DbRemoteDocument.store);
}
/**
 * Helper to get a typed SimpleDbStore for the remoteDocumentChanges object
 * store.
 */


function documentChangesStore(txn) {
  return IndexedDbPersistence.getStore(txn, DbRemoteDocumentChanges.store);
}

function dbKey(docKey) {
  return docKey.path.toArray();
}
/**
 * Retrusn an approximate size for the given document.
 */


function dbDocumentSize(doc) {
  var value;

  if (doc.document) {
    value = doc.document;
  } else if (doc.unknownDocument) {
    value = doc.unknownDocument;
  } else if (doc.noDocument) {
    value = doc.noDocument;
  } else {
    throw fail('Unknown remote document type');
  }

  return JSON.stringify(value).length;
}
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An in-memory implementation of IndexManager.
 */


var MemoryIndexManager =
/** @class */
function () {
  function MemoryIndexManager() {
    this.collectionParentIndex = new MemoryCollectionParentIndex();
  }

  MemoryIndexManager.prototype.addToCollectionParentIndex = function (transaction, collectionPath) {
    this.collectionParentIndex.add(collectionPath);
    return PersistencePromise.resolve();
  };

  MemoryIndexManager.prototype.getCollectionParents = function (transaction, collectionId) {
    return PersistencePromise.resolve(this.collectionParentIndex.getEntries(collectionId));
  };

  return MemoryIndexManager;
}();
/**
 * Internal implementation of the collection-parent index exposed by MemoryIndexManager.
 * Also used for in-memory caching by IndexedDbIndexManager and initial index population
 * in indexeddb_schema.ts
 */


var MemoryCollectionParentIndex =
/** @class */
function () {
  function MemoryCollectionParentIndex() {
    this.index = {};
  } // Returns false if the entry already existed.


  MemoryCollectionParentIndex.prototype.add = function (collectionPath) {
    assert(collectionPath.length % 2 === 1, 'Expected a collection path.');
    var collectionId = collectionPath.lastSegment();
    var parentPath = collectionPath.popLast();
    var existingParents = this.index[collectionId] || new SortedSet(ResourcePath.comparator);
    var added = !existingParents.has(parentPath);
    this.index[collectionId] = existingParents.add(parentPath);
    return added;
  };

  MemoryCollectionParentIndex.prototype.getEntries = function (collectionId) {
    var parentPaths = this.index[collectionId] || new SortedSet(ResourcePath.comparator);
    return parentPaths.toArray();
  };

  return MemoryCollectionParentIndex;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Schema Version for the Web client:
 * 1. Initial version including Mutation Queue, Query Cache, and Remote Document
 *    Cache
 * 2. Used to ensure a targetGlobal object exists and add targetCount to it. No
 *    longer required because migration 3 unconditionally clears it.
 * 3. Dropped and re-created Query Cache to deal with cache corruption related
 *    to limbo resolution. Addresses
 *    https://github.com/firebase/firebase-ios-sdk/issues/1548
 * 4. Multi-Tab Support.
 * 5. Removal of held write acks.
 * 6. Create document global for tracking document cache size.
 * 7. Ensure every cached document has a sentinel row with a sequence number.
 * 8. Add collection-parent index for Collection Group queries.
 */


var SCHEMA_VERSION = 8;
/** Performs database creation and schema upgrades. */

var SchemaConverter =
/** @class */
function () {
  function SchemaConverter(serializer) {
    this.serializer = serializer;
  }
  /**
   * Performs database creation and schema upgrades.
   *
   * Note that in production, this method is only ever used to upgrade the schema
   * to SCHEMA_VERSION. Different values of toVersion are only used for testing
   * and local feature development.
   */


  SchemaConverter.prototype.createOrUpgrade = function (db, txn, fromVersion, toVersion) {
    var _this = this;

    assert(fromVersion < toVersion && fromVersion >= 0 && toVersion <= SCHEMA_VERSION, "Unexpected schema upgrade from v" + fromVersion + " to v{toVersion}.");

    if (fromVersion < 1 && toVersion >= 1) {
      createPrimaryClientStore(db);
      createMutationQueue(db);
      createQueryCache(db);
      createRemoteDocumentCache(db);
    } // Migration 2 to populate the targetGlobal object no longer needed since
    // migration 3 unconditionally clears it.


    var p = PersistencePromise.resolve();

    if (fromVersion < 3 && toVersion >= 3) {
      // Brand new clients don't need to drop and recreate--only clients that
      // potentially have corrupt data.
      if (fromVersion !== 0) {
        dropQueryCache(db);
        createQueryCache(db);
      }

      p = p.next(function () {
        return writeEmptyTargetGlobalEntry(txn);
      });
    }

    if (fromVersion < 4 && toVersion >= 4) {
      if (fromVersion !== 0) {
        // Schema version 3 uses auto-generated keys to generate globally unique
        // mutation batch IDs (this was previously ensured internally by the
        // client). To migrate to the new schema, we have to read all mutations
        // and write them back out. We preserve the existing batch IDs to guarantee
        // consistency with other object stores. Any further mutation batch IDs will
        // be auto-generated.
        p = p.next(function () {
          return upgradeMutationBatchSchemaAndMigrateData(db, txn);
        });
      }

      p = p.next(function () {
        createClientMetadataStore(db);
        createRemoteDocumentChangesStore(db);
      });
    }

    if (fromVersion < 5 && toVersion >= 5) {
      p = p.next(function () {
        return _this.removeAcknowledgedMutations(txn);
      });
    }

    if (fromVersion < 6 && toVersion >= 6) {
      p = p.next(function () {
        createDocumentGlobalStore(db);
        return _this.addDocumentGlobal(txn);
      });
    }

    if (fromVersion < 7 && toVersion >= 7) {
      p = p.next(function () {
        return _this.ensureSequenceNumbers(txn);
      });
    }

    if (fromVersion < 8 && toVersion >= 8) {
      p = p.next(function () {
        return _this.createCollectionParentIndex(db, txn);
      });
    }

    return p;
  };

  SchemaConverter.prototype.addDocumentGlobal = function (txn) {
    var byteCount = 0;
    return txn.store(DbRemoteDocument.store).iterate(function (_, doc) {
      byteCount += dbDocumentSize(doc);
    }).next(function () {
      var metadata = new DbRemoteDocumentGlobal(byteCount);
      return txn.store(DbRemoteDocumentGlobal.store).put(DbRemoteDocumentGlobal.key, metadata);
    });
  };

  SchemaConverter.prototype.removeAcknowledgedMutations = function (txn) {
    var _this = this;

    var queuesStore = txn.store(DbMutationQueue.store);
    var mutationsStore = txn.store(DbMutationBatch.store);
    return queuesStore.loadAll().next(function (queues) {
      return PersistencePromise.forEach(queues, function (queue) {
        var range = IDBKeyRange.bound([queue.userId, BATCHID_UNKNOWN], [queue.userId, queue.lastAcknowledgedBatchId]);
        return mutationsStore.loadAll(DbMutationBatch.userMutationsIndex, range).next(function (dbBatches) {
          return PersistencePromise.forEach(dbBatches, function (dbBatch) {
            assert(dbBatch.userId === queue.userId, "Cannot process batch " + dbBatch.batchId + " from unexpected user");

            var batch = _this.serializer.fromDbMutationBatch(dbBatch);

            return removeMutationBatch(txn, queue.userId, batch).next(function () {});
          });
        });
      });
    });
  };
  /**
   * Ensures that every document in the remote document cache has a corresponding sentinel row
   * with a sequence number. Missing rows are given the most recently used sequence number.
   */


  SchemaConverter.prototype.ensureSequenceNumbers = function (txn) {
    var documentTargetStore = txn.store(DbTargetDocument.store);
    var documentsStore = txn.store(DbRemoteDocument.store);
    return getHighestListenSequenceNumber(txn).next(function (currentSequenceNumber) {
      var writeSentinelKey = function (path) {
        return documentTargetStore.put(new DbTargetDocument(0, encode(path), currentSequenceNumber));
      };

      var promises = [];
      return documentsStore.iterate(function (key, doc) {
        var path = new ResourcePath(key);
        var docSentinelKey = sentinelKey(path);
        promises.push(documentTargetStore.get(docSentinelKey).next(function (maybeSentinel) {
          if (!maybeSentinel) {
            return writeSentinelKey(path);
          } else {
            return PersistencePromise.resolve();
          }
        }));
      }).next(function () {
        return PersistencePromise.waitFor(promises);
      });
    });
  };

  SchemaConverter.prototype.createCollectionParentIndex = function (db, txn) {
    // Create the index.
    db.createObjectStore(DbCollectionParent.store, {
      keyPath: DbCollectionParent.keyPath
    });
    var collectionParentsStore = txn.store(DbCollectionParent.store); // Helper to add an index entry iff we haven't already written it.

    var cache = new MemoryCollectionParentIndex();

    var addEntry = function (collectionPath) {
      if (cache.add(collectionPath)) {
        var collectionId = collectionPath.lastSegment();
        var parentPath = collectionPath.popLast();
        return collectionParentsStore.put({
          collectionId: collectionId,
          parent: encode(parentPath)
        });
      }
    }; // Index existing remote documents.


    return txn.store(DbRemoteDocument.store).iterate({
      keysOnly: true
    }, function (pathSegments, _) {
      var path = new ResourcePath(pathSegments);
      return addEntry(path.popLast());
    }).next(function () {
      // Index existing mutations.
      return txn.store(DbDocumentMutation.store).iterate({
        keysOnly: true
      }, function (_a, _) {
        var userID = _a[0],
            encodedPath = _a[1],
            batchId = _a[2];
        var path = decode(encodedPath);
        return addEntry(path.popLast());
      });
    });
  };

  return SchemaConverter;
}();

function sentinelKey(path) {
  return [0, encode(path)];
}
/**
 * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.
 */


var DbTimestamp =
/** @class */
function () {
  function DbTimestamp(seconds, nanoseconds) {
    this.seconds = seconds;
    this.nanoseconds = nanoseconds;
  }

  return DbTimestamp;
}();
/**
 * A singleton object to be stored in the 'owner' store in IndexedDb.
 *
 * A given database can have a single primary tab assigned at a given time. That
 * tab must validate that it is still holding the primary lease before every
 * operation that requires locked access. The primary tab should regularly
 * write an updated timestamp to this lease to prevent other tabs from
 * "stealing" the primary lease
 */


var DbPrimaryClient =
/** @class */
function () {
  function DbPrimaryClient(ownerId,
  /** Whether to allow shared access from multiple tabs. */
  allowTabSynchronization, leaseTimestampMs) {
    this.ownerId = ownerId;
    this.allowTabSynchronization = allowTabSynchronization;
    this.leaseTimestampMs = leaseTimestampMs;
  }
  /**
   * Name of the IndexedDb object store.
   *
   * Note that the name 'owner' is chosen to ensure backwards compatibility with
   * older clients that only supported single locked access to the persistence
   * layer.
   */


  DbPrimaryClient.store = 'owner';
  /**
   * The key string used for the single object that exists in the
   * DbPrimaryClient store.
   */

  DbPrimaryClient.key = 'owner';
  return DbPrimaryClient;
}();

function createPrimaryClientStore(db) {
  db.createObjectStore(DbPrimaryClient.store);
}
/**
 * An object to be stored in the 'mutationQueues' store in IndexedDb.
 *
 * Each user gets a single queue of MutationBatches to apply to the server.
 * DbMutationQueue tracks the metadata about the queue.
 */


var DbMutationQueue =
/** @class */
function () {
  function DbMutationQueue(
  /**
   * The normalized user ID to which this queue belongs.
   */
  userId,
  /**
   * An identifier for the highest numbered batch that has been acknowledged
   * by the server. All MutationBatches in this queue with batchIds less
   * than or equal to this value are considered to have been acknowledged by
   * the server.
   *
   * NOTE: this is deprecated and no longer used by the code.
   */
  lastAcknowledgedBatchId,
  /**
   * A stream token that was previously sent by the server.
   *
   * See StreamingWriteRequest in datastore.proto for more details about
   * usage.
   *
   * After sending this token, earlier tokens may not be used anymore so
   * only a single stream token is retained.
   */
  lastStreamToken) {
    this.userId = userId;
    this.lastAcknowledgedBatchId = lastAcknowledgedBatchId;
    this.lastStreamToken = lastStreamToken;
  }
  /** Name of the IndexedDb object store.  */


  DbMutationQueue.store = 'mutationQueues';
  /** Keys are automatically assigned via the userId property. */

  DbMutationQueue.keyPath = 'userId';
  return DbMutationQueue;
}();
/**
 * An object to be stored in the 'mutations' store in IndexedDb.
 *
 * Represents a batch of user-level mutations intended to be sent to the server
 * in a single write. Each user-level batch gets a separate DbMutationBatch
 * with a new batchId.
 */


var DbMutationBatch =
/** @class */
function () {
  function DbMutationBatch(
  /**
   * The normalized user ID to which this batch belongs.
   */
  userId,
  /**
   * An identifier for this batch, allocated using an auto-generated key.
   */
  batchId,
  /**
   * The local write time of the batch, stored as milliseconds since the
   * epoch.
   */
  localWriteTimeMs,
  /**
   * A list of "mutations" that represent a partial base state from when this
   * write batch was initially created. During local application of the write
   * batch, these baseMutations are applied prior to the real writes in order
   * to override certain document fields from the remote document cache. This
   * is necessary in the case of non-idempotent writes (e.g. `increment()`
   * transforms) to make sure that the local view of the modified documents
   * doesn't flicker if the remote document cache receives the result of the
   * non-idempotent write before the write is removed from the queue.
   *
   * These mutations are never sent to the backend.
   */
  baseMutations,
  /**
   * A list of mutations to apply. All mutations will be applied atomically.
   *
   * Mutations are serialized via JsonProtoSerializer.toMutation().
   */
  mutations) {
    this.userId = userId;
    this.batchId = batchId;
    this.localWriteTimeMs = localWriteTimeMs;
    this.baseMutations = baseMutations;
    this.mutations = mutations;
  }
  /** Name of the IndexedDb object store.  */


  DbMutationBatch.store = 'mutations';
  /** Keys are automatically assigned via the userId, batchId properties. */

  DbMutationBatch.keyPath = 'batchId';
  /** The index name for lookup of mutations by user. */

  DbMutationBatch.userMutationsIndex = 'userMutationsIndex';
  /** The user mutations index is keyed by [userId, batchId] pairs. */

  DbMutationBatch.userMutationsKeyPath = ['userId', 'batchId'];
  return DbMutationBatch;
}();

function createMutationQueue(db) {
  db.createObjectStore(DbMutationQueue.store, {
    keyPath: DbMutationQueue.keyPath
  });
  var mutationBatchesStore = db.createObjectStore(DbMutationBatch.store, {
    keyPath: DbMutationBatch.keyPath,
    autoIncrement: true
  });
  mutationBatchesStore.createIndex(DbMutationBatch.userMutationsIndex, DbMutationBatch.userMutationsKeyPath, {
    unique: true
  });
  db.createObjectStore(DbDocumentMutation.store);
}
/**
 * Upgrade function to migrate the 'mutations' store from V1 to V3. Loads
 * and rewrites all data.
 */


function upgradeMutationBatchSchemaAndMigrateData(db, txn) {
  var v1MutationsStore = txn.store(DbMutationBatch.store);
  return v1MutationsStore.loadAll().next(function (existingMutations) {
    db.deleteObjectStore(DbMutationBatch.store);
    var mutationsStore = db.createObjectStore(DbMutationBatch.store, {
      keyPath: DbMutationBatch.keyPath,
      autoIncrement: true
    });
    mutationsStore.createIndex(DbMutationBatch.userMutationsIndex, DbMutationBatch.userMutationsKeyPath, {
      unique: true
    });
    var v3MutationsStore = txn.store(DbMutationBatch.store);
    var writeAll = existingMutations.map(function (mutation) {
      return v3MutationsStore.put(mutation);
    });
    return PersistencePromise.waitFor(writeAll);
  });
}
/**
 * An object to be stored in the 'documentMutations' store in IndexedDb.
 *
 * A manually maintained index of all the mutation batches that affect a given
 * document key. The rows in this table are references based on the contents of
 * DbMutationBatch.mutations.
 */


var DbDocumentMutation =
/** @class */
function () {
  function DbDocumentMutation() {}
  /**
   * Creates a [userId] key for use in the DbDocumentMutations index to iterate
   * over all of a user's document mutations.
   */


  DbDocumentMutation.prefixForUser = function (userId) {
    return [userId];
  };
  /**
   * Creates a [userId, encodedPath] key for use in the DbDocumentMutations
   * index to iterate over all at document mutations for a given path or lower.
   */


  DbDocumentMutation.prefixForPath = function (userId, path) {
    return [userId, encode(path)];
  };
  /**
   * Creates a full index key of [userId, encodedPath, batchId] for inserting
   * and deleting into the DbDocumentMutations index.
   */


  DbDocumentMutation.key = function (userId, path, batchId) {
    return [userId, encode(path), batchId];
  };

  DbDocumentMutation.store = 'documentMutations';
  /**
   * Because we store all the useful information for this store in the key,
   * there is no useful information to store as the value. The raw (unencoded)
   * path cannot be stored because IndexedDb doesn't store prototype
   * information.
   */

  DbDocumentMutation.PLACEHOLDER = new DbDocumentMutation();
  return DbDocumentMutation;
}();

function createRemoteDocumentCache(db) {
  db.createObjectStore(DbRemoteDocument.store);
}
/**
 * Represents the known absence of a document at a particular version.
 * Stored in IndexedDb as part of a DbRemoteDocument object.
 */


var DbNoDocument =
/** @class */
function () {
  function DbNoDocument(path, readTime) {
    this.path = path;
    this.readTime = readTime;
  }

  return DbNoDocument;
}();
/**
 * Represents a document that is known to exist but whose data is unknown.
 * Stored in IndexedDb as part of a DbRemoteDocument object.
 */


var DbUnknownDocument =
/** @class */
function () {
  function DbUnknownDocument(path, version) {
    this.path = path;
    this.version = version;
  }

  return DbUnknownDocument;
}();
/**
 * An object to be stored in the 'remoteDocuments' store in IndexedDb.
 * It represents either:
 *
 * - A complete document.
 * - A "no document" representing a document that is known not to exist (at
 * some version).
 * - An "unknown document" representing a document that is known to exist (at
 * some version) but whose contents are unknown.
 *
 * Note: This is the persisted equivalent of a MaybeDocument and could perhaps
 * be made more general if necessary.
 */


var DbRemoteDocument =
/** @class */
function () {
  function DbRemoteDocument(
  /**
   * Set to an instance of DbUnknownDocument if the data for a document is
   * not known, but it is known that a document exists at the specified
   * version (e.g. it had a successful update applied to it)
   */
  unknownDocument,
  /**
   * Set to an instance of a DbNoDocument if it is known that no document
   * exists.
   */
  noDocument,
  /**
   * Set to an instance of a Document if there's a cached version of the
   * document.
   */
  document,
  /**
   * Documents that were written to the remote document store based on
   * a write acknowledgment are marked with `hasCommittedMutations`. These
   * documents are potentially inconsistent with the backend's copy and use
   * the write's commit version as their document version.
   */
  hasCommittedMutations) {
    this.unknownDocument = unknownDocument;
    this.noDocument = noDocument;
    this.document = document;
    this.hasCommittedMutations = hasCommittedMutations;
  }

  DbRemoteDocument.store = 'remoteDocuments';
  return DbRemoteDocument;
}();
/**
 * Contains a single entry that has metadata about the remote document cache.
 */


var DbRemoteDocumentGlobal =
/** @class */
function () {
  /**
   * @param byteSize Approximately the total size in bytes of all the documents in the document
   * cache.
   */
  function DbRemoteDocumentGlobal(byteSize) {
    this.byteSize = byteSize;
  }

  DbRemoteDocumentGlobal.store = 'remoteDocumentGlobal';
  DbRemoteDocumentGlobal.key = 'remoteDocumentGlobalKey';
  return DbRemoteDocumentGlobal;
}();

function createDocumentGlobalStore(db) {
  db.createObjectStore(DbRemoteDocumentGlobal.store);
}
/**
 * An object to be stored in the 'targets' store in IndexedDb.
 *
 * This is based on and should be kept in sync with the proto used in the iOS
 * client.
 *
 * Each query the client listens to against the server is tracked on disk so
 * that the query can be efficiently resumed on restart.
 */


var DbTarget =
/** @class */
function () {
  function DbTarget(
  /**
   * An auto-generated sequential numeric identifier for the query.
   *
   * Queries are stored using their canonicalId as the key, but these
   * canonicalIds can be quite long so we additionally assign a unique
   * queryId which can be used by referenced data structures (e.g.
   * indexes) to minimize the on-disk cost.
   */
  targetId,
  /**
   * The canonical string representing this query. This is not unique.
   */
  canonicalId,
  /**
   * The last readTime received from the Watch Service for this query.
   *
   * This is the same value as TargetChange.read_time in the protos.
   */
  readTime,
  /**
   * An opaque, server-assigned token that allows watching a query to be
   * resumed after disconnecting without retransmitting all the data
   * that matches the query. The resume token essentially identifies a
   * point in time from which the server should resume sending results.
   *
   * This is related to the snapshotVersion in that the resumeToken
   * effectively also encodes that value, but the resumeToken is opaque
   * and sometimes encodes additional information.
   *
   * A consequence of this is that the resumeToken should be used when
   * asking the server to reason about where this client is in the watch
   * stream, but the client should use the snapshotVersion for its own
   * purposes.
   *
   * This is the same value as TargetChange.resume_token in the protos.
   */
  resumeToken,
  /**
   * A sequence number representing the last time this query was
   * listened to, used for garbage collection purposes.
   *
   * Conventionally this would be a timestamp value, but device-local
   * clocks are unreliable and they must be able to create new listens
   * even while disconnected. Instead this should be a monotonically
   * increasing number that's incremented on each listen call.
   *
   * This is different from the queryId since the queryId is an
   * immutable identifier assigned to the Query on first use while
   * lastListenSequenceNumber is updated every time the query is
   * listened to.
   */
  lastListenSequenceNumber,
  /**
   * The query for this target.
   *
   * Because canonical ids are not unique we must store the actual query. We
   * use the proto to have an object we can persist without having to
   * duplicate translation logic to and from a `Query` object.
   */
  query) {
    this.targetId = targetId;
    this.canonicalId = canonicalId;
    this.readTime = readTime;
    this.resumeToken = resumeToken;
    this.lastListenSequenceNumber = lastListenSequenceNumber;
    this.query = query;
  }

  DbTarget.store = 'targets';
  /** Keys are automatically assigned via the targetId property. */

  DbTarget.keyPath = 'targetId';
  /** The name of the queryTargets index. */

  DbTarget.queryTargetsIndexName = 'queryTargetsIndex';
  /**
   * The index of all canonicalIds to the targets that they match. This is not
   * a unique mapping because canonicalId does not promise a unique name for all
   * possible queries, so we append the targetId to make the mapping unique.
   */

  DbTarget.queryTargetsKeyPath = ['canonicalId', 'targetId'];
  return DbTarget;
}();
/**
 * An object representing an association between a target and a document, or a
 * sentinel row marking the last sequence number at which a document was used.
 * Each document cached must have a corresponding sentinel row before lru
 * garbage collection is enabled.
 *
 * The target associations and sentinel rows are co-located so that orphaned
 * documents and their sequence numbers can be identified efficiently via a scan
 * of this store.
 */


var DbTargetDocument =
/** @class */
function () {
  function DbTargetDocument(
  /**
   * The targetId identifying a target or 0 for a sentinel row.
   */
  targetId,
  /**
   * The path to the document, as encoded in the key.
   */
  path,
  /**
   * If this is a sentinel row, this should be the sequence number of the last
   * time the document specified by `path` was used. Otherwise, it should be
   * `undefined`.
   */
  sequenceNumber) {
    this.targetId = targetId;
    this.path = path;
    this.sequenceNumber = sequenceNumber;
    assert(targetId === 0 === (sequenceNumber !== undefined), // tslint:disable-next-line:max-line-length
    'A target-document row must either have targetId == 0 and a defined sequence number, or a non-zero targetId and no sequence number');
  }
  /** Name of the IndexedDb object store.  */


  DbTargetDocument.store = 'targetDocuments';
  /** Keys are automatically assigned via the targetId, path properties. */

  DbTargetDocument.keyPath = ['targetId', 'path'];
  /** The index name for the reverse index. */

  DbTargetDocument.documentTargetsIndex = 'documentTargetsIndex';
  /** We also need to create the reverse index for these properties. */

  DbTargetDocument.documentTargetsKeyPath = ['path', 'targetId'];
  return DbTargetDocument;
}();
/**
 * A record of global state tracked across all Targets, tracked separately
 * to avoid the need for extra indexes.
 *
 * This should be kept in-sync with the proto used in the iOS client.
 */


var DbTargetGlobal =
/** @class */
function () {
  function DbTargetGlobal(
  /**
   * The highest numbered target id across all targets.
   *
   * See DbTarget.targetId.
   */
  highestTargetId,
  /**
   * The highest numbered lastListenSequenceNumber across all targets.
   *
   * See DbTarget.lastListenSequenceNumber.
   */
  highestListenSequenceNumber,
  /**
   * A global snapshot version representing the last consistent snapshot we
   * received from the backend. This is monotonically increasing and any
   * snapshots received from the backend prior to this version (e.g. for
   * targets resumed with a resumeToken) should be suppressed (buffered)
   * until the backend has caught up to this snapshot version again. This
   * prevents our cache from ever going backwards in time.
   */
  lastRemoteSnapshotVersion,
  /**
   * The number of targets persisted.
   */
  targetCount) {
    this.highestTargetId = highestTargetId;
    this.highestListenSequenceNumber = highestListenSequenceNumber;
    this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;
    this.targetCount = targetCount;
  }
  /**
   * The key string used for the single object that exists in the
   * DbTargetGlobal store.
   */


  DbTargetGlobal.key = 'targetGlobalKey';
  DbTargetGlobal.store = 'targetGlobal';
  return DbTargetGlobal;
}();
/**
 * An object representing an association between a Collection id (e.g. 'messages')
 * to a parent path (e.g. '/chats/123') that contains it as a (sub)collection.
 * This is used to efficiently find all collections to query when performing
 * a Collection Group query.
 */


var DbCollectionParent =
/** @class */
function () {
  function DbCollectionParent(
  /**
   * The collectionId (e.g. 'messages')
   */
  collectionId,
  /**
   * The path to the parent (either a document location or an empty path for
   * a root-level collection).
   */
  parent) {
    this.collectionId = collectionId;
    this.parent = parent;
  }
  /** Name of the IndexedDb object store. */


  DbCollectionParent.store = 'collectionParents';
  /** Keys are automatically assigned via the collectionId, parent properties. */

  DbCollectionParent.keyPath = ['collectionId', 'parent'];
  return DbCollectionParent;
}();

function createQueryCache(db) {
  var targetDocumentsStore = db.createObjectStore(DbTargetDocument.store, {
    keyPath: DbTargetDocument.keyPath
  });
  targetDocumentsStore.createIndex(DbTargetDocument.documentTargetsIndex, DbTargetDocument.documentTargetsKeyPath, {
    unique: true
  });
  var targetStore = db.createObjectStore(DbTarget.store, {
    keyPath: DbTarget.keyPath
  }); // NOTE: This is unique only because the TargetId is the suffix.

  targetStore.createIndex(DbTarget.queryTargetsIndexName, DbTarget.queryTargetsKeyPath, {
    unique: true
  });
  db.createObjectStore(DbTargetGlobal.store);
}

function dropQueryCache(db) {
  db.deleteObjectStore(DbTargetDocument.store);
  db.deleteObjectStore(DbTarget.store);
  db.deleteObjectStore(DbTargetGlobal.store);
}
/**
 * Creates the target global singleton row.
 *
 * @param {IDBTransaction} txn The version upgrade transaction for indexeddb
 */


function writeEmptyTargetGlobalEntry(txn) {
  var globalStore = txn.store(DbTargetGlobal.store);
  var metadata = new DbTargetGlobal(
  /*highestTargetId=*/
  0,
  /*lastListenSequenceNumber=*/
  0, SnapshotVersion.MIN.toTimestamp(),
  /*targetCount=*/
  0);
  return globalStore.put(DbTargetGlobal.key, metadata);
}
/**
 * An object store to store the keys of changed documents. This is used to
 * facilitate storing document changelogs in the Remote Document Cache.
 *
 * PORTING NOTE: This is used for change propagation during multi-tab syncing
 * and not needed on iOS and Android.
 */


var DbRemoteDocumentChanges =
/** @class */
function () {
  function DbRemoteDocumentChanges(
  /** The keys of the changed documents. */
  changes) {
    this.changes = changes;
  }
  /** Name of the IndexedDb object store.  */


  DbRemoteDocumentChanges.store = 'remoteDocumentChanges';
  /** Keys are auto-generated via the `id` property. */

  DbRemoteDocumentChanges.keyPath = 'id';
  return DbRemoteDocumentChanges;
}();

function createRemoteDocumentChangesStore(db) {
  db.createObjectStore(DbRemoteDocumentChanges.store, {
    keyPath: 'id',
    autoIncrement: true
  });
}
/**
 * A record of the metadata state of each client.
 *
 * PORTING NOTE: This is used to synchronize multi-tab state and does not need
 * to be ported to iOS or Android.
 */


var DbClientMetadata =
/** @class */
function () {
  function DbClientMetadata(
  /** The auto-generated client id assigned at client startup. */
  clientId,
  /** The last time this state was updated. */
  updateTimeMs,
  /** Whether the client's network connection is enabled. */
  networkEnabled,
  /** Whether this client is running in a foreground tab. */
  inForeground,
  /**
   * The last change read from the DbRemoteDocumentChanges store.
   * Can be undefined for backwards compatibility.
   */
  lastProcessedDocumentChangeId) {
    this.clientId = clientId;
    this.updateTimeMs = updateTimeMs;
    this.networkEnabled = networkEnabled;
    this.inForeground = inForeground;
    this.lastProcessedDocumentChangeId = lastProcessedDocumentChangeId;
  }
  /** Name of the IndexedDb object store. */


  DbClientMetadata.store = 'clientMetadata';
  /** Keys are automatically assigned via the clientId properties. */

  DbClientMetadata.keyPath = 'clientId';
  return DbClientMetadata;
}();

function createClientMetadataStore(db) {
  db.createObjectStore(DbClientMetadata.store, {
    keyPath: DbClientMetadata.keyPath
  });
} // Visible for testing


var V1_STORES = [DbMutationQueue.store, DbMutationBatch.store, DbDocumentMutation.store, DbRemoteDocument.store, DbTarget.store, DbPrimaryClient.store, DbTargetGlobal.store, DbTargetDocument.store]; // V2 is no longer usable (see comment at top of file)
// Visible for testing

var V3_STORES = V1_STORES; // Visible for testing

var V4_STORES = V3_STORES.concat([DbClientMetadata.store, DbRemoteDocumentChanges.store]); // V5 does not change the set of stores.

var V6_STORES = V4_STORES.concat([DbRemoteDocumentGlobal.store]); // V7 does not change the set of stores.

var V8_STORES = V6_STORES.concat([DbCollectionParent.store]);
/**
 * The list of all default IndexedDB stores used throughout the SDK. This is
 * used when creating transactions so that access across all stores is done
 * atomically.
 */

var ALL_STORES = V8_STORES;
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A persisted implementation of IndexManager.
 */

var IndexedDbIndexManager =
/** @class */
function () {
  function IndexedDbIndexManager() {
    /**
     * An in-memory copy of the index entries we've already written since the SDK
     * launched. Used to avoid re-writing the same entry repeatedly.
     *
     * This is *NOT* a complete cache of what's in persistence and so can never be used to
     * satisfy reads.
     */
    this.collectionParentsCache = new MemoryCollectionParentIndex();
  }

  IndexedDbIndexManager.prototype.addToCollectionParentIndex = function (transaction, collectionPath) {
    assert(collectionPath.length % 2 === 1, 'Expected a collection path.');

    if (this.collectionParentsCache.add(collectionPath)) {
      assert(collectionPath.length >= 1, 'Invalid collection path.');
      var collectionId = collectionPath.lastSegment();
      var parentPath = collectionPath.popLast();
      return collectionParentsStore(transaction).put({
        collectionId: collectionId,
        parent: encode(parentPath)
      });
    }

    return PersistencePromise.resolve();
  };

  IndexedDbIndexManager.prototype.getCollectionParents = function (transaction, collectionId) {
    var parentPaths = [];
    var range = IDBKeyRange.bound([collectionId, ''], [immediateSuccessor(collectionId), ''],
    /*lowerOpen=*/
    false,
    /*upperOpen=*/
    true);
    return collectionParentsStore(transaction).loadAll(range).next(function (entries) {
      for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
        var entry = entries_1[_i]; // This collectionId guard shouldn't be necessary (and isn't as long
        // as we're running in a real browser), but there's a bug in
        // indexeddbshim that breaks our range in our tests running in node:
        // https://github.com/axemclion/IndexedDBShim/issues/334

        if (entry.collectionId !== collectionId) {
          break;
        }

        parentPaths.push(decode(entry.parent));
      }

      return parentPaths;
    });
  };

  return IndexedDbIndexManager;
}();
/**
 * Helper to get a typed SimpleDbStore for the collectionParents
 * document store.
 */


function collectionParentsStore(txn) {
  return IndexedDbPersistence.getStore(txn, DbCollectionParent.store);
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** An enumeration of the different purposes we have for queries. */


var QueryPurpose;

(function (QueryPurpose) {
  /** A regular, normal query. */
  QueryPurpose[QueryPurpose["Listen"] = 0] = "Listen";
  /**
   * The query was used to refill a query after an existence filter mismatch.
   */

  QueryPurpose[QueryPurpose["ExistenceFilterMismatch"] = 1] = "ExistenceFilterMismatch";
  /** The query was used to resolve a limbo document. */

  QueryPurpose[QueryPurpose["LimboResolution"] = 2] = "LimboResolution";
})(QueryPurpose || (QueryPurpose = {}));
/**
 * An immutable set of metadata that the local store tracks for each query.
 */


var QueryData =
/** @class */
function () {
  function QueryData(
  /** The query being listened to. */
  query,
  /**
   * The target ID to which the query corresponds; Assigned by the
   * LocalStore for user listens and by the SyncEngine for limbo watches.
   */
  targetId,
  /** The purpose of the query. */
  purpose,
  /** The sequence number of the last transaction during which this query data was modified */
  sequenceNumber,
  /** The latest snapshot version seen for this target. */
  snapshotVersion,
  /**
   * An opaque, server-assigned token that allows watching a query to be
   * resumed after disconnecting without retransmitting all the data that
   * matches the query. The resume token essentially identifies a point in
   * time from which the server should resume sending results.
   */
  resumeToken) {
    if (snapshotVersion === void 0) {
      snapshotVersion = SnapshotVersion.MIN;
    }

    if (resumeToken === void 0) {
      resumeToken = emptyByteString();
    }

    this.query = query;
    this.targetId = targetId;
    this.purpose = purpose;
    this.sequenceNumber = sequenceNumber;
    this.snapshotVersion = snapshotVersion;
    this.resumeToken = resumeToken;
  }
  /**
   * Creates a new query data instance with an updated snapshot version and
   * resume token.
   */


  QueryData.prototype.copy = function (overwrite) {
    return new QueryData(this.query, this.targetId, this.purpose, overwrite.sequenceNumber === undefined ? this.sequenceNumber : overwrite.sequenceNumber, overwrite.snapshotVersion === undefined ? this.snapshotVersion : overwrite.snapshotVersion, overwrite.resumeToken === undefined ? this.resumeToken : overwrite.resumeToken);
  };

  QueryData.prototype.isEqual = function (other) {
    return this.targetId === other.targetId && this.purpose === other.purpose && this.sequenceNumber === other.sequenceNumber && this.snapshotVersion.isEqual(other.snapshotVersion) && this.resumeToken === other.resumeToken && this.query.isEqual(other.query);
  };

  return QueryData;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Serializer for values stored in the LocalStore. */


var LocalSerializer =
/** @class */
function () {
  function LocalSerializer(remoteSerializer) {
    this.remoteSerializer = remoteSerializer;
  }
  /** Decodes a remote document from storage locally to a Document. */


  LocalSerializer.prototype.fromDbRemoteDocument = function (remoteDoc) {
    if (remoteDoc.document) {
      return this.remoteSerializer.fromDocument(remoteDoc.document, !!remoteDoc.hasCommittedMutations);
    } else if (remoteDoc.noDocument) {
      var key = DocumentKey.fromSegments(remoteDoc.noDocument.path);
      var version = this.fromDbTimestamp(remoteDoc.noDocument.readTime);
      return new NoDocument(key, version, {
        hasCommittedMutations: !!remoteDoc.hasCommittedMutations
      });
    } else if (remoteDoc.unknownDocument) {
      var key = DocumentKey.fromSegments(remoteDoc.unknownDocument.path);
      var version = this.fromDbTimestamp(remoteDoc.unknownDocument.version);
      return new UnknownDocument(key, version);
    } else {
      return fail('Unexpected DbRemoteDocument');
    }
  };
  /** Encodes a document for storage locally. */


  LocalSerializer.prototype.toDbRemoteDocument = function (maybeDoc) {
    if (maybeDoc instanceof Document) {
      var doc = maybeDoc.proto ? maybeDoc.proto : this.remoteSerializer.toDocument(maybeDoc);
      var hasCommittedMutations = maybeDoc.hasCommittedMutations;
      return new DbRemoteDocument(
      /* unknownDocument= */
      null,
      /* noDocument= */
      null, doc, hasCommittedMutations);
    } else if (maybeDoc instanceof NoDocument) {
      var path = maybeDoc.key.path.toArray();
      var readTime = this.toDbTimestamp(maybeDoc.version);
      var hasCommittedMutations = maybeDoc.hasCommittedMutations;
      return new DbRemoteDocument(
      /* unknownDocument= */
      null, new DbNoDocument(path, readTime),
      /* document= */
      null, hasCommittedMutations);
    } else if (maybeDoc instanceof UnknownDocument) {
      var path = maybeDoc.key.path.toArray();
      var readTime = this.toDbTimestamp(maybeDoc.version);
      return new DbRemoteDocument(new DbUnknownDocument(path, readTime),
      /* noDocument= */
      null,
      /* document= */
      null,
      /* hasCommittedMutations= */
      true);
    } else {
      return fail('Unexpected MaybeDocumment');
    }
  };

  LocalSerializer.prototype.toDbTimestamp = function (snapshotVersion) {
    var timestamp = snapshotVersion.toTimestamp();
    return new DbTimestamp(timestamp.seconds, timestamp.nanoseconds);
  };

  LocalSerializer.prototype.fromDbTimestamp = function (dbTimestamp) {
    var timestamp = new Timestamp(dbTimestamp.seconds, dbTimestamp.nanoseconds);
    return SnapshotVersion.fromTimestamp(timestamp);
  };
  /** Encodes a batch of mutations into a DbMutationBatch for local storage. */


  LocalSerializer.prototype.toDbMutationBatch = function (userId, batch) {
    var _this = this;

    var serializedBaseMutations = batch.baseMutations.map(function (m) {
      return _this.remoteSerializer.toMutation(m);
    });
    var serializedMutations = batch.mutations.map(function (m) {
      return _this.remoteSerializer.toMutation(m);
    });
    return new DbMutationBatch(userId, batch.batchId, batch.localWriteTime.toMillis(), serializedBaseMutations, serializedMutations);
  };
  /** Decodes a DbMutationBatch into a MutationBatch */


  LocalSerializer.prototype.fromDbMutationBatch = function (dbBatch) {
    var _this = this;

    var baseMutations = (dbBatch.baseMutations || []).map(function (m) {
      return _this.remoteSerializer.fromMutation(m);
    });
    var mutations = dbBatch.mutations.map(function (m) {
      return _this.remoteSerializer.fromMutation(m);
    });
    var timestamp = Timestamp.fromMillis(dbBatch.localWriteTimeMs);
    return new MutationBatch(dbBatch.batchId, timestamp, baseMutations, mutations);
  };
  /*
   * Encodes a set of document keys into an array of EncodedResourcePaths.
   */


  LocalSerializer.prototype.toDbResourcePaths = function (keys) {
    var encodedKeys = [];
    keys.forEach(function (key) {
      encodedKeys.push(encode(key.path));
    });
    return encodedKeys;
  };
  /** Decodes an array of EncodedResourcePaths into a set of document keys. */


  LocalSerializer.prototype.fromDbResourcePaths = function (encodedPaths) {
    var keys = documentKeySet();

    for (var _i = 0, encodedPaths_1 = encodedPaths; _i < encodedPaths_1.length; _i++) {
      var documentKey = encodedPaths_1[_i];
      keys = keys.add(new DocumentKey(decode(documentKey)));
    }

    return keys;
  };
  /** Decodes a DbTarget into QueryData */


  LocalSerializer.prototype.fromDbTarget = function (dbTarget) {
    var version = this.fromDbTimestamp(dbTarget.readTime);
    var query;

    if (isDocumentQuery(dbTarget.query)) {
      query = this.remoteSerializer.fromDocumentsTarget(dbTarget.query);
    } else {
      query = this.remoteSerializer.fromQueryTarget(dbTarget.query);
    }

    return new QueryData(query, dbTarget.targetId, QueryPurpose.Listen, dbTarget.lastListenSequenceNumber, version, dbTarget.resumeToken);
  };
  /** Encodes QueryData into a DbTarget for storage locally. */


  LocalSerializer.prototype.toDbTarget = function (queryData) {
    assert(QueryPurpose.Listen === queryData.purpose, 'Only queries with purpose ' + QueryPurpose.Listen + ' may be stored, got ' + queryData.purpose);
    var dbTimestamp = this.toDbTimestamp(queryData.snapshotVersion);
    var queryProto;

    if (queryData.query.isDocumentQuery()) {
      queryProto = this.remoteSerializer.toDocumentsTarget(queryData.query);
    } else {
      queryProto = this.remoteSerializer.toQueryTarget(queryData.query);
    }

    var resumeToken;

    if (queryData.resumeToken instanceof Uint8Array) {
      // TODO(b/78771403): Convert tokens to strings during deserialization
      assert(Object({"NODE_ENV":"development","PUBLIC_URL":""}).USE_MOCK_PERSISTENCE === 'YES', 'Persisting non-string stream tokens is only supported with mock persistence .');
      resumeToken = queryData.resumeToken.toString();
    } else {
      resumeToken = queryData.resumeToken;
    } // lastListenSequenceNumber is always 0 until we do real GC.


    return new DbTarget(queryData.targetId, queryData.query.canonicalId(), dbTimestamp, resumeToken, queryData.sequenceNumber, queryProto);
  };

  return LocalSerializer;
}();
/**
 * A helper function for figuring out what kind of query has been stored.
 */


function isDocumentQuery(dbQuery) {
  return dbQuery.documents !== undefined;
}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function bufferEntryComparator(_a, _b) {
  var aSequence = _a[0],
      aIndex = _a[1];
  var bSequence = _b[0],
      bIndex = _b[1];
  var seqCmp = primitiveComparator(aSequence, bSequence);

  if (seqCmp === 0) {
    // This order doesn't matter, but we can bias against churn by sorting
    // entries created earlier as less than newer entries.
    return primitiveComparator(aIndex, bIndex);
  } else {
    return seqCmp;
  }
}
/**
 * Used to calculate the nth sequence number. Keeps a rolling buffer of the
 * lowest n values passed to `addElement`, and finally reports the largest of
 * them in `maxValue`.
 */


var RollingSequenceNumberBuffer =
/** @class */
function () {
  function RollingSequenceNumberBuffer(maxElements) {
    this.maxElements = maxElements;
    this.buffer = new SortedSet(bufferEntryComparator);
    this.previousIndex = 0;
  }

  RollingSequenceNumberBuffer.prototype.nextIndex = function () {
    return ++this.previousIndex;
  };

  RollingSequenceNumberBuffer.prototype.addElement = function (sequenceNumber) {
    var entry = [sequenceNumber, this.nextIndex()];

    if (this.buffer.size < this.maxElements) {
      this.buffer = this.buffer.add(entry);
    } else {
      var highestValue = this.buffer.last();

      if (bufferEntryComparator(entry, highestValue) < 0) {
        this.buffer = this.buffer.delete(highestValue).add(entry);
      }
    }
  };

  Object.defineProperty(RollingSequenceNumberBuffer.prototype, "maxValue", {
    get: function () {
      // Guaranteed to be non-empty. If we decide we are not collecting any
      // sequence numbers, nthSequenceNumber below short-circuits. If we have
      // decided that we are collecting n sequence numbers, it's because n is some
      // percentage of the existing sequence numbers. That means we should never
      // be in a situation where we are collecting sequence numbers but don't
      // actually have any.
      return this.buffer.last()[0];
    },
    enumerable: true,
    configurable: true
  });
  return RollingSequenceNumberBuffer;
}();

var GC_DID_NOT_RUN = {
  didRun: false,
  sequenceNumbersCollected: 0,
  targetsRemoved: 0,
  documentsRemoved: 0
};

var LruParams =
/** @class */
function () {
  function LruParams( // When we attempt to collect, we will only do so if the cache size is greater than this
  // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.
  cacheSizeCollectionThreshold, // The percentage of sequence numbers that we will attempt to collect
  percentileToCollect, // A cap on the total number of sequence numbers that will be collected. This prevents
  // us from collecting a huge number of sequence numbers if the cache has grown very large.
  maximumSequenceNumbersToCollect) {
    this.cacheSizeCollectionThreshold = cacheSizeCollectionThreshold;
    this.percentileToCollect = percentileToCollect;
    this.maximumSequenceNumbersToCollect = maximumSequenceNumbersToCollect;
  }

  LruParams.withCacheSize = function (cacheSize) {
    return new LruParams(cacheSize, LruParams.DEFAULT_COLLECTION_PERCENTILE, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);
  };

  LruParams.COLLECTION_DISABLED = -1;
  LruParams.MINIMUM_CACHE_SIZE_BYTES = 1 * 1024 * 1024;
  LruParams.DEFAULT_CACHE_SIZE_BYTES = 40 * 1024 * 1024;
  LruParams.DEFAULT_COLLECTION_PERCENTILE = 10;
  LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1000;
  LruParams.DEFAULT = new LruParams(LruParams.DEFAULT_CACHE_SIZE_BYTES, LruParams.DEFAULT_COLLECTION_PERCENTILE, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);
  LruParams.DISABLED = new LruParams(LruParams.COLLECTION_DISABLED, 0, 0);
  return LruParams;
}();
/** How long we wait to try running LRU GC after SDK initialization. */


var INITIAL_GC_DELAY_MS = 1 * 60 * 1000;
/** Minimum amount of time between GC checks, after the first one. */

var REGULAR_GC_DELAY_MS = 5 * 60 * 1000;
/**
 * This class is responsible for the scheduling of LRU garbage collection. It handles checking
 * whether or not GC is enabled, as well as which delay to use before the next run.
 */

var LruScheduler =
/** @class */
function () {
  function LruScheduler(garbageCollector, asyncQueue, localStore) {
    this.garbageCollector = garbageCollector;
    this.asyncQueue = asyncQueue;
    this.localStore = localStore;
    this.gcTask = null;
  }

  LruScheduler.prototype.start = function () {
    assert(this.gcTask === null, 'Cannot start an already started LruScheduler');

    if (this.garbageCollector.params.cacheSizeCollectionThreshold !== LruParams.COLLECTION_DISABLED) {
      this.scheduleGC();
    }
  };

  LruScheduler.prototype.stop = function () {
    if (this.gcTask) {
      this.gcTask.cancel();
      this.gcTask = null;
    }
  };

  Object.defineProperty(LruScheduler.prototype, "started", {
    get: function () {
      return this.gcTask !== null;
    },
    enumerable: true,
    configurable: true
  });

  LruScheduler.prototype.scheduleGC = function () {
    var _this = this;

    assert(this.gcTask === null, 'Cannot schedule GC while a task is pending');
    var delay = this.hasRun ? REGULAR_GC_DELAY_MS : INITIAL_GC_DELAY_MS;
    debug('LruGarbageCollector', "Garbage collection scheduled in " + delay + "ms");
    this.gcTask = this.asyncQueue.enqueueAfterDelay(TimerId.LruGarbageCollection, delay, function () {
      _this.gcTask = null;
      _this.hasRun = true;
      return _this.localStore.collectGarbage(_this.garbageCollector).then(function () {
        return _this.scheduleGC();
      }).catch(ignoreIfPrimaryLeaseLoss);
    });
  };

  return LruScheduler;
}();
/** Implements the steps for LRU garbage collection. */


var LruGarbageCollector =
/** @class */
function () {
  function LruGarbageCollector(delegate, params) {
    this.delegate = delegate;
    this.params = params;
  }
  /** Given a percentile of target to collect, returns the number of targets to collect. */


  LruGarbageCollector.prototype.calculateTargetCount = function (txn, percentile) {
    return this.delegate.getSequenceNumberCount(txn).next(function (targetCount) {
      return Math.floor(percentile / 100.0 * targetCount);
    });
  };
  /** Returns the nth sequence number, counting in order from the smallest. */


  LruGarbageCollector.prototype.nthSequenceNumber = function (txn, n) {
    var _this = this;

    if (n === 0) {
      return PersistencePromise.resolve(ListenSequence.INVALID);
    }

    var buffer = new RollingSequenceNumberBuffer(n);
    return this.delegate.forEachTarget(txn, function (target) {
      return buffer.addElement(target.sequenceNumber);
    }).next(function () {
      return _this.delegate.forEachOrphanedDocumentSequenceNumber(txn, function (sequenceNumber) {
        return buffer.addElement(sequenceNumber);
      });
    }).next(function () {
      return buffer.maxValue;
    });
  };
  /**
   * Removes targets with a sequence number equal to or less than the given upper bound, and removes
   * document associations with those targets.
   */


  LruGarbageCollector.prototype.removeTargets = function (txn, upperBound, activeTargetIds) {
    return this.delegate.removeTargets(txn, upperBound, activeTargetIds);
  };
  /**
   * Removes documents that have a sequence number equal to or less than the upper bound and are not
   * otherwise pinned.
   */


  LruGarbageCollector.prototype.removeOrphanedDocuments = function (txn, upperBound) {
    return this.delegate.removeOrphanedDocuments(txn, upperBound);
  };

  LruGarbageCollector.prototype.collect = function (txn, activeTargetIds) {
    var _this = this;

    if (this.params.cacheSizeCollectionThreshold === LruParams.COLLECTION_DISABLED) {
      debug('LruGarbageCollector', 'Garbage collection skipped; disabled');
      return PersistencePromise.resolve(GC_DID_NOT_RUN);
    }

    return this.getCacheSize(txn).next(function (cacheSize) {
      if (cacheSize < _this.params.cacheSizeCollectionThreshold) {
        debug('LruGarbageCollector', "Garbage collection skipped; Cache size " + cacheSize + " " + ("is lower than threshold " + _this.params.cacheSizeCollectionThreshold));
        return GC_DID_NOT_RUN;
      } else {
        return _this.runGarbageCollection(txn, activeTargetIds);
      }
    });
  };

  LruGarbageCollector.prototype.getCacheSize = function (txn) {
    return this.delegate.getCacheSize(txn);
  };

  LruGarbageCollector.prototype.runGarbageCollection = function (txn, activeTargetIds) {
    var _this = this;

    var upperBoundSequenceNumber;
    var sequenceNumbersToCollect, targetsRemoved; // Timestamps for various pieces of the process

    var startTs, countedTargetsTs, foundUpperBoundTs, removedTargetsTs, removedDocumentsTs;
    startTs = Date.now();
    return this.calculateTargetCount(txn, this.params.percentileToCollect).next(function (sequenceNumbers) {
      // Cap at the configured max
      if (sequenceNumbers > _this.params.maximumSequenceNumbersToCollect) {
        debug('LruGarbageCollector', 'Capping sequence numbers to collect down ' + ("to the maximum of " + _this.params.maximumSequenceNumbersToCollect + " ") + ("from " + sequenceNumbers));
        sequenceNumbersToCollect = _this.params.maximumSequenceNumbersToCollect;
      } else {
        sequenceNumbersToCollect = sequenceNumbers;
      }

      countedTargetsTs = Date.now();
      return _this.nthSequenceNumber(txn, sequenceNumbersToCollect);
    }).next(function (upperBound) {
      upperBoundSequenceNumber = upperBound;
      foundUpperBoundTs = Date.now();
      return _this.removeTargets(txn, upperBoundSequenceNumber, activeTargetIds);
    }).next(function (numTargetsRemoved) {
      targetsRemoved = numTargetsRemoved;
      removedTargetsTs = Date.now();
      return _this.removeOrphanedDocuments(txn, upperBoundSequenceNumber);
    }).next(function (documentsRemoved) {
      removedDocumentsTs = Date.now();

      if (getLogLevel() <= LogLevel.DEBUG) {
        var desc = 'LRU Garbage Collection\n' + ("\tCounted targets in " + (countedTargetsTs - startTs) + "ms\n") + ("\tDetermined least recently used " + sequenceNumbersToCollect + " in ") + (foundUpperBoundTs - countedTargetsTs + "ms\n") + ("\tRemoved " + targetsRemoved + " targets in ") + (removedTargetsTs - foundUpperBoundTs + "ms\n") + ("\tRemoved " + documentsRemoved + " documents in ") + (removedDocumentsTs - removedTargetsTs + "ms\n") + ("Total Duration: " + (removedDocumentsTs - startTs) + "ms");
        debug('LruGarbageCollector', desc);
      }

      return PersistencePromise.resolve({
        didRun: true,
        sequenceNumbersCollected: sequenceNumbersToCollect,
        targetsRemoved: targetsRemoved,
        documentsRemoved: documentsRemoved
      });
    });
  };

  return LruGarbageCollector;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Opaque interface representing a persistence transaction.
 *
 * When you call Persistence.runTransaction(), it will create a transaction and
 * pass it to your callback. You then pass it to any method that operates
 * on persistence.
 */


var PersistenceTransaction =
/** @class */
function () {
  function PersistenceTransaction() {}

  return PersistenceTransaction;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var LOG_TAG$1 = 'IndexedDbPersistence';
/**
 * Oldest acceptable age in milliseconds for client metadata before the client
 * is considered inactive and its associated data (such as the remote document
 * cache changelog) is garbage collected.
 */

var MAX_CLIENT_AGE_MS = 30 * 60 * 1000; // 30 minutes

/**
 * Oldest acceptable metadata age for clients that may participate in the
 * primary lease election. Clients that have not updated their client metadata
 * within 5 seconds are not eligible to receive a primary lease.
 */

var MAX_PRIMARY_ELIGIBLE_AGE_MS = 5000;
/**
 * The interval at which clients will update their metadata, including
 * refreshing their primary lease if held or potentially trying to acquire it if
 * not held.
 *
 * Primary clients may opportunistically refresh their metadata earlier
 * if they're already performing an IndexedDB operation.
 */

var CLIENT_METADATA_REFRESH_INTERVAL_MS = 4000;
/** User-facing error when the primary lease is required but not available. */

var PRIMARY_LEASE_LOST_ERROR_MSG = 'The current tab is not in the required state to perform this operation. ' + 'It might be necessary to refresh the browser tab.';
var PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG = 'Another tab has exclusive access to the persistence layer. ' + 'To allow shared access, make sure to invoke ' + '`enablePersistence()` with `synchronizeTabs:true` in all tabs.';
var UNSUPPORTED_PLATFORM_ERROR_MSG = 'This platform is either missing' + ' IndexedDB or is known to have an incomplete implementation. Offline' + ' persistence has been disabled.'; // The format of the LocalStorage key that stores zombied client is:
//     firestore_zombie_<persistence_prefix>_<instance_key>

var ZOMBIED_CLIENTS_KEY_PREFIX = 'firestore_zombie';

var IndexedDbTransaction =
/** @class */
function (_super) {
  tslib_1.__extends(IndexedDbTransaction, _super);

  function IndexedDbTransaction(simpleDbTransaction, currentSequenceNumber) {
    var _this = _super.call(this) || this;

    _this.simpleDbTransaction = simpleDbTransaction;
    _this.currentSequenceNumber = currentSequenceNumber;
    return _this;
  }

  return IndexedDbTransaction;
}(PersistenceTransaction);

var IndexedDbPersistence =
/** @class */
function () {
  // Note that `multiClientParams` must be present to enable multi-client support while multi-tab
  // is still experimental. When multi-client is switched to always on, `multiClientParams` will
  // no longer be optional.
  function IndexedDbPersistence(persistenceKey, clientId, platform, queue, serializer, lruParams, multiClientParams) {
    this.persistenceKey = persistenceKey;
    this.clientId = clientId;
    this.queue = queue;
    this.multiClientParams = multiClientParams;
    this._started = false;
    this.isPrimary = false;
    this.networkEnabled = true;
    this.inForeground = false;
    /** The last time we garbage collected the Remote Document Changelog. */

    this.lastGarbageCollectionTime = Number.NEGATIVE_INFINITY;
    /** A listener to notify on primary state changes. */

    this.primaryStateListener = function (_) {
      return Promise.resolve();
    };

    if (!IndexedDbPersistence.isAvailable()) {
      throw new FirestoreError(Code.UNIMPLEMENTED, UNSUPPORTED_PLATFORM_ERROR_MSG);
    }

    this.referenceDelegate = new IndexedDbLruDelegate(this, lruParams);
    this.dbName = persistenceKey + IndexedDbPersistence.MAIN_DATABASE;
    this.serializer = new LocalSerializer(serializer);
    this.document = platform.document;
    this.allowTabSynchronization = multiClientParams !== undefined;
    this.queryCache = new IndexedDbQueryCache(this.referenceDelegate, this.serializer);
    this.indexManager = new IndexedDbIndexManager();
    this.remoteDocumentCache = new IndexedDbRemoteDocumentCache(this.serializer, this.indexManager,
    /*keepDocumentChangeLog=*/
    this.allowTabSynchronization);

    if (platform.window && platform.window.localStorage) {
      this.window = platform.window;
      this.webStorage = this.window.localStorage;
    } else {
      throw new FirestoreError(Code.UNIMPLEMENTED, 'IndexedDB persistence is only available on platforms that support LocalStorage.');
    }
  }

  IndexedDbPersistence.getStore = function (txn, store) {
    if (txn instanceof IndexedDbTransaction) {
      return SimpleDb.getStore(txn.simpleDbTransaction, store);
    } else {
      throw fail('IndexedDbPersistence must use instances of IndexedDbTransaction');
    }
  };

  IndexedDbPersistence.createIndexedDbPersistence = function (persistenceKey, clientId, platform, queue, serializer, lruParams) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var persistence;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            persistence = new IndexedDbPersistence(persistenceKey, clientId, platform, queue, serializer, lruParams);
            return [4
            /*yield*/
            , persistence.start()];

          case 1:
            _a.sent();

            return [2
            /*return*/
            , persistence];
        }
      });
    });
  };

  IndexedDbPersistence.createMultiClientIndexedDbPersistence = function (persistenceKey, clientId, platform, queue, serializer, lruParams, multiClientParams) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var persistence;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            persistence = new IndexedDbPersistence(persistenceKey, clientId, platform, queue, serializer, lruParams, multiClientParams);
            return [4
            /*yield*/
            , persistence.start()];

          case 1:
            _a.sent();

            return [2
            /*return*/
            , persistence];
        }
      });
    });
  };
  /**
   * Attempt to start IndexedDb persistence.
   *
   * @return {Promise<void>} Whether persistence was enabled.
   */


  IndexedDbPersistence.prototype.start = function () {
    var _this = this;

    assert(!this.started, 'IndexedDbPersistence double-started!');
    assert(this.window !== null, "Expected 'window' to be defined");
    return SimpleDb.openOrCreate(this.dbName, SCHEMA_VERSION, new SchemaConverter(this.serializer)).then(function (db) {
      _this.simpleDb = db; // NOTE: This is expected to fail sometimes (in the case of another tab already
      // having the persistence lock), so it's the first thing we should do.

      return _this.updateClientMetadataAndTryBecomePrimary();
    }).then(function () {
      _this.attachVisibilityHandler();

      _this.attachWindowUnloadHook();

      _this.scheduleClientMetadataAndPrimaryLeaseRefreshes();

      return _this.startRemoteDocumentCache();
    }).then(function () {
      return _this.simpleDb.runTransaction('readonly', [DbTargetGlobal.store], function (txn) {
        return getHighestListenSequenceNumber(txn).next(function (highestListenSequenceNumber) {
          var sequenceNumberSyncer = _this.multiClientParams ? _this.multiClientParams.sequenceNumberSyncer : undefined;
          _this.listenSequence = new ListenSequence(highestListenSequenceNumber, sequenceNumberSyncer);
        });
      });
    }).then(function () {
      _this._started = true;
    }).catch(function (reason) {
      _this.simpleDb && _this.simpleDb.close();
      return Promise.reject(reason);
    });
  };

  IndexedDbPersistence.prototype.startRemoteDocumentCache = function () {
    var _this = this;

    return this.simpleDb.runTransaction('readonly', ALL_STORES, function (txn) {
      return _this.remoteDocumentCache.start(txn);
    });
  };

  IndexedDbPersistence.prototype.setPrimaryStateListener = function (primaryStateListener) {
    var _this = this;

    this.primaryStateListener = function (primaryState) {
      return tslib_1.__awaiter(_this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
          if (this.started) {
            return [2
            /*return*/
            , primaryStateListener(primaryState)];
          }

          return [2
          /*return*/
          ];
        });
      });
    };

    return primaryStateListener(this.isPrimary);
  };

  IndexedDbPersistence.prototype.setDatabaseDeletedListener = function (databaseDeletedListener) {
    var _this = this;

    this.simpleDb.setVersionChangeListener(function (event) {
      return tslib_1.__awaiter(_this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (!(event.newVersion === null)) return [3
              /*break*/
              , 2];
              return [4
              /*yield*/
              , databaseDeletedListener()];

            case 1:
              _a.sent();

              _a.label = 2;

            case 2:
              return [2
              /*return*/
              ];
          }
        });
      });
    });
  };

  IndexedDbPersistence.prototype.setNetworkEnabled = function (networkEnabled) {
    var _this = this;

    if (this.networkEnabled !== networkEnabled) {
      this.networkEnabled = networkEnabled; // Schedule a primary lease refresh for immediate execution. The eventual
      // lease update will be propagated via `primaryStateListener`.

      this.queue.enqueueAndForget(function () {
        return tslib_1.__awaiter(_this, void 0, void 0, function () {
          return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this.started) return [3
                /*break*/
                , 2];
                return [4
                /*yield*/
                , this.updateClientMetadataAndTryBecomePrimary()];

              case 1:
                _a.sent();

                _a.label = 2;

              case 2:
                return [2
                /*return*/
                ];
            }
          });
        });
      });
    }
  };
  /**
   * Updates the client metadata in IndexedDb and attempts to either obtain or
   * extend the primary lease for the local client. Asynchronously notifies the
   * primary state listener if the client either newly obtained or released its
   * primary lease.
   */


  IndexedDbPersistence.prototype.updateClientMetadataAndTryBecomePrimary = function () {
    var _this = this;

    return this.simpleDb.runTransaction('readwrite', ALL_STORES, function (txn) {
      var metadataStore = clientMetadataStore(txn);
      return metadataStore.put(new DbClientMetadata(_this.clientId, Date.now(), _this.networkEnabled, _this.inForeground, _this.remoteDocumentCache.lastProcessedDocumentChangeId)).next(function () {
        if (_this.isPrimary) {
          return _this.verifyPrimaryLease(txn).next(function (success) {
            if (!success) {
              _this.isPrimary = false;

              _this.queue.enqueueAndForget(function () {
                return _this.primaryStateListener(false);
              });
            }
          });
        }
      }).next(function () {
        return _this.canActAsPrimary(txn);
      }).next(function (canActAsPrimary) {
        var wasPrimary = _this.isPrimary;
        _this.isPrimary = canActAsPrimary;

        if (wasPrimary !== _this.isPrimary) {
          _this.queue.enqueueAndForget(function () {
            return _this.primaryStateListener(_this.isPrimary);
          });
        }

        if (wasPrimary && !_this.isPrimary) {
          return _this.releasePrimaryLeaseIfHeld(txn);
        } else if (_this.isPrimary) {
          return _this.acquireOrExtendPrimaryLease(txn);
        }
      });
    });
  };

  IndexedDbPersistence.prototype.verifyPrimaryLease = function (txn) {
    var _this = this;

    var store = primaryClientStore(txn);
    return store.get(DbPrimaryClient.key).next(function (primaryClient) {
      return PersistencePromise.resolve(_this.isLocalClient(primaryClient));
    });
  };

  IndexedDbPersistence.prototype.removeClientMetadata = function (txn) {
    var metadataStore = clientMetadataStore(txn);
    return metadataStore.delete(this.clientId);
  };
  /**
   * If the garbage collection threshold has passed, prunes the
   * RemoteDocumentChanges and the ClientMetadata store based on the last update
   * time of all clients.
   */


  IndexedDbPersistence.prototype.maybeGarbageCollectMultiClientState = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var activeClients_1, inactiveClients_1;

      var _this = this;

      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!(this.isPrimary && !this.isWithinAge(this.lastGarbageCollectionTime, MAX_CLIENT_AGE_MS))) return [3
            /*break*/
            , 2];
            this.lastGarbageCollectionTime = Date.now();
            inactiveClients_1 = [];
            return [4
            /*yield*/
            , this.runTransaction('maybeGarbageCollectMultiClientState', 'readwrite-primary', function (txn) {
              var metadataStore = IndexedDbPersistence.getStore(txn, DbClientMetadata.store);
              return metadataStore.loadAll().next(function (existingClients) {
                activeClients_1 = _this.filterActiveClients(existingClients, MAX_CLIENT_AGE_MS);
                inactiveClients_1 = existingClients.filter(function (client) {
                  return activeClients_1.indexOf(client) === -1;
                });
              }).next(function () {
                // Delete metadata for clients that are no longer considered active.
                return PersistencePromise.forEach(inactiveClients_1, function (inactiveClient) {
                  return metadataStore.delete(inactiveClient.clientId);
                });
              }).next(function () {
                // Retrieve the minimum change ID from the set of active clients.
                // The primary client doesn't read from the document change log,
                // and hence we exclude it when we determine the minimum
                // `lastProcessedDocumentChangeId`.
                activeClients_1 = activeClients_1.filter(function (client) {
                  return client.clientId !== _this.clientId;
                });

                if (activeClients_1.length > 0) {
                  var processedChangeIds = activeClients_1.map(function (client) {
                    return client.lastProcessedDocumentChangeId || 0;
                  });
                  var oldestChangeId = Math.min.apply(Math, processedChangeIds);
                  return _this.remoteDocumentCache.removeDocumentChangesThroughChangeId(txn, oldestChangeId);
                }
              });
            })];

          case 1:
            _a.sent(); // Delete potential leftover entries that may continue to mark the
            // inactive clients as zombied in LocalStorage.
            // Ideally we'd delete the IndexedDb and LocalStorage zombie entries for
            // the client atomically, but we can't. So we opt to delete the IndexedDb
            // entries first to avoid potentially reviving a zombied client.


            inactiveClients_1.forEach(function (inactiveClient) {
              _this.window.localStorage.removeItem(_this.zombiedClientLocalStorageKey(inactiveClient.clientId));
            });
            _a.label = 2;

          case 2:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Schedules a recurring timer to update the client metadata and to either
   * extend or acquire the primary lease if the client is eligible.
   */


  IndexedDbPersistence.prototype.scheduleClientMetadataAndPrimaryLeaseRefreshes = function () {
    var _this = this;

    this.clientMetadataRefresher = this.queue.enqueueAfterDelay(TimerId.ClientMetadataRefresh, CLIENT_METADATA_REFRESH_INTERVAL_MS, function () {
      return _this.updateClientMetadataAndTryBecomePrimary().then(function () {
        return _this.maybeGarbageCollectMultiClientState();
      }).then(function () {
        return _this.scheduleClientMetadataAndPrimaryLeaseRefreshes();
      });
    });
  };
  /** Checks whether `client` is the local client. */


  IndexedDbPersistence.prototype.isLocalClient = function (client) {
    return client ? client.ownerId === this.clientId : false;
  };
  /**
   * Evaluate the state of all active clients and determine whether the local
   * client is or can act as the holder of the primary lease. Returns whether
   * the client is eligible for the lease, but does not actually acquire it.
   * May return 'false' even if there is no active leaseholder and another
   * (foreground) client should become leaseholder instead.
   */


  IndexedDbPersistence.prototype.canActAsPrimary = function (txn) {
    var _this = this;

    var store = primaryClientStore(txn);
    return store.get(DbPrimaryClient.key).next(function (currentPrimary) {
      var currentLeaseIsValid = currentPrimary !== null && _this.isWithinAge(currentPrimary.leaseTimestampMs, MAX_PRIMARY_ELIGIBLE_AGE_MS) && !_this.isClientZombied(currentPrimary.ownerId); // A client is eligible for the primary lease if:
      // - its network is enabled and the client's tab is in the foreground.
      // - its network is enabled and no other client's tab is in the
      //   foreground.
      // - every clients network is disabled and the client's tab is in the
      //   foreground.
      // - every clients network is disabled and no other client's tab is in
      //   the foreground.

      if (currentLeaseIsValid) {
        if (_this.isLocalClient(currentPrimary) && _this.networkEnabled) {
          return true;
        }

        if (!_this.isLocalClient(currentPrimary)) {
          if (!currentPrimary.allowTabSynchronization) {
            // Fail the `canActAsPrimary` check if the current leaseholder has
            // not opted into multi-tab synchronization. If this happens at
            // client startup, we reject the Promise returned by
            // `enablePersistence()` and the user can continue to use Firestore
            // with in-memory persistence.
            // If this fails during a lease refresh, we will instead block the
            // AsyncQueue from executing further operations. Note that this is
            // acceptable since mixing & matching different `synchronizeTabs`
            // settings is not supported.
            //
            // TODO(b/114226234): Remove this check when `synchronizeTabs` can
            // no longer be turned off.
            throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);
          }

          return false;
        }
      }

      if (_this.networkEnabled && _this.inForeground) {
        return true;
      }

      return clientMetadataStore(txn).loadAll().next(function (existingClients) {
        // Process all existing clients and determine whether at least one of
        // them is better suited to obtain the primary lease.
        var preferredCandidate = _this.filterActiveClients(existingClients, MAX_PRIMARY_ELIGIBLE_AGE_MS).find(function (otherClient) {
          if (_this.clientId !== otherClient.clientId) {
            var otherClientHasBetterNetworkState = !_this.networkEnabled && otherClient.networkEnabled;
            var otherClientHasBetterVisibility = !_this.inForeground && otherClient.inForeground;
            var otherClientHasSameNetworkState = _this.networkEnabled === otherClient.networkEnabled;

            if (otherClientHasBetterNetworkState || otherClientHasBetterVisibility && otherClientHasSameNetworkState) {
              return true;
            }
          }

          return false;
        });

        return preferredCandidate === undefined;
      });
    }).next(function (canActAsPrimary) {
      if (_this.isPrimary !== canActAsPrimary) {
        debug(LOG_TAG$1, "Client " + (canActAsPrimary ? 'is' : 'is not') + " eligible for a primary lease.");
      }

      return canActAsPrimary;
    });
  };

  IndexedDbPersistence.prototype.shutdown = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var _this = this;

      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            // The shutdown() operations are idempotent and can be called even when
            // start() aborted (e.g. because it couldn't acquire the persistence lease).
            this._started = false;
            this.markClientZombied();

            if (this.clientMetadataRefresher) {
              this.clientMetadataRefresher.cancel();
            }

            this.detachVisibilityHandler();
            this.detachWindowUnloadHook();
            return [4
            /*yield*/
            , this.simpleDb.runTransaction('readwrite', [DbPrimaryClient.store, DbClientMetadata.store], function (txn) {
              return _this.releasePrimaryLeaseIfHeld(txn).next(function () {
                return _this.removeClientMetadata(txn);
              });
            })];

          case 1:
            _a.sent();

            this.simpleDb.close(); // Remove the entry marking the client as zombied from LocalStorage since
            // we successfully deleted its metadata from IndexedDb.

            this.removeClientZombiedEntry();
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Returns clients that are not zombied and have an updateTime within the
   * provided threshold.
   */


  IndexedDbPersistence.prototype.filterActiveClients = function (clients, activityThresholdMs) {
    var _this = this;

    return clients.filter(function (client) {
      return _this.isWithinAge(client.updateTimeMs, activityThresholdMs) && !_this.isClientZombied(client.clientId);
    });
  };

  IndexedDbPersistence.prototype.getActiveClients = function () {
    var _this = this;

    return this.simpleDb.runTransaction('readonly', [DbClientMetadata.store], function (txn) {
      return clientMetadataStore(txn).loadAll().next(function (clients) {
        return _this.filterActiveClients(clients, MAX_CLIENT_AGE_MS).map(function (clientMetadata) {
          return clientMetadata.clientId;
        });
      });
    });
  };

  IndexedDbPersistence.clearPersistence = function (persistenceKey) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var dbName;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!IndexedDbPersistence.isAvailable()) {
              return [2
              /*return*/
              , Promise.resolve()];
            }

            dbName = persistenceKey + IndexedDbPersistence.MAIN_DATABASE;
            return [4
            /*yield*/
            , SimpleDb.delete(dbName)];

          case 1:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };

  Object.defineProperty(IndexedDbPersistence.prototype, "started", {
    get: function () {
      return this._started;
    },
    enumerable: true,
    configurable: true
  });

  IndexedDbPersistence.prototype.getMutationQueue = function (user) {
    assert(this.started, 'Cannot initialize MutationQueue before persistence is started.');
    return IndexedDbMutationQueue.forUser(user, this.serializer, this.indexManager, this.referenceDelegate);
  };

  IndexedDbPersistence.prototype.getQueryCache = function () {
    assert(this.started, 'Cannot initialize QueryCache before persistence is started.');
    return this.queryCache;
  };

  IndexedDbPersistence.prototype.getRemoteDocumentCache = function () {
    assert(this.started, 'Cannot initialize RemoteDocumentCache before persistence is started.');
    return this.remoteDocumentCache;
  };

  IndexedDbPersistence.prototype.getIndexManager = function () {
    assert(this.started, 'Cannot initialize IndexManager before persistence is started.');
    return this.indexManager;
  };

  IndexedDbPersistence.prototype.runTransaction = function (action, mode, transactionOperation) {
    var _this = this;

    debug(LOG_TAG$1, 'Starting transaction:', action); // Do all transactions as readwrite against all object stores, since we
    // are the only reader/writer.

    return this.simpleDb.runTransaction(mode === 'readonly' ? 'readonly' : 'readwrite', ALL_STORES, function (simpleDbTxn) {
      if (mode === 'readwrite-primary') {
        // While we merely verify that we have (or can acquire) the lease
        // immediately, we wait to extend the primary lease until after
        // executing transactionOperation(). This ensures that even if the
        // transactionOperation takes a long time, we'll use a recent
        // leaseTimestampMs in the extended (or newly acquired) lease.
        return _this.verifyPrimaryLease(simpleDbTxn).next(function (success) {
          if (!success) {
            error("Failed to obtain primary lease for action '" + action + "'.");
            _this.isPrimary = false;

            _this.queue.enqueueAndForget(function () {
              return _this.primaryStateListener(false);
            });

            throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_LOST_ERROR_MSG);
          }

          return transactionOperation(new IndexedDbTransaction(simpleDbTxn, _this.listenSequence.next()));
        }).next(function (result) {
          return _this.acquireOrExtendPrimaryLease(simpleDbTxn).next(function () {
            return result;
          });
        });
      } else {
        return _this.verifyAllowTabSynchronization(simpleDbTxn).next(function () {
          return transactionOperation(new IndexedDbTransaction(simpleDbTxn, _this.listenSequence.next()));
        });
      }
    });
  };
  /**
   * Verifies that the current tab is the primary leaseholder or alternatively
   * that the leaseholder has opted into multi-tab synchronization.
   */
  // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer
  // be turned off.


  IndexedDbPersistence.prototype.verifyAllowTabSynchronization = function (txn) {
    var _this = this;

    var store = primaryClientStore(txn);
    return store.get(DbPrimaryClient.key).next(function (currentPrimary) {
      var currentLeaseIsValid = currentPrimary !== null && _this.isWithinAge(currentPrimary.leaseTimestampMs, MAX_PRIMARY_ELIGIBLE_AGE_MS) && !_this.isClientZombied(currentPrimary.ownerId);

      if (currentLeaseIsValid && !_this.isLocalClient(currentPrimary)) {
        if (!currentPrimary.allowTabSynchronization) {
          throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);
        }
      }
    });
  };
  /**
   * Obtains or extends the new primary lease for the local client. This
   * method does not verify that the client is eligible for this lease.
   */


  IndexedDbPersistence.prototype.acquireOrExtendPrimaryLease = function (txn) {
    var newPrimary = new DbPrimaryClient(this.clientId, this.allowTabSynchronization, Date.now());
    return primaryClientStore(txn).put(DbPrimaryClient.key, newPrimary);
  };

  IndexedDbPersistence.isAvailable = function () {
    return SimpleDb.isAvailable();
  };
  /**
   * Generates a string used as a prefix when storing data in IndexedDB and
   * LocalStorage.
   */


  IndexedDbPersistence.buildStoragePrefix = function (databaseInfo) {
    // Use two different prefix formats:
    //
    //   * firestore / persistenceKey / projectID . databaseID / ...
    //   * firestore / persistenceKey / projectID / ...
    //
    // projectIDs are DNS-compatible names and cannot contain dots
    // so there's no danger of collisions.
    var database = databaseInfo.databaseId.projectId;

    if (!databaseInfo.databaseId.isDefaultDatabase) {
      database += '.' + databaseInfo.databaseId.database;
    }

    return 'firestore/' + databaseInfo.persistenceKey + '/' + database + '/';
  };
  /** Checks the primary lease and removes it if we are the current primary. */


  IndexedDbPersistence.prototype.releasePrimaryLeaseIfHeld = function (txn) {
    var _this = this;

    var store = primaryClientStore(txn);
    return store.get(DbPrimaryClient.key).next(function (primaryClient) {
      if (_this.isLocalClient(primaryClient)) {
        debug(LOG_TAG$1, 'Releasing primary lease.');
        return store.delete(DbPrimaryClient.key);
      } else {
        return PersistencePromise.resolve();
      }
    });
  };
  /** Verifies that `updateTimeMs` is within `maxAgeMs`. */


  IndexedDbPersistence.prototype.isWithinAge = function (updateTimeMs, maxAgeMs) {
    var now = Date.now();
    var minAcceptable = now - maxAgeMs;
    var maxAcceptable = now;

    if (updateTimeMs < minAcceptable) {
      return false;
    } else if (updateTimeMs > maxAcceptable) {
      error("Detected an update time that is in the future: " + updateTimeMs + " > " + maxAcceptable);
      return false;
    }

    return true;
  };

  IndexedDbPersistence.prototype.attachVisibilityHandler = function () {
    var _this = this;

    if (this.document !== null && typeof this.document.addEventListener === 'function') {
      this.documentVisibilityHandler = function () {
        _this.queue.enqueueAndForget(function () {
          _this.inForeground = _this.document.visibilityState === 'visible';
          return _this.updateClientMetadataAndTryBecomePrimary();
        });
      };

      this.document.addEventListener('visibilitychange', this.documentVisibilityHandler);
      this.inForeground = this.document.visibilityState === 'visible';
    }
  };

  IndexedDbPersistence.prototype.detachVisibilityHandler = function () {
    if (this.documentVisibilityHandler) {
      assert(this.document !== null && typeof this.document.addEventListener === 'function', "Expected 'document.addEventListener' to be a function");
      this.document.removeEventListener('visibilitychange', this.documentVisibilityHandler);
      this.documentVisibilityHandler = null;
    }
  };
  /**
   * Attaches a window.unload handler that will synchronously write our
   * clientId to a "zombie client id" location in LocalStorage. This can be used
   * by tabs trying to acquire the primary lease to determine that the lease
   * is no longer valid even if the timestamp is recent. This is particularly
   * important for the refresh case (so the tab correctly re-acquires the
   * primary lease). LocalStorage is used for this rather than IndexedDb because
   * it is a synchronous API and so can be used reliably from  an unload
   * handler.
   */


  IndexedDbPersistence.prototype.attachWindowUnloadHook = function () {
    var _this = this;

    if (typeof this.window.addEventListener === 'function') {
      this.windowUnloadHandler = function () {
        // Note: In theory, this should be scheduled on the AsyncQueue since it
        // accesses internal state. We execute this code directly during shutdown
        // to make sure it gets a chance to run.
        _this.markClientZombied();

        _this.queue.enqueueAndForget(function () {
          // Attempt graceful shutdown (including releasing our primary lease),
          // but there's no guarantee it will complete.
          return _this.shutdown();
        });
      };

      this.window.addEventListener('unload', this.windowUnloadHandler);
    }
  };

  IndexedDbPersistence.prototype.detachWindowUnloadHook = function () {
    if (this.windowUnloadHandler) {
      assert(typeof this.window.removeEventListener === 'function', "Expected 'window.removeEventListener' to be a function");
      this.window.removeEventListener('unload', this.windowUnloadHandler);
      this.windowUnloadHandler = null;
    }
  };
  /**
   * Returns whether a client is "zombied" based on its LocalStorage entry.
   * Clients become zombied when their tab closes without running all of the
   * cleanup logic in `shutdown()`.
   */


  IndexedDbPersistence.prototype.isClientZombied = function (clientId) {
    try {
      var isZombied = this.webStorage.getItem(this.zombiedClientLocalStorageKey(clientId)) !== null;
      debug(LOG_TAG$1, "Client '" + clientId + "' " + (isZombied ? 'is' : 'is not') + " zombied in LocalStorage");
      return isZombied;
    } catch (e) {
      // Gracefully handle if LocalStorage isn't working.
      error(LOG_TAG$1, 'Failed to get zombied client id.', e);
      return false;
    }
  };
  /**
   * Record client as zombied (a client that had its tab closed). Zombied
   * clients are ignored during primary tab selection.
   */


  IndexedDbPersistence.prototype.markClientZombied = function () {
    try {
      this.webStorage.setItem(this.zombiedClientLocalStorageKey(this.clientId), String(Date.now()));
    } catch (e) {
      // Gracefully handle if LocalStorage isn't available / working.
      error('Failed to set zombie client id.', e);
    }
  };
  /** Removes the zombied client entry if it exists. */


  IndexedDbPersistence.prototype.removeClientZombiedEntry = function () {
    try {
      this.webStorage.removeItem(this.zombiedClientLocalStorageKey(this.clientId));
    } catch (e) {// Ignore
    }
  };

  IndexedDbPersistence.prototype.zombiedClientLocalStorageKey = function (clientId) {
    return ZOMBIED_CLIENTS_KEY_PREFIX + "_" + this.persistenceKey + "_" + clientId;
  };
  /**
   * The name of the main (and currently only) IndexedDB database. this name is
   * appended to the prefix provided to the IndexedDbPersistence constructor.
   */


  IndexedDbPersistence.MAIN_DATABASE = 'main';
  return IndexedDbPersistence;
}();

function isPrimaryLeaseLostError(err) {
  return err.code === Code.FAILED_PRECONDITION && err.message === PRIMARY_LEASE_LOST_ERROR_MSG;
}
/**
 * Verifies the error thrown by a LocalStore operation. If a LocalStore
 * operation fails because the primary lease has been taken by another client,
 * we ignore the error (the persistence layer will immediately call
 * `applyPrimaryLease` to propagate the primary state change). All other errors
 * are re-thrown.
 *
 * @param err An error returned by a LocalStore operation.
 * @return A Promise that resolves after we recovered, or the original error.
 */


function ignoreIfPrimaryLeaseLoss(err) {
  return tslib_1.__awaiter(this, void 0, void 0, function () {
    return tslib_1.__generator(this, function (_a) {
      if (isPrimaryLeaseLostError(err)) {
        debug(LOG_TAG$1, 'Unexpectedly lost primary lease');
      } else {
        throw err;
      }

      return [2
      /*return*/
      ];
    });
  });
}
/**
 * Helper to get a typed SimpleDbStore for the primary client object store.
 */


function primaryClientStore(txn) {
  return txn.store(DbPrimaryClient.store);
}
/**
 * Helper to get a typed SimpleDbStore for the client metadata object store.
 */


function clientMetadataStore(txn) {
  return txn.store(DbClientMetadata.store);
}
/** Provides LRU functionality for IndexedDB persistence. */


var IndexedDbLruDelegate =
/** @class */
function () {
  function IndexedDbLruDelegate(db, params) {
    this.db = db;
    this.garbageCollector = new LruGarbageCollector(this, params);
  }

  IndexedDbLruDelegate.prototype.getSequenceNumberCount = function (txn) {
    var docCountPromise = this.orphanedDocmentCount(txn);
    var targetCountPromise = this.db.getQueryCache().getQueryCount(txn);
    return targetCountPromise.next(function (targetCount) {
      return docCountPromise.next(function (docCount) {
        return targetCount + docCount;
      });
    });
  };

  IndexedDbLruDelegate.prototype.orphanedDocmentCount = function (txn) {
    var orphanedCount = 0;
    return this.forEachOrphanedDocumentSequenceNumber(txn, function (_) {
      orphanedCount++;
    }).next(function () {
      return orphanedCount;
    });
  };

  IndexedDbLruDelegate.prototype.forEachTarget = function (txn, f) {
    return this.db.getQueryCache().forEachTarget(txn, f);
  };

  IndexedDbLruDelegate.prototype.forEachOrphanedDocumentSequenceNumber = function (txn, f) {
    return this.forEachOrphanedDocument(txn, function (docKey, sequenceNumber) {
      return f(sequenceNumber);
    });
  };

  IndexedDbLruDelegate.prototype.setInMemoryPins = function (inMemoryPins) {
    this.inMemoryPins = inMemoryPins;
  };

  IndexedDbLruDelegate.prototype.addReference = function (txn, key) {
    return writeSentinelKey(txn, key);
  };

  IndexedDbLruDelegate.prototype.removeReference = function (txn, key) {
    return writeSentinelKey(txn, key);
  };

  IndexedDbLruDelegate.prototype.removeTargets = function (txn, upperBound, activeTargetIds) {
    return this.db.getQueryCache().removeTargets(txn, upperBound, activeTargetIds);
  };

  IndexedDbLruDelegate.prototype.removeMutationReference = function (txn, key) {
    return writeSentinelKey(txn, key);
  };
  /**
   * Returns true if anything would prevent this document from being garbage
   * collected, given that the document in question is not present in any
   * targets and has a sequence number less than or equal to the upper bound for
   * the collection run.
   */


  IndexedDbLruDelegate.prototype.isPinned = function (txn, docKey) {
    if (this.inMemoryPins.containsKey(docKey)) {
      return PersistencePromise.resolve(true);
    } else {
      return mutationQueuesContainKey(txn, docKey);
    }
  };

  IndexedDbLruDelegate.prototype.removeOrphanedDocuments = function (txn, upperBound) {
    var _this = this;

    var count = 0;
    var bytesRemoved = 0;
    var promises = [];
    var iteration = this.forEachOrphanedDocument(txn, function (docKey, sequenceNumber) {
      if (sequenceNumber <= upperBound) {
        var p = _this.isPinned(txn, docKey).next(function (isPinned) {
          if (!isPinned) {
            count++;
            return _this.removeOrphanedDocument(txn, docKey).next(function (documentBytes) {
              bytesRemoved += documentBytes;
            });
          }
        });

        promises.push(p);
      }
    }); // Wait for iteration first to make sure we have a chance to add all of the
    // removal promises to the array.

    return iteration.next(function () {
      return PersistencePromise.waitFor(promises);
    }).next(function () {
      return _this.db.getRemoteDocumentCache().updateSize(txn, -bytesRemoved);
    }).next(function () {
      return count;
    });
  };
  /**
   * Clears a document from the cache. The document is assumed to be orphaned, so target-document
   * associations are not queried. We remove it from the remote document cache, as well as remove
   * its sentinel row.
   */


  IndexedDbLruDelegate.prototype.removeOrphanedDocument = function (txn, docKey) {
    var totalBytesRemoved = 0;
    var documentCache = this.db.getRemoteDocumentCache();
    return PersistencePromise.waitFor([documentTargetStore(txn).delete(sentinelKey$1(docKey)), documentCache.removeEntry(txn, docKey).next(function (bytesRemoved) {
      totalBytesRemoved += bytesRemoved;
    })]).next(function () {
      return totalBytesRemoved;
    });
  };

  IndexedDbLruDelegate.prototype.removeTarget = function (txn, queryData) {
    var updated = queryData.copy({
      sequenceNumber: txn.currentSequenceNumber
    });
    return this.db.getQueryCache().updateQueryData(txn, updated);
  };

  IndexedDbLruDelegate.prototype.updateLimboDocument = function (txn, key) {
    return writeSentinelKey(txn, key);
  };
  /**
   * Call provided function for each document in the cache that is 'orphaned'. Orphaned
   * means not a part of any target, so the only entry in the target-document index for
   * that document will be the sentinel row (targetId 0), which will also have the sequence
   * number for the last time the document was accessed.
   */


  IndexedDbLruDelegate.prototype.forEachOrphanedDocument = function (txn, f) {
    var store = documentTargetStore(txn);
    var nextToReport = ListenSequence.INVALID;
    var nextPath;
    return store.iterate({
      index: DbTargetDocument.documentTargetsIndex
    }, function (_a, _b) {
      var targetId = _a[0],
          docKey = _a[1];
      var path = _b.path,
          sequenceNumber = _b.sequenceNumber;

      if (targetId === 0) {
        // if nextToReport is valid, report it, this is a new key so the
        // last one must not be a member of any targets.
        if (nextToReport !== ListenSequence.INVALID) {
          f(new DocumentKey(decode(nextPath)), nextToReport);
        } // set nextToReport to be this sequence number. It's the next one we
        // might report, if we don't find any targets for this document.
        // Note that the sequence number must be defined when the targetId
        // is 0.


        nextToReport = sequenceNumber;
        nextPath = path;
      } else {
        // set nextToReport to be invalid, we know we don't need to report
        // this one since we found a target for it.
        nextToReport = ListenSequence.INVALID;
      }
    }).next(function () {
      // Since we report sequence numbers after getting to the next key, we
      // need to check if the last key we iterated over was an orphaned
      // document and report it.
      if (nextToReport !== ListenSequence.INVALID) {
        f(new DocumentKey(decode(nextPath)), nextToReport);
      }
    });
  };

  IndexedDbLruDelegate.prototype.getCacheSize = function (txn) {
    return this.db.getRemoteDocumentCache().getSize(txn);
  };

  return IndexedDbLruDelegate;
}();

function sentinelKey$1(key) {
  return [0, encode(key.path)];
}
/**
 * @return A value suitable for writing a sentinel row in the target-document
 * store.
 */


function sentinelRow(key, sequenceNumber) {
  return new DbTargetDocument(0, encode(key.path), sequenceNumber);
}

function writeSentinelKey(txn, key) {
  return documentTargetStore(txn).put(sentinelRow(key, txn.currentSequenceNumber));
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var TypeOrder;

(function (TypeOrder) {
  // This order is defined by the backend.
  TypeOrder[TypeOrder["NullValue"] = 0] = "NullValue";
  TypeOrder[TypeOrder["BooleanValue"] = 1] = "BooleanValue";
  TypeOrder[TypeOrder["NumberValue"] = 2] = "NumberValue";
  TypeOrder[TypeOrder["TimestampValue"] = 3] = "TimestampValue";
  TypeOrder[TypeOrder["StringValue"] = 4] = "StringValue";
  TypeOrder[TypeOrder["BlobValue"] = 5] = "BlobValue";
  TypeOrder[TypeOrder["RefValue"] = 6] = "RefValue";
  TypeOrder[TypeOrder["GeoPointValue"] = 7] = "GeoPointValue";
  TypeOrder[TypeOrder["ArrayValue"] = 8] = "ArrayValue";
  TypeOrder[TypeOrder["ObjectValue"] = 9] = "ObjectValue";
})(TypeOrder || (TypeOrder = {}));
/** Defines the return value for pending server timestamps. */


var ServerTimestampBehavior;

(function (ServerTimestampBehavior) {
  ServerTimestampBehavior[ServerTimestampBehavior["Default"] = 0] = "Default";
  ServerTimestampBehavior[ServerTimestampBehavior["Estimate"] = 1] = "Estimate";
  ServerTimestampBehavior[ServerTimestampBehavior["Previous"] = 2] = "Previous";
})(ServerTimestampBehavior || (ServerTimestampBehavior = {}));
/** Holds properties that define field value deserialization options. */


var FieldValueOptions =
/** @class */
function () {
  function FieldValueOptions(serverTimestampBehavior, timestampsInSnapshots) {
    this.serverTimestampBehavior = serverTimestampBehavior;
    this.timestampsInSnapshots = timestampsInSnapshots;
  }

  FieldValueOptions.fromSnapshotOptions = function (options, timestampsInSnapshots) {
    switch (options.serverTimestamps) {
      case 'estimate':
        return new FieldValueOptions(ServerTimestampBehavior.Estimate, timestampsInSnapshots);

      case 'previous':
        return new FieldValueOptions(ServerTimestampBehavior.Previous, timestampsInSnapshots);

      case 'none': // Fall-through intended.

      case undefined:
        return new FieldValueOptions(ServerTimestampBehavior.Default, timestampsInSnapshots);

      default:
        return fail('fromSnapshotOptions() called with invalid options.');
    }
  };

  return FieldValueOptions;
}();
/**
 * A field value represents a datatype as stored by Firestore.
 */


var FieldValue =
/** @class */
function () {
  function FieldValue() {}

  FieldValue.prototype.toString = function () {
    var val = this.value();
    return val === null ? 'null' : val.toString();
  };

  FieldValue.prototype.defaultCompareTo = function (other) {
    assert(this.typeOrder !== other.typeOrder, 'Default compareTo should not be used for values of same type.');
    var cmp = primitiveComparator(this.typeOrder, other.typeOrder);
    return cmp;
  };

  return FieldValue;
}();

var NullValue =
/** @class */
function (_super) {
  tslib_1.__extends(NullValue, _super);

  function NullValue() {
    var _this = _super.call(this) || this;

    _this.typeOrder = TypeOrder.NullValue; // internalValue is unused but we add it to work around
    // https://github.com/Microsoft/TypeScript/issues/15585

    _this.internalValue = null;
    return _this;
  }

  NullValue.prototype.value = function (options) {
    return null;
  };

  NullValue.prototype.isEqual = function (other) {
    return other instanceof NullValue;
  };

  NullValue.prototype.compareTo = function (other) {
    if (other instanceof NullValue) {
      return 0;
    }

    return this.defaultCompareTo(other);
  };

  NullValue.INSTANCE = new NullValue();
  return NullValue;
}(FieldValue);

var BooleanValue =
/** @class */
function (_super) {
  tslib_1.__extends(BooleanValue, _super);

  function BooleanValue(internalValue) {
    var _this = _super.call(this) || this;

    _this.internalValue = internalValue;
    _this.typeOrder = TypeOrder.BooleanValue;
    return _this;
  }

  BooleanValue.prototype.value = function (options) {
    return this.internalValue;
  };

  BooleanValue.prototype.isEqual = function (other) {
    return other instanceof BooleanValue && this.internalValue === other.internalValue;
  };

  BooleanValue.prototype.compareTo = function (other) {
    if (other instanceof BooleanValue) {
      return primitiveComparator(this, other);
    }

    return this.defaultCompareTo(other);
  };

  BooleanValue.of = function (value) {
    return value ? BooleanValue.TRUE : BooleanValue.FALSE;
  };

  BooleanValue.TRUE = new BooleanValue(true);
  BooleanValue.FALSE = new BooleanValue(false);
  return BooleanValue;
}(FieldValue);
/** Base class for IntegerValue and DoubleValue. */


var NumberValue =
/** @class */
function (_super) {
  tslib_1.__extends(NumberValue, _super);

  function NumberValue(internalValue) {
    var _this = _super.call(this) || this;

    _this.internalValue = internalValue;
    _this.typeOrder = TypeOrder.NumberValue;
    return _this;
  }

  NumberValue.prototype.value = function (options) {
    return this.internalValue;
  };

  NumberValue.prototype.compareTo = function (other) {
    if (other instanceof NumberValue) {
      return numericComparator(this.internalValue, other.internalValue);
    }

    return this.defaultCompareTo(other);
  };

  return NumberValue;
}(FieldValue);
/** Utility function to compare doubles (using Firestore semantics for NaN). */


function numericComparator(left, right) {
  if (left < right) {
    return -1;
  } else if (left > right) {
    return 1;
  } else if (left === right) {
    return 0;
  } else {
    // one or both are NaN.
    if (isNaN(left)) {
      return isNaN(right) ? 0 : -1;
    } else {
      return 1;
    }
  }
}
/**
 * Utility function to check numbers for equality using Firestore semantics
 * (NaN === NaN, -0.0 !== 0.0).
 */


function numericEquals(left, right) {
  // Implemented based on Object.is() polyfill from
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
  if (left === right) {
    // +0 != -0
    return left !== 0 || 1 / left === 1 / right;
  } else {
    // NaN == NaN
    return left !== left && right !== right;
  }
}

var IntegerValue =
/** @class */
function (_super) {
  tslib_1.__extends(IntegerValue, _super);

  function IntegerValue(internalValue) {
    return _super.call(this, internalValue) || this;
  }

  IntegerValue.prototype.isEqual = function (other) {
    // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,
    // but that doesn't make them equal via isEqual().
    if (other instanceof IntegerValue) {
      return numericEquals(this.internalValue, other.internalValue);
    } else {
      return false;
    }
  };

  return IntegerValue;
}(NumberValue);

var DoubleValue =
/** @class */
function (_super) {
  tslib_1.__extends(DoubleValue, _super);

  function DoubleValue(internalValue) {
    var _this = _super.call(this, internalValue) || this;

    _this.internalValue = internalValue;
    return _this;
  }

  DoubleValue.prototype.isEqual = function (other) {
    // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,
    // but that doesn't make them equal via isEqual().
    if (other instanceof DoubleValue) {
      return numericEquals(this.internalValue, other.internalValue);
    } else {
      return false;
    }
  };

  DoubleValue.NAN = new DoubleValue(NaN);
  DoubleValue.POSITIVE_INFINITY = new DoubleValue(Infinity);
  DoubleValue.NEGATIVE_INFINITY = new DoubleValue(-Infinity);
  return DoubleValue;
}(NumberValue); // TODO(b/37267885): Add truncation support


var StringValue =
/** @class */
function (_super) {
  tslib_1.__extends(StringValue, _super);

  function StringValue(internalValue) {
    var _this = _super.call(this) || this;

    _this.internalValue = internalValue;
    _this.typeOrder = TypeOrder.StringValue;
    return _this;
  }

  StringValue.prototype.value = function (options) {
    return this.internalValue;
  };

  StringValue.prototype.isEqual = function (other) {
    return other instanceof StringValue && this.internalValue === other.internalValue;
  };

  StringValue.prototype.compareTo = function (other) {
    if (other instanceof StringValue) {
      return primitiveComparator(this.internalValue, other.internalValue);
    }

    return this.defaultCompareTo(other);
  };

  return StringValue;
}(FieldValue);

var TimestampValue =
/** @class */
function (_super) {
  tslib_1.__extends(TimestampValue, _super);

  function TimestampValue(internalValue) {
    var _this = _super.call(this) || this;

    _this.internalValue = internalValue;
    _this.typeOrder = TypeOrder.TimestampValue;
    return _this;
  }

  TimestampValue.prototype.value = function (options) {
    if (!options || options.timestampsInSnapshots) {
      return this.internalValue;
    } else {
      return this.internalValue.toDate();
    }
  };

  TimestampValue.prototype.isEqual = function (other) {
    return other instanceof TimestampValue && this.internalValue.isEqual(other.internalValue);
  };

  TimestampValue.prototype.compareTo = function (other) {
    if (other instanceof TimestampValue) {
      return this.internalValue._compareTo(other.internalValue);
    } else if (other instanceof ServerTimestampValue) {
      // Concrete timestamps come before server timestamps.
      return -1;
    } else {
      return this.defaultCompareTo(other);
    }
  };

  return TimestampValue;
}(FieldValue);
/**
 * Represents a locally-applied ServerTimestamp.
 *
 * Notes:
 * - ServerTimestampValue instances are created as the result of applying a
 *   TransformMutation (see TransformMutation.applyTo()). They can only exist in
 *   the local view of a document. Therefore they do not need to be parsed or
 *   serialized.
 * - When evaluated locally (e.g. for snapshot.data()), they by default
 *   evaluate to `null`. This behavior can be configured by passing custom
 *   FieldValueOptions to value().
 * - With respect to other ServerTimestampValues, they sort by their
 *   localWriteTime.
 */


var ServerTimestampValue =
/** @class */
function (_super) {
  tslib_1.__extends(ServerTimestampValue, _super);

  function ServerTimestampValue(localWriteTime, previousValue) {
    var _this = _super.call(this) || this;

    _this.localWriteTime = localWriteTime;
    _this.previousValue = previousValue;
    _this.typeOrder = TypeOrder.TimestampValue;
    return _this;
  }

  ServerTimestampValue.prototype.value = function (options) {
    if (options && options.serverTimestampBehavior === ServerTimestampBehavior.Estimate) {
      return new TimestampValue(this.localWriteTime).value(options);
    } else if (options && options.serverTimestampBehavior === ServerTimestampBehavior.Previous) {
      return this.previousValue ? this.previousValue.value(options) : null;
    } else {
      return null;
    }
  };

  ServerTimestampValue.prototype.isEqual = function (other) {
    return other instanceof ServerTimestampValue && this.localWriteTime.isEqual(other.localWriteTime);
  };

  ServerTimestampValue.prototype.compareTo = function (other) {
    if (other instanceof ServerTimestampValue) {
      return this.localWriteTime._compareTo(other.localWriteTime);
    } else if (other instanceof TimestampValue) {
      // Server timestamps come after all concrete timestamps.
      return 1;
    } else {
      return this.defaultCompareTo(other);
    }
  };

  ServerTimestampValue.prototype.toString = function () {
    return '<ServerTimestamp localTime=' + this.localWriteTime.toString() + '>';
  };

  return ServerTimestampValue;
}(FieldValue);

var BlobValue =
/** @class */
function (_super) {
  tslib_1.__extends(BlobValue, _super);

  function BlobValue(internalValue) {
    var _this = _super.call(this) || this;

    _this.internalValue = internalValue;
    _this.typeOrder = TypeOrder.BlobValue;
    return _this;
  }

  BlobValue.prototype.value = function (options) {
    return this.internalValue;
  };

  BlobValue.prototype.isEqual = function (other) {
    return other instanceof BlobValue && this.internalValue.isEqual(other.internalValue);
  };

  BlobValue.prototype.compareTo = function (other) {
    if (other instanceof BlobValue) {
      return this.internalValue._compareTo(other.internalValue);
    }

    return this.defaultCompareTo(other);
  };

  return BlobValue;
}(FieldValue);

var RefValue =
/** @class */
function (_super) {
  tslib_1.__extends(RefValue, _super);

  function RefValue(databaseId, key) {
    var _this = _super.call(this) || this;

    _this.databaseId = databaseId;
    _this.key = key;
    _this.typeOrder = TypeOrder.RefValue;
    return _this;
  }

  RefValue.prototype.value = function (options) {
    return this.key;
  };

  RefValue.prototype.isEqual = function (other) {
    if (other instanceof RefValue) {
      return this.key.isEqual(other.key) && this.databaseId.isEqual(other.databaseId);
    } else {
      return false;
    }
  };

  RefValue.prototype.compareTo = function (other) {
    if (other instanceof RefValue) {
      var cmp = this.databaseId.compareTo(other.databaseId);
      return cmp !== 0 ? cmp : DocumentKey.comparator(this.key, other.key);
    }

    return this.defaultCompareTo(other);
  };

  return RefValue;
}(FieldValue);

var GeoPointValue =
/** @class */
function (_super) {
  tslib_1.__extends(GeoPointValue, _super);

  function GeoPointValue(internalValue) {
    var _this = _super.call(this) || this;

    _this.internalValue = internalValue;
    _this.typeOrder = TypeOrder.GeoPointValue;
    return _this;
  }

  GeoPointValue.prototype.value = function (options) {
    return this.internalValue;
  };

  GeoPointValue.prototype.isEqual = function (other) {
    return other instanceof GeoPointValue && this.internalValue.isEqual(other.internalValue);
  };

  GeoPointValue.prototype.compareTo = function (other) {
    if (other instanceof GeoPointValue) {
      return this.internalValue._compareTo(other.internalValue);
    }

    return this.defaultCompareTo(other);
  };

  return GeoPointValue;
}(FieldValue);

var ObjectValue =
/** @class */
function (_super) {
  tslib_1.__extends(ObjectValue, _super);

  function ObjectValue(internalValue) {
    var _this = _super.call(this) || this;

    _this.internalValue = internalValue;
    _this.typeOrder = TypeOrder.ObjectValue;
    return _this;
  }

  ObjectValue.prototype.value = function (options) {
    var result = {};
    this.internalValue.inorderTraversal(function (key, val) {
      result[key] = val.value(options);
    });
    return result;
  };

  ObjectValue.prototype.forEach = function (action) {
    this.internalValue.inorderTraversal(action);
  };

  ObjectValue.prototype.isEqual = function (other) {
    if (other instanceof ObjectValue) {
      var it1 = this.internalValue.getIterator();
      var it2 = other.internalValue.getIterator();

      while (it1.hasNext() && it2.hasNext()) {
        var next1 = it1.getNext();
        var next2 = it2.getNext();

        if (next1.key !== next2.key || !next1.value.isEqual(next2.value)) {
          return false;
        }
      }

      return !it1.hasNext() && !it2.hasNext();
    }

    return false;
  };

  ObjectValue.prototype.compareTo = function (other) {
    if (other instanceof ObjectValue) {
      var it1 = this.internalValue.getIterator();
      var it2 = other.internalValue.getIterator();

      while (it1.hasNext() && it2.hasNext()) {
        var next1 = it1.getNext();
        var next2 = it2.getNext();
        var cmp = primitiveComparator(next1.key, next2.key) || next1.value.compareTo(next2.value);

        if (cmp) {
          return cmp;
        }
      } // Only equal if both iterators are exhausted


      return primitiveComparator(it1.hasNext(), it2.hasNext());
    } else {
      return this.defaultCompareTo(other);
    }
  };

  ObjectValue.prototype.set = function (path, to) {
    assert(!path.isEmpty(), 'Cannot set field for empty path on ObjectValue');

    if (path.length === 1) {
      return this.setChild(path.firstSegment(), to);
    } else {
      var child = this.child(path.firstSegment());

      if (!(child instanceof ObjectValue)) {
        child = ObjectValue.EMPTY;
      }

      var newChild = child.set(path.popFirst(), to);
      return this.setChild(path.firstSegment(), newChild);
    }
  };

  ObjectValue.prototype.delete = function (path) {
    assert(!path.isEmpty(), 'Cannot delete field for empty path on ObjectValue');

    if (path.length === 1) {
      return new ObjectValue(this.internalValue.remove(path.firstSegment()));
    } else {
      // nested field
      var child = this.child(path.firstSegment());

      if (child instanceof ObjectValue) {
        var newChild = child.delete(path.popFirst());
        return new ObjectValue(this.internalValue.insert(path.firstSegment(), newChild));
      } else {
        // Don't actually change a primitive value to an object for a delete
        return this;
      }
    }
  };

  ObjectValue.prototype.contains = function (path) {
    return this.field(path) !== undefined;
  };

  ObjectValue.prototype.field = function (path) {
    assert(!path.isEmpty(), "Can't get field of empty path");
    var field = this;
    path.forEach(function (pathSegment) {
      if (field instanceof ObjectValue) {
        field = field.internalValue.get(pathSegment) || undefined;
      } else {
        field = undefined;
      }
    });
    return field;
  };

  ObjectValue.prototype.toString = function () {
    return this.internalValue.toString();
  };

  ObjectValue.prototype.child = function (childName) {
    return this.internalValue.get(childName) || undefined;
  };

  ObjectValue.prototype.setChild = function (childName, value) {
    return new ObjectValue(this.internalValue.insert(childName, value));
  };

  ObjectValue.EMPTY = new ObjectValue(new SortedMap(primitiveComparator));
  return ObjectValue;
}(FieldValue);

var ArrayValue =
/** @class */
function (_super) {
  tslib_1.__extends(ArrayValue, _super);

  function ArrayValue(internalValue) {
    var _this = _super.call(this) || this;

    _this.internalValue = internalValue;
    _this.typeOrder = TypeOrder.ArrayValue;
    return _this;
  }

  ArrayValue.prototype.value = function (options) {
    return this.internalValue.map(function (v) {
      return v.value(options);
    });
  };

  ArrayValue.prototype.forEach = function (action) {
    this.internalValue.forEach(action);
  };

  ArrayValue.prototype.isEqual = function (other) {
    if (other instanceof ArrayValue) {
      if (this.internalValue.length !== other.internalValue.length) {
        return false;
      }

      for (var i = 0; i < this.internalValue.length; i++) {
        if (!this.internalValue[i].isEqual(other.internalValue[i])) {
          return false;
        }
      }

      return true;
    }

    return false;
  };

  ArrayValue.prototype.compareTo = function (other) {
    if (other instanceof ArrayValue) {
      var minLength = Math.min(this.internalValue.length, other.internalValue.length);

      for (var i = 0; i < minLength; i++) {
        var cmp = this.internalValue[i].compareTo(other.internalValue[i]);

        if (cmp) {
          return cmp;
        }
      }

      return primitiveComparator(this.internalValue.length, other.internalValue.length);
    } else {
      return this.defaultCompareTo(other);
    }
  };

  ArrayValue.prototype.toString = function () {
    var descriptions = this.internalValue.map(function (v) {
      return v.toString();
    });
    return "[" + descriptions.join(',') + "]";
  };

  return ArrayValue;
}(FieldValue);
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provides a set of fields that can be used to partially patch a document.
 * FieldMask is used in conjunction with ObjectValue.
 * Examples:
 *   foo - Overwrites foo entirely with the provided value. If foo is not
 *         present in the companion ObjectValue, the field is deleted.
 *   foo.bar - Overwrites only the field bar of the object foo.
 *             If foo is not an object, foo is replaced with an object
 *             containing foo
 */


var FieldMask =
/** @class */
function () {
  function FieldMask(fields) {
    this.fields = fields; // TODO(dimond): validation of FieldMask
  }

  FieldMask.fromSet = function (fields) {
    return new FieldMask(fields);
  };

  FieldMask.fromArray = function (fields) {
    var fieldsAsSet = new SortedSet(FieldPath.comparator);
    fields.forEach(function (fieldPath) {
      return fieldsAsSet = fieldsAsSet.add(fieldPath);
    });
    return new FieldMask(fieldsAsSet);
  };
  /**
   * Verifies that `fieldPath` is included by at least one field in this field
   * mask.
   *
   * This is an O(n) operation, where `n` is the size of the field mask.
   */


  FieldMask.prototype.covers = function (fieldPath) {
    var found = false;
    this.fields.forEach(function (fieldMaskPath) {
      if (fieldMaskPath.isPrefixOf(fieldPath)) {
        found = true;
      }
    });
    return found;
  };
  /**
   * Applies this field mask to the provided object value and returns an object
   * that only contains fields that are specified in both the input object and
   * this field mask.
   */


  FieldMask.prototype.applyTo = function (data) {
    var filteredObject = ObjectValue.EMPTY;
    this.fields.forEach(function (fieldMaskPath) {
      if (fieldMaskPath.isEmpty()) {
        return data;
      } else {
        var newValue = data.field(fieldMaskPath);

        if (newValue !== undefined) {
          filteredObject = filteredObject.set(fieldMaskPath, newValue);
        }
      }
    });
    return filteredObject;
  };

  FieldMask.prototype.isEqual = function (other) {
    return this.fields.isEqual(other.fields);
  };

  return FieldMask;
}();
/** A field path and the TransformOperation to perform upon it. */


var FieldTransform =
/** @class */
function () {
  function FieldTransform(field, transform) {
    this.field = field;
    this.transform = transform;
  }

  Object.defineProperty(FieldTransform.prototype, "isIdempotent", {
    /** Whether this field transform is idempotent. */
    get: function () {
      return this.transform.isIdempotent;
    },
    enumerable: true,
    configurable: true
  });

  FieldTransform.prototype.isEqual = function (other) {
    return this.field.isEqual(other.field) && this.transform.isEqual(other.transform);
  };

  return FieldTransform;
}();
/** The result of successfully applying a mutation to the backend. */


var MutationResult =
/** @class */
function () {
  function MutationResult(
  /**
   * The version at which the mutation was committed:
   *
   * - For most operations, this is the updateTime in the WriteResult.
   * - For deletes, the commitTime of the WriteResponse (because deletes are
   *   not stored and have no updateTime).
   *
   * Note that these versions can be different: No-op writes will not change
   * the updateTime even though the commitTime advances.
   */
  version,
  /**
   * The resulting fields returned from the backend after a
   * TransformMutation has been committed. Contains one FieldValue for each
   * FieldTransform that was in the mutation.
   *
   * Will be null if the mutation was not a TransformMutation.
   */
  transformResults) {
    this.version = version;
    this.transformResults = transformResults;
  }

  return MutationResult;
}();

var MutationType;

(function (MutationType) {
  MutationType[MutationType["Set"] = 0] = "Set";
  MutationType[MutationType["Patch"] = 1] = "Patch";
  MutationType[MutationType["Transform"] = 2] = "Transform";
  MutationType[MutationType["Delete"] = 3] = "Delete";
})(MutationType || (MutationType = {}));
/**
 * Encodes a precondition for a mutation. This follows the model that the
 * backend accepts with the special case of an explicit "empty" precondition
 * (meaning no precondition).
 */


var Precondition =
/** @class */
function () {
  function Precondition(updateTime, exists) {
    this.updateTime = updateTime;
    this.exists = exists;
    assert(updateTime === undefined || exists === undefined, 'Precondition can specify "exists" or "updateTime" but not both');
  }
  /** Creates a new Precondition with an exists flag. */


  Precondition.exists = function (exists) {
    return new Precondition(undefined, exists);
  };
  /** Creates a new Precondition based on a version a document exists at. */


  Precondition.updateTime = function (version) {
    return new Precondition(version);
  };

  Object.defineProperty(Precondition.prototype, "isNone", {
    /** Returns whether this Precondition is empty. */
    get: function () {
      return this.updateTime === undefined && this.exists === undefined;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Returns true if the preconditions is valid for the given document
   * (or null if no document is available).
   */

  Precondition.prototype.isValidFor = function (maybeDoc) {
    if (this.updateTime !== undefined) {
      return maybeDoc instanceof Document && maybeDoc.version.isEqual(this.updateTime);
    } else if (this.exists !== undefined) {
      return this.exists === maybeDoc instanceof Document;
    } else {
      assert(this.isNone, 'Precondition should be empty');
      return true;
    }
  };

  Precondition.prototype.isEqual = function (other) {
    return equals(this.updateTime, other.updateTime) && this.exists === other.exists;
  };

  Precondition.NONE = new Precondition();
  return Precondition;
}();
/**
 * A mutation describes a self-contained change to a document. Mutations can
 * create, replace, delete, and update subsets of documents.
 *
 * Mutations not only act on the value of the document but also it version.
 *
 * For local mutations (mutations that haven't been committed yet), we preserve
 * the existing version for Set, Patch, and Transform mutations. For Delete
 * mutations, we reset the version to 0.
 *
 * Here's the expected transition table.
 *
 * MUTATION           APPLIED TO            RESULTS IN
 *
 * SetMutation        Document(v3)          Document(v3)
 * SetMutation        NoDocument(v3)        Document(v0)
 * SetMutation        null                  Document(v0)
 * PatchMutation      Document(v3)          Document(v3)
 * PatchMutation      NoDocument(v3)        NoDocument(v3)
 * PatchMutation      null                  null
 * TransformMutation  Document(v3)          Document(v3)
 * TransformMutation  NoDocument(v3)        NoDocument(v3)
 * TransformMutation  null                  null
 * DeleteMutation     Document(v3)          NoDocument(v0)
 * DeleteMutation     NoDocument(v3)        NoDocument(v0)
 * DeleteMutation     null                  NoDocument(v0)
 *
 * For acknowledged mutations, we use the updateTime of the WriteResponse as
 * the resulting version for Set, Patch, and Transform mutations. As deletes
 * have no explicit update time, we use the commitTime of the WriteResponse for
 * Delete mutations.
 *
 * If a mutation is acknowledged by the backend but fails the precondition check
 * locally, we return an `UnknownDocument` and rely on Watch to send us the
 * updated version.
 *
 * Note that TransformMutations don't create Documents (in the case of being
 * applied to a NoDocument), even though they would on the backend. This is
 * because the client always combines the TransformMutation with a SetMutation
 * or PatchMutation and we only want to apply the transform if the prior
 * mutation resulted in a Document (always true for a SetMutation, but not
 * necessarily for a PatchMutation).
 *
 * ## Subclassing Notes
 *
 * Subclasses of Mutation need to implement applyToRemoteDocument() and
 * applyToLocalView() to implement the actual behavior of applying the mutation
 * to some source document.
 */


var Mutation =
/** @class */
function () {
  function Mutation() {}

  Mutation.prototype.verifyKeyMatches = function (maybeDoc) {
    if (maybeDoc != null) {
      assert(maybeDoc.key.isEqual(this.key), 'Can only apply a mutation to a document with the same key');
    }
  };
  /**
   * Returns the version from the given document for use as the result of a
   * mutation. Mutations are defined to return the version of the base document
   * only if it is an existing document. Deleted and unknown documents have a
   * post-mutation version of SnapshotVersion.MIN.
   */


  Mutation.getPostMutationVersion = function (maybeDoc) {
    if (maybeDoc instanceof Document) {
      return maybeDoc.version;
    } else {
      return SnapshotVersion.MIN;
    }
  };

  return Mutation;
}();
/**
 * A mutation that creates or replaces the document at the given key with the
 * object value contents.
 */


var SetMutation =
/** @class */
function (_super) {
  tslib_1.__extends(SetMutation, _super);

  function SetMutation(key, value, precondition) {
    var _this = _super.call(this) || this;

    _this.key = key;
    _this.value = value;
    _this.precondition = precondition;
    _this.type = MutationType.Set;
    return _this;
  }

  SetMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {
    this.verifyKeyMatches(maybeDoc);
    assert(mutationResult.transformResults == null, 'Transform results received by SetMutation.'); // Unlike applyToLocalView, if we're applying a mutation to a remote
    // document the server has accepted the mutation so the precondition must
    // have held.

    var version = mutationResult.version;
    return new Document(this.key, version, this.value, {
      hasCommittedMutations: true
    });
  };

  SetMutation.prototype.applyToLocalView = function (maybeDoc, baseDoc, localWriteTime) {
    this.verifyKeyMatches(maybeDoc);

    if (!this.precondition.isValidFor(maybeDoc)) {
      return maybeDoc;
    }

    var version = Mutation.getPostMutationVersion(maybeDoc);
    return new Document(this.key, version, this.value, {
      hasLocalMutations: true
    });
  };

  Object.defineProperty(SetMutation.prototype, "isIdempotent", {
    get: function () {
      return true;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(SetMutation.prototype, "fieldMask", {
    get: function () {
      return null;
    },
    enumerable: true,
    configurable: true
  });

  SetMutation.prototype.isEqual = function (other) {
    return other instanceof SetMutation && this.key.isEqual(other.key) && this.value.isEqual(other.value) && this.precondition.isEqual(other.precondition);
  };

  return SetMutation;
}(Mutation);
/**
 * A mutation that modifies fields of the document at the given key with the
 * given values. The values are applied through a field mask:
 *
 *  * When a field is in both the mask and the values, the corresponding field
 *    is updated.
 *  * When a field is in neither the mask nor the values, the corresponding
 *    field is unmodified.
 *  * When a field is in the mask but not in the values, the corresponding field
 *    is deleted.
 *  * When a field is not in the mask but is in the values, the values map is
 *    ignored.
 */


var PatchMutation =
/** @class */
function (_super) {
  tslib_1.__extends(PatchMutation, _super);

  function PatchMutation(key, data, fieldMask, precondition) {
    var _this = _super.call(this) || this;

    _this.key = key;
    _this.data = data;
    _this.fieldMask = fieldMask;
    _this.precondition = precondition;
    _this.type = MutationType.Patch;
    return _this;
  }

  PatchMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {
    this.verifyKeyMatches(maybeDoc);
    assert(mutationResult.transformResults == null, 'Transform results received by PatchMutation.');

    if (!this.precondition.isValidFor(maybeDoc)) {
      // Since the mutation was not rejected, we know that the  precondition
      // matched on the backend. We therefore must not have the expected version
      // of the document in our cache and return an UnknownDocument with the
      // known updateTime.
      return new UnknownDocument(this.key, mutationResult.version);
    }

    var newData = this.patchDocument(maybeDoc);
    return new Document(this.key, mutationResult.version, newData, {
      hasCommittedMutations: true
    });
  };

  PatchMutation.prototype.applyToLocalView = function (maybeDoc, baseDoc, localWriteTime) {
    this.verifyKeyMatches(maybeDoc);

    if (!this.precondition.isValidFor(maybeDoc)) {
      return maybeDoc;
    }

    var version = Mutation.getPostMutationVersion(maybeDoc);
    var newData = this.patchDocument(maybeDoc);
    return new Document(this.key, version, newData, {
      hasLocalMutations: true
    });
  };

  Object.defineProperty(PatchMutation.prototype, "isIdempotent", {
    get: function () {
      return true;
    },
    enumerable: true,
    configurable: true
  });

  PatchMutation.prototype.isEqual = function (other) {
    return other instanceof PatchMutation && this.key.isEqual(other.key) && this.fieldMask.isEqual(other.fieldMask) && this.precondition.isEqual(other.precondition);
  };
  /**
   * Patches the data of document if available or creates a new document. Note
   * that this does not check whether or not the precondition of this patch
   * holds.
   */


  PatchMutation.prototype.patchDocument = function (maybeDoc) {
    var data;

    if (maybeDoc instanceof Document) {
      data = maybeDoc.data;
    } else {
      data = ObjectValue.EMPTY;
    }

    return this.patchObject(data);
  };

  PatchMutation.prototype.patchObject = function (data) {
    var _this = this;

    this.fieldMask.fields.forEach(function (fieldPath) {
      if (!fieldPath.isEmpty()) {
        var newValue = _this.data.field(fieldPath);

        if (newValue !== undefined) {
          data = data.set(fieldPath, newValue);
        } else {
          data = data.delete(fieldPath);
        }
      }
    });
    return data;
  };

  return PatchMutation;
}(Mutation);
/**
 * A mutation that modifies specific fields of the document with transform
 * operations. Currently the only supported transform is a server timestamp, but
 * IP Address, increment(n), etc. could be supported in the future.
 *
 * It is somewhat similar to a PatchMutation in that it patches specific fields
 * and has no effect when applied to a null or NoDocument (see comment on
 * Mutation for rationale).
 */


var TransformMutation =
/** @class */
function (_super) {
  tslib_1.__extends(TransformMutation, _super);

  function TransformMutation(key, fieldTransforms) {
    var _this = _super.call(this) || this;

    _this.key = key;
    _this.fieldTransforms = fieldTransforms;
    _this.type = MutationType.Transform; // NOTE: We set a precondition of exists: true as a safety-check, since we
    // always combine TransformMutations with a SetMutation or PatchMutation which
    // (if successful) should end up with an existing document.

    _this.precondition = Precondition.exists(true);
    return _this;
  }

  TransformMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {
    this.verifyKeyMatches(maybeDoc);
    assert(mutationResult.transformResults != null, 'Transform results missing for TransformMutation.');

    if (!this.precondition.isValidFor(maybeDoc)) {
      // Since the mutation was not rejected, we know that the  precondition
      // matched on the backend. We therefore must not have the expected version
      // of the document in our cache and return an UnknownDocument with the
      // known updateTime.
      return new UnknownDocument(this.key, mutationResult.version);
    }

    var doc = this.requireDocument(maybeDoc);
    var transformResults = this.serverTransformResults(maybeDoc, mutationResult.transformResults);
    var version = mutationResult.version;
    var newData = this.transformObject(doc.data, transformResults);
    return new Document(this.key, version, newData, {
      hasCommittedMutations: true
    });
  };

  TransformMutation.prototype.applyToLocalView = function (maybeDoc, baseDoc, localWriteTime) {
    this.verifyKeyMatches(maybeDoc);

    if (!this.precondition.isValidFor(maybeDoc)) {
      return maybeDoc;
    }

    var doc = this.requireDocument(maybeDoc);
    var transformResults = this.localTransformResults(localWriteTime, baseDoc);
    var newData = this.transformObject(doc.data, transformResults);
    return new Document(this.key, doc.version, newData, {
      hasLocalMutations: true
    });
  };

  Object.defineProperty(TransformMutation.prototype, "isIdempotent", {
    get: function () {
      for (var _i = 0, _a = this.fieldTransforms; _i < _a.length; _i++) {
        var fieldTransform = _a[_i];

        if (!fieldTransform.isIdempotent) {
          return false;
        }
      }

      return true;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TransformMutation.prototype, "fieldMask", {
    get: function () {
      var fieldMask = new SortedSet(FieldPath.comparator);
      this.fieldTransforms.forEach(function (transform) {
        return fieldMask = fieldMask.add(transform.field);
      });
      return new FieldMask(fieldMask);
    },
    enumerable: true,
    configurable: true
  });

  TransformMutation.prototype.isEqual = function (other) {
    return other instanceof TransformMutation && this.key.isEqual(other.key) && arrayEquals(this.fieldTransforms, other.fieldTransforms) && this.precondition.isEqual(other.precondition);
  };
  /**
   * Asserts that the given MaybeDocument is actually a Document and verifies
   * that it matches the key for this mutation. Since we only support
   * transformations with precondition exists this method is guaranteed to be
   * safe.
   */


  TransformMutation.prototype.requireDocument = function (maybeDoc) {
    assert(maybeDoc instanceof Document, 'Unknown MaybeDocument type ' + maybeDoc);
    var doc = maybeDoc;
    assert(doc.key.isEqual(this.key), 'Can only transform a document with the same key');
    return doc;
  };
  /**
   * Creates a list of "transform results" (a transform result is a field value
   * representing the result of applying a transform) for use after a
   * TransformMutation has been acknowledged by the server.
   *
   * @param baseDoc The document prior to applying this mutation batch.
   * @param serverTransformResults The transform results received by the server.
   * @return The transform results list.
   */


  TransformMutation.prototype.serverTransformResults = function (baseDoc, serverTransformResults) {
    var transformResults = [];
    assert(this.fieldTransforms.length === serverTransformResults.length, "server transform result count (" + serverTransformResults.length + ") " + ("should match field transform count (" + this.fieldTransforms.length + ")"));

    for (var i = 0; i < serverTransformResults.length; i++) {
      var fieldTransform = this.fieldTransforms[i];
      var transform = fieldTransform.transform;
      var previousValue = null;

      if (baseDoc instanceof Document) {
        previousValue = baseDoc.field(fieldTransform.field) || null;
      }

      transformResults.push(transform.applyToRemoteDocument(previousValue, serverTransformResults[i]));
    }

    return transformResults;
  };
  /**
   * Creates a list of "transform results" (a transform result is a field value
   * representing the result of applying a transform) for use when applying a
   * TransformMutation locally.
   *
   * @param localWriteTime The local time of the transform mutation (used to
   *     generate ServerTimestampValues).
   * @param baseDoc The document prior to applying this mutation batch.
   * @return The transform results list.
   */


  TransformMutation.prototype.localTransformResults = function (localWriteTime, baseDoc) {
    var transformResults = [];

    for (var _i = 0, _a = this.fieldTransforms; _i < _a.length; _i++) {
      var fieldTransform = _a[_i];
      var transform = fieldTransform.transform;
      var previousValue = null;

      if (baseDoc instanceof Document) {
        previousValue = baseDoc.field(fieldTransform.field) || null;
      }

      transformResults.push(transform.applyToLocalView(previousValue, localWriteTime));
    }

    return transformResults;
  };

  TransformMutation.prototype.transformObject = function (data, transformResults) {
    assert(transformResults.length === this.fieldTransforms.length, 'TransformResults length mismatch.');

    for (var i = 0; i < this.fieldTransforms.length; i++) {
      var fieldTransform = this.fieldTransforms[i];
      var fieldPath = fieldTransform.field;
      data = data.set(fieldPath, transformResults[i]);
    }

    return data;
  };

  return TransformMutation;
}(Mutation);
/** A mutation that deletes the document at the given key. */


var DeleteMutation =
/** @class */
function (_super) {
  tslib_1.__extends(DeleteMutation, _super);

  function DeleteMutation(key, precondition) {
    var _this = _super.call(this) || this;

    _this.key = key;
    _this.precondition = precondition;
    _this.type = MutationType.Delete;
    return _this;
  }

  DeleteMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {
    this.verifyKeyMatches(maybeDoc);
    assert(mutationResult.transformResults == null, 'Transform results received by DeleteMutation.'); // Unlike applyToLocalView, if we're applying a mutation to a remote
    // document the server has accepted the mutation so the precondition must
    // have held.

    return new NoDocument(this.key, mutationResult.version, {
      hasCommittedMutations: true
    });
  };

  DeleteMutation.prototype.applyToLocalView = function (maybeDoc, baseDoc, localWriteTime) {
    this.verifyKeyMatches(maybeDoc);

    if (!this.precondition.isValidFor(maybeDoc)) {
      return maybeDoc;
    }

    if (maybeDoc) {
      assert(maybeDoc.key.isEqual(this.key), 'Can only apply mutation to document with same key');
    }

    return new NoDocument(this.key, SnapshotVersion.forDeletedDoc());
  };

  DeleteMutation.prototype.isEqual = function (other) {
    return other instanceof DeleteMutation && this.key.isEqual(other.key) && this.precondition.isEqual(other.precondition);
  };

  Object.defineProperty(DeleteMutation.prototype, "isIdempotent", {
    get: function () {
      return true;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(DeleteMutation.prototype, "fieldMask", {
    get: function () {
      return null;
    },
    enumerable: true,
    configurable: true
  });
  return DeleteMutation;
}(Mutation);
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A readonly view of the local state of all documents we're tracking (i.e. we
 * have a cached version in remoteDocumentCache or local mutations for the
 * document). The view is computed by applying the mutations in the
 * MutationQueue to the RemoteDocumentCache.
 */


var LocalDocumentsView =
/** @class */
function () {
  function LocalDocumentsView(remoteDocumentCache, mutationQueue, indexManager) {
    this.remoteDocumentCache = remoteDocumentCache;
    this.mutationQueue = mutationQueue;
    this.indexManager = indexManager;
  }
  /**
   * Get the local view of the document identified by `key`.
   *
   * @return Local view of the document or null if we don't have any cached
   * state for it.
   */


  LocalDocumentsView.prototype.getDocument = function (transaction, key) {
    var _this = this;

    return this.mutationQueue.getAllMutationBatchesAffectingDocumentKey(transaction, key).next(function (batches) {
      return _this.getDocumentInternal(transaction, key, batches);
    });
  };
  /** Internal version of `getDocument` that allows reusing batches. */


  LocalDocumentsView.prototype.getDocumentInternal = function (transaction, key, inBatches) {
    return this.remoteDocumentCache.getEntry(transaction, key).next(function (doc) {
      for (var _i = 0, inBatches_1 = inBatches; _i < inBatches_1.length; _i++) {
        var batch = inBatches_1[_i];
        doc = batch.applyToLocalView(key, doc);
      }

      return doc;
    });
  }; // Returns the view of the given `docs` as they would appear after applying
  // all mutations in the given `batches`.


  LocalDocumentsView.prototype.applyLocalMutationsToDocuments = function (transaction, docs, batches) {
    var results = nullableMaybeDocumentMap();
    docs.forEach(function (key, localView) {
      for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {
        var batch = batches_1[_i];
        localView = batch.applyToLocalView(key, localView);
      }

      results = results.insert(key, localView);
    });
    return results;
  };
  /**
   * Gets the local view of the documents identified by `keys`.
   *
   * If we don't have cached state for a document in `keys`, a NoDocument will
   * be stored for that key in the resulting set.
   */


  LocalDocumentsView.prototype.getDocuments = function (transaction, keys) {
    var _this = this;

    return this.remoteDocumentCache.getEntries(transaction, keys).next(function (docs) {
      return _this.getLocalViewOfDocuments(transaction, docs);
    });
  };
  /**
   * Similar to `getDocuments`, but creates the local view from the given
   * `baseDocs` without retrieving documents from the local store.
   */


  LocalDocumentsView.prototype.getLocalViewOfDocuments = function (transaction, baseDocs) {
    var _this = this;

    return this.mutationQueue.getAllMutationBatchesAffectingDocumentKeys(transaction, baseDocs).next(function (batches) {
      var docs = _this.applyLocalMutationsToDocuments(transaction, baseDocs, batches);

      var results = maybeDocumentMap();
      docs.forEach(function (key, maybeDoc) {
        // TODO(http://b/32275378): Don't conflate missing / deleted.
        if (!maybeDoc) {
          maybeDoc = new NoDocument(key, SnapshotVersion.forDeletedDoc());
        }

        results = results.insert(key, maybeDoc);
      });
      return results;
    });
  };
  /** Performs a query against the local view of all documents. */


  LocalDocumentsView.prototype.getDocumentsMatchingQuery = function (transaction, query) {
    if (query.isDocumentQuery()) {
      return this.getDocumentsMatchingDocumentQuery(transaction, query.path);
    } else if (query.isCollectionGroupQuery()) {
      return this.getDocumentsMatchingCollectionGroupQuery(transaction, query);
    } else {
      return this.getDocumentsMatchingCollectionQuery(transaction, query);
    }
  };

  LocalDocumentsView.prototype.getDocumentsMatchingDocumentQuery = function (transaction, docPath) {
    // Just do a simple document lookup.
    return this.getDocument(transaction, new DocumentKey(docPath)).next(function (maybeDoc) {
      var result = documentMap();

      if (maybeDoc instanceof Document) {
        result = result.insert(maybeDoc.key, maybeDoc);
      }

      return result;
    });
  };

  LocalDocumentsView.prototype.getDocumentsMatchingCollectionGroupQuery = function (transaction, query) {
    var _this = this;

    assert(query.path.isEmpty(), 'Currently we only support collection group queries at the root.');
    var collectionId = query.collectionGroup;
    var results = documentMap();
    return this.indexManager.getCollectionParents(transaction, collectionId).next(function (parents) {
      // Perform a collection query against each parent that contains the
      // collectionId and aggregate the results.
      return PersistencePromise.forEach(parents, function (parent) {
        var collectionQuery = query.asCollectionQueryAtPath(parent.child(collectionId));
        return _this.getDocumentsMatchingCollectionQuery(transaction, collectionQuery).next(function (r) {
          r.forEach(function (key, doc) {
            results = results.insert(key, doc);
          });
        });
      }).next(function () {
        return results;
      });
    });
  };

  LocalDocumentsView.prototype.getDocumentsMatchingCollectionQuery = function (transaction, query) {
    var _this = this; // Query the remote documents and overlay mutations.


    var results;
    return this.remoteDocumentCache.getDocumentsMatchingQuery(transaction, query).next(function (queryResults) {
      results = queryResults;
      return _this.mutationQueue.getAllMutationBatchesAffectingQuery(transaction, query);
    }).next(function (matchingMutationBatches) {
      for (var _i = 0, matchingMutationBatches_1 = matchingMutationBatches; _i < matchingMutationBatches_1.length; _i++) {
        var batch = matchingMutationBatches_1[_i];

        for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {
          var mutation = _b[_a];
          var key = mutation.key; // Only process documents belonging to the collection.

          if (!query.path.isImmediateParentOf(key.path)) {
            continue;
          }

          var baseDoc = results.get(key);
          var mutatedDoc = mutation.applyToLocalView(baseDoc, baseDoc, batch.localWriteTime);

          if (mutatedDoc instanceof Document) {
            results = results.insert(key, mutatedDoc);
          } else {
            results = results.remove(key);
          }
        }
      }
    }).next(function () {
      // Finally, filter out any documents that don't actually match
      // the query.
      results.forEach(function (key, doc) {
        if (!query.matches(doc)) {
          results = results.remove(key);
        }
      });
      return results;
    });
  };

  return LocalDocumentsView;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A collection of references to a document from some kind of numbered entity
 * (either a target ID or batch ID). As references are added to or removed from
 * the set corresponding events are emitted to a registered garbage collector.
 *
 * Each reference is represented by a DocumentReference object. Each of them
 * contains enough information to uniquely identify the reference. They are all
 * stored primarily in a set sorted by key. A document is considered garbage if
 * there's no references in that set (this can be efficiently checked thanks to
 * sorting by key).
 *
 * ReferenceSet also keeps a secondary set that contains references sorted by
 * IDs. This one is used to efficiently implement removal of all references by
 * some target ID.
 */


var ReferenceSet =
/** @class */
function () {
  function ReferenceSet() {
    // A set of outstanding references to a document sorted by key.
    this.refsByKey = new SortedSet(DocReference.compareByKey); // A set of outstanding references to a document sorted by target id.

    this.refsByTarget = new SortedSet(DocReference.compareByTargetId);
  }
  /** Returns true if the reference set contains no references. */


  ReferenceSet.prototype.isEmpty = function () {
    return this.refsByKey.isEmpty();
  };
  /** Adds a reference to the given document key for the given ID. */


  ReferenceSet.prototype.addReference = function (key, id) {
    var ref = new DocReference(key, id);
    this.refsByKey = this.refsByKey.add(ref);
    this.refsByTarget = this.refsByTarget.add(ref);
  };
  /** Add references to the given document keys for the given ID. */


  ReferenceSet.prototype.addReferences = function (keys, id) {
    var _this = this;

    keys.forEach(function (key) {
      return _this.addReference(key, id);
    });
  };
  /**
   * Removes a reference to the given document key for the given
   * ID.
   */


  ReferenceSet.prototype.removeReference = function (key, id) {
    this.removeRef(new DocReference(key, id));
  };

  ReferenceSet.prototype.removeReferences = function (keys, id) {
    var _this = this;

    keys.forEach(function (key) {
      return _this.removeReference(key, id);
    });
  };
  /**
   * Clears all references with a given ID. Calls removeRef() for each key
   * removed.
   */


  ReferenceSet.prototype.removeReferencesForId = function (id) {
    var _this = this;

    var emptyKey = DocumentKey.EMPTY;
    var startRef = new DocReference(emptyKey, id);
    var endRef = new DocReference(emptyKey, id + 1);
    var keys = [];
    this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {
      _this.removeRef(ref);

      keys.push(ref.key);
    });
    return keys;
  };

  ReferenceSet.prototype.removeAllReferences = function () {
    var _this = this;

    this.refsByKey.forEach(function (ref) {
      return _this.removeRef(ref);
    });
  };

  ReferenceSet.prototype.removeRef = function (ref) {
    this.refsByKey = this.refsByKey.delete(ref);
    this.refsByTarget = this.refsByTarget.delete(ref);
  };

  ReferenceSet.prototype.referencesForId = function (id) {
    var emptyKey = DocumentKey.EMPTY;
    var startRef = new DocReference(emptyKey, id);
    var endRef = new DocReference(emptyKey, id + 1);
    var keys = documentKeySet();
    this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {
      keys = keys.add(ref.key);
    });
    return keys;
  };

  ReferenceSet.prototype.containsKey = function (key) {
    var ref = new DocReference(key, 0);
    var firstRef = this.refsByKey.firstAfterOrEqual(ref);
    return firstRef !== null && key.isEqual(firstRef.key);
  };

  return ReferenceSet;
}();

var DocReference =
/** @class */
function () {
  function DocReference(key, targetOrBatchId) {
    this.key = key;
    this.targetOrBatchId = targetOrBatchId;
  }
  /** Compare by key then by ID */


  DocReference.compareByKey = function (left, right) {
    return DocumentKey.comparator(left.key, right.key) || primitiveComparator(left.targetOrBatchId, right.targetOrBatchId);
  };
  /** Compare by ID then by key */


  DocReference.compareByTargetId = function (left, right) {
    return primitiveComparator(left.targetOrBatchId, right.targetOrBatchId) || DocumentKey.comparator(left.key, right.key);
  };

  return DocReference;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var LOG_TAG$2 = 'LocalStore';
/**
 * Local storage in the Firestore client. Coordinates persistence components
 * like the mutation queue and remote document cache to present a
 * latency-compensated view of stored data.
 *
 * The LocalStore is responsible for accepting mutations from the Sync Engine.
 * Writes from the client are put into a queue as provisional Mutations until
 * they are processed by the RemoteStore and confirmed as having been written
 * to the server.
 *
 * The local store provides the local version of documents that have been
 * modified locally. It maintains the constraint:
 *
 *   LocalDocument = RemoteDocument + Active(LocalMutations)
 *
 * (Active mutations are those that are enqueued and have not been previously
 * acknowledged or rejected).
 *
 * The RemoteDocument ("ground truth") state is provided via the
 * applyChangeBatch method. It will be some version of a server-provided
 * document OR will be a server-provided document PLUS acknowledged mutations:
 *
 *   RemoteDocument' = RemoteDocument + Acknowledged(LocalMutations)
 *
 * Note that this "dirty" version of a RemoteDocument will not be identical to a
 * server base version, since it has LocalMutations added to it pending getting
 * an authoritative copy from the server.
 *
 * Since LocalMutations can be rejected by the server, we have to be able to
 * revert a LocalMutation that has already been applied to the LocalDocument
 * (typically done by replaying all remaining LocalMutations to the
 * RemoteDocument to re-apply).
 *
 * The LocalStore is responsible for the garbage collection of the documents it
 * contains. For now, it every doc referenced by a view, the mutation queue, or
 * the RemoteStore.
 *
 * It also maintains the persistence of mapping queries to resume tokens and
 * target ids. It needs to know this data about queries to properly know what
 * docs it would be allowed to garbage collect.
 *
 * The LocalStore must be able to efficiently execute queries against its local
 * cache of the documents, to provide the initial set of results before any
 * remote changes have been received.
 *
 * Note: In TypeScript, most methods return Promises since the implementation
 * may rely on fetching data from IndexedDB which is async.
 * These Promises will only be rejected on an I/O error or other internal
 * (unexpected) failure (e.g. failed assert) and always represent an
 * unrecoverable error (should be caught / reported by the async_queue).
 */

var LocalStore =
/** @class */
function () {
  function LocalStore(
  /** Manages our in-memory or durable persistence. */
  persistence, initialUser) {
    this.persistence = persistence;
    /**
     * The set of document references maintained by any local views.
     */

    this.localViewReferences = new ReferenceSet();
    /** Maps a targetID to data about its query. */

    this.queryDataByTarget = {};
    assert(persistence.started, 'LocalStore was passed an unstarted persistence implementation');
    this.persistence.referenceDelegate.setInMemoryPins(this.localViewReferences);
    this.mutationQueue = persistence.getMutationQueue(initialUser);
    this.remoteDocuments = persistence.getRemoteDocumentCache();
    this.queryCache = persistence.getQueryCache();
    this.localDocuments = new LocalDocumentsView(this.remoteDocuments, this.mutationQueue, this.persistence.getIndexManager());
  }
  /**
   * Tells the LocalStore that the currently authenticated user has changed.
   *
   * In response the local store switches the mutation queue to the new user and
   * returns any resulting document changes.
   */
  // PORTING NOTE: Android and iOS only return the documents affected by the
  // change.


  LocalStore.prototype.handleUserChange = function (user) {
    var _this = this;

    return this.persistence.runTransaction('Handle user change', 'readonly', function (txn) {
      // Swap out the mutation queue, grabbing the pending mutation batches
      // before and after.
      var oldBatches;
      return _this.mutationQueue.getAllMutationBatches(txn).next(function (promisedOldBatches) {
        oldBatches = promisedOldBatches;
        _this.mutationQueue = _this.persistence.getMutationQueue(user); // Recreate our LocalDocumentsView using the new
        // MutationQueue.

        _this.localDocuments = new LocalDocumentsView(_this.remoteDocuments, _this.mutationQueue, _this.persistence.getIndexManager());
        return _this.mutationQueue.getAllMutationBatches(txn);
      }).next(function (newBatches) {
        var removedBatchIds = [];
        var addedBatchIds = []; // Union the old/new changed keys.

        var changedKeys = documentKeySet();

        for (var _i = 0, oldBatches_1 = oldBatches; _i < oldBatches_1.length; _i++) {
          var batch = oldBatches_1[_i];
          removedBatchIds.push(batch.batchId);

          for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {
            var mutation = _b[_a];
            changedKeys = changedKeys.add(mutation.key);
          }
        }

        for (var _c = 0, newBatches_1 = newBatches; _c < newBatches_1.length; _c++) {
          var batch = newBatches_1[_c];
          addedBatchIds.push(batch.batchId);

          for (var _d = 0, _e = batch.mutations; _d < _e.length; _d++) {
            var mutation = _e[_d];
            changedKeys = changedKeys.add(mutation.key);
          }
        } // Return the set of all (potentially) changed documents and the list
        // of mutation batch IDs that were affected by change.


        return _this.localDocuments.getDocuments(txn, changedKeys).next(function (affectedDocuments) {
          return {
            affectedDocuments: affectedDocuments,
            removedBatchIds: removedBatchIds,
            addedBatchIds: addedBatchIds
          };
        });
      });
    });
  };
  /* Accept locally generated Mutations and commit them to storage. */


  LocalStore.prototype.localWrite = function (mutations) {
    var _this = this;

    var localWriteTime = Timestamp.now();
    var keys = mutations.reduce(function (keys, m) {
      return keys.add(m.key);
    }, documentKeySet());
    return this.persistence.runTransaction('Locally write mutations', 'readwrite', function (txn) {
      // Load and apply all existing mutations. This lets us compute the
      // current base state for all non-idempotent transforms before applying
      // any additional user-provided writes.
      return _this.localDocuments.getDocuments(txn, keys).next(function (existingDocs) {
        // For non-idempotent mutations (such as `FieldValue.increment()`),
        // we record the base state in a separate patch mutation. This is
        // later used to guarantee consistent values and prevents flicker
        // even if the backend sends us an update that already includes our
        // transform.
        var baseMutations = [];

        for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {
          var mutation = mutations_1[_i];
          var maybeDoc = existingDocs.get(mutation.key);

          if (!mutation.isIdempotent) {
            // Theoretically, we should only include non-idempotent fields
            // in this field mask as this mask is used to populate the base
            // state for all DocumentTransforms.  By  including all fields,
            // we incorrectly prevent rebasing of idempotent transforms
            // (such as `arrayUnion()`) when any non-idempotent transforms
            // are present.
            var fieldMask = mutation.fieldMask;

            if (fieldMask) {
              var baseValues = maybeDoc instanceof Document ? fieldMask.applyTo(maybeDoc.data) : ObjectValue.EMPTY; // NOTE: The base state should only be applied if there's some
              // existing document to override, so use a Precondition of
              // exists=true

              baseMutations.push(new PatchMutation(mutation.key, baseValues, fieldMask, Precondition.exists(true)));
            }
          }
        }

        return _this.mutationQueue.addMutationBatch(txn, localWriteTime, baseMutations, mutations).next(function (batch) {
          var changes = batch.applyToLocalDocumentSet(existingDocs);
          return {
            batchId: batch.batchId,
            changes: changes
          };
        });
      });
    });
  };
  /** Returns the local view of the documents affected by a mutation batch. */
  // PORTING NOTE: Multi-tab only.


  LocalStore.prototype.lookupMutationDocuments = function (batchId) {
    var _this = this;

    return this.persistence.runTransaction('Lookup mutation documents', 'readonly', function (txn) {
      return _this.mutationQueue.lookupMutationKeys(txn, batchId).next(function (keys) {
        if (keys) {
          return _this.localDocuments.getDocuments(txn, keys);
        } else {
          return PersistencePromise.resolve(null);
        }
      });
    });
  };
  /**
   * Acknowledge the given batch.
   *
   * On the happy path when a batch is acknowledged, the local store will
   *
   *  + remove the batch from the mutation queue;
   *  + apply the changes to the remote document cache;
   *  + recalculate the latency compensated view implied by those changes (there
   *    may be mutations in the queue that affect the documents but haven't been
   *    acknowledged yet); and
   *  + give the changed documents back the sync engine
   *
   * @returns The resulting (modified) documents.
   */


  LocalStore.prototype.acknowledgeBatch = function (batchResult) {
    var _this = this;

    return this.persistence.runTransaction('Acknowledge batch', 'readwrite-primary', function (txn) {
      var affected = batchResult.batch.keys();

      var documentBuffer = _this.remoteDocuments.newChangeBuffer();

      return _this.mutationQueue.acknowledgeBatch(txn, batchResult.batch, batchResult.streamToken).next(function () {
        return _this.applyWriteToRemoteDocuments(txn, batchResult, documentBuffer);
      }).next(function () {
        return documentBuffer.apply(txn);
      }).next(function () {
        return _this.mutationQueue.performConsistencyCheck(txn);
      }).next(function () {
        return _this.localDocuments.getDocuments(txn, affected);
      });
    });
  };
  /**
   * Remove mutations from the MutationQueue for the specified batch;
   * LocalDocuments will be recalculated.
   *
   * @returns The resulting modified documents.
   */


  LocalStore.prototype.rejectBatch = function (batchId) {
    var _this = this;

    return this.persistence.runTransaction('Reject batch', 'readwrite-primary', function (txn) {
      var affectedKeys;
      return _this.mutationQueue.lookupMutationBatch(txn, batchId).next(function (batch) {
        assert(batch !== null, 'Attempt to reject nonexistent batch!');
        affectedKeys = batch.keys();
        return _this.mutationQueue.removeMutationBatch(txn, batch);
      }).next(function () {
        return _this.mutationQueue.performConsistencyCheck(txn);
      }).next(function () {
        return _this.localDocuments.getDocuments(txn, affectedKeys);
      });
    });
  };
  /** Returns the last recorded stream token for the current user. */


  LocalStore.prototype.getLastStreamToken = function () {
    var _this = this;

    return this.persistence.runTransaction('Get last stream token', 'readonly', function (txn) {
      return _this.mutationQueue.getLastStreamToken(txn);
    });
  };
  /**
   * Sets the stream token for the current user without acknowledging any
   * mutation batch. This is usually only useful after a stream handshake or in
   * response to an error that requires clearing the stream token.
   */


  LocalStore.prototype.setLastStreamToken = function (streamToken) {
    var _this = this;

    return this.persistence.runTransaction('Set last stream token', 'readwrite-primary', function (txn) {
      return _this.mutationQueue.setLastStreamToken(txn, streamToken);
    });
  };
  /**
   * Returns the last consistent snapshot processed (used by the RemoteStore to
   * determine whether to buffer incoming snapshots from the backend).
   */


  LocalStore.prototype.getLastRemoteSnapshotVersion = function () {
    var _this = this;

    return this.persistence.runTransaction('Get last remote snapshot version', 'readonly', function (txn) {
      return _this.queryCache.getLastRemoteSnapshotVersion(txn);
    });
  };
  /**
   * Update the "ground-state" (remote) documents. We assume that the remote
   * event reflects any write batches that have been acknowledged or rejected
   * (i.e. we do not re-apply local mutations to updates from this event).
   *
   * LocalDocuments are re-calculated if there are remaining mutations in the
   * queue.
   */


  LocalStore.prototype.applyRemoteEvent = function (remoteEvent) {
    var _this = this;

    var documentBuffer = this.remoteDocuments.newChangeBuffer();
    return this.persistence.runTransaction('Apply remote event', 'readwrite-primary', function (txn) {
      var promises = [];
      var authoritativeUpdates = documentKeySet();
      forEachNumber(remoteEvent.targetChanges, function (targetId, change) {
        // Do not ref/unref unassigned targetIds - it may lead to leaks.
        var queryData = _this.queryDataByTarget[targetId];
        if (!queryData) return; // When a global snapshot contains updates (either add or modify) we
        // can completely trust these updates as authoritative and blindly
        // apply them to our cache (as a defensive measure to promote
        // self-healing in the unfortunate case that our cache is ever somehow
        // corrupted / out-of-sync).
        //
        // If the document is only updated while removing it from a target
        // then watch isn't obligated to send the absolute latest version: it
        // can send the first version that caused the document not to match.

        change.addedDocuments.forEach(function (key) {
          authoritativeUpdates = authoritativeUpdates.add(key);
        });
        change.modifiedDocuments.forEach(function (key) {
          authoritativeUpdates = authoritativeUpdates.add(key);
        });
        promises.push(_this.queryCache.removeMatchingKeys(txn, change.removedDocuments, targetId).next(function () {
          return _this.queryCache.addMatchingKeys(txn, change.addedDocuments, targetId);
        })); // Update the resume token if the change includes one. Don't clear
        // any preexisting value.

        var resumeToken = change.resumeToken;

        if (resumeToken.length > 0) {
          var oldQueryData = queryData;
          queryData = queryData.copy({
            resumeToken: resumeToken,
            snapshotVersion: remoteEvent.snapshotVersion
          });
          _this.queryDataByTarget[targetId] = queryData;

          if (LocalStore.shouldPersistQueryData(oldQueryData, queryData, change)) {
            promises.push(_this.queryCache.updateQueryData(txn, queryData));
          }
        }
      });
      var changedDocs = maybeDocumentMap();
      var updatedKeys = documentKeySet();
      remoteEvent.documentUpdates.forEach(function (key, doc) {
        updatedKeys = updatedKeys.add(key);
      }); // Each loop iteration only affects its "own" doc, so it's safe to get all the remote
      // documents in advance in a single call.

      promises.push(documentBuffer.getEntries(txn, updatedKeys).next(function (existingDocs) {
        remoteEvent.documentUpdates.forEach(function (key, doc) {
          var existingDoc = existingDocs.get(key); // If a document update isn't authoritative, make sure we don't
          // apply an old document version to the remote cache. We make an
          // exception for SnapshotVersion.MIN which can happen for
          // manufactured events (e.g. in the case of a limbo document
          // resolution failing).

          if (existingDoc == null || doc.version.isEqual(SnapshotVersion.MIN) || authoritativeUpdates.has(doc.key) && !existingDoc.hasPendingWrites || doc.version.compareTo(existingDoc.version) >= 0) {
            documentBuffer.addEntry(doc);
            changedDocs = changedDocs.insert(key, doc);
          } else {
            debug(LOG_TAG$2, 'Ignoring outdated watch update for ', key, '. Current version:', existingDoc.version, ' Watch version:', doc.version);
          }

          if (remoteEvent.resolvedLimboDocuments.has(key)) {
            promises.push(_this.persistence.referenceDelegate.updateLimboDocument(txn, key));
          }
        });
      })); // HACK: The only reason we allow a null snapshot version is so that we
      // can synthesize remote events when we get permission denied errors while
      // trying to resolve the state of a locally cached document that is in
      // limbo.

      var remoteVersion = remoteEvent.snapshotVersion;

      if (!remoteVersion.isEqual(SnapshotVersion.MIN)) {
        var updateRemoteVersion = _this.queryCache.getLastRemoteSnapshotVersion(txn).next(function (lastRemoteVersion) {
          assert(remoteVersion.compareTo(lastRemoteVersion) >= 0, 'Watch stream reverted to previous snapshot?? ' + remoteVersion + ' < ' + lastRemoteVersion);
          return _this.queryCache.setTargetsMetadata(txn, txn.currentSequenceNumber, remoteVersion);
        });

        promises.push(updateRemoteVersion);
      }

      return PersistencePromise.waitFor(promises).next(function () {
        return documentBuffer.apply(txn);
      }).next(function () {
        return _this.localDocuments.getLocalViewOfDocuments(txn, changedDocs);
      });
    });
  };
  /**
   * Returns true if the newQueryData should be persisted during an update of
   * an active target. QueryData should always be persisted when a target is
   * being released and should not call this function.
   *
   * While the target is active, QueryData updates can be omitted when nothing
   * about the target has changed except metadata like the resume token or
   * snapshot version. Occasionally it's worth the extra write to prevent these
   * values from getting too stale after a crash, but this doesn't have to be
   * too frequent.
   */


  LocalStore.shouldPersistQueryData = function (oldQueryData, newQueryData, change) {
    // Avoid clearing any existing value
    if (newQueryData.resumeToken.length === 0) return false; // Any resume token is interesting if there isn't one already.

    if (oldQueryData.resumeToken.length === 0) return true; // Don't allow resume token changes to be buffered indefinitely. This
    // allows us to be reasonably up-to-date after a crash and avoids needing
    // to loop over all active queries on shutdown. Especially in the browser
    // we may not get time to do anything interesting while the current tab is
    // closing.

    var timeDelta = newQueryData.snapshotVersion.toMicroseconds() - oldQueryData.snapshotVersion.toMicroseconds();
    if (timeDelta >= this.RESUME_TOKEN_MAX_AGE_MICROS) return true; // Otherwise if the only thing that has changed about a target is its resume
    // token it's not worth persisting. Note that the RemoteStore keeps an
    // in-memory view of the currently active targets which includes the current
    // resume token, so stream failure or user changes will still use an
    // up-to-date resume token regardless of what we do here.

    var changes = change.addedDocuments.size + change.modifiedDocuments.size + change.removedDocuments.size;
    return changes > 0;
  };
  /**
   * Notify local store of the changed views to locally pin documents.
   */


  LocalStore.prototype.notifyLocalViewChanges = function (viewChanges) {
    var _this = this;

    return this.persistence.runTransaction('notifyLocalViewChanges', 'readwrite', function (txn) {
      return PersistencePromise.forEach(viewChanges, function (viewChange) {
        _this.localViewReferences.addReferences(viewChange.addedKeys, viewChange.targetId);

        _this.localViewReferences.removeReferences(viewChange.removedKeys, viewChange.targetId);

        return PersistencePromise.forEach(viewChange.removedKeys, function (key) {
          return _this.persistence.referenceDelegate.removeReference(txn, key);
        });
      });
    });
  };
  /**
   * Gets the mutation batch after the passed in batchId in the mutation queue
   * or null if empty.
   * @param afterBatchId If provided, the batch to search after.
   * @returns The next mutation or null if there wasn't one.
   */


  LocalStore.prototype.nextMutationBatch = function (afterBatchId) {
    var _this = this;

    return this.persistence.runTransaction('Get next mutation batch', 'readonly', function (txn) {
      if (afterBatchId === undefined) {
        afterBatchId = BATCHID_UNKNOWN;
      }

      return _this.mutationQueue.getNextMutationBatchAfterBatchId(txn, afterBatchId);
    });
  };
  /**
   * Read the current value of a Document with a given key or null if not
   * found - used for testing.
   */


  LocalStore.prototype.readDocument = function (key) {
    var _this = this;

    return this.persistence.runTransaction('read document', 'readonly', function (txn) {
      return _this.localDocuments.getDocument(txn, key);
    });
  };
  /**
   * Assigns the given query an internal ID so that its results can be pinned so
   * they don't get GC'd. A query must be allocated in the local store before
   * the store can be used to manage its view.
   */


  LocalStore.prototype.allocateQuery = function (query) {
    var _this = this;

    return this.persistence.runTransaction('Allocate query', 'readwrite', function (txn) {
      var queryData;
      return _this.queryCache.getQueryData(txn, query).next(function (cached) {
        if (cached) {
          // This query has been listened to previously, so reuse the
          // previous targetID.
          // TODO(mcg): freshen last accessed date?
          queryData = cached;
          return PersistencePromise.resolve();
        } else {
          return _this.queryCache.allocateTargetId(txn).next(function (targetId) {
            queryData = new QueryData(query, targetId, QueryPurpose.Listen, txn.currentSequenceNumber);
            return _this.queryCache.addQueryData(txn, queryData);
          });
        }
      }).next(function () {
        assert(!_this.queryDataByTarget[queryData.targetId], 'Tried to allocate an already allocated query: ' + query);
        _this.queryDataByTarget[queryData.targetId] = queryData;
        return queryData;
      });
    });
  };
  /**
   * Unpin all the documents associated with the given query. If
   * `keepPersistedQueryData` is set to false and Eager GC enabled, the method
   * directly removes the associated query data from the query cache.
   */
  // PORTING NOTE: `keepPersistedQueryData` is multi-tab only.


  LocalStore.prototype.releaseQuery = function (query, keepPersistedQueryData) {
    var _this = this;

    var mode = keepPersistedQueryData ? 'readwrite' : 'readwrite-primary';
    return this.persistence.runTransaction('Release query', mode, function (txn) {
      return _this.queryCache.getQueryData(txn, query).next(function (queryData) {
        assert(queryData != null, 'Tried to release nonexistent query: ' + query);
        var targetId = queryData.targetId;
        var cachedQueryData = _this.queryDataByTarget[targetId]; // References for documents sent via Watch are automatically removed when we delete a
        // query's target data from the reference delegate. Since this does not remove references
        // for locally mutated documents, we have to remove the target associations for these
        // documents manually.

        var removed = _this.localViewReferences.removeReferencesForId(targetId);

        delete _this.queryDataByTarget[targetId];

        if (!keepPersistedQueryData) {
          return PersistencePromise.forEach(removed, function (key) {
            return _this.persistence.referenceDelegate.removeReference(txn, key);
          }).next(function () {
            return _this.persistence.referenceDelegate.removeTarget(txn, cachedQueryData);
          });
        } else {
          return PersistencePromise.resolve();
        }
      });
    });
  };
  /**
   * Runs the specified query against all the documents in the local store and
   * returns the results.
   */


  LocalStore.prototype.executeQuery = function (query) {
    var _this = this;

    return this.persistence.runTransaction('Execute query', 'readonly', function (txn) {
      return _this.localDocuments.getDocumentsMatchingQuery(txn, query);
    });
  };
  /**
   * Returns the keys of the documents that are associated with the given
   * target id in the remote table.
   */


  LocalStore.prototype.remoteDocumentKeys = function (targetId) {
    var _this = this;

    return this.persistence.runTransaction('Remote document keys', 'readonly', function (txn) {
      return _this.queryCache.getMatchingKeysForTargetId(txn, targetId);
    });
  }; // PORTING NOTE: Multi-tab only.


  LocalStore.prototype.getActiveClients = function () {
    return this.persistence.getActiveClients();
  }; // PORTING NOTE: Multi-tab only.


  LocalStore.prototype.removeCachedMutationBatchMetadata = function (batchId) {
    this.mutationQueue.removeCachedMutationKeys(batchId);
  }; // PORTING NOTE: Multi-tab only.


  LocalStore.prototype.setNetworkEnabled = function (networkEnabled) {
    this.persistence.setNetworkEnabled(networkEnabled);
  };

  LocalStore.prototype.applyWriteToRemoteDocuments = function (txn, batchResult, documentBuffer) {
    var _this = this;

    var batch = batchResult.batch;
    var docKeys = batch.keys();
    var promiseChain = PersistencePromise.resolve();
    docKeys.forEach(function (docKey) {
      promiseChain = promiseChain.next(function () {
        return documentBuffer.getEntry(txn, docKey);
      }).next(function (remoteDoc) {
        var doc = remoteDoc;
        var ackVersion = batchResult.docVersions.get(docKey);
        assert(ackVersion !== null, 'ackVersions should contain every doc in the write.');

        if (!doc || doc.version.compareTo(ackVersion) < 0) {
          doc = batch.applyToRemoteDocument(docKey, doc, batchResult);

          if (!doc) {
            assert(!remoteDoc, 'Mutation batch ' + batch + ' applied to document ' + remoteDoc + ' resulted in null');
          } else {
            documentBuffer.addEntry(doc);
          }
        }
      });
    });
    return promiseChain.next(function () {
      return _this.mutationQueue.removeMutationBatch(txn, batch);
    });
  };

  LocalStore.prototype.collectGarbage = function (garbageCollector) {
    var _this = this;

    return this.persistence.runTransaction('Collect garbage', 'readwrite-primary', function (txn) {
      return garbageCollector.collect(txn, _this.queryDataByTarget);
    });
  }; // PORTING NOTE: Multi-tab only.


  LocalStore.prototype.getQueryForTarget = function (targetId) {
    var _this = this;

    if (this.queryDataByTarget[targetId]) {
      return Promise.resolve(this.queryDataByTarget[targetId].query);
    } else {
      return this.persistence.runTransaction('Get query data', 'readonly', function (txn) {
        return _this.queryCache.getQueryDataForTarget(txn, targetId).next(function (queryData) {
          return queryData ? queryData.query : null;
        });
      });
    }
  }; // PORTING NOTE: Multi-tab only.


  LocalStore.prototype.getNewDocumentChanges = function () {
    var _this = this;

    return this.persistence.runTransaction('Get new document changes', 'readonly', function (txn) {
      return _this.remoteDocuments.getNewDocumentChanges(txn);
    });
  };
  /**
   * The maximum time to leave a resume token buffered without writing it out.
   * This value is arbitrary: it's long enough to avoid several writes
   * (possibly indefinitely if updates come more frequently than this) but
   * short enough that restarting after crashing will still have a pretty
   * recent resume token.
   */


  LocalStore.RESUME_TOKEN_MAX_AGE_MICROS = 5 * 60 * 1e6;
  return LocalStore;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var MemoryMutationQueue =
/** @class */
function () {
  function MemoryMutationQueue(indexManager, referenceDelegate) {
    this.indexManager = indexManager;
    this.referenceDelegate = referenceDelegate;
    /**
     * The set of all mutations that have been sent but not yet been applied to
     * the backend.
     */

    this.mutationQueue = [];
    /** Next value to use when assigning sequential IDs to each mutation batch. */

    this.nextBatchId = 1;
    /** The last received stream token from the server, used to acknowledge which
     * responses the client has processed. Stream tokens are opaque checkpoint
     * markers whose only real value is their inclusion in the next request.
     */

    this.lastStreamToken = emptyByteString();
    /** An ordered mapping between documents and the mutations batch IDs. */

    this.batchesByDocumentKey = new SortedSet(DocReference.compareByKey);
  }

  MemoryMutationQueue.prototype.checkEmpty = function (transaction) {
    return PersistencePromise.resolve(this.mutationQueue.length === 0);
  };

  MemoryMutationQueue.prototype.acknowledgeBatch = function (transaction, batch, streamToken) {
    var batchId = batch.batchId;
    var batchIndex = this.indexOfExistingBatchId(batchId, 'acknowledged');
    assert(batchIndex === 0, 'Can only acknowledge the first batch in the mutation queue'); // Verify that the batch in the queue is the one to be acknowledged.

    var check = this.mutationQueue[batchIndex];
    assert(batchId === check.batchId, 'Queue ordering failure: expected batch ' + batchId + ', got batch ' + check.batchId);
    this.lastStreamToken = streamToken;
    return PersistencePromise.resolve();
  };

  MemoryMutationQueue.prototype.getLastStreamToken = function (transaction) {
    return PersistencePromise.resolve(this.lastStreamToken);
  };

  MemoryMutationQueue.prototype.setLastStreamToken = function (transaction, streamToken) {
    this.lastStreamToken = streamToken;
    return PersistencePromise.resolve();
  };

  MemoryMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, baseMutations, mutations) {
    assert(mutations.length !== 0, 'Mutation batches should not be empty');
    var batchId = this.nextBatchId;
    this.nextBatchId++;

    if (this.mutationQueue.length > 0) {
      var prior = this.mutationQueue[this.mutationQueue.length - 1];
      assert(prior.batchId < batchId, 'Mutation batchIDs must be monotonically increasing order');
    }

    var batch = new MutationBatch(batchId, localWriteTime, baseMutations, mutations);
    this.mutationQueue.push(batch); // Track references by document key and index collection parents.

    for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {
      var mutation = mutations_1[_i];
      this.batchesByDocumentKey = this.batchesByDocumentKey.add(new DocReference(mutation.key, batchId));
      this.indexManager.addToCollectionParentIndex(transaction, mutation.key.path.popLast());
    }

    return PersistencePromise.resolve(batch);
  };

  MemoryMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {
    return PersistencePromise.resolve(this.findMutationBatch(batchId));
  };

  MemoryMutationQueue.prototype.lookupMutationKeys = function (transaction, batchId) {
    var mutationBatch = this.findMutationBatch(batchId);
    assert(mutationBatch != null, 'Failed to find local mutation batch.');
    return PersistencePromise.resolve(mutationBatch.keys());
  };

  MemoryMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {
    var nextBatchId = batchId + 1; // The requested batchId may still be out of range so normalize it to the
    // start of the queue.

    var rawIndex = this.indexOfBatchId(nextBatchId);
    var index = rawIndex < 0 ? 0 : rawIndex;
    return PersistencePromise.resolve(this.mutationQueue.length > index ? this.mutationQueue[index] : null);
  };

  MemoryMutationQueue.prototype.getAllMutationBatches = function (transaction) {
    return PersistencePromise.resolve(this.mutationQueue.slice());
  };

  MemoryMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {
    var _this = this;

    var start = new DocReference(documentKey, 0);
    var end = new DocReference(documentKey, Number.POSITIVE_INFINITY);
    var result = [];
    this.batchesByDocumentKey.forEachInRange([start, end], function (ref) {
      assert(documentKey.isEqual(ref.key), "Should only iterate over a single key's batches");

      var batch = _this.findMutationBatch(ref.targetOrBatchId);

      assert(batch !== null, 'Batches in the index must exist in the main table');
      result.push(batch);
    });
    return PersistencePromise.resolve(result);
  };

  MemoryMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKeys = function (transaction, documentKeys) {
    var _this = this;

    var uniqueBatchIDs = new SortedSet(primitiveComparator);
    documentKeys.forEach(function (documentKey) {
      var start = new DocReference(documentKey, 0);
      var end = new DocReference(documentKey, Number.POSITIVE_INFINITY);

      _this.batchesByDocumentKey.forEachInRange([start, end], function (ref) {
        assert(documentKey.isEqual(ref.key), "For each key, should only iterate over a single key's batches");
        uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);
      });
    });
    return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));
  };

  MemoryMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {
    assert(!query.isCollectionGroupQuery(), 'CollectionGroup queries should be handled in LocalDocumentsView'); // Use the query path as a prefix for testing if a document matches the
    // query.

    var prefix = query.path;
    var immediateChildrenPathLength = prefix.length + 1; // Construct a document reference for actually scanning the index. Unlike
    // the prefix the document key in this reference must have an even number of
    // segments. The empty segment can be used a suffix of the query path
    // because it precedes all other segments in an ordered traversal.

    var startPath = prefix;

    if (!DocumentKey.isDocumentKey(startPath)) {
      startPath = startPath.child('');
    }

    var start = new DocReference(new DocumentKey(startPath), 0); // Find unique batchIDs referenced by all documents potentially matching the
    // query.

    var uniqueBatchIDs = new SortedSet(primitiveComparator);
    this.batchesByDocumentKey.forEachWhile(function (ref) {
      var rowKeyPath = ref.key.path;

      if (!prefix.isPrefixOf(rowKeyPath)) {
        return false;
      } else {
        // Rows with document keys more than one segment longer than the query
        // path can't be matches. For example, a query on 'rooms' can't match
        // the document /rooms/abc/messages/xyx.
        // TODO(mcg): we'll need a different scanner when we implement
        // ancestor queries.
        if (rowKeyPath.length === immediateChildrenPathLength) {
          uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);
        }

        return true;
      }
    }, start);
    return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));
  };

  MemoryMutationQueue.prototype.findMutationBatches = function (batchIDs) {
    var _this = this; // Construct an array of matching batches, sorted by batchID to ensure that
    // multiple mutations affecting the same document key are applied in order.


    var result = [];
    batchIDs.forEach(function (batchId) {
      var batch = _this.findMutationBatch(batchId);

      if (batch !== null) {
        result.push(batch);
      }
    });
    return result;
  };

  MemoryMutationQueue.prototype.removeMutationBatch = function (transaction, batch) {
    var _this = this; // Find the position of the first batch for removal. This need not be the
    // first entry in the queue.


    var batchIndex = this.indexOfExistingBatchId(batch.batchId, 'removed');
    assert(batchIndex === 0, 'Can only remove the first entry of the mutation queue');
    this.mutationQueue.shift();
    var references = this.batchesByDocumentKey;
    return PersistencePromise.forEach(batch.mutations, function (mutation) {
      var ref = new DocReference(mutation.key, batch.batchId);
      references = references.delete(ref);
      return _this.referenceDelegate.removeMutationReference(transaction, mutation.key);
    }).next(function () {
      _this.batchesByDocumentKey = references;
    });
  };

  MemoryMutationQueue.prototype.removeCachedMutationKeys = function (batchId) {// No-op since the memory mutation queue does not maintain a separate cache.
  };

  MemoryMutationQueue.prototype.containsKey = function (txn, key) {
    var ref = new DocReference(key, 0);
    var firstRef = this.batchesByDocumentKey.firstAfterOrEqual(ref);
    return PersistencePromise.resolve(key.isEqual(firstRef && firstRef.key));
  };

  MemoryMutationQueue.prototype.performConsistencyCheck = function (txn) {
    if (this.mutationQueue.length === 0) {
      assert(this.batchesByDocumentKey.isEmpty(), 'Document leak -- detected dangling mutation references when queue is empty.');
    }

    return PersistencePromise.resolve();
  };
  /**
   * Finds the index of the given batchId in the mutation queue and asserts that
   * the resulting index is within the bounds of the queue.
   *
   * @param batchId The batchId to search for
   * @param action A description of what the caller is doing, phrased in passive
   * form (e.g. "acknowledged" in a routine that acknowledges batches).
   */


  MemoryMutationQueue.prototype.indexOfExistingBatchId = function (batchId, action) {
    var index = this.indexOfBatchId(batchId);
    assert(index >= 0 && index < this.mutationQueue.length, 'Batches must exist to be ' + action);
    return index;
  };
  /**
   * Finds the index of the given batchId in the mutation queue. This operation
   * is O(1).
   *
   * @return The computed index of the batch with the given batchId, based on
   * the state of the queue. Note this index can be negative if the requested
   * batchId has already been remvoed from the queue or past the end of the
   * queue if the batchId is larger than the last added batch.
   */


  MemoryMutationQueue.prototype.indexOfBatchId = function (batchId) {
    if (this.mutationQueue.length === 0) {
      // As an index this is past the end of the queue
      return 0;
    } // Examine the front of the queue to figure out the difference between the
    // batchId and indexes in the array. Note that since the queue is ordered
    // by batchId, if the first batch has a larger batchId then the requested
    // batchId doesn't exist in the queue.


    var firstBatchId = this.mutationQueue[0].batchId;
    return batchId - firstBatchId;
  };
  /**
   * A version of lookupMutationBatch that doesn't return a promise, this makes
   * other functions that uses this code easier to read and more efficent.
   */


  MemoryMutationQueue.prototype.findMutationBatch = function (batchId) {
    var index = this.indexOfBatchId(batchId);

    if (index < 0 || index >= this.mutationQueue.length) {
      return null;
    }

    var batch = this.mutationQueue[index];
    assert(batch.batchId === batchId, 'If found batch must match');
    return batch;
  };

  return MemoryMutationQueue;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var MemoryQueryCache =
/** @class */
function () {
  function MemoryQueryCache(persistence) {
    this.persistence = persistence;
    /**
     * Maps a query to the data about that query
     */

    this.queries = new ObjectMap(function (q) {
      return q.canonicalId();
    });
    /** The last received snapshot version. */

    this.lastRemoteSnapshotVersion = SnapshotVersion.MIN;
    /** The highest numbered target ID encountered. */

    this.highestTargetId = 0;
    /** The highest sequence number encountered. */

    this.highestSequenceNumber = 0;
    /**
     * A ordered bidirectional mapping between documents and the remote target
     * IDs.
     */

    this.references = new ReferenceSet();
    this.targetCount = 0;
    this.targetIdGenerator = TargetIdGenerator.forQueryCache();
  }

  MemoryQueryCache.prototype.getTargetCount = function (txn) {
    return PersistencePromise.resolve(this.targetCount);
  };

  MemoryQueryCache.prototype.forEachTarget = function (txn, f) {
    this.queries.forEach(function (_, queryData) {
      return f(queryData);
    });
    return PersistencePromise.resolve();
  };

  MemoryQueryCache.prototype.getLastRemoteSnapshotVersion = function (transaction) {
    return PersistencePromise.resolve(this.lastRemoteSnapshotVersion);
  };

  MemoryQueryCache.prototype.getHighestSequenceNumber = function (transaction) {
    return PersistencePromise.resolve(this.highestSequenceNumber);
  };

  MemoryQueryCache.prototype.allocateTargetId = function (transaction) {
    var nextTargetId = this.targetIdGenerator.after(this.highestTargetId);
    this.highestTargetId = nextTargetId;
    return PersistencePromise.resolve(nextTargetId);
  };

  MemoryQueryCache.prototype.setTargetsMetadata = function (transaction, highestListenSequenceNumber, lastRemoteSnapshotVersion) {
    if (lastRemoteSnapshotVersion) {
      this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;
    }

    if (highestListenSequenceNumber > this.highestSequenceNumber) {
      this.highestSequenceNumber = highestListenSequenceNumber;
    }

    return PersistencePromise.resolve();
  };

  MemoryQueryCache.prototype.saveQueryData = function (queryData) {
    this.queries.set(queryData.query, queryData);
    var targetId = queryData.targetId;

    if (targetId > this.highestTargetId) {
      this.highestTargetId = targetId;
    }

    if (queryData.sequenceNumber > this.highestSequenceNumber) {
      this.highestSequenceNumber = queryData.sequenceNumber;
    }
  };

  MemoryQueryCache.prototype.addQueryData = function (transaction, queryData) {
    assert(!this.queries.has(queryData.query), 'Adding a query that already exists');
    this.saveQueryData(queryData);
    this.targetCount += 1;
    return PersistencePromise.resolve();
  };

  MemoryQueryCache.prototype.updateQueryData = function (transaction, queryData) {
    assert(this.queries.has(queryData.query), 'Updating a non-existent query');
    this.saveQueryData(queryData);
    return PersistencePromise.resolve();
  };

  MemoryQueryCache.prototype.removeQueryData = function (transaction, queryData) {
    assert(this.targetCount > 0, 'Removing a target from an empty cache');
    assert(this.queries.has(queryData.query), 'Removing a non-existent target from the cache');
    this.queries.delete(queryData.query);
    this.references.removeReferencesForId(queryData.targetId);
    this.targetCount -= 1;
    return PersistencePromise.resolve();
  };

  MemoryQueryCache.prototype.removeTargets = function (transaction, upperBound, activeTargetIds) {
    var _this = this;

    var count = 0;
    var removals = [];
    this.queries.forEach(function (key, queryData) {
      if (queryData.sequenceNumber <= upperBound && !activeTargetIds[queryData.targetId]) {
        _this.queries.delete(key);

        removals.push(_this.removeMatchingKeysForTargetId(transaction, queryData.targetId));
        count++;
      }
    });
    return PersistencePromise.waitFor(removals).next(function () {
      return count;
    });
  };

  MemoryQueryCache.prototype.getQueryCount = function (transaction) {
    return PersistencePromise.resolve(this.targetCount);
  };

  MemoryQueryCache.prototype.getQueryData = function (transaction, query) {
    var queryData = this.queries.get(query) || null;
    return PersistencePromise.resolve(queryData);
  };

  MemoryQueryCache.prototype.getQueryDataForTarget = function (transaction, targetId) {
    // This method is only needed for multi-tab and we can't implement it
    // efficiently without additional data structures.
    return fail('Not yet implemented.');
  };

  MemoryQueryCache.prototype.addMatchingKeys = function (txn, keys, targetId) {
    this.references.addReferences(keys, targetId);
    var referenceDelegate = this.persistence.referenceDelegate;
    var promises = [];

    if (referenceDelegate) {
      keys.forEach(function (key) {
        promises.push(referenceDelegate.addReference(txn, key));
      });
    }

    return PersistencePromise.waitFor(promises);
  };

  MemoryQueryCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {
    this.references.removeReferences(keys, targetId);
    var referenceDelegate = this.persistence.referenceDelegate;
    var promises = [];

    if (referenceDelegate) {
      keys.forEach(function (key) {
        promises.push(referenceDelegate.removeReference(txn, key));
      });
    }

    return PersistencePromise.waitFor(promises);
  };

  MemoryQueryCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {
    this.references.removeReferencesForId(targetId);
    return PersistencePromise.resolve();
  };

  MemoryQueryCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {
    var matchingKeys = this.references.referencesForId(targetId);
    return PersistencePromise.resolve(matchingKeys);
  };

  MemoryQueryCache.prototype.containsKey = function (txn, key) {
    return PersistencePromise.resolve(this.references.containsKey(key));
  };

  return MemoryQueryCache;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function documentSizeMap() {
  return new SortedMap(DocumentKey.comparator);
}

var MemoryRemoteDocumentCache =
/** @class */
function () {
  /**
   * @param sizer Used to assess the size of a document. For eager GC, this is expected to just
   * return 0 to avoid unnecessarily doing the work of calculating the size.
   */
  function MemoryRemoteDocumentCache(indexManager, sizer) {
    this.indexManager = indexManager;
    this.sizer = sizer;
    this.docs = documentSizeMap();
    this.newDocumentChanges = documentKeySet();
    this.size = 0;
  }
  /**
   * Adds the supplied entries to the cache. Adds the given size delta to the cached size.
   */


  MemoryRemoteDocumentCache.prototype.addEntries = function (transaction, entries, sizeDelta) {
    var promises = [];

    for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
      var entry = entries_1[_i];
      var key = entry.maybeDocument.key;
      this.docs = this.docs.insert(key, entry);
      this.newDocumentChanges = this.newDocumentChanges.add(key);
      promises.push(this.indexManager.addToCollectionParentIndex(transaction, key.path.popLast()));
    }

    this.size += sizeDelta;
    return PersistencePromise.waitFor(promises);
  };
  /**
   * Removes the specified entry from the cache and updates the size as appropriate.
   */


  MemoryRemoteDocumentCache.prototype.removeEntry = function (transaction, documentKey) {
    var entry = this.docs.get(documentKey);

    if (entry) {
      this.docs = this.docs.remove(documentKey);
      this.size -= entry.size;
      return PersistencePromise.resolve(entry.size);
    } else {
      return PersistencePromise.resolve(0);
    }
  };

  MemoryRemoteDocumentCache.prototype.getEntry = function (transaction, documentKey) {
    var entry = this.docs.get(documentKey);
    return PersistencePromise.resolve(entry ? entry.maybeDocument : null);
  };
  /**
   * Looks up an entry in the cache.
   *
   * @param documentKey The key of the entry to look up.
   * @return The cached MaybeDocument entry and its size, or null if we have nothing cached.
   */


  MemoryRemoteDocumentCache.prototype.getSizedEntry = function (transaction, documentKey) {
    return PersistencePromise.resolve(this.docs.get(documentKey));
  };

  MemoryRemoteDocumentCache.prototype.getEntries = function (transaction, documentKeys) {
    var _this = this;

    var results = nullableMaybeDocumentMap();
    documentKeys.forEach(function (documentKey) {
      var entry = _this.docs.get(documentKey);

      results = results.insert(documentKey, entry ? entry.maybeDocument : null);
    });
    return PersistencePromise.resolve(results);
  };
  /**
   * Looks up several entries in the cache.
   *
   * @param documentKeys The set of keys entries to look up.
   * @return A map of MaybeDocuments indexed by key (if a document cannot be
   *     found, the key will be mapped to null) and a map of sizes indexed by
   *     key (zero if the key cannot be found).
   */


  MemoryRemoteDocumentCache.prototype.getSizedEntries = function (transaction, documentKeys) {
    var _this = this;

    var results = nullableMaybeDocumentMap();
    var sizeMap = new SortedMap(DocumentKey.comparator);
    documentKeys.forEach(function (documentKey) {
      var entry = _this.docs.get(documentKey);

      results = results.insert(documentKey, entry ? entry.maybeDocument : null);
      sizeMap = sizeMap.insert(documentKey, entry ? entry.size : 0);
    });
    return PersistencePromise.resolve({
      maybeDocuments: results,
      sizeMap: sizeMap
    });
  };

  MemoryRemoteDocumentCache.prototype.getDocumentsMatchingQuery = function (transaction, query) {
    assert(!query.isCollectionGroupQuery(), 'CollectionGroup queries should be handled in LocalDocumentsView');
    var results = documentMap(); // Documents are ordered by key, so we can use a prefix scan to narrow down
    // the documents we need to match the query against.

    var prefix = new DocumentKey(query.path.child(''));
    var iterator = this.docs.getIteratorFrom(prefix);

    while (iterator.hasNext()) {
      var _a = iterator.getNext(),
          key = _a.key,
          maybeDocument = _a.value.maybeDocument;

      if (!query.path.isPrefixOf(key.path)) {
        break;
      }

      if (maybeDocument instanceof Document && query.matches(maybeDocument)) {
        results = results.insert(maybeDocument.key, maybeDocument);
      }
    }

    return PersistencePromise.resolve(results);
  };

  MemoryRemoteDocumentCache.prototype.forEachDocumentKey = function (transaction, f) {
    return PersistencePromise.forEach(this.docs, function (key) {
      return f(key);
    });
  };

  MemoryRemoteDocumentCache.prototype.getNewDocumentChanges = function (transaction) {
    var _this = this;

    var changedDocs = maybeDocumentMap();
    this.newDocumentChanges.forEach(function (key) {
      var entry = _this.docs.get(key);

      var changedDoc = entry ? entry.maybeDocument : new NoDocument(key, SnapshotVersion.forDeletedDoc());
      changedDocs = changedDocs.insert(key, changedDoc);
    });
    this.newDocumentChanges = documentKeySet();
    return PersistencePromise.resolve(changedDocs);
  };

  MemoryRemoteDocumentCache.prototype.newChangeBuffer = function () {
    return new MemoryRemoteDocumentChangeBuffer(this.sizer, this);
  };

  MemoryRemoteDocumentCache.prototype.getSize = function (txn) {
    return PersistencePromise.resolve(this.size);
  };

  return MemoryRemoteDocumentCache;
}();
/**
 * Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.
 */


var MemoryRemoteDocumentChangeBuffer =
/** @class */
function (_super) {
  tslib_1.__extends(MemoryRemoteDocumentChangeBuffer, _super);

  function MemoryRemoteDocumentChangeBuffer(sizer, documentCache) {
    var _this = _super.call(this) || this;

    _this.sizer = sizer;
    _this.documentCache = documentCache;
    return _this;
  }

  MemoryRemoteDocumentChangeBuffer.prototype.applyChanges = function (transaction) {
    var _this = this;

    var changes = this.assertChanges();
    var delta = 0;
    var docs = [];
    changes.forEach(function (key, maybeDocument) {
      var previousSize = _this.documentSizes.get(key);

      assert(previousSize !== undefined, "Attempting to change document " + key.toString() + " without having read it first");

      var size = _this.sizer(maybeDocument);

      delta += size - previousSize;
      docs.push({
        maybeDocument: maybeDocument,
        size: size
      });
    });
    return this.documentCache.addEntries(transaction, docs, delta);
  };

  MemoryRemoteDocumentChangeBuffer.prototype.getFromCache = function (transaction, documentKey) {
    return this.documentCache.getSizedEntry(transaction, documentKey);
  };

  MemoryRemoteDocumentChangeBuffer.prototype.getAllFromCache = function (transaction, documentKeys) {
    return this.documentCache.getSizedEntries(transaction, documentKeys);
  };

  return MemoryRemoteDocumentChangeBuffer;
}(RemoteDocumentChangeBuffer);
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var LOG_TAG$3 = 'MemoryPersistence';
/**
 * A memory-backed instance of Persistence. Data is stored only in RAM and
 * not persisted across sessions.
 */

var MemoryPersistence =
/** @class */
function () {
  /**
   * The constructor accepts a factory for creating a reference delegate. This
   * allows both the delegate and this instance to have strong references to
   * each other without having nullable fields that would then need to be
   * checked or asserted on every access.
   */
  function MemoryPersistence(clientId, referenceDelegateFactory) {
    var _this = this;

    this.clientId = clientId;
    this.mutationQueues = {};
    this.listenSequence = new ListenSequence(0);
    this._started = false;
    this._started = true;
    this.referenceDelegate = referenceDelegateFactory(this);
    this.queryCache = new MemoryQueryCache(this);

    var sizer = function (doc) {
      return _this.referenceDelegate.documentSize(doc);
    };

    this.indexManager = new MemoryIndexManager();
    this.remoteDocumentCache = new MemoryRemoteDocumentCache(this.indexManager, sizer);
  }

  MemoryPersistence.createLruPersistence = function (clientId, serializer, params) {
    var factory = function (p) {
      return new MemoryLruDelegate(p, new LocalSerializer(serializer), params);
    };

    return new MemoryPersistence(clientId, factory);
  };

  MemoryPersistence.createEagerPersistence = function (clientId) {
    var factory = function (p) {
      return new MemoryEagerDelegate(p);
    };

    return new MemoryPersistence(clientId, factory);
  };

  MemoryPersistence.prototype.shutdown = function () {
    // No durable state to ensure is closed on shutdown.
    this._started = false;
    return Promise.resolve();
  };

  Object.defineProperty(MemoryPersistence.prototype, "started", {
    get: function () {
      return this._started;
    },
    enumerable: true,
    configurable: true
  });

  MemoryPersistence.prototype.getActiveClients = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        return [2
        /*return*/
        , [this.clientId]];
      });
    });
  };

  MemoryPersistence.prototype.setPrimaryStateListener = function (primaryStateListener) {
    // All clients using memory persistence act as primary.
    return primaryStateListener(true);
  };

  MemoryPersistence.prototype.setDatabaseDeletedListener = function () {// No op.
  };

  MemoryPersistence.prototype.setNetworkEnabled = function (networkEnabled) {// No op.
  };

  MemoryPersistence.prototype.getIndexManager = function () {
    return this.indexManager;
  };

  MemoryPersistence.prototype.getMutationQueue = function (user) {
    var queue = this.mutationQueues[user.toKey()];

    if (!queue) {
      queue = new MemoryMutationQueue(this.indexManager, this.referenceDelegate);
      this.mutationQueues[user.toKey()] = queue;
    }

    return queue;
  };

  MemoryPersistence.prototype.getQueryCache = function () {
    return this.queryCache;
  };

  MemoryPersistence.prototype.getRemoteDocumentCache = function () {
    return this.remoteDocumentCache;
  };

  MemoryPersistence.prototype.runTransaction = function (action, mode, transactionOperation) {
    var _this = this;

    debug(LOG_TAG$3, 'Starting transaction:', action);
    var txn = new MemoryTransaction(this.listenSequence.next());
    this.referenceDelegate.onTransactionStarted();
    return transactionOperation(txn).next(function (result) {
      return _this.referenceDelegate.onTransactionCommitted(txn).next(function () {
        return result;
      });
    }).toPromise();
  };

  MemoryPersistence.prototype.mutationQueuesContainKey = function (transaction, key) {
    return PersistencePromise.or(values(this.mutationQueues).map(function (queue) {
      return function () {
        return queue.containsKey(transaction, key);
      };
    }));
  };

  return MemoryPersistence;
}();
/**
 * Memory persistence is not actually transactional, but future implementations
 * may have transaction-scoped state.
 */


var MemoryTransaction =
/** @class */
function () {
  function MemoryTransaction(currentSequenceNumber) {
    this.currentSequenceNumber = currentSequenceNumber;
  }

  return MemoryTransaction;
}();

var MemoryEagerDelegate =
/** @class */
function () {
  function MemoryEagerDelegate(persistence) {
    this.persistence = persistence;
  }

  MemoryEagerDelegate.prototype.setInMemoryPins = function (inMemoryPins) {
    this.inMemoryPins = inMemoryPins;
  };

  MemoryEagerDelegate.prototype.addReference = function (txn, key) {
    this.orphanedDocuments.delete(key);
    return PersistencePromise.resolve();
  };

  MemoryEagerDelegate.prototype.removeReference = function (txn, key) {
    this.orphanedDocuments.add(key);
    return PersistencePromise.resolve();
  };

  MemoryEagerDelegate.prototype.removeMutationReference = function (txn, key) {
    this.orphanedDocuments.add(key);
    return PersistencePromise.resolve();
  };

  MemoryEagerDelegate.prototype.removeTarget = function (txn, queryData) {
    var _this = this;

    var cache = this.persistence.getQueryCache();
    return cache.getMatchingKeysForTargetId(txn, queryData.targetId).next(function (keys) {
      keys.forEach(function (key) {
        return _this.orphanedDocuments.add(key);
      });
    }).next(function () {
      return cache.removeQueryData(txn, queryData);
    });
  };

  MemoryEagerDelegate.prototype.onTransactionStarted = function () {
    this.orphanedDocuments = new Set();
  };

  MemoryEagerDelegate.prototype.onTransactionCommitted = function (txn) {
    var _this = this;

    var cache = this.persistence.getRemoteDocumentCache();
    return PersistencePromise.forEach(this.orphanedDocuments, function (key) {
      return _this.isReferenced(txn, key).next(function (isReferenced) {
        if (!isReferenced) {
          // Since this is the eager delegate and memory persistence,
          // we don't care about the size of documents. We don't track
          // the size of the cache for eager GC.
          return cache.removeEntry(txn, key).next(function () {});
        }

        return PersistencePromise.resolve();
      });
    });
  };

  MemoryEagerDelegate.prototype.updateLimboDocument = function (txn, key) {
    var _this = this;

    return this.isReferenced(txn, key).next(function (isReferenced) {
      if (isReferenced) {
        _this.orphanedDocuments.delete(key);
      } else {
        _this.orphanedDocuments.add(key);
      }
    });
  };

  MemoryEagerDelegate.prototype.documentSize = function (doc) {
    // For eager GC, we don't care about the document size, there are no size thresholds.
    return 0;
  };

  MemoryEagerDelegate.prototype.isReferenced = function (txn, key) {
    var _this = this;

    return PersistencePromise.or([function () {
      return _this.persistence.getQueryCache().containsKey(txn, key);
    }, function () {
      return _this.persistence.mutationQueuesContainKey(txn, key);
    }, function () {
      return PersistencePromise.resolve(_this.inMemoryPins.containsKey(key));
    }]);
  };

  return MemoryEagerDelegate;
}();

var MemoryLruDelegate =
/** @class */
function () {
  function MemoryLruDelegate(persistence, serializer, lruParams) {
    this.persistence = persistence;
    this.serializer = serializer;
    this.orphanedSequenceNumbers = new ObjectMap(function (k) {
      return encode(k.path);
    });
    this.garbageCollector = new LruGarbageCollector(this, lruParams);
  } // No-ops, present so memory persistence doesn't have to care which delegate
  // it has.


  MemoryLruDelegate.prototype.onTransactionStarted = function () {};

  MemoryLruDelegate.prototype.onTransactionCommitted = function (txn) {
    return PersistencePromise.resolve();
  };

  MemoryLruDelegate.prototype.forEachTarget = function (txn, f) {
    return this.persistence.getQueryCache().forEachTarget(txn, f);
  };

  MemoryLruDelegate.prototype.getSequenceNumberCount = function (txn) {
    var docCountPromise = this.orphanedDocumentCount(txn);
    var targetCountPromise = this.persistence.getQueryCache().getTargetCount(txn);
    return targetCountPromise.next(function (targetCount) {
      return docCountPromise.next(function (docCount) {
        return targetCount + docCount;
      });
    });
  };

  MemoryLruDelegate.prototype.orphanedDocumentCount = function (txn) {
    var orphanedCount = 0;
    return this.forEachOrphanedDocumentSequenceNumber(txn, function (_) {
      orphanedCount++;
    }).next(function () {
      return orphanedCount;
    });
  };

  MemoryLruDelegate.prototype.forEachOrphanedDocumentSequenceNumber = function (txn, f) {
    var _this = this;

    return PersistencePromise.forEach(this.orphanedSequenceNumbers, function (key, sequenceNumber) {
      // Pass in the exact sequence number as the upper bound so we know it won't be pinned by
      // being too recent.
      return _this.isPinned(txn, key, sequenceNumber).next(function (isPinned) {
        if (!isPinned) {
          return f(sequenceNumber);
        } else {
          return PersistencePromise.resolve();
        }
      });
    });
  };

  MemoryLruDelegate.prototype.setInMemoryPins = function (inMemoryPins) {
    this.inMemoryPins = inMemoryPins;
  };

  MemoryLruDelegate.prototype.removeTargets = function (txn, upperBound, activeTargetIds) {
    return this.persistence.getQueryCache().removeTargets(txn, upperBound, activeTargetIds);
  };

  MemoryLruDelegate.prototype.removeOrphanedDocuments = function (txn, upperBound) {
    var _this = this;

    var count = 0;
    var cache = this.persistence.getRemoteDocumentCache();
    var p = cache.forEachDocumentKey(txn, function (key) {
      return _this.isPinned(txn, key, upperBound).next(function (isPinned) {
        if (isPinned) {
          return PersistencePromise.resolve();
        } else {
          count++; // The memory remote document cache does its own byte
          // accounting on removal. This is ok because updating the size
          // for memory persistence does not incur IO.

          return cache.removeEntry(txn, key).next();
        }
      });
    });
    return p.next(function () {
      return count;
    });
  };

  MemoryLruDelegate.prototype.removeMutationReference = function (txn, key) {
    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);
    return PersistencePromise.resolve();
  };

  MemoryLruDelegate.prototype.removeTarget = function (txn, queryData) {
    var updated = queryData.copy({
      sequenceNumber: txn.currentSequenceNumber
    });
    return this.persistence.getQueryCache().updateQueryData(txn, updated);
  };

  MemoryLruDelegate.prototype.addReference = function (txn, key) {
    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);
    return PersistencePromise.resolve();
  };

  MemoryLruDelegate.prototype.removeReference = function (txn, key) {
    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);
    return PersistencePromise.resolve();
  };

  MemoryLruDelegate.prototype.updateLimboDocument = function (txn, key) {
    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);
    return PersistencePromise.resolve();
  };

  MemoryLruDelegate.prototype.documentSize = function (maybeDoc) {
    var remoteDocument = this.serializer.toDbRemoteDocument(maybeDoc);
    var value;

    if (remoteDocument.document) {
      value = remoteDocument.document;
    } else if (remoteDocument.unknownDocument) {
      value = remoteDocument.unknownDocument;
    } else if (remoteDocument.noDocument) {
      value = remoteDocument.noDocument;
    } else {
      throw fail('Unknown remote document type');
    }

    return JSON.stringify(value).length;
  };

  MemoryLruDelegate.prototype.isPinned = function (txn, key, upperBound) {
    var _this = this;

    return PersistencePromise.or([function () {
      return _this.persistence.mutationQueuesContainKey(txn, key);
    }, function () {
      return PersistencePromise.resolve(_this.inMemoryPins.containsKey(key));
    }, function () {
      return _this.persistence.getQueryCache().containsKey(txn, key);
    }, function () {
      var orphanedAt = _this.orphanedSequenceNumbers.get(key);

      return PersistencePromise.resolve(orphanedAt !== undefined && orphanedAt > upperBound);
    }]);
  };

  MemoryLruDelegate.prototype.getCacheSize = function (txn) {
    return this.persistence.getRemoteDocumentCache().getSize(txn);
  };

  return MemoryLruDelegate;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Untyped Number alias we can use to check for ES6 methods / properties.
// tslint:disable-next-line:no-any variable-name


var NumberAsAny = Number;
/**
 * Minimum safe integer in Javascript because of floating point precision.
 * Added to not rely on ES6 features.
 */

var MIN_SAFE_INTEGER = NumberAsAny.MIN_SAFE_INTEGER || -(Math.pow(2, 53) - 1);
/**
 * Maximum safe integer in Javascript because of floating point precision.
 * Added to not rely on ES6 features.
 */

var MAX_SAFE_INTEGER = NumberAsAny.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;
/**
 * Returns whether an number is an integer, uses native implementation if
 * available.
 * Added to not rely on ES6 features.
 * @param value The value to test for being an integer
 */

var isInteger = NumberAsAny.isInteger || function (value) {
  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
};
/**
 * Returns whether a variable is either undefined or null.
 */


function isNullOrUndefined(value) {
  return value === null || value === undefined;
}
/**
 * Returns whether a value is an integer and in the safe integer range
 * @param value The value to test for being an integer and in the safe range
 */


function isSafeInteger(value) {
  return isInteger(value) && value <= MAX_SAFE_INTEGER && value >= MIN_SAFE_INTEGER;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var LOG_TAG$4 = 'ExponentialBackoff';
/**
 * A helper for running delayed tasks following an exponential backoff curve
 * between attempts.
 *
 * Each delay is made up of a "base" delay which follows the exponential
 * backoff curve, and a +/- 50% "jitter" that is calculated and added to the
 * base delay. This prevents clients from accidentally synchronizing their
 * delays causing spikes of load to the backend.
 */

var ExponentialBackoff =
/** @class */
function () {
  function ExponentialBackoff(
  /**
   * The AsyncQueue to run backoff operations on.
   */
  queue,
  /**
   * The ID to use when scheduling backoff operations on the AsyncQueue.
   */
  timerId,
  /**
   * The initial delay (used as the base delay on the first retry attempt).
   * Note that jitter will still be applied, so the actual delay could be as
   * little as 0.5*initialDelayMs.
   */
  initialDelayMs,
  /**
   * The multiplier to use to determine the extended base delay after each
   * attempt.
   */
  backoffFactor,
  /**
   * The maximum base delay after which no further backoff is performed.
   * Note that jitter will still be applied, so the actual delay could be as
   * much as 1.5*maxDelayMs.
   */
  maxDelayMs) {
    this.queue = queue;
    this.timerId = timerId;
    this.initialDelayMs = initialDelayMs;
    this.backoffFactor = backoffFactor;
    this.maxDelayMs = maxDelayMs;
    this.timerPromise = null;
    /** The last backoff attempt, as epoch milliseconds. */

    this.lastAttemptTime = Date.now();
    this.reset();
  }
  /**
   * Resets the backoff delay.
   *
   * The very next backoffAndWait() will have no delay. If it is called again
   * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
   * subsequent ones will increase according to the backoffFactor.
   */


  ExponentialBackoff.prototype.reset = function () {
    this.currentBaseMs = 0;
  };
  /**
   * Resets the backoff delay to the maximum delay (e.g. for use after a
   * RESOURCE_EXHAUSTED error).
   */


  ExponentialBackoff.prototype.resetToMax = function () {
    this.currentBaseMs = this.maxDelayMs;
  };
  /**
   * Returns a promise that resolves after currentDelayMs, and increases the
   * delay for any subsequent attempts. If there was a pending backoff operation
   * already, it will be canceled.
   */


  ExponentialBackoff.prototype.backoffAndRun = function (op) {
    var _this = this; // Cancel any pending backoff operation.


    this.cancel(); // First schedule using the current base (which may be 0 and should be
    // honored as such).

    var desiredDelayWithJitterMs = Math.floor(this.currentBaseMs + this.jitterDelayMs()); // Guard against lastAttemptTime being in the future due to a clock change.

    var delaySoFarMs = Math.max(0, Date.now() - this.lastAttemptTime); // Guard against the backoff delay already being past.

    var remainingDelayMs = Math.max(0, desiredDelayWithJitterMs - delaySoFarMs);

    if (this.currentBaseMs > 0) {
      debug(LOG_TAG$4, "Backing off for " + remainingDelayMs + " ms " + ("(base delay: " + this.currentBaseMs + " ms, ") + ("delay with jitter: " + desiredDelayWithJitterMs + " ms, ") + ("last attempt: " + delaySoFarMs + " ms ago)"));
    }

    this.timerPromise = this.queue.enqueueAfterDelay(this.timerId, remainingDelayMs, function () {
      _this.lastAttemptTime = Date.now();
      return op();
    }); // Apply backoff factor to determine next delay and ensure it is within
    // bounds.

    this.currentBaseMs *= this.backoffFactor;

    if (this.currentBaseMs < this.initialDelayMs) {
      this.currentBaseMs = this.initialDelayMs;
    }

    if (this.currentBaseMs > this.maxDelayMs) {
      this.currentBaseMs = this.maxDelayMs;
    }
  };

  ExponentialBackoff.prototype.cancel = function () {
    if (this.timerPromise !== null) {
      this.timerPromise.cancel();
      this.timerPromise = null;
    }
  };
  /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */


  ExponentialBackoff.prototype.jitterDelayMs = function () {
    return (Math.random() - 0.5) * this.currentBaseMs;
  };

  return ExponentialBackoff;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var LOG_TAG$5 = 'PersistentStream';
/**
 * PersistentStream can be in one of 5 states (each described in detail below)
 * based on the following state transition diagram:
 *
 *          start() called             auth & connection succeeded
 * INITIAL ----------------> STARTING -----------------------------> OPEN
 *                             ^  |                                   |
 *                             |  |                    error occurred |
 *                             |  \-----------------------------v-----/
 *                             |                                |
 *                    backoff  |                                |
 *                    elapsed  |              start() called    |
 *                             \--- BACKOFF <---------------- ERROR
 *
 * [any state] --------------------------> INITIAL
 *               stop() called or
 *               idle timer expired
 */

var PersistentStreamState;

(function (PersistentStreamState) {
  /**
   * The streaming RPC is not yet running and there's no error condition.
   * Calling start() will start the stream immediately without backoff.
   * While in this state isStarted() will return false.
   */
  PersistentStreamState[PersistentStreamState["Initial"] = 0] = "Initial";
  /**
   * The stream is starting, either waiting for an auth token or for the stream
   * to successfully open. While in this state, isStarted() will return true but
   * isOpen() will return false.
   */

  PersistentStreamState[PersistentStreamState["Starting"] = 1] = "Starting";
  /**
   * The streaming RPC is up and running. Requests and responses can flow
   * freely. Both isStarted() and isOpen() will return true.
   */

  PersistentStreamState[PersistentStreamState["Open"] = 2] = "Open";
  /**
   * The stream encountered an error. The next start attempt will back off.
   * While in this state isStarted() will return false.
   */

  PersistentStreamState[PersistentStreamState["Error"] = 3] = "Error";
  /**
   * An in-between state after an error where the stream is waiting before
   * re-starting. After waiting is complete, the stream will try to open.
   * While in this state isStarted() will return true but isOpen() will return
   * false.
   */

  PersistentStreamState[PersistentStreamState["Backoff"] = 4] = "Backoff";
})(PersistentStreamState || (PersistentStreamState = {}));
/**
 * Initial backoff time in milliseconds after an error.
 * Set to 1s according to https://cloud.google.com/apis/design/errors.
 */


var BACKOFF_INITIAL_DELAY_MS = 1000;
/** Maximum backoff time in milliseconds */

var BACKOFF_MAX_DELAY_MS = 60 * 1000;
var BACKOFF_FACTOR = 1.5;
/** The time a stream stays open after it is marked idle. */

var IDLE_TIMEOUT_MS = 60 * 1000;
/**
 * A PersistentStream is an abstract base class that represents a streaming RPC
 * to the Firestore backend. It's built on top of the connections own support
 * for streaming RPCs, and adds several critical features for our clients:
 *
 *   - Exponential backoff on failure
 *   - Authentication via CredentialsProvider
 *   - Dispatching all callbacks into the shared worker queue
 *   - Closing idle streams after 60 seconds of inactivity
 *
 * Subclasses of PersistentStream implement serialization of models to and
 * from the JSON representation of the protocol buffers for a specific
 * streaming RPC.
 *
 * ## Starting and Stopping
 *
 * Streaming RPCs are stateful and need to be start()ed before messages can
 * be sent and received. The PersistentStream will call the onOpen() function
 * of the listener once the stream is ready to accept requests.
 *
 * Should a start() fail, PersistentStream will call the registered onClose()
 * listener with a FirestoreError indicating what went wrong.
 *
 * A PersistentStream can be started and stopped repeatedly.
 *
 * Generic types:
 *  SendType: The type of the outgoing message of the underlying
 *    connection stream
 *  ReceiveType: The type of the incoming message of the underlying
 *    connection stream
 *  ListenerType: The type of the listener that will be used for callbacks
 */

var PersistentStream =
/** @class */
function () {
  function PersistentStream(queue, connectionTimerId, idleTimerId, connection, credentialsProvider, listener) {
    this.queue = queue;
    this.idleTimerId = idleTimerId;
    this.connection = connection;
    this.credentialsProvider = credentialsProvider;
    this.listener = listener;
    this.state = PersistentStreamState.Initial;
    /**
     * A close count that's incremented every time the stream is closed; used by
     * getCloseGuardedDispatcher() to invalidate callbacks that happen after
     * close.
     */

    this.closeCount = 0;
    this.idleTimer = null;
    this.stream = null;
    this.backoff = new ExponentialBackoff(queue, connectionTimerId, BACKOFF_INITIAL_DELAY_MS, BACKOFF_FACTOR, BACKOFF_MAX_DELAY_MS);
  }
  /**
   * Returns true if start() has been called and no error has occurred. True
   * indicates the stream is open or in the process of opening (which
   * encompasses respecting backoff, getting auth tokens, and starting the
   * actual RPC). Use isOpen() to determine if the stream is open and ready for
   * outbound requests.
   */


  PersistentStream.prototype.isStarted = function () {
    return this.state === PersistentStreamState.Starting || this.state === PersistentStreamState.Open || this.state === PersistentStreamState.Backoff;
  };
  /**
   * Returns true if the underlying RPC is open (the onOpen() listener has been
   * called) and the stream is ready for outbound requests.
   */


  PersistentStream.prototype.isOpen = function () {
    return this.state === PersistentStreamState.Open;
  };
  /**
   * Starts the RPC. Only allowed if isStarted() returns false. The stream is
   * not immediately ready for use: onOpen() will be invoked when the RPC is
   * ready for outbound requests, at which point isOpen() will return true.
   *
   * When start returns, isStarted() will return true.
   */


  PersistentStream.prototype.start = function () {
    if (this.state === PersistentStreamState.Error) {
      this.performBackoff();
      return;
    }

    assert(this.state === PersistentStreamState.Initial, 'Already started');
    this.auth();
  };
  /**
   * Stops the RPC. This call is idempotent and allowed regardless of the
   * current isStarted() state.
   *
   * When stop returns, isStarted() and isOpen() will both return false.
   */


  PersistentStream.prototype.stop = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!this.isStarted()) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , this.close(PersistentStreamState.Initial)];

          case 1:
            _a.sent();

            _a.label = 2;

          case 2:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * After an error the stream will usually back off on the next attempt to
   * start it. If the error warrants an immediate restart of the stream, the
   * sender can use this to indicate that the receiver should not back off.
   *
   * Each error will call the onClose() listener. That function can decide to
   * inhibit backoff if required.
   */


  PersistentStream.prototype.inhibitBackoff = function () {
    assert(!this.isStarted(), 'Can only inhibit backoff in a stopped state');
    this.state = PersistentStreamState.Initial;
    this.backoff.reset();
  };
  /**
   * Marks this stream as idle. If no further actions are performed on the
   * stream for one minute, the stream will automatically close itself and
   * notify the stream's onClose() handler with Status.OK. The stream will then
   * be in a !isStarted() state, requiring the caller to start the stream again
   * before further use.
   *
   * Only streams that are in state 'Open' can be marked idle, as all other
   * states imply pending network operations.
   */


  PersistentStream.prototype.markIdle = function () {
    var _this = this; // Starts the idle time if we are in state 'Open' and are not yet already
    // running a timer (in which case the previous idle timeout still applies).


    if (this.isOpen() && this.idleTimer === null) {
      this.idleTimer = this.queue.enqueueAfterDelay(this.idleTimerId, IDLE_TIMEOUT_MS, function () {
        return _this.handleIdleCloseTimer();
      });
    }
  };
  /** Sends a message to the underlying stream. */


  PersistentStream.prototype.sendRequest = function (msg) {
    this.cancelIdleCheck();
    this.stream.send(msg);
  };
  /** Called by the idle timer when the stream should close due to inactivity. */


  PersistentStream.prototype.handleIdleCloseTimer = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        if (this.isOpen()) {
          // When timing out an idle stream there's no reason to force the stream into backoff when
          // it restarts so set the stream state to Initial instead of Error.
          return [2
          /*return*/
          , this.close(PersistentStreamState.Initial)];
        }

        return [2
        /*return*/
        ];
      });
    });
  };
  /** Marks the stream as active again. */


  PersistentStream.prototype.cancelIdleCheck = function () {
    if (this.idleTimer) {
      this.idleTimer.cancel();
      this.idleTimer = null;
    }
  };
  /**
   * Closes the stream and cleans up as necessary:
   *
   * * closes the underlying GRPC stream;
   * * calls the onClose handler with the given 'error';
   * * sets internal stream state to 'finalState';
   * * adjusts the backoff timer based on the error
   *
   * A new stream can be opened by calling start().
   *
   * @param finalState the intended state of the stream after closing.
   * @param error the error the connection was closed with.
   */


  PersistentStream.prototype.close = function (finalState, error$1) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            assert(this.isStarted(), 'Only started streams should be closed.');
            assert(finalState === PersistentStreamState.Error || isNullOrUndefined(error$1), "Can't provide an error when not in an error state."); // Cancel any outstanding timers (they're guaranteed not to execute).

            this.cancelIdleCheck();
            this.backoff.cancel(); // Invalidates any stream-related callbacks (e.g. from auth or the
            // underlying stream), guaranteeing they won't execute.

            this.closeCount++;

            if (finalState !== PersistentStreamState.Error) {
              // If this is an intentional close ensure we don't delay our next connection attempt.
              this.backoff.reset();
            } else if (error$1 && error$1.code === Code.RESOURCE_EXHAUSTED) {
              // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
              error(error$1.toString());
              error('Using maximum backoff delay to prevent overloading the backend.');
              this.backoff.resetToMax();
            } else if (error$1 && error$1.code === Code.UNAUTHENTICATED) {
              // "unauthenticated" error means the token was rejected. Try force refreshing it in case it
              // just expired.
              this.credentialsProvider.invalidateToken();
            } // Clean up the underlying stream because we are no longer interested in events.


            if (this.stream !== null) {
              this.tearDown();
              this.stream.close();
              this.stream = null;
            } // This state must be assigned before calling onClose() to allow the callback to
            // inhibit backoff or otherwise manipulate the state in its non-started state.


            this.state = finalState; // Notify the listener that the stream closed.

            return [4
            /*yield*/
            , this.listener.onClose(error$1)];

          case 1:
            // Notify the listener that the stream closed.
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Can be overridden to perform additional cleanup before the stream is closed.
   * Calling super.tearDown() is not required.
   */


  PersistentStream.prototype.tearDown = function () {};

  PersistentStream.prototype.auth = function () {
    var _this = this;

    assert(this.state === PersistentStreamState.Initial, 'Must be in initial state to auth');
    this.state = PersistentStreamState.Starting;
    var dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount); // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.

    var closeCount = this.closeCount;
    this.credentialsProvider.getToken().then(function (token) {
      // Stream can be stopped while waiting for authentication.
      // TODO(mikelehen): We really should just use dispatchIfNotClosed
      // and let this dispatch onto the queue, but that opened a spec test can
      // of worms that I don't want to deal with in this PR.
      if (_this.closeCount === closeCount) {
        // Normally we'd have to schedule the callback on the AsyncQueue.
        // However, the following calls are safe to be called outside the
        // AsyncQueue since they don't chain asynchronous calls
        _this.startStream(token);
      }
    }, function (error) {
      dispatchIfNotClosed(function () {
        var rpcError = new FirestoreError(Code.UNKNOWN, 'Fetching auth token failed: ' + error.message);
        return _this.handleStreamClose(rpcError);
      });
    });
  };

  PersistentStream.prototype.startStream = function (token) {
    var _this = this;

    assert(this.state === PersistentStreamState.Starting, 'Trying to start stream in a non-starting state');
    var dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);
    this.stream = this.startRpc(token);
    this.stream.onOpen(function () {
      dispatchIfNotClosed(function () {
        assert(_this.state === PersistentStreamState.Starting, 'Expected stream to be in state Starting, but was ' + _this.state);
        _this.state = PersistentStreamState.Open;
        return _this.listener.onOpen();
      });
    });
    this.stream.onClose(function (error) {
      dispatchIfNotClosed(function () {
        return _this.handleStreamClose(error);
      });
    });
    this.stream.onMessage(function (msg) {
      dispatchIfNotClosed(function () {
        return _this.onMessage(msg);
      });
    });
  };

  PersistentStream.prototype.performBackoff = function () {
    var _this = this;

    assert(this.state === PersistentStreamState.Error, 'Should only perform backoff when in Error state');
    this.state = PersistentStreamState.Backoff;
    this.backoff.backoffAndRun(function () {
      return tslib_1.__awaiter(_this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
          assert(this.state === PersistentStreamState.Backoff, 'Backoff elapsed but state is now: ' + this.state);
          this.state = PersistentStreamState.Initial;
          this.start();
          assert(this.isStarted(), 'PersistentStream should have started');
          return [2
          /*return*/
          ];
        });
      });
    });
  }; // Visible for tests


  PersistentStream.prototype.handleStreamClose = function (error) {
    assert(this.isStarted(), "Can't handle server close on non-started stream");
    debug(LOG_TAG$5, "close with error: " + error);
    this.stream = null; // In theory the stream could close cleanly, however, in our current model
    // we never expect this to happen because if we stop a stream ourselves,
    // this callback will never be called. To prevent cases where we retry
    // without a backoff accidentally, we set the stream to error in all cases.

    return this.close(PersistentStreamState.Error, error);
  };
  /**
   * Returns a "dispatcher" function that dispatches operations onto the
   * AsyncQueue but only runs them if closeCount remains unchanged. This allows
   * us to turn auth / stream callbacks into no-ops if the stream is closed /
   * re-opened, etc.
   */


  PersistentStream.prototype.getCloseGuardedDispatcher = function (startCloseCount) {
    var _this = this;

    return function (fn) {
      _this.queue.enqueueAndForget(function () {
        if (_this.closeCount === startCloseCount) {
          return fn();
        } else {
          debug(LOG_TAG$5, 'stream callback skipped by getCloseGuardedDispatcher.');
          return Promise.resolve();
        }
      });
    };
  };

  return PersistentStream;
}();
/**
 * A PersistentStream that implements the Listen RPC.
 *
 * Once the Listen stream has called the onOpen() listener, any number of
 * listen() and unlisten() calls can be made to control what changes will be
 * sent from the server for ListenResponses.
 */


var PersistentListenStream =
/** @class */
function (_super) {
  tslib_1.__extends(PersistentListenStream, _super);

  function PersistentListenStream(queue, connection, credentials, serializer, listener) {
    var _this = _super.call(this, queue, TimerId.ListenStreamConnectionBackoff, TimerId.ListenStreamIdle, connection, credentials, listener) || this;

    _this.serializer = serializer;
    return _this;
  }

  PersistentListenStream.prototype.startRpc = function (token) {
    return this.connection.openStream('Listen', token);
  };

  PersistentListenStream.prototype.onMessage = function (watchChangeProto) {
    // A successful response means the stream is healthy
    this.backoff.reset();
    var watchChange = this.serializer.fromWatchChange(watchChangeProto);
    var snapshot = this.serializer.versionFromListenResponse(watchChangeProto);
    return this.listener.onWatchChange(watchChange, snapshot);
  };
  /**
   * Registers interest in the results of the given query. If the query
   * includes a resumeToken it will be included in the request. Results that
   * affect the query will be streamed back as WatchChange messages that
   * reference the targetId.
   */


  PersistentListenStream.prototype.watch = function (queryData) {
    var request = {};
    request.database = this.serializer.encodedDatabaseId;
    request.addTarget = this.serializer.toTarget(queryData);
    var labels = this.serializer.toListenRequestLabels(queryData);

    if (labels) {
      request.labels = labels;
    }

    this.sendRequest(request);
  };
  /**
   * Unregisters interest in the results of the query associated with the
   * given targetId.
   */


  PersistentListenStream.prototype.unwatch = function (targetId) {
    var request = {};
    request.database = this.serializer.encodedDatabaseId;
    request.removeTarget = targetId;
    this.sendRequest(request);
  };

  return PersistentListenStream;
}(PersistentStream);
/**
 * A Stream that implements the Write RPC.
 *
 * The Write RPC requires the caller to maintain special streamToken
 * state in between calls, to help the server understand which responses the
 * client has processed by the time the next request is made. Every response
 * will contain a streamToken; this value must be passed to the next
 * request.
 *
 * After calling start() on this stream, the next request must be a handshake,
 * containing whatever streamToken is on hand. Once a response to this
 * request is received, all pending mutations may be submitted. When
 * submitting multiple batches of mutations at the same time, it's
 * okay to use the same streamToken for the calls to writeMutations.
 *
 * TODO(b/33271235): Use proto types
 */


var PersistentWriteStream =
/** @class */
function (_super) {
  tslib_1.__extends(PersistentWriteStream, _super);

  function PersistentWriteStream(queue, connection, credentials, serializer, listener) {
    var _this = _super.call(this, queue, TimerId.WriteStreamConnectionBackoff, TimerId.WriteStreamIdle, connection, credentials, listener) || this;

    _this.serializer = serializer;
    _this.handshakeComplete_ = false;
    return _this;
  }

  Object.defineProperty(PersistentWriteStream.prototype, "handshakeComplete", {
    /**
     * Tracks whether or not a handshake has been successfully exchanged and
     * the stream is ready to accept mutations.
     */
    get: function () {
      return this.handshakeComplete_;
    },
    enumerable: true,
    configurable: true
  }); // Override of PersistentStream.start

  PersistentWriteStream.prototype.start = function () {
    this.handshakeComplete_ = false;

    _super.prototype.start.call(this);
  };

  PersistentWriteStream.prototype.tearDown = function () {
    if (this.handshakeComplete_) {
      this.writeMutations([]);
    }
  };

  PersistentWriteStream.prototype.startRpc = function (token) {
    return this.connection.openStream('Write', token);
  };

  PersistentWriteStream.prototype.onMessage = function (responseProto) {
    // Always capture the last stream token.
    assert(!!responseProto.streamToken, 'Got a write response without a stream token');
    this.lastStreamToken = responseProto.streamToken;

    if (!this.handshakeComplete_) {
      // The first response is always the handshake response
      assert(!responseProto.writeResults || responseProto.writeResults.length === 0, 'Got mutation results for handshake');
      this.handshakeComplete_ = true;
      return this.listener.onHandshakeComplete();
    } else {
      // A successful first write response means the stream is healthy,
      // Note, that we could consider a successful handshake healthy, however,
      // the write itself might be causing an error we want to back off from.
      this.backoff.reset();
      var results = this.serializer.fromWriteResults(responseProto.writeResults, responseProto.commitTime);
      var commitVersion = this.serializer.fromVersion(responseProto.commitTime);
      return this.listener.onMutationResult(commitVersion, results);
    }
  };
  /**
   * Sends an initial streamToken to the server, performing the handshake
   * required to make the StreamingWrite RPC work. Subsequent
   * calls should wait until onHandshakeComplete was called.
   */


  PersistentWriteStream.prototype.writeHandshake = function () {
    assert(this.isOpen(), 'Writing handshake requires an opened stream');
    assert(!this.handshakeComplete_, 'Handshake already completed'); // TODO(dimond): Support stream resumption. We intentionally do not set the
    // stream token on the handshake, ignoring any stream token we might have.

    var request = {};
    request.database = this.serializer.encodedDatabaseId;
    this.sendRequest(request);
  };
  /** Sends a group of mutations to the Firestore backend to apply. */


  PersistentWriteStream.prototype.writeMutations = function (mutations) {
    var _this = this;

    assert(this.isOpen(), 'Writing mutations requires an opened stream');
    assert(this.handshakeComplete_, 'Handshake must be complete before writing mutations');
    assert(this.lastStreamToken.length > 0, 'Trying to write mutation without a token');
    var request = {
      // Protos are typed with string, but we support UInt8Array on Node
      // tslint:disable-next-line:no-any
      streamToken: this.lastStreamToken,
      writes: mutations.map(function (mutation) {
        return _this.serializer.toMutation(mutation);
      })
    };
    this.sendRequest(request);
  };

  return PersistentWriteStream;
}(PersistentStream);
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Datastore is a wrapper around the external Google Cloud Datastore grpc API,
 * which provides an interface that is more convenient for the rest of the
 * client SDK architecture to consume.
 */


var Datastore =
/** @class */
function () {
  function Datastore(queue, connection, credentials, serializer) {
    this.queue = queue;
    this.connection = connection;
    this.credentials = credentials;
    this.serializer = serializer;
  }

  Datastore.prototype.newPersistentWriteStream = function (listener) {
    return new PersistentWriteStream(this.queue, this.connection, this.credentials, this.serializer, listener);
  };

  Datastore.prototype.newPersistentWatchStream = function (listener) {
    return new PersistentListenStream(this.queue, this.connection, this.credentials, this.serializer, listener);
  };

  Datastore.prototype.commit = function (mutations) {
    var _this = this;

    var params = {
      database: this.serializer.encodedDatabaseId,
      writes: mutations.map(function (m) {
        return _this.serializer.toMutation(m);
      })
    };
    return this.invokeRPC('Commit', params).then(function (response) {
      return _this.serializer.fromWriteResults(response.writeResults, response.commitTime);
    });
  };

  Datastore.prototype.lookup = function (keys) {
    var _this = this;

    var params = {
      database: this.serializer.encodedDatabaseId,
      documents: keys.map(function (k) {
        return _this.serializer.toName(k);
      })
    };
    return this.invokeStreamingRPC('BatchGetDocuments', params).then(function (response) {
      var docs = maybeDocumentMap();
      response.forEach(function (proto) {
        var doc = _this.serializer.fromMaybeDocument(proto);

        docs = docs.insert(doc.key, doc);
      });
      var result = [];
      keys.forEach(function (key) {
        var doc = docs.get(key);
        assert(!!doc, 'Missing entity in write response for ' + key);
        result.push(doc);
      });
      return result;
    });
  };
  /** Gets an auth token and invokes the provided RPC. */


  Datastore.prototype.invokeRPC = function (rpcName, request) {
    var _this = this;

    return this.credentials.getToken().then(function (token) {
      return _this.connection.invokeRPC(rpcName, request, token);
    }).catch(function (error) {
      if (error.code === Code.UNAUTHENTICATED) {
        _this.credentials.invalidateToken();
      }

      throw error;
    });
  };
  /** Gets an auth token and invokes the provided RPC with streamed results. */


  Datastore.prototype.invokeStreamingRPC = function (rpcName, request) {
    var _this = this;

    return this.credentials.getToken().then(function (token) {
      return _this.connection.invokeStreamingRPC(rpcName, request, token);
    }).catch(function (error) {
      if (error.code === Code.UNAUTHENTICATED) {
        _this.credentials.invalidateToken();
      }

      throw error;
    });
  };

  return Datastore;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Internal transaction object responsible for accumulating the mutations to
 * perform and the base versions for any documents read.
 */


var Transaction =
/** @class */
function () {
  function Transaction(datastore) {
    this.datastore = datastore; // The version of each document that was read during this transaction.

    this.readVersions = documentVersionMap();
    this.mutations = [];
    this.committed = false;
  }

  Transaction.prototype.recordVersion = function (doc) {
    var docVersion;

    if (doc instanceof Document) {
      docVersion = doc.version;
    } else if (doc instanceof NoDocument) {
      // For deleted docs, we must use baseVersion 0 when we overwrite them.
      docVersion = SnapshotVersion.forDeletedDoc();
    } else {
      throw fail('Document in a transaction was a ' + doc.constructor.name);
    }

    var existingVersion = this.readVersions.get(doc.key);

    if (existingVersion !== null) {
      if (!docVersion.isEqual(existingVersion)) {
        // This transaction will fail no matter what.
        throw new FirestoreError(Code.ABORTED, 'Document version changed between two reads.');
      }
    } else {
      this.readVersions = this.readVersions.insert(doc.key, docVersion);
    }
  };

  Transaction.prototype.lookup = function (keys) {
    var _this = this;

    if (this.committed) {
      return Promise.reject('Transaction has already completed.');
    }

    if (this.mutations.length > 0) {
      return Promise.reject('Transactions lookups are invalid after writes.');
    }

    return this.datastore.lookup(keys).then(function (docs) {
      docs.forEach(function (doc) {
        if (doc instanceof NoDocument || doc instanceof Document) {
          _this.recordVersion(doc);
        } else {
          fail('Document in a transaction was a ' + doc.constructor.name);
        }
      });
      return docs;
    });
  };

  Transaction.prototype.write = function (mutations) {
    if (this.committed) {
      throw new FirestoreError(Code.FAILED_PRECONDITION, 'Transaction has already completed.');
    }

    this.mutations = this.mutations.concat(mutations);
  };
  /**
   * Returns the version of this document when it was read in this transaction,
   * as a precondition, or no precondition if it was not read.
   */


  Transaction.prototype.precondition = function (key) {
    var version = this.readVersions.get(key);

    if (version) {
      return Precondition.updateTime(version);
    } else {
      return Precondition.NONE;
    }
  };
  /**
   * Returns the precondition for a document if the operation is an update.
   */


  Transaction.prototype.preconditionForUpdate = function (key) {
    var version = this.readVersions.get(key);

    if (version && version.isEqual(SnapshotVersion.forDeletedDoc())) {
      // The document doesn't exist, so fail the transaction.
      throw new FirestoreError(Code.FAILED_PRECONDITION, "Can't update a document that doesn't exist.");
    } else if (version) {
      // Document exists, base precondition on document update time.
      return Precondition.updateTime(version);
    } else {
      // Document was not read, so we just use the preconditions for a blind
      // update.
      return Precondition.exists(true);
    }
  };

  Transaction.prototype.set = function (key, data) {
    this.write(data.toMutations(key, this.precondition(key)));
  };

  Transaction.prototype.update = function (key, data) {
    this.write(data.toMutations(key, this.preconditionForUpdate(key)));
  };

  Transaction.prototype.delete = function (key) {
    this.write([new DeleteMutation(key, this.precondition(key))]); // Since the delete will be applied before all following writes, we need to
    // ensure that the precondition for the next write will be exists: false.

    this.readVersions = this.readVersions.insert(key, SnapshotVersion.forDeletedDoc());
  };

  Transaction.prototype.commit = function () {
    var _this = this;

    var unwritten = this.readVersions; // For each mutation, note that the doc was written.

    this.mutations.forEach(function (mutation) {
      unwritten = unwritten.remove(mutation.key);
    });

    if (!unwritten.isEmpty()) {
      return Promise.reject(Error('Every document read in a transaction must also be written.'));
    }

    return this.datastore.commit(this.mutations).then(function () {
      _this.committed = true;
    });
  };

  return Transaction;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Describes the online state of the Firestore client. Note that this does not
 * indicate whether or not the remote store is trying to connect or not. This is
 * primarily used by the View / EventManager code to change their behavior while
 * offline (e.g. get() calls shouldn't wait for data from the server and
 * snapshot events should set metadata.isFromCache=true).
 */


var OnlineState;

(function (OnlineState) {
  /**
   * The Firestore client is in an unknown online state. This means the client
   * is either not actively trying to establish a connection or it is currently
   * trying to establish a connection, but it has not succeeded or failed yet.
   * Higher-level components should not operate in offline mode.
   */
  OnlineState[OnlineState["Unknown"] = 0] = "Unknown";
  /**
   * The client is connected and the connections are healthy. This state is
   * reached after a successful connection and there has been at least one
   * successful message received from the backends.
   */

  OnlineState[OnlineState["Online"] = 1] = "Online";
  /**
   * The client is either trying to establish a connection but failing, or it
   * has been explicitly marked offline via a call to disableNetwork().
   * Higher-level components should operate in offline mode.
   */

  OnlineState[OnlineState["Offline"] = 2] = "Offline";
})(OnlineState || (OnlineState = {}));
/** The source of an online state event. */


var OnlineStateSource;

(function (OnlineStateSource) {
  OnlineStateSource[OnlineStateSource["RemoteStore"] = 0] = "RemoteStore";
  OnlineStateSource[OnlineStateSource["SharedClientState"] = 1] = "SharedClientState";
})(OnlineStateSource || (OnlineStateSource = {}));
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var LOG_TAG$6 = 'OnlineStateTracker'; // To deal with transient failures, we allow multiple stream attempts before
// giving up and transitioning from OnlineState.Unknown to Offline.
// TODO(mikelehen): This used to be set to 2 as a mitigation for b/66228394.
// @jdimond thinks that bug is sufficiently fixed so that we can set this back
// to 1. If that works okay, we could potentially remove this logic entirely.

var MAX_WATCH_STREAM_FAILURES = 1; // To deal with stream attempts that don't succeed or fail in a timely manner,
// we have a timeout for OnlineState to reach Online or Offline.
// If the timeout is reached, we transition to Offline rather than waiting
// indefinitely.

var ONLINE_STATE_TIMEOUT_MS = 10 * 1000;
/**
 * A component used by the RemoteStore to track the OnlineState (that is,
 * whether or not the client as a whole should be considered to be online or
 * offline), implementing the appropriate heuristics.
 *
 * In particular, when the client is trying to connect to the backend, we
 * allow up to MAX_WATCH_STREAM_FAILURES within ONLINE_STATE_TIMEOUT_MS for
 * a connection to succeed. If we have too many failures or the timeout elapses,
 * then we set the OnlineState to Offline, and the client will behave as if
 * it is offline (get()s will return cached data, etc.).
 */

var OnlineStateTracker =
/** @class */
function () {
  function OnlineStateTracker(asyncQueue, onlineStateHandler) {
    this.asyncQueue = asyncQueue;
    this.onlineStateHandler = onlineStateHandler;
    /** The current OnlineState. */

    this.state = OnlineState.Unknown;
    /**
     * A count of consecutive failures to open the stream. If it reaches the
     * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
     * Offline.
     */

    this.watchStreamFailures = 0;
    /**
     * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
     * transition from OnlineState.Unknown to OnlineState.Offline without waiting
     * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
     */

    this.onlineStateTimer = null;
    /**
     * Whether the client should log a warning message if it fails to connect to
     * the backend (initially true, cleared after a successful stream, or if we've
     * logged the message already).
     */

    this.shouldWarnClientIsOffline = true;
  }
  /**
   * Called by RemoteStore when a watch stream is started (including on each
   * backoff attempt).
   *
   * If this is the first attempt, it sets the OnlineState to Unknown and starts
   * the onlineStateTimer.
   */


  OnlineStateTracker.prototype.handleWatchStreamStart = function () {
    var _this = this;

    if (this.watchStreamFailures === 0) {
      this.setAndBroadcast(OnlineState.Unknown);
      assert(this.onlineStateTimer === null, "onlineStateTimer shouldn't be started yet");
      this.onlineStateTimer = this.asyncQueue.enqueueAfterDelay(TimerId.OnlineStateTimeout, ONLINE_STATE_TIMEOUT_MS, function () {
        _this.onlineStateTimer = null;
        assert(_this.state === OnlineState.Unknown, 'Timer should be canceled if we transitioned to a different state.');

        _this.logClientOfflineWarningIfNecessary("Backend didn't respond within " + ONLINE_STATE_TIMEOUT_MS / 1000 + " " + "seconds.");

        _this.setAndBroadcast(OnlineState.Offline); // NOTE: handleWatchStreamFailure() will continue to increment
        // watchStreamFailures even though we are already marked Offline,
        // but this is non-harmful.


        return Promise.resolve();
      });
    }
  };
  /**
   * Updates our OnlineState as appropriate after the watch stream reports a
   * failure. The first failure moves us to the 'Unknown' state. We then may
   * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
   * actually transition to the 'Offline' state.
   */


  OnlineStateTracker.prototype.handleWatchStreamFailure = function (error) {
    if (this.state === OnlineState.Online) {
      this.setAndBroadcast(OnlineState.Unknown); // To get to OnlineState.Online, set() must have been called which would
      // have reset our heuristics.

      assert(this.watchStreamFailures === 0, 'watchStreamFailures must be 0');
      assert(this.onlineStateTimer === null, 'onlineStateTimer must be null');
    } else {
      this.watchStreamFailures++;

      if (this.watchStreamFailures >= MAX_WATCH_STREAM_FAILURES) {
        this.clearOnlineStateTimer();
        this.logClientOfflineWarningIfNecessary("Connection failed " + MAX_WATCH_STREAM_FAILURES + " " + ("times. Most recent error: " + error.toString()));
        this.setAndBroadcast(OnlineState.Offline);
      }
    }
  };
  /**
   * Explicitly sets the OnlineState to the specified state.
   *
   * Note that this resets our timers / failure counters, etc. used by our
   * Offline heuristics, so must not be used in place of
   * handleWatchStreamStart() and handleWatchStreamFailure().
   */


  OnlineStateTracker.prototype.set = function (newState) {
    this.clearOnlineStateTimer();
    this.watchStreamFailures = 0;

    if (newState === OnlineState.Online) {
      // We've connected to watch at least once. Don't warn the developer
      // about being offline going forward.
      this.shouldWarnClientIsOffline = false;
    }

    this.setAndBroadcast(newState);
  };

  OnlineStateTracker.prototype.setAndBroadcast = function (newState) {
    if (newState !== this.state) {
      this.state = newState;
      this.onlineStateHandler(newState);
    }
  };

  OnlineStateTracker.prototype.logClientOfflineWarningIfNecessary = function (details) {
    var message = "Could not reach Cloud Firestore backend. " + details + "\n" + "This typically indicates that your device does not have a healthy " + "Internet connection at the moment. The client will operate in offline " + "mode until it is able to successfully connect to the backend.";

    if (this.shouldWarnClientIsOffline) {
      error(message);
      this.shouldWarnClientIsOffline = false;
    } else {
      debug(LOG_TAG$6, message);
    }
  };

  OnlineStateTracker.prototype.clearOnlineStateTimer = function () {
    if (this.onlineStateTimer !== null) {
      this.onlineStateTimer.cancel();
      this.onlineStateTimer = null;
    }
  };

  return OnlineStateTracker;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Error Codes describing the different ways GRPC can fail. These are copied
 * directly from GRPC's sources here:
 *
 * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
 *
 * Important! The names of these identifiers matter because the string forms
 * are used for reverse lookups from the webchannel stream. Do NOT change the
 * names of these identifiers.
 */


var RpcCode;

(function (RpcCode) {
  RpcCode[RpcCode["OK"] = 0] = "OK";
  RpcCode[RpcCode["CANCELLED"] = 1] = "CANCELLED";
  RpcCode[RpcCode["UNKNOWN"] = 2] = "UNKNOWN";
  RpcCode[RpcCode["INVALID_ARGUMENT"] = 3] = "INVALID_ARGUMENT";
  RpcCode[RpcCode["DEADLINE_EXCEEDED"] = 4] = "DEADLINE_EXCEEDED";
  RpcCode[RpcCode["NOT_FOUND"] = 5] = "NOT_FOUND";
  RpcCode[RpcCode["ALREADY_EXISTS"] = 6] = "ALREADY_EXISTS";
  RpcCode[RpcCode["PERMISSION_DENIED"] = 7] = "PERMISSION_DENIED";
  RpcCode[RpcCode["UNAUTHENTICATED"] = 16] = "UNAUTHENTICATED";
  RpcCode[RpcCode["RESOURCE_EXHAUSTED"] = 8] = "RESOURCE_EXHAUSTED";
  RpcCode[RpcCode["FAILED_PRECONDITION"] = 9] = "FAILED_PRECONDITION";
  RpcCode[RpcCode["ABORTED"] = 10] = "ABORTED";
  RpcCode[RpcCode["OUT_OF_RANGE"] = 11] = "OUT_OF_RANGE";
  RpcCode[RpcCode["UNIMPLEMENTED"] = 12] = "UNIMPLEMENTED";
  RpcCode[RpcCode["INTERNAL"] = 13] = "INTERNAL";
  RpcCode[RpcCode["UNAVAILABLE"] = 14] = "UNAVAILABLE";
  RpcCode[RpcCode["DATA_LOSS"] = 15] = "DATA_LOSS";
})(RpcCode || (RpcCode = {}));
/**
 * Determines whether an error code represents a permanent error when received
 * in response to a non-write operation.
 *
 * See isPermanentWriteError for classifying write errors.
 */


function isPermanentError(code) {
  switch (code) {
    case Code.OK:
      return fail('Treated status OK as error');

    case Code.CANCELLED:
    case Code.UNKNOWN:
    case Code.DEADLINE_EXCEEDED:
    case Code.RESOURCE_EXHAUSTED:
    case Code.INTERNAL:
    case Code.UNAVAILABLE: // Unauthenticated means something went wrong with our token and we need
    // to retry with new credentials which will happen automatically.

    case Code.UNAUTHENTICATED:
      return false;

    case Code.INVALID_ARGUMENT:
    case Code.NOT_FOUND:
    case Code.ALREADY_EXISTS:
    case Code.PERMISSION_DENIED:
    case Code.FAILED_PRECONDITION: // Aborted might be retried in some scenarios, but that is dependant on
    // the context and should handled individually by the calling code.
    // See https://cloud.google.com/apis/design/errors.

    case Code.ABORTED:
    case Code.OUT_OF_RANGE:
    case Code.UNIMPLEMENTED:
    case Code.DATA_LOSS:
      return true;

    default:
      return fail('Unknown status code: ' + code);
  }
}
/**
 * Determines whether an error code represents a permanent error when received
 * in response to a write operation.
 *
 * Write operations must be handled specially because as of b/119437764, ABORTED
 * errors on the write stream should be retried too (even though ABORTED errors
 * are not generally retryable).
 *
 * Note that during the initial handshake on the write stream an ABORTED error
 * signals that we should discard our stream token (i.e. it is permanent). This
 * means a handshake error should be classified with isPermanentError, above.
 */


function isPermanentWriteError(code) {
  return isPermanentError(code) && code !== Code.ABORTED;
}
/**
 * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.
 *
 * @returns The Code equivalent to the given status string or undefined if
 *     there is no match.
 */


function mapCodeFromRpcStatus(status) {
  // tslint:disable-next-line:no-any lookup by string
  var code = RpcCode[status];

  if (code === undefined) {
    return undefined;
  }

  return mapCodeFromRpcCode(code);
}
/**
 * Maps an error Code from GRPC status code number, like 0, 1, or 14. These
 * are not the same as HTTP status codes.
 *
 * @returns The Code equivalent to the given GRPC status code. Fails if there
 *     is no match.
 */


function mapCodeFromRpcCode(code) {
  if (code === undefined) {
    // This shouldn't normally happen, but in certain error cases (like trying
    // to send invalid proto messages) we may get an error with no GRPC code.
    error('GRPC error has no .code');
    return Code.UNKNOWN;
  }

  switch (code) {
    case RpcCode.OK:
      return Code.OK;

    case RpcCode.CANCELLED:
      return Code.CANCELLED;

    case RpcCode.UNKNOWN:
      return Code.UNKNOWN;

    case RpcCode.DEADLINE_EXCEEDED:
      return Code.DEADLINE_EXCEEDED;

    case RpcCode.RESOURCE_EXHAUSTED:
      return Code.RESOURCE_EXHAUSTED;

    case RpcCode.INTERNAL:
      return Code.INTERNAL;

    case RpcCode.UNAVAILABLE:
      return Code.UNAVAILABLE;

    case RpcCode.UNAUTHENTICATED:
      return Code.UNAUTHENTICATED;

    case RpcCode.INVALID_ARGUMENT:
      return Code.INVALID_ARGUMENT;

    case RpcCode.NOT_FOUND:
      return Code.NOT_FOUND;

    case RpcCode.ALREADY_EXISTS:
      return Code.ALREADY_EXISTS;

    case RpcCode.PERMISSION_DENIED:
      return Code.PERMISSION_DENIED;

    case RpcCode.FAILED_PRECONDITION:
      return Code.FAILED_PRECONDITION;

    case RpcCode.ABORTED:
      return Code.ABORTED;

    case RpcCode.OUT_OF_RANGE:
      return Code.OUT_OF_RANGE;

    case RpcCode.UNIMPLEMENTED:
      return Code.UNIMPLEMENTED;

    case RpcCode.DATA_LOSS:
      return Code.DATA_LOSS;

    default:
      return fail('Unknown status code: ' + code);
  }
}
/**
 * Maps an RPC code from a Code. This is the reverse operation from
 * mapCodeFromRpcCode and should really only be used in tests.
 */


function mapRpcCodeFromCode(code) {
  if (code === undefined) {
    return RpcCode.OK;
  }

  switch (code) {
    case Code.OK:
      return RpcCode.OK;

    case Code.CANCELLED:
      return RpcCode.CANCELLED;

    case Code.UNKNOWN:
      return RpcCode.UNKNOWN;

    case Code.DEADLINE_EXCEEDED:
      return RpcCode.DEADLINE_EXCEEDED;

    case Code.RESOURCE_EXHAUSTED:
      return RpcCode.RESOURCE_EXHAUSTED;

    case Code.INTERNAL:
      return RpcCode.INTERNAL;

    case Code.UNAVAILABLE:
      return RpcCode.UNAVAILABLE;

    case Code.UNAUTHENTICATED:
      return RpcCode.UNAUTHENTICATED;

    case Code.INVALID_ARGUMENT:
      return RpcCode.INVALID_ARGUMENT;

    case Code.NOT_FOUND:
      return RpcCode.NOT_FOUND;

    case Code.ALREADY_EXISTS:
      return RpcCode.ALREADY_EXISTS;

    case Code.PERMISSION_DENIED:
      return RpcCode.PERMISSION_DENIED;

    case Code.FAILED_PRECONDITION:
      return RpcCode.FAILED_PRECONDITION;

    case Code.ABORTED:
      return RpcCode.ABORTED;

    case Code.OUT_OF_RANGE:
      return RpcCode.OUT_OF_RANGE;

    case Code.UNIMPLEMENTED:
      return RpcCode.UNIMPLEMENTED;

    case Code.DATA_LOSS:
      return RpcCode.DATA_LOSS;

    default:
      return fail('Unknown status code: ' + code);
  }
}
/**
 * Converts an HTTP Status Code to the equivalent error code.
 *
 * @param status An HTTP Status Code, like 200, 404, 503, etc.
 * @returns The equivalent Code. Unknown status codes are mapped to
 *     Code.UNKNOWN.
 */


function mapCodeFromHttpStatus(status) {
  // The canonical error codes for Google APIs [1] specify mapping onto HTTP
  // status codes but the mapping is not bijective. In each case of ambiguity
  // this function chooses a primary error.
  //
  // [1]
  // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
  switch (status) {
    case 200:
      // OK
      return Code.OK;

    case 400:
      // Bad Request
      return Code.INVALID_ARGUMENT;
    // Other possibilities based on the forward mapping
    // return Code.FAILED_PRECONDITION;
    // return Code.OUT_OF_RANGE;

    case 401:
      // Unauthorized
      return Code.UNAUTHENTICATED;

    case 403:
      // Forbidden
      return Code.PERMISSION_DENIED;

    case 404:
      // Not Found
      return Code.NOT_FOUND;

    case 409:
      // Conflict
      return Code.ABORTED;
    // Other possibilities:
    // return Code.ALREADY_EXISTS;

    case 416:
      // Range Not Satisfiable
      return Code.OUT_OF_RANGE;

    case 429:
      // Too Many Requests
      return Code.RESOURCE_EXHAUSTED;

    case 499:
      // Client Closed Request
      return Code.CANCELLED;

    case 500:
      // Internal Server Error
      return Code.UNKNOWN;
    // Other possibilities:
    // return Code.INTERNAL;
    // return Code.DATA_LOSS;

    case 501:
      // Unimplemented
      return Code.UNIMPLEMENTED;

    case 503:
      // Service Unavailable
      return Code.UNAVAILABLE;

    case 504:
      // Gateway Timeout
      return Code.DEADLINE_EXCEEDED;

    default:
      if (status >= 200 && status < 300) return Code.OK;
      if (status >= 400 && status < 500) return Code.FAILED_PRECONDITION;
      if (status >= 500 && status < 600) return Code.INTERNAL;
      return Code.UNKNOWN;
  }
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * DocumentSet is an immutable (copy-on-write) collection that holds documents
 * in order specified by the provided comparator. We always add a document key
 * comparator on top of what is provided to guarantee document equality based on
 * the key.
 */


var DocumentSet =
/** @class */
function () {
  /** The default ordering is by key if the comparator is omitted */
  function DocumentSet(comp) {
    // We are adding document key comparator to the end as it's the only
    // guaranteed unique property of a document.
    if (comp) {
      this.comparator = function (d1, d2) {
        return comp(d1, d2) || DocumentKey.comparator(d1.key, d2.key);
      };
    } else {
      this.comparator = function (d1, d2) {
        return DocumentKey.comparator(d1.key, d2.key);
      };
    }

    this.keyedMap = documentMap();
    this.sortedSet = new SortedMap(this.comparator);
  }
  /**
   * Returns an empty copy of the existing DocumentSet, using the same
   * comparator.
   */


  DocumentSet.emptySet = function (oldSet) {
    return new DocumentSet(oldSet.comparator);
  };

  DocumentSet.prototype.has = function (key) {
    return this.keyedMap.get(key) != null;
  };

  DocumentSet.prototype.get = function (key) {
    return this.keyedMap.get(key);
  };

  DocumentSet.prototype.first = function () {
    return this.sortedSet.minKey();
  };

  DocumentSet.prototype.last = function () {
    return this.sortedSet.maxKey();
  };

  DocumentSet.prototype.isEmpty = function () {
    return this.sortedSet.isEmpty();
  };
  /**
   * Returns the index of the provided key in the document set, or -1 if the
   * document key is not present in the set;
   */


  DocumentSet.prototype.indexOf = function (key) {
    var doc = this.keyedMap.get(key);
    return doc ? this.sortedSet.indexOf(doc) : -1;
  };

  Object.defineProperty(DocumentSet.prototype, "size", {
    get: function () {
      return this.sortedSet.size;
    },
    enumerable: true,
    configurable: true
  });
  /** Iterates documents in order defined by "comparator" */

  DocumentSet.prototype.forEach = function (cb) {
    this.sortedSet.inorderTraversal(function (k, v) {
      cb(k);
      return false;
    });
  };
  /** Inserts or updates a document with the same key */


  DocumentSet.prototype.add = function (doc) {
    // First remove the element if we have it.
    var set = this.delete(doc.key);
    return set.copy(set.keyedMap.insert(doc.key, doc), set.sortedSet.insert(doc, null));
  };
  /** Deletes a document with a given key */


  DocumentSet.prototype.delete = function (key) {
    var doc = this.get(key);

    if (!doc) {
      return this;
    }

    return this.copy(this.keyedMap.remove(key), this.sortedSet.remove(doc));
  };

  DocumentSet.prototype.isEqual = function (other) {
    if (!(other instanceof DocumentSet)) return false;
    if (this.size !== other.size) return false;
    var thisIt = this.sortedSet.getIterator();
    var otherIt = other.sortedSet.getIterator();

    while (thisIt.hasNext()) {
      var thisDoc = thisIt.getNext().key;
      var otherDoc = otherIt.getNext().key;
      if (!thisDoc.isEqual(otherDoc)) return false;
    }

    return true;
  };

  DocumentSet.prototype.toString = function () {
    var docStrings = [];
    this.forEach(function (doc) {
      docStrings.push(doc.toString());
    });

    if (docStrings.length === 0) {
      return 'DocumentSet ()';
    } else {
      return 'DocumentSet (\n  ' + docStrings.join('  \n') + '\n)';
    }
  };

  DocumentSet.prototype.copy = function (keyedMap, sortedSet) {
    var newSet = new DocumentSet();
    newSet.comparator = this.comparator;
    newSet.keyedMap = keyedMap;
    newSet.sortedSet = sortedSet;
    return newSet;
  };

  return DocumentSet;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var ChangeType;

(function (ChangeType) {
  ChangeType[ChangeType["Added"] = 0] = "Added";
  ChangeType[ChangeType["Removed"] = 1] = "Removed";
  ChangeType[ChangeType["Modified"] = 2] = "Modified";
  ChangeType[ChangeType["Metadata"] = 3] = "Metadata";
})(ChangeType || (ChangeType = {}));

var SyncState;

(function (SyncState) {
  SyncState[SyncState["Local"] = 0] = "Local";
  SyncState[SyncState["Synced"] = 1] = "Synced";
})(SyncState || (SyncState = {}));
/**
 * DocumentChangeSet keeps track of a set of changes to docs in a query, merging
 * duplicate events for the same doc.
 */


var DocumentChangeSet =
/** @class */
function () {
  function DocumentChangeSet() {
    this.changeMap = new SortedMap(DocumentKey.comparator);
  }

  DocumentChangeSet.prototype.track = function (change) {
    var key = change.doc.key;
    var oldChange = this.changeMap.get(key);

    if (!oldChange) {
      this.changeMap = this.changeMap.insert(key, change);
      return;
    } // Merge the new change with the existing change.


    if (change.type !== ChangeType.Added && oldChange.type === ChangeType.Metadata) {
      this.changeMap = this.changeMap.insert(key, change);
    } else if (change.type === ChangeType.Metadata && oldChange.type !== ChangeType.Removed) {
      this.changeMap = this.changeMap.insert(key, {
        type: oldChange.type,
        doc: change.doc
      });
    } else if (change.type === ChangeType.Modified && oldChange.type === ChangeType.Modified) {
      this.changeMap = this.changeMap.insert(key, {
        type: ChangeType.Modified,
        doc: change.doc
      });
    } else if (change.type === ChangeType.Modified && oldChange.type === ChangeType.Added) {
      this.changeMap = this.changeMap.insert(key, {
        type: ChangeType.Added,
        doc: change.doc
      });
    } else if (change.type === ChangeType.Removed && oldChange.type === ChangeType.Added) {
      this.changeMap = this.changeMap.remove(key);
    } else if (change.type === ChangeType.Removed && oldChange.type === ChangeType.Modified) {
      this.changeMap = this.changeMap.insert(key, {
        type: ChangeType.Removed,
        doc: oldChange.doc
      });
    } else if (change.type === ChangeType.Added && oldChange.type === ChangeType.Removed) {
      this.changeMap = this.changeMap.insert(key, {
        type: ChangeType.Modified,
        doc: change.doc
      });
    } else {
      // This includes these cases, which don't make sense:
      // Added->Added
      // Removed->Removed
      // Modified->Added
      // Removed->Modified
      // Metadata->Added
      // Removed->Metadata
      fail('unsupported combination of changes: ' + JSON.stringify(change) + ' after ' + JSON.stringify(oldChange));
    }
  };

  DocumentChangeSet.prototype.getChanges = function () {
    var changes = [];
    this.changeMap.inorderTraversal(function (key, change) {
      changes.push(change);
    });
    return changes;
  };

  return DocumentChangeSet;
}();

var ViewSnapshot =
/** @class */
function () {
  function ViewSnapshot(query, docs, oldDocs, docChanges, mutatedKeys, fromCache, syncStateChanged, excludesMetadataChanges) {
    this.query = query;
    this.docs = docs;
    this.oldDocs = oldDocs;
    this.docChanges = docChanges;
    this.mutatedKeys = mutatedKeys;
    this.fromCache = fromCache;
    this.syncStateChanged = syncStateChanged;
    this.excludesMetadataChanges = excludesMetadataChanges;
  }
  /** Returns a view snapshot as if all documents in the snapshot were added. */


  ViewSnapshot.fromInitialDocuments = function (query, documents, mutatedKeys, fromCache) {
    var changes = [];
    documents.forEach(function (doc) {
      changes.push({
        type: ChangeType.Added,
        doc: doc
      });
    });
    return new ViewSnapshot(query, documents, DocumentSet.emptySet(documents), changes, mutatedKeys, fromCache, true, false);
  };

  Object.defineProperty(ViewSnapshot.prototype, "hasPendingWrites", {
    get: function () {
      return !this.mutatedKeys.isEmpty();
    },
    enumerable: true,
    configurable: true
  });

  ViewSnapshot.prototype.isEqual = function (other) {
    if (this.fromCache !== other.fromCache || this.syncStateChanged !== other.syncStateChanged || !this.mutatedKeys.isEqual(other.mutatedKeys) || !this.query.isEqual(other.query) || !this.docs.isEqual(other.docs) || !this.oldDocs.isEqual(other.oldDocs)) {
      return false;
    }

    var changes = this.docChanges;
    var otherChanges = other.docChanges;

    if (changes.length !== otherChanges.length) {
      return false;
    }

    for (var i = 0; i < changes.length; i++) {
      if (changes[i].type !== otherChanges[i].type || !changes[i].doc.isEqual(otherChanges[i].doc)) {
        return false;
      }
    }

    return true;
  };

  return ViewSnapshot;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An event from the RemoteStore. It is split into targetChanges (changes to the
 * state or the set of documents in our watched targets) and documentUpdates
 * (changes to the actual documents).
 */


var RemoteEvent =
/** @class */
function () {
  function RemoteEvent(
  /**
   * The snapshot version this event brings us up to, or MIN if not set.
   */
  snapshotVersion,
  /**
   * A map from target to changes to the target. See TargetChange.
   */
  targetChanges,
  /**
   * A set of targets that is known to be inconsistent. Listens for these
   * targets should be re-established without resume tokens.
   */
  targetMismatches,
  /**
   * A set of which documents have changed or been deleted, along with the
   * doc's new values (if not deleted).
   */
  documentUpdates,
  /**
   * A set of which document updates are due only to limbo resolution targets.
   */
  resolvedLimboDocuments) {
    this.snapshotVersion = snapshotVersion;
    this.targetChanges = targetChanges;
    this.targetMismatches = targetMismatches;
    this.documentUpdates = documentUpdates;
    this.resolvedLimboDocuments = resolvedLimboDocuments;
  }
  /**
   * HACK: Views require RemoteEvents in order to determine whether the view is
   * CURRENT, but secondary tabs don't receive remote events. So this method is
   * used to create a synthesized RemoteEvent that can be used to apply a
   * CURRENT status change to a View, for queries executed in a different tab.
   */
  // PORTING NOTE: Multi-tab only


  RemoteEvent.createSynthesizedRemoteEventForCurrentChange = function (targetId, current) {
    var _a;

    var targetChanges = (_a = {}, _a[targetId] = TargetChange.createSynthesizedTargetChangeForCurrentChange(targetId, current), _a);
    return new RemoteEvent(SnapshotVersion.MIN, targetChanges, targetIdSet(), maybeDocumentMap(), documentKeySet());
  };

  return RemoteEvent;
}();
/**
 * A TargetChange specifies the set of changes for a specific target as part of
 * a RemoteEvent. These changes track which documents are added, modified or
 * removed, as well as the target's resume token and whether the target is
 * marked CURRENT.
 * The actual changes *to* documents are not part of the TargetChange since
 * documents may be part of multiple targets.
 */


var TargetChange =
/** @class */
function () {
  function TargetChange(
  /**
   * An opaque, server-assigned token that allows watching a query to be resumed
   * after disconnecting without retransmitting all the data that matches the
   * query. The resume token essentially identifies a point in time from which
   * the server should resume sending results.
   */
  resumeToken,
  /**
   * The "current" (synced) status of this target. Note that "current"
   * has special meaning in the RPC protocol that implies that a target is
   * both up-to-date and consistent with the rest of the watch stream.
   */
  current,
  /**
   * The set of documents that were newly assigned to this target as part of
   * this remote event.
   */
  addedDocuments,
  /**
   * The set of documents that were already assigned to this target but received
   * an update during this remote event.
   */
  modifiedDocuments,
  /**
   * The set of documents that were removed from this target as part of this
   * remote event.
   */
  removedDocuments) {
    this.resumeToken = resumeToken;
    this.current = current;
    this.addedDocuments = addedDocuments;
    this.modifiedDocuments = modifiedDocuments;
    this.removedDocuments = removedDocuments;
  }
  /**
   * HACK: Views require TargetChanges in order to determine whether the view is
   * CURRENT, but secondary tabs don't receive remote events. So this method is
   * used to create a synthesized TargetChanges that can be used to apply a
   * CURRENT status change to a View, for queries executed in a different tab.
   */
  // PORTING NOTE: Multi-tab only


  TargetChange.createSynthesizedTargetChangeForCurrentChange = function (targetId, current) {
    return new TargetChange(emptyByteString(), current, documentKeySet(), documentKeySet(), documentKeySet());
  };

  return TargetChange;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Represents a changed document and a list of target ids to which this change
 * applies.
 *
 * If document has been deleted NoDocument will be provided.
 */


var DocumentWatchChange =
/** @class */
function () {
  function DocumentWatchChange(
  /** The new document applies to all of these targets. */
  updatedTargetIds,
  /** The new document is removed from all of these targets. */
  removedTargetIds,
  /** The key of the document for this change. */
  key,
  /**
   * The new document or NoDocument if it was deleted. Is null if the
   * document went out of view without the server sending a new document.
   */
  newDoc) {
    this.updatedTargetIds = updatedTargetIds;
    this.removedTargetIds = removedTargetIds;
    this.key = key;
    this.newDoc = newDoc;
  }

  return DocumentWatchChange;
}();

var ExistenceFilterChange =
/** @class */
function () {
  function ExistenceFilterChange(targetId, existenceFilter) {
    this.targetId = targetId;
    this.existenceFilter = existenceFilter;
  }

  return ExistenceFilterChange;
}();

var WatchTargetChangeState;

(function (WatchTargetChangeState) {
  WatchTargetChangeState[WatchTargetChangeState["NoChange"] = 0] = "NoChange";
  WatchTargetChangeState[WatchTargetChangeState["Added"] = 1] = "Added";
  WatchTargetChangeState[WatchTargetChangeState["Removed"] = 2] = "Removed";
  WatchTargetChangeState[WatchTargetChangeState["Current"] = 3] = "Current";
  WatchTargetChangeState[WatchTargetChangeState["Reset"] = 4] = "Reset";
})(WatchTargetChangeState || (WatchTargetChangeState = {}));

var WatchTargetChange =
/** @class */
function () {
  function WatchTargetChange(
  /** What kind of change occurred to the watch target. */
  state,
  /** The target IDs that were added/removed/set. */
  targetIds,
  /**
   * An opaque, server-assigned token that allows watching a query to be
   * resumed after disconnecting without retransmitting all the data that
   * matches the query. The resume token essentially identifies a point in
   * time from which the server should resume sending results.
   */
  resumeToken,
  /** An RPC error indicating why the watch failed. */
  cause) {
    if (resumeToken === void 0) {
      resumeToken = emptyByteString();
    }

    if (cause === void 0) {
      cause = null;
    }

    this.state = state;
    this.targetIds = targetIds;
    this.resumeToken = resumeToken;
    this.cause = cause;
  }

  return WatchTargetChange;
}();
/** Tracks the internal state of a Watch target. */


var TargetState =
/** @class */
function () {
  function TargetState() {
    /**
     * The number of pending responses (adds or removes) that we are waiting on.
     * We only consider targets active that have no pending responses.
     */
    this.pendingResponses = 0;
    /**
     * Keeps track of the document changes since the last raised snapshot.
     *
     * These changes are continuously updated as we receive document updates and
     * always reflect the current set of changes against the last issued snapshot.
     */

    this.documentChanges = snapshotChangesMap();
    /** See public getters for explanations of these fields. */

    this._resumeToken = emptyByteString();
    this._current = false;
    /**
     * Whether this target state should be included in the next snapshot. We
     * initialize to true so that newly-added targets are included in the next
     * RemoteEvent.
     */

    this._hasPendingChanges = true;
  }

  Object.defineProperty(TargetState.prototype, "current", {
    /**
     * Whether this target has been marked 'current'.
     *
     * 'Current' has special meaning in the RPC protocol: It implies that the
     * Watch backend has sent us all changes up to the point at which the target
     * was added and that the target is consistent with the rest of the watch
     * stream.
     */
    get: function () {
      return this._current;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TargetState.prototype, "resumeToken", {
    /** The last resume token sent to us for this target. */
    get: function () {
      return this._resumeToken;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TargetState.prototype, "isPending", {
    /** Whether this target has pending target adds or target removes. */
    get: function () {
      return this.pendingResponses !== 0;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TargetState.prototype, "hasPendingChanges", {
    /** Whether we have modified any state that should trigger a snapshot. */
    get: function () {
      return this._hasPendingChanges;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Applies the resume token to the TargetChange, but only when it has a new
   * value. Empty resumeTokens are discarded.
   */

  TargetState.prototype.updateResumeToken = function (resumeToken) {
    if (resumeToken.length > 0) {
      this._hasPendingChanges = true;
      this._resumeToken = resumeToken;
    }
  };
  /**
   * Creates a target change from the current set of changes.
   *
   * To reset the document changes after raising this snapshot, call
   * `clearPendingChanges()`.
   */


  TargetState.prototype.toTargetChange = function () {
    var addedDocuments = documentKeySet();
    var modifiedDocuments = documentKeySet();
    var removedDocuments = documentKeySet();
    this.documentChanges.forEach(function (key, changeType) {
      switch (changeType) {
        case ChangeType.Added:
          addedDocuments = addedDocuments.add(key);
          break;

        case ChangeType.Modified:
          modifiedDocuments = modifiedDocuments.add(key);
          break;

        case ChangeType.Removed:
          removedDocuments = removedDocuments.add(key);
          break;

        default:
          fail('Encountered invalid change type: ' + changeType);
      }
    });
    return new TargetChange(this._resumeToken, this._current, addedDocuments, modifiedDocuments, removedDocuments);
  };
  /**
   * Resets the document changes and sets `hasPendingChanges` to false.
   */


  TargetState.prototype.clearPendingChanges = function () {
    this._hasPendingChanges = false;
    this.documentChanges = snapshotChangesMap();
  };

  TargetState.prototype.addDocumentChange = function (key, changeType) {
    this._hasPendingChanges = true;
    this.documentChanges = this.documentChanges.insert(key, changeType);
  };

  TargetState.prototype.removeDocumentChange = function (key) {
    this._hasPendingChanges = true;
    this.documentChanges = this.documentChanges.remove(key);
  };

  TargetState.prototype.recordPendingTargetRequest = function () {
    this.pendingResponses += 1;
  };

  TargetState.prototype.recordTargetResponse = function () {
    this.pendingResponses -= 1;
  };

  TargetState.prototype.markCurrent = function () {
    this._hasPendingChanges = true;
    this._current = true;
  };

  return TargetState;
}();
/**
 * A helper class to accumulate watch changes into a RemoteEvent.
 */


var WatchChangeAggregator =
/** @class */
function () {
  function WatchChangeAggregator(metadataProvider) {
    this.metadataProvider = metadataProvider;
    /** The internal state of all tracked targets. */

    this.targetStates = {};
    /** Keeps track of the documents to update since the last raised snapshot. */

    this.pendingDocumentUpdates = maybeDocumentMap();
    /** A mapping of document keys to their set of target IDs. */

    this.pendingDocumentTargetMapping = documentTargetMap();
    /**
     * A list of targets with existence filter mismatches. These targets are
     * known to be inconsistent and their listens needs to be re-established by
     * RemoteStore.
     */

    this.pendingTargetResets = new SortedSet(primitiveComparator);
  }
  /**
   * Processes and adds the DocumentWatchChange to the current set of changes.
   */


  WatchChangeAggregator.prototype.handleDocumentChange = function (docChange) {
    for (var _i = 0, _a = docChange.updatedTargetIds; _i < _a.length; _i++) {
      var targetId = _a[_i];

      if (docChange.newDoc instanceof Document) {
        this.addDocumentToTarget(targetId, docChange.newDoc);
      } else if (docChange.newDoc instanceof NoDocument) {
        this.removeDocumentFromTarget(targetId, docChange.key, docChange.newDoc);
      }
    }

    for (var _b = 0, _c = docChange.removedTargetIds; _b < _c.length; _b++) {
      var targetId = _c[_b];
      this.removeDocumentFromTarget(targetId, docChange.key, docChange.newDoc);
    }
  };
  /** Processes and adds the WatchTargetChange to the current set of changes. */


  WatchChangeAggregator.prototype.handleTargetChange = function (targetChange) {
    var _this = this;

    this.forEachTarget(targetChange, function (targetId) {
      var targetState = _this.ensureTargetState(targetId);

      switch (targetChange.state) {
        case WatchTargetChangeState.NoChange:
          if (_this.isActiveTarget(targetId)) {
            targetState.updateResumeToken(targetChange.resumeToken);
          }

          break;

        case WatchTargetChangeState.Added:
          // We need to decrement the number of pending acks needed from watch
          // for this targetId.
          targetState.recordTargetResponse();

          if (!targetState.isPending) {
            // We have a freshly added target, so we need to reset any state
            // that we had previously. This can happen e.g. when remove and add
            // back a target for existence filter mismatches.
            targetState.clearPendingChanges();
          }

          targetState.updateResumeToken(targetChange.resumeToken);
          break;

        case WatchTargetChangeState.Removed:
          // We need to keep track of removed targets to we can post-filter and
          // remove any target changes.
          // We need to decrement the number of pending acks needed from watch
          // for this targetId.
          targetState.recordTargetResponse();

          if (!targetState.isPending) {
            _this.removeTarget(targetId);
          }

          assert(!targetChange.cause, 'WatchChangeAggregator does not handle errored targets');
          break;

        case WatchTargetChangeState.Current:
          if (_this.isActiveTarget(targetId)) {
            targetState.markCurrent();
            targetState.updateResumeToken(targetChange.resumeToken);
          }

          break;

        case WatchTargetChangeState.Reset:
          if (_this.isActiveTarget(targetId)) {
            // Reset the target and synthesizes removes for all existing
            // documents. The backend will re-add any documents that still
            // match the target before it sends the next global snapshot.
            _this.resetTarget(targetId);

            targetState.updateResumeToken(targetChange.resumeToken);
          }

          break;

        default:
          fail('Unknown target watch change state: ' + targetChange.state);
      }
    });
  };
  /**
   * Iterates over all targetIds that the watch change applies to: either the
   * targetIds explicitly listed in the change or the targetIds of all currently
   * active targets.
   */


  WatchChangeAggregator.prototype.forEachTarget = function (targetChange, fn) {
    if (targetChange.targetIds.length > 0) {
      targetChange.targetIds.forEach(fn);
    } else {
      forEachNumber(this.targetStates, fn);
    }
  };
  /**
   * Handles existence filters and synthesizes deletes for filter mismatches.
   * Targets that are invalidated by filter mismatches are added to
   * `pendingTargetResets`.
   */


  WatchChangeAggregator.prototype.handleExistenceFilter = function (watchChange) {
    var targetId = watchChange.targetId;
    var expectedCount = watchChange.existenceFilter.count;
    var queryData = this.queryDataForActiveTarget(targetId);

    if (queryData) {
      var query = queryData.query;

      if (query.isDocumentQuery()) {
        if (expectedCount === 0) {
          // The existence filter told us the document does not exist. We deduce
          // that this document does not exist and apply a deleted document to
          // our updates. Without applying this deleted document there might be
          // another query that will raise this document as part of a snapshot
          // until it is resolved, essentially exposing inconsistency between
          // queries.
          var key = new DocumentKey(query.path);
          this.removeDocumentFromTarget(targetId, key, new NoDocument(key, SnapshotVersion.forDeletedDoc()));
        } else {
          assert(expectedCount === 1, 'Single document existence filter with count: ' + expectedCount);
        }
      } else {
        var currentSize = this.getCurrentDocumentCountForTarget(targetId);

        if (currentSize !== expectedCount) {
          // Existence filter mismatch: We reset the mapping and raise a new
          // snapshot with `isFromCache:true`.
          this.resetTarget(targetId);
          this.pendingTargetResets = this.pendingTargetResets.add(targetId);
        }
      }
    }
  };
  /**
   * Converts the currently accumulated state into a remote event at the
   * provided snapshot version. Resets the accumulated changes before returning.
   */


  WatchChangeAggregator.prototype.createRemoteEvent = function (snapshotVersion) {
    var _this = this;

    var targetChanges = {};
    forEachNumber(this.targetStates, function (targetId, targetState) {
      var queryData = _this.queryDataForActiveTarget(targetId);

      if (queryData) {
        if (targetState.current && queryData.query.isDocumentQuery()) {
          // Document queries for document that don't exist can produce an empty
          // result set. To update our local cache, we synthesize a document
          // delete if we have not previously received the document. This
          // resolves the limbo state of the document, removing it from
          // limboDocumentRefs.
          //
          // TODO(dimond): Ideally we would have an explicit lookup query
          // instead resulting in an explicit delete message and we could
          // remove this special logic.
          var key = new DocumentKey(queryData.query.path);

          if (_this.pendingDocumentUpdates.get(key) === null && !_this.targetContainsDocument(targetId, key)) {
            _this.removeDocumentFromTarget(targetId, key, new NoDocument(key, snapshotVersion));
          }
        }

        if (targetState.hasPendingChanges) {
          targetChanges[targetId] = targetState.toTargetChange();
          targetState.clearPendingChanges();
        }
      }
    });
    var resolvedLimboDocuments = documentKeySet(); // We extract the set of limbo-only document updates as the GC logic
    // special-cases documents that do not appear in the query cache.
    //
    // TODO(gsoltis): Expand on this comment once GC is available in the JS
    // client.

    this.pendingDocumentTargetMapping.forEach(function (key, targets) {
      var isOnlyLimboTarget = true;
      targets.forEachWhile(function (targetId) {
        var queryData = _this.queryDataForActiveTarget(targetId);

        if (queryData && queryData.purpose !== QueryPurpose.LimboResolution) {
          isOnlyLimboTarget = false;
          return false;
        }

        return true;
      });

      if (isOnlyLimboTarget) {
        resolvedLimboDocuments = resolvedLimboDocuments.add(key);
      }
    });
    var remoteEvent = new RemoteEvent(snapshotVersion, targetChanges, this.pendingTargetResets, this.pendingDocumentUpdates, resolvedLimboDocuments);
    this.pendingDocumentUpdates = maybeDocumentMap();
    this.pendingDocumentTargetMapping = documentTargetMap();
    this.pendingTargetResets = new SortedSet(primitiveComparator);
    return remoteEvent;
  };
  /**
   * Adds the provided document to the internal list of document updates and
   * its document key to the given target's mapping.
   */
  // Visible for testing.


  WatchChangeAggregator.prototype.addDocumentToTarget = function (targetId, document) {
    if (!this.isActiveTarget(targetId)) {
      return;
    }

    var changeType = this.targetContainsDocument(targetId, document.key) ? ChangeType.Modified : ChangeType.Added;
    var targetState = this.ensureTargetState(targetId);
    targetState.addDocumentChange(document.key, changeType);
    this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(document.key, document);
    this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(document.key, this.ensureDocumentTargetMapping(document.key).add(targetId));
  };
  /**
   * Removes the provided document from the target mapping. If the
   * document no longer matches the target, but the document's state is still
   * known (e.g. we know that the document was deleted or we received the change
   * that caused the filter mismatch), the new document can be provided
   * to update the remote document cache.
   */
  // Visible for testing.


  WatchChangeAggregator.prototype.removeDocumentFromTarget = function (targetId, key, updatedDocument) {
    if (!this.isActiveTarget(targetId)) {
      return;
    }

    var targetState = this.ensureTargetState(targetId);

    if (this.targetContainsDocument(targetId, key)) {
      targetState.addDocumentChange(key, ChangeType.Removed);
    } else {
      // The document may have entered and left the target before we raised a
      // snapshot, so we can just ignore the change.
      targetState.removeDocumentChange(key);
    }

    this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(key, this.ensureDocumentTargetMapping(key).delete(targetId));

    if (updatedDocument) {
      this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(key, updatedDocument);
    }
  };

  WatchChangeAggregator.prototype.removeTarget = function (targetId) {
    delete this.targetStates[targetId];
  };
  /**
   * Returns the current count of documents in the target. This includes both
   * the number of documents that the LocalStore considers to be part of the
   * target as well as any accumulated changes.
   */


  WatchChangeAggregator.prototype.getCurrentDocumentCountForTarget = function (targetId) {
    var targetState = this.ensureTargetState(targetId);
    var targetChange = targetState.toTargetChange();
    return this.metadataProvider.getRemoteKeysForTarget(targetId).size + targetChange.addedDocuments.size - targetChange.removedDocuments.size;
  };
  /**
   * Increment the number of acks needed from watch before we can consider the
   * server to be 'in-sync' with the client's active targets.
   */


  WatchChangeAggregator.prototype.recordPendingTargetRequest = function (targetId) {
    // For each request we get we need to record we need a response for it.
    var targetState = this.ensureTargetState(targetId);
    targetState.recordPendingTargetRequest();
  };

  WatchChangeAggregator.prototype.ensureTargetState = function (targetId) {
    if (!this.targetStates[targetId]) {
      this.targetStates[targetId] = new TargetState();
    }

    return this.targetStates[targetId];
  };

  WatchChangeAggregator.prototype.ensureDocumentTargetMapping = function (key) {
    var targetMapping = this.pendingDocumentTargetMapping.get(key);

    if (!targetMapping) {
      targetMapping = new SortedSet(primitiveComparator);
      this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(key, targetMapping);
    }

    return targetMapping;
  };
  /**
   * Verifies that the user is still interested in this target (by calling
   * `getQueryDataForTarget()`) and that we are not waiting for pending ADDs
   * from watch.
   */


  WatchChangeAggregator.prototype.isActiveTarget = function (targetId) {
    return this.queryDataForActiveTarget(targetId) !== null;
  };
  /**
   * Returns the QueryData for an active target (i.e. a target that the user
   * is still interested in that has no outstanding target change requests).
   */


  WatchChangeAggregator.prototype.queryDataForActiveTarget = function (targetId) {
    var targetState = this.targetStates[targetId];
    return targetState && targetState.isPending ? null : this.metadataProvider.getQueryDataForTarget(targetId);
  };
  /**
   * Resets the state of a Watch target to its initial state (e.g. sets
   * 'current' to false, clears the resume token and removes its target mapping
   * from all documents).
   */


  WatchChangeAggregator.prototype.resetTarget = function (targetId) {
    var _this = this;

    assert(!this.targetStates[targetId].isPending, 'Should only reset active targets');
    this.targetStates[targetId] = new TargetState(); // Trigger removal for any documents currently mapped to this target.
    // These removals will be part of the initial snapshot if Watch does not
    // resend these documents.

    var existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);
    existingKeys.forEach(function (key) {
      _this.removeDocumentFromTarget(targetId, key,
      /*updatedDocument=*/
      null);
    });
  };
  /**
   * Returns whether the LocalStore considers the document to be part of the
   * specified target.
   */


  WatchChangeAggregator.prototype.targetContainsDocument = function (targetId, key) {
    var existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);
    return existingKeys.has(key);
  };

  return WatchChangeAggregator;
}();

function documentTargetMap() {
  return new SortedMap(DocumentKey.comparator);
}

function snapshotChangesMap() {
  return new SortedMap(DocumentKey.comparator);
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var LOG_TAG$7 = 'RemoteStore'; // TODO(b/35853402): Negotiate this with the stream.

var MAX_PENDING_WRITES = 10;
/**
 * RemoteStore - An interface to remotely stored data, basically providing a
 * wrapper around the Datastore that is more reliable for the rest of the
 * system.
 *
 * RemoteStore is responsible for maintaining the connection to the server.
 * - maintaining a list of active listens.
 * - reconnecting when the connection is dropped.
 * - resuming all the active listens on reconnect.
 *
 * RemoteStore handles all incoming events from the Datastore.
 * - listening to the watch stream and repackaging the events as RemoteEvents
 * - notifying SyncEngine of any changes to the active listens.
 *
 * RemoteStore takes writes from other components and handles them reliably.
 * - pulling pending mutations from LocalStore and sending them to Datastore.
 * - retrying mutations that failed because of network problems.
 * - acking mutations to the SyncEngine once they are accepted or rejected.
 */

var RemoteStore =
/** @class */
function () {
  function RemoteStore(
  /**
   * The local store, used to fill the write pipeline with outbound mutations.
   */
  localStore,
  /** The client-side proxy for interacting with the backend. */
  datastore, asyncQueue, onlineStateHandler, connectivityMonitor) {
    var _this = this;

    this.localStore = localStore;
    this.datastore = datastore;
    /**
     * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
     * LocalStore via fillWritePipeline() and have or will send to the write
     * stream.
     *
     * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
     * restart the write stream. When the stream is established the writes in the
     * pipeline will be sent in order.
     *
     * Writes remain in writePipeline until they are acknowledged by the backend
     * and thus will automatically be re-sent if the stream is interrupted /
     * restarted before they're acknowledged.
     *
     * Write responses from the backend are linked to their originating request
     * purely based on order, and so we can just shift() writes from the front of
     * the writePipeline as we receive responses.
     */

    this.writePipeline = [];
    /**
     * A mapping of watched targets that the client cares about tracking and the
     * user has explicitly called a 'listen' for this target.
     *
     * These targets may or may not have been sent to or acknowledged by the
     * server. On re-establishing the listen stream, these targets should be sent
     * to the server. The targets removed with unlistens are removed eagerly
     * without waiting for confirmation from the listen stream.
     */

    this.listenTargets = {};
    this.watchChangeAggregator = null;
    /**
     * Set to true by enableNetwork() and false by disableNetwork() and indicates
     * the user-preferred network state.
     */

    this.networkEnabled = false;
    this.isPrimary = false;
    this.connectivityMonitor = connectivityMonitor;
    this.connectivityMonitor.addCallback(function (status) {
      asyncQueue.enqueueAndForget(function () {
        return tslib_1.__awaiter(_this, void 0, void 0, function () {
          return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this.canUseNetwork()) return [3
                /*break*/
                , 2];
                debug(LOG_TAG$7, 'Restarting streams for network reachability change.');
                return [4
                /*yield*/
                , this.restartNetwork()];

              case 1:
                _a.sent();

                _a.label = 2;

              case 2:
                return [2
                /*return*/
                ];
            }
          });
        });
      });
    });
    this.onlineStateTracker = new OnlineStateTracker(asyncQueue, onlineStateHandler); // Create streams (but note they're not started yet).

    this.watchStream = this.datastore.newPersistentWatchStream({
      onOpen: this.onWatchStreamOpen.bind(this),
      onClose: this.onWatchStreamClose.bind(this),
      onWatchChange: this.onWatchStreamChange.bind(this)
    });
    this.writeStream = this.datastore.newPersistentWriteStream({
      onOpen: this.onWriteStreamOpen.bind(this),
      onClose: this.onWriteStreamClose.bind(this),
      onHandshakeComplete: this.onWriteHandshakeComplete.bind(this),
      onMutationResult: this.onMutationResult.bind(this)
    });
  }
  /**
   * Starts up the remote store, creating streams, restoring state from
   * LocalStore, etc.
   */


  RemoteStore.prototype.start = function () {
    return this.enableNetwork();
  };
  /** Re-enables the network. Idempotent. */


  RemoteStore.prototype.enableNetwork = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var _a;

      return tslib_1.__generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            this.networkEnabled = true;
            if (!this.canUseNetwork()) return [3
            /*break*/
            , 3];
            _a = this.writeStream;
            return [4
            /*yield*/
            , this.localStore.getLastStreamToken()];

          case 1:
            _a.lastStreamToken = _b.sent();

            if (this.shouldStartWatchStream()) {
              this.startWatchStream();
            } else {
              this.onlineStateTracker.set(OnlineState.Unknown);
            } // This will start the write stream if necessary.


            return [4
            /*yield*/
            , this.fillWritePipeline()];

          case 2:
            // This will start the write stream if necessary.
            _b.sent();

            _b.label = 3;

          case 3:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Temporarily disables the network. The network can be re-enabled using
   * enableNetwork().
   */


  RemoteStore.prototype.disableNetwork = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.networkEnabled = false;
            return [4
            /*yield*/
            , this.disableNetworkInternal()];

          case 1:
            _a.sent(); // Set the OnlineState to Offline so get()s return from cache, etc.


            this.onlineStateTracker.set(OnlineState.Offline);
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  RemoteStore.prototype.disableNetworkInternal = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.writeStream.stop()];

          case 1:
            _a.sent();

            return [4
            /*yield*/
            , this.watchStream.stop()];

          case 2:
            _a.sent();

            if (this.writePipeline.length > 0) {
              debug(LOG_TAG$7, "Stopping write stream with " + this.writePipeline.length + " pending writes");
              this.writePipeline = [];
            }

            this.cleanUpWatchStreamState();
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  RemoteStore.prototype.shutdown = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            debug(LOG_TAG$7, 'RemoteStore shutting down.');
            this.networkEnabled = false;
            return [4
            /*yield*/
            , this.disableNetworkInternal()];

          case 1:
            _a.sent();

            this.connectivityMonitor.shutdown(); // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
            // triggering spurious listener events with cached data, etc.

            this.onlineStateTracker.set(OnlineState.Unknown);
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /** Starts new listen for the given query. Uses resume token if provided */


  RemoteStore.prototype.listen = function (queryData) {
    assert(!contains(this.listenTargets, queryData.targetId), 'listen called with duplicate targetId!'); // Mark this as something the client is currently listening for.

    this.listenTargets[queryData.targetId] = queryData;

    if (this.shouldStartWatchStream()) {
      // The listen will be sent in onWatchStreamOpen
      this.startWatchStream();
    } else if (this.watchStream.isOpen()) {
      this.sendWatchRequest(queryData);
    }
  };
  /** Removes the listen from server */


  RemoteStore.prototype.unlisten = function (targetId) {
    assert(contains(this.listenTargets, targetId), 'unlisten called without assigned target ID!');
    delete this.listenTargets[targetId];

    if (this.watchStream.isOpen()) {
      this.sendUnwatchRequest(targetId);
    }

    if (isEmpty(this.listenTargets)) {
      if (this.watchStream.isOpen()) {
        this.watchStream.markIdle();
      } else if (this.canUseNetwork()) {
        // Revert to OnlineState.Unknown if the watch stream is not open and we
        // have no listeners, since without any listens to send we cannot
        // confirm if the stream is healthy and upgrade to OnlineState.Online.
        this.onlineStateTracker.set(OnlineState.Unknown);
      }
    }
  };
  /** {@link TargetMetadataProvider.getQueryDataForTarget} */


  RemoteStore.prototype.getQueryDataForTarget = function (targetId) {
    return this.listenTargets[targetId] || null;
  };
  /** {@link TargetMetadataProvider.getRemoteKeysForTarget} */


  RemoteStore.prototype.getRemoteKeysForTarget = function (targetId) {
    return this.syncEngine.getRemoteKeysForTarget(targetId);
  };
  /**
   * We need to increment the the expected number of pending responses we're due
   * from watch so we wait for the ack to process any messages from this target.
   */


  RemoteStore.prototype.sendWatchRequest = function (queryData) {
    this.watchChangeAggregator.recordPendingTargetRequest(queryData.targetId);
    this.watchStream.watch(queryData);
  };
  /**
   * We need to increment the expected number of pending responses we're due
   * from watch so we wait for the removal on the server before we process any
   * messages from this target.
   */


  RemoteStore.prototype.sendUnwatchRequest = function (targetId) {
    this.watchChangeAggregator.recordPendingTargetRequest(targetId);
    this.watchStream.unwatch(targetId);
  };

  RemoteStore.prototype.startWatchStream = function () {
    assert(this.shouldStartWatchStream(), 'startWatchStream() called when shouldStartWatchStream() is false.');
    this.watchChangeAggregator = new WatchChangeAggregator(this);
    this.watchStream.start();
    this.onlineStateTracker.handleWatchStreamStart();
  };
  /**
   * Returns whether the watch stream should be started because it's necessary
   * and has not yet been started.
   */


  RemoteStore.prototype.shouldStartWatchStream = function () {
    return this.canUseNetwork() && !this.watchStream.isStarted() && !isEmpty(this.listenTargets);
  };

  RemoteStore.prototype.canUseNetwork = function () {
    return this.isPrimary && this.networkEnabled;
  };

  RemoteStore.prototype.cleanUpWatchStreamState = function () {
    this.watchChangeAggregator = null;
  };

  RemoteStore.prototype.onWatchStreamOpen = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var _this = this;

      return tslib_1.__generator(this, function (_a) {
        forEachNumber(this.listenTargets, function (targetId, queryData) {
          _this.sendWatchRequest(queryData);
        });
        return [2
        /*return*/
        ];
      });
    });
  };

  RemoteStore.prototype.onWatchStreamClose = function (error) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        if (error === undefined) {
          // Graceful stop (due to stop() or idle timeout). Make sure that's
          // desirable.
          assert(!this.shouldStartWatchStream(), 'Watch stream was stopped gracefully while still needed.');
        }

        this.cleanUpWatchStreamState(); // If we still need the watch stream, retry the connection.

        if (this.shouldStartWatchStream()) {
          this.onlineStateTracker.handleWatchStreamFailure(error);
          this.startWatchStream();
        } else {
          // No need to restart watch stream because there are no active targets.
          // The online state is set to unknown because there is no active attempt
          // at establishing a connection
          this.onlineStateTracker.set(OnlineState.Unknown);
        }

        return [2
        /*return*/
        ];
      });
    });
  };

  RemoteStore.prototype.onWatchStreamChange = function (watchChange, snapshotVersion) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var lastRemoteSnapshotVersion;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            // Mark the client as online since we got a message from the server
            this.onlineStateTracker.set(OnlineState.Online);

            if (watchChange instanceof WatchTargetChange && watchChange.state === WatchTargetChangeState.Removed && watchChange.cause) {
              // There was an error on a target, don't wait for a consistent snapshot
              // to raise events
              return [2
              /*return*/
              , this.handleTargetError(watchChange)];
            }

            if (watchChange instanceof DocumentWatchChange) {
              this.watchChangeAggregator.handleDocumentChange(watchChange);
            } else if (watchChange instanceof ExistenceFilterChange) {
              this.watchChangeAggregator.handleExistenceFilter(watchChange);
            } else {
              assert(watchChange instanceof WatchTargetChange, 'Expected watchChange to be an instance of WatchTargetChange');
              this.watchChangeAggregator.handleTargetChange(watchChange);
            }

            if (!!snapshotVersion.isEqual(SnapshotVersion.MIN)) return [3
            /*break*/
            , 3];
            return [4
            /*yield*/
            , this.localStore.getLastRemoteSnapshotVersion()];

          case 1:
            lastRemoteSnapshotVersion = _a.sent();
            if (!(snapshotVersion.compareTo(lastRemoteSnapshotVersion) >= 0)) return [3
            /*break*/
            , 3]; // We have received a target change with a global snapshot if the snapshot
            // version is not equal to SnapshotVersion.MIN.

            return [4
            /*yield*/
            , this.raiseWatchSnapshot(snapshotVersion)];

          case 2:
            // We have received a target change with a global snapshot if the snapshot
            // version is not equal to SnapshotVersion.MIN.
            _a.sent();

            _a.label = 3;

          case 3:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Takes a batch of changes from the Datastore, repackages them as a
   * RemoteEvent, and passes that on to the listener, which is typically the
   * SyncEngine.
   */


  RemoteStore.prototype.raiseWatchSnapshot = function (snapshotVersion) {
    var _this = this;

    assert(!snapshotVersion.isEqual(SnapshotVersion.MIN), "Can't raise event for unknown SnapshotVersion");
    var remoteEvent = this.watchChangeAggregator.createRemoteEvent(snapshotVersion); // Update in-memory resume tokens. LocalStore will update the
    // persistent view of these when applying the completed RemoteEvent.

    forEachNumber(remoteEvent.targetChanges, function (targetId, change) {
      if (change.resumeToken.length > 0) {
        var queryData = _this.listenTargets[targetId]; // A watched target might have been removed already.

        if (queryData) {
          _this.listenTargets[targetId] = queryData.copy({
            resumeToken: change.resumeToken,
            snapshotVersion: snapshotVersion
          });
        }
      }
    }); // Re-establish listens for the targets that have been invalidated by
    // existence filter mismatches.

    remoteEvent.targetMismatches.forEach(function (targetId) {
      var queryData = _this.listenTargets[targetId];

      if (!queryData) {
        // A watched target might have been removed already.
        return;
      } // Clear the resume token for the query, since we're in a known mismatch
      // state.


      _this.listenTargets[targetId] = queryData.copy({
        resumeToken: emptyByteString()
      }); // Cause a hard reset by unwatching and rewatching immediately, but
      // deliberately don't send a resume token so that we get a full update.

      _this.sendUnwatchRequest(targetId); // Mark the query we send as being on behalf of an existence filter
      // mismatch, but don't actually retain that in listenTargets. This ensures
      // that we flag the first re-listen this way without impacting future
      // listens of this target (that might happen e.g. on reconnect).


      var requestQueryData = new QueryData(queryData.query, targetId, QueryPurpose.ExistenceFilterMismatch, queryData.sequenceNumber);

      _this.sendWatchRequest(requestQueryData);
    }); // Finally raise remote event

    return this.syncEngine.applyRemoteEvent(remoteEvent);
  };
  /** Handles an error on a target */


  RemoteStore.prototype.handleTargetError = function (watchChange) {
    var _this = this;

    assert(!!watchChange.cause, 'Handling target error without a cause');
    var error = watchChange.cause;
    var promiseChain = Promise.resolve();
    watchChange.targetIds.forEach(function (targetId) {
      promiseChain = promiseChain.then(function () {
        return tslib_1.__awaiter(_this, void 0, void 0, function () {
          return tslib_1.__generator(this, function (_a) {
            // A watched target might have been removed already.
            if (contains(this.listenTargets, targetId)) {
              delete this.listenTargets[targetId];
              this.watchChangeAggregator.removeTarget(targetId);
              return [2
              /*return*/
              , this.syncEngine.rejectListen(targetId, error)];
            }

            return [2
            /*return*/
            ];
          });
        });
      });
    });
    return promiseChain;
  };
  /**
   * Attempts to fill our write pipeline with writes from the LocalStore.
   *
   * Called internally to bootstrap or refill the write pipeline and by
   * SyncEngine whenever there are new mutations to process.
   *
   * Starts the write stream if necessary.
   */


  RemoteStore.prototype.fillWritePipeline = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var lastBatchIdRetrieved, batch;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!this.canAddToWritePipeline()) return [3
            /*break*/
            , 4];
            lastBatchIdRetrieved = this.writePipeline.length > 0 ? this.writePipeline[this.writePipeline.length - 1].batchId : BATCHID_UNKNOWN;
            return [4
            /*yield*/
            , this.localStore.nextMutationBatch(lastBatchIdRetrieved)];

          case 1:
            batch = _a.sent();
            if (!(batch === null)) return [3
            /*break*/
            , 2];

            if (this.writePipeline.length === 0) {
              this.writeStream.markIdle();
            }

            return [3
            /*break*/
            , 4];

          case 2:
            this.addToWritePipeline(batch);
            return [4
            /*yield*/
            , this.fillWritePipeline()];

          case 3:
            _a.sent();

            _a.label = 4;

          case 4:
            if (this.shouldStartWriteStream()) {
              this.startWriteStream();
            }

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Returns true if we can add to the write pipeline (i.e. the network is
   * enabled and the write pipeline is not full).
   */


  RemoteStore.prototype.canAddToWritePipeline = function () {
    return this.canUseNetwork() && this.writePipeline.length < MAX_PENDING_WRITES;
  }; // For testing


  RemoteStore.prototype.outstandingWrites = function () {
    return this.writePipeline.length;
  };
  /**
   * Queues additional writes to be sent to the write stream, sending them
   * immediately if the write stream is established.
   */


  RemoteStore.prototype.addToWritePipeline = function (batch) {
    assert(this.canAddToWritePipeline(), 'addToWritePipeline called when pipeline is full');
    this.writePipeline.push(batch);

    if (this.writeStream.isOpen() && this.writeStream.handshakeComplete) {
      this.writeStream.writeMutations(batch.mutations);
    }
  };

  RemoteStore.prototype.shouldStartWriteStream = function () {
    return this.canUseNetwork() && !this.writeStream.isStarted() && this.writePipeline.length > 0;
  };

  RemoteStore.prototype.startWriteStream = function () {
    assert(this.shouldStartWriteStream(), 'startWriteStream() called when shouldStartWriteStream() is false.');
    this.writeStream.start();
  };

  RemoteStore.prototype.onWriteStreamOpen = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        this.writeStream.writeHandshake();
        return [2
        /*return*/
        ];
      });
    });
  };

  RemoteStore.prototype.onWriteHandshakeComplete = function () {
    var _this = this; // Record the stream token.


    return this.localStore.setLastStreamToken(this.writeStream.lastStreamToken).then(function () {
      // Send the write pipeline now that the stream is established.
      for (var _i = 0, _a = _this.writePipeline; _i < _a.length; _i++) {
        var batch = _a[_i];

        _this.writeStream.writeMutations(batch.mutations);
      }
    }).catch(ignoreIfPrimaryLeaseLoss);
  };

  RemoteStore.prototype.onMutationResult = function (commitVersion, results) {
    var _this = this; // This is a response to a write containing mutations and should be
    // correlated to the first write in our write pipeline.


    assert(this.writePipeline.length > 0, 'Got result for empty write pipeline');
    var batch = this.writePipeline.shift();
    var success = MutationBatchResult.from(batch, commitVersion, results, this.writeStream.lastStreamToken);
    return this.syncEngine.applySuccessfulWrite(success).then(function () {
      // It's possible that with the completion of this mutation another
      // slot has freed up.
      return _this.fillWritePipeline();
    });
  };

  RemoteStore.prototype.onWriteStreamClose = function (error) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var errorHandling;

      var _this = this;

      return tslib_1.__generator(this, function (_a) {
        if (error === undefined) {
          // Graceful stop (due to stop() or idle timeout). Make sure that's
          // desirable.
          assert(!this.shouldStartWriteStream(), 'Write stream was stopped gracefully while still needed.');
        } // If the write stream closed due to an error, invoke the error callbacks if
        // there are pending writes.


        if (error && this.writePipeline.length > 0) {
          errorHandling = void 0;

          if (this.writeStream.handshakeComplete) {
            // This error affects the actual write.
            errorHandling = this.handleWriteError(error);
          } else {
            // If there was an error before the handshake has finished, it's
            // possible that the server is unable to process the stream token
            // we're sending. (Perhaps it's too old?)
            errorHandling = this.handleHandshakeError(error);
          }

          return [2
          /*return*/
          , errorHandling.then(function () {
            // The write stream might have been started by refilling the write
            // pipeline for failed writes
            if (_this.shouldStartWriteStream()) {
              _this.startWriteStream();
            }
          })];
        }

        return [2
        /*return*/
        ];
      });
    });
  };

  RemoteStore.prototype.handleHandshakeError = function (error) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        // Reset the token if it's a permanent error, signaling the write stream is
        // no longer valid. Note that the handshake does not count as a write: see
        // comments on isPermanentWriteError for details.
        if (isPermanentError(error.code)) {
          debug(LOG_TAG$7, 'RemoteStore error before completed handshake; resetting stream token: ', this.writeStream.lastStreamToken);
          this.writeStream.lastStreamToken = emptyByteString();
          return [2
          /*return*/
          , this.localStore.setLastStreamToken(emptyByteString()).catch(ignoreIfPrimaryLeaseLoss)];
        }

        return [2
        /*return*/
        ];
      });
    });
  };

  RemoteStore.prototype.handleWriteError = function (error) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var batch;

      var _this = this;

      return tslib_1.__generator(this, function (_a) {
        // Only handle permanent errors here. If it's transient, just let the retry
        // logic kick in.
        if (isPermanentWriteError(error.code)) {
          batch = this.writePipeline.shift(); // In this case it's also unlikely that the server itself is melting
          // down -- this was just a bad request so inhibit backoff on the next
          // restart.

          this.writeStream.inhibitBackoff();
          return [2
          /*return*/
          , this.syncEngine.rejectFailedWrite(batch.batchId, error).then(function () {
            // It's possible that with the completion of this mutation
            // another slot has freed up.
            return _this.fillWritePipeline();
          })];
        }

        return [2
        /*return*/
        ];
      });
    });
  };

  RemoteStore.prototype.createTransaction = function () {
    return new Transaction(this.datastore);
  };

  RemoteStore.prototype.restartNetwork = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.networkEnabled = false;
            return [4
            /*yield*/
            , this.disableNetworkInternal()];

          case 1:
            _a.sent();

            this.onlineStateTracker.set(OnlineState.Unknown);
            return [4
            /*yield*/
            , this.enableNetwork()];

          case 2:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };

  RemoteStore.prototype.handleCredentialChange = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!this.canUseNetwork()) return [3
            /*break*/
            , 2]; // Tear down and re-create our network streams. This will ensure we get a fresh auth token
            // for the new user and re-fill the write pipeline with new mutations from the LocalStore
            // (since mutations are per-user).

            debug(LOG_TAG$7, 'RemoteStore restarting streams for new credential');
            return [4
            /*yield*/
            , this.restartNetwork()];

          case 1:
            _a.sent();

            _a.label = 2;

          case 2:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Toggles the network state when the client gains or loses its primary lease.
   */


  RemoteStore.prototype.applyPrimaryState = function (isPrimary) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.isPrimary = isPrimary;
            if (!(isPrimary && this.networkEnabled)) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , this.enableNetwork()];

          case 1:
            _a.sent();

            return [3
            /*break*/
            , 4];

          case 2:
            if (!!isPrimary) return [3
            /*break*/
            , 4];
            return [4
            /*yield*/
            , this.disableNetworkInternal()];

          case 3:
            _a.sent();

            this.onlineStateTracker.set(OnlineState.Unknown);
            _a.label = 4;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  return RemoteStore;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Immutable class representing a geo point as latitude-longitude pair.
 * This class is directly exposed in the public API, including its constructor.
 */


var GeoPoint =
/** @class */
function () {
  function GeoPoint(latitude, longitude) {
    validateExactNumberOfArgs('GeoPoint', arguments, 2);
    validateArgType('GeoPoint', 'number', 1, latitude);
    validateArgType('GeoPoint', 'number', 2, longitude);

    if (!isFinite(latitude) || latitude < -90 || latitude > 90) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Latitude must be a number between -90 and 90, but was: ' + latitude);
    }

    if (!isFinite(longitude) || longitude < -180 || longitude > 180) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Longitude must be a number between -180 and 180, but was: ' + longitude);
    }

    this._lat = latitude;
    this._long = longitude;
  }

  Object.defineProperty(GeoPoint.prototype, "latitude", {
    /**
     * Returns the latitude of this geo point, a number between -90 and 90.
     */
    get: function () {
      return this._lat;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(GeoPoint.prototype, "longitude", {
    /**
     * Returns the longitude of this geo point, a number between -180 and 180.
     */
    get: function () {
      return this._long;
    },
    enumerable: true,
    configurable: true
  });

  GeoPoint.prototype.isEqual = function (other) {
    return this._lat === other._lat && this._long === other._long;
  };
  /**
   * Actually private to JS consumers of our API, so this function is prefixed
   * with an underscore.
   */


  GeoPoint.prototype._compareTo = function (other) {
    return primitiveComparator(this._lat, other._lat) || primitiveComparator(this._long, other._long);
  };

  return GeoPoint;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var Query =
/** @class */
function () {
  /**
   * Initializes a Query with a path and optional additional query constraints.
   * Path must currently be empty if this is a collection group query.
   */
  function Query(path, collectionGroup, explicitOrderBy, filters, limit, startAt, endAt) {
    if (collectionGroup === void 0) {
      collectionGroup = null;
    }

    if (explicitOrderBy === void 0) {
      explicitOrderBy = [];
    }

    if (filters === void 0) {
      filters = [];
    }

    if (limit === void 0) {
      limit = null;
    }

    if (startAt === void 0) {
      startAt = null;
    }

    if (endAt === void 0) {
      endAt = null;
    }

    this.path = path;
    this.collectionGroup = collectionGroup;
    this.explicitOrderBy = explicitOrderBy;
    this.filters = filters;
    this.limit = limit;
    this.startAt = startAt;
    this.endAt = endAt;
    this.memoizedCanonicalId = null;
    this.memoizedOrderBy = null;

    if (this.startAt) {
      this.assertValidBound(this.startAt);
    }

    if (this.endAt) {
      this.assertValidBound(this.endAt);
    }
  }

  Query.atPath = function (path) {
    return new Query(path);
  };

  Object.defineProperty(Query.prototype, "orderBy", {
    get: function () {
      if (this.memoizedOrderBy === null) {
        var inequalityField = this.getInequalityFilterField();
        var firstOrderByField = this.getFirstOrderByField();

        if (inequalityField !== null && firstOrderByField === null) {
          // In order to implicitly add key ordering, we must also add the
          // inequality filter field for it to be a valid query.
          // Note that the default inequality field and key ordering is ascending.
          if (inequalityField.isKeyField()) {
            this.memoizedOrderBy = [KEY_ORDERING_ASC];
          } else {
            this.memoizedOrderBy = [new OrderBy(inequalityField), KEY_ORDERING_ASC];
          }
        } else {
          assert(inequalityField === null || firstOrderByField !== null && inequalityField.isEqual(firstOrderByField), 'First orderBy should match inequality field.');
          this.memoizedOrderBy = [];
          var foundKeyOrdering = false;

          for (var _i = 0, _a = this.explicitOrderBy; _i < _a.length; _i++) {
            var orderBy = _a[_i];
            this.memoizedOrderBy.push(orderBy);

            if (orderBy.field.isKeyField()) {
              foundKeyOrdering = true;
            }
          }

          if (!foundKeyOrdering) {
            // The order of the implicit key ordering always matches the last
            // explicit order by
            var lastDirection = this.explicitOrderBy.length > 0 ? this.explicitOrderBy[this.explicitOrderBy.length - 1].dir : Direction.ASCENDING;
            this.memoizedOrderBy.push(lastDirection === Direction.ASCENDING ? KEY_ORDERING_ASC : KEY_ORDERING_DESC);
          }
        }
      }

      return this.memoizedOrderBy;
    },
    enumerable: true,
    configurable: true
  });

  Query.prototype.addFilter = function (filter) {
    assert(this.getInequalityFilterField() == null || !(filter instanceof RelationFilter) || !filter.isInequality() || filter.field.isEqual(this.getInequalityFilterField()), 'Query must only have one inequality field.');
    assert(!this.isDocumentQuery(), 'No filtering allowed for document query');
    var newFilters = this.filters.concat([filter]);
    return new Query(this.path, this.collectionGroup, this.explicitOrderBy.slice(), newFilters, this.limit, this.startAt, this.endAt);
  };

  Query.prototype.addOrderBy = function (orderBy) {
    assert(!this.startAt && !this.endAt, 'Bounds must be set after orderBy'); // TODO(dimond): validate that orderBy does not list the same key twice.

    var newOrderBy = this.explicitOrderBy.concat([orderBy]);
    return new Query(this.path, this.collectionGroup, newOrderBy, this.filters.slice(), this.limit, this.startAt, this.endAt);
  };

  Query.prototype.withLimit = function (limit) {
    return new Query(this.path, this.collectionGroup, this.explicitOrderBy.slice(), this.filters.slice(), limit, this.startAt, this.endAt);
  };

  Query.prototype.withStartAt = function (bound) {
    return new Query(this.path, this.collectionGroup, this.explicitOrderBy.slice(), this.filters.slice(), this.limit, bound, this.endAt);
  };

  Query.prototype.withEndAt = function (bound) {
    return new Query(this.path, this.collectionGroup, this.explicitOrderBy.slice(), this.filters.slice(), this.limit, this.startAt, bound);
  };
  /**
   * Helper to convert a collection group query into a collection query at a
   * specific path. This is used when executing collection group queries, since
   * we have to split the query into a set of collection queries at multiple
   * paths.
   */


  Query.prototype.asCollectionQueryAtPath = function (path) {
    return new Query(path,
    /*collectionGroup=*/
    null, this.explicitOrderBy.slice(), this.filters.slice(), this.limit, this.startAt, this.endAt);
  }; // TODO(b/29183165): This is used to get a unique string from a query to, for
  // example, use as a dictionary key, but the implementation is subject to
  // collisions. Make it collision-free.


  Query.prototype.canonicalId = function () {
    if (this.memoizedCanonicalId === null) {
      var canonicalId = this.path.canonicalString();

      if (this.isCollectionGroupQuery()) {
        canonicalId += '|cg:' + this.collectionGroup;
      }

      canonicalId += '|f:';

      for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {
        var filter = _a[_i];
        canonicalId += filter.canonicalId();
        canonicalId += ',';
      }

      canonicalId += '|ob:'; // TODO(dimond): make this collision resistant

      for (var _b = 0, _c = this.orderBy; _b < _c.length; _b++) {
        var orderBy = _c[_b];
        canonicalId += orderBy.canonicalId();
        canonicalId += ',';
      }

      if (!isNullOrUndefined(this.limit)) {
        canonicalId += '|l:';
        canonicalId += this.limit;
      }

      if (this.startAt) {
        canonicalId += '|lb:';
        canonicalId += this.startAt.canonicalId();
      }

      if (this.endAt) {
        canonicalId += '|ub:';
        canonicalId += this.endAt.canonicalId();
      }

      this.memoizedCanonicalId = canonicalId;
    }

    return this.memoizedCanonicalId;
  };

  Query.prototype.toString = function () {
    var str = 'Query(' + this.path.canonicalString();

    if (this.isCollectionGroupQuery()) {
      str += ' collectionGroup=' + this.collectionGroup;
    }

    if (this.filters.length > 0) {
      str += ", filters: [" + this.filters.join(', ') + "]";
    }

    if (!isNullOrUndefined(this.limit)) {
      str += ', limit: ' + this.limit;
    }

    if (this.explicitOrderBy.length > 0) {
      str += ", orderBy: [" + this.explicitOrderBy.join(', ') + "]";
    }

    if (this.startAt) {
      str += ', startAt: ' + this.startAt.canonicalId();
    }

    if (this.endAt) {
      str += ', endAt: ' + this.endAt.canonicalId();
    }

    return str + ')';
  };

  Query.prototype.isEqual = function (other) {
    if (this.limit !== other.limit) {
      return false;
    }

    if (this.orderBy.length !== other.orderBy.length) {
      return false;
    }

    for (var i = 0; i < this.orderBy.length; i++) {
      if (!this.orderBy[i].isEqual(other.orderBy[i])) {
        return false;
      }
    }

    if (this.filters.length !== other.filters.length) {
      return false;
    }

    for (var i = 0; i < this.filters.length; i++) {
      if (!this.filters[i].isEqual(other.filters[i])) {
        return false;
      }
    }

    if (this.collectionGroup !== other.collectionGroup) {
      return false;
    }

    if (!this.path.isEqual(other.path)) {
      return false;
    }

    if (this.startAt !== null ? !this.startAt.isEqual(other.startAt) : other.startAt !== null) {
      return false;
    }

    return this.endAt !== null ? this.endAt.isEqual(other.endAt) : other.endAt === null;
  };

  Query.prototype.docComparator = function (d1, d2) {
    var comparedOnKeyField = false;

    for (var _i = 0, _a = this.orderBy; _i < _a.length; _i++) {
      var orderBy = _a[_i];
      var comp = orderBy.compare(d1, d2);
      if (comp !== 0) return comp;
      comparedOnKeyField = comparedOnKeyField || orderBy.field.isKeyField();
    } // Assert that we actually compared by key


    assert(comparedOnKeyField, "orderBy used that doesn't compare on key field");
    return 0;
  };

  Query.prototype.matches = function (doc) {
    return this.matchesPathAndCollectionGroup(doc) && this.matchesOrderBy(doc) && this.matchesFilters(doc) && this.matchesBounds(doc);
  };

  Query.prototype.hasLimit = function () {
    return !isNullOrUndefined(this.limit);
  };

  Query.prototype.getFirstOrderByField = function () {
    return this.explicitOrderBy.length > 0 ? this.explicitOrderBy[0].field : null;
  };

  Query.prototype.getInequalityFilterField = function () {
    for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {
      var filter = _a[_i];

      if (filter instanceof RelationFilter && filter.isInequality()) {
        return filter.field;
      }
    }

    return null;
  }; // Checks if any of the provided RelationOps are included in the query and
  // returns the first one that is, or null if none are.


  Query.prototype.findRelationOpFilter = function (relationOps) {
    for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {
      var filter = _a[_i];

      if (filter instanceof RelationFilter) {
        if (relationOps.indexOf(filter.op) >= 0) {
          return filter.op;
        }
      }
    }

    return null;
  };

  Query.prototype.isDocumentQuery = function () {
    return DocumentKey.isDocumentKey(this.path) && this.collectionGroup === null && this.filters.length === 0;
  };

  Query.prototype.isCollectionGroupQuery = function () {
    return this.collectionGroup !== null;
  };

  Query.prototype.matchesPathAndCollectionGroup = function (doc) {
    var docPath = doc.key.path;

    if (this.collectionGroup !== null) {
      // NOTE: this.path is currently always empty since we don't expose Collection
      // Group queries rooted at a document path yet.
      return doc.key.hasCollectionId(this.collectionGroup) && this.path.isPrefixOf(docPath);
    } else if (DocumentKey.isDocumentKey(this.path)) {
      // exact match for document queries
      return this.path.isEqual(docPath);
    } else {
      // shallow ancestor queries by default
      return this.path.isImmediateParentOf(docPath);
    }
  };
  /**
   * A document must have a value for every ordering clause in order to show up
   * in the results.
   */


  Query.prototype.matchesOrderBy = function (doc) {
    for (var _i = 0, _a = this.explicitOrderBy; _i < _a.length; _i++) {
      var orderBy = _a[_i]; // order by key always matches

      if (!orderBy.field.isKeyField() && doc.field(orderBy.field) === undefined) {
        return false;
      }
    }

    return true;
  };

  Query.prototype.matchesFilters = function (doc) {
    for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {
      var filter = _a[_i];

      if (!filter.matches(doc)) {
        return false;
      }
    }

    return true;
  };
  /**
   * Makes sure a document is within the bounds, if provided.
   */


  Query.prototype.matchesBounds = function (doc) {
    if (this.startAt && !this.startAt.sortsBeforeDocument(this.orderBy, doc)) {
      return false;
    }

    if (this.endAt && this.endAt.sortsBeforeDocument(this.orderBy, doc)) {
      return false;
    }

    return true;
  };

  Query.prototype.assertValidBound = function (bound) {
    assert(bound.position.length <= this.orderBy.length, 'Bound is longer than orderBy');
  };

  return Query;
}();

var Filter =
/** @class */
function () {
  function Filter() {}
  /**
   * Creates a filter based on the provided arguments.
   */


  Filter.create = function (field, op, value) {
    if (value.isEqual(NullValue.INSTANCE)) {
      if (op !== RelationOp.EQUAL) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You can only perform equals comparisons on null.');
      }

      return new NullFilter(field);
    } else if (value.isEqual(DoubleValue.NAN)) {
      if (op !== RelationOp.EQUAL) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You can only perform equals comparisons on NaN.');
      }

      return new NanFilter(field);
    } else {
      return new RelationFilter(field, op, value);
    }
  };

  return Filter;
}();

var RelationOp =
/** @class */
function () {
  function RelationOp(name) {
    this.name = name;
  }

  RelationOp.fromString = function (op) {
    switch (op) {
      case '<':
        return RelationOp.LESS_THAN;

      case '<=':
        return RelationOp.LESS_THAN_OR_EQUAL;

      case '==':
        return RelationOp.EQUAL;

      case '>=':
        return RelationOp.GREATER_THAN_OR_EQUAL;

      case '>':
        return RelationOp.GREATER_THAN;

      case 'array-contains':
        return RelationOp.ARRAY_CONTAINS;

      case 'in':
        return RelationOp.IN;

      case 'array-contains-any':
        return RelationOp.ARRAY_CONTAINS_ANY;

      default:
        return fail('Unknown relation: ' + op);
    }
  };

  RelationOp.prototype.toString = function () {
    return this.name;
  };

  RelationOp.prototype.isEqual = function (other) {
    return this.name === other.name;
  };

  RelationOp.LESS_THAN = new RelationOp('<');
  RelationOp.LESS_THAN_OR_EQUAL = new RelationOp('<=');
  RelationOp.EQUAL = new RelationOp('==');
  RelationOp.GREATER_THAN = new RelationOp('>');
  RelationOp.GREATER_THAN_OR_EQUAL = new RelationOp('>=');
  RelationOp.ARRAY_CONTAINS = new RelationOp('array-contains');
  RelationOp.IN = new RelationOp('in');
  RelationOp.ARRAY_CONTAINS_ANY = new RelationOp('array-contains-any');
  return RelationOp;
}();

var RelationFilter =
/** @class */
function (_super) {
  tslib_1.__extends(RelationFilter, _super);

  function RelationFilter(field, op, value) {
    var _this = _super.call(this) || this;

    _this.field = field;
    _this.op = op;
    _this.value = value;
    return _this;
  }

  RelationFilter.prototype.matches = function (doc) {
    if (this.field.isKeyField()) {
      assert(this.value instanceof RefValue, 'Comparing on key, but filter value not a RefValue');
      assert(this.op !== RelationOp.ARRAY_CONTAINS && this.op !== RelationOp.ARRAY_CONTAINS_ANY && this.op !== RelationOp.IN, "'" + this.op.toString() + "' queries don't make sense on document keys.");
      var refValue = this.value;
      var comparison = DocumentKey.comparator(doc.key, refValue.key);
      return this.matchesComparison(comparison);
    } else {
      var val = doc.field(this.field);
      return val !== undefined && this.matchesValue(val);
    }
  };

  RelationFilter.prototype.matchesValue = function (other) {
    var _this = this;

    if (this.op === RelationOp.ARRAY_CONTAINS) {
      return other instanceof ArrayValue && other.internalValue.find(function (element) {
        return element.isEqual(_this.value);
      }) !== undefined;
    } else if (this.op === RelationOp.IN) {
      if (this.value instanceof ArrayValue) {
        return this.value.internalValue.find(function (element) {
          return element.isEqual(other);
        }) !== undefined;
      } else {
        return fail('IN filter has invalid value: ' + this.value.toString());
      }
    } else if (this.op === RelationOp.ARRAY_CONTAINS_ANY) {
      return other instanceof ArrayValue && other.internalValue.some(function (lhsElem) {
        return _this.value instanceof ArrayValue && _this.value.internalValue.find(function (rhsElem) {
          return rhsElem.isEqual(lhsElem);
        }) !== undefined;
      });
    } else {
      // Only compare types with matching backend order (such as double and int).
      return this.value.typeOrder === other.typeOrder && this.matchesComparison(other.compareTo(this.value));
    }
  };

  RelationFilter.prototype.matchesComparison = function (comparison) {
    switch (this.op) {
      case RelationOp.LESS_THAN:
        return comparison < 0;

      case RelationOp.LESS_THAN_OR_EQUAL:
        return comparison <= 0;

      case RelationOp.EQUAL:
        return comparison === 0;

      case RelationOp.GREATER_THAN:
        return comparison > 0;

      case RelationOp.GREATER_THAN_OR_EQUAL:
        return comparison >= 0;

      default:
        return fail('Unknown relation op' + this.op);
    }
  };

  RelationFilter.prototype.isInequality = function () {
    return [RelationOp.LESS_THAN, RelationOp.LESS_THAN_OR_EQUAL, RelationOp.GREATER_THAN, RelationOp.GREATER_THAN_OR_EQUAL].indexOf(this.op) >= 0;
  };

  RelationFilter.prototype.canonicalId = function () {
    // TODO(b/29183165): Technically, this won't be unique if two values have
    // the same description, such as the int 3 and the string "3". So we should
    // add the types in here somehow, too.
    return this.field.canonicalString() + this.op.toString() + this.value.toString();
  };

  RelationFilter.prototype.isEqual = function (other) {
    if (other instanceof RelationFilter) {
      return this.op.isEqual(other.op) && this.field.isEqual(other.field) && this.value.isEqual(other.value);
    } else {
      return false;
    }
  };

  RelationFilter.prototype.toString = function () {
    return this.field.canonicalString() + " " + this.op + " " + this.value.value();
  };

  return RelationFilter;
}(Filter);
/**
 * Filter that matches 'null' values.
 */


var NullFilter =
/** @class */
function (_super) {
  tslib_1.__extends(NullFilter, _super);

  function NullFilter(field) {
    var _this = _super.call(this) || this;

    _this.field = field;
    return _this;
  }

  NullFilter.prototype.matches = function (doc) {
    var val = doc.field(this.field);
    return val !== undefined && val.value() === null;
  };

  NullFilter.prototype.canonicalId = function () {
    return this.field.canonicalString() + ' IS null';
  };

  NullFilter.prototype.toString = function () {
    return this.field.canonicalString() + " IS null";
  };

  NullFilter.prototype.isEqual = function (other) {
    if (other instanceof NullFilter) {
      return this.field.isEqual(other.field);
    } else {
      return false;
    }
  };

  return NullFilter;
}(Filter);
/**
 * Filter that matches 'NaN' values.
 */


var NanFilter =
/** @class */
function (_super) {
  tslib_1.__extends(NanFilter, _super);

  function NanFilter(field) {
    var _this = _super.call(this) || this;

    _this.field = field;
    return _this;
  }

  NanFilter.prototype.matches = function (doc) {
    var field = doc.field(this.field);
    var val = field && field.value();
    return typeof val === 'number' && isNaN(val);
  };

  NanFilter.prototype.canonicalId = function () {
    return this.field.canonicalString() + ' IS NaN';
  };

  NanFilter.prototype.toString = function () {
    return this.field.canonicalString() + " IS NaN";
  };

  NanFilter.prototype.isEqual = function (other) {
    if (other instanceof NanFilter) {
      return this.field.isEqual(other.field);
    } else {
      return false;
    }
  };

  return NanFilter;
}(Filter);
/**
 * The direction of sorting in an order by.
 */


var Direction =
/** @class */
function () {
  function Direction(name) {
    this.name = name;
  }

  Direction.prototype.toString = function () {
    return this.name;
  };

  Direction.ASCENDING = new Direction('asc');
  Direction.DESCENDING = new Direction('desc');
  return Direction;
}();
/**
 * Represents a bound of a query.
 *
 * The bound is specified with the given components representing a position and
 * whether it's just before or just after the position (relative to whatever the
 * query order is).
 *
 * The position represents a logical index position for a query. It's a prefix
 * of values for the (potentially implicit) order by clauses of a query.
 *
 * Bound provides a function to determine whether a document comes before or
 * after a bound. This is influenced by whether the position is just before or
 * just after the provided values.
 */


var Bound =
/** @class */
function () {
  function Bound(position, before) {
    this.position = position;
    this.before = before;
  }

  Bound.prototype.canonicalId = function () {
    // TODO(b/29183165): Make this collision robust.
    var canonicalId = this.before ? 'b:' : 'a:';

    for (var _i = 0, _a = this.position; _i < _a.length; _i++) {
      var component = _a[_i];
      canonicalId += component.toString();
    }

    return canonicalId;
  };
  /**
   * Returns true if a document sorts before a bound using the provided sort
   * order.
   */


  Bound.prototype.sortsBeforeDocument = function (orderBy, doc) {
    assert(this.position.length <= orderBy.length, "Bound has more components than query's orderBy");
    var comparison = 0;

    for (var i = 0; i < this.position.length; i++) {
      var orderByComponent = orderBy[i];
      var component = this.position[i];

      if (orderByComponent.field.isKeyField()) {
        assert(component instanceof RefValue, 'Bound has a non-key value where the key path is being used.');
        comparison = DocumentKey.comparator(component.key, doc.key);
      } else {
        var docValue = doc.field(orderByComponent.field);
        assert(docValue !== undefined, 'Field should exist since document matched the orderBy already.');
        comparison = component.compareTo(docValue);
      }

      if (orderByComponent.dir === Direction.DESCENDING) {
        comparison = comparison * -1;
      }

      if (comparison !== 0) {
        break;
      }
    }

    return this.before ? comparison <= 0 : comparison < 0;
  };

  Bound.prototype.isEqual = function (other) {
    if (other === null) {
      return false;
    }

    if (this.before !== other.before || this.position.length !== other.position.length) {
      return false;
    }

    for (var i = 0; i < this.position.length; i++) {
      var thisPosition = this.position[i];
      var otherPosition = other.position[i];
      return thisPosition.isEqual(otherPosition);
    }

    return true;
  };

  return Bound;
}();
/**
 * An ordering on a field, in some Direction. Direction defaults to ASCENDING.
 */


var OrderBy =
/** @class */
function () {
  function OrderBy(field, dir) {
    this.field = field;

    if (dir === undefined) {
      dir = Direction.ASCENDING;
    }

    this.dir = dir;
    this.isKeyOrderBy = field.isKeyField();
  }

  OrderBy.prototype.compare = function (d1, d2) {
    var comparison = this.isKeyOrderBy ? Document.compareByKey(d1, d2) : Document.compareByField(this.field, d1, d2);

    switch (this.dir) {
      case Direction.ASCENDING:
        return comparison;

      case Direction.DESCENDING:
        return -1 * comparison;

      default:
        return fail('Unknown direction: ' + this.dir);
    }
  };

  OrderBy.prototype.canonicalId = function () {
    // TODO(b/29183165): Make this collision robust.
    return this.field.canonicalString() + this.dir.toString();
  };

  OrderBy.prototype.toString = function () {
    return this.field.canonicalString() + " (" + this.dir + ")";
  };

  OrderBy.prototype.isEqual = function (other) {
    return this.dir === other.dir && this.field.isEqual(other.field);
  };

  return OrderBy;
}();

var KEY_ORDERING_ASC = new OrderBy(FieldPath.keyField(), Direction.ASCENDING);
var KEY_ORDERING_DESC = new OrderBy(FieldPath.keyField(), Direction.DESCENDING);
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Transforms a value into a server-generated timestamp. */

var ServerTimestampTransform =
/** @class */
function () {
  function ServerTimestampTransform() {
    this.isIdempotent = true;
  }

  ServerTimestampTransform.prototype.applyToLocalView = function (previousValue, localWriteTime) {
    return new ServerTimestampValue(localWriteTime, previousValue);
  };

  ServerTimestampTransform.prototype.applyToRemoteDocument = function (previousValue, transformResult) {
    return transformResult;
  };

  ServerTimestampTransform.prototype.isEqual = function (other) {
    return other instanceof ServerTimestampTransform;
  };

  ServerTimestampTransform.instance = new ServerTimestampTransform();
  return ServerTimestampTransform;
}();
/** Transforms an array value via a union operation. */


var ArrayUnionTransformOperation =
/** @class */
function () {
  function ArrayUnionTransformOperation(elements) {
    this.elements = elements;
    this.isIdempotent = true;
  }

  ArrayUnionTransformOperation.prototype.applyToLocalView = function (previousValue, localWriteTime) {
    return this.apply(previousValue);
  };

  ArrayUnionTransformOperation.prototype.applyToRemoteDocument = function (previousValue, transformResult) {
    // The server just sends null as the transform result for array operations,
    // so we have to calculate a result the same as we do for local
    // applications.
    return this.apply(previousValue);
  };

  ArrayUnionTransformOperation.prototype.apply = function (previousValue) {
    var result = coercedFieldValuesArray(previousValue);

    var _loop_1 = function (toUnion) {
      if (!result.find(function (element) {
        return element.isEqual(toUnion);
      })) {
        result.push(toUnion);
      }
    };

    for (var _i = 0, _a = this.elements; _i < _a.length; _i++) {
      var toUnion = _a[_i];

      _loop_1(toUnion);
    }

    return new ArrayValue(result);
  };

  ArrayUnionTransformOperation.prototype.isEqual = function (other) {
    return other instanceof ArrayUnionTransformOperation && arrayEquals(other.elements, this.elements);
  };

  return ArrayUnionTransformOperation;
}();
/** Transforms an array value via a remove operation. */


var ArrayRemoveTransformOperation =
/** @class */
function () {
  function ArrayRemoveTransformOperation(elements) {
    this.elements = elements;
    this.isIdempotent = true;
  }

  ArrayRemoveTransformOperation.prototype.applyToLocalView = function (previousValue, localWriteTime) {
    return this.apply(previousValue);
  };

  ArrayRemoveTransformOperation.prototype.applyToRemoteDocument = function (previousValue, transformResult) {
    // The server just sends null as the transform result for array operations,
    // so we have to calculate a result the same as we do for local
    // applications.
    return this.apply(previousValue);
  };

  ArrayRemoveTransformOperation.prototype.apply = function (previousValue) {
    var result = coercedFieldValuesArray(previousValue);

    var _loop_2 = function (toRemove) {
      result = result.filter(function (element) {
        return !element.isEqual(toRemove);
      });
    };

    for (var _i = 0, _a = this.elements; _i < _a.length; _i++) {
      var toRemove = _a[_i];

      _loop_2(toRemove);
    }

    return new ArrayValue(result);
  };

  ArrayRemoveTransformOperation.prototype.isEqual = function (other) {
    return other instanceof ArrayRemoveTransformOperation && arrayEquals(other.elements, this.elements);
  };

  return ArrayRemoveTransformOperation;
}();
/**
 * Implements the backend semantics for locally computed NUMERIC_ADD (increment)
 * transforms. Converts all field values to integers or doubles, but unlike the
 * backend does not cap integer values at 2^63. Instead, JavaScript number
 * arithmetic is used and precision loss can occur for values greater than 2^53.
 */


var NumericIncrementTransformOperation =
/** @class */
function () {
  function NumericIncrementTransformOperation(operand) {
    this.operand = operand;
    this.isIdempotent = false;
  }

  NumericIncrementTransformOperation.prototype.applyToLocalView = function (previousValue, localWriteTime) {
    // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit
    // precision and resolves overflows by reducing precision, we do not
    // manually cap overflows at 2^63.
    // Return an integer value iff the previous value and the operand is an
    // integer.
    if (previousValue instanceof IntegerValue && this.operand instanceof IntegerValue) {
      var sum = previousValue.internalValue + this.operand.internalValue;
      return new IntegerValue(sum);
    } else if (previousValue instanceof NumberValue) {
      var sum = previousValue.internalValue + this.operand.internalValue;
      return new DoubleValue(sum);
    } else {
      // If the existing value is not a number, use the value of the transform as
      // the new base value.
      return this.operand;
    }
  };

  NumericIncrementTransformOperation.prototype.applyToRemoteDocument = function (previousValue, transformResult) {
    assert(transformResult !== null, "Didn't receive transformResult for NUMERIC_ADD transform");
    return transformResult;
  };

  NumericIncrementTransformOperation.prototype.isEqual = function (other) {
    return other instanceof NumericIncrementTransformOperation && this.operand.isEqual(other.operand);
  };

  return NumericIncrementTransformOperation;
}();

function coercedFieldValuesArray(value) {
  if (value instanceof ArrayValue) {
    return value.internalValue.slice();
  } else {
    // coerce to empty array.
    return [];
  }
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var ExistenceFilter =
/** @class */
function () {
  // TODO(b/33078163): just use simplest form of existence filter for now
  function ExistenceFilter(count) {
    this.count = count;
  }

  ExistenceFilter.prototype.isEqual = function (other) {
    return other && other.count === this.count;
  };

  return ExistenceFilter;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var DIRECTIONS = function () {
  var dirs = {};
  dirs[Direction.ASCENDING.name] = 'ASCENDING';
  dirs[Direction.DESCENDING.name] = 'DESCENDING';
  return dirs;
}();

var OPERATORS = function () {
  var ops = {};
  ops[RelationOp.LESS_THAN.name] = 'LESS_THAN';
  ops[RelationOp.LESS_THAN_OR_EQUAL.name] = 'LESS_THAN_OR_EQUAL';
  ops[RelationOp.GREATER_THAN.name] = 'GREATER_THAN';
  ops[RelationOp.GREATER_THAN_OR_EQUAL.name] = 'GREATER_THAN_OR_EQUAL';
  ops[RelationOp.EQUAL.name] = 'EQUAL';
  ops[RelationOp.ARRAY_CONTAINS.name] = 'ARRAY_CONTAINS';
  ops[RelationOp.IN.name] = 'IN';
  ops[RelationOp.ARRAY_CONTAINS_ANY.name] = 'ARRAY_CONTAINS_ANY';
  return ops;
}(); // A RegExp matching ISO 8601 UTC timestamps with optional fraction.


var ISO_REG_EXP = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);

function assertPresent(value, description) {
  assert(!isNullOrUndefined(value), description + ' is missing');
}

function parseInt64(value) {
  // TODO(bjornick): Handle int64 greater than 53 bits.
  if (typeof value === 'number') {
    return value;
  } else if (typeof value === 'string') {
    return Number(value);
  } else {
    return fail("can't parse " + value);
  }
}
/**
 * Generates JsonObject values for the Datastore API suitable for sending to
 * either GRPC stub methods or via the JSON/HTTP REST API.
 * TODO(klimt): We can remove the databaseId argument if we keep the full
 * resource name in documents.
 */


var JsonProtoSerializer =
/** @class */
function () {
  function JsonProtoSerializer(databaseId, options) {
    this.databaseId = databaseId;
    this.options = options;
  }

  JsonProtoSerializer.prototype.emptyByteString = function () {
    if (this.options.useProto3Json) {
      return '';
    } else {
      return new Uint8Array(0);
    }
  };

  JsonProtoSerializer.prototype.unsafeCastProtoByteString = function (byteString) {
    // byteStrings can be either string or UInt8Array, but the typings say
    // it's always a string. Cast as string to avoid type check failing
    return byteString;
  };

  JsonProtoSerializer.prototype.fromRpcStatus = function (status) {
    var code = status.code === undefined ? Code.UNKNOWN : mapCodeFromRpcCode(status.code);
    return new FirestoreError(code, status.message || '');
  };
  /**
   * Returns a value for a number (or undefined) that's appropriate to put into
   * a google.protobuf.Int32Value proto.
   * DO NOT USE THIS FOR ANYTHING ELSE.
   * This method cheats. It's typed as returning "number" because that's what
   * our generated proto interfaces say Int32Value must be. But GRPC actually
   * expects a { value: <number> } struct.
   */


  JsonProtoSerializer.prototype.toInt32Value = function (val) {
    if (!isNullOrUndefined(val)) {
      // tslint:disable-next-line:no-any We need to match generated Proto types.
      return {
        value: val
      };
    } else {
      return undefined;
    }
  };
  /**
   * Returns a number (or null) from a google.protobuf.Int32Value proto.
   * DO NOT USE THIS FOR ANYTHING ELSE.
   * This method cheats. It's typed as accepting "number" because that's what
   * our generated proto interfaces say Int32Value must be, but it actually
   * accepts { value: number } to match our serialization in toInt32Value().
   */


  JsonProtoSerializer.prototype.fromInt32Value = function (val) {
    var result;

    if (typeof val === 'object') {
      // tslint:disable-next-line:no-any We need to match generated Proto types.
      result = val.value;
    } else {
      // We accept raw numbers (without the {value: ... } wrapper) for
      // compatibility with legacy persisted data.
      result = val;
    }

    return isNullOrUndefined(result) ? null : result;
  };
  /**
   * Returns a value for a Date that's appropriate to put into a proto.
   * DO NOT USE THIS FOR ANYTHING ELSE.
   * This method cheats. It's typed as returning "string" because that's what
   * our generated proto interfaces say dates must be. But it's easier and safer
   * to actually return a Timestamp proto.
   */


  JsonProtoSerializer.prototype.toTimestamp = function (timestamp) {
    return {
      seconds: '' + timestamp.seconds,
      nanos: timestamp.nanoseconds // tslint:disable-next-line:no-any

    };
  };

  JsonProtoSerializer.prototype.fromTimestamp = function (date) {
    // The json interface (for the browser) will return an iso timestamp string,
    // while the proto js library (for node) will return a
    // google.protobuf.Timestamp instance.
    if (typeof date === 'string') {
      // TODO(b/37282237): Use strings for Proto3 timestamps
      // assert(this.options.useProto3Json,
      //   'The timestamp string format requires Proto3.');
      return this.fromIso8601String(date);
    } else {
      assert(!!date, 'Cannot deserialize null or undefined timestamp.'); // TODO(b/37282237): Use strings for Proto3 timestamps
      // assert(!this.options.useProto3Json,
      //   'The timestamp instance format requires Proto JS.');

      var seconds = parseInt64(date.seconds || '0');
      var nanos = date.nanos || 0;
      return new Timestamp(seconds, nanos);
    }
  };

  JsonProtoSerializer.prototype.fromIso8601String = function (utc) {
    // The date string can have higher precision (nanos) than the Date class
    // (millis), so we do some custom parsing here.
    // Parse the nanos right out of the string.
    var nanos = 0;
    var fraction = ISO_REG_EXP.exec(utc);
    assert(!!fraction, 'invalid timestamp: ' + utc);

    if (fraction[1]) {
      // Pad the fraction out to 9 digits (nanos).
      var nanoStr = fraction[1];
      nanoStr = (nanoStr + '000000000').substr(0, 9);
      nanos = Number(nanoStr);
    } // Parse the date to get the seconds.


    var date = new Date(utc);
    var seconds = Math.floor(date.getTime() / 1000);
    return new Timestamp(seconds, nanos);
  };
  /**
   * Returns a value for bytes that's appropriate to put in a proto.
   * DO NOT USE THIS FOR ANYTHING ELSE.
   * This method cheats. It's typed as returning "string" because that's what
   * our generated proto interfaces say bytes must be. But it should return
   * an Uint8Array in Node.
   */


  JsonProtoSerializer.prototype.toBytes = function (bytes) {
    if (this.options.useProto3Json) {
      return bytes.toBase64();
    } else {
      // The typings say it's a string, but it needs to be a Uint8Array in Node.
      return this.unsafeCastProtoByteString(bytes.toUint8Array());
    }
  };
  /**
   * Parse the blob from the protos into the internal Blob class. Note that the
   * typings assume all blobs are strings, but they are actually Uint8Arrays
   * on Node.
   */


  JsonProtoSerializer.prototype.fromBlob = function (blob) {
    if (typeof blob === 'string') {
      assert(this.options.useProto3Json, 'Expected bytes to be passed in as Uint8Array, but got a string instead.');
      return Blob.fromBase64String(blob);
    } else {
      assert(!this.options.useProto3Json, 'Expected bytes to be passed in as Uint8Array, but got a string instead.');
      return Blob.fromUint8Array(blob);
    }
  };

  JsonProtoSerializer.prototype.toVersion = function (version) {
    return this.toTimestamp(version.toTimestamp());
  };

  JsonProtoSerializer.prototype.fromVersion = function (version) {
    assert(!!version, "Trying to deserialize version that isn't set");
    return SnapshotVersion.fromTimestamp(this.fromTimestamp(version));
  };

  JsonProtoSerializer.prototype.toResourceName = function (databaseId, path) {
    return this.fullyQualifiedPrefixPath(databaseId).child('documents').child(path).canonicalString();
  };

  JsonProtoSerializer.prototype.fromResourceName = function (name) {
    var resource = ResourcePath.fromString(name);
    assert(this.isValidResourceName(resource), 'Tried to deserialize invalid key ' + resource.toString());
    return resource;
  };

  JsonProtoSerializer.prototype.toName = function (key) {
    return this.toResourceName(this.databaseId, key.path);
  };

  JsonProtoSerializer.prototype.fromName = function (name) {
    var resource = this.fromResourceName(name);
    assert(resource.get(1) === this.databaseId.projectId, 'Tried to deserialize key from different project: ' + resource.get(1) + ' vs ' + this.databaseId.projectId);
    assert(!resource.get(3) && !this.databaseId.database || resource.get(3) === this.databaseId.database, 'Tried to deserialize key from different database: ' + resource.get(3) + ' vs ' + this.databaseId.database);
    return new DocumentKey(this.extractLocalPathFromResourceName(resource));
  };

  JsonProtoSerializer.prototype.toQueryPath = function (path) {
    return this.toResourceName(this.databaseId, path);
  };

  JsonProtoSerializer.prototype.fromQueryPath = function (name) {
    var resourceName = this.fromResourceName(name); // In v1beta1 queries for collections at the root did not have a trailing
    // "/documents". In v1 all resource paths contain "/documents". Preserve the
    // ability to read the v1beta1 form for compatibility with queries persisted
    // in the local query cache.

    if (resourceName.length === 4) {
      return ResourcePath.EMPTY_PATH;
    }

    return this.extractLocalPathFromResourceName(resourceName);
  };

  Object.defineProperty(JsonProtoSerializer.prototype, "encodedDatabaseId", {
    get: function () {
      var path = new ResourcePath(['projects', this.databaseId.projectId, 'databases', this.databaseId.database]);
      return path.canonicalString();
    },
    enumerable: true,
    configurable: true
  });

  JsonProtoSerializer.prototype.fullyQualifiedPrefixPath = function (databaseId) {
    return new ResourcePath(['projects', databaseId.projectId, 'databases', databaseId.database]);
  };

  JsonProtoSerializer.prototype.extractLocalPathFromResourceName = function (resourceName) {
    assert(resourceName.length > 4 && resourceName.get(4) === 'documents', 'tried to deserialize invalid key ' + resourceName.toString());
    return resourceName.popFirst(5);
  };

  JsonProtoSerializer.prototype.isValidResourceName = function (path) {
    // Resource names have at least 4 components (project ID, database ID)
    return path.length >= 4 && path.get(0) === 'projects' && path.get(2) === 'databases';
  };

  JsonProtoSerializer.prototype.toValue = function (val) {
    if (val instanceof NullValue) {
      return {
        nullValue: 'NULL_VALUE'
      };
    } else if (val instanceof BooleanValue) {
      return {
        booleanValue: val.value()
      };
    } else if (val instanceof IntegerValue) {
      return {
        integerValue: '' + val.value()
      };
    } else if (val instanceof DoubleValue) {
      var doubleValue = val.value();

      if (this.options.useProto3Json) {
        // Proto 3 let's us encode NaN and Infinity as string values as
        // expected by the backend. This is currently not checked by our unit
        // tests because they rely on protobuf.js.
        if (isNaN(doubleValue)) {
          return {
            doubleValue: 'NaN'
          };
        } else if (doubleValue === Infinity) {
          return {
            doubleValue: 'Infinity'
          };
        } else if (doubleValue === -Infinity) {
          return {
            doubleValue: '-Infinity'
          };
        }
      }

      return {
        doubleValue: val.value()
      };
    } else if (val instanceof StringValue) {
      return {
        stringValue: val.value()
      };
    } else if (val instanceof ObjectValue) {
      return {
        mapValue: this.toMapValue(val)
      };
    } else if (val instanceof ArrayValue) {
      return {
        arrayValue: this.toArrayValue(val)
      };
    } else if (val instanceof TimestampValue) {
      return {
        timestampValue: this.toTimestamp(val.internalValue)
      };
    } else if (val instanceof GeoPointValue) {
      return {
        geoPointValue: {
          latitude: val.value().latitude,
          longitude: val.value().longitude
        }
      };
    } else if (val instanceof BlobValue) {
      return {
        bytesValue: this.toBytes(val.value())
      };
    } else if (val instanceof RefValue) {
      return {
        referenceValue: this.toResourceName(val.databaseId, val.key.path)
      };
    } else {
      return fail('Unknown FieldValue ' + JSON.stringify(val));
    }
  };

  JsonProtoSerializer.prototype.fromValue = function (obj) {
    var _this = this;

    if ('nullValue' in obj) {
      return NullValue.INSTANCE;
    } else if ('booleanValue' in obj) {
      return BooleanValue.of(obj.booleanValue);
    } else if ('integerValue' in obj) {
      return new IntegerValue(parseInt64(obj.integerValue));
    } else if ('doubleValue' in obj) {
      if (this.options.useProto3Json) {
        // Proto 3 uses the string values 'NaN' and 'Infinity'.
        if (obj.doubleValue === 'NaN') {
          return DoubleValue.NAN;
        } else if (obj.doubleValue === 'Infinity') {
          return DoubleValue.POSITIVE_INFINITY;
        } else if (obj.doubleValue === '-Infinity') {
          return DoubleValue.NEGATIVE_INFINITY;
        }
      }

      return new DoubleValue(obj.doubleValue);
    } else if ('stringValue' in obj) {
      return new StringValue(obj.stringValue);
    } else if ('mapValue' in obj) {
      return this.fromFields(obj.mapValue.fields || {});
    } else if ('arrayValue' in obj) {
      // "values" is not present if the array is empty
      assertPresent(obj.arrayValue, 'arrayValue');
      var values = obj.arrayValue.values || [];
      return new ArrayValue(values.map(function (v) {
        return _this.fromValue(v);
      }));
    } else if ('timestampValue' in obj) {
      assertPresent(obj.timestampValue, 'timestampValue');
      return new TimestampValue(this.fromTimestamp(obj.timestampValue));
    } else if ('geoPointValue' in obj) {
      assertPresent(obj.geoPointValue, 'geoPointValue');
      var latitude = obj.geoPointValue.latitude || 0;
      var longitude = obj.geoPointValue.longitude || 0;
      return new GeoPointValue(new GeoPoint(latitude, longitude));
    } else if ('bytesValue' in obj) {
      assertPresent(obj.bytesValue, 'bytesValue');
      var blob = this.fromBlob(obj.bytesValue);
      return new BlobValue(blob);
    } else if ('referenceValue' in obj) {
      assertPresent(obj.referenceValue, 'referenceValue');
      var resourceName = this.fromResourceName(obj.referenceValue);
      var dbId = new DatabaseId(resourceName.get(1), resourceName.get(3));
      var key = new DocumentKey(this.extractLocalPathFromResourceName(resourceName));
      return new RefValue(dbId, key);
    } else {
      return fail('Unknown Value proto ' + JSON.stringify(obj));
    }
  };
  /** Creates an api.Document from key and fields (but no create/update time) */


  JsonProtoSerializer.prototype.toMutationDocument = function (key, fields) {
    return {
      name: this.toName(key),
      fields: this.toFields(fields)
    };
  };

  JsonProtoSerializer.prototype.toDocument = function (document) {
    assert(!document.hasLocalMutations, "Can't serialize documents with mutations.");
    return {
      name: this.toName(document.key),
      fields: this.toFields(document.data),
      updateTime: this.toTimestamp(document.version.toTimestamp())
    };
  };

  JsonProtoSerializer.prototype.fromDocument = function (document, hasCommittedMutations) {
    return new Document(this.fromName(document.name), this.fromVersion(document.updateTime), this.fromFields(document.fields || {}), {
      hasCommittedMutations: !!hasCommittedMutations
    });
  };

  JsonProtoSerializer.prototype.toFields = function (fields) {
    var _this = this;

    var result = {};
    fields.forEach(function (key, value) {
      result[key] = _this.toValue(value);
    });
    return result;
  };

  JsonProtoSerializer.prototype.fromFields = function (object) {
    var _this = this; // Proto map<string, Value> gets mapped to Object, so cast it.


    var map = object;
    var result = ObjectValue.EMPTY;
    forEach(map, function (key, value) {
      result = result.set(new FieldPath([key]), _this.fromValue(value));
    });
    return result;
  };

  JsonProtoSerializer.prototype.toMapValue = function (map) {
    return {
      fields: this.toFields(map)
    };
  };

  JsonProtoSerializer.prototype.toArrayValue = function (array) {
    var _this = this;

    var result = [];
    array.forEach(function (value) {
      result.push(_this.toValue(value));
    });
    return {
      values: result
    };
  };

  JsonProtoSerializer.prototype.fromFound = function (doc) {
    assert(!!doc.found, 'Tried to deserialize a found document from a missing document.');
    assertPresent(doc.found.name, 'doc.found.name');
    assertPresent(doc.found.updateTime, 'doc.found.updateTime');
    var key = this.fromName(doc.found.name);
    var version = this.fromVersion(doc.found.updateTime);
    var fields = this.fromFields(doc.found.fields || {});
    return new Document(key, version, fields, {}, doc.found);
  };

  JsonProtoSerializer.prototype.fromMissing = function (result) {
    assert(!!result.missing, 'Tried to deserialize a missing document from a found document.');
    assert(!!result.readTime, 'Tried to deserialize a missing document without a read time.');
    var key = this.fromName(result.missing);
    var version = this.fromVersion(result.readTime);
    return new NoDocument(key, version);
  };

  JsonProtoSerializer.prototype.fromMaybeDocument = function (result) {
    if ('found' in result) {
      return this.fromFound(result);
    } else if ('missing' in result) {
      return this.fromMissing(result);
    }

    return fail('invalid batch get response: ' + JSON.stringify(result));
  };

  JsonProtoSerializer.prototype.toWatchTargetChangeState = function (state) {
    switch (state) {
      case WatchTargetChangeState.Added:
        return 'ADD';

      case WatchTargetChangeState.Current:
        return 'CURRENT';

      case WatchTargetChangeState.NoChange:
        return 'NO_CHANGE';

      case WatchTargetChangeState.Removed:
        return 'REMOVE';

      case WatchTargetChangeState.Reset:
        return 'RESET';

      default:
        return fail('Unknown WatchTargetChangeState: ' + state);
    }
  };

  JsonProtoSerializer.prototype.toTestWatchChange = function (watchChange) {
    if (watchChange instanceof ExistenceFilterChange) {
      return {
        filter: {
          count: watchChange.existenceFilter.count,
          targetId: watchChange.targetId
        }
      };
    }

    if (watchChange instanceof DocumentWatchChange) {
      if (watchChange.newDoc instanceof Document) {
        var doc = watchChange.newDoc;
        return {
          documentChange: {
            document: {
              name: this.toName(doc.key),
              fields: this.toFields(doc.data),
              updateTime: this.toVersion(doc.version)
            },
            targetIds: watchChange.updatedTargetIds,
            removedTargetIds: watchChange.removedTargetIds
          }
        };
      } else if (watchChange.newDoc instanceof NoDocument) {
        var doc = watchChange.newDoc;
        return {
          documentDelete: {
            document: this.toName(doc.key),
            readTime: this.toVersion(doc.version),
            removedTargetIds: watchChange.removedTargetIds
          }
        };
      } else if (watchChange.newDoc === null) {
        return {
          documentRemove: {
            document: this.toName(watchChange.key),
            removedTargetIds: watchChange.removedTargetIds
          }
        };
      }
    }

    if (watchChange instanceof WatchTargetChange) {
      var cause = undefined;

      if (watchChange.cause) {
        cause = {
          code: mapRpcCodeFromCode(watchChange.cause.code),
          message: watchChange.cause.message
        };
      }

      return {
        targetChange: {
          targetChangeType: this.toWatchTargetChangeState(watchChange.state),
          targetIds: watchChange.targetIds,
          resumeToken: this.unsafeCastProtoByteString(watchChange.resumeToken),
          cause: cause
        }
      };
    }

    return fail('Unrecognized watch change: ' + JSON.stringify(watchChange));
  };

  JsonProtoSerializer.prototype.fromWatchChange = function (change) {
    var watchChange;

    if ('targetChange' in change) {
      assertPresent(change.targetChange, 'targetChange'); // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'
      // if unset

      var state = this.fromWatchTargetChangeState(change.targetChange.targetChangeType || 'NO_CHANGE');
      var targetIds = change.targetChange.targetIds || [];
      var resumeToken = change.targetChange.resumeToken || this.emptyByteString();
      var causeProto = change.targetChange.cause;
      var cause = causeProto && this.fromRpcStatus(causeProto);
      watchChange = new WatchTargetChange(state, targetIds, resumeToken, cause || null);
    } else if ('documentChange' in change) {
      assertPresent(change.documentChange, 'documentChange');
      assertPresent(change.documentChange.document, 'documentChange.name');
      assertPresent(change.documentChange.document.name, 'documentChange.document.name');
      assertPresent(change.documentChange.document.updateTime, 'documentChange.document.updateTime');
      var entityChange = change.documentChange;
      var key = this.fromName(entityChange.document.name);
      var version = this.fromVersion(entityChange.document.updateTime);
      var fields = this.fromFields(entityChange.document.fields || {}); // The document may soon be re-serialized back to protos in order to store it in local
      // persistence. Memoize the encoded form to avoid encoding it again.

      var doc = new Document(key, version, fields, {}, entityChange.document);
      var updatedTargetIds = entityChange.targetIds || [];
      var removedTargetIds = entityChange.removedTargetIds || [];
      watchChange = new DocumentWatchChange(updatedTargetIds, removedTargetIds, doc.key, doc);
    } else if ('documentDelete' in change) {
      assertPresent(change.documentDelete, 'documentDelete');
      assertPresent(change.documentDelete.document, 'documentDelete.document');
      var docDelete = change.documentDelete;
      var key = this.fromName(docDelete.document);
      var version = docDelete.readTime ? this.fromVersion(docDelete.readTime) : SnapshotVersion.forDeletedDoc();
      var doc = new NoDocument(key, version);
      var removedTargetIds = docDelete.removedTargetIds || [];
      watchChange = new DocumentWatchChange([], removedTargetIds, doc.key, doc);
    } else if ('documentRemove' in change) {
      assertPresent(change.documentRemove, 'documentRemove');
      assertPresent(change.documentRemove.document, 'documentRemove');
      var docRemove = change.documentRemove;
      var key = this.fromName(docRemove.document);
      var removedTargetIds = docRemove.removedTargetIds || [];
      watchChange = new DocumentWatchChange([], removedTargetIds, key, null);
    } else if ('filter' in change) {
      // TODO(dimond): implement existence filter parsing with strategy.
      assertPresent(change.filter, 'filter');
      assertPresent(change.filter.targetId, 'filter.targetId');
      var filter = change.filter;
      var count = filter.count || 0;
      var existenceFilter = new ExistenceFilter(count);
      var targetId = filter.targetId;
      watchChange = new ExistenceFilterChange(targetId, existenceFilter);
    } else {
      return fail('Unknown change type ' + JSON.stringify(change));
    }

    return watchChange;
  };

  JsonProtoSerializer.prototype.fromWatchTargetChangeState = function (state) {
    if (state === 'NO_CHANGE') {
      return WatchTargetChangeState.NoChange;
    } else if (state === 'ADD') {
      return WatchTargetChangeState.Added;
    } else if (state === 'REMOVE') {
      return WatchTargetChangeState.Removed;
    } else if (state === 'CURRENT') {
      return WatchTargetChangeState.Current;
    } else if (state === 'RESET') {
      return WatchTargetChangeState.Reset;
    } else {
      return fail('Got unexpected TargetChange.state: ' + state);
    }
  };

  JsonProtoSerializer.prototype.versionFromListenResponse = function (change) {
    // We have only reached a consistent snapshot for the entire stream if there
    // is a read_time set and it applies to all targets (i.e. the list of
    // targets is empty). The backend is guaranteed to send such responses.
    if (!('targetChange' in change)) {
      return SnapshotVersion.MIN;
    }

    var targetChange = change.targetChange;

    if (targetChange.targetIds && targetChange.targetIds.length) {
      return SnapshotVersion.MIN;
    }

    if (!targetChange.readTime) {
      return SnapshotVersion.MIN;
    }

    return this.fromVersion(targetChange.readTime);
  };

  JsonProtoSerializer.prototype.toMutation = function (mutation) {
    var _this = this;

    var result;

    if (mutation instanceof SetMutation) {
      result = {
        update: this.toMutationDocument(mutation.key, mutation.value)
      };
    } else if (mutation instanceof DeleteMutation) {
      result = {
        delete: this.toName(mutation.key)
      };
    } else if (mutation instanceof PatchMutation) {
      result = {
        update: this.toMutationDocument(mutation.key, mutation.data),
        updateMask: this.toDocumentMask(mutation.fieldMask)
      };
    } else if (mutation instanceof TransformMutation) {
      result = {
        transform: {
          document: this.toName(mutation.key),
          fieldTransforms: mutation.fieldTransforms.map(function (transform) {
            return _this.toFieldTransform(transform);
          })
        }
      };
    } else {
      return fail('Unknown mutation type ' + mutation.type);
    }

    if (!mutation.precondition.isNone) {
      result.currentDocument = this.toPrecondition(mutation.precondition);
    }

    return result;
  };

  JsonProtoSerializer.prototype.fromMutation = function (proto) {
    var _this = this;

    var precondition = proto.currentDocument ? this.fromPrecondition(proto.currentDocument) : Precondition.NONE;

    if (proto.update) {
      assertPresent(proto.update.name, 'name');
      var key = this.fromName(proto.update.name);
      var value = this.fromFields(proto.update.fields || {});

      if (proto.updateMask) {
        var fieldMask = this.fromDocumentMask(proto.updateMask);
        return new PatchMutation(key, value, fieldMask, precondition);
      } else {
        return new SetMutation(key, value, precondition);
      }
    } else if (proto.delete) {
      var key = this.fromName(proto.delete);
      return new DeleteMutation(key, precondition);
    } else if (proto.transform) {
      var key = this.fromName(proto.transform.document);
      var fieldTransforms = proto.transform.fieldTransforms.map(function (transform) {
        return _this.fromFieldTransform(transform);
      });
      assert(precondition.exists === true, 'Transforms only support precondition "exists == true"');
      return new TransformMutation(key, fieldTransforms);
    } else {
      return fail('unknown mutation proto: ' + JSON.stringify(proto));
    }
  };

  JsonProtoSerializer.prototype.toPrecondition = function (precondition) {
    assert(!precondition.isNone, "Can't serialize an empty precondition");

    if (precondition.updateTime !== undefined) {
      return {
        updateTime: this.toVersion(precondition.updateTime)
      };
    } else if (precondition.exists !== undefined) {
      return {
        exists: precondition.exists
      };
    } else {
      return fail('Unknown precondition');
    }
  };

  JsonProtoSerializer.prototype.fromPrecondition = function (precondition) {
    if (precondition.updateTime !== undefined) {
      return Precondition.updateTime(this.fromVersion(precondition.updateTime));
    } else if (precondition.exists !== undefined) {
      return Precondition.exists(precondition.exists);
    } else {
      return Precondition.NONE;
    }
  };

  JsonProtoSerializer.prototype.fromWriteResult = function (proto, commitTime) {
    var _this = this; // NOTE: Deletes don't have an updateTime.


    var version = proto.updateTime ? this.fromVersion(proto.updateTime) : this.fromVersion(commitTime);
    var transformResults = null;

    if (proto.transformResults && proto.transformResults.length > 0) {
      transformResults = proto.transformResults.map(function (result) {
        return _this.fromValue(result);
      });
    }

    return new MutationResult(version, transformResults);
  };

  JsonProtoSerializer.prototype.fromWriteResults = function (protos, commitTime) {
    var _this = this;

    if (protos && protos.length > 0) {
      assert(commitTime !== undefined, 'Received a write result without a commit time');
      return protos.map(function (proto) {
        return _this.fromWriteResult(proto, commitTime);
      });
    } else {
      return [];
    }
  };

  JsonProtoSerializer.prototype.toFieldTransform = function (fieldTransform) {
    var _this = this;

    var transform = fieldTransform.transform;

    if (transform instanceof ServerTimestampTransform) {
      return {
        fieldPath: fieldTransform.field.canonicalString(),
        setToServerValue: 'REQUEST_TIME'
      };
    } else if (transform instanceof ArrayUnionTransformOperation) {
      return {
        fieldPath: fieldTransform.field.canonicalString(),
        appendMissingElements: {
          values: transform.elements.map(function (v) {
            return _this.toValue(v);
          })
        }
      };
    } else if (transform instanceof ArrayRemoveTransformOperation) {
      return {
        fieldPath: fieldTransform.field.canonicalString(),
        removeAllFromArray: {
          values: transform.elements.map(function (v) {
            return _this.toValue(v);
          })
        }
      };
    } else if (transform instanceof NumericIncrementTransformOperation) {
      return {
        fieldPath: fieldTransform.field.canonicalString(),
        increment: this.toValue(transform.operand)
      };
    } else {
      throw fail('Unknown transform: ' + fieldTransform.transform);
    }
  };

  JsonProtoSerializer.prototype.fromFieldTransform = function (proto) {
    var _this = this;

    var transform = null;

    if ('setToServerValue' in proto) {
      assert(proto.setToServerValue === 'REQUEST_TIME', 'Unknown server value transform proto: ' + JSON.stringify(proto));
      transform = ServerTimestampTransform.instance;
    } else if ('appendMissingElements' in proto) {
      var values = proto.appendMissingElements.values || [];
      transform = new ArrayUnionTransformOperation(values.map(function (v) {
        return _this.fromValue(v);
      }));
    } else if ('removeAllFromArray' in proto) {
      var values = proto.removeAllFromArray.values || [];
      transform = new ArrayRemoveTransformOperation(values.map(function (v) {
        return _this.fromValue(v);
      }));
    } else if ('increment' in proto) {
      var operand = this.fromValue(proto.increment);
      assert(operand instanceof NumberValue, 'NUMERIC_ADD transform requires a NumberValue');
      transform = new NumericIncrementTransformOperation(operand);
    } else {
      fail('Unknown transform proto: ' + JSON.stringify(proto));
    }

    var fieldPath = FieldPath.fromServerFormat(proto.fieldPath);
    return new FieldTransform(fieldPath, transform);
  };

  JsonProtoSerializer.prototype.toDocumentsTarget = function (query) {
    return {
      documents: [this.toQueryPath(query.path)]
    };
  };

  JsonProtoSerializer.prototype.fromDocumentsTarget = function (documentsTarget) {
    var count = documentsTarget.documents.length;
    assert(count === 1, 'DocumentsTarget contained other than 1 document: ' + count);
    var name = documentsTarget.documents[0];
    return Query.atPath(this.fromQueryPath(name));
  };

  JsonProtoSerializer.prototype.toQueryTarget = function (query) {
    // Dissect the path into parent, collectionId, and optional key filter.
    var result = {
      structuredQuery: {}
    };
    var path = query.path;

    if (query.collectionGroup !== null) {
      assert(path.length % 2 === 0, 'Collection Group queries should be within a document path or root.');
      result.parent = this.toQueryPath(path);
      result.structuredQuery.from = [{
        collectionId: query.collectionGroup,
        allDescendants: true
      }];
    } else {
      assert(path.length % 2 !== 0, 'Document queries with filters are not supported.');
      result.parent = this.toQueryPath(path.popLast());
      result.structuredQuery.from = [{
        collectionId: path.lastSegment()
      }];
    }

    var where = this.toFilter(query.filters);

    if (where) {
      result.structuredQuery.where = where;
    }

    var orderBy = this.toOrder(query.orderBy);

    if (orderBy) {
      result.structuredQuery.orderBy = orderBy;
    }

    var limit = this.toInt32Value(query.limit);

    if (limit !== undefined) {
      result.structuredQuery.limit = limit;
    }

    if (query.startAt) {
      result.structuredQuery.startAt = this.toCursor(query.startAt);
    }

    if (query.endAt) {
      result.structuredQuery.endAt = this.toCursor(query.endAt);
    }

    return result;
  };

  JsonProtoSerializer.prototype.fromQueryTarget = function (target) {
    var path = this.fromQueryPath(target.parent);
    var query = target.structuredQuery;
    var fromCount = query.from ? query.from.length : 0;
    var collectionGroup = null;

    if (fromCount > 0) {
      assert(fromCount === 1, 'StructuredQuery.from with more than one collection is not supported.');
      var from = query.from[0];

      if (from.allDescendants) {
        collectionGroup = from.collectionId;
      } else {
        path = path.child(from.collectionId);
      }
    }

    var filterBy = [];

    if (query.where) {
      filterBy = this.fromFilter(query.where);
    }

    var orderBy = [];

    if (query.orderBy) {
      orderBy = this.fromOrder(query.orderBy);
    }

    var limit = null;

    if (query.limit) {
      limit = this.fromInt32Value(query.limit);
    }

    var startAt = null;

    if (query.startAt) {
      startAt = this.fromCursor(query.startAt);
    }

    var endAt = null;

    if (query.endAt) {
      endAt = this.fromCursor(query.endAt);
    }

    return new Query(path, collectionGroup, orderBy, filterBy, limit, startAt, endAt);
  };

  JsonProtoSerializer.prototype.toListenRequestLabels = function (queryData) {
    var value = this.toLabel(queryData.purpose);

    if (value == null) {
      return null;
    } else {
      return {
        'goog-listen-tags': value
      };
    }
  };

  JsonProtoSerializer.prototype.toLabel = function (purpose) {
    switch (purpose) {
      case QueryPurpose.Listen:
        return null;

      case QueryPurpose.ExistenceFilterMismatch:
        return 'existence-filter-mismatch';

      case QueryPurpose.LimboResolution:
        return 'limbo-document';

      default:
        return fail('Unrecognized query purpose: ' + purpose);
    }
  };

  JsonProtoSerializer.prototype.toTarget = function (queryData) {
    var result;
    var query = queryData.query;

    if (query.isDocumentQuery()) {
      result = {
        documents: this.toDocumentsTarget(query)
      };
    } else {
      result = {
        query: this.toQueryTarget(query)
      };
    }

    result.targetId = queryData.targetId;

    if (queryData.resumeToken.length > 0) {
      result.resumeToken = this.unsafeCastProtoByteString(queryData.resumeToken);
    }

    return result;
  };

  JsonProtoSerializer.prototype.toFilter = function (filters) {
    var _this = this;

    if (filters.length === 0) return;
    var protos = filters.map(function (filter) {
      return filter instanceof RelationFilter ? _this.toRelationFilter(filter) : _this.toUnaryFilter(filter);
    });

    if (protos.length === 1) {
      return protos[0];
    }

    return {
      compositeFilter: {
        op: 'AND',
        filters: protos
      }
    };
  };

  JsonProtoSerializer.prototype.fromFilter = function (filter) {
    var _this = this;

    if (!filter) {
      return [];
    } else if (filter.unaryFilter !== undefined) {
      return [this.fromUnaryFilter(filter)];
    } else if (filter.fieldFilter !== undefined) {
      return [this.fromRelationFilter(filter)];
    } else if (filter.compositeFilter !== undefined) {
      return filter.compositeFilter.filters.map(function (f) {
        return _this.fromFilter(f);
      }).reduce(function (accum, current) {
        return accum.concat(current);
      });
    } else {
      return fail('Unknown filter: ' + JSON.stringify(filter));
    }
  };

  JsonProtoSerializer.prototype.toOrder = function (orderBys) {
    var _this = this;

    if (orderBys.length === 0) return;
    return orderBys.map(function (order) {
      return _this.toPropertyOrder(order);
    });
  };

  JsonProtoSerializer.prototype.fromOrder = function (orderBys) {
    var _this = this;

    return orderBys.map(function (order) {
      return _this.fromPropertyOrder(order);
    });
  };

  JsonProtoSerializer.prototype.toCursor = function (cursor) {
    var _this = this;

    return {
      before: cursor.before,
      values: cursor.position.map(function (component) {
        return _this.toValue(component);
      })
    };
  };

  JsonProtoSerializer.prototype.fromCursor = function (cursor) {
    var _this = this;

    var before = !!cursor.before;
    var position = cursor.values.map(function (component) {
      return _this.fromValue(component);
    });
    return new Bound(position, before);
  }; // visible for testing


  JsonProtoSerializer.prototype.toDirection = function (dir) {
    return DIRECTIONS[dir.name];
  }; // visible for testing


  JsonProtoSerializer.prototype.fromDirection = function (dir) {
    switch (dir) {
      case 'ASCENDING':
        return Direction.ASCENDING;

      case 'DESCENDING':
        return Direction.DESCENDING;

      default:
        return undefined;
    }
  }; // visible for testing


  JsonProtoSerializer.prototype.toOperatorName = function (op) {
    return OPERATORS[op.name];
  };

  JsonProtoSerializer.prototype.fromOperatorName = function (op) {
    switch (op) {
      case 'EQUAL':
        return RelationOp.EQUAL;

      case 'GREATER_THAN':
        return RelationOp.GREATER_THAN;

      case 'GREATER_THAN_OR_EQUAL':
        return RelationOp.GREATER_THAN_OR_EQUAL;

      case 'LESS_THAN':
        return RelationOp.LESS_THAN;

      case 'LESS_THAN_OR_EQUAL':
        return RelationOp.LESS_THAN_OR_EQUAL;

      case 'ARRAY_CONTAINS':
        return RelationOp.ARRAY_CONTAINS;

      case 'IN':
        return RelationOp.IN;

      case 'ARRAY_CONTAINS_ANY':
        return RelationOp.ARRAY_CONTAINS_ANY;

      case 'OPERATOR_UNSPECIFIED':
        return fail('Unspecified relation');

      default:
        return fail('Unknown relation');
    }
  };

  JsonProtoSerializer.prototype.toFieldPathReference = function (path) {
    return {
      fieldPath: path.canonicalString()
    };
  };

  JsonProtoSerializer.prototype.fromFieldPathReference = function (fieldReference) {
    return FieldPath.fromServerFormat(fieldReference.fieldPath);
  }; // visible for testing


  JsonProtoSerializer.prototype.toPropertyOrder = function (orderBy) {
    return {
      field: this.toFieldPathReference(orderBy.field),
      direction: this.toDirection(orderBy.dir)
    };
  };

  JsonProtoSerializer.prototype.fromPropertyOrder = function (orderBy) {
    return new OrderBy(this.fromFieldPathReference(orderBy.field), this.fromDirection(orderBy.direction));
  }; // visible for testing


  JsonProtoSerializer.prototype.toRelationFilter = function (filter) {
    if (filter instanceof RelationFilter) {
      return {
        fieldFilter: {
          field: this.toFieldPathReference(filter.field),
          op: this.toOperatorName(filter.op),
          value: this.toValue(filter.value)
        }
      };
    } else {
      return fail('Unrecognized filter: ' + JSON.stringify(filter));
    }
  };

  JsonProtoSerializer.prototype.fromRelationFilter = function (filter) {
    return new RelationFilter(this.fromFieldPathReference(filter.fieldFilter.field), this.fromOperatorName(filter.fieldFilter.op), this.fromValue(filter.fieldFilter.value));
  }; // visible for testing


  JsonProtoSerializer.prototype.toUnaryFilter = function (filter) {
    if (filter instanceof NanFilter) {
      return {
        unaryFilter: {
          field: this.toFieldPathReference(filter.field),
          op: 'IS_NAN'
        }
      };
    } else if (filter instanceof NullFilter) {
      return {
        unaryFilter: {
          field: this.toFieldPathReference(filter.field),
          op: 'IS_NULL'
        }
      };
    } else {
      return fail('Unrecognized filter: ' + JSON.stringify(filter));
    }
  };

  JsonProtoSerializer.prototype.fromUnaryFilter = function (filter) {
    switch (filter.unaryFilter.op) {
      case 'IS_NAN':
        var nanField = this.fromFieldPathReference(filter.unaryFilter.field);
        return new NanFilter(nanField);

      case 'IS_NULL':
        var nullField = this.fromFieldPathReference(filter.unaryFilter.field);
        return new NullFilter(nullField);

      case 'OPERATOR_UNSPECIFIED':
        return fail('Unspecified filter');

      default:
        return fail('Unknown filter');
    }
  };

  JsonProtoSerializer.prototype.toDocumentMask = function (fieldMask) {
    var canonicalFields = [];
    fieldMask.fields.forEach(function (field) {
      return canonicalFields.push(field.canonicalString());
    });
    return {
      fieldPaths: canonicalFields
    };
  };

  JsonProtoSerializer.prototype.fromDocumentMask = function (proto) {
    var paths = proto.fieldPaths || [];
    var fields = paths.map(function (path) {
      return FieldPath.fromServerFormat(path);
    });
    return FieldMask.fromArray(fields);
  };

  return JsonProtoSerializer;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Holds the listeners and the last received ViewSnapshot for a query being
 * tracked by EventManager.
 */


var QueryListenersInfo =
/** @class */
function () {
  function QueryListenersInfo() {
    this.listeners = [];
  }

  return QueryListenersInfo;
}();
/**
 * EventManager is responsible for mapping queries to query event emitters.
 * It handles "fan-out". -- Identical queries will re-use the same watch on the
 * backend.
 */


var EventManager =
/** @class */
function () {
  function EventManager(syncEngine) {
    this.syncEngine = syncEngine;
    this.queries = new ObjectMap(function (q) {
      return q.canonicalId();
    });
    this.onlineState = OnlineState.Unknown;
    this.syncEngine.subscribe(this);
  }

  EventManager.prototype.listen = function (listener) {
    var query = listener.query;
    var firstListen = false;
    var queryInfo = this.queries.get(query);

    if (!queryInfo) {
      firstListen = true;
      queryInfo = new QueryListenersInfo();
      this.queries.set(query, queryInfo);
    }

    queryInfo.listeners.push(listener);
    listener.applyOnlineStateChange(this.onlineState);
    if (queryInfo.viewSnap) listener.onViewSnapshot(queryInfo.viewSnap);

    if (firstListen) {
      return this.syncEngine.listen(query).then(function (targetId) {
        queryInfo.targetId = targetId;
        return targetId;
      });
    } else {
      return Promise.resolve(queryInfo.targetId);
    }
  };

  EventManager.prototype.unlisten = function (listener) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var query, lastListen, queryInfo, i;
      return tslib_1.__generator(this, function (_a) {
        query = listener.query;
        lastListen = false;
        queryInfo = this.queries.get(query);

        if (queryInfo) {
          i = queryInfo.listeners.indexOf(listener);

          if (i >= 0) {
            queryInfo.listeners.splice(i, 1);
            lastListen = queryInfo.listeners.length === 0;
          }
        }

        if (lastListen) {
          this.queries.delete(query);
          return [2
          /*return*/
          , this.syncEngine.unlisten(query)];
        }

        return [2
        /*return*/
        ];
      });
    });
  };

  EventManager.prototype.onWatchChange = function (viewSnaps) {
    for (var _i = 0, viewSnaps_1 = viewSnaps; _i < viewSnaps_1.length; _i++) {
      var viewSnap = viewSnaps_1[_i];
      var query = viewSnap.query;
      var queryInfo = this.queries.get(query);

      if (queryInfo) {
        for (var _a = 0, _b = queryInfo.listeners; _a < _b.length; _a++) {
          var listener = _b[_a];
          listener.onViewSnapshot(viewSnap);
        }

        queryInfo.viewSnap = viewSnap;
      }
    }
  };

  EventManager.prototype.onWatchError = function (query, error) {
    var queryInfo = this.queries.get(query);

    if (queryInfo) {
      for (var _i = 0, _a = queryInfo.listeners; _i < _a.length; _i++) {
        var listener = _a[_i];
        listener.onError(error);
      }
    } // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()
    // after an error.


    this.queries.delete(query);
  };

  EventManager.prototype.onOnlineStateChange = function (onlineState) {
    this.onlineState = onlineState;
    this.queries.forEach(function (_, queryInfo) {
      for (var _i = 0, _a = queryInfo.listeners; _i < _a.length; _i++) {
        var listener = _a[_i];
        listener.applyOnlineStateChange(onlineState);
      }
    });
  };

  return EventManager;
}();
/**
 * QueryListener takes a series of internal view snapshots and determines
 * when to raise the event.
 *
 * It uses an Observer to dispatch events.
 */


var QueryListener =
/** @class */
function () {
  function QueryListener(query, queryObserver, options) {
    this.query = query;
    this.queryObserver = queryObserver;
    /**
     * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
     * observer. This flag is set to true once we've actually raised an event.
     */

    this.raisedInitialEvent = false;
    this.onlineState = OnlineState.Unknown;
    this.options = options || {};
  }

  QueryListener.prototype.onViewSnapshot = function (snap) {
    assert(snap.docChanges.length > 0 || snap.syncStateChanged, 'We got a new snapshot with no changes?');

    if (!this.options.includeMetadataChanges) {
      // Remove the metadata only changes.
      var docChanges = [];

      for (var _i = 0, _a = snap.docChanges; _i < _a.length; _i++) {
        var docChange = _a[_i];

        if (docChange.type !== ChangeType.Metadata) {
          docChanges.push(docChange);
        }
      }

      snap = new ViewSnapshot(snap.query, snap.docs, snap.oldDocs, docChanges, snap.mutatedKeys, snap.fromCache, snap.syncStateChanged,
      /* excludesMetadataChanges= */
      true);
    }

    if (!this.raisedInitialEvent) {
      if (this.shouldRaiseInitialEvent(snap, this.onlineState)) {
        this.raiseInitialEvent(snap);
      }
    } else if (this.shouldRaiseEvent(snap)) {
      this.queryObserver.next(snap);
    }

    this.snap = snap;
  };

  QueryListener.prototype.onError = function (error) {
    this.queryObserver.error(error);
  };

  QueryListener.prototype.applyOnlineStateChange = function (onlineState) {
    this.onlineState = onlineState;

    if (this.snap && !this.raisedInitialEvent && this.shouldRaiseInitialEvent(this.snap, onlineState)) {
      this.raiseInitialEvent(this.snap);
    }
  };

  QueryListener.prototype.shouldRaiseInitialEvent = function (snap, onlineState) {
    assert(!this.raisedInitialEvent, 'Determining whether to raise first event but already had first event'); // Always raise the first event when we're synced

    if (!snap.fromCache) {
      return true;
    } // NOTE: We consider OnlineState.Unknown as online (it should become Offline
    // or Online if we wait long enough).


    var maybeOnline = onlineState !== OnlineState.Offline; // Don't raise the event if we're online, aren't synced yet (checked
    // above) and are waiting for a sync.

    if (this.options.waitForSyncWhenOnline && maybeOnline) {
      assert(snap.fromCache, 'Waiting for sync, but snapshot is not from cache');
      return false;
    } // Raise data from cache if we have any documents or we are offline


    return !snap.docs.isEmpty() || onlineState === OnlineState.Offline;
  };

  QueryListener.prototype.shouldRaiseEvent = function (snap) {
    // We don't need to handle includeDocumentMetadataChanges here because
    // the Metadata only changes have already been stripped out if needed.
    // At this point the only changes we will see are the ones we should
    // propagate.
    if (snap.docChanges.length > 0) {
      return true;
    }

    var hasPendingWritesChanged = this.snap && this.snap.hasPendingWrites !== snap.hasPendingWrites;

    if (snap.syncStateChanged || hasPendingWritesChanged) {
      return this.options.includeMetadataChanges === true;
    } // Generally we should have hit one of the cases above, but it's possible
    // to get here if there were only metadata docChanges and they got
    // stripped out.


    return false;
  };

  QueryListener.prototype.raiseInitialEvent = function (snap) {
    assert(!this.raisedInitialEvent, 'Trying to raise initial events for second time');
    snap = ViewSnapshot.fromInitialDocuments(snap.query, snap.docs, snap.mutatedKeys, snap.fromCache);
    this.raisedInitialEvent = true;
    this.queryObserver.next(snap);
  };

  return QueryListener;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A set of changes to what documents are currently in view and out of view for
 * a given query. These changes are sent to the LocalStore by the View (via
 * the SyncEngine) and are used to pin / unpin documents as appropriate.
 */


var LocalViewChanges =
/** @class */
function () {
  function LocalViewChanges(targetId, addedKeys, removedKeys) {
    this.targetId = targetId;
    this.addedKeys = addedKeys;
    this.removedKeys = removedKeys;
  }

  LocalViewChanges.fromSnapshot = function (targetId, viewSnapshot) {
    var addedKeys = documentKeySet();
    var removedKeys = documentKeySet();

    for (var _i = 0, _a = viewSnapshot.docChanges; _i < _a.length; _i++) {
      var docChange = _a[_i];

      switch (docChange.type) {
        case ChangeType.Added:
          addedKeys = addedKeys.add(docChange.doc.key);
          break;

        case ChangeType.Removed:
          removedKeys = removedKeys.add(docChange.doc.key);
          break;

        default: // do nothing

      }
    }

    return new LocalViewChanges(targetId, addedKeys, removedKeys);
  };

  return LocalViewChanges;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var AddedLimboDocument =
/** @class */
function () {
  function AddedLimboDocument(key) {
    this.key = key;
  }

  return AddedLimboDocument;
}();

var RemovedLimboDocument =
/** @class */
function () {
  function RemovedLimboDocument(key) {
    this.key = key;
  }

  return RemovedLimboDocument;
}();
/**
 * View is responsible for computing the final merged truth of what docs are in
 * a query. It gets notified of local and remote changes to docs, and applies
 * the query filters and limits to determine the most correct possible results.
 */


var View =
/** @class */
function () {
  function View(query,
  /** Documents included in the remote target */
  _syncedDocuments) {
    this.query = query;
    this._syncedDocuments = _syncedDocuments;
    this.syncState = null;
    /**
     * A flag whether the view is current with the backend. A view is considered
     * current after it has seen the current flag from the backend and did not
     * lose consistency within the watch stream (e.g. because of an existence
     * filter mismatch).
     */

    this.current = false;
    /** Documents in the view but not in the remote target */

    this.limboDocuments = documentKeySet();
    /** Document Keys that have local changes */

    this.mutatedKeys = documentKeySet();
    this.documentSet = new DocumentSet(query.docComparator.bind(query));
  }

  Object.defineProperty(View.prototype, "syncedDocuments", {
    /**
     * The set of remote documents that the server has told us belongs to the target associated with
     * this view.
     */
    get: function () {
      return this._syncedDocuments;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Iterates over a set of doc changes, applies the query limit, and computes
   * what the new results should be, what the changes were, and whether we may
   * need to go back to the local cache for more results. Does not make any
   * changes to the view.
   * @param docChanges The doc changes to apply to this view.
   * @param previousChanges If this is being called with a refill, then start
   *        with this set of docs and changes instead of the current view.
   * @return a new set of docs, changes, and refill flag.
   */

  View.prototype.computeDocChanges = function (docChanges, previousChanges) {
    var _this = this;

    var changeSet = previousChanges ? previousChanges.changeSet : new DocumentChangeSet();
    var oldDocumentSet = previousChanges ? previousChanges.documentSet : this.documentSet;
    var newMutatedKeys = previousChanges ? previousChanges.mutatedKeys : this.mutatedKeys;
    var newDocumentSet = oldDocumentSet;
    var needsRefill = false; // Track the last doc in a (full) limit. This is necessary, because some
    // update (a delete, or an update moving a doc past the old limit) might
    // mean there is some other document in the local cache that either should
    // come (1) between the old last limit doc and the new last document, in the
    // case of updates, or (2) after the new last document, in the case of
    // deletes. So we keep this doc at the old limit to compare the updates to.
    //
    // Note that this should never get used in a refill (when previousChanges is
    // set), because there will only be adds -- no deletes or updates.

    var lastDocInLimit = this.query.hasLimit() && oldDocumentSet.size === this.query.limit ? oldDocumentSet.last() : null;
    docChanges.inorderTraversal(function (key, newMaybeDoc) {
      var oldDoc = oldDocumentSet.get(key);
      var newDoc = newMaybeDoc instanceof Document ? newMaybeDoc : null;

      if (newDoc) {
        assert(key.isEqual(newDoc.key), 'Mismatching keys found in document changes: ' + key + ' != ' + newDoc.key);
        newDoc = _this.query.matches(newDoc) ? newDoc : null;
      }

      var oldDocHadPendingMutations = oldDoc ? _this.mutatedKeys.has(oldDoc.key) : false;
      var newDocHasPendingMutations = newDoc ? newDoc.hasLocalMutations || // We only consider committed mutations for documents that were
      // mutated during the lifetime of the view.
      _this.mutatedKeys.has(newDoc.key) && newDoc.hasCommittedMutations : false;
      var changeApplied = false; // Calculate change

      if (oldDoc && newDoc) {
        var docsEqual = oldDoc.data.isEqual(newDoc.data);

        if (!docsEqual) {
          if (!_this.shouldWaitForSyncedDocument(oldDoc, newDoc)) {
            changeSet.track({
              type: ChangeType.Modified,
              doc: newDoc
            });
            changeApplied = true;

            if (lastDocInLimit && _this.query.docComparator(newDoc, lastDocInLimit) > 0) {
              // This doc moved from inside the limit to after the limit.
              // That means there may be some doc in the local cache that's
              // actually less than this one.
              needsRefill = true;
            }
          }
        } else if (oldDocHadPendingMutations !== newDocHasPendingMutations) {
          changeSet.track({
            type: ChangeType.Metadata,
            doc: newDoc
          });
          changeApplied = true;
        }
      } else if (!oldDoc && newDoc) {
        changeSet.track({
          type: ChangeType.Added,
          doc: newDoc
        });
        changeApplied = true;
      } else if (oldDoc && !newDoc) {
        changeSet.track({
          type: ChangeType.Removed,
          doc: oldDoc
        });
        changeApplied = true;

        if (lastDocInLimit) {
          // A doc was removed from a full limit query. We'll need to
          // requery from the local cache to see if we know about some other
          // doc that should be in the results.
          needsRefill = true;
        }
      }

      if (changeApplied) {
        if (newDoc) {
          newDocumentSet = newDocumentSet.add(newDoc);

          if (newDocHasPendingMutations) {
            newMutatedKeys = newMutatedKeys.add(key);
          } else {
            newMutatedKeys = newMutatedKeys.delete(key);
          }
        } else {
          newDocumentSet = newDocumentSet.delete(key);
          newMutatedKeys = newMutatedKeys.delete(key);
        }
      }
    });

    if (this.query.hasLimit()) {
      while (newDocumentSet.size > this.query.limit) {
        var oldDoc = newDocumentSet.last();
        newDocumentSet = newDocumentSet.delete(oldDoc.key);
        newMutatedKeys = newMutatedKeys.delete(oldDoc.key);
        changeSet.track({
          type: ChangeType.Removed,
          doc: oldDoc
        });
      }
    }

    assert(!needsRefill || !previousChanges, 'View was refilled using docs that themselves needed refilling.');
    return {
      documentSet: newDocumentSet,
      changeSet: changeSet,
      needsRefill: needsRefill,
      mutatedKeys: newMutatedKeys
    };
  };

  View.prototype.shouldWaitForSyncedDocument = function (oldDoc, newDoc) {
    // We suppress the initial change event for documents that were modified as
    // part of a write acknowledgment (e.g. when the value of a server transform
    // is applied) as Watch will send us the same document again.
    // By suppressing the event, we only raise two user visible events (one with
    // `hasPendingWrites` and the final state of the document) instead of three
    // (one with `hasPendingWrites`, the modified document with
    // `hasPendingWrites` and the final state of the document).
    return oldDoc.hasLocalMutations && newDoc.hasCommittedMutations && !newDoc.hasLocalMutations;
  };
  /**
   * Updates the view with the given ViewDocumentChanges and optionally updates
   * limbo docs and sync state from the provided target change.
   * @param docChanges The set of changes to make to the view's docs.
   * @param updateLimboDocuments Whether to update limbo documents based on this
   *        change.
   * @param targetChange A target change to apply for computing limbo docs and
   *        sync state.
   * @return A new ViewChange with the given docs, changes, and sync state.
   */
  // PORTING NOTE: The iOS/Android clients always compute limbo document changes.


  View.prototype.applyChanges = function (docChanges, updateLimboDocuments, targetChange) {
    var _this = this;

    assert(!docChanges.needsRefill, 'Cannot apply changes that need a refill');
    var oldDocs = this.documentSet;
    this.documentSet = docChanges.documentSet;
    this.mutatedKeys = docChanges.mutatedKeys; // Sort changes based on type and query comparator

    var changes = docChanges.changeSet.getChanges();
    changes.sort(function (c1, c2) {
      return compareChangeType(c1.type, c2.type) || _this.query.docComparator(c1.doc, c2.doc);
    });
    this.applyTargetChange(targetChange);
    var limboChanges = updateLimboDocuments ? this.updateLimboDocuments() : [];
    var synced = this.limboDocuments.size === 0 && this.current;
    var newSyncState = synced ? SyncState.Synced : SyncState.Local;
    var syncStateChanged = newSyncState !== this.syncState;
    this.syncState = newSyncState;

    if (changes.length === 0 && !syncStateChanged) {
      // no changes
      return {
        limboChanges: limboChanges
      };
    } else {
      var snap = new ViewSnapshot(this.query, docChanges.documentSet, oldDocs, changes, docChanges.mutatedKeys, newSyncState === SyncState.Local, syncStateChanged,
      /* excludesMetadataChanges= */
      false);
      return {
        snapshot: snap,
        limboChanges: limboChanges
      };
    }
  };
  /**
   * Applies an OnlineState change to the view, potentially generating a
   * ViewChange if the view's syncState changes as a result.
   */


  View.prototype.applyOnlineStateChange = function (onlineState) {
    if (this.current && onlineState === OnlineState.Offline) {
      // If we're offline, set `current` to false and then call applyChanges()
      // to refresh our syncState and generate a ViewChange as appropriate. We
      // are guaranteed to get a new TargetChange that sets `current` back to
      // true once the client is back online.
      this.current = false;
      return this.applyChanges({
        documentSet: this.documentSet,
        changeSet: new DocumentChangeSet(),
        mutatedKeys: this.mutatedKeys,
        needsRefill: false
      },
      /* updateLimboDocuments= */
      false);
    } else {
      // No effect, just return a no-op ViewChange.
      return {
        limboChanges: []
      };
    }
  };
  /**
   * Returns whether the doc for the given key should be in limbo.
   */


  View.prototype.shouldBeInLimbo = function (key) {
    // If the remote end says it's part of this query, it's not in limbo.
    if (this._syncedDocuments.has(key)) {
      return false;
    } // The local store doesn't think it's a result, so it shouldn't be in limbo.


    if (!this.documentSet.has(key)) {
      return false;
    } // If there are local changes to the doc, they might explain why the server
    // doesn't know that it's part of the query. So don't put it in limbo.
    // TODO(klimt): Ideally, we would only consider changes that might actually
    // affect this specific query.


    if (this.documentSet.get(key).hasLocalMutations) {
      return false;
    } // Everything else is in limbo.


    return true;
  };
  /**
   * Updates syncedDocuments, current, and limbo docs based on the given change.
   * Returns the list of changes to which docs are in limbo.
   */


  View.prototype.applyTargetChange = function (targetChange) {
    var _this = this;

    if (targetChange) {
      targetChange.addedDocuments.forEach(function (key) {
        return _this._syncedDocuments = _this._syncedDocuments.add(key);
      });
      targetChange.modifiedDocuments.forEach(function (key) {
        return assert(_this._syncedDocuments.has(key), "Modified document " + key + " not found in view.");
      });
      targetChange.removedDocuments.forEach(function (key) {
        return _this._syncedDocuments = _this._syncedDocuments.delete(key);
      });
      this.current = targetChange.current;
    }
  };

  View.prototype.updateLimboDocuments = function () {
    var _this = this; // We can only determine limbo documents when we're in-sync with the server.


    if (!this.current) {
      return [];
    } // TODO(klimt): Do this incrementally so that it's not quadratic when
    // updating many documents.


    var oldLimboDocuments = this.limboDocuments;
    this.limboDocuments = documentKeySet();
    this.documentSet.forEach(function (doc) {
      if (_this.shouldBeInLimbo(doc.key)) {
        _this.limboDocuments = _this.limboDocuments.add(doc.key);
      }
    }); // Diff the new limbo docs with the old limbo docs.

    var changes = [];
    oldLimboDocuments.forEach(function (key) {
      if (!_this.limboDocuments.has(key)) {
        changes.push(new RemovedLimboDocument(key));
      }
    });
    this.limboDocuments.forEach(function (key) {
      if (!oldLimboDocuments.has(key)) {
        changes.push(new AddedLimboDocument(key));
      }
    });
    return changes;
  };
  /**
   * Update the in-memory state of the current view with the state read from
   * persistence.
   *
   * We update the query view whenever a client's primary status changes:
   * - When a client transitions from primary to secondary, it can miss
   *   LocalStorage updates and its query views may temporarily not be
   *   synchronized with the state on disk.
   * - For secondary to primary transitions, the client needs to update the list
   *   of `syncedDocuments` since secondary clients update their query views
   *   based purely on synthesized RemoteEvents.
   *
   * @param localDocs - The documents that match the query according to the
   * LocalStore.
   * @param remoteKeys - The keys of the documents that match the query
   * according to the backend.
   *
   * @return The ViewChange that resulted from this synchronization.
   */
  // PORTING NOTE: Multi-tab only.


  View.prototype.synchronizeWithPersistedState = function (localDocs, remoteKeys) {
    this._syncedDocuments = remoteKeys;
    this.limboDocuments = documentKeySet();
    var docChanges = this.computeDocChanges(localDocs);
    return this.applyChanges(docChanges,
    /*updateLimboDocuments=*/
    true);
  };
  /**
   * Returns a view snapshot as if this query was just listened to. Contains
   * a document add for every existing document and the `fromCache` and
   * `hasPendingWrites` status of the already established view.
   */
  // PORTING NOTE: Multi-tab only.


  View.prototype.computeInitialSnapshot = function () {
    return ViewSnapshot.fromInitialDocuments(this.query, this.documentSet, this.mutatedKeys, this.syncState === SyncState.Local);
  };

  return View;
}();

function compareChangeType(c1, c2) {
  var order = function (change) {
    switch (change) {
      case ChangeType.Added:
        return 1;

      case ChangeType.Modified:
        return 2;

      case ChangeType.Metadata:
        // A metadata change is converted to a modified change at the public
        // api layer.  Since we sort by document key and then change type,
        // metadata and modified changes must be sorted equivalently.
        return 2;

      case ChangeType.Removed:
        return 0;

      default:
        return fail('Unknown ChangeType: ' + change);
    }
  };

  return order(c1) - order(c2);
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var LOG_TAG$8 = 'SyncEngine';
/**
 * QueryView contains all of the data that SyncEngine needs to keep track of for
 * a particular query.
 */

var QueryView =
/** @class */
function () {
  function QueryView(
  /**
   * The query itself.
   */
  query,
  /**
   * The target number created by the client that is used in the watch
   * stream to identify this query.
   */
  targetId,
  /**
   * The view is responsible for computing the final merged truth of what
   * docs are in the query. It gets notified of local and remote changes,
   * and applies the query filters and limits to determine the most correct
   * possible results.
   */
  view) {
    this.query = query;
    this.targetId = targetId;
    this.view = view;
  }

  return QueryView;
}();
/** Tracks a limbo resolution. */


var LimboResolution =
/** @class */
function () {
  function LimboResolution(key) {
    this.key = key;
  }

  return LimboResolution;
}();
/**
 * SyncEngine is the central controller in the client SDK architecture. It is
 * the glue code between the EventManager, LocalStore, and RemoteStore. Some of
 * SyncEngine's responsibilities include:
 * 1. Coordinating client requests and remote events between the EventManager
 *    and the local and remote data stores.
 * 2. Managing a View object for each query, providing the unified view between
 *    the local and remote data stores.
 * 3. Notifying the RemoteStore when the LocalStore has new mutations in its
 *    queue that need sending to the backend.
 *
 * The SyncEngine’s methods should only ever be called by methods running in the
 * global async queue.
 */


var SyncEngine =
/** @class */
function () {
  function SyncEngine(localStore, remoteStore, // PORTING NOTE: Manages state synchronization in multi-tab environments.
  sharedClientState, currentUser) {
    this.localStore = localStore;
    this.remoteStore = remoteStore;
    this.sharedClientState = sharedClientState;
    this.currentUser = currentUser;
    this.syncEngineListener = null;
    this.queryViewsByQuery = new ObjectMap(function (q) {
      return q.canonicalId();
    });
    this.queryViewsByTarget = {};
    this.limboTargetsByKey = new SortedMap(DocumentKey.comparator);
    this.limboResolutionsByTarget = {};
    this.limboDocumentRefs = new ReferenceSet();
    /** Stores user completion handlers, indexed by User and BatchId. */

    this.mutationUserCallbacks = {};
    this.limboTargetIdGenerator = TargetIdGenerator.forSyncEngine(); // The primary state is set to `true` or `false` immediately after Firestore
    // startup. In the interim, a client should only be considered primary if
    // `isPrimary` is true.

    this.isPrimary = undefined;
    this.onlineState = OnlineState.Unknown;
  }

  Object.defineProperty(SyncEngine.prototype, "isPrimaryClient", {
    // Only used for testing.
    get: function () {
      return this.isPrimary === true;
    },
    enumerable: true,
    configurable: true
  });
  /** Subscribes to SyncEngine notifications. Has to be called exactly once. */

  SyncEngine.prototype.subscribe = function (syncEngineListener) {
    assert(syncEngineListener !== null, 'SyncEngine listener cannot be null');
    assert(this.syncEngineListener === null, 'SyncEngine already has a subscriber.');
    this.syncEngineListener = syncEngineListener;
  };
  /**
   * Initiates the new listen, resolves promise when listen enqueued to the
   * server. All the subsequent view snapshots or errors are sent to the
   * subscribed handlers. Returns the targetId of the query.
   */


  SyncEngine.prototype.listen = function (query) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var targetId, viewSnapshot, queryView, queryData, status_1;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.assertSubscribed('listen()');
            queryView = this.queryViewsByQuery.get(query);
            if (!queryView) return [3
            /*break*/
            , 1]; // PORTING NOTE: With Multi-Tab Web, it is possible that a query view
            // already exists when EventManager calls us for the first time. This
            // happens when the primary tab is already listening to this query on
            // behalf of another tab and the user of the primary also starts listening
            // to the query. EventManager will not have an assigned target ID in this
            // case and calls `listen` to obtain this ID.

            targetId = queryView.targetId;
            this.sharedClientState.addLocalQueryTarget(targetId);
            viewSnapshot = queryView.view.computeInitialSnapshot();
            return [3
            /*break*/
            , 4];

          case 1:
            return [4
            /*yield*/
            , this.localStore.allocateQuery(query)];

          case 2:
            queryData = _a.sent();
            status_1 = this.sharedClientState.addLocalQueryTarget(queryData.targetId);
            targetId = queryData.targetId;
            return [4
            /*yield*/
            , this.initializeViewAndComputeSnapshot(queryData, status_1 === 'current')];

          case 3:
            viewSnapshot = _a.sent();

            if (this.isPrimary) {
              this.remoteStore.listen(queryData);
            }

            _a.label = 4;

          case 4:
            this.syncEngineListener.onWatchChange([viewSnapshot]);
            return [2
            /*return*/
            , targetId];
        }
      });
    });
  };
  /**
   * Registers a view for a previously unknown query and computes its initial
   * snapshot.
   */


  SyncEngine.prototype.initializeViewAndComputeSnapshot = function (queryData, current) {
    var _this = this;

    var query = queryData.query;
    return this.localStore.executeQuery(query).then(function (docs) {
      return _this.localStore.remoteDocumentKeys(queryData.targetId).then(function (remoteKeys) {
        var view = new View(query, remoteKeys);
        var viewDocChanges = view.computeDocChanges(docs); // tslint:disable-next-line:max-line-length Prettier formats this exceed 100 characters.

        var synthesizedTargetChange = TargetChange.createSynthesizedTargetChangeForCurrentChange(queryData.targetId, current && _this.onlineState !== OnlineState.Offline);
        var viewChange = view.applyChanges(viewDocChanges,
        /* updateLimboDocuments= */
        _this.isPrimary === true, synthesizedTargetChange);
        assert(viewChange.limboChanges.length === 0, 'View returned limbo docs before target ack from the server.');
        assert(!!viewChange.snapshot, 'applyChanges for new view should always return a snapshot');
        var data = new QueryView(query, queryData.targetId, view);

        _this.queryViewsByQuery.set(query, data);

        _this.queryViewsByTarget[queryData.targetId] = data;
        return viewChange.snapshot;
      });
    });
  };
  /**
   * Reconcile the list of synced documents in an existing view with those
   * from persistence.
   */
  // PORTING NOTE: Multi-tab only.


  SyncEngine.prototype.synchronizeViewAndComputeSnapshot = function (queryView) {
    var _this = this;

    return this.localStore.executeQuery(queryView.query).then(function (docs) {
      return _this.localStore.remoteDocumentKeys(queryView.targetId).then(function (remoteKeys) {
        return tslib_1.__awaiter(_this, void 0, void 0, function () {
          var viewSnapshot;
          return tslib_1.__generator(this, function (_a) {
            viewSnapshot = queryView.view.synchronizeWithPersistedState(docs, remoteKeys);

            if (this.isPrimary) {
              this.updateTrackedLimbos(queryView.targetId, viewSnapshot.limboChanges);
            }

            return [2
            /*return*/
            , viewSnapshot];
          });
        });
      });
    });
  };
  /** Stops listening to the query. */


  SyncEngine.prototype.unlisten = function (query) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var queryView, targetRemainsActive;

      var _this = this;

      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.assertSubscribed('unlisten()');
            queryView = this.queryViewsByQuery.get(query);
            assert(!!queryView, 'Trying to unlisten on query not found:' + query);
            if (!this.isPrimary) return [3
            /*break*/
            , 3]; // We need to remove the local query target first to allow us to verify
            // whether any other client is still interested in this target.

            this.sharedClientState.removeLocalQueryTarget(queryView.targetId);
            targetRemainsActive = this.sharedClientState.isActiveQueryTarget(queryView.targetId);
            if (!!targetRemainsActive) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , this.localStore.releaseQuery(query,
            /*keepPersistedQueryData=*/
            false).then(function () {
              _this.sharedClientState.clearQueryState(queryView.targetId);

              _this.remoteStore.unlisten(queryView.targetId);

              _this.removeAndCleanupQuery(queryView);
            }).catch(ignoreIfPrimaryLeaseLoss)];

          case 1:
            _a.sent();

            _a.label = 2;

          case 2:
            return [3
            /*break*/
            , 5];

          case 3:
            this.removeAndCleanupQuery(queryView);
            return [4
            /*yield*/
            , this.localStore.releaseQuery(query,
            /*keepPersistedQueryData=*/
            true)];

          case 4:
            _a.sent();

            _a.label = 5;

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Initiates the write of local mutation batch which involves adding the
   * writes to the mutation queue, notifying the remote store about new
   * mutations and raising events for any changes this write caused.
   *
   * The promise returned by this call is resolved when the above steps
   * have completed, *not* when the write was acked by the backend. The
   * userCallback is resolved once the write was acked/rejected by the
   * backend (or failed locally for any other reason).
   */


  SyncEngine.prototype.write = function (batch, userCallback) {
    var _this = this;

    this.assertSubscribed('write()');
    return this.localStore.localWrite(batch).then(function (result) {
      _this.sharedClientState.addPendingMutation(result.batchId);

      _this.addMutationCallback(result.batchId, userCallback);

      return _this.emitNewSnapsAndNotifyLocalStore(result.changes);
    }).then(function () {
      return _this.remoteStore.fillWritePipeline();
    });
  }; // TODO(klimt): Wrap the given error in a standard Firestore error object.


  SyncEngine.prototype.wrapUpdateFunctionError = function (error) {
    return error;
  };
  /**
   * Takes an updateFunction in which a set of reads and writes can be performed
   * atomically. In the updateFunction, the client can read and write values
   * using the supplied transaction object. After the updateFunction, all
   * changes will be committed. If some other client has changed any of the data
   * referenced, then the updateFunction will be called again. If the
   * updateFunction still fails after the given number of retries, then the
   * transaction will be rejection.
   *
   * The transaction object passed to the updateFunction contains methods for
   * accessing documents and collections. Unlike other datastore access, data
   * accessed with the transaction will not reflect local changes that have not
   * been committed. For this reason, it is required that all reads are
   * performed before any writes. Transactions must be performed while online.
   *
   * The promise returned is resolved when the transaction is fully committed.
   */


  SyncEngine.prototype.runTransaction = function (updateFunction, retries) {
    var _this = this;

    if (retries === void 0) {
      retries = 5;
    }

    assert(retries >= 0, 'Got negative number of retries for transaction.');
    var transaction = this.remoteStore.createTransaction();

    var wrappedUpdateFunction = function () {
      try {
        var userPromise = updateFunction(transaction);

        if (isNullOrUndefined(userPromise) || !userPromise.catch || !userPromise.then) {
          return Promise.reject(Error('Transaction callback must return a Promise'));
        }

        return userPromise.catch(function (e) {
          return Promise.reject(_this.wrapUpdateFunctionError(e));
        });
      } catch (e) {
        return Promise.reject(_this.wrapUpdateFunctionError(e));
      }
    };

    return wrappedUpdateFunction().then(function (result) {
      return transaction.commit().then(function () {
        return result;
      }).catch(function (error) {
        if (retries === 0) {
          return Promise.reject(error);
        } // TODO(klimt): Put in a retry delay?


        return _this.runTransaction(updateFunction, retries - 1);
      });
    });
  };

  SyncEngine.prototype.applyRemoteEvent = function (remoteEvent) {
    var _this = this;

    this.assertSubscribed('applyRemoteEvent()');
    return this.localStore.applyRemoteEvent(remoteEvent).then(function (changes) {
      // Update `receivedDocument` as appropriate for any limbo targets.
      forEach(remoteEvent.targetChanges, function (targetId, targetChange) {
        var limboResolution = _this.limboResolutionsByTarget[Number(targetId)];

        if (limboResolution) {
          // Since this is a limbo resolution lookup, it's for a single document
          // and it could be added, modified, or removed, but not a combination.
          assert(targetChange.addedDocuments.size + targetChange.modifiedDocuments.size + targetChange.removedDocuments.size <= 1, 'Limbo resolution for single document contains multiple changes.');

          if (targetChange.addedDocuments.size > 0) {
            limboResolution.receivedDocument = true;
          } else if (targetChange.modifiedDocuments.size > 0) {
            assert(limboResolution.receivedDocument, 'Received change for limbo target document without add.');
          } else if (targetChange.removedDocuments.size > 0) {
            assert(limboResolution.receivedDocument, 'Received remove for limbo target document without add.');
            limboResolution.receivedDocument = false;
          }
        }
      });
      return _this.emitNewSnapsAndNotifyLocalStore(changes, remoteEvent);
    }).catch(ignoreIfPrimaryLeaseLoss);
  };
  /**
   * Applies an OnlineState change to the sync engine and notifies any views of
   * the change.
   */


  SyncEngine.prototype.applyOnlineStateChange = function (onlineState, source) {
    // If we are the secondary client, we explicitly ignore the remote store's
    // online state (the local client may go offline, even though the primary
    // tab remains online) and only apply the primary tab's online state from
    // SharedClientState.
    if (this.isPrimary && source === OnlineStateSource.RemoteStore || !this.isPrimary && source === OnlineStateSource.SharedClientState) {
      var newViewSnapshots_1 = [];
      this.queryViewsByQuery.forEach(function (query, queryView) {
        var viewChange = queryView.view.applyOnlineStateChange(onlineState);
        assert(viewChange.limboChanges.length === 0, 'OnlineState should not affect limbo documents.');

        if (viewChange.snapshot) {
          newViewSnapshots_1.push(viewChange.snapshot);
        }
      });
      this.syncEngineListener.onOnlineStateChange(onlineState);
      this.syncEngineListener.onWatchChange(newViewSnapshots_1);
      this.onlineState = onlineState;

      if (this.isPrimary) {
        this.sharedClientState.setOnlineState(onlineState);
      }
    }
  };

  SyncEngine.prototype.rejectListen = function (targetId, err) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var limboResolution, limboKey, documentUpdates, resolvedLimboDocuments, event_1, queryView_1;

      var _this = this;

      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.assertSubscribed('rejectListens()'); // PORTING NOTE: Multi-tab only.

            this.sharedClientState.updateQueryState(targetId, 'rejected', err);
            limboResolution = this.limboResolutionsByTarget[targetId];
            limboKey = limboResolution && limboResolution.key;
            if (!limboKey) return [3
            /*break*/
            , 1]; // Since this query failed, we won't want to manually unlisten to it.
            // So go ahead and remove it from bookkeeping.

            this.limboTargetsByKey = this.limboTargetsByKey.remove(limboKey);
            delete this.limboResolutionsByTarget[targetId];
            documentUpdates = new SortedMap(DocumentKey.comparator);
            documentUpdates = documentUpdates.insert(limboKey, new NoDocument(limboKey, SnapshotVersion.forDeletedDoc()));
            resolvedLimboDocuments = documentKeySet().add(limboKey);
            event_1 = new RemoteEvent(SnapshotVersion.MIN,
            /* targetChanges= */
            {},
            /* targetMismatches= */
            new SortedSet(primitiveComparator), documentUpdates, resolvedLimboDocuments);
            return [2
            /*return*/
            , this.applyRemoteEvent(event_1)];

          case 1:
            queryView_1 = this.queryViewsByTarget[targetId];
            assert(!!queryView_1, 'Unknown targetId: ' + targetId);
            return [4
            /*yield*/
            , this.localStore.releaseQuery(queryView_1.query,
            /* keepPersistedQueryData */
            false).then(function () {
              return _this.removeAndCleanupQuery(queryView_1);
            }).catch(ignoreIfPrimaryLeaseLoss)];

          case 2:
            _a.sent();

            this.syncEngineListener.onWatchError(queryView_1.query, err);
            _a.label = 3;

          case 3:
            return [2
            /*return*/
            ];
        }
      });
    });
  }; // PORTING NOTE: Multi-tab only


  SyncEngine.prototype.applyBatchState = function (batchId, batchState, error) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var documents;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.assertSubscribed('applyBatchState()');
            return [4
            /*yield*/
            , this.localStore.lookupMutationDocuments(batchId)];

          case 1:
            documents = _a.sent();

            if (documents === null) {
              // A throttled tab may not have seen the mutation before it was completed
              // and removed from the mutation queue, in which case we won't have cached
              // the affected documents. In this case we can safely ignore the update
              // since that means we didn't apply the mutation locally at all (if we
              // had, we would have cached the affected documents), and so we will just
              // see any resulting document changes via normal remote document updates
              // as applicable.
              debug(LOG_TAG$8, 'Cannot apply mutation batch with id: ' + batchId);
              return [2
              /*return*/
              ];
            }

            if (!(batchState === 'pending')) return [3
            /*break*/
            , 3]; // If we are the primary client, we need to send this write to the
            // backend. Secondary clients will ignore these writes since their remote
            // connection is disabled.

            return [4
            /*yield*/
            , this.remoteStore.fillWritePipeline()];

          case 2:
            // If we are the primary client, we need to send this write to the
            // backend. Secondary clients will ignore these writes since their remote
            // connection is disabled.
            _a.sent();

            return [3
            /*break*/
            , 4];

          case 3:
            if (batchState === 'acknowledged' || batchState === 'rejected') {
              // NOTE: Both these methods are no-ops for batches that originated from
              // other clients.
              this.processUserCallback(batchId, error ? error : null);
              this.localStore.removeCachedMutationBatchMetadata(batchId);
            } else {
              fail("Unknown batchState: " + batchState);
            }

            _a.label = 4;

          case 4:
            return [4
            /*yield*/
            , this.emitNewSnapsAndNotifyLocalStore(documents)];

          case 5:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };

  SyncEngine.prototype.applySuccessfulWrite = function (mutationBatchResult) {
    var _this = this;

    this.assertSubscribed('applySuccessfulWrite()');
    var batchId = mutationBatchResult.batch.batchId; // The local store may or may not be able to apply the write result and
    // raise events immediately (depending on whether the watcher is caught
    // up), so we raise user callbacks first so that they consistently happen
    // before listen events.

    this.processUserCallback(batchId,
    /*error=*/
    null);
    return this.localStore.acknowledgeBatch(mutationBatchResult).then(function (changes) {
      _this.sharedClientState.updateMutationState(batchId, 'acknowledged');

      return _this.emitNewSnapsAndNotifyLocalStore(changes);
    }).catch(ignoreIfPrimaryLeaseLoss);
  };

  SyncEngine.prototype.rejectFailedWrite = function (batchId, error) {
    var _this = this;

    this.assertSubscribed('rejectFailedWrite()'); // The local store may or may not be able to apply the write result and
    // raise events immediately (depending on whether the watcher is caught up),
    // so we raise user callbacks first so that they consistently happen before
    // listen events.

    this.processUserCallback(batchId, error);
    return this.localStore.rejectBatch(batchId).then(function (changes) {
      _this.sharedClientState.updateMutationState(batchId, 'rejected', error);

      return _this.emitNewSnapsAndNotifyLocalStore(changes);
    }).catch(ignoreIfPrimaryLeaseLoss);
  };

  SyncEngine.prototype.addMutationCallback = function (batchId, callback) {
    var newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];

    if (!newCallbacks) {
      newCallbacks = new SortedMap(primitiveComparator);
    }

    newCallbacks = newCallbacks.insert(batchId, callback);
    this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;
  };
  /**
   * Resolves or rejects the user callback for the given batch and then discards
   * it.
   */


  SyncEngine.prototype.processUserCallback = function (batchId, error) {
    var newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()]; // NOTE: Mutations restored from persistence won't have callbacks, so it's
    // okay for there to be no callback for this ID.

    if (newCallbacks) {
      var callback = newCallbacks.get(batchId);

      if (callback) {
        assert(batchId === newCallbacks.minKey(), 'Mutation callbacks processed out-of-order?');

        if (error) {
          callback.reject(error);
        } else {
          callback.resolve();
        }

        newCallbacks = newCallbacks.remove(batchId);
      }

      this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;
    }
  };

  SyncEngine.prototype.removeAndCleanupQuery = function (queryView) {
    var _this = this;

    this.sharedClientState.removeLocalQueryTarget(queryView.targetId);
    this.queryViewsByQuery.delete(queryView.query);
    delete this.queryViewsByTarget[queryView.targetId];

    if (this.isPrimary) {
      var limboKeys = this.limboDocumentRefs.referencesForId(queryView.targetId);
      this.limboDocumentRefs.removeReferencesForId(queryView.targetId);
      limboKeys.forEach(function (limboKey) {
        var isReferenced = _this.limboDocumentRefs.containsKey(limboKey);

        if (!isReferenced) {
          // We removed the last reference for this key
          _this.removeLimboTarget(limboKey);
        }
      });
    }
  };

  SyncEngine.prototype.removeLimboTarget = function (key) {
    // It's possible that the target already got removed because the query failed. In that case,
    // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.
    var limboTargetId = this.limboTargetsByKey.get(key);

    if (limboTargetId === null) {
      // This target already got removed, because the query failed.
      return;
    }

    this.remoteStore.unlisten(limboTargetId);
    this.limboTargetsByKey = this.limboTargetsByKey.remove(key);
    delete this.limboResolutionsByTarget[limboTargetId];
  };

  SyncEngine.prototype.updateTrackedLimbos = function (targetId, limboChanges) {
    for (var _i = 0, limboChanges_1 = limboChanges; _i < limboChanges_1.length; _i++) {
      var limboChange = limboChanges_1[_i];

      if (limboChange instanceof AddedLimboDocument) {
        this.limboDocumentRefs.addReference(limboChange.key, targetId);
        this.trackLimboChange(limboChange);
      } else if (limboChange instanceof RemovedLimboDocument) {
        debug(LOG_TAG$8, 'Document no longer in limbo: ' + limboChange.key);
        this.limboDocumentRefs.removeReference(limboChange.key, targetId);
        var isReferenced = this.limboDocumentRefs.containsKey(limboChange.key);

        if (!isReferenced) {
          // We removed the last reference for this key
          this.removeLimboTarget(limboChange.key);
        }
      } else {
        fail('Unknown limbo change: ' + JSON.stringify(limboChange));
      }
    }
  };

  SyncEngine.prototype.trackLimboChange = function (limboChange) {
    var key = limboChange.key;

    if (!this.limboTargetsByKey.get(key)) {
      debug(LOG_TAG$8, 'New document in limbo: ' + key);
      var limboTargetId = this.limboTargetIdGenerator.next();
      var query = Query.atPath(key.path);
      this.limboResolutionsByTarget[limboTargetId] = new LimboResolution(key);
      this.remoteStore.listen(new QueryData(query, limboTargetId, QueryPurpose.LimboResolution, ListenSequence.INVALID));
      this.limboTargetsByKey = this.limboTargetsByKey.insert(key, limboTargetId);
    }
  }; // Visible for testing


  SyncEngine.prototype.currentLimboDocs = function () {
    return this.limboTargetsByKey;
  };

  SyncEngine.prototype.emitNewSnapsAndNotifyLocalStore = function (changes, remoteEvent) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var newSnaps, docChangesInAllViews, queriesProcessed;

      var _this = this;

      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            newSnaps = [];
            docChangesInAllViews = [];
            queriesProcessed = [];
            this.queryViewsByQuery.forEach(function (_, queryView) {
              queriesProcessed.push(Promise.resolve().then(function () {
                var viewDocChanges = queryView.view.computeDocChanges(changes);

                if (!viewDocChanges.needsRefill) {
                  return viewDocChanges;
                } // The query has a limit and some docs were removed, so we need
                // to re-run the query against the local store to make sure we
                // didn't lose any good docs that had been past the limit.


                return _this.localStore.executeQuery(queryView.query).then(function (docs) {
                  return queryView.view.computeDocChanges(docs, viewDocChanges);
                });
              }).then(function (viewDocChanges) {
                var targetChange = remoteEvent && remoteEvent.targetChanges[queryView.targetId];
                var viewChange = queryView.view.applyChanges(viewDocChanges,
                /* updateLimboDocuments= */
                _this.isPrimary === true, targetChange);

                _this.updateTrackedLimbos(queryView.targetId, viewChange.limboChanges);

                if (viewChange.snapshot) {
                  if (_this.isPrimary) {
                    _this.sharedClientState.updateQueryState(queryView.targetId, viewChange.snapshot.fromCache ? 'not-current' : 'current');
                  }

                  newSnaps.push(viewChange.snapshot);
                  var docChanges = LocalViewChanges.fromSnapshot(queryView.targetId, viewChange.snapshot);
                  docChangesInAllViews.push(docChanges);
                }
              }));
            });
            return [4
            /*yield*/
            , Promise.all(queriesProcessed)];

          case 1:
            _a.sent();

            this.syncEngineListener.onWatchChange(newSnaps);
            return [4
            /*yield*/
            , this.localStore.notifyLocalViewChanges(docChangesInAllViews)];

          case 2:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };

  SyncEngine.prototype.assertSubscribed = function (fnName) {
    assert(this.syncEngineListener !== null, 'Trying to call ' + fnName + ' before calling subscribe().');
  };

  SyncEngine.prototype.handleCredentialChange = function (user) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var userChanged, result;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            userChanged = !this.currentUser.isEqual(user);
            this.currentUser = user;
            if (!userChanged) return [3
            /*break*/
            , 3];
            return [4
            /*yield*/
            , this.localStore.handleUserChange(user)];

          case 1:
            result = _a.sent(); // TODO(b/114226417): Consider calling this only in the primary tab.

            this.sharedClientState.handleUserChange(user, result.removedBatchIds, result.addedBatchIds);
            return [4
            /*yield*/
            , this.emitNewSnapsAndNotifyLocalStore(result.affectedDocuments)];

          case 2:
            _a.sent();

            _a.label = 3;

          case 3:
            return [4
            /*yield*/
            , this.remoteStore.handleCredentialChange()];

          case 4:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  }; // PORTING NOTE: Multi-tab only


  SyncEngine.prototype.applyPrimaryState = function (isPrimary) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var activeTargets, activeQueries, _i, activeQueries_1, queryData, activeTargets_1, p_1;

      var _this = this;

      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!(isPrimary === true && this.isPrimary !== true)) return [3
            /*break*/
            , 3];
            this.isPrimary = true;
            return [4
            /*yield*/
            , this.remoteStore.applyPrimaryState(true)];

          case 1:
            _a.sent();

            activeTargets = this.sharedClientState.getAllActiveQueryTargets();
            return [4
            /*yield*/
            , this.synchronizeQueryViewsAndRaiseSnapshots(activeTargets.toArray())];

          case 2:
            activeQueries = _a.sent();

            for (_i = 0, activeQueries_1 = activeQueries; _i < activeQueries_1.length; _i++) {
              queryData = activeQueries_1[_i];
              this.remoteStore.listen(queryData);
            }

            return [3
            /*break*/
            , 7];

          case 3:
            if (!(isPrimary === false && this.isPrimary !== false)) return [3
            /*break*/
            , 7];
            this.isPrimary = false;
            activeTargets_1 = [];
            p_1 = Promise.resolve();
            forEachNumber(this.queryViewsByTarget, function (targetId, queryView) {
              if (_this.sharedClientState.isLocalQueryTarget(targetId)) {
                activeTargets_1.push(targetId);
              } else {
                p_1 = p_1.then(function () {
                  return _this.unlisten(queryView.query);
                });
              }

              _this.remoteStore.unlisten(queryView.targetId);
            });
            return [4
            /*yield*/
            , p_1];

          case 4:
            _a.sent();

            return [4
            /*yield*/
            , this.synchronizeQueryViewsAndRaiseSnapshots(activeTargets_1)];

          case 5:
            _a.sent();

            this.resetLimboDocuments();
            return [4
            /*yield*/
            , this.remoteStore.applyPrimaryState(false)];

          case 6:
            _a.sent();

            _a.label = 7;

          case 7:
            return [2
            /*return*/
            ];
        }
      });
    });
  }; // PORTING NOTE: Multi-tab only.


  SyncEngine.prototype.resetLimboDocuments = function () {
    var _this = this;

    forEachNumber(this.limboResolutionsByTarget, function (targetId) {
      _this.remoteStore.unlisten(targetId);
    });
    this.limboDocumentRefs.removeAllReferences();
    this.limboResolutionsByTarget = [];
    this.limboTargetsByKey = new SortedMap(DocumentKey.comparator);
  };
  /**
   * Reconcile the query views of the provided query targets with the state from
   * persistence. Raises snapshots for any changes that affect the local
   * client and returns the updated state of all target's query data.
   */
  // PORTING NOTE: Multi-tab only.


  SyncEngine.prototype.synchronizeQueryViewsAndRaiseSnapshots = function (targets) {
    var _this = this;

    var p = Promise.resolve();
    var activeQueries = [];
    var newViewSnapshots = [];

    var _loop_1 = function (targetId) {
      p = p.then(function () {
        return tslib_1.__awaiter(_this, void 0, void 0, function () {
          var queryData, queryView, viewChange, query;
          return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                queryView = this.queryViewsByTarget[targetId];
                if (!queryView) return [3
                /*break*/
                , 4]; // For queries that have a local View, we need to update their state
                // in LocalStore (as the resume token and the snapshot version
                // might have changed) and reconcile their views with the persisted
                // state (the list of syncedDocuments may have gotten out of sync).

                return [4
                /*yield*/
                , this.localStore.releaseQuery(queryView.query,
                /*keepPersistedQueryData=*/
                true)];

              case 1:
                // For queries that have a local View, we need to update their state
                // in LocalStore (as the resume token and the snapshot version
                // might have changed) and reconcile their views with the persisted
                // state (the list of syncedDocuments may have gotten out of sync).
                _a.sent();

                return [4
                /*yield*/
                , this.localStore.allocateQuery(queryView.query)];

              case 2:
                queryData = _a.sent();
                return [4
                /*yield*/
                , this.synchronizeViewAndComputeSnapshot(queryView)];

              case 3:
                viewChange = _a.sent();

                if (viewChange.snapshot) {
                  newViewSnapshots.push(viewChange.snapshot);
                }

                return [3
                /*break*/
                , 8];

              case 4:
                assert(this.isPrimary === true, 'A secondary tab should never have an active query without an active view.');
                return [4
                /*yield*/
                , this.localStore.getQueryForTarget(targetId)];

              case 5:
                query = _a.sent();
                assert(!!query, "Query data for target " + targetId + " not found");
                return [4
                /*yield*/
                , this.localStore.allocateQuery(query)];

              case 6:
                queryData = _a.sent();
                return [4
                /*yield*/
                , this.initializeViewAndComputeSnapshot(queryData,
                /*current=*/
                false)];

              case 7:
                _a.sent();

                _a.label = 8;

              case 8:
                activeQueries.push(queryData);
                return [2
                /*return*/
                ];
            }
          });
        });
      });
    };

    for (var _i = 0, targets_1 = targets; _i < targets_1.length; _i++) {
      var targetId = targets_1[_i];

      _loop_1(targetId);
    }

    return p.then(function () {
      _this.syncEngineListener.onWatchChange(newViewSnapshots);

      return activeQueries;
    });
  }; // PORTING NOTE: Multi-tab only


  SyncEngine.prototype.getActiveClients = function () {
    return this.localStore.getActiveClients();
  }; // PORTING NOTE: Multi-tab only


  SyncEngine.prototype.applyTargetState = function (targetId, state, error) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var _a, queryView;

      var _this = this;

      return tslib_1.__generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            if (this.isPrimary) {
              // If we receive a target state notification via WebStorage, we are
              // either already secondary or another tab has taken the primary lease.
              debug(LOG_TAG$8, 'Ignoring unexpected query state notification.');
              return [2
              /*return*/
              ];
            }

            if (!this.queryViewsByTarget[targetId]) return [3
            /*break*/
            , 5];
            _a = state;

            switch (_a) {
              case 'current':
                return [3
                /*break*/
                , 1];

              case 'not-current':
                return [3
                /*break*/
                , 1];

              case 'rejected':
                return [3
                /*break*/
                , 2];
            }

            return [3
            /*break*/
            , 4];

          case 1:
            {
              return [2
              /*return*/
              , this.localStore.getNewDocumentChanges().then(function (changes) {
                return tslib_1.__awaiter(_this, void 0, void 0, function () {
                  var synthesizedRemoteEvent;
                  return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                      case 0:
                        synthesizedRemoteEvent = RemoteEvent.createSynthesizedRemoteEventForCurrentChange(targetId, state === 'current');
                        return [4
                        /*yield*/
                        , this.emitNewSnapsAndNotifyLocalStore(changes, synthesizedRemoteEvent)];

                      case 1:
                        _a.sent();

                        return [2
                        /*return*/
                        ];
                    }
                  });
                });
              }, function (err) {
                return tslib_1.__awaiter(_this, void 0, void 0, function () {
                  var activeTargets_2;
                  return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                      case 0:
                        if (!isDocumentChangeMissingError(err)) return [3
                        /*break*/
                        , 2];
                        activeTargets_2 = [];
                        forEachNumber(this.queryViewsByTarget, function (target) {
                          return activeTargets_2.push(target);
                        });
                        return [4
                        /*yield*/
                        , this.synchronizeQueryViewsAndRaiseSnapshots(activeTargets_2)];

                      case 1:
                        _a.sent();

                        return [3
                        /*break*/
                        , 3];

                      case 2:
                        throw err;

                      case 3:
                        return [2
                        /*return*/
                        ];
                    }
                  });
                });
              })];
            }
            _b.label = 2;

          case 2:
            queryView = this.queryViewsByTarget[targetId];
            this.removeAndCleanupQuery(queryView);
            return [4
            /*yield*/
            , this.localStore.releaseQuery(queryView.query,
            /*keepPersistedQueryData=*/
            true)];

          case 3:
            _b.sent();

            this.syncEngineListener.onWatchError(queryView.query, error);
            return [3
            /*break*/
            , 5];

          case 4:
            fail('Unexpected target state: ' + state);
            _b.label = 5;

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  }; // PORTING NOTE: Multi-tab only


  SyncEngine.prototype.applyActiveTargetsChange = function (added, removed) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var _i, added_1, targetId, query, queryData, _loop_2, this_1, _a, removed_1, targetId;

      var _this = this;

      return tslib_1.__generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!this.isPrimary) {
              return [2
              /*return*/
              ];
            }

            _i = 0, added_1 = added;
            _b.label = 1;

          case 1:
            if (!(_i < added_1.length)) return [3
            /*break*/
            , 6];
            targetId = added_1[_i];
            assert(!this.queryViewsByTarget[targetId], 'Trying to add an already active target');
            return [4
            /*yield*/
            , this.localStore.getQueryForTarget(targetId)];

          case 2:
            query = _b.sent();
            assert(!!query, "Query data for active target " + targetId + " not found");
            return [4
            /*yield*/
            , this.localStore.allocateQuery(query)];

          case 3:
            queryData = _b.sent();
            return [4
            /*yield*/
            , this.initializeViewAndComputeSnapshot(queryData,
            /*current=*/
            false)];

          case 4:
            _b.sent();

            this.remoteStore.listen(queryData);
            _b.label = 5;

          case 5:
            _i++;
            return [3
            /*break*/
            , 1];

          case 6:
            _loop_2 = function (targetId) {
              var queryView;
              return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    queryView = this_1.queryViewsByTarget[targetId];
                    if (!queryView) return [3
                    /*break*/
                    , 2];
                    return [4
                    /*yield*/
                    , this_1.localStore.releaseQuery(queryView.query,
                    /*keepPersistedQueryData=*/
                    false).then(function () {
                      _this.remoteStore.unlisten(targetId);

                      _this.removeAndCleanupQuery(queryView);
                    }).catch(ignoreIfPrimaryLeaseLoss)];

                  case 1:
                    _a.sent();

                    _a.label = 2;

                  case 2:
                    return [2
                    /*return*/
                    ];
                }
              });
            };

            this_1 = this;
            _a = 0, removed_1 = removed;
            _b.label = 7;

          case 7:
            if (!(_a < removed_1.length)) return [3
            /*break*/
            , 10];
            targetId = removed_1[_a];
            return [5
            /*yield**/
            , _loop_2(targetId)];

          case 8:
            _b.sent();

            _b.label = 9;

          case 9:
            _a++;
            return [3
            /*break*/
            , 7];

          case 10:
            return [2
            /*return*/
            ];
        }
      });
    });
  }; // PORTING NOTE: Multi-tab only. In other clients, LocalStore is unaware of
  // the online state.


  SyncEngine.prototype.enableNetwork = function () {
    this.localStore.setNetworkEnabled(true);
    return this.remoteStore.enableNetwork();
  }; // PORTING NOTE: Multi-tab only. In other clients, LocalStore is unaware of
  // the online state.


  SyncEngine.prototype.disableNetwork = function () {
    this.localStore.setNetworkEnabled(false);
    return this.remoteStore.disableNetwork();
  };

  SyncEngine.prototype.getRemoteKeysForTarget = function (targetId) {
    var limboResolution = this.limboResolutionsByTarget[targetId];

    if (limboResolution && limboResolution.receivedDocument) {
      return documentKeySet().add(limboResolution.key);
    } else {
      return this.queryViewsByTarget[targetId] ? this.queryViewsByTarget[targetId].view.syncedDocuments : documentKeySet();
    }
  };

  return SyncEngine;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Simple wrapper around a nullable UID. Mostly exists to make code more
 * readable.
 */


var User =
/** @class */
function () {
  function User(uid) {
    this.uid = uid;
  }

  User.prototype.isAuthenticated = function () {
    return this.uid != null;
  };
  /**
   * Returns a key representing this user, suitable for inclusion in a
   * dictionary.
   */


  User.prototype.toKey = function () {
    if (this.isAuthenticated()) {
      return 'uid:' + this.uid;
    } else {
      return 'anonymous-user';
    }
  };

  User.prototype.isEqual = function (otherUser) {
    return otherUser.uid === this.uid;
  };
  /** A user with a null UID. */


  User.UNAUTHENTICATED = new User(null); // TODO(mikelehen): Look into getting a proper uid-equivalent for
  // non-FirebaseAuth providers.

  User.GOOGLE_CREDENTIALS = new User('google-credentials-uid');
  User.FIRST_PARTY = new User('first-party-uid');
  return User;
}();
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var LOG_TAG$9 = 'SharedClientState'; // The format of the LocalStorage key that stores the client state is:
//     firestore_clients_<persistence_prefix>_<instance_key>

var CLIENT_STATE_KEY_PREFIX = 'firestore_clients'; // The format of the WebStorage key that stores the mutation state is:
//     firestore_mutations_<persistence_prefix>_<batch_id>
//     (for unauthenticated users)
// or: firestore_mutations_<persistence_prefix>_<batch_id>_<user_uid>
//
// 'user_uid' is last to avoid needing to escape '_' characters that it might
// contain.

var MUTATION_BATCH_KEY_PREFIX = 'firestore_mutations'; // The format of the WebStorage key that stores a query target's metadata is:
//     firestore_targets_<persistence_prefix>_<target_id>

var QUERY_TARGET_KEY_PREFIX = 'firestore_targets'; // The WebStorage prefix that stores the primary tab's online state. The
// format of the key is:
//     firestore_online_state_<persistence_prefix>

var ONLINE_STATE_KEY_PREFIX = 'firestore_online_state'; // The WebStorage key prefix for the key that stores the last sequence number allocated. The key
// looks like 'firestore_sequence_number_<persistence_prefix>'.

var SEQUENCE_NUMBER_KEY_PREFIX = 'firestore_sequence_number';
/**
 * Holds the state of a mutation batch, including its user ID, batch ID and
 * whether the batch is 'pending', 'acknowledged' or 'rejected'.
 */
// Visible for testing

var MutationMetadata =
/** @class */
function () {
  function MutationMetadata(user, batchId, state, error) {
    this.user = user;
    this.batchId = batchId;
    this.state = state;
    this.error = error;
    assert(error !== undefined === (state === 'rejected'), "MutationMetadata must contain an error iff state is 'rejected'");
  }
  /**
   * Parses a MutationMetadata from its JSON representation in WebStorage.
   * Logs a warning and returns null if the format of the data is not valid.
   */


  MutationMetadata.fromWebStorageEntry = function (user, batchId, value) {
    var mutationBatch = JSON.parse(value);
    var validData = typeof mutationBatch === 'object' && ['pending', 'acknowledged', 'rejected'].indexOf(mutationBatch.state) !== -1 && (mutationBatch.error === undefined || typeof mutationBatch.error === 'object');
    var firestoreError = undefined;

    if (validData && mutationBatch.error) {
      validData = typeof mutationBatch.error.message === 'string' && typeof mutationBatch.error.code === 'string';

      if (validData) {
        firestoreError = new FirestoreError(mutationBatch.error.code, mutationBatch.error.message);
      }
    }

    if (validData) {
      return new MutationMetadata(user, batchId, mutationBatch.state, firestoreError);
    } else {
      error(LOG_TAG$9, "Failed to parse mutation state for ID '" + batchId + "': " + value);
      return null;
    }
  };

  MutationMetadata.prototype.toWebStorageJSON = function () {
    var batchMetadata = {
      state: this.state,
      updateTimeMs: Date.now() // Modify the existing value to trigger update.

    };

    if (this.error) {
      batchMetadata.error = {
        code: this.error.code,
        message: this.error.message
      };
    }

    return JSON.stringify(batchMetadata);
  };

  return MutationMetadata;
}();
/**
 * Holds the state of a query target, including its target ID and whether the
 * target is 'not-current', 'current' or 'rejected'.
 */
// Visible for testing


var QueryTargetMetadata =
/** @class */
function () {
  function QueryTargetMetadata(targetId, state, error) {
    this.targetId = targetId;
    this.state = state;
    this.error = error;
    assert(error !== undefined === (state === 'rejected'), "QueryTargetMetadata must contain an error iff state is 'rejected'");
  }
  /**
   * Parses a QueryTargetMetadata from its JSON representation in WebStorage.
   * Logs a warning and returns null if the format of the data is not valid.
   */


  QueryTargetMetadata.fromWebStorageEntry = function (targetId, value) {
    var targetState = JSON.parse(value);
    var validData = typeof targetState === 'object' && ['not-current', 'current', 'rejected'].indexOf(targetState.state) !== -1 && (targetState.error === undefined || typeof targetState.error === 'object');
    var firestoreError = undefined;

    if (validData && targetState.error) {
      validData = typeof targetState.error.message === 'string' && typeof targetState.error.code === 'string';

      if (validData) {
        firestoreError = new FirestoreError(targetState.error.code, targetState.error.message);
      }
    }

    if (validData) {
      return new QueryTargetMetadata(targetId, targetState.state, firestoreError);
    } else {
      error(LOG_TAG$9, "Failed to parse target state for ID '" + targetId + "': " + value);
      return null;
    }
  };

  QueryTargetMetadata.prototype.toWebStorageJSON = function () {
    var targetState = {
      state: this.state,
      updateTimeMs: Date.now() // Modify the existing value to trigger update.

    };

    if (this.error) {
      targetState.error = {
        code: this.error.code,
        message: this.error.message
      };
    }

    return JSON.stringify(targetState);
  };

  return QueryTargetMetadata;
}();
/**
 * This class represents the immutable ClientState for a client read from
 * WebStorage, containing the list of active query targets.
 */


var RemoteClientState =
/** @class */
function () {
  function RemoteClientState(clientId, activeTargetIds) {
    this.clientId = clientId;
    this.activeTargetIds = activeTargetIds;
  }
  /**
   * Parses a RemoteClientState from the JSON representation in WebStorage.
   * Logs a warning and returns null if the format of the data is not valid.
   */


  RemoteClientState.fromWebStorageEntry = function (clientId, value) {
    var clientState = JSON.parse(value);
    var validData = typeof clientState === 'object' && clientState.activeTargetIds instanceof Array;
    var activeTargetIdsSet = targetIdSet();

    for (var i = 0; validData && i < clientState.activeTargetIds.length; ++i) {
      validData = isSafeInteger(clientState.activeTargetIds[i]);
      activeTargetIdsSet = activeTargetIdsSet.add(clientState.activeTargetIds[i]);
    }

    if (validData) {
      return new RemoteClientState(clientId, activeTargetIdsSet);
    } else {
      error(LOG_TAG$9, "Failed to parse client data for instance '" + clientId + "': " + value);
      return null;
    }
  };

  return RemoteClientState;
}();
/**
 * This class represents the online state for all clients participating in
 * multi-tab. The online state is only written to by the primary client, and
 * used in secondary clients to update their query views.
 */


var SharedOnlineState =
/** @class */
function () {
  function SharedOnlineState(clientId, onlineState) {
    this.clientId = clientId;
    this.onlineState = onlineState;
  }
  /**
   * Parses a SharedOnlineState from its JSON representation in WebStorage.
   * Logs a warning and returns null if the format of the data is not valid.
   */


  SharedOnlineState.fromWebStorageEntry = function (value) {
    var onlineState = JSON.parse(value);
    var validData = typeof onlineState === 'object' && onlineState.onlineState in OnlineState && typeof onlineState.clientId === 'string';

    if (validData) {
      return new SharedOnlineState(onlineState.clientId, OnlineState[onlineState.onlineState]);
    } else {
      error(LOG_TAG$9, "Failed to parse online state: " + value);
      return null;
    }
  };

  return SharedOnlineState;
}();
/**
 * Metadata state of the local client. Unlike `RemoteClientState`, this class is
 * mutable and keeps track of all pending mutations, which allows us to
 * update the range of pending mutation batch IDs as new mutations are added or
 * removed.
 *
 * The data in `LocalClientState` is not read from WebStorage and instead
 * updated via its instance methods. The updated state can be serialized via
 * `toWebStorageJSON()`.
 */
// Visible for testing.


var LocalClientState =
/** @class */
function () {
  function LocalClientState() {
    this.activeTargetIds = targetIdSet();
  }

  LocalClientState.prototype.addQueryTarget = function (targetId) {
    assert(!this.activeTargetIds.has(targetId), "Target with ID '" + targetId + "' already active.");
    this.activeTargetIds = this.activeTargetIds.add(targetId);
  };

  LocalClientState.prototype.removeQueryTarget = function (targetId) {
    this.activeTargetIds = this.activeTargetIds.delete(targetId);
  };
  /**
   * Converts this entry into a JSON-encoded format we can use for WebStorage.
   * Does not encode `clientId` as it is part of the key in WebStorage.
   */


  LocalClientState.prototype.toWebStorageJSON = function () {
    var data = {
      activeTargetIds: this.activeTargetIds.toArray(),
      updateTimeMs: Date.now() // Modify the existing value to trigger update.

    };
    return JSON.stringify(data);
  };

  return LocalClientState;
}();
/**
 * `WebStorageSharedClientState` uses WebStorage (window.localStorage) as the
 * backing store for the SharedClientState. It keeps track of all active
 * clients and supports modifications of the local client's data.
 */


var WebStorageSharedClientState =
/** @class */
function () {
  function WebStorageSharedClientState(queue, platform, persistenceKey, localClientId, initialUser) {
    this.queue = queue;
    this.platform = platform;
    this.persistenceKey = persistenceKey;
    this.localClientId = localClientId;
    this.syncEngine = null;
    this.onlineStateHandler = null;
    this.sequenceNumberHandler = null;
    this.activeClients = {};
    this.storageListener = this.handleWebStorageEvent.bind(this);
    this.started = false;
    /**
     * Captures WebStorage events that occur before `start()` is called. These
     * events are replayed once `WebStorageSharedClientState` is started.
     */

    this.earlyEvents = [];

    if (!WebStorageSharedClientState.isAvailable(this.platform)) {
      throw new FirestoreError(Code.UNIMPLEMENTED, 'LocalStorage is not available on this platform.');
    } // Escape the special characters mentioned here:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions


    var escapedPersistenceKey = persistenceKey.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    this.storage = this.platform.window.localStorage;
    this.currentUser = initialUser;
    this.localClientStorageKey = this.toWebStorageClientStateKey(this.localClientId);
    this.sequenceNumberKey = SEQUENCE_NUMBER_KEY_PREFIX + "_" + persistenceKey;
    this.activeClients[this.localClientId] = new LocalClientState();
    this.clientStateKeyRe = new RegExp("^" + CLIENT_STATE_KEY_PREFIX + "_" + escapedPersistenceKey + "_([^_]*)$");
    this.mutationBatchKeyRe = new RegExp("^" + MUTATION_BATCH_KEY_PREFIX + "_" + escapedPersistenceKey + "_(\\d+)(?:_(.*))?$");
    this.queryTargetKeyRe = new RegExp("^" + QUERY_TARGET_KEY_PREFIX + "_" + escapedPersistenceKey + "_(\\d+)$");
    this.onlineStateKey = ONLINE_STATE_KEY_PREFIX + "_" + persistenceKey; // Rather than adding the storage observer during start(), we add the
    // storage observer during initialization. This ensures that we collect
    // events before other components populate their initial state (during their
    // respective start() calls). Otherwise, we might for example miss a
    // mutation that is added after LocalStore's start() processed the existing
    // mutations but before we observe WebStorage events.

    this.platform.window.addEventListener('storage', this.storageListener);
  }
  /** Returns 'true' if WebStorage is available in the current environment. */


  WebStorageSharedClientState.isAvailable = function (platform) {
    return !!(platform.window && platform.window.localStorage != null);
  };

  WebStorageSharedClientState.prototype.start = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var existingClients, _i, existingClients_1, clientId, storageItem, clientState, onlineStateJSON, onlineState, _a, _b, event_1;

      var _this = this;

      return tslib_1.__generator(this, function (_c) {
        switch (_c.label) {
          case 0:
            assert(!this.started, 'WebStorageSharedClientState already started');
            assert(this.syncEngine !== null, 'syncEngine property must be set before calling start()');
            assert(this.onlineStateHandler !== null, 'onlineStateHandler property must be set before calling start()');
            return [4
            /*yield*/
            , this.syncEngine.getActiveClients()];

          case 1:
            existingClients = _c.sent();

            for (_i = 0, existingClients_1 = existingClients; _i < existingClients_1.length; _i++) {
              clientId = existingClients_1[_i];

              if (clientId === this.localClientId) {
                continue;
              }

              storageItem = this.getItem(this.toWebStorageClientStateKey(clientId));

              if (storageItem) {
                clientState = RemoteClientState.fromWebStorageEntry(clientId, storageItem);

                if (clientState) {
                  this.activeClients[clientState.clientId] = clientState;
                }
              }
            }

            this.persistClientState();
            onlineStateJSON = this.storage.getItem(this.onlineStateKey);

            if (onlineStateJSON) {
              onlineState = this.fromWebStorageOnlineState(onlineStateJSON);

              if (onlineState) {
                this.handleOnlineStateEvent(onlineState);
              }
            }

            for (_a = 0, _b = this.earlyEvents; _a < _b.length; _a++) {
              event_1 = _b[_a];
              this.handleWebStorageEvent(event_1);
            }

            this.earlyEvents = []; // Register a window unload hook to remove the client metadata entry from
            // WebStorage even if `shutdown()` was not called.

            this.platform.window.addEventListener('unload', function () {
              return _this.shutdown();
            });
            this.started = true;
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  WebStorageSharedClientState.prototype.writeSequenceNumber = function (sequenceNumber) {
    this.setItem(this.sequenceNumberKey, JSON.stringify(sequenceNumber));
  };

  WebStorageSharedClientState.prototype.getAllActiveQueryTargets = function () {
    var activeTargets = targetIdSet();
    forEach(this.activeClients, function (key, value) {
      activeTargets = activeTargets.unionWith(value.activeTargetIds);
    });
    return activeTargets;
  };

  WebStorageSharedClientState.prototype.isActiveQueryTarget = function (targetId) {
    // This is not using `obj.forEach` since `forEach` doesn't support early
    // return.
    for (var clientId in this.activeClients) {
      if (this.activeClients.hasOwnProperty(clientId)) {
        if (this.activeClients[clientId].activeTargetIds.has(targetId)) {
          return true;
        }
      }
    }

    return false;
  };

  WebStorageSharedClientState.prototype.addPendingMutation = function (batchId) {
    this.persistMutationState(batchId, 'pending');
  };

  WebStorageSharedClientState.prototype.updateMutationState = function (batchId, state, error) {
    this.persistMutationState(batchId, state, error); // Once a final mutation result is observed by other clients, they no longer
    // access the mutation's metadata entry. Since WebStorage replays events
    // in order, it is safe to delete the entry right after updating it.

    this.removeMutationState(batchId);
  };

  WebStorageSharedClientState.prototype.addLocalQueryTarget = function (targetId) {
    var queryState = 'not-current'; // Lookup an existing query state if the target ID was already registered
    // by another tab

    if (this.isActiveQueryTarget(targetId)) {
      var storageItem = this.storage.getItem(this.toWebStorageQueryTargetMetadataKey(targetId));

      if (storageItem) {
        var metadata = QueryTargetMetadata.fromWebStorageEntry(targetId, storageItem);

        if (metadata) {
          queryState = metadata.state;
        }
      }
    }

    this.localClientState.addQueryTarget(targetId);
    this.persistClientState();
    return queryState;
  };

  WebStorageSharedClientState.prototype.removeLocalQueryTarget = function (targetId) {
    this.localClientState.removeQueryTarget(targetId);
    this.persistClientState();
  };

  WebStorageSharedClientState.prototype.isLocalQueryTarget = function (targetId) {
    return this.localClientState.activeTargetIds.has(targetId);
  };

  WebStorageSharedClientState.prototype.clearQueryState = function (targetId) {
    this.removeItem(this.toWebStorageQueryTargetMetadataKey(targetId));
  };

  WebStorageSharedClientState.prototype.updateQueryState = function (targetId, state, error) {
    this.persistQueryTargetState(targetId, state, error);
  };

  WebStorageSharedClientState.prototype.handleUserChange = function (user, removedBatchIds, addedBatchIds) {
    var _this = this;

    removedBatchIds.forEach(function (batchId) {
      _this.removeMutationState(batchId);
    });
    this.currentUser = user;
    addedBatchIds.forEach(function (batchId) {
      _this.addPendingMutation(batchId);
    });
  };

  WebStorageSharedClientState.prototype.setOnlineState = function (onlineState) {
    this.persistOnlineState(onlineState);
  };

  WebStorageSharedClientState.prototype.shutdown = function () {
    if (this.started) {
      this.platform.window.removeEventListener('storage', this.storageListener);
      this.removeItem(this.localClientStorageKey);
      this.started = false;
    }
  };

  WebStorageSharedClientState.prototype.getItem = function (key) {
    var value = this.storage.getItem(key);
    debug(LOG_TAG$9, 'READ', key, value);
    return value;
  };

  WebStorageSharedClientState.prototype.setItem = function (key, value) {
    debug(LOG_TAG$9, 'SET', key, value);
    this.storage.setItem(key, value);
  };

  WebStorageSharedClientState.prototype.removeItem = function (key) {
    debug(LOG_TAG$9, 'REMOVE', key);
    this.storage.removeItem(key);
  };

  WebStorageSharedClientState.prototype.handleWebStorageEvent = function (event) {
    var _this = this;

    if (event.storageArea === this.storage) {
      debug(LOG_TAG$9, 'EVENT', event.key, event.newValue);

      if (event.key === this.localClientStorageKey) {
        error('Received WebStorage notification for local change. Another client might have ' + 'garbage-collected our state');
        return;
      }

      this.queue.enqueueAndForget(function () {
        return tslib_1.__awaiter(_this, void 0, void 0, function () {
          var clientState, clientId, mutationMetadata, queryTargetMetadata, onlineState, sequenceNumber;
          return tslib_1.__generator(this, function (_a) {
            if (!this.started) {
              this.earlyEvents.push(event);
              return [2
              /*return*/
              ];
            }

            if (event.key === null) {
              return [2
              /*return*/
              ];
            }

            if (this.clientStateKeyRe.test(event.key)) {
              if (event.newValue != null) {
                clientState = this.fromWebStorageClientState(event.key, event.newValue);

                if (clientState) {
                  return [2
                  /*return*/
                  , this.handleClientStateEvent(clientState.clientId, clientState)];
                }
              } else {
                clientId = this.fromWebStorageClientStateKey(event.key);
                return [2
                /*return*/
                , this.handleClientStateEvent(clientId, null)];
              }
            } else if (this.mutationBatchKeyRe.test(event.key)) {
              if (event.newValue !== null) {
                mutationMetadata = this.fromWebStorageMutationMetadata(event.key, event.newValue);

                if (mutationMetadata) {
                  return [2
                  /*return*/
                  , this.handleMutationBatchEvent(mutationMetadata)];
                }
              }
            } else if (this.queryTargetKeyRe.test(event.key)) {
              if (event.newValue !== null) {
                queryTargetMetadata = this.fromWebStorageQueryTargetMetadata(event.key, event.newValue);

                if (queryTargetMetadata) {
                  return [2
                  /*return*/
                  , this.handleQueryTargetEvent(queryTargetMetadata)];
                }
              }
            } else if (event.key === this.onlineStateKey) {
              if (event.newValue !== null) {
                onlineState = this.fromWebStorageOnlineState(event.newValue);

                if (onlineState) {
                  return [2
                  /*return*/
                  , this.handleOnlineStateEvent(onlineState)];
                }
              }
            } else if (event.key === this.sequenceNumberKey) {
              assert(!!this.sequenceNumberHandler, 'Missing sequenceNumberHandler');
              sequenceNumber = fromWebStorageSequenceNumber(event.newValue);

              if (sequenceNumber !== ListenSequence.INVALID) {
                this.sequenceNumberHandler(sequenceNumber);
              }
            }

            return [2
            /*return*/
            ];
          });
        });
      });
    }
  };

  Object.defineProperty(WebStorageSharedClientState.prototype, "localClientState", {
    get: function () {
      return this.activeClients[this.localClientId];
    },
    enumerable: true,
    configurable: true
  });

  WebStorageSharedClientState.prototype.persistClientState = function () {
    this.setItem(this.localClientStorageKey, this.localClientState.toWebStorageJSON());
  };

  WebStorageSharedClientState.prototype.persistMutationState = function (batchId, state, error) {
    var mutationState = new MutationMetadata(this.currentUser, batchId, state, error);
    var mutationKey = this.toWebStorageMutationBatchKey(batchId);
    this.setItem(mutationKey, mutationState.toWebStorageJSON());
  };

  WebStorageSharedClientState.prototype.removeMutationState = function (batchId) {
    var mutationKey = this.toWebStorageMutationBatchKey(batchId);
    this.removeItem(mutationKey);
  };

  WebStorageSharedClientState.prototype.persistOnlineState = function (onlineState) {
    var entry = {
      clientId: this.localClientId,
      onlineState: OnlineState[onlineState]
    };
    this.storage.setItem(this.onlineStateKey, JSON.stringify(entry));
  };

  WebStorageSharedClientState.prototype.persistQueryTargetState = function (targetId, state, error) {
    var targetKey = this.toWebStorageQueryTargetMetadataKey(targetId);
    var targetMetadata = new QueryTargetMetadata(targetId, state, error);
    this.setItem(targetKey, targetMetadata.toWebStorageJSON());
  };
  /** Assembles the key for a client state in WebStorage */


  WebStorageSharedClientState.prototype.toWebStorageClientStateKey = function (clientId) {
    assert(clientId.indexOf('_') === -1, "Client key cannot contain '_', but was '" + clientId + "'");
    return CLIENT_STATE_KEY_PREFIX + "_" + this.persistenceKey + "_" + clientId;
  };
  /** Assembles the key for a query state in WebStorage */


  WebStorageSharedClientState.prototype.toWebStorageQueryTargetMetadataKey = function (targetId) {
    return QUERY_TARGET_KEY_PREFIX + "_" + this.persistenceKey + "_" + targetId;
  };
  /** Assembles the key for a mutation batch in WebStorage */


  WebStorageSharedClientState.prototype.toWebStorageMutationBatchKey = function (batchId) {
    var mutationKey = MUTATION_BATCH_KEY_PREFIX + "_" + this.persistenceKey + "_" + batchId;

    if (this.currentUser.isAuthenticated()) {
      mutationKey += "_" + this.currentUser.uid;
    }

    return mutationKey;
  };
  /**
   * Parses a client state key in WebStorage. Returns null if the key does not
   * match the expected key format.
   */


  WebStorageSharedClientState.prototype.fromWebStorageClientStateKey = function (key) {
    var match = this.clientStateKeyRe.exec(key);
    return match ? match[1] : null;
  };
  /**
   * Parses a client state in WebStorage. Returns 'null' if the value could not
   * be parsed.
   */


  WebStorageSharedClientState.prototype.fromWebStorageClientState = function (key, value) {
    var clientId = this.fromWebStorageClientStateKey(key);
    assert(clientId !== null, "Cannot parse client state key '" + key + "'");
    return RemoteClientState.fromWebStorageEntry(clientId, value);
  };
  /**
   * Parses a mutation batch state in WebStorage. Returns 'null' if the value
   * could not be parsed.
   */


  WebStorageSharedClientState.prototype.fromWebStorageMutationMetadata = function (key, value) {
    var match = this.mutationBatchKeyRe.exec(key);
    assert(match !== null, "Cannot parse mutation batch key '" + key + "'");
    var batchId = Number(match[1]);
    var userId = match[2] !== undefined ? match[2] : null;
    return MutationMetadata.fromWebStorageEntry(new User(userId), batchId, value);
  };
  /**
   * Parses a query target state from WebStorage. Returns 'null' if the value
   * could not be parsed.
   */


  WebStorageSharedClientState.prototype.fromWebStorageQueryTargetMetadata = function (key, value) {
    var match = this.queryTargetKeyRe.exec(key);
    assert(match !== null, "Cannot parse query target key '" + key + "'");
    var targetId = Number(match[1]);
    return QueryTargetMetadata.fromWebStorageEntry(targetId, value);
  };
  /**
   * Parses an online state from WebStorage. Returns 'null' if the value
   * could not be parsed.
   */


  WebStorageSharedClientState.prototype.fromWebStorageOnlineState = function (value) {
    return SharedOnlineState.fromWebStorageEntry(value);
  };

  WebStorageSharedClientState.prototype.handleMutationBatchEvent = function (mutationBatch) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        if (mutationBatch.user.uid !== this.currentUser.uid) {
          debug(LOG_TAG$9, "Ignoring mutation for non-active user " + mutationBatch.user.uid);
          return [2
          /*return*/
          ];
        }

        return [2
        /*return*/
        , this.syncEngine.applyBatchState(mutationBatch.batchId, mutationBatch.state, mutationBatch.error)];
      });
    });
  };

  WebStorageSharedClientState.prototype.handleQueryTargetEvent = function (targetMetadata) {
    return this.syncEngine.applyTargetState(targetMetadata.targetId, targetMetadata.state, targetMetadata.error);
  };

  WebStorageSharedClientState.prototype.handleClientStateEvent = function (clientId, clientState) {
    var _this = this;

    var existingTargets = this.getAllActiveQueryTargets();

    if (clientState) {
      this.activeClients[clientId] = clientState;
    } else {
      delete this.activeClients[clientId];
    }

    var newTargets = this.getAllActiveQueryTargets();
    var addedTargets = [];
    var removedTargets = [];
    newTargets.forEach(function (targetId) {
      return tslib_1.__awaiter(_this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
          if (!existingTargets.has(targetId)) {
            addedTargets.push(targetId);
          }

          return [2
          /*return*/
          ];
        });
      });
    });
    existingTargets.forEach(function (targetId) {
      return tslib_1.__awaiter(_this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
          if (!newTargets.has(targetId)) {
            removedTargets.push(targetId);
          }

          return [2
          /*return*/
          ];
        });
      });
    });
    return this.syncEngine.applyActiveTargetsChange(addedTargets, removedTargets);
  };

  WebStorageSharedClientState.prototype.handleOnlineStateEvent = function (onlineState) {
    // We check whether the client that wrote this online state is still active
    // by comparing its client ID to the list of clients kept active in
    // IndexedDb. If a client does not update their IndexedDb client state
    // within 5 seconds, it is considered inactive and we don't emit an online
    // state event.
    if (this.activeClients[onlineState.clientId]) {
      this.onlineStateHandler(onlineState.onlineState);
    }
  };

  return WebStorageSharedClientState;
}();

function fromWebStorageSequenceNumber(seqString) {
  var sequenceNumber = ListenSequence.INVALID;

  if (seqString != null) {
    try {
      var parsed = JSON.parse(seqString);
      assert(typeof parsed === 'number', 'Found non-numeric sequence number');
      sequenceNumber = parsed;
    } catch (e) {
      error(LOG_TAG$9, 'Failed to read sequence number from WebStorage', e);
    }
  }

  return sequenceNumber;
}
/**
 * `MemorySharedClientState` is a simple implementation of SharedClientState for
 * clients using memory persistence. The state in this class remains fully
 * isolated and no synchronization is performed.
 */


var MemorySharedClientState =
/** @class */
function () {
  function MemorySharedClientState() {
    this.localState = new LocalClientState();
    this.queryState = {};
    this.syncEngine = null;
    this.onlineStateHandler = null;
    this.sequenceNumberHandler = null;
  }

  MemorySharedClientState.prototype.addPendingMutation = function (batchId) {// No op.
  };

  MemorySharedClientState.prototype.updateMutationState = function (batchId, state, error) {// No op.
  };

  MemorySharedClientState.prototype.addLocalQueryTarget = function (targetId) {
    this.localState.addQueryTarget(targetId);
    return this.queryState[targetId] || 'not-current';
  };

  MemorySharedClientState.prototype.updateQueryState = function (targetId, state, error) {
    this.queryState[targetId] = state;
  };

  MemorySharedClientState.prototype.removeLocalQueryTarget = function (targetId) {
    this.localState.removeQueryTarget(targetId);
  };

  MemorySharedClientState.prototype.isLocalQueryTarget = function (targetId) {
    return this.localState.activeTargetIds.has(targetId);
  };

  MemorySharedClientState.prototype.clearQueryState = function (targetId) {
    delete this.queryState[targetId];
  };

  MemorySharedClientState.prototype.getAllActiveQueryTargets = function () {
    return this.localState.activeTargetIds;
  };

  MemorySharedClientState.prototype.isActiveQueryTarget = function (targetId) {
    return this.localState.activeTargetIds.has(targetId);
  };

  MemorySharedClientState.prototype.start = function () {
    this.localState = new LocalClientState();
    return Promise.resolve();
  };

  MemorySharedClientState.prototype.handleUserChange = function (user, removedBatchIds, addedBatchIds) {// No op.
  };

  MemorySharedClientState.prototype.setOnlineState = function (onlineState) {// No op.
  };

  MemorySharedClientState.prototype.shutdown = function () {};

  MemorySharedClientState.prototype.writeSequenceNumber = function (sequenceNumber) {};

  return MemorySharedClientState;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var LOG_TAG$a = 'FirestoreClient';
/** DOMException error code constants. */

var DOM_EXCEPTION_INVALID_STATE = 11;
var DOM_EXCEPTION_ABORTED = 20;
var DOM_EXCEPTION_QUOTA_EXCEEDED = 22;

var IndexedDbPersistenceSettings =
/** @class */
function () {
  function IndexedDbPersistenceSettings(cacheSizeBytes, synchronizeTabs) {
    this.cacheSizeBytes = cacheSizeBytes;
    this.synchronizeTabs = synchronizeTabs;
  }

  IndexedDbPersistenceSettings.prototype.lruParams = function () {
    return LruParams.withCacheSize(this.cacheSizeBytes);
  };

  return IndexedDbPersistenceSettings;
}();

var MemoryPersistenceSettings =
/** @class */
function () {
  function MemoryPersistenceSettings() {}

  return MemoryPersistenceSettings;
}();
/**
 * FirestoreClient is a top-level class that constructs and owns all of the
 * pieces of the client SDK architecture. It is responsible for creating the
 * async queue that is shared by all of the other components in the system.
 */


var FirestoreClient =
/** @class */
function () {
  function FirestoreClient(platform, databaseInfo, credentials,
  /**
   * Asynchronous queue responsible for all of our internal processing. When
   * we get incoming work from the user (via public API) or the network
   * (incoming GRPC messages), we should always schedule onto this queue.
   * This ensures all of our work is properly serialized (e.g. we don't
   * start processing a new operation while the previous one is waiting for
   * an async I/O to complete).
   */
  asyncQueue) {
    this.platform = platform;
    this.databaseInfo = databaseInfo;
    this.credentials = credentials;
    this.asyncQueue = asyncQueue;
    this.clientId = AutoId.newId();
    this._clientShutdown = false;
  }
  /**
   * Starts up the FirestoreClient, returning only whether or not enabling
   * persistence succeeded.
   *
   * The intent here is to "do the right thing" as far as users are concerned.
   * Namely, in cases where offline persistence is requested and possible,
   * enable it, but otherwise fall back to persistence disabled. For the most
   * part we expect this to succeed one way or the other so we don't expect our
   * users to actually wait on the firestore.enablePersistence Promise since
   * they generally won't care.
   *
   * Of course some users actually do care about whether or not persistence
   * was successfully enabled, so the Promise returned from this method
   * indicates this outcome.
   *
   * This presents a problem though: even before enablePersistence resolves or
   * rejects, users may have made calls to e.g. firestore.collection() which
   * means that the FirestoreClient in there will be available and will be
   * enqueuing actions on the async queue.
   *
   * Meanwhile any failure of an operation on the async queue causes it to
   * panic and reject any further work, on the premise that unhandled errors
   * are fatal.
   *
   * Consequently the fallback is handled internally here in start, and if the
   * fallback succeeds we signal success to the async queue even though the
   * start() itself signals failure.
   *
   * @param persistenceSettings Settings object to configure offline
   *     persistence.
   * @returns A deferred result indicating the user-visible result of enabling
   *     offline persistence. This method will reject this if IndexedDB fails to
   *     start for any reason. If usePersistence is false this is
   *     unconditionally resolved.
   */


  FirestoreClient.prototype.start = function (persistenceSettings) {
    var _this = this;

    this.verifyNotShutdown(); // We defer our initialization until we get the current user from
    // setChangeListener(). We block the async queue until we got the initial
    // user and the initialization is completed. This will prevent any scheduled
    // work from happening before initialization is completed.
    //
    // If initializationDone resolved then the FirestoreClient is in a usable
    // state.

    var initializationDone = new Deferred(); // If usePersistence is true, certain classes of errors while starting are
    // recoverable but only by falling back to persistence disabled.
    //
    // If there's an error in the first case but not in recovery we cannot
    // reject the promise blocking the async queue because this will cause the
    // async queue to panic.

    var persistenceResult = new Deferred();
    var initialized = false;
    this.credentials.setChangeListener(function (user) {
      if (!initialized) {
        initialized = true;

        _this.initializePersistence(persistenceSettings, persistenceResult, user).then(function (maybeLruGc) {
          return _this.initializeRest(user, maybeLruGc);
        }).then(initializationDone.resolve, initializationDone.reject);
      } else {
        _this.asyncQueue.enqueueAndForget(function () {
          return _this.handleCredentialChange(user);
        });
      }
    }); // Block the async queue until initialization is done

    this.asyncQueue.enqueueAndForget(function () {
      return initializationDone.promise;
    }); // Return only the result of enabling persistence. Note that this does not
    // need to await the completion of initializationDone because the result of
    // this method should not reflect any other kind of failure to start.

    return persistenceResult.promise;
  };
  /** Enables the network connection and requeues all pending operations. */


  FirestoreClient.prototype.enableNetwork = function () {
    var _this = this;

    this.verifyNotShutdown();
    return this.asyncQueue.enqueue(function () {
      return _this.syncEngine.enableNetwork();
    });
  };
  /**
   * Initializes persistent storage, attempting to use IndexedDB if
   * usePersistence is true or memory-only if false.
   *
   * If IndexedDB fails because it's already open in another tab or because the
   * platform can't possibly support our implementation then this method rejects
   * the persistenceResult and falls back on memory-only persistence.
   *
   * @param persistenceSettings Settings object to configure offline persistence
   * @param persistenceResult A deferred result indicating the user-visible
   *     result of enabling offline persistence. This method will reject this if
   *     IndexedDB fails to start for any reason. If usePersistence is false
   *     this is unconditionally resolved.
   * @returns a Promise indicating whether or not initialization should
   *     continue, i.e. that one of the persistence implementations actually
   *     succeeded.
   */


  FirestoreClient.prototype.initializePersistence = function (persistenceSettings, persistenceResult, user) {
    var _this = this;

    if (persistenceSettings instanceof IndexedDbPersistenceSettings) {
      return this.startIndexedDbPersistence(user, persistenceSettings).then(function (maybeLruGc) {
        persistenceResult.resolve();
        return maybeLruGc;
      }).catch(function (error) {
        // Regardless of whether or not the retry succeeds, from an user
        // perspective, offline persistence has failed.
        persistenceResult.reject(error); // An unknown failure on the first stage shuts everything down.

        if (!_this.canFallback(error)) {
          throw error;
        }

        console.warn('Error enabling offline persistence. Falling back to' + ' persistence disabled: ' + error);
        return _this.startMemoryPersistence();
      });
    } else {
      // When usePersistence == false, enabling offline persistence is defined
      // to unconditionally succeed. This allows start() to have the same
      // signature for both cases, despite the fact that the returned promise
      // is only used in the enablePersistence call.
      persistenceResult.resolve();
      return this.startMemoryPersistence();
    }
  };
  /**
   * Decides whether the provided error allows us to gracefully disable
   * persistence (as opposed to crashing the client).
   */


  FirestoreClient.prototype.canFallback = function (error) {
    if (error instanceof FirestoreError) {
      return error.code === Code.FAILED_PRECONDITION || error.code === Code.UNIMPLEMENTED;
    } else if (typeof DOMException !== 'undefined' && error instanceof DOMException) {
      // There are a few known circumstances where we can open IndexedDb but
      // trying to read/write will fail (e.g. quota exceeded). For
      // well-understood cases, we attempt to detect these and then gracefully
      // fall back to memory persistence.
      // NOTE: Rather than continue to add to this list, we could decide to
      // always fall back, with the risk that we might accidentally hide errors
      // representing actual SDK bugs.
      return (// When the browser is out of quota we could get either quota exceeded
        // or an aborted error depending on whether the error happened during
        // schema migration.
        error.code === DOM_EXCEPTION_QUOTA_EXCEEDED || error.code === DOM_EXCEPTION_ABORTED || // Firefox Private Browsing mode disables IndexedDb and returns
        // INVALID_STATE for any usage.
        error.code === DOM_EXCEPTION_INVALID_STATE
      );
    }

    return true;
  };
  /**
   * Checks that the client has not been shutdown. Ensures that other methods on
   * this class cannot be called after the client is shutdown.
   */


  FirestoreClient.prototype.verifyNotShutdown = function () {
    if (this._clientShutdown) {
      throw new FirestoreError(Code.FAILED_PRECONDITION, 'The client has already been shutdown.');
    }
  };
  /**
   * Starts IndexedDB-based persistence.
   *
   * @returns A promise indicating success or failure.
   */


  FirestoreClient.prototype.startIndexedDbPersistence = function (user, settings) {
    var _this = this; // TODO(http://b/33384523): For now we just disable garbage collection
    // when persistence is enabled.


    var storagePrefix = IndexedDbPersistence.buildStoragePrefix(this.databaseInfo); // Opt to use proto3 JSON in case the platform doesn't support Uint8Array.

    var serializer = new JsonProtoSerializer(this.databaseInfo.databaseId, {
      useProto3Json: true
    });
    return Promise.resolve().then(function () {
      return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var persistence, lruParams;
        return tslib_1.__generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (settings.synchronizeTabs && !WebStorageSharedClientState.isAvailable(this.platform)) {
                throw new FirestoreError(Code.UNIMPLEMENTED, 'IndexedDB persistence is only available on platforms that support LocalStorage.');
              }

              lruParams = settings.lruParams();
              if (!settings.synchronizeTabs) return [3
              /*break*/
              , 2];
              this.sharedClientState = new WebStorageSharedClientState(this.asyncQueue, this.platform, storagePrefix, this.clientId, user);
              return [4
              /*yield*/
              , IndexedDbPersistence.createMultiClientIndexedDbPersistence(storagePrefix, this.clientId, this.platform, this.asyncQueue, serializer, lruParams, {
                sequenceNumberSyncer: this.sharedClientState
              })];

            case 1:
              persistence = _a.sent();
              return [3
              /*break*/
              , 4];

            case 2:
              this.sharedClientState = new MemorySharedClientState();
              return [4
              /*yield*/
              , IndexedDbPersistence.createIndexedDbPersistence(storagePrefix, this.clientId, this.platform, this.asyncQueue, serializer, lruParams)];

            case 3:
              persistence = _a.sent();
              _a.label = 4;

            case 4:
              this.persistence = persistence;
              return [2
              /*return*/
              , persistence.referenceDelegate.garbageCollector];
          }
        });
      });
    });
  };
  /**
   * Starts Memory-backed persistence. In practice this cannot fail.
   *
   * @returns A promise that will successfully resolve.
   */


  FirestoreClient.prototype.startMemoryPersistence = function () {
    this.persistence = MemoryPersistence.createEagerPersistence(this.clientId);
    this.sharedClientState = new MemorySharedClientState();
    return Promise.resolve(null);
  };
  /**
   * Initializes the rest of the FirestoreClient, assuming the initial user
   * has been obtained from the credential provider and some persistence
   * implementation is available in this.persistence.
   */


  FirestoreClient.prototype.initializeRest = function (user, maybeLruGc) {
    var _this = this;

    debug(LOG_TAG$a, 'Initializing. user=', user.uid);
    return this.platform.loadConnection(this.databaseInfo).then(function (connection) {
      return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var connectivityMonitor, serializer, datastore, remoteStoreOnlineStateChangedHandler, sharedClientStateOnlineStateChangedHandler;

        var _this = this;

        return tslib_1.__generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              this.localStore = new LocalStore(this.persistence, user);

              if (maybeLruGc) {
                // We're running LRU Garbage collection. Set up the scheduler.
                this.lruScheduler = new LruScheduler(maybeLruGc, this.asyncQueue, this.localStore);
              }

              connectivityMonitor = this.platform.newConnectivityMonitor();
              serializer = this.platform.newSerializer(this.databaseInfo.databaseId);
              datastore = new Datastore(this.asyncQueue, connection, this.credentials, serializer);

              remoteStoreOnlineStateChangedHandler = function (onlineState) {
                return _this.syncEngine.applyOnlineStateChange(onlineState, OnlineStateSource.RemoteStore);
              };

              sharedClientStateOnlineStateChangedHandler = function (onlineState) {
                return _this.syncEngine.applyOnlineStateChange(onlineState, OnlineStateSource.SharedClientState);
              };

              this.remoteStore = new RemoteStore(this.localStore, datastore, this.asyncQueue, remoteStoreOnlineStateChangedHandler, connectivityMonitor);
              this.syncEngine = new SyncEngine(this.localStore, this.remoteStore, this.sharedClientState, user);
              this.sharedClientState.onlineStateHandler = sharedClientStateOnlineStateChangedHandler; // Set up wiring between sync engine and other components

              this.remoteStore.syncEngine = this.syncEngine;
              this.sharedClientState.syncEngine = this.syncEngine;
              this.eventMgr = new EventManager(this.syncEngine); // PORTING NOTE: LocalStore doesn't need an explicit start() on the Web.

              return [4
              /*yield*/
              , this.sharedClientState.start()];

            case 1:
              // PORTING NOTE: LocalStore doesn't need an explicit start() on the Web.
              _a.sent();

              return [4
              /*yield*/
              , this.remoteStore.start()];

            case 2:
              _a.sent(); // NOTE: This will immediately call the listener, so we make sure to
              // set it after localStore / remoteStore are started.


              return [4
              /*yield*/
              , this.persistence.setPrimaryStateListener(function (isPrimary) {
                return tslib_1.__awaiter(_this, void 0, void 0, function () {
                  return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                      case 0:
                        return [4
                        /*yield*/
                        , this.syncEngine.applyPrimaryState(isPrimary)];

                      case 1:
                        _a.sent();

                        if (this.lruScheduler) {
                          if (isPrimary && !this.lruScheduler.started) {
                            this.lruScheduler.start();
                          } else if (!isPrimary) {
                            this.lruScheduler.stop();
                          }
                        }

                        return [2
                        /*return*/
                        ];
                    }
                  });
                });
              })];

            case 3:
              // NOTE: This will immediately call the listener, so we make sure to
              // set it after localStore / remoteStore are started.
              _a.sent(); // When a user calls clearPersistence() in one client, all other clientfs
              // need to shut down to allow the delete to succeed.


              return [4
              /*yield*/
              , this.persistence.setDatabaseDeletedListener(function () {
                return tslib_1.__awaiter(_this, void 0, void 0, function () {
                  return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                      case 0:
                        return [4
                        /*yield*/
                        , this.shutdown()];

                      case 1:
                        _a.sent();

                        return [2
                        /*return*/
                        ];
                    }
                  });
                });
              })];

            case 4:
              // When a user calls clearPersistence() in one client, all other clientfs
              // need to shut down to allow the delete to succeed.
              _a.sent();

              return [2
              /*return*/
              ];
          }
        });
      });
    });
  };

  FirestoreClient.prototype.handleCredentialChange = function (user) {
    this.asyncQueue.verifyOperationInProgress();
    debug(LOG_TAG$a, 'Credential Changed. Current user: ' + user.uid);
    return this.syncEngine.handleCredentialChange(user);
  };
  /** Disables the network connection. Pending operations will not complete. */


  FirestoreClient.prototype.disableNetwork = function () {
    var _this = this;

    this.verifyNotShutdown();
    return this.asyncQueue.enqueue(function () {
      return _this.syncEngine.disableNetwork();
    });
  };

  FirestoreClient.prototype.shutdown = function () {
    var _this = this;

    return this.asyncQueue.enqueue(function () {
      return tslib_1.__awaiter(_this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (!!this._clientShutdown) return [3
              /*break*/
              , 4]; // PORTING NOTE: LocalStore does not need an explicit shutdown on web.

              if (this.lruScheduler) {
                this.lruScheduler.stop();
              }

              return [4
              /*yield*/
              , this.remoteStore.shutdown()];

            case 1:
              _a.sent();

              return [4
              /*yield*/
              , this.sharedClientState.shutdown()];

            case 2:
              _a.sent();

              return [4
              /*yield*/
              , this.persistence.shutdown()];

            case 3:
              _a.sent(); // `removeChangeListener` must be called after shutting down the
              // RemoteStore as it will prevent the RemoteStore from retrieving
              // auth tokens.


              this.credentials.removeChangeListener();
              this._clientShutdown = true;
              _a.label = 4;

            case 4:
              return [2
              /*return*/
              ];
          }
        });
      });
    });
  };

  FirestoreClient.prototype.listen = function (query, observer, options) {
    var _this = this;

    this.verifyNotShutdown();
    var listener = new QueryListener(query, observer, options);
    this.asyncQueue.enqueueAndForget(function () {
      return _this.eventMgr.listen(listener);
    });
    return listener;
  };

  FirestoreClient.prototype.unlisten = function (listener) {
    var _this = this;

    this.verifyNotShutdown();
    this.asyncQueue.enqueueAndForget(function () {
      return _this.eventMgr.unlisten(listener);
    });
  };

  FirestoreClient.prototype.getDocumentFromLocalCache = function (docKey) {
    var _this = this;

    this.verifyNotShutdown();
    return this.asyncQueue.enqueue(function () {
      return _this.localStore.readDocument(docKey);
    }).then(function (maybeDoc) {
      if (maybeDoc instanceof Document) {
        return maybeDoc;
      } else if (maybeDoc instanceof NoDocument) {
        return null;
      } else {
        throw new FirestoreError(Code.UNAVAILABLE, 'Failed to get document from cache. (However, this document may ' + "exist on the server. Run again without setting 'source' in " + 'the GetOptions to attempt to retrieve the document from the ' + 'server.)');
      }
    });
  };

  FirestoreClient.prototype.getDocumentsFromLocalCache = function (query) {
    var _this = this;

    this.verifyNotShutdown();
    return this.asyncQueue.enqueue(function () {
      return _this.localStore.executeQuery(query);
    }).then(function (docs) {
      var remoteKeys = documentKeySet();
      var view = new View(query, remoteKeys);
      var viewDocChanges = view.computeDocChanges(docs);
      return view.applyChanges(viewDocChanges,
      /* updateLimboDocuments= */
      false).snapshot;
    });
  };

  FirestoreClient.prototype.write = function (mutations) {
    var _this = this;

    this.verifyNotShutdown();
    var deferred = new Deferred();
    this.asyncQueue.enqueueAndForget(function () {
      return _this.syncEngine.write(mutations, deferred);
    });
    return deferred.promise;
  };

  FirestoreClient.prototype.databaseId = function () {
    return this.databaseInfo.databaseId;
  };

  Object.defineProperty(FirestoreClient.prototype, "clientShutdown", {
    get: function () {
      return this._clientShutdown;
    },
    enumerable: true,
    configurable: true
  });

  FirestoreClient.prototype.transaction = function (updateFunction) {
    var _this = this;

    this.verifyNotShutdown(); // We have to wait for the async queue to be sure syncEngine is initialized.

    return this.asyncQueue.enqueue(function () {
      return tslib_1.__awaiter(_this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
          return [2
          /*return*/
          ];
        });
      });
    }).then(function () {
      return _this.syncEngine.runTransaction(updateFunction);
    });
  };

  return FirestoreClient;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * A wrapper implementation of Observer<T> that will dispatch events
 * asynchronously. To allow immediate silencing, a mute call is added which
 * causes events scheduled to no longer be raised.
 */


var AsyncObserver =
/** @class */
function () {
  function AsyncObserver(observer) {
    this.observer = observer;
    /**
     * When set to true, will not raise future events. Necessary to deal with
     * async detachment of listener.
     */

    this.muted = false;
  }

  AsyncObserver.prototype.next = function (value) {
    this.scheduleEvent(this.observer.next, value);
  };

  AsyncObserver.prototype.error = function (error) {
    this.scheduleEvent(this.observer.error, error);
  };

  AsyncObserver.prototype.mute = function () {
    this.muted = true;
  };

  AsyncObserver.prototype.scheduleEvent = function (eventHandler, event) {
    var _this = this;

    if (!this.muted) {
      setTimeout(function () {
        if (!_this.muted) {
          eventHandler(event);
        }
      }, 0);
    }
  };

  return AsyncObserver;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// The objects that are a part of this API are exposed to third-parties as
// compiled javascript so we want to flag our private members with a leading
// underscore to discourage their use.
// tslint:disable:strip-private-property-underscore

/**
 * A FieldPath refers to a field in a document. The path may consist of a single
 * field name (referring to a top-level field in the document), or a list of
 * field names (referring to a nested field in the document).
 */


var FieldPath$1 =
/** @class */
function () {
  /**
   * Creates a FieldPath from the provided field names. If more than one field
   * name is provided, the path will point to a nested field in a document.
   *
   * @param fieldNames A list of field names.
   */
  function FieldPath$1() {
    var fieldNames = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      fieldNames[_i] = arguments[_i];
    }

    validateNamedArrayAtLeastNumberOfElements('FieldPath', fieldNames, 'fieldNames', 1);

    for (var i = 0; i < fieldNames.length; ++i) {
      validateArgType('FieldPath', 'string', i, fieldNames[i]);

      if (fieldNames[i].length === 0) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). " + 'Field names must not be empty.');
      }
    }

    this._internalPath = new FieldPath(fieldNames);
  }

  FieldPath$1.documentId = function () {
    return FieldPath$1._DOCUMENT_ID;
  };

  FieldPath$1.prototype.isEqual = function (other) {
    if (!(other instanceof FieldPath$1)) {
      throw invalidClassError('isEqual', 'FieldPath', 1, other);
    }

    return this._internalPath.isEqual(other._internalPath);
  };
  /**
   * Internal Note: The backend doesn't technically support querying by
   * document ID. Instead it queries by the entire document name (full path
   * included), but in the cases we currently support documentId(), the net
   * effect is the same.
   */


  FieldPath$1._DOCUMENT_ID = new FieldPath$1(FieldPath.keyField().canonicalString());
  return FieldPath$1;
}();
/**
 * Matches any characters in a field path string that are reserved.
 */


var RESERVED = new RegExp('[~\\*/\\[\\]]');
/**
 * Parses a field path string into a FieldPath, treating dots as separators.
 */

function fromDotSeparatedString(path) {
  var found = path.search(RESERVED);

  if (found >= 0) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid field path (" + path + "). Paths must not contain " + "'~', '*', '/', '[', or ']'");
  }

  try {
    return new (FieldPath$1.bind.apply(FieldPath$1, [void 0].concat(path.split('.'))))();
  } catch (e) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid field path (" + path + "). Paths must not be empty, " + "begin with '.', end with '.', or contain '..'");
  }
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var OAuthToken =
/** @class */
function () {
  function OAuthToken(value, user) {
    this.user = user;
    this.type = 'OAuth';
    this.authHeaders = {
      Authorization: "Bearer " + value
    };
  }

  return OAuthToken;
}();
/** A CredentialsProvider that always yields an empty token. */


var EmptyCredentialsProvider =
/** @class */
function () {
  function EmptyCredentialsProvider() {
    /**
     * Stores the listener registered with setChangeListener()
     * This isn't actually necessary since the UID never changes, but we use this
     * to verify the listen contract is adhered to in tests.
     */
    this.changeListener = null;
  }

  EmptyCredentialsProvider.prototype.getToken = function () {
    return Promise.resolve(null);
  };

  EmptyCredentialsProvider.prototype.invalidateToken = function () {};

  EmptyCredentialsProvider.prototype.setChangeListener = function (changeListener) {
    assert(!this.changeListener, 'Can only call setChangeListener() once.');
    this.changeListener = changeListener; // Fire with initial user.

    changeListener(User.UNAUTHENTICATED);
  };

  EmptyCredentialsProvider.prototype.removeChangeListener = function () {
    assert(this.changeListener !== null, 'removeChangeListener() when no listener registered');
    this.changeListener = null;
  };

  return EmptyCredentialsProvider;
}();

var FirebaseCredentialsProvider =
/** @class */
function () {
  function FirebaseCredentialsProvider(app) {
    var _this = this;

    this.app = app;
    /**
     * The auth token listener registered with FirebaseApp, retained here so we
     * can unregister it.
     */

    this.tokenListener = null;
    /**
     * Counter used to detect if the token changed while a getToken request was
     * outstanding.
     */

    this.tokenCounter = 0;
    /** The listener registered with setChangeListener(). */

    this.changeListener = null;
    this.forceRefresh = false;

    this.tokenListener = function () {
      _this.tokenCounter++;
      _this.currentUser = _this.getUser();

      if (_this.changeListener) {
        _this.changeListener(_this.currentUser);
      }
    };

    this.tokenCounter = 0; // Will fire at least once where we set this.currentUser

    this.app.INTERNAL.addAuthTokenListener(this.tokenListener);
  }

  FirebaseCredentialsProvider.prototype.getToken = function () {
    var _this = this;

    assert(this.tokenListener != null, 'getToken cannot be called after listener removed.'); // Take note of the current value of the tokenCounter so that this method
    // can fail (with an ABORTED error) if there is a token change while the
    // request is outstanding.

    var initialTokenCounter = this.tokenCounter;
    var forceRefresh = this.forceRefresh;
    this.forceRefresh = false;
    return this.app.INTERNAL.getToken(forceRefresh).then(function (tokenData) {
      // Cancel the request since the token changed while the request was
      // outstanding so the response is potentially for a previous user (which
      // user, we can't be sure).
      if (_this.tokenCounter !== initialTokenCounter) {
        throw new FirestoreError(Code.ABORTED, 'getToken aborted due to token change.');
      } else {
        if (tokenData) {
          assert(typeof tokenData.accessToken === 'string', 'Invalid tokenData returned from getToken():' + tokenData);
          return new OAuthToken(tokenData.accessToken, _this.currentUser);
        } else {
          return null;
        }
      }
    });
  };

  FirebaseCredentialsProvider.prototype.invalidateToken = function () {
    this.forceRefresh = true;
  };

  FirebaseCredentialsProvider.prototype.setChangeListener = function (changeListener) {
    assert(!this.changeListener, 'Can only call setChangeListener() once.');
    this.changeListener = changeListener; // Fire the initial event, but only if we received the initial user

    if (this.currentUser) {
      changeListener(this.currentUser);
    }
  };

  FirebaseCredentialsProvider.prototype.removeChangeListener = function () {
    assert(this.tokenListener != null, 'removeChangeListener() called twice');
    assert(this.changeListener !== null, 'removeChangeListener() called when no listener registered');
    this.app.INTERNAL.removeAuthTokenListener(this.tokenListener);
    this.tokenListener = null;
    this.changeListener = null;
  };

  FirebaseCredentialsProvider.prototype.getUser = function () {
    var currentUid = this.app.INTERNAL.getUid();
    assert(currentUid === null || typeof currentUid === 'string', 'Received invalid UID: ' + currentUid);
    return new User(currentUid);
  };

  return FirebaseCredentialsProvider;
}();
/*
 * FirstPartyToken provides a fresh token each time its value
 * is requested, because if the token is too old, requests will be rejected.
 * Technically this may no longer be necessary since the SDK should gracefully
 * recover from unauthenticated errors (see b/33147818 for context), but it's
 * safer to keep the implementation as-is.
 */


var FirstPartyToken =
/** @class */
function () {
  function FirstPartyToken(gapi, sessionIndex) {
    this.gapi = gapi;
    this.sessionIndex = sessionIndex;
    this.type = 'FirstParty';
    this.user = User.FIRST_PARTY;
  }

  Object.defineProperty(FirstPartyToken.prototype, "authHeaders", {
    get: function () {
      var headers = {
        'X-Goog-AuthUser': this.sessionIndex
      };
      var authHeader = this.gapi.auth.getAuthHeaderValueForFirstParty([]);

      if (authHeader) {
        headers['Authorization'] = authHeader;
      }

      return headers;
    },
    enumerable: true,
    configurable: true
  });
  return FirstPartyToken;
}();
/*
 * Provides user credentials required for the Firestore JavaScript SDK
 * to authenticate the user, using technique that is only available
 * to applications hosted by Google.
 */


var FirstPartyCredentialsProvider =
/** @class */
function () {
  function FirstPartyCredentialsProvider(gapi, sessionIndex) {
    this.gapi = gapi;
    this.sessionIndex = sessionIndex;
  }

  FirstPartyCredentialsProvider.prototype.getToken = function () {
    return Promise.resolve(new FirstPartyToken(this.gapi, this.sessionIndex));
  };

  FirstPartyCredentialsProvider.prototype.setChangeListener = function (changeListener) {
    // Fire with initial uid.
    changeListener(User.FIRST_PARTY);
  };

  FirstPartyCredentialsProvider.prototype.removeChangeListener = function () {};

  FirstPartyCredentialsProvider.prototype.invalidateToken = function () {};

  return FirstPartyCredentialsProvider;
}();
/**
 * Builds a CredentialsProvider depending on the type of
 * the credentials passed in.
 */


function makeCredentialsProvider(credentials) {
  if (!credentials) {
    return new EmptyCredentialsProvider();
  }

  switch (credentials.type) {
    case 'gapi':
      var client = credentials.client; // Make sure this really is a Gapi client.

      assert(!!(typeof client === 'object' && client !== null && client['auth'] && client['auth']['getAuthHeaderValueForFirstParty']), 'unexpected gapi interface');
      return new FirstPartyCredentialsProvider(client, credentials.sessionIndex || '0');

    case 'provider':
      return credentials.client;

    default:
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'makeCredentialsProvider failed due to invalid credential type');
  }
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function isPartialObserver(obj) {
  return implementsAnyMethods(obj, ['next', 'error', 'complete']);
}
/**
 * Returns true if obj is an object and contains at least one of the specified
 * methods.
 */


function implementsAnyMethods(obj, methods) {
  if (typeof obj !== 'object' || obj === null) {
    return false;
  }

  var object = obj;

  for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
    var method = methods_1[_i];

    if (method in object && typeof object[method] === 'function') {
      return true;
    }
  }

  return false;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An opaque base class for FieldValue sentinel objects in our public API,
 * with public static methods for creating said sentinel objects.
 */
// tslint:disable-next-line:class-as-namespace  We use this as a base class.


var FieldValueImpl =
/** @class */
function () {
  function FieldValueImpl(_methodName) {
    this._methodName = _methodName;
  }

  FieldValueImpl.delete = function () {
    validateNoArgs('FieldValue.delete', arguments);
    return DeleteFieldValueImpl.instance;
  };

  FieldValueImpl.serverTimestamp = function () {
    validateNoArgs('FieldValue.serverTimestamp', arguments);
    return ServerTimestampFieldValueImpl.instance;
  };

  FieldValueImpl.arrayUnion = function () {
    var elements = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      elements[_i] = arguments[_i];
    }

    validateAtLeastNumberOfArgs('FieldValue.arrayUnion', arguments, 1); // NOTE: We don't actually parse the data until it's used in set() or
    // update() since we need access to the Firestore instance.

    return new ArrayUnionFieldValueImpl(elements);
  };

  FieldValueImpl.arrayRemove = function () {
    var elements = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      elements[_i] = arguments[_i];
    }

    validateAtLeastNumberOfArgs('FieldValue.arrayRemove', arguments, 1); // NOTE: We don't actually parse the data until it's used in set() or
    // update() since we need access to the Firestore instance.

    return new ArrayRemoveFieldValueImpl(elements);
  };

  FieldValueImpl.increment = function (n) {
    validateArgType('FieldValue.increment', 'number', 1, n);
    validateExactNumberOfArgs('FieldValue.increment', arguments, 1);
    return new NumericIncrementFieldValueImpl(n);
  };

  FieldValueImpl.prototype.isEqual = function (other) {
    return this === other;
  };

  return FieldValueImpl;
}();

var DeleteFieldValueImpl =
/** @class */
function (_super) {
  tslib_1.__extends(DeleteFieldValueImpl, _super);

  function DeleteFieldValueImpl() {
    return _super.call(this, 'FieldValue.delete') || this;
  }
  /** Singleton instance. */


  DeleteFieldValueImpl.instance = new DeleteFieldValueImpl();
  return DeleteFieldValueImpl;
}(FieldValueImpl);

var ServerTimestampFieldValueImpl =
/** @class */
function (_super) {
  tslib_1.__extends(ServerTimestampFieldValueImpl, _super);

  function ServerTimestampFieldValueImpl() {
    return _super.call(this, 'FieldValue.serverTimestamp') || this;
  }
  /** Singleton instance. */


  ServerTimestampFieldValueImpl.instance = new ServerTimestampFieldValueImpl();
  return ServerTimestampFieldValueImpl;
}(FieldValueImpl);

var ArrayUnionFieldValueImpl =
/** @class */
function (_super) {
  tslib_1.__extends(ArrayUnionFieldValueImpl, _super);

  function ArrayUnionFieldValueImpl(_elements) {
    var _this = _super.call(this, 'FieldValue.arrayUnion') || this;

    _this._elements = _elements;
    return _this;
  }

  return ArrayUnionFieldValueImpl;
}(FieldValueImpl);

var ArrayRemoveFieldValueImpl =
/** @class */
function (_super) {
  tslib_1.__extends(ArrayRemoveFieldValueImpl, _super);

  function ArrayRemoveFieldValueImpl(_elements) {
    var _this = _super.call(this, 'FieldValue.arrayRemove') || this;

    _this._elements = _elements;
    return _this;
  }

  return ArrayRemoveFieldValueImpl;
}(FieldValueImpl);

var NumericIncrementFieldValueImpl =
/** @class */
function (_super) {
  tslib_1.__extends(NumericIncrementFieldValueImpl, _super);

  function NumericIncrementFieldValueImpl(_operand) {
    var _this = _super.call(this, 'FieldValue.increment') || this;

    _this._operand = _operand;
    return _this;
  }

  return NumericIncrementFieldValueImpl;
}(FieldValueImpl); // Public instance that disallows construction at runtime. This constructor is
// used when exporting FieldValueImpl on firebase.firestore.FieldValue and will
// be called FieldValue publicly. Internally we still use FieldValueImpl which
// has a type-checked private constructor. Note that FieldValueImpl and
// PublicFieldValue can be used interchangeably in instanceof checks.
// For our internal TypeScript code PublicFieldValue doesn't exist as a type,
// and so we need to use FieldValueImpl as type and export it too.
// tslint:disable-next-line:variable-name  We treat this as a class name.


var PublicFieldValue = makeConstructorPrivate(FieldValueImpl, 'Use FieldValue.<field>() instead.');
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var RESERVED_FIELD_REGEX = /^__.*__$/;
/** The result of parsing document data (e.g. for a setData call). */

var ParsedSetData =
/** @class */
function () {
  function ParsedSetData(data, fieldMask, fieldTransforms) {
    this.data = data;
    this.fieldMask = fieldMask;
    this.fieldTransforms = fieldTransforms;
  }

  ParsedSetData.prototype.toMutations = function (key, precondition) {
    var mutations = [];

    if (this.fieldMask !== null) {
      mutations.push(new PatchMutation(key, this.data, this.fieldMask, precondition));
    } else {
      mutations.push(new SetMutation(key, this.data, precondition));
    }

    if (this.fieldTransforms.length > 0) {
      mutations.push(new TransformMutation(key, this.fieldTransforms));
    }

    return mutations;
  };

  return ParsedSetData;
}();
/** The result of parsing "update" data (i.e. for an updateData call). */


var ParsedUpdateData =
/** @class */
function () {
  function ParsedUpdateData(data, fieldMask, fieldTransforms) {
    this.data = data;
    this.fieldMask = fieldMask;
    this.fieldTransforms = fieldTransforms;
  }

  ParsedUpdateData.prototype.toMutations = function (key, precondition) {
    var mutations = [new PatchMutation(key, this.data, this.fieldMask, precondition)];

    if (this.fieldTransforms.length > 0) {
      mutations.push(new TransformMutation(key, this.fieldTransforms));
    }

    return mutations;
  };

  return ParsedUpdateData;
}();
/*
 * Represents what type of API method provided the data being parsed; useful
 * for determining which error conditions apply during parsing and providing
 * better error messages.
 */


var UserDataSource;

(function (UserDataSource) {
  UserDataSource[UserDataSource["Set"] = 0] = "Set";
  UserDataSource[UserDataSource["Update"] = 1] = "Update";
  UserDataSource[UserDataSource["MergeSet"] = 2] = "MergeSet";
  /**
   * Indicates the source is a where clause, cursor bound, arrayUnion()
   * element, etc. Of note, isWrite(source) will return false.
   */

  UserDataSource[UserDataSource["Argument"] = 3] = "Argument";
})(UserDataSource || (UserDataSource = {}));

function isWrite(dataSource) {
  switch (dataSource) {
    case UserDataSource.Set: // fall through

    case UserDataSource.MergeSet: // fall through

    case UserDataSource.Update:
      return true;

    case UserDataSource.Argument:
      return false;

    default:
      throw fail("Unexpected case for UserDataSource: " + dataSource);
  }
}
/** A "context" object passed around while parsing user data. */


var ParseContext =
/** @class */
function () {
  /**
   * Initializes a ParseContext with the given source and path.
   *
   * @param dataSource Indicates what kind of API method this data came from.
   * @param methodName The name of the method the user called to create this
   *     ParseContext.
   * @param path A path within the object being parsed. This could be an empty
   *     path (in which case the context represents the root of the data being
   *     parsed), or a nonempty path (indicating the context represents a nested
   *     location within the data).
   * @param arrayElement Whether or not this context corresponds to an element
   *     of an array.
   * @param fieldTransforms A mutable list of field transforms encountered while
   *     parsing the data.
   * @param fieldMask A mutable list of field paths encountered while parsing
   *     the data.
   *
   * TODO(b/34871131): We don't support array paths right now, so path can be
   * null to indicate the context represents any location within an array (in
   * which case certain features will not work and errors will be somewhat
   * compromised).
   */
  function ParseContext(dataSource, methodName, path, arrayElement, fieldTransforms, fieldMask) {
    this.dataSource = dataSource;
    this.methodName = methodName;
    this.path = path;
    this.arrayElement = arrayElement; // Minor hack: If fieldTransforms is undefined, we assume this is an
    // external call and we need to validate the entire path.

    if (fieldTransforms === undefined) {
      this.validatePath();
    }

    this.arrayElement = arrayElement !== undefined ? arrayElement : false;
    this.fieldTransforms = fieldTransforms || [];
    this.fieldMask = fieldMask || [];
  }

  ParseContext.prototype.childContextForField = function (field) {
    var childPath = this.path == null ? null : this.path.child(field);
    var context = new ParseContext(this.dataSource, this.methodName, childPath,
    /*arrayElement=*/
    false, this.fieldTransforms, this.fieldMask);
    context.validatePathSegment(field);
    return context;
  };

  ParseContext.prototype.childContextForFieldPath = function (field) {
    var childPath = this.path == null ? null : this.path.child(field);
    var context = new ParseContext(this.dataSource, this.methodName, childPath,
    /*arrayElement=*/
    false, this.fieldTransforms, this.fieldMask);
    context.validatePath();
    return context;
  };

  ParseContext.prototype.childContextForArray = function (index) {
    // TODO(b/34871131): We don't support array paths right now; so make path
    // null.
    return new ParseContext(this.dataSource, this.methodName,
    /*path=*/
    null,
    /*arrayElement=*/
    true, this.fieldTransforms, this.fieldMask);
  };

  ParseContext.prototype.createError = function (reason) {
    var fieldDescription = this.path === null || this.path.isEmpty() ? '' : " (found in field " + this.path.toString() + ")";
    return new FirestoreError(Code.INVALID_ARGUMENT, "Function " + this.methodName + "() called with invalid data. " + reason + fieldDescription);
  };
  /** Returns 'true' if 'fieldPath' was traversed when creating this context. */


  ParseContext.prototype.contains = function (fieldPath) {
    return this.fieldMask.find(function (field) {
      return fieldPath.isPrefixOf(field);
    }) !== undefined || this.fieldTransforms.find(function (transform) {
      return fieldPath.isPrefixOf(transform.field);
    }) !== undefined;
  };

  ParseContext.prototype.validatePath = function () {
    // TODO(b/34871131): Remove null check once we have proper paths for fields
    // within arrays.
    if (this.path === null) {
      return;
    }

    for (var i = 0; i < this.path.length; i++) {
      this.validatePathSegment(this.path.get(i));
    }
  };

  ParseContext.prototype.validatePathSegment = function (segment) {
    if (isWrite(this.dataSource) && RESERVED_FIELD_REGEX.test(segment)) {
      throw this.createError('Document fields cannot begin and end with __');
    }
  };

  return ParseContext;
}();
/**
 * A placeholder object for DocumentReferences in this file, in order to
 * avoid a circular dependency. See the comments for `DataPreConverter` for
 * the full context.
 */


var DocumentKeyReference =
/** @class */
function () {
  function DocumentKeyReference(databaseId, key) {
    this.databaseId = databaseId;
    this.key = key;
  }

  return DocumentKeyReference;
}();
/**
 * Helper for parsing raw user input (provided via the API) into internal model
 * classes.
 */


var UserDataConverter =
/** @class */
function () {
  function UserDataConverter(preConverter) {
    this.preConverter = preConverter;
  }
  /** Parse document data from a non-merge set() call. */


  UserDataConverter.prototype.parseSetData = function (methodName, input) {
    var context = new ParseContext(UserDataSource.Set, methodName, FieldPath.EMPTY_PATH);
    validatePlainObject('Data must be an object, but it was:', context, input);
    var updateData = this.parseData(input, context);
    return new ParsedSetData(updateData,
    /* fieldMask= */
    null, context.fieldTransforms);
  };
  /** Parse document data from a set() call with '{merge:true}'. */


  UserDataConverter.prototype.parseMergeData = function (methodName, input, fieldPaths) {
    var context = new ParseContext(UserDataSource.MergeSet, methodName, FieldPath.EMPTY_PATH);
    validatePlainObject('Data must be an object, but it was:', context, input);
    var updateData = this.parseData(input, context);
    var fieldMask;
    var fieldTransforms;

    if (!fieldPaths) {
      fieldMask = FieldMask.fromArray(context.fieldMask);
      fieldTransforms = context.fieldTransforms;
    } else {
      var validatedFieldPaths = new SortedSet(FieldPath.comparator);

      for (var _i = 0, fieldPaths_1 = fieldPaths; _i < fieldPaths_1.length; _i++) {
        var stringOrFieldPath = fieldPaths_1[_i];
        var fieldPath = void 0;

        if (stringOrFieldPath instanceof FieldPath$1) {
          fieldPath = stringOrFieldPath._internalPath;
        } else if (typeof stringOrFieldPath === 'string') {
          fieldPath = fieldPathFromDotSeparatedString(methodName, stringOrFieldPath);
        } else {
          throw fail('Expected stringOrFieldPath to be a string or a FieldPath');
        }

        if (!context.contains(fieldPath)) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Field '" + fieldPath + "' is specified in your field mask but missing from your input data.");
        }

        validatedFieldPaths = validatedFieldPaths.add(fieldPath);
      }

      fieldMask = FieldMask.fromSet(validatedFieldPaths);
      fieldTransforms = context.fieldTransforms.filter(function (transform) {
        return fieldMask.covers(transform.field);
      });
    }

    return new ParsedSetData(updateData, fieldMask, fieldTransforms);
  };
  /** Parse update data from an update() call. */


  UserDataConverter.prototype.parseUpdateData = function (methodName, input) {
    var _this = this;

    var context = new ParseContext(UserDataSource.Update, methodName, FieldPath.EMPTY_PATH);
    validatePlainObject('Data must be an object, but it was:', context, input);
    var fieldMaskPaths = new SortedSet(FieldPath.comparator);
    var updateData = ObjectValue.EMPTY;
    forEach(input, function (key, value) {
      var path = fieldPathFromDotSeparatedString(methodName, key);
      var childContext = context.childContextForFieldPath(path);
      value = _this.runPreConverter(value, childContext);

      if (value instanceof DeleteFieldValueImpl) {
        // Add it to the field mask, but don't add anything to updateData.
        fieldMaskPaths = fieldMaskPaths.add(path);
      } else {
        var parsedValue = _this.parseData(value, childContext);

        if (parsedValue != null) {
          fieldMaskPaths = fieldMaskPaths.add(path);
          updateData = updateData.set(path, parsedValue);
        }
      }
    });
    var mask = FieldMask.fromSet(fieldMaskPaths);
    return new ParsedUpdateData(updateData, mask, context.fieldTransforms);
  };
  /** Parse update data from a list of field/value arguments. */


  UserDataConverter.prototype.parseUpdateVarargs = function (methodName, field, value, moreFieldsAndValues) {
    var context = new ParseContext(UserDataSource.Update, methodName, FieldPath.EMPTY_PATH);
    var keys = [fieldPathFromArgument(methodName, field)];
    var values = [value];

    if (moreFieldsAndValues.length % 2 !== 0) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + methodName + "() needs to be called with an even number " + 'of arguments that alternate between field names and values.');
    }

    for (var i = 0; i < moreFieldsAndValues.length; i += 2) {
      keys.push(fieldPathFromArgument(methodName, moreFieldsAndValues[i]));
      values.push(moreFieldsAndValues[i + 1]);
    }

    var fieldMaskPaths = new SortedSet(FieldPath.comparator);
    var updateData = ObjectValue.EMPTY;

    for (var i = 0; i < keys.length; ++i) {
      var path = keys[i];
      var childContext = context.childContextForFieldPath(path);
      var value_1 = this.runPreConverter(values[i], childContext);

      if (value_1 instanceof DeleteFieldValueImpl) {
        // Add it to the field mask, but don't add anything to updateData.
        fieldMaskPaths = fieldMaskPaths.add(path);
      } else {
        var parsedValue = this.parseData(value_1, childContext);

        if (parsedValue != null) {
          fieldMaskPaths = fieldMaskPaths.add(path);
          updateData = updateData.set(path, parsedValue);
        }
      }
    }

    var mask = FieldMask.fromSet(fieldMaskPaths);
    return new ParsedUpdateData(updateData, mask, context.fieldTransforms);
  };
  /**
   * Parse a "query value" (e.g. value in a where filter or a value in a cursor
   * bound).
   */


  UserDataConverter.prototype.parseQueryValue = function (methodName, input) {
    var context = new ParseContext(UserDataSource.Argument, methodName, FieldPath.EMPTY_PATH);
    var parsed = this.parseData(input, context);
    assert(parsed != null, 'Parsed data should not be null.');
    assert(context.fieldTransforms.length === 0, 'Field transforms should have been disallowed.');
    return parsed;
  };
  /** Sends data through this.preConverter, handling any thrown errors. */


  UserDataConverter.prototype.runPreConverter = function (input, context) {
    try {
      return this.preConverter(input);
    } catch (e) {
      var message = errorMessage(e);
      throw context.createError(message);
    }
  };
  /**
   * Internal helper for parsing user data.
   *
   * @param input Data to be parsed.
   * @param context A context object representing the current path being parsed,
   * the source of the data being parsed, etc.
   * @return The parsed value, or null if the value was a FieldValue sentinel
   * that should not be included in the resulting parsed data.
   */


  UserDataConverter.prototype.parseData = function (input, context) {
    input = this.runPreConverter(input, context);

    if (looksLikeJsonObject(input)) {
      validatePlainObject('Unsupported field value:', context, input);
      return this.parseObject(input, context);
    } else if (input instanceof FieldValueImpl) {
      // FieldValues usually parse into transforms (except FieldValue.delete())
      // in which case we do not want to include this field in our parsed data
      // (as doing so will overwrite the field directly prior to the transform
      // trying to transform it). So we don't add this location to
      // context.fieldMask and we return null as our parsing result.
      this.parseSentinelFieldValue(input, context);
      return null;
    } else {
      // If context.path is null we are inside an array and we don't support
      // field mask paths more granular than the top-level array.
      if (context.path) {
        context.fieldMask.push(context.path);
      }

      if (input instanceof Array) {
        // TODO(b/34871131): Include the path containing the array in the error
        // message.
        if (context.arrayElement) {
          throw context.createError('Nested arrays are not supported');
        }

        return this.parseArray(input, context);
      } else {
        return this.parseScalarValue(input, context);
      }
    }
  };

  UserDataConverter.prototype.parseObject = function (obj, context) {
    var _this = this;

    var result = new SortedMap(primitiveComparator);

    if (isEmpty(obj)) {
      // If we encounter an empty object, we explicitly add it to the update
      // mask to ensure that the server creates a map entry.
      if (context.path && context.path.length > 0) {
        context.fieldMask.push(context.path);
      }
    } else {
      forEach(obj, function (key, val) {
        var parsedValue = _this.parseData(val, context.childContextForField(key));

        if (parsedValue != null) {
          result = result.insert(key, parsedValue);
        }
      });
    }

    return new ObjectValue(result);
  };

  UserDataConverter.prototype.parseArray = function (array, context) {
    var result = [];
    var entryIndex = 0;

    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
      var entry = array_1[_i];
      var parsedEntry = this.parseData(entry, context.childContextForArray(entryIndex));

      if (parsedEntry == null) {
        // Just include nulls in the array for fields being replaced with a
        // sentinel.
        parsedEntry = NullValue.INSTANCE;
      }

      result.push(parsedEntry);
      entryIndex++;
    }

    return new ArrayValue(result);
  };
  /**
   * "Parses" the provided FieldValueImpl, adding any necessary transforms to
   * context.fieldTransforms.
   */


  UserDataConverter.prototype.parseSentinelFieldValue = function (value, context) {
    // Sentinels are only supported with writes, and not within arrays.
    if (!isWrite(context.dataSource)) {
      throw context.createError(value._methodName + "() can only be used with update() and set()");
    }

    if (context.path === null) {
      throw context.createError(value._methodName + "() is not currently supported inside arrays");
    }

    if (value instanceof DeleteFieldValueImpl) {
      if (context.dataSource === UserDataSource.MergeSet) {
        // No transform to add for a delete, but we need to add it to our
        // fieldMask so it gets deleted.
        context.fieldMask.push(context.path);
      } else if (context.dataSource === UserDataSource.Update) {
        assert(context.path.length > 0, 'FieldValue.delete() at the top level should have already' + ' been handled.');
        throw context.createError('FieldValue.delete() can only appear at the top level ' + 'of your update data');
      } else {
        // We shouldn't encounter delete sentinels for queries or non-merge set() calls.
        throw context.createError('FieldValue.delete() cannot be used with set() unless you pass ' + '{merge:true}');
      }
    } else if (value instanceof ServerTimestampFieldValueImpl) {
      context.fieldTransforms.push(new FieldTransform(context.path, ServerTimestampTransform.instance));
    } else if (value instanceof ArrayUnionFieldValueImpl) {
      var parsedElements = this.parseArrayTransformElements(value._methodName, value._elements);
      var arrayUnion = new ArrayUnionTransformOperation(parsedElements);
      context.fieldTransforms.push(new FieldTransform(context.path, arrayUnion));
    } else if (value instanceof ArrayRemoveFieldValueImpl) {
      var parsedElements = this.parseArrayTransformElements(value._methodName, value._elements);
      var arrayRemove = new ArrayRemoveTransformOperation(parsedElements);
      context.fieldTransforms.push(new FieldTransform(context.path, arrayRemove));
    } else if (value instanceof NumericIncrementFieldValueImpl) {
      var operand = this.parseQueryValue('FieldValue.increment', value._operand);
      var numericIncrement = new NumericIncrementTransformOperation(operand);
      context.fieldTransforms.push(new FieldTransform(context.path, numericIncrement));
    } else {
      fail('Unknown FieldValue type: ' + value);
    }
  };
  /**
   * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)
   *
   * @return The parsed value
   */


  UserDataConverter.prototype.parseScalarValue = function (value, context) {
    if (value === null) {
      return NullValue.INSTANCE;
    } else if (typeof value === 'number') {
      if (isSafeInteger(value)) {
        return new IntegerValue(value);
      } else {
        return new DoubleValue(value);
      }
    } else if (typeof value === 'boolean') {
      return BooleanValue.of(value);
    } else if (typeof value === 'string') {
      return new StringValue(value);
    } else if (value instanceof Date) {
      return new TimestampValue(Timestamp.fromDate(value));
    } else if (value instanceof Timestamp) {
      // Firestore backend truncates precision down to microseconds. To ensure
      // offline mode works the same with regards to truncation, perform the
      // truncation immediately without waiting for the backend to do that.
      return new TimestampValue(new Timestamp(value.seconds, Math.floor(value.nanoseconds / 1000) * 1000));
    } else if (value instanceof GeoPoint) {
      return new GeoPointValue(value);
    } else if (value instanceof Blob) {
      return new BlobValue(value);
    } else if (value instanceof DocumentKeyReference) {
      return new RefValue(value.databaseId, value.key);
    } else {
      throw context.createError("Unsupported field value: " + valueDescription(value));
    }
  };

  UserDataConverter.prototype.parseArrayTransformElements = function (methodName, elements) {
    var _this = this;

    return elements.map(function (element, i) {
      // Although array transforms are used with writes, the actual elements
      // being unioned or removed are not considered writes since they cannot
      // contain any FieldValue sentinels, etc.
      var context = new ParseContext(UserDataSource.Argument, methodName, FieldPath.EMPTY_PATH);
      return _this.parseData(element, context.childContextForArray(i));
    });
  };

  return UserDataConverter;
}();
/**
 * Checks whether an object looks like a JSON object that should be converted
 * into a struct. Normal class/prototype instances are considered to look like
 * JSON objects since they should be converted to a struct value. Arrays, Dates,
 * GeoPoints, etc. are not considered to look like JSON objects since they map
 * to specific FieldValue types other than ObjectValue.
 */


function looksLikeJsonObject(input) {
  return typeof input === 'object' && input !== null && !(input instanceof Array) && !(input instanceof Date) && !(input instanceof Timestamp) && !(input instanceof GeoPoint) && !(input instanceof Blob) && !(input instanceof DocumentKeyReference) && !(input instanceof FieldValueImpl);
}

function validatePlainObject(message, context, input) {
  if (!looksLikeJsonObject(input) || !isPlainObject(input)) {
    var description = valueDescription(input);

    if (description === 'an object') {
      // Massage the error if it was an object.
      throw context.createError(message + ' a custom object');
    } else {
      throw context.createError(message + ' ' + description);
    }
  }
}
/**
 * Helper that calls fromDotSeparatedString() but wraps any error thrown.
 */


function fieldPathFromArgument(methodName, path) {
  if (path instanceof FieldPath$1) {
    return path._internalPath;
  } else if (typeof path === 'string') {
    return fieldPathFromDotSeparatedString(methodName, path);
  } else {
    var message = 'Field path arguments must be of type string or FieldPath.';
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + methodName + "() called with invalid data. " + message);
  }
}
/**
 * Wraps fromDotSeparatedString with an error message about the method that
 * was thrown.
 * @param methodName The publicly visible method name
 * @param path The dot-separated string form of a field path which will be split
 * on dots.
 */


function fieldPathFromDotSeparatedString(methodName, path) {
  try {
    return fromDotSeparatedString(path)._internalPath;
  } catch (e) {
    var message = errorMessage(e);
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + methodName + "() called with invalid data. " + message);
  }
}
/**
 * Extracts the message from a caught exception, which should be an Error object
 * though JS doesn't guarantee that.
 */


function errorMessage(error) {
  return error instanceof Error ? error.message : error.toString();
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// The objects that are a part of this API are exposed to third-parties as
// compiled javascript so we want to flag our private members with a leading
// underscore to discourage their use.
// tslint:disable:strip-private-property-underscore
// settings() defaults:


var DEFAULT_HOST = 'firestore.googleapis.com';
var DEFAULT_SSL = true;
var DEFAULT_TIMESTAMPS_IN_SNAPSHOTS = true;
var DEFAULT_FORCE_LONG_POLLING = false;
/**
 * Constant used to indicate the LRU garbage collection should be disabled.
 * Set this value as the `cacheSizeBytes` on the settings passed to the
 * `Firestore` instance.
 */

var CACHE_SIZE_UNLIMITED = LruParams.COLLECTION_DISABLED; // enablePersistence() defaults:

var DEFAULT_SYNCHRONIZE_TABS = false;
/**
 * A concrete type describing all the values that can be applied via a
 * user-supplied firestore.Settings object. This is a separate type so that
 * defaults can be supplied and the value can be checked for equality.
 */

var FirestoreSettings =
/** @class */
function () {
  function FirestoreSettings(settings) {
    if (settings.host === undefined) {
      if (settings.ssl !== undefined) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
      }

      this.host = DEFAULT_HOST;
      this.ssl = DEFAULT_SSL;
    } else {
      validateNamedType('settings', 'non-empty string', 'host', settings.host);
      this.host = settings.host;
      validateNamedOptionalType('settings', 'boolean', 'ssl', settings.ssl);
      this.ssl = defaulted(settings.ssl, DEFAULT_SSL);
    }

    validateOptionNames('settings', settings, ['host', 'ssl', 'credentials', 'timestampsInSnapshots', 'cacheSizeBytes', 'experimentalForceLongPolling']);
    validateNamedOptionalType('settings', 'object', 'credentials', settings.credentials);
    this.credentials = settings.credentials;
    validateNamedOptionalType('settings', 'boolean', 'timestampsInSnapshots', settings.timestampsInSnapshots); // Nobody should set timestampsInSnapshots anymore, but the error depends on
    // whether they set it to true or false...

    if (settings.timestampsInSnapshots === true) {
      error("\n  The timestampsInSnapshots setting now defaults to true and you no\n  longer need to explicitly set it. In a future release, the setting\n  will be removed entirely and so it is recommended that you remove it\n  from your firestore.settings() call now.");
    } else if (settings.timestampsInSnapshots === false) {
      error("\n  The timestampsInSnapshots setting will soon be removed. YOU MUST UPDATE\n  YOUR CODE.\n\n  To hide this warning, stop using the timestampsInSnapshots setting in your\n  firestore.settings({ ... }) call.\n\n  Once you remove the setting, Timestamps stored in Cloud Firestore will be\n  read back as Firebase Timestamp objects instead of as system Date objects.\n  So you will also need to update code expecting a Date to instead expect a\n  Timestamp. For example:\n\n  // Old:\n  const date = snapshot.get('created_at');\n  // New:\n  const timestamp = snapshot.get('created_at'); const date =\n  timestamp.toDate();\n\n  Please audit all existing usages of Date when you enable the new\n  behavior.");
    }

    this.timestampsInSnapshots = defaulted(settings.timestampsInSnapshots, DEFAULT_TIMESTAMPS_IN_SNAPSHOTS);
    validateNamedOptionalType('settings', 'number', 'cacheSizeBytes', settings.cacheSizeBytes);

    if (settings.cacheSizeBytes === undefined) {
      this.cacheSizeBytes = LruParams.DEFAULT_CACHE_SIZE_BYTES;
    } else {
      if (settings.cacheSizeBytes !== CACHE_SIZE_UNLIMITED && settings.cacheSizeBytes < LruParams.MINIMUM_CACHE_SIZE_BYTES) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "cacheSizeBytes must be at least " + LruParams.MINIMUM_CACHE_SIZE_BYTES);
      } else {
        this.cacheSizeBytes = settings.cacheSizeBytes;
      }
    }

    validateNamedOptionalType('settings', 'boolean', 'experimentalForceLongPolling', settings.experimentalForceLongPolling);
    this.forceLongPolling = settings.experimentalForceLongPolling === undefined ? DEFAULT_FORCE_LONG_POLLING : settings.experimentalForceLongPolling;
  }

  FirestoreSettings.prototype.isEqual = function (other) {
    return this.host === other.host && this.ssl === other.ssl && this.timestampsInSnapshots === other.timestampsInSnapshots && this.credentials === other.credentials && this.cacheSizeBytes === other.cacheSizeBytes && this.forceLongPolling === other.forceLongPolling;
  };

  return FirestoreSettings;
}();

var FirestoreConfig =
/** @class */
function () {
  function FirestoreConfig() {}

  return FirestoreConfig;
}();
/**
 * The root reference to the database.
 */


var Firestore =
/** @class */
function () {
  function Firestore(databaseIdOrApp) {
    var _this = this; // Public for use in tests.
    // TODO(mikelehen): Use modularized initialization instead.


    this._queue = new AsyncQueue();
    this.INTERNAL = {
      delete: function () {
        return tslib_1.__awaiter(_this, void 0, void 0, function () {
          return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                // The client must be initalized to ensure that all subsequent API usage
                // throws an exception.
                this.ensureClientConfigured();
                return [4
                /*yield*/
                , this._firestoreClient.shutdown()];

              case 1:
                _a.sent();

                return [2
                /*return*/
                ];
            }
          });
        });
      }
    };
    var config = new FirestoreConfig();

    if (typeof databaseIdOrApp.options === 'object') {
      // This is very likely a Firebase app object
      // TODO(b/34177605): Can we somehow use instanceof?
      var app = databaseIdOrApp;
      config.firebaseApp = app;
      config.databaseId = Firestore.databaseIdFromApp(app);
      config.persistenceKey = config.firebaseApp.name;
      config.credentials = new FirebaseCredentialsProvider(app);
    } else {
      var external_1 = databaseIdOrApp;

      if (!external_1.projectId) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide projectId');
      }

      config.databaseId = new DatabaseId(external_1.projectId, external_1.database); // Use a default persistenceKey that lines up with FirebaseApp.

      config.persistenceKey = '[DEFAULT]';
      config.credentials = new EmptyCredentialsProvider();
    }

    config.settings = new FirestoreSettings({});
    this._config = config;
    this._databaseId = config.databaseId;
  }

  Firestore.prototype.settings = function (settingsLiteral) {
    validateExactNumberOfArgs('Firestore.settings', arguments, 1);
    validateArgType('Firestore.settings', 'object', 1, settingsLiteral);

    if (contains(settingsLiteral, 'persistence')) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, '"persistence" is now specified with a separate call to ' + 'firestore.enablePersistence().');
    }

    var newSettings = new FirestoreSettings(settingsLiteral);

    if (this._firestoreClient && !this._config.settings.isEqual(newSettings)) {
      throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and its settings can no longer ' + 'be changed. You can only call settings() before calling any other ' + 'methods on a Firestore object.');
    }

    this._config.settings = newSettings;

    if (newSettings.credentials !== undefined) {
      this._config.credentials = makeCredentialsProvider(newSettings.credentials);
    }
  };

  Firestore.prototype.enableNetwork = function () {
    this.ensureClientConfigured();
    return this._firestoreClient.enableNetwork();
  };

  Firestore.prototype.disableNetwork = function () {
    this.ensureClientConfigured();
    return this._firestoreClient.disableNetwork();
  };

  Firestore.prototype.enablePersistence = function (settings) {
    if (this._firestoreClient) {
      throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and persistence can no longer ' + 'be enabled. You can only call enablePersistence() before calling ' + 'any other methods on a Firestore object.');
    }

    var synchronizeTabs = false;

    if (settings) {
      if (settings.experimentalTabSynchronization !== undefined) {
        error("The 'experimentalTabSynchronization' setting has been renamed to " + "'synchronizeTabs'. In a future release, the setting will be removed " + 'and it is recommended that you update your ' + "firestore.enablePersistence() call to use 'synchronizeTabs'.");
      }

      synchronizeTabs = defaulted(settings.synchronizeTabs !== undefined ? settings.synchronizeTabs : settings.experimentalTabSynchronization, DEFAULT_SYNCHRONIZE_TABS);
    }

    return this.configureClient(new IndexedDbPersistenceSettings(this._config.settings.cacheSizeBytes, synchronizeTabs));
  };

  Firestore.prototype.clearPersistence = function () {
    var _this = this;

    var persistenceKey = IndexedDbPersistence.buildStoragePrefix(this.makeDatabaseInfo());
    var deferred = new Deferred();

    this._queue.enqueueAndForget(function () {
      return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var e_1;
        return tslib_1.__generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2,, 3]);

              if (this._firestoreClient !== undefined && !this._firestoreClient.clientShutdown) {
                throw new FirestoreError(Code.FAILED_PRECONDITION, 'Persistence cannot be cleared after this Firestore instance is initialized.');
              }

              return [4
              /*yield*/
              , IndexedDbPersistence.clearPersistence(persistenceKey)];

            case 1:
              _a.sent();

              deferred.resolve();
              return [3
              /*break*/
              , 3];

            case 2:
              e_1 = _a.sent();
              deferred.reject(e_1);
              return [3
              /*break*/
              , 3];

            case 3:
              return [2
              /*return*/
              ];
          }
        });
      });
    });

    return deferred.promise;
  };

  Firestore.prototype.ensureClientConfigured = function () {
    if (!this._firestoreClient) {
      // Kick off starting the client but don't actually wait for it.
      // tslint:disable-next-line:no-floating-promises
      this.configureClient(new MemoryPersistenceSettings());
    }

    return this._firestoreClient;
  };

  Firestore.prototype.makeDatabaseInfo = function () {
    return new DatabaseInfo(this._config.databaseId, this._config.persistenceKey, this._config.settings.host, this._config.settings.ssl, this._config.settings.forceLongPolling);
  };

  Firestore.prototype.configureClient = function (persistenceSettings) {
    var _this = this;

    assert(!!this._config.settings.host, 'FirestoreSettings.host cannot be falsey');
    assert(!this._firestoreClient, 'configureClient() called multiple times');
    var databaseInfo = this.makeDatabaseInfo();

    var preConverter = function (value) {
      if (value instanceof DocumentReference) {
        var thisDb = _this._config.databaseId;
        var otherDb = value.firestore._config.databaseId;

        if (!otherDb.isEqual(thisDb)) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, 'Document reference is for database ' + (otherDb.projectId + "/" + otherDb.database + " but should be ") + ("for database " + thisDb.projectId + "/" + thisDb.database));
        }

        return new DocumentKeyReference(_this._config.databaseId, value._key);
      } else {
        return value;
      }
    };

    this._dataConverter = new UserDataConverter(preConverter);
    this._firestoreClient = new FirestoreClient(PlatformSupport.getPlatform(), databaseInfo, this._config.credentials, this._queue);
    return this._firestoreClient.start(persistenceSettings);
  };

  Firestore.databaseIdFromApp = function (app) {
    var options = app.options;

    if (!contains(options, 'projectId')) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
    }

    var projectId = options['projectId'];

    if (!projectId || typeof projectId !== 'string') {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'projectId must be a string in FirebaseApp.options');
    }

    return new DatabaseId(projectId);
  };

  Object.defineProperty(Firestore.prototype, "app", {
    get: function () {
      if (!this._config.firebaseApp) {
        throw new FirestoreError(Code.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is " + 'not available');
      }

      return this._config.firebaseApp;
    },
    enumerable: true,
    configurable: true
  });

  Firestore.prototype.collection = function (pathString) {
    validateExactNumberOfArgs('Firestore.collection', arguments, 1);
    validateArgType('Firestore.collection', 'non-empty string', 1, pathString);
    this.ensureClientConfigured();
    return new CollectionReference(ResourcePath.fromString(pathString), this);
  };

  Firestore.prototype.doc = function (pathString) {
    validateExactNumberOfArgs('Firestore.doc', arguments, 1);
    validateArgType('Firestore.doc', 'non-empty string', 1, pathString);
    this.ensureClientConfigured();
    return DocumentReference.forPath(ResourcePath.fromString(pathString), this);
  };

  Firestore.prototype.collectionGroup = function (collectionId) {
    validateExactNumberOfArgs('Firestore.collectionGroup', arguments, 1);
    validateArgType('Firestore.collectionGroup', 'non-empty string', 1, collectionId);

    if (collectionId.indexOf('/') >= 0) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid collection ID '" + collectionId + "' passed to function " + "Firestore.collectionGroup(). Collection IDs must not contain '/'.");
    }

    this.ensureClientConfigured();
    return new Query$1(new Query(ResourcePath.EMPTY_PATH, collectionId), this);
  };

  Firestore.prototype.runTransaction = function (updateFunction) {
    var _this = this;

    validateExactNumberOfArgs('Firestore.runTransaction', arguments, 1);
    validateArgType('Firestore.runTransaction', 'function', 1, updateFunction);
    return this.ensureClientConfigured().transaction(function (transaction) {
      return updateFunction(new Transaction$1(_this, transaction));
    });
  };

  Firestore.prototype.batch = function () {
    this.ensureClientConfigured();
    return new WriteBatch(this);
  };

  Object.defineProperty(Firestore, "logLevel", {
    get: function () {
      switch (getLogLevel()) {
        case LogLevel.DEBUG:
          return 'debug';

        case LogLevel.ERROR:
          return 'error';

        case LogLevel.SILENT:
          return 'silent';

        default:
          return fail('Unknown log level: ' + getLogLevel());
      }
    },
    enumerable: true,
    configurable: true
  });

  Firestore.setLogLevel = function (level) {
    validateExactNumberOfArgs('Firestore.setLogLevel', arguments, 1);
    validateArgType('Firestore.setLogLevel', 'non-empty string', 1, level);

    switch (level) {
      case 'debug':
        setLogLevel(LogLevel.DEBUG);
        break;

      case 'error':
        setLogLevel(LogLevel.ERROR);
        break;

      case 'silent':
        setLogLevel(LogLevel.SILENT);
        break;

      default:
        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid log level: ' + level);
    }
  }; // Note: this is not a property because the minifier can't work correctly with
  // the way TypeScript compiler outputs properties.


  Firestore.prototype._areTimestampsInSnapshotsEnabled = function () {
    return this._config.settings.timestampsInSnapshots;
  };

  return Firestore;
}();
/**
 * A reference to a transaction.
 */


var Transaction$1 =
/** @class */
function () {
  function Transaction(_firestore, _transaction) {
    this._firestore = _firestore;
    this._transaction = _transaction;
  }

  Transaction.prototype.get = function (documentRef) {
    var _this = this;

    validateExactNumberOfArgs('Transaction.get', arguments, 1);
    var ref = validateReference('Transaction.get', documentRef, this._firestore);
    return this._transaction.lookup([ref._key]).then(function (docs) {
      if (!docs || docs.length !== 1) {
        return fail('Mismatch in docs returned from document lookup.');
      }

      var doc = docs[0];

      if (doc instanceof NoDocument) {
        return new DocumentSnapshot(_this._firestore, ref._key, null,
        /* fromCache= */
        false,
        /* hasPendingWrites= */
        false);
      } else if (doc instanceof Document) {
        return new DocumentSnapshot(_this._firestore, ref._key, doc,
        /* fromCache= */
        false,
        /* hasPendingWrites= */
        false);
      } else {
        throw fail("BatchGetDocumentsRequest returned unexpected document type: " + doc.constructor.name);
      }
    });
  };

  Transaction.prototype.set = function (documentRef, value, options) {
    validateBetweenNumberOfArgs('Transaction.set', arguments, 2, 3);
    var ref = validateReference('Transaction.set', documentRef, this._firestore);
    options = validateSetOptions('Transaction.set', options);
    var parsed = options.merge || options.mergeFields ? this._firestore._dataConverter.parseMergeData('Transaction.set', value, options.mergeFields) : this._firestore._dataConverter.parseSetData('Transaction.set', value);

    this._transaction.set(ref._key, parsed);

    return this;
  };

  Transaction.prototype.update = function (documentRef, fieldOrUpdateData, value) {
    var moreFieldsAndValues = [];

    for (var _i = 3; _i < arguments.length; _i++) {
      moreFieldsAndValues[_i - 3] = arguments[_i];
    }

    var ref;
    var parsed;

    if (typeof fieldOrUpdateData === 'string' || fieldOrUpdateData instanceof FieldPath$1) {
      validateAtLeastNumberOfArgs('Transaction.update', arguments, 3);
      ref = validateReference('Transaction.update', documentRef, this._firestore);
      parsed = this._firestore._dataConverter.parseUpdateVarargs('Transaction.update', fieldOrUpdateData, value, moreFieldsAndValues);
    } else {
      validateExactNumberOfArgs('Transaction.update', arguments, 2);
      ref = validateReference('Transaction.update', documentRef, this._firestore);
      parsed = this._firestore._dataConverter.parseUpdateData('Transaction.update', fieldOrUpdateData);
    }

    this._transaction.update(ref._key, parsed);

    return this;
  };

  Transaction.prototype.delete = function (documentRef) {
    validateExactNumberOfArgs('Transaction.delete', arguments, 1);
    var ref = validateReference('Transaction.delete', documentRef, this._firestore);

    this._transaction.delete(ref._key);

    return this;
  };

  return Transaction;
}();

var WriteBatch =
/** @class */
function () {
  function WriteBatch(_firestore) {
    this._firestore = _firestore;
    this._mutations = [];
    this._committed = false;
  }

  WriteBatch.prototype.set = function (documentRef, value, options) {
    validateBetweenNumberOfArgs('WriteBatch.set', arguments, 2, 3);
    this.verifyNotCommitted();
    var ref = validateReference('WriteBatch.set', documentRef, this._firestore);
    options = validateSetOptions('WriteBatch.set', options);
    var parsed = options.merge || options.mergeFields ? this._firestore._dataConverter.parseMergeData('WriteBatch.set', value, options.mergeFields) : this._firestore._dataConverter.parseSetData('WriteBatch.set', value);
    this._mutations = this._mutations.concat(parsed.toMutations(ref._key, Precondition.NONE));
    return this;
  };

  WriteBatch.prototype.update = function (documentRef, fieldOrUpdateData, value) {
    var moreFieldsAndValues = [];

    for (var _i = 3; _i < arguments.length; _i++) {
      moreFieldsAndValues[_i - 3] = arguments[_i];
    }

    this.verifyNotCommitted();
    var ref;
    var parsed;

    if (typeof fieldOrUpdateData === 'string' || fieldOrUpdateData instanceof FieldPath$1) {
      validateAtLeastNumberOfArgs('WriteBatch.update', arguments, 3);
      ref = validateReference('WriteBatch.update', documentRef, this._firestore);
      parsed = this._firestore._dataConverter.parseUpdateVarargs('WriteBatch.update', fieldOrUpdateData, value, moreFieldsAndValues);
    } else {
      validateExactNumberOfArgs('WriteBatch.update', arguments, 2);
      ref = validateReference('WriteBatch.update', documentRef, this._firestore);
      parsed = this._firestore._dataConverter.parseUpdateData('WriteBatch.update', fieldOrUpdateData);
    }

    this._mutations = this._mutations.concat(parsed.toMutations(ref._key, Precondition.exists(true)));
    return this;
  };

  WriteBatch.prototype.delete = function (documentRef) {
    validateExactNumberOfArgs('WriteBatch.delete', arguments, 1);
    this.verifyNotCommitted();
    var ref = validateReference('WriteBatch.delete', documentRef, this._firestore);
    this._mutations = this._mutations.concat(new DeleteMutation(ref._key, Precondition.NONE));
    return this;
  };

  WriteBatch.prototype.commit = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        this.verifyNotCommitted();
        this._committed = true;

        if (this._mutations.length > 0) {
          return [2
          /*return*/
          , this._firestore.ensureClientConfigured().write(this._mutations)];
        }

        return [2
        /*return*/
        ];
      });
    });
  };

  WriteBatch.prototype.verifyNotCommitted = function () {
    if (this._committed) {
      throw new FirestoreError(Code.FAILED_PRECONDITION, 'A write batch can no longer be used after commit() ' + 'has been called.');
    }
  };

  return WriteBatch;
}();
/**
 * A reference to a particular document in a collection in the database.
 */


var DocumentReference =
/** @class */
function () {
  function DocumentReference(_key, firestore) {
    this._key = _key;
    this.firestore = firestore;
    this._firestoreClient = this.firestore.ensureClientConfigured();
  }

  DocumentReference.forPath = function (path, firestore) {
    if (path.length % 2 !== 0) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid document reference. Document ' + 'references must have an even number of segments, but ' + (path.canonicalString() + " has " + path.length));
    }

    return new DocumentReference(new DocumentKey(path), firestore);
  };

  Object.defineProperty(DocumentReference.prototype, "id", {
    get: function () {
      return this._key.path.lastSegment();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(DocumentReference.prototype, "parent", {
    get: function () {
      return new CollectionReference(this._key.path.popLast(), this.firestore);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(DocumentReference.prototype, "path", {
    get: function () {
      return this._key.path.canonicalString();
    },
    enumerable: true,
    configurable: true
  });

  DocumentReference.prototype.collection = function (pathString) {
    validateExactNumberOfArgs('DocumentReference.collection', arguments, 1);
    validateArgType('DocumentReference.collection', 'non-empty string', 1, pathString);

    if (!pathString) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty collection name to collection()');
    }

    var path = ResourcePath.fromString(pathString);
    return new CollectionReference(this._key.path.child(path), this.firestore);
  };

  DocumentReference.prototype.isEqual = function (other) {
    if (!(other instanceof DocumentReference)) {
      throw invalidClassError('isEqual', 'DocumentReference', 1, other);
    }

    return this.firestore === other.firestore && this._key.isEqual(other._key);
  };

  DocumentReference.prototype.set = function (value, options) {
    validateBetweenNumberOfArgs('DocumentReference.set', arguments, 1, 2);
    options = validateSetOptions('DocumentReference.set', options);
    var parsed = options.merge || options.mergeFields ? this.firestore._dataConverter.parseMergeData('DocumentReference.set', value, options.mergeFields) : this.firestore._dataConverter.parseSetData('DocumentReference.set', value);
    return this._firestoreClient.write(parsed.toMutations(this._key, Precondition.NONE));
  };

  DocumentReference.prototype.update = function (fieldOrUpdateData, value) {
    var moreFieldsAndValues = [];

    for (var _i = 2; _i < arguments.length; _i++) {
      moreFieldsAndValues[_i - 2] = arguments[_i];
    }

    var parsed;

    if (typeof fieldOrUpdateData === 'string' || fieldOrUpdateData instanceof FieldPath$1) {
      validateAtLeastNumberOfArgs('DocumentReference.update', arguments, 2);
      parsed = this.firestore._dataConverter.parseUpdateVarargs('DocumentReference.update', fieldOrUpdateData, value, moreFieldsAndValues);
    } else {
      validateExactNumberOfArgs('DocumentReference.update', arguments, 1);
      parsed = this.firestore._dataConverter.parseUpdateData('DocumentReference.update', fieldOrUpdateData);
    }

    return this._firestoreClient.write(parsed.toMutations(this._key, Precondition.exists(true)));
  };

  DocumentReference.prototype.delete = function () {
    validateExactNumberOfArgs('DocumentReference.delete', arguments, 0);
    return this._firestoreClient.write([new DeleteMutation(this._key, Precondition.NONE)]);
  };

  DocumentReference.prototype.onSnapshot = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    validateBetweenNumberOfArgs('DocumentReference.onSnapshot', arguments, 1, 4);
    var options = {
      includeMetadataChanges: false
    };
    var observer;
    var currArg = 0;

    if (typeof args[currArg] === 'object' && !isPartialObserver(args[currArg])) {
      options = args[currArg];
      validateOptionNames('DocumentReference.onSnapshot', options, ['includeMetadataChanges']);
      validateNamedOptionalType('DocumentReference.onSnapshot', 'boolean', 'includeMetadataChanges', options.includeMetadataChanges);
      currArg++;
    }

    var internalOptions = {
      includeMetadataChanges: options.includeMetadataChanges
    };

    if (isPartialObserver(args[currArg])) {
      observer = args[currArg];
    } else {
      validateArgType('DocumentReference.onSnapshot', 'function', currArg, args[currArg]);
      validateOptionalArgType('DocumentReference.onSnapshot', 'function', currArg + 1, args[currArg + 1]);
      validateOptionalArgType('DocumentReference.onSnapshot', 'function', currArg + 2, args[currArg + 2]);
      observer = {
        next: args[currArg],
        error: args[currArg + 1],
        complete: args[currArg + 2]
      };
    }

    return this.onSnapshotInternal(internalOptions, observer);
  };

  DocumentReference.prototype.onSnapshotInternal = function (options, observer) {
    var _this = this;

    var errHandler = function (err) {
      console.error('Uncaught Error in onSnapshot:', err);
    };

    if (observer.error) {
      errHandler = observer.error.bind(observer);
    }

    var asyncObserver = new AsyncObserver({
      next: function (snapshot) {
        if (observer.next) {
          assert(snapshot.docs.size <= 1, 'Too many documents returned on a document query');
          var doc = snapshot.docs.get(_this._key);
          observer.next(new DocumentSnapshot(_this.firestore, _this._key, doc, snapshot.fromCache, snapshot.hasPendingWrites));
        }
      },
      error: errHandler
    });

    var internalListener = this._firestoreClient.listen(Query.atPath(this._key.path), asyncObserver, options);

    return function () {
      asyncObserver.mute();

      _this._firestoreClient.unlisten(internalListener);
    };
  };

  DocumentReference.prototype.get = function (options) {
    var _this = this;

    validateBetweenNumberOfArgs('DocumentReference.get', arguments, 0, 1);
    validateGetOptions('DocumentReference.get', options);
    return new Promise(function (resolve, reject) {
      if (options && options.source === 'cache') {
        _this.firestore.ensureClientConfigured().getDocumentFromLocalCache(_this._key).then(function (doc) {
          resolve(new DocumentSnapshot(_this.firestore, _this._key, doc,
          /*fromCache=*/
          true, doc instanceof Document ? doc.hasLocalMutations : false));
        }, reject);
      } else {
        _this.getViaSnapshotListener(resolve, reject, options);
      }
    });
  };

  DocumentReference.prototype.getViaSnapshotListener = function (resolve, reject, options) {
    var unlisten = this.onSnapshotInternal({
      includeMetadataChanges: true,
      waitForSyncWhenOnline: true
    }, {
      next: function (snap) {
        // Remove query first before passing event to user to avoid
        // user actions affecting the now stale query.
        unlisten();

        if (!snap.exists && snap.metadata.fromCache) {
          // TODO(dimond): If we're online and the document doesn't
          // exist then we resolve with a doc.exists set to false. If
          // we're offline however, we reject the Promise in this
          // case. Two options: 1) Cache the negative response from
          // the server so we can deliver that even when you're
          // offline 2) Actually reject the Promise in the online case
          // if the document doesn't exist.
          reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get document because the client is ' + 'offline.'));
        } else if (snap.exists && snap.metadata.fromCache && options && options.source === 'server') {
          reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get document from server. (However, this ' + 'document does exist in the local cache. Run again ' + 'without setting source to "server" to ' + 'retrieve the cached document.)'));
        } else {
          resolve(snap);
        }
      },
      error: reject
    });
  };

  return DocumentReference;
}();

var SnapshotMetadata =
/** @class */
function () {
  function SnapshotMetadata(hasPendingWrites, fromCache) {
    this.hasPendingWrites = hasPendingWrites;
    this.fromCache = fromCache;
  }

  SnapshotMetadata.prototype.isEqual = function (other) {
    return this.hasPendingWrites === other.hasPendingWrites && this.fromCache === other.fromCache;
  };

  return SnapshotMetadata;
}();

var DocumentSnapshot =
/** @class */
function () {
  function DocumentSnapshot(_firestore, _key, _document, _fromCache, _hasPendingWrites) {
    this._firestore = _firestore;
    this._key = _key;
    this._document = _document;
    this._fromCache = _fromCache;
    this._hasPendingWrites = _hasPendingWrites;
  }

  DocumentSnapshot.prototype.data = function (options) {
    validateBetweenNumberOfArgs('DocumentSnapshot.data', arguments, 0, 1);
    options = validateSnapshotOptions('DocumentSnapshot.data', options);
    return !this._document ? undefined : this.convertObject(this._document.data, FieldValueOptions.fromSnapshotOptions(options, this._firestore._areTimestampsInSnapshotsEnabled()));
  };

  DocumentSnapshot.prototype.get = function (fieldPath, options) {
    validateBetweenNumberOfArgs('DocumentSnapshot.get', arguments, 1, 2);
    options = validateSnapshotOptions('DocumentSnapshot.get', options);

    if (this._document) {
      var value = this._document.data.field(fieldPathFromArgument('DocumentSnapshot.get', fieldPath));

      if (value !== undefined) {
        return this.convertValue(value, FieldValueOptions.fromSnapshotOptions(options, this._firestore._areTimestampsInSnapshotsEnabled()));
      }
    }

    return undefined;
  };

  Object.defineProperty(DocumentSnapshot.prototype, "id", {
    get: function () {
      return this._key.path.lastSegment();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(DocumentSnapshot.prototype, "ref", {
    get: function () {
      return new DocumentReference(this._key, this._firestore);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(DocumentSnapshot.prototype, "exists", {
    get: function () {
      return this._document !== null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(DocumentSnapshot.prototype, "metadata", {
    get: function () {
      return new SnapshotMetadata(this._hasPendingWrites, this._fromCache);
    },
    enumerable: true,
    configurable: true
  });

  DocumentSnapshot.prototype.isEqual = function (other) {
    if (!(other instanceof DocumentSnapshot)) {
      throw invalidClassError('isEqual', 'DocumentSnapshot', 1, other);
    }

    return this._firestore === other._firestore && this._fromCache === other._fromCache && this._key.isEqual(other._key) && (this._document === null ? other._document === null : this._document.isEqual(other._document));
  };

  DocumentSnapshot.prototype.convertObject = function (data, options) {
    var _this = this;

    var result = {};
    data.forEach(function (key, value) {
      result[key] = _this.convertValue(value, options);
    });
    return result;
  };

  DocumentSnapshot.prototype.convertValue = function (value, options) {
    if (value instanceof ObjectValue) {
      return this.convertObject(value, options);
    } else if (value instanceof ArrayValue) {
      return this.convertArray(value, options);
    } else if (value instanceof RefValue) {
      var key = value.value(options);

      var database = this._firestore.ensureClientConfigured().databaseId();

      if (!value.databaseId.isEqual(database)) {
        // TODO(b/64130202): Somehow support foreign references.
        error("Document " + this._key.path + " contains a document " + "reference within a different database (" + (value.databaseId.projectId + "/" + value.databaseId.database + ") which is not ") + "supported. It will be treated as a reference in the current " + ("database (" + database.projectId + "/" + database.database + ") ") + "instead.");
      }

      return new DocumentReference(key, this._firestore);
    } else {
      return value.value(options);
    }
  };

  DocumentSnapshot.prototype.convertArray = function (data, options) {
    var _this = this;

    return data.internalValue.map(function (value) {
      return _this.convertValue(value, options);
    });
  };

  return DocumentSnapshot;
}();

var QueryDocumentSnapshot =
/** @class */
function (_super) {
  tslib_1.__extends(QueryDocumentSnapshot, _super);

  function QueryDocumentSnapshot(firestore, key, document, fromCache, hasPendingWrites) {
    return _super.call(this, firestore, key, document, fromCache, hasPendingWrites) || this;
  }

  QueryDocumentSnapshot.prototype.data = function (options) {
    var data = _super.prototype.data.call(this, options);

    assert(typeof data === 'object', 'Document in a QueryDocumentSnapshot should exist');
    return data;
  };

  return QueryDocumentSnapshot;
}(DocumentSnapshot);

var Query$1 =
/** @class */
function () {
  function Query(_query, firestore) {
    this._query = _query;
    this.firestore = firestore;
  }

  Query.prototype.where = function (field, opStr, value) {
    validateExactNumberOfArgs('Query.where', arguments, 3);
    validateDefined('Query.where', 3, value); // TODO(in-queries): Add 'in' and 'array-contains-any' to validation.

    if (opStr !== 'in' && opStr !== 'array-contains-any') {
      // Enumerated from the WhereFilterOp type in index.d.ts.
      var whereFilterOpEnums = ['<', '<=', '==', '>=', '>', 'array-contains'];
      validateStringEnum('Query.where', whereFilterOpEnums, 2, opStr);
    }

    var fieldValue;
    var fieldPath = fieldPathFromArgument('Query.where', field);
    var relationOp = RelationOp.fromString(opStr);

    if (fieldPath.isKeyField()) {
      if (relationOp === RelationOp.ARRAY_CONTAINS || relationOp === RelationOp.ARRAY_CONTAINS_ANY || relationOp === RelationOp.IN) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid Query. You can't perform '" + relationOp.toString() + "' " + 'queries on FieldPath.documentId().');
      }

      if (typeof value === 'string') {
        if (value === '') {
          throw new FirestoreError(Code.INVALID_ARGUMENT, 'Function Query.where() requires its third parameter to be a ' + 'valid document ID if the first parameter is ' + 'FieldPath.documentId(), but it was an empty string.');
        }

        if (!this._query.isCollectionGroupQuery() && value.indexOf('/') !== -1) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid third parameter to Query.where(). When querying a collection by " + "FieldPath.documentId(), the value provided must be a plain document ID, but " + ("'" + value + "' contains a slash."));
        }

        var path = this._query.path.child(ResourcePath.fromString(value));

        if (!DocumentKey.isDocumentKey(path)) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid third parameter to Query.where(). When querying a collection group by " + "FieldPath.documentId(), the value provided must result in a valid document path, " + ("but '" + path + "' is not because it has an odd number of segments (" + path.length + ")."));
        }

        fieldValue = new RefValue(this.firestore._databaseId, new DocumentKey(path));
      } else if (value instanceof DocumentReference) {
        var ref = value;
        fieldValue = new RefValue(this.firestore._databaseId, ref._key);
      } else {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Function Query.where() requires its third parameter to be a " + "string or a DocumentReference if the first parameter is " + "FieldPath.documentId(), but it was: " + (valueDescription(value) + "."));
      }
    } else {
      if (relationOp === RelationOp.IN || relationOp === RelationOp.ARRAY_CONTAINS_ANY) {
        if (!Array.isArray(value) || value.length === 0) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid Query. A non-empty array is required for ' + ("'" + relationOp.toString() + "' filters."));
        }

        if (value.length > 10) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid Query. '" + relationOp.toString() + "' filters support a " + 'maximum of 10 elements in the value array.');
        }
      }

      fieldValue = this.firestore._dataConverter.parseQueryValue('Query.where', value);
    }

    var filter = Filter.create(fieldPath, relationOp, fieldValue);
    this.validateNewFilter(filter);
    return new Query(this._query.addFilter(filter), this.firestore);
  };

  Query.prototype.orderBy = function (field, directionStr) {
    validateBetweenNumberOfArgs('Query.orderBy', arguments, 1, 2);
    validateOptionalArgType('Query.orderBy', 'non-empty string', 2, directionStr);
    var direction;

    if (directionStr === undefined || directionStr === 'asc') {
      direction = Direction.ASCENDING;
    } else if (directionStr === 'desc') {
      direction = Direction.DESCENDING;
    } else {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Function Query.orderBy() has unknown direction '" + directionStr + "', " + "expected 'asc' or 'desc'.");
    }

    if (this._query.startAt !== null) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call Query.startAt() or ' + 'Query.startAfter() before calling Query.orderBy().');
    }

    if (this._query.endAt !== null) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call Query.endAt() or ' + 'Query.endBefore() before calling Query.orderBy().');
    }

    var fieldPath = fieldPathFromArgument('Query.orderBy', field);
    var orderBy = new OrderBy(fieldPath, direction);
    this.validateNewOrderBy(orderBy);
    return new Query(this._query.addOrderBy(orderBy), this.firestore);
  };

  Query.prototype.limit = function (n) {
    validateExactNumberOfArgs('Query.limit', arguments, 1);
    validateArgType('Query.limit', 'number', 1, n);

    if (n <= 0) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid Query. Query limit (" + n + ") is invalid. Limit must be " + 'positive.');
    }

    return new Query(this._query.withLimit(n), this.firestore);
  };

  Query.prototype.startAt = function (docOrField) {
    var fields = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      fields[_i - 1] = arguments[_i];
    }

    validateAtLeastNumberOfArgs('Query.startAt', arguments, 1);
    var bound = this.boundFromDocOrFields('Query.startAt', docOrField, fields,
    /*before=*/
    true);
    return new Query(this._query.withStartAt(bound), this.firestore);
  };

  Query.prototype.startAfter = function (docOrField) {
    var fields = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      fields[_i - 1] = arguments[_i];
    }

    validateAtLeastNumberOfArgs('Query.startAfter', arguments, 1);
    var bound = this.boundFromDocOrFields('Query.startAfter', docOrField, fields,
    /*before=*/
    false);
    return new Query(this._query.withStartAt(bound), this.firestore);
  };

  Query.prototype.endBefore = function (docOrField) {
    var fields = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      fields[_i - 1] = arguments[_i];
    }

    validateAtLeastNumberOfArgs('Query.endBefore', arguments, 1);
    var bound = this.boundFromDocOrFields('Query.endBefore', docOrField, fields,
    /*before=*/
    true);
    return new Query(this._query.withEndAt(bound), this.firestore);
  };

  Query.prototype.endAt = function (docOrField) {
    var fields = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      fields[_i - 1] = arguments[_i];
    }

    validateAtLeastNumberOfArgs('Query.endAt', arguments, 1);
    var bound = this.boundFromDocOrFields('Query.endAt', docOrField, fields,
    /*before=*/
    false);
    return new Query(this._query.withEndAt(bound), this.firestore);
  };

  Query.prototype.isEqual = function (other) {
    if (!(other instanceof Query)) {
      throw invalidClassError('isEqual', 'Query', 1, other);
    }

    return this.firestore === other.firestore && this._query.isEqual(other._query);
  };
  /** Helper function to create a bound from a document or fields */


  Query.prototype.boundFromDocOrFields = function (methodName, docOrField, fields, before) {
    validateDefined(methodName, 1, docOrField);

    if (docOrField instanceof DocumentSnapshot) {
      if (fields.length > 0) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Too many arguments provided to " + methodName + "().");
      }

      var snap = docOrField;

      if (!snap.exists) {
        throw new FirestoreError(Code.NOT_FOUND, "Can't use a DocumentSnapshot that doesn't exist for " + (methodName + "()."));
      }

      return this.boundFromDocument(methodName, snap._document, before);
    } else {
      var allFields = [docOrField].concat(fields);
      return this.boundFromFields(methodName, allFields, before);
    }
  };
  /**
   * Create a Bound from a query and a document.
   *
   * Note that the Bound will always include the key of the document
   * and so only the provided document will compare equal to the returned
   * position.
   *
   * Will throw if the document does not contain all fields of the order by
   * of the query or if any of the fields in the order by are an uncommitted
   * server timestamp.
   */


  Query.prototype.boundFromDocument = function (methodName, doc, before) {
    var components = []; // Because people expect to continue/end a query at the exact document
    // provided, we need to use the implicit sort order rather than the explicit
    // sort order, because it's guaranteed to contain the document key. That way
    // the position becomes unambiguous and the query continues/ends exactly at
    // the provided document. Without the key (by using the explicit sort
    // orders), multiple documents could match the position, yielding duplicate
    // results.

    for (var _i = 0, _a = this._query.orderBy; _i < _a.length; _i++) {
      var orderBy = _a[_i];

      if (orderBy.field.isKeyField()) {
        components.push(new RefValue(this.firestore._databaseId, doc.key));
      } else {
        var value = doc.field(orderBy.field);

        if (value instanceof ServerTimestampValue) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a ' + 'document for which the field "' + orderBy.field + '" is an uncommitted server timestamp. (Since the value of ' + 'this field is unknown, you cannot start/end a query with it.)');
        } else if (value !== undefined) {
          components.push(value);
        } else {
          var field = orderBy.field.canonicalString();
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You are trying to start or end a query using a " + ("document for which the field '" + field + "' (used as the ") + "orderBy) does not exist.");
        }
      }
    }

    return new Bound(components, before);
  };
  /**
   * Converts a list of field values to a Bound for the given query.
   */


  Query.prototype.boundFromFields = function (methodName, values, before) {
    // Use explicit order by's because it has to match the query the user made
    var orderBy = this._query.explicitOrderBy;

    if (values.length > orderBy.length) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Too many arguments provided to " + methodName + "(). " + "The number of arguments must be less than or equal to the " + "number of Query.orderBy() clauses");
    }

    var components = [];

    for (var i = 0; i < values.length; i++) {
      var rawValue = values[i];
      var orderByComponent = orderBy[i];

      if (orderByComponent.field.isKeyField()) {
        if (typeof rawValue !== 'string') {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. Expected a string for document ID in " + (methodName + "(), but got a " + typeof rawValue));
        }

        if (!this._query.isCollectionGroupQuery() && rawValue.indexOf('/') !== -1) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. When querying a collection and ordering by FieldPath.documentId(), " + ("the value passed to " + methodName + "() must be a plain document ID, but ") + ("'" + rawValue + "' contains a slash."));
        }

        var path = this._query.path.child(ResourcePath.fromString(rawValue));

        if (!DocumentKey.isDocumentKey(path)) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. When querying a collection group and ordering by " + ("FieldPath.documentId(), the value passed to " + methodName + "() must result in a ") + ("valid document path, but '" + path + "' is not because it contains an odd number ") + "of segments.");
        }

        var key = new DocumentKey(path);
        components.push(new RefValue(this.firestore._databaseId, key));
      } else {
        var wrapped = this.firestore._dataConverter.parseQueryValue(methodName, rawValue);

        components.push(wrapped);
      }
    }

    return new Bound(components, before);
  };

  Query.prototype.onSnapshot = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    validateBetweenNumberOfArgs('Query.onSnapshot', arguments, 1, 4);
    var options = {};
    var observer;
    var currArg = 0;

    if (typeof args[currArg] === 'object' && !isPartialObserver(args[currArg])) {
      options = args[currArg];
      validateOptionNames('Query.onSnapshot', options, ['includeMetadataChanges']);
      validateNamedOptionalType('Query.onSnapshot', 'boolean', 'includeMetadataChanges', options.includeMetadataChanges);
      currArg++;
    }

    if (isPartialObserver(args[currArg])) {
      observer = args[currArg];
    } else {
      validateArgType('Query.onSnapshot', 'function', currArg, args[currArg]);
      validateOptionalArgType('Query.onSnapshot', 'function', currArg + 1, args[currArg + 1]);
      validateOptionalArgType('Query.onSnapshot', 'function', currArg + 2, args[currArg + 2]);
      observer = {
        next: args[currArg],
        error: args[currArg + 1],
        complete: args[currArg + 2]
      };
    }

    return this.onSnapshotInternal(options, observer);
  };

  Query.prototype.onSnapshotInternal = function (options, observer) {
    var _this = this;

    var errHandler = function (err) {
      console.error('Uncaught Error in onSnapshot:', err);
    };

    if (observer.error) {
      errHandler = observer.error.bind(observer);
    }

    var asyncObserver = new AsyncObserver({
      next: function (result) {
        if (observer.next) {
          observer.next(new QuerySnapshot(_this.firestore, _this._query, result));
        }
      },
      error: errHandler
    });
    var firestoreClient = this.firestore.ensureClientConfigured();
    var internalListener = firestoreClient.listen(this._query, asyncObserver, options);
    return function () {
      asyncObserver.mute();
      firestoreClient.unlisten(internalListener);
    };
  };

  Query.prototype.get = function (options) {
    var _this = this;

    validateBetweenNumberOfArgs('Query.get', arguments, 0, 1);
    validateGetOptions('Query.get', options);
    return new Promise(function (resolve, reject) {
      if (options && options.source === 'cache') {
        _this.firestore.ensureClientConfigured().getDocumentsFromLocalCache(_this._query).then(function (viewSnap) {
          resolve(new QuerySnapshot(_this.firestore, _this._query, viewSnap));
        }, reject);
      } else {
        _this.getViaSnapshotListener(resolve, reject, options);
      }
    });
  };

  Query.prototype.getViaSnapshotListener = function (resolve, reject, options) {
    var unlisten = this.onSnapshotInternal({
      includeMetadataChanges: true,
      waitForSyncWhenOnline: true
    }, {
      next: function (result) {
        // Remove query first before passing event to user to avoid
        // user actions affecting the now stale query.
        unlisten();

        if (result.metadata.fromCache && options && options.source === 'server') {
          reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get documents from server. (However, these ' + 'documents may exist in the local cache. Run again ' + 'without setting source to "server" to ' + 'retrieve the cached documents.)'));
        } else {
          resolve(result);
        }
      },
      error: reject
    });
  };

  Query.prototype.validateNewFilter = function (filter) {
    if (filter instanceof RelationFilter) {
      var arrayOps = [RelationOp.ARRAY_CONTAINS, RelationOp.ARRAY_CONTAINS_ANY];
      var disjunctiveOps = [RelationOp.IN, RelationOp.ARRAY_CONTAINS_ANY];
      var isArrayOp = arrayOps.indexOf(filter.op) >= 0;
      var isDisjunctiveOp = disjunctiveOps.indexOf(filter.op) >= 0;

      if (filter.isInequality()) {
        var existingField = this._query.getInequalityFilterField();

        if (existingField !== null && !existingField.isEqual(filter.field)) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. All where filters with an inequality' + ' (<, <=, >, or >=) must be on the same field. But you have' + (" inequality filters on '" + existingField.toString() + "'") + (" and '" + filter.field.toString() + "'"));
        }

        var firstOrderByField = this._query.getFirstOrderByField();

        if (firstOrderByField !== null) {
          this.validateOrderByAndInequalityMatch(filter.field, firstOrderByField);
        }
      } else if (isDisjunctiveOp || isArrayOp) {
        // You can have at most 1 disjunctive filter and 1 array filter. Check if
        // the new filter conflicts with an existing one.
        var conflictingOp = null;

        if (isDisjunctiveOp) {
          conflictingOp = this._query.findRelationOpFilter(disjunctiveOps);
        }

        if (conflictingOp === null && isArrayOp) {
          conflictingOp = this._query.findRelationOpFilter(arrayOps);
        }

        if (conflictingOp != null) {
          // We special case when it's a duplicate op to give a slightly clearer error message.
          if (conflictingOp === filter.op) {
            throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You cannot use more than one ' + ("'" + filter.op.toString() + "' filter."));
          } else {
            throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You cannot use '" + filter.op.toString() + "' filters " + ("with '" + conflictingOp.toString() + "' filters."));
          }
        }
      }
    }
  };

  Query.prototype.validateNewOrderBy = function (orderBy) {
    if (this._query.getFirstOrderByField() === null) {
      // This is the first order by. It must match any inequality.
      var inequalityField = this._query.getInequalityFilterField();

      if (inequalityField !== null) {
        this.validateOrderByAndInequalityMatch(inequalityField, orderBy.field);
      }
    }
  };

  Query.prototype.validateOrderByAndInequalityMatch = function (inequality, orderBy) {
    if (!orderBy.isEqual(inequality)) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You have a where filter with an inequality " + ("(<, <=, >, or >=) on field '" + inequality.toString() + "' ") + ("and so you must also use '" + inequality.toString() + "' ") + "as your first Query.orderBy(), but your first Query.orderBy() " + ("is on field '" + orderBy.toString() + "' instead."));
    }
  };

  return Query;
}();

var QuerySnapshot =
/** @class */
function () {
  function QuerySnapshot(_firestore, _originalQuery, _snapshot) {
    this._firestore = _firestore;
    this._originalQuery = _originalQuery;
    this._snapshot = _snapshot;
    this._cachedChanges = null;
    this._cachedChangesIncludeMetadataChanges = null;
    this.metadata = new SnapshotMetadata(_snapshot.hasPendingWrites, _snapshot.fromCache);
  }

  Object.defineProperty(QuerySnapshot.prototype, "docs", {
    get: function () {
      var result = [];
      this.forEach(function (doc) {
        return result.push(doc);
      });
      return result;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(QuerySnapshot.prototype, "empty", {
    get: function () {
      return this._snapshot.docs.isEmpty();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(QuerySnapshot.prototype, "size", {
    get: function () {
      return this._snapshot.docs.size;
    },
    enumerable: true,
    configurable: true
  });

  QuerySnapshot.prototype.forEach = function (callback, thisArg) {
    var _this = this;

    validateBetweenNumberOfArgs('QuerySnapshot.forEach', arguments, 1, 2);
    validateArgType('QuerySnapshot.forEach', 'function', 1, callback);

    this._snapshot.docs.forEach(function (doc) {
      callback.call(thisArg, _this.convertToDocumentImpl(doc));
    });
  };

  Object.defineProperty(QuerySnapshot.prototype, "query", {
    get: function () {
      return new Query$1(this._originalQuery, this._firestore);
    },
    enumerable: true,
    configurable: true
  });

  QuerySnapshot.prototype.docChanges = function (options) {
    if (options) {
      validateOptionNames('QuerySnapshot.docChanges', options, ['includeMetadataChanges']);
      validateNamedOptionalType('QuerySnapshot.docChanges', 'boolean', 'includeMetadataChanges', options.includeMetadataChanges);
    }

    var includeMetadataChanges = !!(options && options.includeMetadataChanges);

    if (includeMetadataChanges && this._snapshot.excludesMetadataChanges) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'To include metadata changes with your document changes, you must ' + 'also pass { includeMetadataChanges:true } to onSnapshot().');
    }

    if (!this._cachedChanges || this._cachedChangesIncludeMetadataChanges !== includeMetadataChanges) {
      this._cachedChanges = changesFromSnapshot(this._firestore, includeMetadataChanges, this._snapshot);
      this._cachedChangesIncludeMetadataChanges = includeMetadataChanges;
    }

    return this._cachedChanges;
  };
  /** Check the equality. The call can be very expensive. */


  QuerySnapshot.prototype.isEqual = function (other) {
    if (!(other instanceof QuerySnapshot)) {
      throw invalidClassError('isEqual', 'QuerySnapshot', 1, other);
    }

    return this._firestore === other._firestore && this._originalQuery.isEqual(other._originalQuery) && this._snapshot.isEqual(other._snapshot);
  };

  QuerySnapshot.prototype.convertToDocumentImpl = function (doc) {
    return new QueryDocumentSnapshot(this._firestore, doc.key, doc, this.metadata.fromCache, this._snapshot.mutatedKeys.has(doc.key));
  };

  return QuerySnapshot;
}(); // TODO(2018/11/01): As of 2018/04/17 we're changing docChanges from an array
// into a method. Because this is a runtime breaking change and somewhat subtle
// (both Array and Function have a .length, etc.), we'll replace commonly-used
// properties (including Symbol.iterator) to throw a custom error message. In
// ~6 months we can delete the custom error as most folks will have hopefully
// migrated.


function throwDocChangesMethodError() {
  throw new FirestoreError(Code.INVALID_ARGUMENT, 'QuerySnapshot.docChanges has been changed from a property into a ' + 'method, so usages like "querySnapshot.docChanges" should become ' + '"querySnapshot.docChanges()"');
}

var docChangesPropertiesToOverride = ['length', 'forEach', 'map'].concat(typeof Symbol !== 'undefined' ? [Symbol.iterator] : []);
docChangesPropertiesToOverride.forEach(function (property) {
  /**
   * We are (re-)defining properties on QuerySnapshot.prototype.docChanges which
   * is a Function. This could fail, in particular in the case of 'length' which
   * already exists on Function.prototype and on IE11 is improperly defined with
   * `{ configurable: false }`. So we wrap this in a try/catch to ensure that we
   * still have a functional SDK.
   */
  try {
    Object.defineProperty(QuerySnapshot.prototype.docChanges, property, {
      get: function () {
        return throwDocChangesMethodError();
      }
    });
  } catch (err) {} // Ignore this failure intentionally

});

var CollectionReference =
/** @class */
function (_super) {
  tslib_1.__extends(CollectionReference, _super);

  function CollectionReference(path, firestore) {
    var _this = _super.call(this, Query.atPath(path), firestore) || this;

    if (path.length % 2 !== 1) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid collection reference. Collection ' + 'references must have an odd number of segments, but ' + (path.canonicalString() + " has " + path.length));
    }

    return _this;
  }

  Object.defineProperty(CollectionReference.prototype, "id", {
    get: function () {
      return this._query.path.lastSegment();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(CollectionReference.prototype, "parent", {
    get: function () {
      var parentPath = this._query.path.popLast();

      if (parentPath.isEmpty()) {
        return null;
      } else {
        return new DocumentReference(new DocumentKey(parentPath), this.firestore);
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(CollectionReference.prototype, "path", {
    get: function () {
      return this._query.path.canonicalString();
    },
    enumerable: true,
    configurable: true
  });

  CollectionReference.prototype.doc = function (pathString) {
    validateBetweenNumberOfArgs('CollectionReference.doc', arguments, 0, 1); // We allow omission of 'pathString' but explicitly prohibit passing in both
    // 'undefined' and 'null'.

    if (arguments.length === 0) {
      pathString = AutoId.newId();
    }

    validateArgType('CollectionReference.doc', 'non-empty string', 1, pathString);

    if (pathString === '') {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Document path must be a non-empty string');
    }

    var path = ResourcePath.fromString(pathString);
    return DocumentReference.forPath(this._query.path.child(path), this.firestore);
  };

  CollectionReference.prototype.add = function (value) {
    validateExactNumberOfArgs('CollectionReference.add', arguments, 1);
    validateArgType('CollectionReference.add', 'object', 1, value);
    var docRef = this.doc();
    return docRef.set(value).then(function () {
      return docRef;
    });
  };

  return CollectionReference;
}(Query$1);

function validateSetOptions(methodName, options) {
  if (options === undefined) {
    return {
      merge: false
    };
  }

  validateOptionNames(methodName, options, ['merge', 'mergeFields']);
  validateNamedOptionalType(methodName, 'boolean', 'merge', options.merge);
  validateOptionalArrayElements(methodName, 'mergeFields', 'a string or a FieldPath', options.mergeFields, function (element) {
    return typeof element === 'string' || element instanceof FieldPath$1;
  });

  if (options.mergeFields !== undefined && options.merge !== undefined) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid options passed to function " + methodName + "(): You cannot specify both \"merge\" " + "and \"mergeFields\".");
  }

  return options;
}

function validateSnapshotOptions(methodName, options) {
  if (options === undefined) {
    return {};
  }

  validateOptionNames(methodName, options, ['serverTimestamps']);
  validateNamedOptionalPropertyEquals(methodName, 'options', 'serverTimestamps', options.serverTimestamps, ['estimate', 'previous', 'none']);
  return options;
}

function validateGetOptions(methodName, options) {
  validateOptionalArgType(methodName, 'object', 1, options);

  if (options) {
    validateOptionNames(methodName, options, ['source']);
    validateNamedOptionalPropertyEquals(methodName, 'options', 'source', options.source, ['default', 'server', 'cache']);
  }
}

function validateReference(methodName, documentRef, firestore) {
  if (!(documentRef instanceof DocumentReference)) {
    throw invalidClassError(methodName, 'DocumentReference', 1, documentRef);
  } else if (documentRef.firestore !== firestore) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Provided document reference is from a different Firestore instance.');
  } else {
    return documentRef;
  }
}
/**
 * Calculates the array of firestore.DocumentChange's for a given ViewSnapshot.
 *
 * Exported for testing.
 */


function changesFromSnapshot(firestore, includeMetadataChanges, snapshot) {
  if (snapshot.oldDocs.isEmpty()) {
    // Special case the first snapshot because index calculation is easy and
    // fast
    var lastDoc_1;
    var index_1 = 0;
    return snapshot.docChanges.map(function (change) {
      var doc = new QueryDocumentSnapshot(firestore, change.doc.key, change.doc, snapshot.fromCache, snapshot.mutatedKeys.has(change.doc.key));
      assert(change.type === ChangeType.Added, 'Invalid event type for first snapshot');
      assert(!lastDoc_1 || snapshot.query.docComparator(lastDoc_1, change.doc) < 0, 'Got added events in wrong order');
      lastDoc_1 = change.doc;
      return {
        type: 'added',
        doc: doc,
        oldIndex: -1,
        newIndex: index_1++
      };
    });
  } else {
    // A DocumentSet that is updated incrementally as changes are applied to use
    // to lookup the index of a document.
    var indexTracker_1 = snapshot.oldDocs;
    return snapshot.docChanges.filter(function (change) {
      return includeMetadataChanges || change.type !== ChangeType.Metadata;
    }).map(function (change) {
      var doc = new QueryDocumentSnapshot(firestore, change.doc.key, change.doc, snapshot.fromCache, snapshot.mutatedKeys.has(change.doc.key));
      var oldIndex = -1;
      var newIndex = -1;

      if (change.type !== ChangeType.Added) {
        oldIndex = indexTracker_1.indexOf(change.doc.key);
        assert(oldIndex >= 0, 'Index for document not found');
        indexTracker_1 = indexTracker_1.delete(change.doc.key);
      }

      if (change.type !== ChangeType.Removed) {
        indexTracker_1 = indexTracker_1.add(change.doc);
        newIndex = indexTracker_1.indexOf(change.doc.key);
      }

      return {
        type: resultChangeType(change.type),
        doc: doc,
        oldIndex: oldIndex,
        newIndex: newIndex
      };
    });
  }
}

function resultChangeType(type) {
  switch (type) {
    case ChangeType.Added:
      return 'added';

    case ChangeType.Modified:
    case ChangeType.Metadata:
      return 'modified';

    case ChangeType.Removed:
      return 'removed';

    default:
      return fail('Unknown change type: ' + type);
  }
} // Export the classes with a private constructor (it will fail if invoked
// at runtime). Note that this still allows instanceof checks.
// We're treating the variables as class names, so disable checking for lower
// case variable names.
// tslint:disable:variable-name


var PublicFirestore = makeConstructorPrivate(Firestore, 'Use firebase.firestore() instead.');
var PublicTransaction = makeConstructorPrivate(Transaction$1, 'Use firebase.firestore().runTransaction() instead.');
var PublicWriteBatch = makeConstructorPrivate(WriteBatch, 'Use firebase.firestore().batch() instead.');
var PublicDocumentReference = makeConstructorPrivate(DocumentReference, 'Use firebase.firestore().doc() instead.');
var PublicDocumentSnapshot = makeConstructorPrivate(DocumentSnapshot);
var PublicQueryDocumentSnapshot = makeConstructorPrivate(QueryDocumentSnapshot);
var PublicQuery = makeConstructorPrivate(Query$1);
var PublicQuerySnapshot = makeConstructorPrivate(QuerySnapshot);
var PublicCollectionReference = makeConstructorPrivate(CollectionReference, 'Use firebase.firestore().collection() instead.'); // tslint:enable:variable-name

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var firestoreNamespace = {
  Firestore: PublicFirestore,
  GeoPoint: GeoPoint,
  Timestamp: Timestamp,
  Blob: PublicBlob,
  Transaction: PublicTransaction,
  WriteBatch: PublicWriteBatch,
  DocumentReference: PublicDocumentReference,
  DocumentSnapshot: PublicDocumentSnapshot,
  Query: PublicQuery,
  QueryDocumentSnapshot: PublicQueryDocumentSnapshot,
  QuerySnapshot: PublicQuerySnapshot,
  CollectionReference: PublicCollectionReference,
  FieldPath: FieldPath$1,
  FieldValue: PublicFieldValue,
  setLogLevel: Firestore.setLogLevel,
  CACHE_SIZE_UNLIMITED: CACHE_SIZE_UNLIMITED
};
/**
 * Configures Firestore as part of the Firebase SDK by calling registerService.
 */

function configureForFirebase(firebase) {
  firebase.INTERNAL.registerService('firestore', function (app) {
    return new Firestore(app);
  }, shallowCopy(firestoreNamespace));
}
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var NoopConnectivityMonitor =
/** @class */
function () {
  function NoopConnectivityMonitor() {}

  NoopConnectivityMonitor.prototype.addCallback = function (callback) {// No-op.
  };

  NoopConnectivityMonitor.prototype.shutdown = function () {// No-op.
  };

  return NoopConnectivityMonitor;
}();
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var LOG_TAG$b = 'ConnectivityMonitor';
/**
 * Browser implementation of ConnectivityMonitor.
 */

var BrowserConnectivityMonitor =
/** @class */
function () {
  function BrowserConnectivityMonitor() {
    var _this = this;

    this.networkAvailableListener = function () {
      return _this.onNetworkAvailable();
    };

    this.networkUnavailableListener = function () {
      return _this.onNetworkUnavailable();
    };

    this.callbacks = [];
    this.configureNetworkMonitoring();
  }

  BrowserConnectivityMonitor.prototype.addCallback = function (callback) {
    this.callbacks.push(callback);
  };

  BrowserConnectivityMonitor.prototype.shutdown = function () {
    window.removeEventListener('online', this.networkAvailableListener);
    window.removeEventListener('offline', this.networkUnavailableListener);
  };

  BrowserConnectivityMonitor.prototype.configureNetworkMonitoring = function () {
    window.addEventListener('online', this.networkAvailableListener);
    window.addEventListener('offline', this.networkUnavailableListener);
  };

  BrowserConnectivityMonitor.prototype.onNetworkAvailable = function () {
    debug(LOG_TAG$b, 'Network connectivity changed: AVAILABLE');

    for (var _i = 0, _a = this.callbacks; _i < _a.length; _i++) {
      var callback = _a[_i];
      callback(0
      /* AVAILABLE */
      );
    }
  };

  BrowserConnectivityMonitor.prototype.onNetworkUnavailable = function () {
    debug(LOG_TAG$b, 'Network connectivity changed: UNAVAILABLE');

    for (var _i = 0, _a = this.callbacks; _i < _a.length; _i++) {
      var callback = _a[_i];
      callback(1
      /* UNAVAILABLE */
      );
    }
  }; // TODO(chenbrian): Consider passing in window either into this component or
  // here for testing via FakeWindow.

  /** Checks that all used attributes of window are available. */


  BrowserConnectivityMonitor.isAvailable = function () {
    return typeof window !== 'undefined' && window.addEventListener !== undefined && window.removeEventListener !== undefined;
  };

  return BrowserConnectivityMonitor;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provides a simple helper class that implements the Stream interface to
 * bridge to other implementations that are streams but do not implement the
 * interface. The stream callbacks are invoked with the callOn... methods.
 */


var StreamBridge =
/** @class */
function () {
  function StreamBridge(args) {
    this.sendFn = args.sendFn;
    this.closeFn = args.closeFn;
  }

  StreamBridge.prototype.onOpen = function (callback) {
    assert(!this.wrappedOnOpen, 'Called onOpen on stream twice!');
    this.wrappedOnOpen = callback;
  };

  StreamBridge.prototype.onClose = function (callback) {
    assert(!this.wrappedOnClose, 'Called onClose on stream twice!');
    this.wrappedOnClose = callback;
  };

  StreamBridge.prototype.onMessage = function (callback) {
    assert(!this.wrappedOnMessage, 'Called onMessage on stream twice!');
    this.wrappedOnMessage = callback;
  };

  StreamBridge.prototype.close = function () {
    this.closeFn();
  };

  StreamBridge.prototype.send = function (msg) {
    this.sendFn(msg);
  };

  StreamBridge.prototype.callOnOpen = function () {
    assert(this.wrappedOnOpen !== undefined, 'Cannot call onOpen because no callback was set');
    this.wrappedOnOpen();
  };

  StreamBridge.prototype.callOnClose = function (err) {
    assert(this.wrappedOnClose !== undefined, 'Cannot call onClose because no callback was set');
    this.wrappedOnClose(err);
  };

  StreamBridge.prototype.callOnMessage = function (msg) {
    assert(this.wrappedOnMessage !== undefined, 'Cannot call onMessage because no callback was set');
    this.wrappedOnMessage(msg);
  };

  return StreamBridge;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var LOG_TAG$c = 'Connection';
var RPC_STREAM_SERVICE = 'google.firestore.v1.Firestore';
var RPC_URL_VERSION = 'v1';
/** Maps RPC names to the corresponding REST endpoint name. */

var RPC_NAME_REST_MAPPING = {
  BatchGetDocuments: 'batchGet',
  Commit: 'commit'
}; // TODO(b/38203344): The SDK_VERSION is set independently from Firebase because
// we are doing out-of-band releases. Once we release as part of Firebase, we
// should use the Firebase version instead.

var X_GOOG_API_CLIENT_VALUE = 'gl-js/ fire/' + SDK_VERSION;
var XHR_TIMEOUT_SECS = 15;

var WebChannelConnection =
/** @class */
function () {
  function WebChannelConnection(info) {
    this.databaseId = info.databaseId;
    var proto = info.ssl ? 'https' : 'http';
    this.baseUrl = proto + '://' + info.host;
    this.forceLongPolling = info.forceLongPolling;
  }
  /**
   * Modifies the headers for a request, adding any authorization token if
   * present and any additional headers for the request.
   */


  WebChannelConnection.prototype.modifyHeadersForRequest = function (headers, token) {
    if (token) {
      for (var header in token.authHeaders) {
        if (token.authHeaders.hasOwnProperty(header)) {
          headers[header] = token.authHeaders[header];
        }
      }
    }

    headers['X-Goog-Api-Client'] = X_GOOG_API_CLIENT_VALUE;
  };

  WebChannelConnection.prototype.invokeRPC = function (rpcName, request, token) {
    var _this = this;

    var url = this.makeUrl(rpcName);
    return new Promise(function (resolve, reject) {
      // tslint:disable-next-line:no-any XhrIo doesn't have TS typings.
      var xhr = new webchannelWrapper.XhrIo();
      xhr.listenOnce(webchannelWrapper.EventType.COMPLETE, function () {
        try {
          switch (xhr.getLastErrorCode()) {
            case webchannelWrapper.ErrorCode.NO_ERROR:
              var json = xhr.getResponseJson();
              debug(LOG_TAG$c, 'XHR received:', JSON.stringify(json));
              resolve(json);
              break;

            case webchannelWrapper.ErrorCode.TIMEOUT:
              debug(LOG_TAG$c, 'RPC "' + rpcName + '" timed out');
              reject(new FirestoreError(Code.DEADLINE_EXCEEDED, 'Request time out'));
              break;

            case webchannelWrapper.ErrorCode.HTTP_ERROR:
              var status_1 = xhr.getStatus();
              debug(LOG_TAG$c, 'RPC "' + rpcName + '" failed with status:', status_1, 'response text:', xhr.getResponseText());

              if (status_1 > 0) {
                reject(new FirestoreError(mapCodeFromHttpStatus(status_1), 'Server responded with status ' + xhr.getStatusText()));
              } else {
                // If we received an HTTP_ERROR but there's no status code,
                // it's most probably a connection issue
                debug(LOG_TAG$c, 'RPC "' + rpcName + '" failed');
                reject(new FirestoreError(Code.UNAVAILABLE, 'Connection failed.'));
              }

              break;

            default:
              fail('RPC "' + rpcName + '" failed with unanticipated ' + 'webchannel error ' + xhr.getLastErrorCode() + ': ' + xhr.getLastError() + ', giving up.');
          }
        } finally {
          debug(LOG_TAG$c, 'RPC "' + rpcName + '" completed.');
        }
      });
      var requestString = JSON.stringify(request);
      debug(LOG_TAG$c, 'XHR sending: ', url + ' ' + requestString); // Content-Type: text/plain will avoid preflight requests which might
      // mess with CORS and redirects by proxies. If we add custom headers
      // we will need to change this code to potentially use the
      // $httpOverwrite parameter supported by ESF to avoid
      // triggering preflight requests.

      var headers = {
        'Content-Type': 'text/plain'
      };

      _this.modifyHeadersForRequest(headers, token);

      xhr.send(url, 'POST', requestString, headers, XHR_TIMEOUT_SECS);
    });
  };

  WebChannelConnection.prototype.invokeStreamingRPC = function (rpcName, request, token) {
    // The REST API automatically aggregates all of the streamed results, so we
    // can just use the normal invoke() method.
    return this.invokeRPC(rpcName, request, token);
  };

  WebChannelConnection.prototype.openStream = function (rpcName, token) {
    var urlParts = [this.baseUrl, '/', RPC_STREAM_SERVICE, '/', rpcName, '/channel'];
    var webchannelTransport = webchannelWrapper.createWebChannelTransport();
    var request = {
      // Background channel test avoids the initial two test calls and decreases
      // initial cold start time.
      // TODO(dimond): wenboz@ mentioned this might affect use with proxies and
      // we should monitor closely for any reports.
      backgroundChannelTest: true,
      // Required for backend stickiness, routing behavior is based on this
      // parameter.
      httpSessionIdParam: 'gsessionid',
      initMessageHeaders: {},
      messageUrlParams: {
        // This param is used to improve routing and project isolation by the
        // backend and must be included in every request.
        database: "projects/" + this.databaseId.projectId + "/databases/" + this.databaseId.database
      },
      sendRawJson: true,
      supportsCrossDomainXhr: true,
      internalChannelParams: {
        // Override the default timeout (randomized between 10-20 seconds) since
        // a large write batch on a slow internet connection may take a long
        // time to send to the backend. Rather than have WebChannel impose a
        // tight timeout which could lead to infinite timeouts and retries, we
        // set it very large (5-10 minutes) and rely on the browser's builtin
        // timeouts to kick in if the request isn't working.
        forwardChannelRequestTimeoutMs: 10 * 60 * 1000
      },
      forceLongPolling: this.forceLongPolling
    };
    this.modifyHeadersForRequest(request.initMessageHeaders, token); // Sending the custom headers we just added to request.initMessageHeaders
    // (Authorization, etc.) will trigger the browser to make a CORS preflight
    // request because the XHR will no longer meet the criteria for a "simple"
    // CORS request:
    // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
    //
    // Therefore to avoid the CORS preflight request (an extra network
    // roundtrip), we use the httpHeadersOverwriteParam option to specify that
    // the headers should instead be encoded into a special "$httpHeaders" query
    // parameter, which is recognized by the webchannel backend. This is
    // formally defined here:
    // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32
    //
    // But for some unclear reason (see
    // https://github.com/firebase/firebase-js-sdk/issues/703), this breaks
    // ReactNative and so we exclude it, which just means ReactNative may be
    // subject to the extra network roundtrip for CORS preflight.

    if (!util.isReactNative()) {
      request.httpHeadersOverwriteParam = '$httpHeaders';
    }

    var url = urlParts.join('');
    debug(LOG_TAG$c, 'Creating WebChannel: ' + url + ' ' + request); // tslint:disable-next-line:no-any Because listen isn't defined on it.

    var channel = webchannelTransport.createWebChannel(url, request); // WebChannel supports sending the first message with the handshake - saving
    // a network round trip. However, it will have to call send in the same
    // JS event loop as open. In order to enforce this, we delay actually
    // opening the WebChannel until send is called. Whether we have called
    // open is tracked with this variable.

    var opened = false; // A flag to determine whether the stream was closed (by us or through an
    // error/close event) to avoid delivering multiple close events or sending
    // on a closed stream

    var closed = false;
    var streamBridge = new StreamBridge({
      sendFn: function (msg) {
        if (!closed) {
          if (!opened) {
            debug(LOG_TAG$c, 'Opening WebChannel transport.');
            channel.open();
            opened = true;
          }

          debug(LOG_TAG$c, 'WebChannel sending:', msg);
          channel.send(msg);
        } else {
          debug(LOG_TAG$c, 'Not sending because WebChannel is closed:', msg);
        }
      },
      closeFn: function () {
        return channel.close();
      }
    }); // Closure events are guarded and exceptions are swallowed, so catch any
    // exception and rethrow using a setTimeout so they become visible again.
    // Note that eventually this function could go away if we are confident
    // enough the code is exception free.

    var unguardedEventListen = function (type, fn) {
      // TODO(dimond): closure typing seems broken because WebChannel does
      // not implement goog.events.Listenable
      channel.listen(type, function (param) {
        try {
          fn(param);
        } catch (e) {
          setTimeout(function () {
            throw e;
          }, 0);
        }
      });
    };

    unguardedEventListen(webchannelWrapper.WebChannel.EventType.OPEN, function () {
      if (!closed) {
        debug(LOG_TAG$c, 'WebChannel transport opened.');
      }
    });
    unguardedEventListen(webchannelWrapper.WebChannel.EventType.CLOSE, function () {
      if (!closed) {
        closed = true;
        debug(LOG_TAG$c, 'WebChannel transport closed');
        streamBridge.callOnClose();
      }
    });
    unguardedEventListen(webchannelWrapper.WebChannel.EventType.ERROR, function (err) {
      if (!closed) {
        closed = true;
        debug(LOG_TAG$c, 'WebChannel transport errored:', err);
        streamBridge.callOnClose(new FirestoreError(Code.UNAVAILABLE, 'The operation could not be completed'));
      }
    });
    unguardedEventListen(webchannelWrapper.WebChannel.EventType.MESSAGE, function (msg) {
      if (!closed) {
        var msgData = msg.data[0];
        assert(!!msgData, 'Got a webchannel message without data.'); // TODO(b/35143891): There is a bug in One Platform that caused errors
        // (and only errors) to be wrapped in an extra array. To be forward
        // compatible with the bug we need to check either condition. The latter
        // can be removed once the fix has been rolled out.
        // tslint:disable-next-line:no-any msgData.error is not typed.

        var msgDataAsAny = msgData;
        var error = msgDataAsAny.error || msgDataAsAny[0] && msgDataAsAny[0].error;

        if (error) {
          debug(LOG_TAG$c, 'WebChannel received error:', error); // error.status will be a string like 'OK' or 'NOT_FOUND'.

          var status_2 = error.status;
          var code = mapCodeFromRpcStatus(status_2);
          var message = error.message;

          if (code === undefined) {
            code = Code.INTERNAL;
            message = 'Unknown error status: ' + status_2 + ' with message ' + error.message;
          } // Mark closed so no further events are propagated


          closed = true;
          streamBridge.callOnClose(new FirestoreError(code, message));
          channel.close();
        } else {
          debug(LOG_TAG$c, 'WebChannel received:', msgData);
          streamBridge.callOnMessage(msgData);
        }
      }
    });
    setTimeout(function () {
      // Technically we could/should wait for the WebChannel opened event,
      // but because we want to send the first message with the WebChannel
      // handshake we pretend the channel opened here (asynchronously), and
      // then delay the actual open until the first message is sent.
      streamBridge.callOnOpen();
    }, 0);
    return streamBridge;
  }; // visible for testing


  WebChannelConnection.prototype.makeUrl = function (rpcName) {
    var urlRpcName = RPC_NAME_REST_MAPPING[rpcName];
    assert(urlRpcName !== undefined, 'Unknown REST mapping for: ' + rpcName);
    var url = [this.baseUrl, '/', RPC_URL_VERSION];
    url.push('/projects/');
    url.push(this.databaseId.projectId);
    url.push('/databases/');
    url.push(this.databaseId.database);
    url.push('/documents');
    url.push(':');
    url.push(urlRpcName);
    return url.join('');
  };

  return WebChannelConnection;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var BrowserPlatform =
/** @class */
function () {
  function BrowserPlatform() {
    this.emptyByteString = '';
    this.base64Available = typeof atob !== 'undefined';
  }

  Object.defineProperty(BrowserPlatform.prototype, "document", {
    get: function () {
      return typeof document !== 'undefined' ? document : null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(BrowserPlatform.prototype, "window", {
    get: function () {
      return typeof window !== 'undefined' ? window : null;
    },
    enumerable: true,
    configurable: true
  });

  BrowserPlatform.prototype.loadConnection = function (databaseInfo) {
    return Promise.resolve(new WebChannelConnection(databaseInfo));
  };

  BrowserPlatform.prototype.newConnectivityMonitor = function () {
    if (BrowserConnectivityMonitor.isAvailable()) {
      return new BrowserConnectivityMonitor();
    } else {
      return new NoopConnectivityMonitor();
    }
  };

  BrowserPlatform.prototype.newSerializer = function (databaseId) {
    return new JsonProtoSerializer(databaseId, {
      useProto3Json: true
    });
  };

  BrowserPlatform.prototype.formatJSON = function (value) {
    return JSON.stringify(value);
  };

  BrowserPlatform.prototype.atob = function (encoded) {
    return atob(encoded);
  };

  BrowserPlatform.prototype.btoa = function (raw) {
    return btoa(raw);
  };

  return BrowserPlatform;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This code needs to run before Firestore is used. This can be achieved in
 * several ways:
 *   1) Through the JSCompiler compiling this code and then (automatically)
 *      executing it before exporting the Firestore symbols.
 *   2) Through importing this module first in a Firestore main module
 */


PlatformSupport.setPlatform(new BrowserPlatform());
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

function registerFirestore(instance) {
  configureForFirebase(instance);
}

registerFirestore(firebase);
exports.registerFirestore = registerFirestore;

/***/ }),

/***/ "./node_modules/@firebase/logger/dist/index.esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/@firebase/logger/dist/index.esm.js ***!
  \*********************************************************/
/*! exports provided: LogLevel, Logger, setLogLevel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LogLevel", function() { return LogLevel; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Logger", function() { return Logger; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setLogLevel", function() { return setLogLevel; });
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A container for all of the Logger instances
 */
var instances = [];
/**
 * The JS SDK supports 5 log levels and also allows a user the ability to
 * silence the logs altogether.
 *
 * The order is a follows:
 * DEBUG < VERBOSE < INFO < WARN < ERROR
 *
 * All of the log types above the current log level will be captured (i.e. if
 * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
 * `VERBOSE` logs will not)
 */

var LogLevel;

(function (LogLevel) {
  LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
  LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
  LogLevel[LogLevel["INFO"] = 2] = "INFO";
  LogLevel[LogLevel["WARN"] = 3] = "WARN";
  LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
  LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
})(LogLevel || (LogLevel = {}));
/**
 * The default log level
 */


var defaultLogLevel = LogLevel.INFO;
/**
 * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
 * messages on to their corresponding console counterparts (if the log method
 * is supported by the current log level)
 */

var defaultLogHandler = function (instance, logType) {
  var args = [];

  for (var _i = 2; _i < arguments.length; _i++) {
    args[_i - 2] = arguments[_i];
  }

  if (logType < instance.logLevel) {
    return;
  }

  var now = new Date().toISOString();

  switch (logType) {
    /**
     * By default, `console.debug` is not displayed in the developer console (in
     * chrome). To avoid forcing users to have to opt-in to these logs twice
     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
     * logs to the `console.log` function.
     */
    case LogLevel.DEBUG:
      console.log.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
      break;

    case LogLevel.VERBOSE:
      console.log.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
      break;

    case LogLevel.INFO:
      console.info.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
      break;

    case LogLevel.WARN:
      console.warn.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
      break;

    case LogLevel.ERROR:
      console.error.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
      break;

    default:
      throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
  }
};

var Logger =
/** @class */
function () {
  /**
   * Gives you an instance of a Logger to capture messages according to
   * Firebase's logging scheme.
   *
   * @param name The name that the logs will be associated with
   */
  function Logger(name) {
    this.name = name;
    /**
     * The log level of the given Logger instance.
     */

    this._logLevel = defaultLogLevel;
    /**
     * The log handler for the Logger instance.
     */

    this._logHandler = defaultLogHandler;
    /**
     * Capture the current instance for later use
     */

    instances.push(this);
  }

  Object.defineProperty(Logger.prototype, "logLevel", {
    get: function () {
      return this._logLevel;
    },
    set: function (val) {
      if (!(val in LogLevel)) {
        throw new TypeError('Invalid value assigned to `logLevel`');
      }

      this._logLevel = val;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Logger.prototype, "logHandler", {
    get: function () {
      return this._logHandler;
    },
    set: function (val) {
      if (typeof val !== 'function') {
        throw new TypeError('Value assigned to `logHandler` must be a function');
      }

      this._logHandler = val;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * The functions below are all based on the `console` interface
   */

  Logger.prototype.debug = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    this._logHandler.apply(this, [this, LogLevel.DEBUG].concat(args));
  };

  Logger.prototype.log = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    this._logHandler.apply(this, [this, LogLevel.VERBOSE].concat(args));
  };

  Logger.prototype.info = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    this._logHandler.apply(this, [this, LogLevel.INFO].concat(args));
  };

  Logger.prototype.warn = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    this._logHandler.apply(this, [this, LogLevel.WARN].concat(args));
  };

  Logger.prototype.error = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    this._logHandler.apply(this, [this, LogLevel.ERROR].concat(args));
  };

  return Logger;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function setLogLevel(level) {
  instances.forEach(function (inst) {
    inst.logLevel = level;
  });
}



/***/ }),

/***/ "./node_modules/@firebase/storage/dist/index.esm.js":
/*!**********************************************************!*\
  !*** ./node_modules/@firebase/storage/dist/index.esm.js ***!
  \**********************************************************/
/*! exports provided: registerStorage */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "registerStorage", function() { return registerStorage; });
/* harmony import */ var _firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/app */ "./node_modules/@firebase/app/dist/index.cjs.js");
/* harmony import */ var _firebase_app__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_firebase_app__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");


/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview Constants used in the Firebase Storage library.
 */

/**
 * Domain name for firebase storage.
 */

var DEFAULT_HOST = 'firebasestorage.googleapis.com';
/**
 * The key in Firebase config json for the storage bucket.
 */

var CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';
/**
 * 2 minutes
 *
 * The timeout for all operations except upload.
 */

var DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;
/**
 * 10 minutes
 *
 * The timeout for upload.
 */

var DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 100;
/**
 * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported
 * enough for us to use it directly.
 */

var MIN_SAFE_INTEGER = -9007199254740991;
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var FirebaseStorageError =
/** @class */
function () {
  function FirebaseStorageError(code, message) {
    this.code_ = prependCode(code);
    this.message_ = 'Firebase Storage: ' + message;
    this.serverResponse_ = null;
    this.name_ = 'FirebaseError';
  }

  FirebaseStorageError.prototype.codeProp = function () {
    return this.code;
  };

  FirebaseStorageError.prototype.codeEquals = function (code) {
    return prependCode(code) === this.codeProp();
  };

  FirebaseStorageError.prototype.serverResponseProp = function () {
    return this.serverResponse_;
  };

  FirebaseStorageError.prototype.setServerResponseProp = function (serverResponse) {
    this.serverResponse_ = serverResponse;
  };

  Object.defineProperty(FirebaseStorageError.prototype, "name", {
    get: function () {
      return this.name_;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FirebaseStorageError.prototype, "code", {
    get: function () {
      return this.code_;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FirebaseStorageError.prototype, "message", {
    get: function () {
      return this.message_;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(FirebaseStorageError.prototype, "serverResponse", {
    get: function () {
      return this.serverResponse_;
    },
    enumerable: true,
    configurable: true
  });
  return FirebaseStorageError;
}();

var Code = {
  // Shared between all platforms
  UNKNOWN: 'unknown',
  OBJECT_NOT_FOUND: 'object-not-found',
  BUCKET_NOT_FOUND: 'bucket-not-found',
  PROJECT_NOT_FOUND: 'project-not-found',
  QUOTA_EXCEEDED: 'quota-exceeded',
  UNAUTHENTICATED: 'unauthenticated',
  UNAUTHORIZED: 'unauthorized',
  RETRY_LIMIT_EXCEEDED: 'retry-limit-exceeded',
  INVALID_CHECKSUM: 'invalid-checksum',
  CANCELED: 'canceled',
  // JS specific
  INVALID_EVENT_NAME: 'invalid-event-name',
  INVALID_URL: 'invalid-url',
  INVALID_DEFAULT_BUCKET: 'invalid-default-bucket',
  NO_DEFAULT_BUCKET: 'no-default-bucket',
  CANNOT_SLICE_BLOB: 'cannot-slice-blob',
  SERVER_FILE_WRONG_SIZE: 'server-file-wrong-size',
  NO_DOWNLOAD_URL: 'no-download-url',
  INVALID_ARGUMENT: 'invalid-argument',
  INVALID_ARGUMENT_COUNT: 'invalid-argument-count',
  APP_DELETED: 'app-deleted',
  INVALID_ROOT_OPERATION: 'invalid-root-operation',
  INVALID_FORMAT: 'invalid-format',
  INTERNAL_ERROR: 'internal-error'
};

function prependCode(code) {
  return 'storage/' + code;
}

function unknown() {
  var message = 'An unknown error occurred, please check the error payload for ' + 'server response.';
  return new FirebaseStorageError(Code.UNKNOWN, message);
}

function objectNotFound(path) {
  return new FirebaseStorageError(Code.OBJECT_NOT_FOUND, "Object '" + path + "' does not exist.");
}

function quotaExceeded(bucket) {
  return new FirebaseStorageError(Code.QUOTA_EXCEEDED, "Quota for bucket '" + bucket + "' exceeded, please view quota on " + 'https://firebase.google.com/pricing/.');
}

function unauthenticated() {
  var message = 'User is not authenticated, please authenticate using Firebase ' + 'Authentication and try again.';
  return new FirebaseStorageError(Code.UNAUTHENTICATED, message);
}

function unauthorized(path) {
  return new FirebaseStorageError(Code.UNAUTHORIZED, "User does not have permission to access '" + path + "'.");
}

function retryLimitExceeded() {
  return new FirebaseStorageError(Code.RETRY_LIMIT_EXCEEDED, 'Max retry time for operation exceeded, please try again.');
}

function canceled() {
  return new FirebaseStorageError(Code.CANCELED, 'User canceled the upload/download.');
}

function invalidUrl(url) {
  return new FirebaseStorageError(Code.INVALID_URL, "Invalid URL '" + url + "'.");
}

function invalidDefaultBucket(bucket) {
  return new FirebaseStorageError(Code.INVALID_DEFAULT_BUCKET, "Invalid default bucket '" + bucket + "'.");
}

function noDefaultBucket() {
  return new FirebaseStorageError(Code.NO_DEFAULT_BUCKET, 'No default bucket ' + "found. Did you set the '" + CONFIG_STORAGE_BUCKET_KEY + "' property when initializing the app?");
}

function cannotSliceBlob() {
  return new FirebaseStorageError(Code.CANNOT_SLICE_BLOB, 'Cannot slice blob for upload. Please retry the upload.');
}

function serverFileWrongSize() {
  return new FirebaseStorageError(Code.SERVER_FILE_WRONG_SIZE, 'Server recorded incorrect upload file size, please retry the upload.');
}

function noDownloadURL() {
  return new FirebaseStorageError(Code.NO_DOWNLOAD_URL, 'The given file does not have any download URLs.');
}

function invalidArgument(index, fnName, message) {
  return new FirebaseStorageError(Code.INVALID_ARGUMENT, 'Invalid argument in `' + fnName + '` at index ' + index + ': ' + message);
}

function invalidArgumentCount(argMin, argMax, fnName, real) {
  var countPart;
  var plural;

  if (argMin === argMax) {
    countPart = argMin;
    plural = argMin === 1 ? 'argument' : 'arguments';
  } else {
    countPart = 'between ' + argMin + ' and ' + argMax;
    plural = 'arguments';
  }

  return new FirebaseStorageError(Code.INVALID_ARGUMENT_COUNT, 'Invalid argument count in `' + fnName + '`: Expected ' + countPart + ' ' + plural + ', received ' + real + '.');
}

function appDeleted() {
  return new FirebaseStorageError(Code.APP_DELETED, 'The Firebase app was deleted.');
}
/**
 * @param name The name of the operation that was invalid.
 */


function invalidRootOperation(name) {
  return new FirebaseStorageError(Code.INVALID_ROOT_OPERATION, "The operation '" + name + "' cannot be performed on a root reference, create a non-root " + "reference using child, such as .child('file.png').");
}
/**
 * @param format The format that was not valid.
 * @param message A message describing the format violation.
 */


function invalidFormat(format, message) {
  return new FirebaseStorageError(Code.INVALID_FORMAT, "String does not match format '" + format + "': " + message);
}
/**
 * @param message A message describing the internal error.
 */


function internalError(message) {
  throw new FirebaseStorageError(Code.INTERNAL_ERROR, 'Internal error: ' + message);
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var StringFormat = {
  RAW: 'raw',
  BASE64: 'base64',
  BASE64URL: 'base64url',
  DATA_URL: 'data_url'
};

function formatValidator(stringFormat) {
  switch (stringFormat) {
    case StringFormat.RAW:
    case StringFormat.BASE64:
    case StringFormat.BASE64URL:
    case StringFormat.DATA_URL:
      return;

    default:
      throw 'Expected one of the event types: [' + StringFormat.RAW + ', ' + StringFormat.BASE64 + ', ' + StringFormat.BASE64URL + ', ' + StringFormat.DATA_URL + '].';
  }
}
/**
 * @struct
 */


var StringData =
/** @class */
function () {
  function StringData(data, opt_contentType) {
    this.data = data;
    this.contentType = opt_contentType || null;
  }

  return StringData;
}();

function dataFromString(format, string) {
  switch (format) {
    case StringFormat.RAW:
      return new StringData(utf8Bytes_(string));

    case StringFormat.BASE64:
    case StringFormat.BASE64URL:
      return new StringData(base64Bytes_(format, string));

    case StringFormat.DATA_URL:
      return new StringData(dataURLBytes_(string), dataURLContentType_(string));
  } // assert(false);


  throw unknown();
}

function utf8Bytes_(string) {
  var b = [];

  for (var i = 0; i < string.length; i++) {
    var c = string.charCodeAt(i);

    if (c <= 127) {
      b.push(c);
    } else {
      if (c <= 2047) {
        b.push(192 | c >> 6, 128 | c & 63);
      } else {
        if ((c & 64512) == 55296) {
          // The start of a surrogate pair.
          var valid = i < string.length - 1 && (string.charCodeAt(i + 1) & 64512) == 56320;

          if (!valid) {
            // The second surrogate wasn't there.
            b.push(239, 191, 189);
          } else {
            var hi = c;
            var lo = string.charCodeAt(++i);
            c = 65536 | (hi & 1023) << 10 | lo & 1023;
            b.push(240 | c >> 18, 128 | c >> 12 & 63, 128 | c >> 6 & 63, 128 | c & 63);
          }
        } else {
          if ((c & 64512) == 56320) {
            // Invalid low surrogate.
            b.push(239, 191, 189);
          } else {
            b.push(224 | c >> 12, 128 | c >> 6 & 63, 128 | c & 63);
          }
        }
      }
    }
  }

  return new Uint8Array(b);
}

function percentEncodedBytes_(string) {
  var decoded;

  try {
    decoded = decodeURIComponent(string);
  } catch (e) {
    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');
  }

  return utf8Bytes_(decoded);
}

function base64Bytes_(format, string) {
  switch (format) {
    case StringFormat.BASE64:
      {
        var hasMinus = string.indexOf('-') !== -1;
        var hasUnder = string.indexOf('_') !== -1;

        if (hasMinus || hasUnder) {
          var invalidChar = hasMinus ? '-' : '_';
          throw invalidFormat(format, "Invalid character '" + invalidChar + "' found: is it base64url encoded?");
        }

        break;
      }

    case StringFormat.BASE64URL:
      {
        var hasPlus = string.indexOf('+') !== -1;
        var hasSlash = string.indexOf('/') !== -1;

        if (hasPlus || hasSlash) {
          var invalidChar = hasPlus ? '+' : '/';
          throw invalidFormat(format, "Invalid character '" + invalidChar + "' found: is it base64 encoded?");
        }

        string = string.replace(/-/g, '+').replace(/_/g, '/');
        break;
      }
  }

  var bytes;

  try {
    bytes = atob(string);
  } catch (e) {
    throw invalidFormat(format, 'Invalid character found');
  }

  var array = new Uint8Array(bytes.length);

  for (var i = 0; i < bytes.length; i++) {
    array[i] = bytes.charCodeAt(i);
  }

  return array;
}
/**
 * @struct
 */


var DataURLParts =
/** @class */
function () {
  function DataURLParts(dataURL) {
    this.base64 = false;
    this.contentType = null;
    var matches = dataURL.match(/^data:([^,]+)?,/);

    if (matches === null) {
      throw invalidFormat(StringFormat.DATA_URL, "Must be formatted 'data:[<mediatype>][;base64],<data>");
    }

    var middle = matches[1] || null;

    if (middle != null) {
      this.base64 = endsWith(middle, ';base64');
      this.contentType = this.base64 ? middle.substring(0, middle.length - ';base64'.length) : middle;
    }

    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);
  }

  return DataURLParts;
}();

function dataURLBytes_(string) {
  var parts = new DataURLParts(string);

  if (parts.base64) {
    return base64Bytes_(StringFormat.BASE64, parts.rest);
  } else {
    return percentEncodedBytes_(parts.rest);
  }
}

function dataURLContentType_(string) {
  var parts = new DataURLParts(string);
  return parts.contentType;
}

function endsWith(s, end) {
  var longEnough = s.length >= end.length;

  if (!longEnough) {
    return false;
  }

  return s.substring(s.length - end.length) === end;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var TaskEvent = {
  /** Triggered whenever the task changes or progress is updated. */
  STATE_CHANGED: 'state_changed'
};
var InternalTaskState = {
  RUNNING: 'running',
  PAUSING: 'pausing',
  PAUSED: 'paused',
  SUCCESS: 'success',
  CANCELING: 'canceling',
  CANCELED: 'canceled',
  ERROR: 'error'
};
var TaskState = {
  /** The task is currently transferring data. */
  RUNNING: 'running',

  /** The task was paused by the user. */
  PAUSED: 'paused',

  /** The task completed successfully. */
  SUCCESS: 'success',

  /** The task was canceled. */
  CANCELED: 'canceled',

  /** The task failed with an error. */
  ERROR: 'error'
};

function taskStateFromInternalTaskState(state) {
  switch (state) {
    case InternalTaskState.RUNNING:
    case InternalTaskState.PAUSING:
    case InternalTaskState.CANCELING:
      return TaskState.RUNNING;

    case InternalTaskState.PAUSED:
      return TaskState.PAUSED;

    case InternalTaskState.SUCCESS:
      return TaskState.SUCCESS;

    case InternalTaskState.CANCELED:
      return TaskState.CANCELED;

    case InternalTaskState.ERROR:
      return TaskState.ERROR;

    default:
      // TODO(andysoto): assert(false);
      return TaskState.ERROR;
  }
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview Contains methods for working with objects.
 */


function contains(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

function forEach(obj, f) {
  for (var key in obj) {
    if (contains(obj, key)) {
      f(key, obj[key]);
    }
  }
}

function clone(obj) {
  if (obj == null) {
    return {};
  }

  var c = {};
  forEach(obj, function (key, val) {
    c[key] = val;
  });
  return c;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview Implements the promise abstraction interface for external
 * (public SDK) packaging, which just passes through to the firebase-app impl.
 */

/**
 * @template T
 * @param {function((function(T): void),
 *                  (function(!Error): void))} resolver
 */


function make(resolver) {
  return new Promise(resolver);
}
/**
 * @template T
 */


function resolve(value) {
  return Promise.resolve(value);
}

function reject(error) {
  return Promise.reject(error);
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @return False if the object is undefined or null, true otherwise.
 */


function isDef(p) {
  return p != null;
}

function isJustDef(p) {
  return p !== void 0;
}

function isFunction(p) {
  return typeof p === 'function';
}

function isObject(p) {
  return typeof p === 'object';
}

function isNonNullObject(p) {
  return isObject(p) && p !== null;
}

function isNonArrayObject(p) {
  return isObject(p) && !Array.isArray(p);
}

function isString(p) {
  return typeof p === 'string' || p instanceof String;
}

function isInteger(p) {
  return isNumber(p) && Number.isInteger(p);
}

function isNumber(p) {
  return typeof p === 'number' || p instanceof Number;
}

function isNativeBlob(p) {
  return isNativeBlobDefined() && p instanceof Blob;
}

function isNativeBlobDefined() {
  return typeof Blob !== 'undefined';
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @enum{number}
 */


var ErrorCode;

(function (ErrorCode) {
  ErrorCode[ErrorCode["NO_ERROR"] = 0] = "NO_ERROR";
  ErrorCode[ErrorCode["NETWORK_ERROR"] = 1] = "NETWORK_ERROR";
  ErrorCode[ErrorCode["ABORT"] = 2] = "ABORT";
})(ErrorCode || (ErrorCode = {}));
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and
 * doesn't work in React Native on Android.
 */


var NetworkXhrIo =
/** @class */
function () {
  function NetworkXhrIo() {
    var _this = this;

    this.sent_ = false;
    this.xhr_ = new XMLHttpRequest();
    this.errorCode_ = ErrorCode.NO_ERROR;
    this.sendPromise_ = make(function (resolve, reject) {
      _this.xhr_.addEventListener('abort', function (event) {
        _this.errorCode_ = ErrorCode.ABORT;
        resolve(_this);
      });

      _this.xhr_.addEventListener('error', function (event) {
        _this.errorCode_ = ErrorCode.NETWORK_ERROR;
        resolve(_this);
      });

      _this.xhr_.addEventListener('load', function (event) {
        resolve(_this);
      });
    });
  }
  /**
   * @override
   */


  NetworkXhrIo.prototype.send = function (url, method, opt_body, opt_headers) {
    var _this = this;

    if (this.sent_) {
      throw internalError('cannot .send() more than once');
    }

    this.sent_ = true;
    this.xhr_.open(method, url, true);

    if (isDef(opt_headers)) {
      var headers = opt_headers;
      forEach(headers, function (key, val) {
        _this.xhr_.setRequestHeader(key, val.toString());
      });
    }

    if (isDef(opt_body)) {
      this.xhr_.send(opt_body);
    } else {
      this.xhr_.send();
    }

    return this.sendPromise_;
  };
  /**
   * @override
   */


  NetworkXhrIo.prototype.getErrorCode = function () {
    if (!this.sent_) {
      throw internalError('cannot .getErrorCode() before sending');
    }

    return this.errorCode_;
  };
  /**
   * @override
   */


  NetworkXhrIo.prototype.getStatus = function () {
    if (!this.sent_) {
      throw internalError('cannot .getStatus() before sending');
    }

    try {
      return this.xhr_.status;
    } catch (e) {
      return -1;
    }
  };
  /**
   * @override
   */


  NetworkXhrIo.prototype.getResponseText = function () {
    if (!this.sent_) {
      throw internalError('cannot .getResponseText() before sending');
    }

    return this.xhr_.responseText;
  };
  /**
   * Aborts the request.
   * @override
   */


  NetworkXhrIo.prototype.abort = function () {
    this.xhr_.abort();
  };
  /**
   * @override
   */


  NetworkXhrIo.prototype.getResponseHeader = function (header) {
    return this.xhr_.getResponseHeader(header);
  };
  /**
   * @override
   */


  NetworkXhrIo.prototype.addUploadProgressListener = function (listener) {
    if (isDef(this.xhr_.upload)) {
      this.xhr_.upload.addEventListener('progress', listener);
    }
  };
  /**
   * @override
   */


  NetworkXhrIo.prototype.removeUploadProgressListener = function (listener) {
    if (isDef(this.xhr_.upload)) {
      this.xhr_.upload.removeEventListener('progress', listener);
    }
  };

  return NetworkXhrIo;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Factory-like class for creating XhrIo instances.
 */


var XhrIoPool =
/** @class */
function () {
  function XhrIoPool() {}

  XhrIoPool.prototype.createXhrIo = function () {
    return new NetworkXhrIo();
  };

  return XhrIoPool;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns the Object resulting from parsing the given JSON, or null if the
 * given string does not represent a JSON object.
 */


function jsonObjectOrNull(s) {
  var obj;

  try {
    obj = JSON.parse(s);
  } catch (e) {
    return null;
  }

  if (isNonArrayObject(obj)) {
    return obj;
  } else {
    return null;
  }
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @struct
 */


var Location =
/** @class */
function () {
  function Location(bucket, path) {
    this.bucket = bucket;
    this.path_ = path;
  }

  Object.defineProperty(Location.prototype, "path", {
    get: function () {
      return this.path_;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Location.prototype, "isRoot", {
    get: function () {
      return this.path.length === 0;
    },
    enumerable: true,
    configurable: true
  });

  Location.prototype.fullServerUrl = function () {
    var encode = encodeURIComponent;
    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);
  };

  Location.prototype.bucketOnlyServerUrl = function () {
    var encode = encodeURIComponent;
    return '/b/' + encode(this.bucket) + '/o';
  };

  Location.makeFromBucketSpec = function (bucketString) {
    var bucketLocation;

    try {
      bucketLocation = Location.makeFromUrl(bucketString);
    } catch (e) {
      // Not valid URL, use as-is. This lets you put bare bucket names in
      // config.
      return new Location(bucketString, '');
    }

    if (bucketLocation.path === '') {
      return bucketLocation;
    } else {
      throw invalidDefaultBucket(bucketString);
    }
  };

  Location.makeFromUrl = function (url) {
    var location = null;
    var bucketDomain = '([A-Za-z0-9.\\-_]+)';

    function gsModify(loc) {
      if (loc.path.charAt(loc.path.length - 1) === '/') {
        loc.path_ = loc.path_.slice(0, -1);
      }
    }

    var gsPath = '(/(.*))?$';
    var path = '(/([^?#]*).*)?$';
    var gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');
    var gsIndices = {
      bucket: 1,
      path: 3
    };

    function httpModify(loc) {
      loc.path_ = decodeURIComponent(loc.path);
    }

    var version = 'v[A-Za-z0-9_]+';
    var hostRegex = DEFAULT_HOST.replace(/[.]/g, '\\.');
    var httpRegex = new RegExp("^https?://" + hostRegex + "/" + version + "/b/" + bucketDomain + "/o" + path, 'i');
    var httpIndices = {
      bucket: 1,
      path: 3
    };
    var groups = [{
      regex: gsRegex,
      indices: gsIndices,
      postModify: gsModify
    }, {
      regex: httpRegex,
      indices: httpIndices,
      postModify: httpModify
    }];

    for (var i = 0; i < groups.length; i++) {
      var group = groups[i];
      var captures = group.regex.exec(url);

      if (captures) {
        var bucketValue = captures[group.indices.bucket];
        var pathValue = captures[group.indices.path];

        if (!pathValue) {
          pathValue = '';
        }

        location = new Location(bucketValue, pathValue);
        group.postModify(location);
        break;
      }
    }

    if (location == null) {
      throw invalidUrl(url);
    }

    return location;
  };

  return Location;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview Contains helper methods for manipulating paths.
 */

/**
 * @return Null if the path is already at the root.
 */


function parent(path) {
  if (path.length == 0) {
    return null;
  }

  var index = path.lastIndexOf('/');

  if (index === -1) {
    return '';
  }

  var newPath = path.slice(0, index);
  return newPath;
}

function child(path, childPath) {
  var canonicalChildPath = childPath.split('/').filter(function (component) {
    return component.length > 0;
  }).join('/');

  if (path.length === 0) {
    return canonicalChildPath;
  } else {
    return path + '/' + canonicalChildPath;
  }
}
/**
 * Returns the last component of a path.
 * '/foo/bar' -> 'bar'
 * '/foo/bar/baz/' -> 'baz/'
 * '/a' -> 'a'
 */


function lastComponent(path) {
  var index = path.lastIndexOf('/', path.length - 2);

  if (index === -1) {
    return path;
  } else {
    return path.slice(index + 1);
  }
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function makeUrl(urlPart) {
  return "https://" + DEFAULT_HOST + "/v0" + urlPart;
}

function makeQueryString(params) {
  var encode = encodeURIComponent;
  var queryPart = '?';
  forEach(params, function (key, val) {
    var nextPart = encode(key) + '=' + encode(val.toString());
    queryPart = queryPart + nextPart + '&';
  }); // Chop off the extra '&' or '?' on the end

  queryPart = queryPart.slice(0, -1);
  return queryPart;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function noXform_(metadata, value) {
  return value;
}
/**
 * @struct
 */


var Mapping =
/** @class */
function () {
  function Mapping(server, opt_local, opt_writable, opt_xform) {
    this.server = server;
    this.local = opt_local || server;
    this.writable = !!opt_writable;
    this.xform = opt_xform || noXform_;
  }

  return Mapping;
}();

var mappings_ = null;

function xformPath(fullPath) {
  var valid = isString(fullPath);

  if (!valid || fullPath.length < 2) {
    return fullPath;
  } else {
    fullPath = fullPath;
    return lastComponent(fullPath);
  }
}

function getMappings() {
  if (mappings_) {
    return mappings_;
  }

  var mappings = [];
  mappings.push(new Mapping('bucket'));
  mappings.push(new Mapping('generation'));
  mappings.push(new Mapping('metageneration'));
  mappings.push(new Mapping('name', 'fullPath', true));

  function mappingsXformPath(metadata, fullPath) {
    return xformPath(fullPath);
  }

  var nameMapping = new Mapping('name');
  nameMapping.xform = mappingsXformPath;
  mappings.push(nameMapping);
  /**
   * Coerces the second param to a number, if it is defined.
   */

  function xformSize(metadata, size) {
    if (isDef(size)) {
      return +size;
    } else {
      return size;
    }
  }

  var sizeMapping = new Mapping('size');
  sizeMapping.xform = xformSize;
  mappings.push(sizeMapping);
  mappings.push(new Mapping('timeCreated'));
  mappings.push(new Mapping('updated'));
  mappings.push(new Mapping('md5Hash', null, true));
  mappings.push(new Mapping('cacheControl', null, true));
  mappings.push(new Mapping('contentDisposition', null, true));
  mappings.push(new Mapping('contentEncoding', null, true));
  mappings.push(new Mapping('contentLanguage', null, true));
  mappings.push(new Mapping('contentType', null, true));
  mappings.push(new Mapping('metadata', 'customMetadata', true));
  mappings_ = mappings;
  return mappings_;
}

function addRef(metadata, authWrapper) {
  function generateRef() {
    var bucket = metadata['bucket'];
    var path = metadata['fullPath'];
    var loc = new Location(bucket, path);
    return authWrapper.makeStorageReference(loc);
  }

  Object.defineProperty(metadata, 'ref', {
    get: generateRef
  });
}

function fromResource(authWrapper, resource, mappings) {
  var metadata = {};
  metadata['type'] = 'file';
  var len = mappings.length;

  for (var i = 0; i < len; i++) {
    var mapping = mappings[i];
    metadata[mapping.local] = mapping.xform(metadata, resource[mapping.server]);
  }

  addRef(metadata, authWrapper);
  return metadata;
}

function fromResourceString(authWrapper, resourceString, mappings) {
  var obj = jsonObjectOrNull(resourceString);

  if (obj === null) {
    return null;
  }

  var resource = obj;
  return fromResource(authWrapper, resource, mappings);
}

function downloadUrlFromResourceString(metadata, resourceString) {
  var obj = jsonObjectOrNull(resourceString);

  if (obj === null) {
    return null;
  }

  if (!isString(obj['downloadTokens'])) {
    // This can happen if objects are uploaded through GCS and retrieved
    // through list, so we don't want to throw an Error.
    return null;
  }

  var tokens = obj['downloadTokens'];

  if (tokens.length === 0) {
    return null;
  }

  var encode = encodeURIComponent;
  var tokensList = tokens.split(',');
  var urls = tokensList.map(function (token) {
    var bucket = metadata['bucket'];
    var path = metadata['fullPath'];
    var urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);
    var base = makeUrl(urlPart);
    var queryString = makeQueryString({
      alt: 'media',
      token: token
    });
    return base + queryString;
  });
  return urls[0];
}

function toResourceString(metadata, mappings) {
  var resource = {};
  var len = mappings.length;

  for (var i = 0; i < len; i++) {
    var mapping = mappings[i];

    if (mapping.writable) {
      resource[mapping.server] = metadata[mapping.local];
    }
  }

  return JSON.stringify(resource);
}

function metadataValidator(p) {
  var validType = p && isObject(p);

  if (!validType) {
    throw 'Expected Metadata object.';
  }

  for (var key in p) {
    var val = p[key];

    if (key === 'customMetadata') {
      if (!isObject(val)) {
        throw 'Expected object for \'customMetadata\' mapping.';
      }
    } else {
      if (isNonNullObject(val)) {
        throw "Mapping for '" + key + "' cannot be an object.";
      }
    }
  }
}
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var MAX_RESULTS_KEY = 'maxResults';
var MAX_MAX_RESULTS = 1000;
var PAGE_TOKEN_KEY = 'pageToken';
var PREFIXES_KEY = 'prefixes';
var ITEMS_KEY = 'items';

function fromBackendResponse(authWrapper, resource) {
  var listResult = {
    prefixes: [],
    items: [],
    nextPageToken: resource['nextPageToken']
  };
  var bucket = authWrapper.bucket();

  if (bucket === null) {
    throw noDefaultBucket();
  }

  if (resource[PREFIXES_KEY]) {
    for (var _i = 0, _a = resource[PREFIXES_KEY]; _i < _a.length; _i++) {
      var path = _a[_i];
      var pathWithoutTrailingSlash = path.replace(/\/$/, '');
      var reference = authWrapper.makeStorageReference(new Location(bucket, pathWithoutTrailingSlash));
      listResult.prefixes.push(reference);
    }
  }

  if (resource[ITEMS_KEY]) {
    for (var _b = 0, _c = resource[ITEMS_KEY]; _b < _c.length; _b++) {
      var item = _c[_b];
      var reference = authWrapper.makeStorageReference(new Location(bucket, item['name']));
      listResult.items.push(reference);
    }
  }

  return listResult;
}

function fromResponseString(authWrapper, resourceString) {
  var obj = jsonObjectOrNull(resourceString);

  if (obj === null) {
    return null;
  }

  var resource = obj;
  return fromBackendResponse(authWrapper, resource);
}

function listOptionsValidator(p) {
  var validType = p && isObject(p);

  if (!validType) {
    throw 'Expected ListOptions object.';
  }

  for (var key in p) {
    if (key === MAX_RESULTS_KEY) {
      if (!isInteger(p[MAX_RESULTS_KEY]) || p[MAX_RESULTS_KEY] <= 0) {
        throw 'Expected maxResults to be a positive number.';
      }

      if (p[MAX_RESULTS_KEY] > 1000) {
        throw "Expected maxResults to be less than or equal to " + MAX_MAX_RESULTS + ".";
      }
    } else if (key === PAGE_TOKEN_KEY) {
      if (p[PAGE_TOKEN_KEY] && !isString(p[PAGE_TOKEN_KEY])) {
        throw 'Expected pageToken to be string.';
      }
    } else {
      throw 'Unknown option: ' + key;
    }
  }
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param name Name of the function.
 * @param specs Argument specs.
 * @param passed The actual arguments passed to the function.
 * @throws {fbs.Error} If the arguments are invalid.
 */


function validate(name, specs, passed) {
  var minArgs = specs.length;
  var maxArgs = specs.length;

  for (var i = 0; i < specs.length; i++) {
    if (specs[i].optional) {
      minArgs = i;
      break;
    }
  }

  var validLength = minArgs <= passed.length && passed.length <= maxArgs;

  if (!validLength) {
    throw invalidArgumentCount(minArgs, maxArgs, name, passed.length);
  }

  for (var i = 0; i < passed.length; i++) {
    try {
      specs[i].validator(passed[i]);
    } catch (e) {
      if (e instanceof Error) {
        throw invalidArgument(i, name, e.message);
      } else {
        throw invalidArgument(i, name, e);
      }
    }
  }
}
/**
 * @struct
 */


var ArgSpec =
/** @class */
function () {
  function ArgSpec(validator, opt_optional) {
    var self = this;

    this.validator = function (p) {
      if (self.optional && !isJustDef(p)) {
        return;
      }

      validator(p);
    };

    this.optional = !!opt_optional;
  }

  return ArgSpec;
}();

function and_(v1, v2) {
  return function (p) {
    v1(p);
    v2(p);
  };
}

function stringSpec(opt_validator, opt_optional) {
  function stringValidator(p) {
    if (!isString(p)) {
      throw 'Expected string.';
    }
  }

  var validator;

  if (opt_validator) {
    validator = and_(stringValidator, opt_validator);
  } else {
    validator = stringValidator;
  }

  return new ArgSpec(validator, opt_optional);
}

function uploadDataSpec() {
  function validator(p) {
    var valid = p instanceof Uint8Array || p instanceof ArrayBuffer || isNativeBlobDefined() && p instanceof Blob;

    if (!valid) {
      throw 'Expected Blob or File.';
    }
  }

  return new ArgSpec(validator);
}

function metadataSpec(opt_optional) {
  return new ArgSpec(metadataValidator, opt_optional);
}

function listOptionSpec(opt_optional) {
  return new ArgSpec(listOptionsValidator, opt_optional);
}

function nonNegativeNumberSpec() {
  function validator(p) {
    var valid = isNumber(p) && p >= 0;

    if (!valid) {
      throw 'Expected a number 0 or greater.';
    }
  }

  return new ArgSpec(validator);
}

function looseObjectSpec(opt_validator, opt_optional) {
  function validator(p) {
    var isLooseObject = p === null || isDef(p) && p instanceof Object;

    if (!isLooseObject) {
      throw 'Expected an Object.';
    }

    if (opt_validator !== undefined && opt_validator !== null) {
      opt_validator(p);
    }
  }

  return new ArgSpec(validator, opt_optional);
}

function nullFunctionSpec(opt_optional) {
  function validator(p) {
    var valid = p === null || isFunction(p);

    if (!valid) {
      throw 'Expected a Function.';
    }
  }

  return new ArgSpec(validator, opt_optional);
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function getBlobBuilder() {
  if (typeof BlobBuilder !== 'undefined') {
    return BlobBuilder;
  } else if (typeof WebKitBlobBuilder !== 'undefined') {
    return WebKitBlobBuilder;
  } else {
    return undefined;
  }
}
/**
 * Concatenates one or more values together and converts them to a Blob.
 *
 * @param var_args The values that will make up the resulting blob.
 * @return The blob.
 */


function getBlob() {
  var var_args = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    var_args[_i] = arguments[_i];
  }

  var BlobBuilder = getBlobBuilder();

  if (BlobBuilder !== undefined) {
    var bb = new BlobBuilder();

    for (var i = 0; i < var_args.length; i++) {
      bb.append(var_args[i]);
    }

    return bb.getBlob();
  } else {
    if (isNativeBlobDefined()) {
      return new Blob(var_args);
    } else {
      throw Error("This browser doesn't seem to support creating Blobs");
    }
  }
}
/**
 * Slices the blob. The returned blob contains data from the start byte
 * (inclusive) till the end byte (exclusive). Negative indices cannot be used.
 *
 * @param blob The blob to be sliced.
 * @param start Index of the starting byte.
 * @param end Index of the ending byte.
 * @return The blob slice or null if not supported.
 */


function sliceBlob(blob, start, end) {
  if (blob.webkitSlice) {
    return blob.webkitSlice(start, end);
  } else if (blob.mozSlice) {
    return blob.mozSlice(start, end);
  } else if (blob.slice) {
    return blob.slice(start, end);
  }

  return null;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param opt_elideCopy If true, doesn't copy mutable input data
 *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be
 *     modified after this blob's construction.
 */


var FbsBlob =
/** @class */
function () {
  function FbsBlob(data, opt_elideCopy) {
    var size = 0;
    var blobType = '';

    if (isNativeBlob(data)) {
      this.data_ = data;
      size = data.size;
      blobType = data.type;
    } else if (data instanceof ArrayBuffer) {
      if (opt_elideCopy) {
        this.data_ = new Uint8Array(data);
      } else {
        this.data_ = new Uint8Array(data.byteLength);
        this.data_.set(new Uint8Array(data));
      }

      size = this.data_.length;
    } else if (data instanceof Uint8Array) {
      if (opt_elideCopy) {
        this.data_ = data;
      } else {
        this.data_ = new Uint8Array(data.length);
        this.data_.set(data);
      }

      size = data.length;
    }

    this.size_ = size;
    this.type_ = blobType;
  }

  FbsBlob.prototype.size = function () {
    return this.size_;
  };

  FbsBlob.prototype.type = function () {
    return this.type_;
  };

  FbsBlob.prototype.slice = function (startByte, endByte) {
    if (isNativeBlob(this.data_)) {
      var realBlob = this.data_;
      var sliced = sliceBlob(realBlob, startByte, endByte);

      if (sliced === null) {
        return null;
      }

      return new FbsBlob(sliced);
    } else {
      var slice = new Uint8Array(this.data_.buffer, startByte, endByte - startByte);
      return new FbsBlob(slice, true);
    }
  };

  FbsBlob.getBlob = function () {
    var var_args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      var_args[_i] = arguments[_i];
    }

    if (isNativeBlobDefined()) {
      var blobby = var_args.map(function (val) {
        if (val instanceof FbsBlob) {
          return val.data_;
        } else {
          return val;
        }
      });
      return new FbsBlob(getBlob.apply(null, blobby));
    } else {
      var uint8Arrays = var_args.map(function (val) {
        if (isString(val)) {
          return dataFromString(StringFormat.RAW, val).data;
        } else {
          // Blobs don't exist, so this has to be a Uint8Array.
          return val.data_;
        }
      });
      var finalLength_1 = 0;
      uint8Arrays.forEach(function (array) {
        finalLength_1 += array.byteLength;
      });
      var merged_1 = new Uint8Array(finalLength_1);
      var index_1 = 0;
      uint8Arrays.forEach(function (array) {
        for (var i = 0; i < array.length; i++) {
          merged_1[index_1++] = array[i];
        }
      });
      return new FbsBlob(merged_1, true);
    }
  };

  FbsBlob.prototype.uploadData = function () {
    return this.data_;
  };

  return FbsBlob;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns true if the object is contained in the array (compared with ===).
 * @template T
 */


function contains$1(array, elem) {
  return array.indexOf(elem) !== -1;
}
/**
 * Returns a shallow copy of the array or array-like object (e.g. arguments).
 * @template T
 */


function clone$1(arraylike) {
  return Array.prototype.slice.call(arraylike);
}
/**
 * Removes the given element from the given array, if it is contained.
 * Directly modifies the passed-in array.
 * @template T
 */


function remove(array, elem) {
  var i = array.indexOf(elem);

  if (i !== -1) {
    array.splice(i, 1);
  }
}

var RequestInfo =
/** @class */
function () {
  function RequestInfo(url, method,
  /**
   * Returns the value with which to resolve the request's promise. Only called
   * if the request is successful. Throw from this function to reject the
   * returned Request's promise with the thrown error.
   * Note: The XhrIo passed to this function may be reused after this callback
   * returns. Do not keep a reference to it in any way.
   */
  handler, timeout) {
    this.url = url;
    this.method = method;
    this.handler = handler;
    this.timeout = timeout;
    this.urlParams = {};
    this.headers = {};
    this.body = null;
    this.errorHandler = null;
    /**
     * Called with the current number of bytes uploaded and total size (-1 if not
     * computable) of the request body (i.e. used to report upload progress).
     */

    this.progressCallback = null;
    this.successCodes = [200];
    this.additionalRetryCodes = [];
  }

  return RequestInfo;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Throws the UNKNOWN FirebaseStorageError if cndn is false.
 */


function handlerCheck(cndn) {
  if (!cndn) {
    throw unknown();
  }
}

function metadataHandler(authWrapper, mappings) {
  function handler(xhr, text) {
    var metadata = fromResourceString(authWrapper, text, mappings);
    handlerCheck(metadata !== null);
    return metadata;
  }

  return handler;
}

function listHandler(authWrapper) {
  function handler(xhr, text) {
    var listResult = fromResponseString(authWrapper, text);
    handlerCheck(listResult !== null);
    return listResult;
  }

  return handler;
}

function downloadUrlHandler(authWrapper, mappings) {
  function handler(xhr, text) {
    var metadata = fromResourceString(authWrapper, text, mappings);
    handlerCheck(metadata !== null);
    return downloadUrlFromResourceString(metadata, text);
  }

  return handler;
}

function sharedErrorHandler(location) {
  function errorHandler(xhr, err) {
    var newErr;

    if (xhr.getStatus() === 401) {
      newErr = unauthenticated();
    } else {
      if (xhr.getStatus() === 402) {
        newErr = quotaExceeded(location.bucket);
      } else {
        if (xhr.getStatus() === 403) {
          newErr = unauthorized(location.path);
        } else {
          newErr = err;
        }
      }
    }

    newErr.setServerResponseProp(err.serverResponseProp());
    return newErr;
  }

  return errorHandler;
}

function objectErrorHandler(location) {
  var shared = sharedErrorHandler(location);

  function errorHandler(xhr, err) {
    var newErr = shared(xhr, err);

    if (xhr.getStatus() === 404) {
      newErr = objectNotFound(location.path);
    }

    newErr.setServerResponseProp(err.serverResponseProp());
    return newErr;
  }

  return errorHandler;
}

function getMetadata(authWrapper, location, mappings) {
  var urlPart = location.fullServerUrl();
  var url = makeUrl(urlPart);
  var method = 'GET';
  var timeout = authWrapper.maxOperationRetryTime();
  var requestInfo = new RequestInfo(url, method, metadataHandler(authWrapper, mappings), timeout);
  requestInfo.errorHandler = objectErrorHandler(location);
  return requestInfo;
}

function list(authWrapper, location, delimiter, pageToken, maxResults) {
  var urlParams = {};

  if (location.isRoot) {
    urlParams['prefix'] = '';
  } else {
    urlParams['prefix'] = location.path + '/';
  }

  if (delimiter && delimiter.length > 0) {
    urlParams['delimiter'] = delimiter;
  }

  if (pageToken) {
    urlParams['pageToken'] = pageToken;
  }

  if (maxResults) {
    urlParams['maxResults'] = maxResults;
  }

  var urlPart = location.bucketOnlyServerUrl();
  var url = makeUrl(urlPart);
  var method = 'GET';
  var timeout = authWrapper.maxOperationRetryTime();
  var requestInfo = new RequestInfo(url, method, listHandler(authWrapper), timeout);
  requestInfo.urlParams = urlParams;
  requestInfo.errorHandler = sharedErrorHandler(location);
  return requestInfo;
}

function getDownloadUrl(authWrapper, location, mappings) {
  var urlPart = location.fullServerUrl();
  var url = makeUrl(urlPart);
  var method = 'GET';
  var timeout = authWrapper.maxOperationRetryTime();
  var requestInfo = new RequestInfo(url, method, downloadUrlHandler(authWrapper, mappings), timeout);
  requestInfo.errorHandler = objectErrorHandler(location);
  return requestInfo;
}

function updateMetadata(authWrapper, location, metadata, mappings) {
  var urlPart = location.fullServerUrl();
  var url = makeUrl(urlPart);
  var method = 'PATCH';
  var body = toResourceString(metadata, mappings);
  var headers = {
    'Content-Type': 'application/json; charset=utf-8'
  };
  var timeout = authWrapper.maxOperationRetryTime();
  var requestInfo = new RequestInfo(url, method, metadataHandler(authWrapper, mappings), timeout);
  requestInfo.headers = headers;
  requestInfo.body = body;
  requestInfo.errorHandler = objectErrorHandler(location);
  return requestInfo;
}

function deleteObject(authWrapper, location) {
  var urlPart = location.fullServerUrl();
  var url = makeUrl(urlPart);
  var method = 'DELETE';
  var timeout = authWrapper.maxOperationRetryTime();

  function handler(xhr, text) {}

  var requestInfo = new RequestInfo(url, method, handler, timeout);
  requestInfo.successCodes = [200, 204];
  requestInfo.errorHandler = objectErrorHandler(location);
  return requestInfo;
}

function determineContentType_(metadata, blob) {
  return metadata && metadata['contentType'] || blob && blob.type() || 'application/octet-stream';
}

function metadataForUpload_(location, blob, opt_metadata) {
  var metadata = clone(opt_metadata);
  metadata['fullPath'] = location.path;
  metadata['size'] = blob.size();

  if (!metadata['contentType']) {
    metadata['contentType'] = determineContentType_(null, blob);
  }

  return metadata;
}

function multipartUpload(authWrapper, location, mappings, blob, opt_metadata) {
  var urlPart = location.bucketOnlyServerUrl();
  var headers = {
    'X-Goog-Upload-Protocol': 'multipart'
  };

  function genBoundary() {
    var str = '';

    for (var i = 0; i < 2; i++) {
      str = str + Math.random().toString().slice(2);
    }

    return str;
  }

  var boundary = genBoundary();
  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;
  var metadata = metadataForUpload_(location, blob, opt_metadata);
  var metadataString = toResourceString(metadata, mappings);
  var preBlobPart = '--' + boundary + '\r\n' + 'Content-Type: application/json; charset=utf-8\r\n\r\n' + metadataString + '\r\n--' + boundary + '\r\n' + 'Content-Type: ' + metadata['contentType'] + '\r\n\r\n';
  var postBlobPart = '\r\n--' + boundary + '--';
  var body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);

  if (body === null) {
    throw cannotSliceBlob();
  }

  var urlParams = {
    name: metadata['fullPath']
  };
  var url = makeUrl(urlPart);
  var method = 'POST';
  var timeout = authWrapper.maxUploadRetryTime();
  var requestInfo = new RequestInfo(url, method, metadataHandler(authWrapper, mappings), timeout);
  requestInfo.urlParams = urlParams;
  requestInfo.headers = headers;
  requestInfo.body = body.uploadData();
  requestInfo.errorHandler = sharedErrorHandler(location);
  return requestInfo;
}
/**
 * @param current The number of bytes that have been uploaded so far.
 * @param total The total number of bytes in the upload.
 * @param opt_finalized True if the server has finished the upload.
 * @param opt_metadata The upload metadata, should
 *     only be passed if opt_finalized is true.
 * @struct
 */


var ResumableUploadStatus =
/** @class */
function () {
  function ResumableUploadStatus(current, total, finalized, metadata) {
    this.current = current;
    this.total = total;
    this.finalized = !!finalized;
    this.metadata = metadata || null;
  }

  return ResumableUploadStatus;
}();

function checkResumeHeader_(xhr, opt_allowed) {
  var status;

  try {
    status = xhr.getResponseHeader('X-Goog-Upload-Status');
  } catch (e) {
    handlerCheck(false);
  }

  var allowed = opt_allowed || ['active'];
  handlerCheck(contains$1(allowed, status));
  return status;
}

function createResumableUpload(authWrapper, location, mappings, blob, opt_metadata) {
  var urlPart = location.bucketOnlyServerUrl();
  var metadata = metadataForUpload_(location, blob, opt_metadata);
  var urlParams = {
    name: metadata['fullPath']
  };
  var url = makeUrl(urlPart);
  var method = 'POST';
  var headers = {
    'X-Goog-Upload-Protocol': 'resumable',
    'X-Goog-Upload-Command': 'start',
    'X-Goog-Upload-Header-Content-Length': blob.size(),
    'X-Goog-Upload-Header-Content-Type': metadata['contentType'],
    'Content-Type': 'application/json; charset=utf-8'
  };
  var body = toResourceString(metadata, mappings);
  var timeout = authWrapper.maxUploadRetryTime();

  function handler(xhr, text) {
    checkResumeHeader_(xhr);
    var url;

    try {
      url = xhr.getResponseHeader('X-Goog-Upload-URL');
    } catch (e) {
      handlerCheck(false);
    }

    handlerCheck(isString(url));
    return url;
  }

  var requestInfo = new RequestInfo(url, method, handler, timeout);
  requestInfo.urlParams = urlParams;
  requestInfo.headers = headers;
  requestInfo.body = body;
  requestInfo.errorHandler = sharedErrorHandler(location);
  return requestInfo;
}
/**
 * @param url From a call to fbs.requests.createResumableUpload.
 */


function getResumableUploadStatus(authWrapper, location, url, blob) {
  var headers = {
    'X-Goog-Upload-Command': 'query'
  };

  function handler(xhr, text) {
    var status = checkResumeHeader_(xhr, ['active', 'final']);
    var sizeString = null;

    try {
      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');
    } catch (e) {
      handlerCheck(false);
    }

    var size = parseInt(sizeString, 10);
    handlerCheck(!isNaN(size));
    return new ResumableUploadStatus(size, blob.size(), status === 'final');
  }

  var method = 'POST';
  var timeout = authWrapper.maxUploadRetryTime();
  var requestInfo = new RequestInfo(url, method, handler, timeout);
  requestInfo.headers = headers;
  requestInfo.errorHandler = sharedErrorHandler(location);
  return requestInfo;
}
/**
 * Any uploads via the resumable upload API must transfer a number of bytes
 * that is a multiple of this number.
 */


var resumableUploadChunkSize = 256 * 1024;
/**
 * @param url From a call to fbs.requests.createResumableUpload.
 * @param chunkSize Number of bytes to upload.
 * @param opt_status The previous status.
 *     If not passed or null, we start from the beginning.
 * @throws fbs.Error If the upload is already complete, the passed in status
 *     has a final size inconsistent with the blob, or the blob cannot be sliced
 *     for upload.
 */

function continueResumableUpload(location, authWrapper, url, blob, chunkSize, mappings, opt_status, opt_progressCallback) {
  // TODO(andysoto): standardize on internal asserts
  // assert(!(opt_status && opt_status.finalized));
  var status = new ResumableUploadStatus(0, 0);

  if (opt_status) {
    status.current = opt_status.current;
    status.total = opt_status.total;
  } else {
    status.current = 0;
    status.total = blob.size();
  }

  if (blob.size() !== status.total) {
    throw serverFileWrongSize();
  }

  var bytesLeft = status.total - status.current;
  var bytesToUpload = bytesLeft;

  if (chunkSize > 0) {
    bytesToUpload = Math.min(bytesToUpload, chunkSize);
  }

  var startByte = status.current;
  var endByte = startByte + bytesToUpload;
  var uploadCommand = bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';
  var headers = {
    'X-Goog-Upload-Command': uploadCommand,
    'X-Goog-Upload-Offset': status.current
  };
  var body = blob.slice(startByte, endByte);

  if (body === null) {
    throw cannotSliceBlob();
  }

  function handler(xhr, text) {
    // TODO(andysoto): Verify the MD5 of each uploaded range:
    // the 'x-range-md5' header comes back with status code 308 responses.
    // We'll only be able to bail out though, because you can't re-upload a
    // range that you previously uploaded.
    var uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);
    var newCurrent = status.current + bytesToUpload;
    var size = blob.size();
    var metadata;

    if (uploadStatus === 'final') {
      metadata = metadataHandler(authWrapper, mappings)(xhr, text);
    } else {
      metadata = null;
    }

    return new ResumableUploadStatus(newCurrent, size, uploadStatus === 'final', metadata);
  }

  var method = 'POST';
  var timeout = authWrapper.maxUploadRetryTime();
  var requestInfo = new RequestInfo(url, method, handler, timeout);
  requestInfo.headers = headers;
  requestInfo.body = body.uploadData();
  requestInfo.progressCallback = opt_progressCallback || null;
  requestInfo.errorHandler = sharedErrorHandler(location);
  return requestInfo;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @struct
 */


var Observer =
/** @class */
function () {
  function Observer(nextOrObserver, opt_error, opt_complete) {
    var asFunctions = isFunction(nextOrObserver) || isDef(opt_error) || isDef(opt_complete);

    if (asFunctions) {
      this.next = nextOrObserver;
      this.error = opt_error || null;
      this.complete = opt_complete || null;
    } else {
      var observer = nextOrObserver;
      this.next = observer.next || null;
      this.error = observer.error || null;
      this.complete = observer.complete || null;
    }
  }

  return Observer;
}();

var UploadTaskSnapshot =
/** @class */
function () {
  function UploadTaskSnapshot(bytesTransferred, totalBytes, state, metadata, task, ref) {
    this.bytesTransferred = bytesTransferred;
    this.totalBytes = totalBytes;
    this.state = state;
    this.metadata = metadata;
    this.task = task;
    this.ref = ref;
  }

  return UploadTaskSnapshot;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns a function that invokes f with its arguments asynchronously as a
 * microtask, i.e. as soon as possible after the current script returns back
 * into browser code.
 */


function async(f) {
  return function () {
    var argsToForward = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      argsToForward[_i] = arguments[_i];
    }

    resolve(true).then(function () {
      f.apply(null, argsToForward);
    });
  };
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Represents a blob being uploaded. Can be used to pause/resume/cancel the
 * upload and manage callbacks for various events.
 */


var UploadTask =
/** @class */
function () {
  /**
   * @param ref The firebaseStorage.Reference object this task came
   *     from, untyped to avoid cyclic dependencies.
   * @param blob The blob to upload.
   */
  function UploadTask(ref, authWrapper, location, mappings, blob, metadata) {
    var _this = this;

    if (metadata === void 0) {
      metadata = null;
    }

    this.transferred_ = 0;
    this.needToFetchStatus_ = false;
    this.needToFetchMetadata_ = false;
    this.observers_ = [];
    this.error_ = null;
    this.uploadUrl_ = null;
    this.request_ = null;
    this.chunkMultiplier_ = 1;
    this.resolve_ = null;
    this.reject_ = null;
    this.ref_ = ref;
    this.authWrapper_ = authWrapper;
    this.location_ = location;
    this.blob_ = blob;
    this.metadata_ = metadata;
    this.mappings_ = mappings;
    this.resumable_ = this.shouldDoResumable_(this.blob_);
    this.state_ = InternalTaskState.RUNNING;

    this.errorHandler_ = function (error) {
      _this.request_ = null;
      _this.chunkMultiplier_ = 1;

      if (error.codeEquals(Code.CANCELED)) {
        _this.needToFetchStatus_ = true;

        _this.completeTransitions_();
      } else {
        _this.error_ = error;

        _this.transition_(InternalTaskState.ERROR);
      }
    };

    this.metadataErrorHandler_ = function (error) {
      _this.request_ = null;

      if (error.codeEquals(Code.CANCELED)) {
        _this.completeTransitions_();
      } else {
        _this.error_ = error;

        _this.transition_(InternalTaskState.ERROR);
      }
    };

    this.promise_ = make(function (resolve, reject) {
      _this.resolve_ = resolve;
      _this.reject_ = reject;

      _this.start_();
    }); // Prevent uncaught rejections on the internal promise from bubbling out
    // to the top level with a dummy handler.

    this.promise_.then(null, function () {});
  }

  UploadTask.prototype.makeProgressCallback_ = function () {
    var _this = this;

    var sizeBefore = this.transferred_;
    return function (loaded, total) {
      _this.updateProgress_(sizeBefore + loaded);
    };
  };

  UploadTask.prototype.shouldDoResumable_ = function (blob) {
    return blob.size() > 256 * 1024;
  };

  UploadTask.prototype.start_ = function () {
    if (this.state_ !== InternalTaskState.RUNNING) {
      // This can happen if someone pauses us in a resume callback, for example.
      return;
    }

    if (this.request_ !== null) {
      return;
    }

    if (this.resumable_) {
      if (this.uploadUrl_ === null) {
        this.createResumable_();
      } else {
        if (this.needToFetchStatus_) {
          this.fetchStatus_();
        } else {
          if (this.needToFetchMetadata_) {
            // Happens if we miss the metadata on upload completion.
            this.fetchMetadata_();
          } else {
            this.continueUpload_();
          }
        }
      }
    } else {
      this.oneShotUpload_();
    }
  };

  UploadTask.prototype.resolveToken_ = function (callback) {
    var _this = this;

    this.authWrapper_.getAuthToken().then(function (authToken) {
      switch (_this.state_) {
        case InternalTaskState.RUNNING:
          callback(authToken);
          break;

        case InternalTaskState.CANCELING:
          _this.transition_(InternalTaskState.CANCELED);

          break;

        case InternalTaskState.PAUSING:
          _this.transition_(InternalTaskState.PAUSED);

          break;

        default:
      }
    });
  }; // TODO(andysoto): assert false


  UploadTask.prototype.createResumable_ = function () {
    var _this = this;

    this.resolveToken_(function (authToken) {
      var requestInfo = createResumableUpload(_this.authWrapper_, _this.location_, _this.mappings_, _this.blob_, _this.metadata_);

      var createRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);

      _this.request_ = createRequest;
      createRequest.getPromise().then(function (url) {
        _this.request_ = null;
        _this.uploadUrl_ = url;
        _this.needToFetchStatus_ = false;

        _this.completeTransitions_();
      }, _this.errorHandler_);
    });
  };

  UploadTask.prototype.fetchStatus_ = function () {
    var _this = this; // TODO(andysoto): assert(this.uploadUrl_ !== null);


    var url = this.uploadUrl_;
    this.resolveToken_(function (authToken) {
      var requestInfo = getResumableUploadStatus(_this.authWrapper_, _this.location_, url, _this.blob_);

      var statusRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);

      _this.request_ = statusRequest;
      statusRequest.getPromise().then(function (status) {
        status = status;
        _this.request_ = null;

        _this.updateProgress_(status.current);

        _this.needToFetchStatus_ = false;

        if (status.finalized) {
          _this.needToFetchMetadata_ = true;
        }

        _this.completeTransitions_();
      }, _this.errorHandler_);
    });
  };

  UploadTask.prototype.continueUpload_ = function () {
    var _this = this;

    var chunkSize = resumableUploadChunkSize * this.chunkMultiplier_;
    var status = new ResumableUploadStatus(this.transferred_, this.blob_.size()); // TODO(andysoto): assert(this.uploadUrl_ !== null);

    var url = this.uploadUrl_;
    this.resolveToken_(function (authToken) {
      var requestInfo;

      try {
        requestInfo = continueResumableUpload(_this.location_, _this.authWrapper_, url, _this.blob_, chunkSize, _this.mappings_, status, _this.makeProgressCallback_());
      } catch (e) {
        _this.error_ = e;

        _this.transition_(InternalTaskState.ERROR);

        return;
      }

      var uploadRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);

      _this.request_ = uploadRequest;
      uploadRequest.getPromise().then(function (newStatus) {
        _this.increaseMultiplier_();

        _this.request_ = null;

        _this.updateProgress_(newStatus.current);

        if (newStatus.finalized) {
          _this.metadata_ = newStatus.metadata;

          _this.transition_(InternalTaskState.SUCCESS);
        } else {
          _this.completeTransitions_();
        }
      }, _this.errorHandler_);
    });
  };

  UploadTask.prototype.increaseMultiplier_ = function () {
    var currentSize = resumableUploadChunkSize * this.chunkMultiplier_; // Max chunk size is 32M.

    if (currentSize < 32 * 1024 * 1024) {
      this.chunkMultiplier_ *= 2;
    }
  };

  UploadTask.prototype.fetchMetadata_ = function () {
    var _this = this;

    this.resolveToken_(function (authToken) {
      var requestInfo = getMetadata(_this.authWrapper_, _this.location_, _this.mappings_);

      var metadataRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);

      _this.request_ = metadataRequest;
      metadataRequest.getPromise().then(function (metadata) {
        _this.request_ = null;
        _this.metadata_ = metadata;

        _this.transition_(InternalTaskState.SUCCESS);
      }, _this.metadataErrorHandler_);
    });
  };

  UploadTask.prototype.oneShotUpload_ = function () {
    var _this = this;

    this.resolveToken_(function (authToken) {
      var requestInfo = multipartUpload(_this.authWrapper_, _this.location_, _this.mappings_, _this.blob_, _this.metadata_);

      var multipartRequest = _this.authWrapper_.makeRequest(requestInfo, authToken);

      _this.request_ = multipartRequest;
      multipartRequest.getPromise().then(function (metadata) {
        _this.request_ = null;
        _this.metadata_ = metadata;

        _this.updateProgress_(_this.blob_.size());

        _this.transition_(InternalTaskState.SUCCESS);
      }, _this.errorHandler_);
    });
  };

  UploadTask.prototype.updateProgress_ = function (transferred) {
    var old = this.transferred_;
    this.transferred_ = transferred; // A progress update can make the "transferred" value smaller (e.g. a
    // partial upload not completed by server, after which the "transferred"
    // value may reset to the value at the beginning of the request).

    if (this.transferred_ !== old) {
      this.notifyObservers_();
    }
  };

  UploadTask.prototype.transition_ = function (state) {
    if (this.state_ === state) {
      return;
    }

    switch (state) {
      case InternalTaskState.CANCELING:
        // TODO(andysoto):
        // assert(this.state_ === InternalTaskState.RUNNING ||
        //        this.state_ === InternalTaskState.PAUSING);
        this.state_ = state;

        if (this.request_ !== null) {
          this.request_.cancel();
        }

        break;

      case InternalTaskState.PAUSING:
        // TODO(andysoto):
        // assert(this.state_ === InternalTaskState.RUNNING);
        this.state_ = state;

        if (this.request_ !== null) {
          this.request_.cancel();
        }

        break;

      case InternalTaskState.RUNNING:
        // TODO(andysoto):
        // assert(this.state_ === InternalTaskState.PAUSED ||
        //        this.state_ === InternalTaskState.PAUSING);
        var wasPaused = this.state_ === InternalTaskState.PAUSED;
        this.state_ = state;

        if (wasPaused) {
          this.notifyObservers_();
          this.start_();
        }

        break;

      case InternalTaskState.PAUSED:
        // TODO(andysoto):
        // assert(this.state_ === InternalTaskState.PAUSING);
        this.state_ = state;
        this.notifyObservers_();
        break;

      case InternalTaskState.CANCELED:
        // TODO(andysoto):
        // assert(this.state_ === InternalTaskState.PAUSED ||
        //        this.state_ === InternalTaskState.CANCELING);
        this.error_ = canceled();
        this.state_ = state;
        this.notifyObservers_();
        break;

      case InternalTaskState.ERROR:
        // TODO(andysoto):
        // assert(this.state_ === InternalTaskState.RUNNING ||
        //        this.state_ === InternalTaskState.PAUSING ||
        //        this.state_ === InternalTaskState.CANCELING);
        this.state_ = state;
        this.notifyObservers_();
        break;

      case InternalTaskState.SUCCESS:
        // TODO(andysoto):
        // assert(this.state_ === InternalTaskState.RUNNING ||
        //        this.state_ === InternalTaskState.PAUSING ||
        //        this.state_ === InternalTaskState.CANCELING);
        this.state_ = state;
        this.notifyObservers_();
        break;
    }
  };

  UploadTask.prototype.completeTransitions_ = function () {
    switch (this.state_) {
      case InternalTaskState.PAUSING:
        this.transition_(InternalTaskState.PAUSED);
        break;

      case InternalTaskState.CANCELING:
        this.transition_(InternalTaskState.CANCELED);
        break;

      case InternalTaskState.RUNNING:
        this.start_();
        break;

      default:
        // TODO(andysoto): assert(false);
        break;
    }
  };

  Object.defineProperty(UploadTask.prototype, "snapshot", {
    get: function () {
      var externalState = taskStateFromInternalTaskState(this.state_);
      return new UploadTaskSnapshot(this.transferred_, this.blob_.size(), externalState, this.metadata_, this, this.ref_);
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Adds a callback for an event.
   * @param type The type of event to listen for.
   */

  UploadTask.prototype.on = function (type, nextOrObserver, error, completed) {
    function typeValidator(_p) {
      if (type !== TaskEvent.STATE_CHANGED) {
        throw "Expected one of the event types: [" + TaskEvent.STATE_CHANGED + "].";
      }
    }

    var nextOrObserverMessage = 'Expected a function or an Object with one of ' + '`next`, `error`, `complete` properties.';
    var nextValidator = nullFunctionSpec(true).validator;
    var observerValidator = looseObjectSpec(null, true).validator;

    function nextOrObserverValidator(p) {
      try {
        nextValidator(p);
        return;
      } catch (e) {}

      try {
        observerValidator(p);
        var anyDefined = isJustDef(p['next']) || isJustDef(p['error']) || isJustDef(p['complete']);

        if (!anyDefined) {
          throw '';
        }

        return;
      } catch (e) {
        throw nextOrObserverMessage;
      }
    }

    var specs = [stringSpec(typeValidator), looseObjectSpec(nextOrObserverValidator, true), nullFunctionSpec(true), nullFunctionSpec(true)];
    validate('on', specs, arguments);
    var self = this;

    function makeBinder(specs) {
      function binder(nextOrObserver, error, opt_complete) {
        if (specs !== null) {
          validate('on', specs, arguments);
        }

        var observer = new Observer(nextOrObserver, error, completed);
        self.addObserver_(observer);
        return function () {
          self.removeObserver_(observer);
        };
      }

      return binder;
    }

    function binderNextOrObserverValidator(p) {
      if (p === null) {
        throw nextOrObserverMessage;
      }

      nextOrObserverValidator(p);
    }

    var binderSpecs = [looseObjectSpec(binderNextOrObserverValidator), nullFunctionSpec(true), nullFunctionSpec(true)];
    var typeOnly = !(isJustDef(nextOrObserver) || isJustDef(error) || isJustDef(completed));

    if (typeOnly) {
      return makeBinder(binderSpecs);
    } else {
      return makeBinder(null)(nextOrObserver, error, completed);
    }
  };
  /**
   * This object behaves like a Promise, and resolves with its snapshot data
   * when the upload completes.
   * @param onFulfilled The fulfillment callback. Promise chaining works as normal.
   * @param onRejected The rejection callback.
   */


  UploadTask.prototype.then = function (onFulfilled, onRejected) {
    // These casts are needed so that TypeScript can infer the types of the
    // resulting Promise.
    return this.promise_.then(onFulfilled, onRejected);
  };
  /**
   * Equivalent to calling `then(null, onRejected)`.
   */


  UploadTask.prototype.catch = function (onRejected) {
    return this.then(null, onRejected);
  };
  /**
   * Adds the given observer.
   */


  UploadTask.prototype.addObserver_ = function (observer) {
    this.observers_.push(observer);
    this.notifyObserver_(observer);
  };
  /**
   * Removes the given observer.
   */


  UploadTask.prototype.removeObserver_ = function (observer) {
    remove(this.observers_, observer);
  };

  UploadTask.prototype.notifyObservers_ = function () {
    var _this = this;

    this.finishPromise_();
    var observers = clone$1(this.observers_);
    observers.forEach(function (observer) {
      _this.notifyObserver_(observer);
    });
  };

  UploadTask.prototype.finishPromise_ = function () {
    if (this.resolve_ !== null) {
      var triggered = true;

      switch (taskStateFromInternalTaskState(this.state_)) {
        case TaskState.SUCCESS:
          async(this.resolve_.bind(null, this.snapshot))();
          break;

        case TaskState.CANCELED:
        case TaskState.ERROR:
          var toCall = this.reject_;
          async(toCall.bind(null, this.error_))();
          break;

        default:
          triggered = false;
          break;
      }

      if (triggered) {
        this.resolve_ = null;
        this.reject_ = null;
      }
    }
  };

  UploadTask.prototype.notifyObserver_ = function (observer) {
    var externalState = taskStateFromInternalTaskState(this.state_);

    switch (externalState) {
      case TaskState.RUNNING:
      case TaskState.PAUSED:
        if (observer.next) {
          async(observer.next.bind(observer, this.snapshot))();
        }

        break;

      case TaskState.SUCCESS:
        if (observer.complete) {
          async(observer.complete.bind(observer))();
        }

        break;

      case TaskState.CANCELED:
      case TaskState.ERROR:
        if (observer.error) {
          async(observer.error.bind(observer, this.error_))();
        }

        break;

      default:
        // TODO(andysoto): assert(false);
        if (observer.error) {
          async(observer.error.bind(observer, this.error_))();
        }

    }
  };
  /**
   * Resumes a paused task. Has no effect on a currently running or failed task.
   * @return True if the operation took effect, false if ignored.
   */


  UploadTask.prototype.resume = function () {
    validate('resume', [], arguments);
    var valid = this.state_ === InternalTaskState.PAUSED || this.state_ === InternalTaskState.PAUSING;

    if (valid) {
      this.transition_(InternalTaskState.RUNNING);
    }

    return valid;
  };
  /**
   * Pauses a currently running task. Has no effect on a paused or failed task.
   * @return True if the operation took effect, false if ignored.
   */


  UploadTask.prototype.pause = function () {
    validate('pause', [], arguments);
    var valid = this.state_ === InternalTaskState.RUNNING;

    if (valid) {
      this.transition_(InternalTaskState.PAUSING);
    }

    return valid;
  };
  /**
   * Cancels a currently running or paused task. Has no effect on a complete or
   * failed task.
   * @return True if the operation took effect, false if ignored.
   */


  UploadTask.prototype.cancel = function () {
    validate('cancel', [], arguments);
    var valid = this.state_ === InternalTaskState.RUNNING || this.state_ === InternalTaskState.PAUSING;

    if (valid) {
      this.transition_(InternalTaskState.CANCELING);
    }

    return valid;
  };

  return UploadTask;
}();
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provides methods to interact with a bucket in the Firebase Storage service.
 * @param location An fbs.location, or the URL at
 *     which to base this object, in one of the following forms:
 *         gs://<bucket>/<object-path>
 *         http[s]://firebasestorage.googleapis.com/
 *                     <api-version>/b/<bucket>/o/<object-path>
 *     Any query or fragment strings will be ignored in the http[s]
 *     format. If no value is passed, the storage object will use a URL based on
 *     the project ID of the base firebase.App instance.
 */


var Reference =
/** @class */
function () {
  function Reference(authWrapper, location) {
    this.authWrapper = authWrapper;

    if (location instanceof Location) {
      this.location = location;
    } else {
      this.location = Location.makeFromUrl(location);
    }
  }
  /**
   * @return The URL for the bucket and path this object references,
   *     in the form gs://<bucket>/<object-path>
   * @override
   */


  Reference.prototype.toString = function () {
    validate('toString', [], arguments);
    return 'gs://' + this.location.bucket + '/' + this.location.path;
  };

  Reference.prototype.newRef = function (authWrapper, location) {
    return new Reference(authWrapper, location);
  };

  Reference.prototype.mappings = function () {
    return getMappings();
  };
  /**
   * @return A reference to the object obtained by
   *     appending childPath, removing any duplicate, beginning, or trailing
   *     slashes.
   */


  Reference.prototype.child = function (childPath) {
    validate('child', [stringSpec()], arguments);
    var newPath = child(this.location.path, childPath);
    var location = new Location(this.location.bucket, newPath);
    return this.newRef(this.authWrapper, location);
  };

  Object.defineProperty(Reference.prototype, "parent", {
    /**
     * @return A reference to the parent of the
     *     current object, or null if the current object is the root.
     */
    get: function () {
      var newPath = parent(this.location.path);

      if (newPath === null) {
        return null;
      }

      var location = new Location(this.location.bucket, newPath);
      return this.newRef(this.authWrapper, location);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Reference.prototype, "root", {
    /**
     * @return An reference to the root of this
     *     object's bucket.
     */
    get: function () {
      var location = new Location(this.location.bucket, '');
      return this.newRef(this.authWrapper, location);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Reference.prototype, "bucket", {
    get: function () {
      return this.location.bucket;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Reference.prototype, "fullPath", {
    get: function () {
      return this.location.path;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Reference.prototype, "name", {
    get: function () {
      return lastComponent(this.location.path);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Reference.prototype, "storage", {
    get: function () {
      return this.authWrapper.service();
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Uploads a blob to this object's location.
   * @param data The blob to upload.
   * @return An UploadTask that lets you control and
   *     observe the upload.
   */

  Reference.prototype.put = function (data, metadata) {
    if (metadata === void 0) {
      metadata = null;
    }

    validate('put', [uploadDataSpec(), metadataSpec(true)], arguments);
    this.throwIfRoot_('put');
    return new UploadTask(this, this.authWrapper, this.location, this.mappings(), new FbsBlob(data), metadata);
  };
  /**
   * Uploads a string to this object's location.
   * @param string The string to upload.
   * @param opt_format The format of the string to upload.
   * @return An UploadTask that lets you control and
   *     observe the upload.
   */


  Reference.prototype.putString = function (string, format, opt_metadata) {
    if (format === void 0) {
      format = StringFormat.RAW;
    }

    validate('putString', [stringSpec(), stringSpec(formatValidator, true), metadataSpec(true)], arguments);
    this.throwIfRoot_('putString');
    var data = dataFromString(format, string);
    var metadata = clone(opt_metadata);

    if (!isDef(metadata['contentType']) && isDef(data.contentType)) {
      metadata['contentType'] = data.contentType;
    }

    return new UploadTask(this, this.authWrapper, this.location, this.mappings(), new FbsBlob(data.data, true), metadata);
  };
  /**
   * Deletes the object at this location.
   * @return A promise that resolves if the deletion succeeds.
   */


  Reference.prototype.delete = function () {
    validate('delete', [], arguments);
    this.throwIfRoot_('delete');
    var self = this;
    return this.authWrapper.getAuthToken().then(function (authToken) {
      var requestInfo = deleteObject(self.authWrapper, self.location);
      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();
    });
  };
  /**
   * List all items (files) and prefixes (folders) under this storage reference.
   *
   * This is a helper method for calling list() repeatedly until there are
   * no more results. The default pagination size is 1000.
   *
   * Note: The results may not be consistent if objects are changed while this
   * operation is running.
   *
   * Warning: listAll may potentially consume too many resources if there are
   * too many results.
   *
   * @return A Promise that resolves with all the items and prefixes under
   *      the current storage reference. `prefixes` contains references to
   *      sub-directories and `items` contains references to objects in this
   *      folder. `nextPageToken` is never returned.
   */


  Reference.prototype.listAll = function () {
    validate('listAll', [], arguments);
    var accumulator = {
      prefixes: [],
      items: []
    };
    return this.listAllHelper(accumulator).then(function () {
      return accumulator;
    });
  };

  Reference.prototype.listAllHelper = function (accumulator, pageToken) {
    return Object(tslib__WEBPACK_IMPORTED_MODULE_1__["__awaiter"])(this, void 0, void 0, function () {
      var _a, _b, opt, nextPage;

      return Object(tslib__WEBPACK_IMPORTED_MODULE_1__["__generator"])(this, function (_c) {
        switch (_c.label) {
          case 0:
            opt = {
              // maxResults is 1000 by default.
              pageToken: pageToken
            };
            return [4
            /*yield*/
            , this.list(opt)];

          case 1:
            nextPage = _c.sent();

            (_a = accumulator.prefixes).push.apply(_a, nextPage.prefixes);

            (_b = accumulator.items).push.apply(_b, nextPage.items);

            if (!(nextPage.nextPageToken != null)) return [3
            /*break*/
            , 3];
            return [4
            /*yield*/
            , this.listAllHelper(accumulator, nextPage.nextPageToken)];

          case 2:
            _c.sent();

            _c.label = 3;

          case 3:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * List items (files) and prefixes (folders) under this storage reference.
   *
   * List API is only available for Firebase Rules Version 2.
   *
   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'
   * delimited folder structure.
   * Refer to GCS's List API if you want to learn more.
   *
   * To adhere to Firebase Rules's Semantics, Firebase Storage does not
   * support objects whose paths end with "/" or contain two consecutive
   * "/"s. Firebase Storage List API will filter these unsupported objects.
   * list() may fail if there are too many unsupported objects in the bucket.
   *
   * @param options See ListOptions for details.
   * @return A Promise that resolves with the items and prefixes.
   *      `prefixes` contains references to sub-folders and `items`
   *      contains references to objects in this folder. `nextPageToken`
   *      can be used to get the rest of the results.
   */


  Reference.prototype.list = function (options) {
    validate('list', [listOptionSpec(true)], arguments);
    var self = this;
    return this.authWrapper.getAuthToken().then(function (authToken) {
      var op = options || {};
      var requestInfo = list(self.authWrapper, self.location,
      /*delimiter= */
      '/', op.pageToken, op.maxResults);
      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();
    });
  };
  /**
   *     A promise that resolves with the metadata for this object. If this
   *     object doesn't exist or metadata cannot be retreived, the promise is
   *     rejected.
   */


  Reference.prototype.getMetadata = function () {
    validate('getMetadata', [], arguments);
    this.throwIfRoot_('getMetadata');
    var self = this;
    return this.authWrapper.getAuthToken().then(function (authToken) {
      var requestInfo = getMetadata(self.authWrapper, self.location, self.mappings());
      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();
    });
  };
  /**
   * Updates the metadata for this object.
   * @param metadata The new metadata for the object.
   *     Only values that have been explicitly set will be changed. Explicitly
   *     setting a value to null will remove the metadata.
   * @return A promise that resolves
   *     with the new metadata for this object.
   *     @see firebaseStorage.Reference.prototype.getMetadata
   */


  Reference.prototype.updateMetadata = function (metadata) {
    validate('updateMetadata', [metadataSpec()], arguments);
    this.throwIfRoot_('updateMetadata');
    var self = this;
    return this.authWrapper.getAuthToken().then(function (authToken) {
      var requestInfo = updateMetadata(self.authWrapper, self.location, metadata, self.mappings());
      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise();
    });
  };
  /**
   * @return A promise that resolves with the download
   *     URL for this object.
   */


  Reference.prototype.getDownloadURL = function () {
    validate('getDownloadURL', [], arguments);
    this.throwIfRoot_('getDownloadURL');
    var self = this;
    return this.authWrapper.getAuthToken().then(function (authToken) {
      var requestInfo = getDownloadUrl(self.authWrapper, self.location, self.mappings());
      return self.authWrapper.makeRequest(requestInfo, authToken).getPromise().then(function (url) {
        if (url === null) {
          throw noDownloadURL();
        }

        return url;
      });
    });
  };

  Reference.prototype.throwIfRoot_ = function (name) {
    if (this.location.path === '') {
      throw invalidRootOperation(name);
    }
  };

  return Reference;
}();
/**
 * A request whose promise always fails.
 * @struct
 * @template T
 */


var FailRequest =
/** @class */
function () {
  function FailRequest(error) {
    this.promise_ = reject(error);
  }
  /** @inheritDoc */


  FailRequest.prototype.getPromise = function () {
    return this.promise_;
  };
  /** @inheritDoc */


  FailRequest.prototype.cancel = function (appDelete) {
    if (appDelete === void 0) {
      appDelete = false;
    }
  };

  return FailRequest;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @struct
 */


var RequestMap =
/** @class */
function () {
  function RequestMap() {
    this.map_ = {};
    this.id_ = MIN_SAFE_INTEGER;
  }
  /**
   * Registers the given request with this map.
   * The request is unregistered when it completes.
   * @param r The request to register.
   */


  RequestMap.prototype.addRequest = function (r) {
    var id = this.id_;
    this.id_++;
    this.map_[id] = r;
    var self = this;

    function unmap() {
      delete self.map_[id];
    }

    r.getPromise().then(unmap, unmap);
  };
  /**
   * Cancels all registered requests.
   */


  RequestMap.prototype.clear = function () {
    forEach(this.map_, function (key, val) {
      if (val) {
        val.cancel(true);
      }
    });
    this.map_ = {};
  };

  return RequestMap;
}();
/**
 * @param app If null, getAuthToken always resolves with null.
 * @param service The storage service associated with this auth wrapper.
 *     Untyped to avoid circular type dependencies.
 * @struct
 */


var AuthWrapper =
/** @class */
function () {
  function AuthWrapper(app, maker, requestMaker, service, pool) {
    this.bucket_ = null;
    this.deleted_ = false;
    this.app_ = app;

    if (this.app_ !== null) {
      var options = this.app_.options;

      if (isDef(options)) {
        this.bucket_ = AuthWrapper.extractBucket_(options);
      }
    }

    this.storageRefMaker_ = maker;
    this.requestMaker_ = requestMaker;
    this.pool_ = pool;
    this.service_ = service;
    this.maxOperationRetryTime_ = DEFAULT_MAX_OPERATION_RETRY_TIME;
    this.maxUploadRetryTime_ = DEFAULT_MAX_UPLOAD_RETRY_TIME;
    this.requestMap_ = new RequestMap();
  }

  AuthWrapper.extractBucket_ = function (config) {
    var bucketString = config[CONFIG_STORAGE_BUCKET_KEY] || null;

    if (bucketString == null) {
      return null;
    }

    var loc = Location.makeFromBucketSpec(bucketString);
    return loc.bucket;
  };

  AuthWrapper.prototype.getAuthToken = function () {
    // TODO(andysoto): remove ifDef checks after firebase-app implements stubs
    // (b/28673818).
    if (this.app_ !== null && isDef(this.app_.INTERNAL) && isDef(this.app_.INTERNAL.getToken)) {
      return this.app_.INTERNAL.getToken().then(function (response) {
        if (response !== null) {
          return response.accessToken;
        } else {
          return null;
        }
      }, function (_error) {
        return null;
      });
    } else {
      return resolve(null);
    }
  };

  AuthWrapper.prototype.bucket = function () {
    if (this.deleted_) {
      throw appDeleted();
    } else {
      return this.bucket_;
    }
  };
  /**
   * The service associated with this auth wrapper. Untyped to avoid circular
   * type dependencies.
   */


  AuthWrapper.prototype.service = function () {
    return this.service_;
  };
  /**
   * Returns a new firebaseStorage.Reference object referencing this AuthWrapper
   * at the given Location.
   * @param loc The Location.
   * @return Actually a firebaseStorage.Reference, typing not allowed
   *     because of circular dependency problems.
   */


  AuthWrapper.prototype.makeStorageReference = function (loc) {
    return this.storageRefMaker_(this, loc);
  };

  AuthWrapper.prototype.makeRequest = function (requestInfo, authToken) {
    if (!this.deleted_) {
      var request = this.requestMaker_(requestInfo, authToken, this.pool_);
      this.requestMap_.addRequest(request);
      return request;
    } else {
      return new FailRequest(appDeleted());
    }
  };
  /**
   * Stop running requests and prevent more from being created.
   */


  AuthWrapper.prototype.deleteApp = function () {
    this.deleted_ = true;
    this.app_ = null;
    this.requestMap_.clear();
  };

  AuthWrapper.prototype.maxUploadRetryTime = function () {
    return this.maxUploadRetryTime_;
  };

  AuthWrapper.prototype.setMaxUploadRetryTime = function (time) {
    this.maxUploadRetryTime_ = time;
  };

  AuthWrapper.prototype.maxOperationRetryTime = function () {
    return this.maxOperationRetryTime_;
  };

  AuthWrapper.prototype.setMaxOperationRetryTime = function (time) {
    this.maxOperationRetryTime_ = time;
  };

  return AuthWrapper;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @param f May be invoked
 *     before the function returns.
 * @param callback Get all the arguments passed to the function
 *     passed to f, including the initial boolean.
 */


function start(f, callback, timeout) {
  // TODO(andysoto): make this code cleaner (probably refactor into an actual
  // type instead of a bunch of functions with state shared in the closure)
  var waitSeconds = 1; // Would type this as "number" but that doesn't work for Node so ¯\_(ツ)_/¯

  var timeoutId = null;
  var hitTimeout = false;
  var cancelState = 0;

  function canceled() {
    return cancelState === 2;
  }

  var triggeredCallback = false;

  function triggerCallback() {
    if (!triggeredCallback) {
      triggeredCallback = true;
      callback.apply(null, arguments);
    }
  }

  function callWithDelay(millis) {
    timeoutId = setTimeout(function () {
      timeoutId = null;
      f(handler, canceled());
    }, millis);
  }

  function handler(success) {
    var var_args = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      var_args[_i - 1] = arguments[_i];
    }

    if (triggeredCallback) {
      return;
    }

    if (success) {
      triggerCallback.apply(null, arguments);
      return;
    }

    var mustStop = canceled() || hitTimeout;

    if (mustStop) {
      triggerCallback.apply(null, arguments);
      return;
    }

    if (waitSeconds < 64) {
      /* TODO(andysoto): don't back off so quickly if we know we're offline. */
      waitSeconds *= 2;
    }

    var waitMillis;

    if (cancelState === 1) {
      cancelState = 2;
      waitMillis = 0;
    } else {
      waitMillis = (waitSeconds + Math.random()) * 1000;
    }

    callWithDelay(waitMillis);
  }

  var stopped = false;

  function stop(wasTimeout) {
    if (stopped) {
      return;
    }

    stopped = true;

    if (triggeredCallback) {
      return;
    }

    if (timeoutId !== null) {
      if (!wasTimeout) {
        cancelState = 2;
      }

      clearTimeout(timeoutId);
      callWithDelay(0);
    } else {
      if (!wasTimeout) {
        cancelState = 1;
      }
    }
  }

  callWithDelay(0);
  setTimeout(function () {
    hitTimeout = true;
    stop(true);
  }, timeout);
  return stop;
}
/**
 * Stops the retry loop from repeating.
 * If the function is currently "in between" retries, it is invoked immediately
 * with the second parameter as "true". Otherwise, it will be invoked once more
 * after the current invocation finishes iff the current invocation would have
 * triggered another retry.
 */


function stop(id) {
  id(false);
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @struct
 * @template T
 */


var NetworkRequest =
/** @class */
function () {
  function NetworkRequest(url, method, headers, body, successCodes, additionalRetryCodes, callback, errorCallback, timeout, progressCallback, pool) {
    this.pendingXhr_ = null;
    this.backoffId_ = null;
    this.resolve_ = null;
    this.reject_ = null;
    this.canceled_ = false;
    this.appDelete_ = false;
    this.url_ = url;
    this.method_ = method;
    this.headers_ = headers;
    this.body_ = body;
    this.successCodes_ = successCodes.slice();
    this.additionalRetryCodes_ = additionalRetryCodes.slice();
    this.callback_ = callback;
    this.errorCallback_ = errorCallback;
    this.progressCallback_ = progressCallback;
    this.timeout_ = timeout;
    this.pool_ = pool;
    var self = this;
    this.promise_ = make(function (resolve, reject) {
      self.resolve_ = resolve;
      self.reject_ = reject;
      self.start_();
    });
  }
  /**
   * Actually starts the retry loop.
   */


  NetworkRequest.prototype.start_ = function () {
    var self = this;

    function doTheRequest(backoffCallback, canceled) {
      if (canceled) {
        backoffCallback(false, new RequestEndStatus(false, null, true));
        return;
      }

      var xhr = self.pool_.createXhrIo();
      self.pendingXhr_ = xhr;

      function progressListener(progressEvent) {
        var loaded = progressEvent.loaded;
        var total = progressEvent.lengthComputable ? progressEvent.total : -1;

        if (self.progressCallback_ !== null) {
          self.progressCallback_(loaded, total);
        }
      }

      if (self.progressCallback_ !== null) {
        xhr.addUploadProgressListener(progressListener);
      }

      xhr.send(self.url_, self.method_, self.body_, self.headers_).then(function (xhr) {
        if (self.progressCallback_ !== null) {
          xhr.removeUploadProgressListener(progressListener);
        }

        self.pendingXhr_ = null;
        xhr = xhr;
        var hitServer = xhr.getErrorCode() === ErrorCode.NO_ERROR;
        var status = xhr.getStatus();

        if (!hitServer || self.isRetryStatusCode_(status)) {
          var wasCanceled = xhr.getErrorCode() === ErrorCode.ABORT;
          backoffCallback(false, new RequestEndStatus(false, null, wasCanceled));
          return;
        }

        var successCode = contains$1(self.successCodes_, status);
        backoffCallback(true, new RequestEndStatus(successCode, xhr));
      });
    }
    /**
     * @param requestWentThrough True if the request eventually went
     *     through, false if it hit the retry limit or was canceled.
     */


    function backoffDone(requestWentThrough, status) {
      var resolve = self.resolve_;
      var reject = self.reject_;
      var xhr = status.xhr;

      if (status.wasSuccessCode) {
        try {
          var result = self.callback_(xhr, xhr.getResponseText());

          if (isJustDef(result)) {
            resolve(result);
          } else {
            resolve();
          }
        } catch (e) {
          reject(e);
        }
      } else {
        if (xhr !== null) {
          var err = unknown();
          err.setServerResponseProp(xhr.getResponseText());

          if (self.errorCallback_) {
            reject(self.errorCallback_(xhr, err));
          } else {
            reject(err);
          }
        } else {
          if (status.canceled) {
            var err = self.appDelete_ ? appDeleted() : canceled();
            reject(err);
          } else {
            var err = retryLimitExceeded();
            reject(err);
          }
        }
      }
    }

    if (this.canceled_) {
      backoffDone(false, new RequestEndStatus(false, null, true));
    } else {
      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);
    }
  };
  /** @inheritDoc */


  NetworkRequest.prototype.getPromise = function () {
    return this.promise_;
  };
  /** @inheritDoc */


  NetworkRequest.prototype.cancel = function (appDelete) {
    this.canceled_ = true;
    this.appDelete_ = appDelete || false;

    if (this.backoffId_ !== null) {
      stop(this.backoffId_);
    }

    if (this.pendingXhr_ !== null) {
      this.pendingXhr_.abort();
    }
  };

  NetworkRequest.prototype.isRetryStatusCode_ = function (status) {
    // The codes for which to retry came from this page:
    // https://cloud.google.com/storage/docs/exponential-backoff
    var isFiveHundredCode = status >= 500 && status < 600;
    var extraRetryCodes = [// Request Timeout: web server didn't receive full request in time.
    408, // Too Many Requests: you're getting rate-limited, basically.
    429];
    var isExtraRetryCode = contains$1(extraRetryCodes, status);
    var isRequestSpecificRetryCode = contains$1(this.additionalRetryCodes_, status);
    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;
  };

  return NetworkRequest;
}();
/**
 * A collection of information about the result of a network request.
 * @param opt_canceled Defaults to false.
 * @struct
 */


var RequestEndStatus =
/** @class */
function () {
  function RequestEndStatus(wasSuccessCode, xhr, opt_canceled) {
    this.wasSuccessCode = wasSuccessCode;
    this.xhr = xhr;
    this.canceled = !!opt_canceled;
  }

  return RequestEndStatus;
}();

function addAuthHeader_(headers, authToken) {
  if (authToken !== null && authToken.length > 0) {
    headers['Authorization'] = 'Firebase ' + authToken;
  }
}

function addVersionHeader_(headers) {
  var number = typeof _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a !== 'undefined' ? _firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a.SDK_VERSION : 'AppManager';
  headers['X-Firebase-Storage-Version'] = 'webjs/' + number;
}
/**
 * @template T
 */


function makeRequest(requestInfo, authToken, pool) {
  var queryPart = makeQueryString(requestInfo.urlParams);
  var url = requestInfo.url + queryPart;
  var headers = clone(requestInfo.headers);
  addAuthHeader_(headers, authToken);
  addVersionHeader_(headers);
  return new NetworkRequest(url, requestInfo.method, headers, requestInfo.body, requestInfo.successCodes, requestInfo.additionalRetryCodes, requestInfo.handler, requestInfo.errorHandler, requestInfo.timeout, requestInfo.progressCallback, pool);
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A service that provides firebaseStorage.Reference instances.
 * @param opt_url gs:// url to a custom Storage Bucket
 *
 * @struct
 */


var Service =
/** @class */
function () {
  function Service(app, pool, url) {
    this.bucket_ = null;

    function maker(authWrapper, loc) {
      return new Reference(authWrapper, loc);
    }

    this.authWrapper_ = new AuthWrapper(app, maker, makeRequest, this, pool);
    this.app_ = app;

    if (url != null) {
      this.bucket_ = Location.makeFromBucketSpec(url);
    } else {
      var authWrapperBucket = this.authWrapper_.bucket();

      if (authWrapperBucket != null) {
        this.bucket_ = new Location(authWrapperBucket, '');
      }
    }

    this.internals_ = new ServiceInternals(this);
  }
  /**
   * Returns a firebaseStorage.Reference for the given path in the default
   * bucket.
   */


  Service.prototype.ref = function (path) {
    function validator(path) {
      if (/^[A-Za-z]+:\/\//.test(path)) {
        throw 'Expected child path but got a URL, use refFromURL instead.';
      }
    }

    validate('ref', [stringSpec(validator, true)], arguments);

    if (this.bucket_ == null) {
      throw new Error('No Storage Bucket defined in Firebase Options.');
    }

    var ref = new Reference(this.authWrapper_, this.bucket_);

    if (path != null) {
      return ref.child(path);
    } else {
      return ref;
    }
  };
  /**
   * Returns a firebaseStorage.Reference object for the given absolute URL,
   * which must be a gs:// or http[s]:// URL.
   */


  Service.prototype.refFromURL = function (url) {
    function validator(p) {
      if (!/^[A-Za-z]+:\/\//.test(p)) {
        throw 'Expected full URL but got a child path, use ref instead.';
      }

      try {
        Location.makeFromUrl(p);
      } catch (e) {
        throw 'Expected valid full URL but got an invalid one.';
      }
    }

    validate('refFromURL', [stringSpec(validator, false)], arguments);
    return new Reference(this.authWrapper_, url);
  };

  Object.defineProperty(Service.prototype, "maxUploadRetryTime", {
    get: function () {
      return this.authWrapper_.maxUploadRetryTime();
    },
    enumerable: true,
    configurable: true
  });

  Service.prototype.setMaxUploadRetryTime = function (time) {
    validate('setMaxUploadRetryTime', [nonNegativeNumberSpec()], arguments);
    this.authWrapper_.setMaxUploadRetryTime(time);
  };

  Service.prototype.setMaxOperationRetryTime = function (time) {
    validate('setMaxOperationRetryTime', [nonNegativeNumberSpec()], arguments);
    this.authWrapper_.setMaxOperationRetryTime(time);
  };

  Object.defineProperty(Service.prototype, "app", {
    get: function () {
      return this.app_;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Service.prototype, "INTERNAL", {
    get: function () {
      return this.internals_;
    },
    enumerable: true,
    configurable: true
  });
  return Service;
}();
/**
 * @struct
 */


var ServiceInternals =
/** @class */
function () {
  function ServiceInternals(service) {
    this.service_ = service;
  }
  /**
   * Called when the associated app is deleted.
   * @see {!fbs.AuthWrapper.prototype.deleteApp}
   */


  ServiceInternals.prototype.delete = function () {
    this.service_.authWrapper_.deleteApp();
    return resolve(undefined);
  };

  return ServiceInternals;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Type constant for Firebase Storage.
 */


var STORAGE_TYPE = 'storage';

function factory(app, unused, opt_url) {
  return new Service(app, new XhrIoPool(), opt_url);
}

function registerStorage(instance) {
  var namespaceExports = {
    // no-inline
    TaskState: TaskState,
    TaskEvent: TaskEvent,
    StringFormat: StringFormat,
    Storage: Service,
    Reference: Reference
  };
  instance.INTERNAL.registerService(STORAGE_TYPE, factory, namespaceExports, undefined, // Allow multiple storage instances per app.
  true);
}

registerStorage(_firebase_app__WEBPACK_IMPORTED_MODULE_0___default.a);


/***/ }),

/***/ "./node_modules/@firebase/util/dist/index.cjs.js":
/*!*******************************************************!*\
  !*** ./node_modules/@firebase/util/dist/index.cjs.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

Object.defineProperty(exports, '__esModule', {
  value: true
});

var tslib_1 = __webpack_require__(/*! tslib */ "./node_modules/tslib/tslib.es6.js");
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
 */


var CONSTANTS = {
  /**
   * @define {boolean} Whether this is the client Node.js SDK.
   */
  NODE_CLIENT: false,

  /**
   * @define {boolean} Whether this is the Admin Node.js SDK.
   */
  NODE_ADMIN: false,

  /**
   * Firebase SDK Version
   */
  SDK_VERSION: '${JSCORE_VERSION}'
};
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Throws an error if the provided assertion is falsy
 */

var assert = function (assertion, message) {
  if (!assertion) {
    throw assertionError(message);
  }
};
/**
 * Returns an Error object suitable for throwing.
 */


var assertionError = function (message) {
  return new Error('Firebase Database (' + CONSTANTS.SDK_VERSION + ') INTERNAL ASSERT FAILED: ' + message);
};
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var stringToByteArray = function (str) {
  // TODO(user): Use native implementations if/when available
  var out = [];
  var p = 0;

  for (var i = 0; i < str.length; i++) {
    var c = str.charCodeAt(i);

    if (c < 128) {
      out[p++] = c;
    } else if (c < 2048) {
      out[p++] = c >> 6 | 192;
      out[p++] = c & 63 | 128;
    } else if ((c & 0xfc00) === 0xd800 && i + 1 < str.length && (str.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
      // Surrogate Pair
      c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
      out[p++] = c >> 18 | 240;
      out[p++] = c >> 12 & 63 | 128;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    } else {
      out[p++] = c >> 12 | 224;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    }
  }

  return out;
};
/**
 * Turns an array of numbers into the string given by the concatenation of the
 * characters to which the numbers correspond.
 * @param bytes Array of numbers representing characters.
 * @return Stringification of the array.
 */


var byteArrayToString = function (bytes) {
  // TODO(user): Use native implementations if/when available
  var out = [];
  var pos = 0,
      c = 0;

  while (pos < bytes.length) {
    var c1 = bytes[pos++];

    if (c1 < 128) {
      out[c++] = String.fromCharCode(c1);
    } else if (c1 > 191 && c1 < 224) {
      var c2 = bytes[pos++];
      out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
    } else if (c1 > 239 && c1 < 365) {
      // Surrogate Pair
      var c2 = bytes[pos++];
      var c3 = bytes[pos++];
      var c4 = bytes[pos++];
      var u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 0x10000;
      out[c++] = String.fromCharCode(0xd800 + (u >> 10));
      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
    } else {
      var c2 = bytes[pos++];
      var c3 = bytes[pos++];
      out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
    }
  }

  return out.join('');
}; // Static lookup maps, lazily populated by init_()


var base64 = {
  /**
   * Maps bytes to characters.
   * @type {Object}
   * @private
   */
  byteToCharMap_: null,

  /**
   * Maps characters to bytes.
   * @type {Object}
   * @private
   */
  charToByteMap_: null,

  /**
   * Maps bytes to websafe characters.
   * @type {Object}
   * @private
   */
  byteToCharMapWebSafe_: null,

  /**
   * Maps websafe characters to bytes.
   * @type {Object}
   * @private
   */
  charToByteMapWebSafe_: null,

  /**
   * Our default alphabet, shared between
   * ENCODED_VALS and ENCODED_VALS_WEBSAFE
   * @type {string}
   */
  ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',

  /**
   * Our default alphabet. Value 64 (=) is special; it means "nothing."
   * @type {string}
   */
  get ENCODED_VALS() {
    return this.ENCODED_VALS_BASE + '+/=';
  },

  /**
   * Our websafe alphabet.
   * @type {string}
   */
  get ENCODED_VALS_WEBSAFE() {
    return this.ENCODED_VALS_BASE + '-_.';
  },

  /**
   * Whether this browser supports the atob and btoa functions. This extension
   * started at Mozilla but is now implemented by many browsers. We use the
   * ASSUME_* variables to avoid pulling in the full useragent detection library
   * but still allowing the standard per-browser compilations.
   *
   * @type {boolean}
   */
  HAS_NATIVE_SUPPORT: typeof atob === 'function',

  /**
   * Base64-encode an array of bytes.
   *
   * @param input An array of bytes (numbers with
   *     value in [0, 255]) to encode.
   * @param webSafe Boolean indicating we should use the
   *     alternative alphabet.
   * @return The base64 encoded string.
   */
  encodeByteArray: function (input, webSafe) {
    if (!Array.isArray(input)) {
      throw Error('encodeByteArray takes an array as a parameter');
    }

    this.init_();
    var byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
    var output = [];

    for (var i = 0; i < input.length; i += 3) {
      var byte1 = input[i];
      var haveByte2 = i + 1 < input.length;
      var byte2 = haveByte2 ? input[i + 1] : 0;
      var haveByte3 = i + 2 < input.length;
      var byte3 = haveByte3 ? input[i + 2] : 0;
      var outByte1 = byte1 >> 2;
      var outByte2 = (byte1 & 0x03) << 4 | byte2 >> 4;
      var outByte3 = (byte2 & 0x0f) << 2 | byte3 >> 6;
      var outByte4 = byte3 & 0x3f;

      if (!haveByte3) {
        outByte4 = 64;

        if (!haveByte2) {
          outByte3 = 64;
        }
      }

      output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
    }

    return output.join('');
  },

  /**
   * Base64-encode a string.
   *
   * @param input A string to encode.
   * @param webSafe If true, we should use the
   *     alternative alphabet.
   * @return The base64 encoded string.
   */
  encodeString: function (input, webSafe) {
    // Shortcut for Mozilla browsers that implement
    // a native base64 encoder in the form of "btoa/atob"
    if (this.HAS_NATIVE_SUPPORT && !webSafe) {
      return btoa(input);
    }

    return this.encodeByteArray(stringToByteArray(input), webSafe);
  },

  /**
   * Base64-decode a string.
   *
   * @param input to decode.
   * @param webSafe True if we should use the
   *     alternative alphabet.
   * @return string representing the decoded value.
   */
  decodeString: function (input, webSafe) {
    // Shortcut for Mozilla browsers that implement
    // a native base64 encoder in the form of "btoa/atob"
    if (this.HAS_NATIVE_SUPPORT && !webSafe) {
      return atob(input);
    }

    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
  },

  /**
   * Base64-decode a string.
   *
   * In base-64 decoding, groups of four characters are converted into three
   * bytes.  If the encoder did not apply padding, the input length may not
   * be a multiple of 4.
   *
   * In this case, the last group will have fewer than 4 characters, and
   * padding will be inferred.  If the group has one or two characters, it decodes
   * to one byte.  If the group has three characters, it decodes to two bytes.
   *
   * @param input Input to decode.
   * @param webSafe True if we should use the web-safe alphabet.
   * @return bytes representing the decoded value.
   */
  decodeStringToByteArray: function (input, webSafe) {
    this.init_();
    var charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
    var output = [];

    for (var i = 0; i < input.length;) {
      var byte1 = charToByteMap[input.charAt(i++)];
      var haveByte2 = i < input.length;
      var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
      ++i;
      var haveByte3 = i < input.length;
      var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
      ++i;
      var haveByte4 = i < input.length;
      var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
      ++i;

      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
        throw Error();
      }

      var outByte1 = byte1 << 2 | byte2 >> 4;
      output.push(outByte1);

      if (byte3 !== 64) {
        var outByte2 = byte2 << 4 & 0xf0 | byte3 >> 2;
        output.push(outByte2);

        if (byte4 !== 64) {
          var outByte3 = byte3 << 6 & 0xc0 | byte4;
          output.push(outByte3);
        }
      }
    }

    return output;
  },

  /**
   * Lazy static initialization function. Called before
   * accessing any of the static map variables.
   * @private
   */
  init_: function () {
    if (!this.byteToCharMap_) {
      this.byteToCharMap_ = {};
      this.charToByteMap_ = {};
      this.byteToCharMapWebSafe_ = {};
      this.charToByteMapWebSafe_ = {}; // We want quick mappings back and forth, so we precompute two maps.

      for (var i = 0; i < this.ENCODED_VALS.length; i++) {
        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
        this.charToByteMap_[this.byteToCharMap_[i]] = i;
        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i; // Be forgiving when decoding and correctly decode both encodings.

        if (i >= this.ENCODED_VALS_BASE.length) {
          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
        }
      }
    }
  }
};
/**
 * URL-safe base64 encoding
 */

var base64Encode = function (str) {
  var utf8Bytes = stringToByteArray(str);
  return base64.encodeByteArray(utf8Bytes, true);
};
/**
 * URL-safe base64 decoding
 *
 * NOTE: DO NOT use the global atob() function - it does NOT support the
 * base64Url variant encoding.
 *
 * @param str To be decoded
 * @return Decoded result, if possible
 */


var base64Decode = function (str) {
  try {
    return base64.decodeString(str, true);
  } catch (e) {
    console.error('base64Decode failed: ', e);
  }

  return null;
};
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Do a deep-copy of basic JavaScript Objects or Arrays.
 */


function deepCopy(value) {
  return deepExtend(undefined, value);
}
/**
 * Copy properties from source to target (recursively allows extension
 * of Objects and Arrays).  Scalar values in the target are over-written.
 * If target is undefined, an object of the appropriate type will be created
 * (and returned).
 *
 * We recursively copy all child properties of plain Objects in the source- so
 * that namespace- like dictionaries are merged.
 *
 * Note that the target can be a function, in which case the properties in
 * the source Object are copied onto it as static properties of the Function.
 */


function deepExtend(target, source) {
  if (!(source instanceof Object)) {
    return source;
  }

  switch (source.constructor) {
    case Date:
      // Treat Dates like scalars; if the target date object had any child
      // properties - they will be lost!
      var dateValue = source;
      return new Date(dateValue.getTime());

    case Object:
      if (target === undefined) {
        target = {};
      }

      break;

    case Array:
      // Always copy the array source and overwrite the target.
      target = [];
      break;

    default:
      // Not a plain Object - treat it as a scalar.
      return source;
  }

  for (var prop in source) {
    if (!source.hasOwnProperty(prop)) {
      continue;
    }

    target[prop] = deepExtend(target[prop], source[prop]);
  }

  return target;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var Deferred =
/** @class */
function () {
  function Deferred() {
    var _this = this;

    this.promise = new Promise(function (resolve, reject) {
      _this.resolve = resolve;
      _this.reject = reject;
    });
  }
  /**
   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
   * and returns a node-style callback which will resolve or reject the Deferred's promise.
   */


  Deferred.prototype.wrapCallback = function (callback) {
    var _this = this;

    return function (error, value) {
      if (error) {
        _this.reject(error);
      } else {
        _this.resolve(value);
      }

      if (typeof callback === 'function') {
        // Attaching noop handler just in case developer wasn't expecting
        // promises
        _this.promise.catch(function () {}); // Some of our callbacks don't expect a value and our own tests
        // assert that the parameter length is 1


        if (callback.length === 1) {
          callback(error);
        } else {
          callback(error, value);
        }
      }
    };
  };

  return Deferred;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns navigator.userAgent string or '' if it's not defined.
 * @return user agent string
 */


function getUA() {
  if (typeof navigator !== 'undefined' && typeof navigator['userAgent'] === 'string') {
    return navigator['userAgent'];
  } else {
    return '';
  }
}
/**
 * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
 *
 * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap
 * in the Ripple emulator) nor Cordova `onDeviceReady`, which would normally
 * wait for a callback.
 */


function isMobileCordova() {
  return typeof window !== 'undefined' && // @ts-ignore Setting up an broadly applicable index signature for Window
  // just to deal with this case would probably be a bad idea.
  !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA());
}
/**
 * Detect Node.js.
 *
 * @return true if Node.js environment is detected.
 */
// Node detection logic from: https://github.com/iliakan/detect-node/


function isNode() {
  try {
    return Object.prototype.toString.call(global.process) === '[object process]';
  } catch (e) {
    return false;
  }
}
/**
 * Detect Browser Environment
 */


function isBrowser() {
  return typeof self === 'object' && self.self === self;
}
/**
 * Detect React Native.
 *
 * @return true if ReactNative environment is detected.
 */


function isReactNative() {
  return typeof navigator === 'object' && navigator['product'] === 'ReactNative';
}
/**
 * Detect whether the current SDK build is the Node version.
 *
 * @return true if it's the Node SDK build.
 */


function isNodeSdk() {
  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var ERROR_NAME = 'FirebaseError'; // Based on code from:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types

var FirebaseError =
/** @class */
function (_super) {
  tslib_1.__extends(FirebaseError, _super);

  function FirebaseError(code, message) {
    var _this = _super.call(this, message) || this;

    _this.code = code;
    _this.name = ERROR_NAME; // Fix For ES5
    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work

    Object.setPrototypeOf(_this, FirebaseError.prototype); // Maintains proper stack trace for where our error was thrown.
    // Only available on V8.

    if (Error.captureStackTrace) {
      Error.captureStackTrace(_this, ErrorFactory.prototype.create);
    }

    return _this;
  }

  return FirebaseError;
}(Error);

var ErrorFactory =
/** @class */
function () {
  function ErrorFactory(service, serviceName, errors) {
    this.service = service;
    this.serviceName = serviceName;
    this.errors = errors;
  }

  ErrorFactory.prototype.create = function (code) {
    var data = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      data[_i - 1] = arguments[_i];
    }

    var customData = data[0] || {};
    var fullCode = this.service + "/" + code;
    var template = this.errors[code];
    var message = template ? replaceTemplate(template, customData) : 'Error'; // Service Name: Error message (service/code).

    var fullMessage = this.serviceName + ": " + message + " (" + fullCode + ").";
    var error = new FirebaseError(fullCode, fullMessage); // Keys with an underscore at the end of their name are not included in
    // error.data for some reason.
    // TODO: Replace with Object.entries when lib is updated to es2017.

    for (var _a = 0, _b = Object.keys(customData); _a < _b.length; _a++) {
      var key = _b[_a];

      if (key.slice(-1) !== '_') {
        if (key in error) {
          console.warn("Overwriting FirebaseError base field \"" + key + "\" can cause unexpected behavior.");
        }

        error[key] = customData[key];
      }
    }

    return error;
  };

  return ErrorFactory;
}();

function replaceTemplate(template, data) {
  return template.replace(PATTERN, function (_, key) {
    var value = data[key];
    return value != null ? value.toString() : "<" + key + "?>";
  });
}

var PATTERN = /\{\$([^}]+)}/g;
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Evaluates a JSON string into a javascript object.
 *
 * @param {string} str A string containing JSON.
 * @return {*} The javascript object representing the specified JSON.
 */

function jsonEval(str) {
  return JSON.parse(str);
}
/**
 * Returns JSON representing a javascript object.
 * @param {*} data Javascript object to be stringified.
 * @return {string} The JSON contents of the object.
 */


function stringify(data) {
  return JSON.stringify(data);
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Decodes a Firebase auth. token into constituent parts.
 *
 * Notes:
 * - May return with invalid / incomplete claims if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */


var decode = function (token) {
  var header = {},
      claims = {},
      data = {},
      signature = '';

  try {
    var parts = token.split('.');
    header = jsonEval(base64Decode(parts[0]) || '');
    claims = jsonEval(base64Decode(parts[1]) || '');
    signature = parts[2];
    data = claims['d'] || {};
    delete claims['d'];
  } catch (e) {}

  return {
    header: header,
    claims: claims,
    data: data,
    signature: signature
  };
};
/**
 * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the
 * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */


var isValidTimestamp = function (token) {
  var claims = decode(token).claims;
  var now = Math.floor(new Date().getTime() / 1000);
  var validSince = 0,
      validUntil = 0;

  if (typeof claims === 'object') {
    if (claims.hasOwnProperty('nbf')) {
      validSince = claims['nbf'];
    } else if (claims.hasOwnProperty('iat')) {
      validSince = claims['iat'];
    }

    if (claims.hasOwnProperty('exp')) {
      validUntil = claims['exp'];
    } else {
      // token will expire after 24h by default
      validUntil = validSince + 86400;
    }
  }

  return !!now && !!validSince && !!validUntil && now >= validSince && now <= validUntil;
};
/**
 * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.
 *
 * Notes:
 * - May return null if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */


var issuedAtTime = function (token) {
  var claims = decode(token).claims;

  if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {
    return claims['iat'];
  }

  return null;
};
/**
 * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */


var isValidFormat = function (token) {
  var decoded = decode(token),
      claims = decoded.claims;
  return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');
};
/**
 * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 */


var isAdmin = function (token) {
  var claims = decode(token).claims;
  return typeof claims === 'object' && claims['admin'] === true;
};
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// See http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/


var contains = function (obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};

var safeGet = function (obj, key) {
  if (Object.prototype.hasOwnProperty.call(obj, key)) return obj[key]; // else return undefined.
};
/**
 * Enumerates the keys/values in an object, excluding keys defined on the prototype.
 *
 * @param {?Object.<K,V>} obj Object to enumerate.
 * @param {!function(K, V)} fn Function to call for each key and value.
 * @template K,V
 */


var forEach = function (obj, fn) {
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      fn(key, obj[key]);
    }
  }
};
/**
 * Copies all the (own) properties from one object to another.
 * @param {!Object} objTo
 * @param {!Object} objFrom
 * @return {!Object} objTo
 */


var extend = function (objTo, objFrom) {
  forEach(objFrom, function (key, value) {
    objTo[key] = value;
  });
  return objTo;
};
/**
 * Returns a clone of the specified object.
 * @param {!Object} obj
 * @return {!Object} cloned obj.
 */


var clone = function (obj) {
  return extend({}, obj);
};
/**
 * Returns true if obj has typeof "object" and is not null.  Unlike goog.isObject(), does not return true
 * for functions.
 */


var isNonNullObject = function (obj) {
  return typeof obj === 'object' && obj !== null;
};

var isEmpty = function (obj) {
  for (var key in obj) {
    return false;
  }

  return true;
};

var getCount = function (obj) {
  var rv = 0;

  for (var key in obj) {
    rv++;
  }

  return rv;
};

var map = function (obj, fn, context) {
  var res = {};

  for (var key in obj) {
    res[key] = fn.call(context, obj[key], key, obj);
  }

  return res;
};

var findKey = function (obj, fn, context) {
  for (var key in obj) {
    if (fn.call(context, obj[key], key, obj)) {
      return key;
    }
  }

  return undefined;
};

var findValue = function (obj, fn, context) {
  var key = findKey(obj, fn, context);
  return key && obj[key];
};

var getAnyKey = function (obj) {
  for (var key in obj) {
    return key;
  }
};

var getValues = function (obj) {
  var res = [];
  var i = 0;

  for (var key in obj) {
    res[i++] = obj[key];
  }

  return res;
};
/**
 * Tests whether every key/value pair in an object pass the test implemented
 * by the provided function
 *
 * @param {?Object.<K,V>} obj Object to test.
 * @param {!function(K, V)} fn Function to call for each key and value.
 * @template K,V
 */


var every = function (obj, fn) {
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      if (!fn(key, obj[key])) {
        return false;
      }
    }
  }

  return true;
};
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a params
 * object (e.g. {arg: 'val', arg2: 'val2'})
 * Note: You must prepend it with ? when adding it to a URL.
 */


var querystring = function (querystringParams) {
  var params = [];
  forEach(querystringParams, function (key, value) {
    if (Array.isArray(value)) {
      value.forEach(function (arrayVal) {
        params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
      });
    } else {
      params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
    }
  });
  return params.length ? '&' + params.join('&') : '';
};
/**
 * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object (e.g. {arg: 'val', arg2: 'val2'})
 *
 * @param {string} querystring
 * @return {!Object}
 */


var querystringDecode = function (querystring) {
  var obj = {};
  var tokens = querystring.replace(/^\?/, '').split('&');
  tokens.forEach(function (token) {
    if (token) {
      var key = token.split('=');
      obj[key[0]] = key[1];
    }
  });
  return obj;
};
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * @fileoverview SHA-1 cryptographic hash.
 * Variable names follow the notation in FIPS PUB 180-3:
 * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
 *
 * Usage:
 *   var sha1 = new sha1();
 *   sha1.update(bytes);
 *   var hash = sha1.digest();
 *
 * Performance:
 *   Chrome 23:   ~400 Mbit/s
 *   Firefox 16:  ~250 Mbit/s
 *
 */

/**
 * SHA-1 cryptographic hash constructor.
 *
 * The properties declared here are discussed in the above algorithm document.
 * @constructor
 * @final
 * @struct
 */


var Sha1 =
/** @class */
function () {
  function Sha1() {
    /**
     * Holds the previous values of accumulated variables a-e in the compress_
     * function.
     * @private
     */
    this.chain_ = [];
    /**
     * A buffer holding the partially computed hash result.
     * @private
     */

    this.buf_ = [];
    /**
     * An array of 80 bytes, each a part of the message to be hashed.  Referred to
     * as the message schedule in the docs.
     * @private
     */

    this.W_ = [];
    /**
     * Contains data needed to pad messages less than 64 bytes.
     * @private
     */

    this.pad_ = [];
    /**
     * @private {number}
     */

    this.inbuf_ = 0;
    /**
     * @private {number}
     */

    this.total_ = 0;
    this.blockSize = 512 / 8;
    this.pad_[0] = 128;

    for (var i = 1; i < this.blockSize; ++i) {
      this.pad_[i] = 0;
    }

    this.reset();
  }

  Sha1.prototype.reset = function () {
    this.chain_[0] = 0x67452301;
    this.chain_[1] = 0xefcdab89;
    this.chain_[2] = 0x98badcfe;
    this.chain_[3] = 0x10325476;
    this.chain_[4] = 0xc3d2e1f0;
    this.inbuf_ = 0;
    this.total_ = 0;
  };
  /**
   * Internal compress helper function.
   * @param buf Block to compress.
   * @param offset Offset of the block in the buffer.
   * @private
   */


  Sha1.prototype.compress_ = function (buf, offset) {
    if (!offset) {
      offset = 0;
    }

    var W = this.W_; // get 16 big endian words

    if (typeof buf === 'string') {
      for (var i = 0; i < 16; i++) {
        // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
        // have a bug that turns the post-increment ++ operator into pre-increment
        // during JIT compilation.  We have code that depends heavily on SHA-1 for
        // correctness and which is affected by this bug, so I've removed all uses
        // of post-increment ++ in which the result value is used.  We can revert
        // this change once the Safari bug
        // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
        // most clients have been updated.
        W[i] = buf.charCodeAt(offset) << 24 | buf.charCodeAt(offset + 1) << 16 | buf.charCodeAt(offset + 2) << 8 | buf.charCodeAt(offset + 3);
        offset += 4;
      }
    } else {
      for (var i = 0; i < 16; i++) {
        W[i] = buf[offset] << 24 | buf[offset + 1] << 16 | buf[offset + 2] << 8 | buf[offset + 3];
        offset += 4;
      }
    } // expand to 80 words


    for (var i = 16; i < 80; i++) {
      var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
      W[i] = (t << 1 | t >>> 31) & 0xffffffff;
    }

    var a = this.chain_[0];
    var b = this.chain_[1];
    var c = this.chain_[2];
    var d = this.chain_[3];
    var e = this.chain_[4];
    var f, k; // TODO(user): Try to unroll this loop to speed up the computation.

    for (var i = 0; i < 80; i++) {
      if (i < 40) {
        if (i < 20) {
          f = d ^ b & (c ^ d);
          k = 0x5a827999;
        } else {
          f = b ^ c ^ d;
          k = 0x6ed9eba1;
        }
      } else {
        if (i < 60) {
          f = b & c | d & (b | c);
          k = 0x8f1bbcdc;
        } else {
          f = b ^ c ^ d;
          k = 0xca62c1d6;
        }
      }

      var t = (a << 5 | a >>> 27) + f + e + k + W[i] & 0xffffffff;
      e = d;
      d = c;
      c = (b << 30 | b >>> 2) & 0xffffffff;
      b = a;
      a = t;
    }

    this.chain_[0] = this.chain_[0] + a & 0xffffffff;
    this.chain_[1] = this.chain_[1] + b & 0xffffffff;
    this.chain_[2] = this.chain_[2] + c & 0xffffffff;
    this.chain_[3] = this.chain_[3] + d & 0xffffffff;
    this.chain_[4] = this.chain_[4] + e & 0xffffffff;
  };

  Sha1.prototype.update = function (bytes, length) {
    // TODO(johnlenz): tighten the function signature and remove this check
    if (bytes == null) {
      return;
    }

    if (length === undefined) {
      length = bytes.length;
    }

    var lengthMinusBlock = length - this.blockSize;
    var n = 0; // Using local instead of member variables gives ~5% speedup on Firefox 16.

    var buf = this.buf_;
    var inbuf = this.inbuf_; // The outer while loop should execute at most twice.

    while (n < length) {
      // When we have no data in the block to top up, we can directly process the
      // input buffer (assuming it contains sufficient data). This gives ~25%
      // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
      // the data is provided in large chunks (or in multiples of 64 bytes).
      if (inbuf === 0) {
        while (n <= lengthMinusBlock) {
          this.compress_(bytes, n);
          n += this.blockSize;
        }
      }

      if (typeof bytes === 'string') {
        while (n < length) {
          buf[inbuf] = bytes.charCodeAt(n);
          ++inbuf;
          ++n;

          if (inbuf === this.blockSize) {
            this.compress_(buf);
            inbuf = 0; // Jump to the outer loop so we use the full-block optimization.

            break;
          }
        }
      } else {
        while (n < length) {
          buf[inbuf] = bytes[n];
          ++inbuf;
          ++n;

          if (inbuf === this.blockSize) {
            this.compress_(buf);
            inbuf = 0; // Jump to the outer loop so we use the full-block optimization.

            break;
          }
        }
      }
    }

    this.inbuf_ = inbuf;
    this.total_ += length;
  };
  /** @override */


  Sha1.prototype.digest = function () {
    var digest = [];
    var totalBits = this.total_ * 8; // Add pad 0x80 0x00*.

    if (this.inbuf_ < 56) {
      this.update(this.pad_, 56 - this.inbuf_);
    } else {
      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
    } // Add # bits.


    for (var i = this.blockSize - 1; i >= 56; i--) {
      this.buf_[i] = totalBits & 255;
      totalBits /= 256; // Don't use bit-shifting here!
    }

    this.compress_(this.buf_);
    var n = 0;

    for (var i = 0; i < 5; i++) {
      for (var j = 24; j >= 0; j -= 8) {
        digest[n] = this.chain_[i] >> j & 255;
        ++n;
      }
    }

    return digest;
  };

  return Sha1;
}();
/**
 * Helper to make a Subscribe function (just like Promise helps make a
 * Thenable).
 *
 * @param executor Function which can make calls to a single Observer
 *     as a proxy.
 * @param onNoObservers Callback when count of Observers goes to zero.
 */


function createSubscribe(executor, onNoObservers) {
  var proxy = new ObserverProxy(executor, onNoObservers);
  return proxy.subscribe.bind(proxy);
}
/**
 * Implement fan-out for any number of Observers attached via a subscribe
 * function.
 */


var ObserverProxy =
/** @class */
function () {
  /**
   * @param executor Function which can make calls to a single Observer
   *     as a proxy.
   * @param onNoObservers Callback when count of Observers goes to zero.
   */
  function ObserverProxy(executor, onNoObservers) {
    var _this = this;

    this.observers = [];
    this.unsubscribes = [];
    this.observerCount = 0; // Micro-task scheduling by calling task.then().

    this.task = Promise.resolve();
    this.finalized = false;
    this.onNoObservers = onNoObservers; // Call the executor asynchronously so subscribers that are called
    // synchronously after the creation of the subscribe function
    // can still receive the very first value generated in the executor.

    this.task.then(function () {
      executor(_this);
    }).catch(function (e) {
      _this.error(e);
    });
  }

  ObserverProxy.prototype.next = function (value) {
    this.forEachObserver(function (observer) {
      observer.next(value);
    });
  };

  ObserverProxy.prototype.error = function (error) {
    this.forEachObserver(function (observer) {
      observer.error(error);
    });
    this.close(error);
  };

  ObserverProxy.prototype.complete = function () {
    this.forEachObserver(function (observer) {
      observer.complete();
    });
    this.close();
  };
  /**
   * Subscribe function that can be used to add an Observer to the fan-out list.
   *
   * - We require that no event is sent to a subscriber sychronously to their
   *   call to subscribe().
   */


  ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {
    var _this = this;

    var observer;

    if (nextOrObserver === undefined && error === undefined && complete === undefined) {
      throw new Error('Missing Observer.');
    } // Assemble an Observer object when passed as callback functions.


    if (implementsAnyMethods(nextOrObserver, ['next', 'error', 'complete'])) {
      observer = nextOrObserver;
    } else {
      observer = {
        next: nextOrObserver,
        error: error,
        complete: complete
      };
    }

    if (observer.next === undefined) {
      observer.next = noop;
    }

    if (observer.error === undefined) {
      observer.error = noop;
    }

    if (observer.complete === undefined) {
      observer.complete = noop;
    }

    var unsub = this.unsubscribeOne.bind(this, this.observers.length); // Attempt to subscribe to a terminated Observable - we
    // just respond to the Observer with the final error or complete
    // event.

    if (this.finalized) {
      // tslint:disable-next-line:no-floating-promises
      this.task.then(function () {
        try {
          if (_this.finalError) {
            observer.error(_this.finalError);
          } else {
            observer.complete();
          }
        } catch (e) {// nothing
        }

        return;
      });
    }

    this.observers.push(observer);
    return unsub;
  }; // Unsubscribe is synchronous - we guarantee that no events are sent to
  // any unsubscribed Observer.


  ObserverProxy.prototype.unsubscribeOne = function (i) {
    if (this.observers === undefined || this.observers[i] === undefined) {
      return;
    }

    delete this.observers[i];
    this.observerCount -= 1;

    if (this.observerCount === 0 && this.onNoObservers !== undefined) {
      this.onNoObservers(this);
    }
  };

  ObserverProxy.prototype.forEachObserver = function (fn) {
    if (this.finalized) {
      // Already closed by previous event....just eat the additional values.
      return;
    } // Since sendOne calls asynchronously - there is no chance that
    // this.observers will become undefined.


    for (var i = 0; i < this.observers.length; i++) {
      this.sendOne(i, fn);
    }
  }; // Call the Observer via one of it's callback function. We are careful to
  // confirm that the observe has not been unsubscribed since this asynchronous
  // function had been queued.


  ObserverProxy.prototype.sendOne = function (i, fn) {
    var _this = this; // Execute the callback asynchronously
    // tslint:disable-next-line:no-floating-promises


    this.task.then(function () {
      if (_this.observers !== undefined && _this.observers[i] !== undefined) {
        try {
          fn(_this.observers[i]);
        } catch (e) {
          // Ignore exceptions raised in Observers or missing methods of an
          // Observer.
          // Log error to console. b/31404806
          if (typeof console !== 'undefined' && console.error) {
            console.error(e);
          }
        }
      }
    });
  };

  ObserverProxy.prototype.close = function (err) {
    var _this = this;

    if (this.finalized) {
      return;
    }

    this.finalized = true;

    if (err !== undefined) {
      this.finalError = err;
    } // Proxy is no longer needed - garbage collect references
    // tslint:disable-next-line:no-floating-promises


    this.task.then(function () {
      _this.observers = undefined;
      _this.onNoObservers = undefined;
    });
  };

  return ObserverProxy;
}();
/** Turn synchronous function into one called asynchronously. */


function async(fn, onError) {
  return function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    Promise.resolve(true).then(function () {
      fn.apply(void 0, args);
    }).catch(function (error) {
      if (onError) {
        onError(error);
      }
    });
  };
}
/**
 * Return true if the object passed in implements any of the named methods.
 */


function implementsAnyMethods(obj, methods) {
  if (typeof obj !== 'object' || obj === null) {
    return false;
  }

  for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
    var method = methods_1[_i];

    if (method in obj && typeof obj[method] === 'function') {
      return true;
    }
  }

  return false;
}

function noop() {} // do nothing

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Check to make sure the appropriate number of arguments are provided for a public function.
 * Throws an error if it fails.
 *
 * @param fnName The function name
 * @param minCount The minimum number of arguments to allow for the function call
 * @param maxCount The maximum number of argument to allow for the function call
 * @param argCount The actual number of arguments provided.
 */


var validateArgCount = function (fnName, minCount, maxCount, argCount) {
  var argError;

  if (argCount < minCount) {
    argError = 'at least ' + minCount;
  } else if (argCount > maxCount) {
    argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
  }

  if (argError) {
    var error = fnName + ' failed: Was called with ' + argCount + (argCount === 1 ? ' argument.' : ' arguments.') + ' Expects ' + argError + '.';
    throw new Error(error);
  }
};
/**
 * Generates a string to prefix an error message about failed argument validation
 *
 * @param fnName The function name
 * @param argumentNumber The index of the argument
 * @param optional Whether or not the argument is optional
 * @return The prefix to add to the error thrown for validation.
 */


function errorPrefix(fnName, argumentNumber, optional) {
  var argName = '';

  switch (argumentNumber) {
    case 1:
      argName = optional ? 'first' : 'First';
      break;

    case 2:
      argName = optional ? 'second' : 'Second';
      break;

    case 3:
      argName = optional ? 'third' : 'Third';
      break;

    case 4:
      argName = optional ? 'fourth' : 'Fourth';
      break;

    default:
      throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');
  }

  var error = fnName + ' failed: ';
  error += argName + ' argument ';
  return error;
}
/**
 * @param fnName
 * @param argumentNumber
 * @param namespace
 * @param optional
 */


function validateNamespace(fnName, argumentNumber, namespace, optional) {
  if (optional && !namespace) {
    return;
  }

  if (typeof namespace !== 'string') {
    //TODO: I should do more validation here. We only allow certain chars in namespaces.
    throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid firebase namespace.');
  }
}

function validateCallback(fnName, argumentNumber, callback, optional) {
  if (optional && !callback) {
    return;
  }

  if (typeof callback !== 'function') {
    throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid function.');
  }
}

function validateContextObject(fnName, argumentNumber, context, optional) {
  if (optional && !context) {
    return;
  }

  if (typeof context !== 'object' || context === null) {
    throw new Error(errorPrefix(fnName, argumentNumber, optional) + 'must be a valid context object.');
  }
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
// automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
// so it's been modified.
// Note that not all Unicode characters appear as single characters in JavaScript strings.
// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first
// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
// pair).
// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3

/**
 * @param {string} str
 * @return {Array}
 */


var stringToByteArray$1 = function (str) {
  var out = [];
  var p = 0;

  for (var i = 0; i < str.length; i++) {
    var c = str.charCodeAt(i); // Is this the lead surrogate in a surrogate pair?

    if (c >= 0xd800 && c <= 0xdbff) {
      var high = c - 0xd800; // the high 10 bits.

      i++;
      assert(i < str.length, 'Surrogate pair missing trail surrogate.');
      var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.

      c = 0x10000 + (high << 10) + low;
    }

    if (c < 128) {
      out[p++] = c;
    } else if (c < 2048) {
      out[p++] = c >> 6 | 192;
      out[p++] = c & 63 | 128;
    } else if (c < 65536) {
      out[p++] = c >> 12 | 224;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    } else {
      out[p++] = c >> 18 | 240;
      out[p++] = c >> 12 & 63 | 128;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    }
  }

  return out;
};
/**
 * Calculate length without actually converting; useful for doing cheaper validation.
 * @param {string} str
 * @return {number}
 */


var stringLength = function (str) {
  var p = 0;

  for (var i = 0; i < str.length; i++) {
    var c = str.charCodeAt(i);

    if (c < 128) {
      p++;
    } else if (c < 2048) {
      p += 2;
    } else if (c >= 0xd800 && c <= 0xdbff) {
      // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
      p += 4;
      i++; // skip trail surrogate.
    } else {
      p += 3;
    }
  }

  return p;
};
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


exports.CONSTANTS = CONSTANTS;
exports.Deferred = Deferred;
exports.ErrorFactory = ErrorFactory;
exports.FirebaseError = FirebaseError;
exports.Sha1 = Sha1;
exports.assert = assert;
exports.assertionError = assertionError;
exports.async = async;
exports.base64 = base64;
exports.base64Decode = base64Decode;
exports.base64Encode = base64Encode;
exports.clone = clone;
exports.contains = contains;
exports.createSubscribe = createSubscribe;
exports.decode = decode;
exports.deepCopy = deepCopy;
exports.deepExtend = deepExtend;
exports.errorPrefix = errorPrefix;
exports.every = every;
exports.extend = extend;
exports.findKey = findKey;
exports.findValue = findValue;
exports.forEach = forEach;
exports.getAnyKey = getAnyKey;
exports.getCount = getCount;
exports.getUA = getUA;
exports.getValues = getValues;
exports.isAdmin = isAdmin;
exports.isBrowser = isBrowser;
exports.isEmpty = isEmpty;
exports.isMobileCordova = isMobileCordova;
exports.isNode = isNode;
exports.isNodeSdk = isNodeSdk;
exports.isNonNullObject = isNonNullObject;
exports.isReactNative = isReactNative;
exports.isValidFormat = isValidFormat;
exports.isValidTimestamp = isValidTimestamp;
exports.issuedAtTime = issuedAtTime;
exports.jsonEval = jsonEval;
exports.map = map;
exports.querystring = querystring;
exports.querystringDecode = querystringDecode;
exports.safeGet = safeGet;
exports.stringLength = stringLength;
exports.stringToByteArray = stringToByteArray$1;
exports.stringify = stringify;
exports.validateArgCount = validateArgCount;
exports.validateCallback = validateCallback;
exports.validateContextObject = validateContextObject;
exports.validateNamespace = validateNamespace;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/@firebase/webchannel-wrapper/dist/index.esm.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@firebase/webchannel-wrapper/dist/index.esm.js ***!
  \*********************************************************************/
/*! exports provided: default, ErrorCode, EventType, WebChannel, XhrIo, createWebChannelTransport */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorCode", function() { return tmp_2; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EventType", function() { return tmp_3; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WebChannel", function() { return tmp_4; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "XhrIo", function() { return tmp_5; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createWebChannelTransport", function() { return tmp_1; });
var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};
var g,
    goog = goog || {},
    k = commonjsGlobal;

function m(a) {
  return "string" == typeof a;
}

function aa(a) {
  return "number" == typeof a;
}

function n(a, b) {
  a = a.split(".");
  b = b || k;

  for (var c = 0; c < a.length; c++) if (b = b[a[c]], null == b) return null;

  return b;
}

function ba() {}

function p(a) {
  var b = typeof a;
  if ("object" == b) {
    if (a) {
      if (a instanceof Array) return "array";
      if (a instanceof Object) return b;
      var c = Object.prototype.toString.call(a);
      if ("[object Window]" == c) return "object";
      if ("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) return "array";
      if ("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) return "function";
    } else return "null";
  } else if ("function" == b && "undefined" == typeof a.call) return "object";
  return b;
}

function q(a) {
  return "array" == p(a);
}

function ca(a) {
  var b = p(a);
  return "array" == b || "object" == b && "number" == typeof a.length;
}

function r(a) {
  var b = typeof a;
  return "object" == b && null != a || "function" == b;
}

var t = "closure_uid_" + (1E9 * Math.random() >>> 0),
    da = 0;

function ea(a, b, c) {
  return a.call.apply(a.bind, arguments);
}

function fa(a, b, c) {
  if (!a) throw Error();

  if (2 < arguments.length) {
    var d = Array.prototype.slice.call(arguments, 2);
    return function () {
      var e = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(e, d);
      return a.apply(b, e);
    };
  }

  return function () {
    return a.apply(b, arguments);
  };
}

function u(a, b, c) {
  Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? u = ea : u = fa;
  return u.apply(null, arguments);
}

function v(a, b) {
  var c = Array.prototype.slice.call(arguments, 1);
  return function () {
    var d = c.slice();
    d.push.apply(d, arguments);
    return a.apply(this, d);
  };
}

var w = Date.now || function () {
  return +new Date();
};

function x(a, b) {
  function c() {}

  c.prototype = b.prototype;
  a.N = b.prototype;
  a.prototype = new c();
  a.prototype.constructor = a;

  a.yb = function (d, e, f) {
    for (var h = Array(arguments.length - 2), l = 2; l < arguments.length; l++) h[l - 2] = arguments[l];

    return b.prototype[e].apply(d, h);
  };
}

function y() {
  this.j = this.j;
  this.i = this.i;
}

var ha = 0;
y.prototype.j = !1;

y.prototype.la = function () {
  if (!this.j && (this.j = !0, this.G(), 0 != ha)) {
    var a = this[t] || (this[t] = ++da);
  }
};

y.prototype.G = function () {
  if (this.i) for (; this.i.length;) this.i.shift()();
};

var ja = Array.prototype.indexOf ? function (a, b) {
  return Array.prototype.indexOf.call(a, b, void 0);
} : function (a, b) {
  if (m(a)) return m(b) && 1 == b.length ? a.indexOf(b, 0) : -1;

  for (var c = 0; c < a.length; c++) if (c in a && a[c] === b) return c;

  return -1;
},
    la = Array.prototype.forEach ? function (a, b, c) {
  Array.prototype.forEach.call(a, b, c);
} : function (a, b, c) {
  for (var d = a.length, e = m(a) ? a.split("") : a, f = 0; f < d; f++) f in e && b.call(c, e[f], f, a);
};

function ma(a) {
  a: {
    var b = na;

    for (var c = a.length, d = m(a) ? a.split("") : a, e = 0; e < c; e++) if (e in d && b.call(void 0, d[e], e, a)) {
      b = e;
      break a;
    }

    b = -1;
  }

  return 0 > b ? null : m(a) ? a.charAt(b) : a[b];
}

function oa(a) {
  return Array.prototype.concat.apply([], arguments);
}

function pa(a) {
  var b = a.length;

  if (0 < b) {
    for (var c = Array(b), d = 0; d < b; d++) c[d] = a[d];

    return c;
  }

  return [];
}

function qa(a) {
  return /^[\s\xa0]*$/.test(a);
}

var ra = String.prototype.trim ? function (a) {
  return a.trim();
} : function (a) {
  return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1];
};

function z(a, b) {
  return -1 != a.indexOf(b);
}

function sa(a, b) {
  return a < b ? -1 : a > b ? 1 : 0;
}

var A;

a: {
  var ta = k.navigator;

  if (ta) {
    var ua = ta.userAgent;

    if (ua) {
      A = ua;
      break a;
    }
  }

  A = "";
}

function va(a, b, c) {
  for (var d in a) b.call(c, a[d], d, a);
}

function wa(a) {
  var b = {},
      c;

  for (c in a) b[c] = a[c];

  return b;
}

var xa = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");

function ya(a, b) {
  for (var c, d, e = 1; e < arguments.length; e++) {
    d = arguments[e];

    for (c in d) a[c] = d[c];

    for (var f = 0; f < xa.length; f++) c = xa[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
  }
}

function za(a) {
  za[" "](a);
  return a;
}

za[" "] = ba;

function Aa(a, b) {
  var c = Ba;
  return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a);
}

var Ca = z(A, "Opera"),
    B = z(A, "Trident") || z(A, "MSIE"),
    Da = z(A, "Edge"),
    Ea = Da || B,
    Fa = z(A, "Gecko") && !(z(A.toLowerCase(), "webkit") && !z(A, "Edge")) && !(z(A, "Trident") || z(A, "MSIE")) && !z(A, "Edge"),
    Ga = z(A.toLowerCase(), "webkit") && !z(A, "Edge");

function Ha() {
  var a = k.document;
  return a ? a.documentMode : void 0;
}

var Ia;

a: {
  var Ja = "",
      Ka = function () {
    var a = A;
    if (Fa) return /rv:([^\);]+)(\)|;)/.exec(a);
    if (Da) return /Edge\/([\d\.]+)/.exec(a);
    if (B) return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);
    if (Ga) return /WebKit\/(\S+)/.exec(a);
    if (Ca) return /(?:Version)[ \/]?(\S+)/.exec(a);
  }();

  Ka && (Ja = Ka ? Ka[1] : "");

  if (B) {
    var La = Ha();

    if (null != La && La > parseFloat(Ja)) {
      Ia = String(La);
      break a;
    }
  }

  Ia = Ja;
}

var Ba = {};

function Ma(a) {
  return Aa(a, function () {
    for (var b = 0, c = ra(String(Ia)).split("."), d = ra(String(a)).split("."), e = Math.max(c.length, d.length), f = 0; 0 == b && f < e; f++) {
      var h = c[f] || "",
          l = d[f] || "";

      do {
        h = /(\d*)(\D*)(.*)/.exec(h) || ["", "", "", ""];
        l = /(\d*)(\D*)(.*)/.exec(l) || ["", "", "", ""];
        if (0 == h[0].length && 0 == l[0].length) break;
        b = sa(0 == h[1].length ? 0 : parseInt(h[1], 10), 0 == l[1].length ? 0 : parseInt(l[1], 10)) || sa(0 == h[2].length, 0 == l[2].length) || sa(h[2], l[2]);
        h = h[3];
        l = l[3];
      } while (0 == b);
    }

    return 0 <= b;
  });
}

var Na;
var Oa = k.document;
Na = Oa && B ? Ha() || ("CSS1Compat" == Oa.compatMode ? parseInt(Ia, 10) : 5) : void 0;

var Pa = !B || 9 <= Number(Na),
    Qa = B && !Ma("9"),
    Ra = function () {
  if (!k.addEventListener || !Object.defineProperty) return !1;
  var a = !1,
      b = Object.defineProperty({}, "passive", {
    get: function () {
      a = !0;
    }
  });

  try {
    k.addEventListener("test", ba, b), k.removeEventListener("test", ba, b);
  } catch (c) {}

  return a;
}();

function C(a, b) {
  this.type = a;
  this.a = this.target = b;
  this.Ja = !0;
}

C.prototype.b = function () {
  this.Ja = !1;
};

function D(a, b) {
  C.call(this, a ? a.type : "");
  this.relatedTarget = this.a = this.target = null;
  this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
  this.key = "";
  this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;
  this.pointerId = 0;
  this.pointerType = "";
  this.c = null;

  if (a) {
    var c = this.type = a.type,
        d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
    this.target = a.target || a.srcElement;
    this.a = b;

    if (b = a.relatedTarget) {
      if (Fa) {
        a: {
          try {
            za(b.nodeName);
            var e = !0;
            break a;
          } catch (f) {}

          e = !1;
        }

        e || (b = null);
      }
    } else "mouseover" == c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);

    this.relatedTarget = b;
    d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
    this.button = a.button;
    this.key = a.key || "";
    this.ctrlKey = a.ctrlKey;
    this.altKey = a.altKey;
    this.shiftKey = a.shiftKey;
    this.metaKey = a.metaKey;
    this.pointerId = a.pointerId || 0;
    this.pointerType = m(a.pointerType) ? a.pointerType : Sa[a.pointerType] || "";
    this.c = a;
    a.defaultPrevented && this.b();
  }
}

x(D, C);
var Sa = {
  2: "touch",
  3: "pen",
  4: "mouse"
};

D.prototype.b = function () {
  D.N.b.call(this);
  var a = this.c;
  if (a.preventDefault) a.preventDefault();else if (a.returnValue = !1, Qa) try {
    if (a.ctrlKey || 112 <= a.keyCode && 123 >= a.keyCode) a.keyCode = -1;
  } catch (b) {}
};

var E = "closure_listenable_" + (1E6 * Math.random() | 0),
    Ta = 0;

function Ua(a, b, c, d, e) {
  this.listener = a;
  this.proxy = null;
  this.src = b;
  this.type = c;
  this.capture = !!d;
  this.da = e;
  this.key = ++Ta;
  this.X = this.Z = !1;
}

function Va(a) {
  a.X = !0;
  a.listener = null;
  a.proxy = null;
  a.src = null;
  a.da = null;
}

function Wa(a) {
  this.src = a;
  this.a = {};
  this.b = 0;
}

Wa.prototype.add = function (a, b, c, d, e) {
  var f = a.toString();
  a = this.a[f];
  a || (a = this.a[f] = [], this.b++);
  var h = Xa(a, b, d, e);
  -1 < h ? (b = a[h], c || (b.Z = !1)) : (b = new Ua(b, this.src, f, !!d, e), b.Z = c, a.push(b));
  return b;
};

function Ya(a, b) {
  var c = b.type;

  if (c in a.a) {
    var d = a.a[c],
        e = ja(d, b),
        f;
    (f = 0 <= e) && Array.prototype.splice.call(d, e, 1);
    f && (Va(b), 0 == a.a[c].length && (delete a.a[c], a.b--));
  }
}

function Xa(a, b, c, d) {
  for (var e = 0; e < a.length; ++e) {
    var f = a[e];
    if (!f.X && f.listener == b && f.capture == !!c && f.da == d) return e;
  }

  return -1;
}

var Za = "closure_lm_" + (1E6 * Math.random() | 0),
    $a = {};

function bb(a, b, c, d, e) {
  if (d && d.once) return cb(a, b, c, d, e);

  if (q(b)) {
    for (var f = 0; f < b.length; f++) bb(a, b[f], c, d, e);

    return null;
  }

  c = db(c);
  return a && a[E] ? a.Aa(b, c, r(d) ? !!d.capture : !!d, e) : eb(a, b, c, !1, d, e);
}

function eb(a, b, c, d, e, f) {
  if (!b) throw Error("Invalid event type");
  var h = r(e) ? !!e.capture : !!e;
  if (h && !Pa) return null;
  var l = fb(a);
  l || (a[Za] = l = new Wa(a));
  c = l.add(b, c, d, h, f);
  if (c.proxy) return c;
  d = gb();
  c.proxy = d;
  d.src = a;
  d.listener = c;
  if (a.addEventListener) Ra || (e = h), void 0 === e && (e = !1), a.addEventListener(b.toString(), d, e);else if (a.attachEvent) a.attachEvent(hb(b.toString()), d);else if (a.addListener && a.removeListener) a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");
  return c;
}

function gb() {
  var a = ib,
      b = Pa ? function (c) {
    return a.call(b.src, b.listener, c);
  } : function (c) {
    c = a.call(b.src, b.listener, c);
    if (!c) return c;
  };
  return b;
}

function cb(a, b, c, d, e) {
  if (q(b)) {
    for (var f = 0; f < b.length; f++) cb(a, b[f], c, d, e);

    return null;
  }

  c = db(c);
  return a && a[E] ? a.Ba(b, c, r(d) ? !!d.capture : !!d, e) : eb(a, b, c, !0, d, e);
}

function jb(a, b, c, d, e) {
  if (q(b)) for (var f = 0; f < b.length; f++) jb(a, b[f], c, d, e);else (d = r(d) ? !!d.capture : !!d, c = db(c), a && a[E]) ? (a = a.c, b = String(b).toString(), b in a.a && (f = a.a[b], c = Xa(f, c, d, e), -1 < c && (Va(f[c]), Array.prototype.splice.call(f, c, 1), 0 == f.length && (delete a.a[b], a.b--)))) : a && (a = fb(a)) && (b = a.a[b.toString()], a = -1, b && (a = Xa(b, c, d, e)), (c = -1 < a ? b[a] : null) && kb(c));
}

function kb(a) {
  if (!aa(a) && a && !a.X) {
    var b = a.src;
    if (b && b[E]) Ya(b.c, a);else {
      var c = a.type,
          d = a.proxy;
      b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(hb(c), d) : b.addListener && b.removeListener && b.removeListener(d);
      (c = fb(b)) ? (Ya(c, a), 0 == c.b && (c.src = null, b[Za] = null)) : Va(a);
    }
  }
}

function hb(a) {
  return a in $a ? $a[a] : $a[a] = "on" + a;
}

function lb(a, b) {
  var c = a.listener,
      d = a.da || a.src;
  a.Z && kb(a);
  return c.call(d, b);
}

function ib(a, b) {
  return a.X ? !0 : Pa ? lb(a, new D(b, this)) : (b = new D(b || n("window.event"), this), lb(a, b));
}

function fb(a) {
  a = a[Za];
  return a instanceof Wa ? a : null;
}

var mb = "__closure_events_fn_" + (1E9 * Math.random() >>> 0);

function db(a) {
  if ("function" == p(a)) return a;
  a[mb] || (a[mb] = function (b) {
    return a.handleEvent(b);
  });
  return a[mb];
}

function G() {
  y.call(this);
  this.c = new Wa(this);
  this.J = this;
  this.B = null;
}

x(G, y);
G.prototype[E] = !0;
g = G.prototype;

g.addEventListener = function (a, b, c, d) {
  bb(this, a, b, c, d);
};

g.removeEventListener = function (a, b, c, d) {
  jb(this, a, b, c, d);
};

g.dispatchEvent = function (a) {
  var b,
      c = this.B;
  if (c) for (b = []; c; c = c.B) b.push(c);
  c = this.J;
  var d = a.type || a;
  if (m(a)) a = new C(a, c);else if (a instanceof C) a.target = a.target || c;else {
    var e = a;
    a = new C(d, c);
    ya(a, e);
  }
  e = !0;
  if (b) for (var f = b.length - 1; 0 <= f; f--) {
    var h = a.a = b[f];
    e = nb(h, d, !0, a) && e;
  }
  h = a.a = c;
  e = nb(h, d, !0, a) && e;
  e = nb(h, d, !1, a) && e;
  if (b) for (f = 0; f < b.length; f++) h = a.a = b[f], e = nb(h, d, !1, a) && e;
  return e;
};

g.G = function () {
  G.N.G.call(this);

  if (this.c) {
    var a = this.c,
        c;

    for (c in a.a) {
      for (var d = a.a[c], e = 0; e < d.length; e++) Va(d[e]);

      delete a.a[c];
      a.b--;
    }
  }

  this.B = null;
};

g.Aa = function (a, b, c, d) {
  return this.c.add(String(a), b, !1, c, d);
};

g.Ba = function (a, b, c, d) {
  return this.c.add(String(a), b, !0, c, d);
};

function nb(a, b, c, d) {
  b = a.c.a[String(b)];
  if (!b) return !0;
  b = b.concat();

  for (var e = !0, f = 0; f < b.length; ++f) {
    var h = b[f];

    if (h && !h.X && h.capture == c) {
      var l = h.listener,
          F = h.da || h.src;
      h.Z && Ya(a.c, h);
      e = !1 !== l.call(F, d) && e;
    }
  }

  return e && 0 != d.Ja;
}

var ob = k.JSON.stringify;

function pb(a, b) {
  this.c = a;
  this.f = b;
  this.b = 0;
  this.a = null;
}

pb.prototype.get = function () {
  if (0 < this.b) {
    this.b--;
    var a = this.a;
    this.a = a.next;
    a.next = null;
  } else a = this.c();

  return a;
};

function qb() {
  this.b = this.a = null;
}

var sb = new pb(function () {
  return new rb();
}, function (a) {
  a.reset();
});

qb.prototype.add = function (a, b) {
  var c = sb.get();
  c.set(a, b);
  this.b ? this.b.next = c : this.a = c;
  this.b = c;
};

function tb() {
  var a = ub,
      b = null;
  a.a && (b = a.a, a.a = a.a.next, a.a || (a.b = null), b.next = null);
  return b;
}

function rb() {
  this.next = this.b = this.a = null;
}

rb.prototype.set = function (a, b) {
  this.a = a;
  this.b = b;
  this.next = null;
};

rb.prototype.reset = function () {
  this.next = this.b = this.a = null;
};

function vb(a) {
  k.setTimeout(function () {
    throw a;
  }, 0);
}

function wb(a, b) {
  xb || yb();
  zb || (xb(), zb = !0);
  ub.add(a, b);
}

var xb;

function yb() {
  var a = k.Promise.resolve(void 0);

  xb = function () {
    a.then(Ab);
  };
}

var zb = !1,
    ub = new qb();

function Ab() {
  for (var a; a = tb();) {
    try {
      a.a.call(a.b);
    } catch (c) {
      vb(c);
    }

    var b = sb;
    b.f(a);
    100 > b.b && (b.b++, a.next = b.a, b.a = a);
  }

  zb = !1;
}

function Cb(a, b) {
  G.call(this);
  this.b = a || 1;
  this.a = b || k;
  this.f = u(this.gb, this);
  this.g = w();
}

x(Cb, G);
g = Cb.prototype;
g.ba = !1;
g.L = null;

g.gb = function () {
  if (this.ba) {
    var a = w() - this.g;
    0 < a && a < .8 * this.b ? this.L = this.a.setTimeout(this.f, this.b - a) : (this.L && (this.a.clearTimeout(this.L), this.L = null), this.dispatchEvent("tick"), this.ba && (Db(this), this.start()));
  }
};

g.start = function () {
  this.ba = !0;
  this.L || (this.L = this.a.setTimeout(this.f, this.b), this.g = w());
};

function Db(a) {
  a.ba = !1;
  a.L && (a.a.clearTimeout(a.L), a.L = null);
}

g.G = function () {
  Cb.N.G.call(this);
  Db(this);
  delete this.a;
};

function Eb(a, b, c) {
  if ("function" == p(a)) c && (a = u(a, c));else if (a && "function" == typeof a.handleEvent) a = u(a.handleEvent, a);else throw Error("Invalid listener argument");
  return 2147483647 < Number(b) ? -1 : k.setTimeout(a, b || 0);
}

function Fb(a, b, c) {
  y.call(this);
  this.f = null != c ? u(a, c) : a;
  this.c = b;
  this.b = u(this.ab, this);
  this.a = [];
}

x(Fb, y);
g = Fb.prototype;
g.ea = !1;
g.U = null;

g.Ua = function (a) {
  this.a = arguments;
  this.U ? this.ea = !0 : Gb(this);
};

g.G = function () {
  Fb.N.G.call(this);
  this.U && (k.clearTimeout(this.U), this.U = null, this.ea = !1, this.a = []);
};

g.ab = function () {
  this.U = null;
  this.ea && (this.ea = !1, Gb(this));
};

function Gb(a) {
  a.U = Eb(a.b, a.c);
  a.f.apply(null, a.a);
}

function H(a) {
  y.call(this);
  this.b = a;
  this.a = {};
}

x(H, y);
var Hb = [];

function Ib(a, b, c, d) {
  q(c) || (c && (Hb[0] = c.toString()), c = Hb);

  for (var e = 0; e < c.length; e++) {
    var f = bb(b, c[e], d || a.handleEvent, !1, a.b || a);
    if (!f) break;
    a.a[f.key] = f;
  }
}

function Jb(a) {
  va(a.a, function (b, c) {
    this.a.hasOwnProperty(c) && kb(b);
  }, a);
  a.a = {};
}

H.prototype.G = function () {
  H.N.G.call(this);
  Jb(this);
};

H.prototype.handleEvent = function () {
  throw Error("EventHandler.handleEvent not implemented");
};

function Kb() {}

var I = new G();

function Lb(a) {
  C.call(this, "serverreachability", a);
}

x(Lb, C);

function J(a) {
  I.dispatchEvent(new Lb(I, a));
}

function Mb(a) {
  C.call(this, "statevent", a);
}

x(Mb, C);

function K(a) {
  I.dispatchEvent(new Mb(I, a));
}

function Nb(a) {
  C.call(this, "timingevent", a);
}

x(Nb, C);

function Ob(a, b) {
  if ("function" != p(a)) throw Error("Fn must not be null and must be a function");
  return k.setTimeout(function () {
    a();
  }, b);
}

var Pb = {
  NO_ERROR: 0,
  hb: 1,
  ob: 2,
  nb: 3,
  kb: 4,
  mb: 5,
  pb: 6,
  Ma: 7,
  TIMEOUT: 8,
  sb: 9
};
var Qb = {
  jb: "complete",
  wb: "success",
  Na: "error",
  Ma: "abort",
  ub: "ready",
  vb: "readystatechange",
  TIMEOUT: "timeout",
  qb: "incrementaldata",
  tb: "progress",
  lb: "downloadprogress",
  xb: "uploadprogress"
};

function Rb() {}

Rb.prototype.a = null;

function Sb(a) {
  var b;
  (b = a.a) || (b = a.a = {});
  return b;
}

function Tb() {}

var L = {
  OPEN: "a",
  ib: "b",
  Na: "c",
  rb: "d"
};

function Ub() {
  C.call(this, "d");
}

x(Ub, C);

function Vb() {
  C.call(this, "c");
}

x(Vb, C);
var Wb;

function Xb() {}

x(Xb, Rb);
Wb = new Xb();

function M(a, b, c) {
  this.g = a;
  this.W = b;
  this.V = c || 1;
  this.I = new H(this);
  this.O = Yb;
  a = Ea ? 125 : void 0;
  this.P = new Cb(a);
  this.h = null;
  this.b = !1;
  this.l = this.D = this.f = this.F = this.v = this.R = this.i = null;
  this.j = [];
  this.a = null;
  this.A = 0;
  this.c = this.w = null;
  this.o = -1;
  this.m = !1;
  this.J = 0;
  this.B = null;
  this.s = this.S = this.H = !1;
}

var Yb = 45E3,
    Zb = {},
    $b = {};
g = M.prototype;

g.setTimeout = function (a) {
  this.O = a;
};

function ac(a, b, c) {
  a.F = 1;
  a.f = bc(N(b));
  a.l = c;
  a.H = !0;
  cc(a, null);
}

function dc(a, b, c, d) {
  a.F = 1;
  a.f = bc(N(b));
  a.l = null;
  a.H = c;
  cc(a, d);
}

function cc(a, b) {
  a.v = w();
  ec(a);
  a.D = N(a.f);
  fc(a.D, "t", a.V);
  a.A = 0;
  a.a = a.g.$(a.g.Y() ? b : null);
  0 < a.J && (a.B = new Fb(u(a.Ka, a, a.a), a.J));
  Ib(a.I, a.a, "readystatechange", a.eb);
  b = a.h ? wa(a.h) : {};
  a.l ? (a.w || (a.w = "POST"), b["Content-Type"] = "application/x-www-form-urlencoded", a.a.ca(a.D, a.w, a.l, b)) : (a.w = "GET", a.a.ca(a.D, a.w, null, b));
  J(1);
}

g.eb = function (a) {
  a = a.target;
  var b = this.B;
  b && 3 == O(a) ? b.Ua() : this.Ka(a);
};

g.Ka = function (a) {
  try {
    if (a == this.a) a: {
      var b = O(this.a),
          c = this.a.ya(),
          d = this.a.T();

      if (!(3 > b || 3 == b && !Ea && !this.a.aa())) {
        this.m || 4 != b || 7 == c || (8 == c || 0 >= d ? J(3) : J(2));
        gc(this);
        var e = this.a.T();
        this.o = e;
        var f = this.a.aa();

        if (this.b = 200 == e) {
          if (this.S && !this.s) {
            b: {
              if (this.a) {
                var h = hc(this.a, "X-HTTP-Initial-Response");

                if (h && !qa(h)) {
                  var l = h;
                  break b;
                }
              }

              l = null;
            }

            if (l) this.s = !0, ic(this, l);else {
              this.b = !1;
              this.c = 3;
              K(12);
              P(this);
              jc(this);
              break a;
            }
          }

          this.H ? (kc(this, b, f), Ea && this.b && 3 == b && (Ib(this.I, this.P, "tick", this.cb), this.P.start())) : ic(this, f);
          4 == b && P(this);
          this.b && !this.m && (4 == b ? this.g.na(this) : (this.b = !1, ec(this)));
        } else 400 == e && 0 < f.indexOf("Unknown SID") ? (this.c = 3, K(12)) : (this.c = 0, K(13)), P(this), jc(this);
      }
    }
  } catch (F) {} finally {}
};

function kc(a, b, c) {
  for (var d = !0; !a.m && a.A < c.length;) {
    var e = lc(a, c);

    if (e == $b) {
      4 == b && (a.c = 4, K(14), d = !1);
      break;
    } else if (e == Zb) {
      a.c = 4;
      K(15);
      d = !1;
      break;
    } else ic(a, e);
  }

  4 == b && 0 == c.length && (a.c = 1, K(16), d = !1);
  a.b = a.b && d;
  d || (P(a), jc(a));
}

g.cb = function () {
  if (this.a) {
    var a = O(this.a),
        b = this.a.aa();
    this.A < b.length && (gc(this), kc(this, a, b), this.b && 4 != a && ec(this));
  }
};

function lc(a, b) {
  var c = a.A,
      d = b.indexOf("\n", c);
  if (-1 == d) return $b;
  c = Number(b.substring(c, d));
  if (isNaN(c)) return Zb;
  d += 1;
  if (d + c > b.length) return $b;
  b = b.substr(d, c);
  a.A = d + c;
  return b;
}

g.cancel = function () {
  this.m = !0;
  P(this);
};

function ec(a) {
  a.R = w() + a.O;
  mc(a, a.O);
}

function mc(a, b) {
  if (null != a.i) throw Error("WatchDog timer not null");
  a.i = Ob(u(a.bb, a), b);
}

function gc(a) {
  a.i && (k.clearTimeout(a.i), a.i = null);
}

g.bb = function () {
  this.i = null;
  var a = w();
  0 <= a - this.R ? (2 != this.F && (J(3), K(17)), P(this), this.c = 2, jc(this)) : mc(this, this.R - a);
};

function jc(a) {
  a.g.Da() || a.m || a.g.na(a);
}

function P(a) {
  gc(a);
  var b = a.B;
  b && "function" == typeof b.la && b.la();
  a.B = null;
  Db(a.P);
  Jb(a.I);
  a.a && (b = a.a, a.a = null, b.abort(), b.la());
}

function ic(a, b) {
  try {
    a.g.Ga(a, b), J(4);
  } catch (c) {}
}

function nc(a) {
  if (a.C && "function" == typeof a.C) return a.C();
  if (m(a)) return a.split("");

  if (ca(a)) {
    for (var b = [], c = a.length, d = 0; d < c; d++) b.push(a[d]);

    return b;
  }

  b = [];
  c = 0;

  for (d in a) b[c++] = a[d];

  return b;
}

function oc(a, b) {
  if (a.forEach && "function" == typeof a.forEach) a.forEach(b, void 0);else if (ca(a) || m(a)) la(a, b, void 0);else {
    if (a.K && "function" == typeof a.K) var c = a.K();else if (a.C && "function" == typeof a.C) c = void 0;else if (ca(a) || m(a)) {
      c = [];

      for (var d = a.length, e = 0; e < d; e++) c.push(e);
    } else for (e in c = [], d = 0, a) c[d++] = e;
    d = nc(a);
    e = d.length;

    for (var f = 0; f < e; f++) b.call(void 0, d[f], c && c[f], a);
  }
}

function Q(a, b) {
  this.b = {};
  this.a = [];
  this.c = 0;
  var c = arguments.length;

  if (1 < c) {
    if (c % 2) throw Error("Uneven number of arguments");

    for (var d = 0; d < c; d += 2) this.set(arguments[d], arguments[d + 1]);
  } else if (a) if (a instanceof Q) for (c = a.K(), d = 0; d < c.length; d++) this.set(c[d], a.get(c[d]));else for (d in a) this.set(d, a[d]);
}

g = Q.prototype;

g.C = function () {
  pc(this);

  for (var a = [], b = 0; b < this.a.length; b++) a.push(this.b[this.a[b]]);

  return a;
};

g.K = function () {
  pc(this);
  return this.a.concat();
};

function qc(a) {
  a.b = {};
  a.a.length = 0;
  a.c = 0;
}

function rc(a, b) {
  R(a.b, b) && (delete a.b[b], a.c--, a.a.length > 2 * a.c && pc(a));
}

function pc(a) {
  if (a.c != a.a.length) {
    for (var b = 0, c = 0; b < a.a.length;) {
      var d = a.a[b];
      R(a.b, d) && (a.a[c++] = d);
      b++;
    }

    a.a.length = c;
  }

  if (a.c != a.a.length) {
    var e = {};

    for (c = b = 0; b < a.a.length;) d = a.a[b], R(e, d) || (a.a[c++] = d, e[d] = 1), b++;

    a.a.length = c;
  }
}

g.get = function (a, b) {
  return R(this.b, a) ? this.b[a] : b;
};

g.set = function (a, b) {
  R(this.b, a) || (this.c++, this.a.push(a));
  this.b[a] = b;
};

g.forEach = function (a, b) {
  for (var c = this.K(), d = 0; d < c.length; d++) {
    var e = c[d],
        f = this.get(e);
    a.call(b, f, e, this);
  }
};

function R(a, b) {
  return Object.prototype.hasOwnProperty.call(a, b);
}

var sc = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;

function tc(a, b) {
  if (a) {
    a = a.split("&");

    for (var c = 0; c < a.length; c++) {
      var d = a[c].indexOf("="),
          e = null;

      if (0 <= d) {
        var f = a[c].substring(0, d);
        e = a[c].substring(d + 1);
      } else f = a[c];

      b(f, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
    }
  }
}

function S(a, b) {
  this.b = this.j = this.f = "";
  this.i = null;
  this.g = this.a = "";
  this.h = !1;
  var c;
  a instanceof S ? (this.h = void 0 !== b ? b : a.h, uc(this, a.f), this.j = a.j, vc(this, a.b), wc(this, a.i), this.a = a.a, xc(this, yc(a.c)), this.g = a.g) : a && (c = String(a).match(sc)) ? (this.h = !!b, uc(this, c[1] || "", !0), this.j = zc(c[2] || ""), vc(this, c[3] || "", !0), wc(this, c[4]), this.a = zc(c[5] || "", !0), xc(this, c[6] || "", !0), this.g = zc(c[7] || "")) : (this.h = !!b, this.c = new Ac(null, this.h));
}

S.prototype.toString = function () {
  var a = [],
      b = this.f;
  b && a.push(Bc(b, Cc, !0), ":");
  var c = this.b;
  if (c || "file" == b) a.push("//"), (b = this.j) && a.push(Bc(b, Cc, !0), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.i, null != c && a.push(":", String(c));
  if (c = this.a) this.b && "/" != c.charAt(0) && a.push("/"), a.push(Bc(c, "/" == c.charAt(0) ? Dc : Ec, !0));
  (c = this.c.toString()) && a.push("?", c);
  (c = this.g) && a.push("#", Bc(c, Fc));
  return a.join("");
};

S.prototype.resolve = function (a) {
  var b = N(this),
      c = !!a.f;
  c ? uc(b, a.f) : c = !!a.j;
  c ? b.j = a.j : c = !!a.b;
  c ? vc(b, a.b) : c = null != a.i;
  var d = a.a;
  if (c) wc(b, a.i);else if (c = !!a.a) {
    if ("/" != d.charAt(0)) if (this.b && !this.a) d = "/" + d;else {
      var e = b.a.lastIndexOf("/");
      -1 != e && (d = b.a.substr(0, e + 1) + d);
    }
    e = d;
    if (".." == e || "." == e) d = "";else if (z(e, "./") || z(e, "/.")) {
      d = 0 == e.lastIndexOf("/", 0);
      e = e.split("/");

      for (var f = [], h = 0; h < e.length;) {
        var l = e[h++];
        "." == l ? d && h == e.length && f.push("") : ".." == l ? ((1 < f.length || 1 == f.length && "" != f[0]) && f.pop(), d && h == e.length && f.push("")) : (f.push(l), d = !0);
      }

      d = f.join("/");
    } else d = e;
  }
  c ? b.a = d : c = "" !== a.c.toString();
  c ? xc(b, yc(a.c)) : c = !!a.g;
  c && (b.g = a.g);
  return b;
};

function N(a) {
  return new S(a);
}

function uc(a, b, c) {
  a.f = c ? zc(b, !0) : b;
  a.f && (a.f = a.f.replace(/:$/, ""));
}

function vc(a, b, c) {
  a.b = c ? zc(b, !0) : b;
}

function wc(a, b) {
  if (b) {
    b = Number(b);
    if (isNaN(b) || 0 > b) throw Error("Bad port number " + b);
    a.i = b;
  } else a.i = null;
}

function xc(a, b, c) {
  b instanceof Ac ? (a.c = b, Gc(a.c, a.h)) : (c || (b = Bc(b, Hc)), a.c = new Ac(b, a.h));
}

function T(a, b, c) {
  a.c.set(b, c);
}

function fc(a, b, c) {
  q(c) || (c = [String(c)]);
  Ic(a.c, b, c);
}

function bc(a) {
  T(a, "zx", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ w()).toString(36));
  return a;
}

function Jc(a) {
  return a instanceof S ? N(a) : new S(a, void 0);
}

function Kc(a, b, c, d) {
  var e = new S(null, void 0);
  a && uc(e, a);
  b && vc(e, b);
  c && wc(e, c);
  d && (e.a = d);
  return e;
}

function zc(a, b) {
  return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
}

function Bc(a, b, c) {
  return m(a) ? (a = encodeURI(a).replace(b, Lc), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
}

function Lc(a) {
  a = a.charCodeAt(0);
  return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
}

var Cc = /[#\/\?@]/g,
    Ec = /[#\?:]/g,
    Dc = /[#\?]/g,
    Hc = /[#\?@]/g,
    Fc = /#/g;

function Ac(a, b) {
  this.b = this.a = null;
  this.c = a || null;
  this.f = !!b;
}

function U(a) {
  a.a || (a.a = new Q(), a.b = 0, a.c && tc(a.c, function (b, c) {
    a.add(decodeURIComponent(b.replace(/\+/g, " ")), c);
  }));
}

g = Ac.prototype;

g.add = function (a, b) {
  U(this);
  this.c = null;
  a = V(this, a);
  var c = this.a.get(a);
  c || this.a.set(a, c = []);
  c.push(b);
  this.b += 1;
  return this;
};

function Mc(a, b) {
  U(a);
  b = V(a, b);
  R(a.a.b, b) && (a.c = null, a.b -= a.a.get(b).length, rc(a.a, b));
}

function Nc(a, b) {
  U(a);
  b = V(a, b);
  return R(a.a.b, b);
}

g.forEach = function (a, b) {
  U(this);
  this.a.forEach(function (c, d) {
    la(c, function (e) {
      a.call(b, e, d, this);
    }, this);
  }, this);
};

g.K = function () {
  U(this);

  for (var a = this.a.C(), b = this.a.K(), c = [], d = 0; d < b.length; d++) for (var e = a[d], f = 0; f < e.length; f++) c.push(b[d]);

  return c;
};

g.C = function (a) {
  U(this);
  var b = [];
  if (m(a)) Nc(this, a) && (b = oa(b, this.a.get(V(this, a))));else {
    a = this.a.C();

    for (var c = 0; c < a.length; c++) b = oa(b, a[c]);
  }
  return b;
};

g.set = function (a, b) {
  U(this);
  this.c = null;
  a = V(this, a);
  Nc(this, a) && (this.b -= this.a.get(a).length);
  this.a.set(a, [b]);
  this.b += 1;
  return this;
};

g.get = function (a, b) {
  if (!a) return b;
  a = this.C(a);
  return 0 < a.length ? String(a[0]) : b;
};

function Ic(a, b, c) {
  Mc(a, b);
  0 < c.length && (a.c = null, a.a.set(V(a, b), pa(c)), a.b += c.length);
}

g.toString = function () {
  if (this.c) return this.c;
  if (!this.a) return "";

  for (var a = [], b = this.a.K(), c = 0; c < b.length; c++) {
    var d = b[c],
        e = encodeURIComponent(String(d));
    d = this.C(d);

    for (var f = 0; f < d.length; f++) {
      var h = e;
      "" !== d[f] && (h += "=" + encodeURIComponent(String(d[f])));
      a.push(h);
    }
  }

  return this.c = a.join("&");
};

function yc(a) {
  var b = new Ac();
  b.c = a.c;
  a.a && (b.a = new Q(a.a), b.b = a.b);
  return b;
}

function V(a, b) {
  b = String(b);
  a.f && (b = b.toLowerCase());
  return b;
}

function Gc(a, b) {
  b && !a.f && (U(a), a.c = null, a.a.forEach(function (c, d) {
    var e = d.toLowerCase();
    d != e && (Mc(this, d), Ic(this, e, c));
  }, a));
  a.f = b;
}

function Qc() {}

function Rc() {}

x(Rc, Qc);

function Sc(a) {
  this.a = a;
  this.b = this.h = null;
  this.g = !1;
  this.i = null;
  this.c = -1;
  this.l = this.f = null;
}

g = Sc.prototype;
g.M = null;

function Uc(a) {
  var b = a.a.F.a;
  if (null != b) K(4), b ? (K(10), Vc(a.a, a, !1)) : (K(11), Vc(a.a, a, !0));else {
    a.b = new M(a, void 0, void 0);
    a.b.h = a.h;
    b = a.a;
    b = Wc(b, b.Y() ? a.f : null, a.i);
    K(4);
    fc(b, "TYPE", "xmlhttp");
    var c = a.a.j,
        d = a.a.I;
    c && d && T(b, c, d);
    dc(a.b, b, !1, a.f);
  }
}

g.$ = function (a) {
  return this.a.$(a);
};

g.abort = function () {
  this.b && (this.b.cancel(), this.b = null);
  this.c = -1;
};

g.Da = function () {
  return !1;
};

g.Ga = function (a, b) {
  this.c = a.o;

  if (0 == this.M) {
    if (!this.a.o && (a = a.a)) {
      var c = hc(a, "X-Client-Wire-Protocol");
      this.l = c ? c : null;
      this.a.j && (a = hc(a, "X-HTTP-Session-Id")) && (this.a.I = a);
    }

    if (b) {
      try {
        var d = this.a.ja.a.parse(b);
      } catch (e) {
        b = this.a;
        b.m = this.c;
        W(b, 2);
        return;
      }

      this.f = d[0];
    } else b = this.a, b.m = this.c, W(b, 2);
  } else if (1 == this.M) if (this.g) K(6);else if ("11111" == b) {
    if (K(5), this.g = !0, !B || 10 <= Number(Na)) this.c = 200, this.b.cancel(), K(11), Vc(this.a, this, !0);
  } else K(7), this.g = !1;
};

g.na = function () {
  this.c = this.b.o;
  if (this.b.b) 0 == this.M ? (this.M = 1, Uc(this)) : 1 == this.M && (this.g ? (K(11), Vc(this.a, this, !0)) : (K(10), Vc(this.a, this, !1)));else {
    0 == this.M ? K(8) : 1 == this.M && K(9);
    var a = this.a;
    a.m = this.c;
    W(a, 2);
  }
};

g.Y = function () {
  return this.a.Y();
};

g.ma = function () {
  return this.a.ma();
};

function Xc() {
  this.a = this.b = null;
}

function Yc() {
  this.a = new Q();
}

function Zc(a) {
  var b = typeof a;
  return "object" == b && a || "function" == b ? "o" + (a[t] || (a[t] = ++da)) : b.charAt(0) + a;
}

Yc.prototype.add = function (a) {
  this.a.set(Zc(a), a);
};

Yc.prototype.C = function () {
  return this.a.C();
};

function $c(a, b) {
  this.b = a;
  this.a = b;
}

function ad(a) {
  this.g = a || bd;
  k.PerformanceNavigationTiming ? (a = k.performance.getEntriesByType("navigation"), a = 0 < a.length && ("hq" == a[0].nextHopProtocol || "h2" == a[0].nextHopProtocol)) : a = !!(k.ka && k.ka.Ea && k.ka.Ea() && k.ka.Ea().zb);
  this.f = a ? this.g : 1;
  this.a = null;
  1 < this.f && (this.a = new Yc());
  this.b = null;
  this.c = [];
}

var bd = 10;

function cd(a, b) {
  !a.a && (z(b, "spdy") || z(b, "quic") || z(b, "h2")) && (a.f = a.g, a.a = new Yc(), a.b && (dd(a, a.b), a.b = null));
}

function ed(a) {
  return a.b ? !0 : a.a ? a.a.a.c >= a.f : !1;
}

function fd(a) {
  return a.b ? 1 : a.a ? a.a.a.c : 0;
}

function gd(a, b) {
  a.b ? a = a.b == b : a.a ? (b = Zc(b), a = R(a.a.a.b, b)) : a = !1;
  return a;
}

function dd(a, b) {
  a.a ? a.a.add(b) : a.b = b;
}

function hd(a, b) {
  if (a.b && a.b == b) a.b = null;else {
    var c;
    if (c = a.a) c = Zc(b), c = R(a.a.a.b, c);
    c && rc(a.a.a, Zc(b));
  }
}

ad.prototype.cancel = function () {
  this.c = id(this);
  this.b ? (this.b.cancel(), this.b = null) : this.a && 0 != this.a.a.c && (la(this.a.C(), function (a) {
    a.cancel();
  }), qc(this.a.a));
};

function id(a) {
  if (null != a.b) return a.c.concat(a.b.j);

  if (null != a.a && 0 != a.a.a.c) {
    var b = a.c;
    la(a.a.C(), function (c) {
      b = b.concat(c.j);
    });
    return b;
  }

  return pa(a.c);
}

function jd() {}

jd.prototype.stringify = function (a) {
  return k.JSON.stringify(a, void 0);
};

jd.prototype.parse = function (a) {
  return k.JSON.parse(a, void 0);
};

function kd() {
  this.a = new jd();
}

function ld(a, b, c) {
  var d = c || "";

  try {
    oc(a, function (e, f) {
      var h = e;
      r(e) && (h = ob(e));
      b.push(d + f + "=" + encodeURIComponent(h));
    });
  } catch (e) {
    throw b.push(d + "type=" + encodeURIComponent("_badmap")), e;
  }
}

function md(a, b) {
  var c = new Kb();

  if (k.Image) {
    var d = new Image();
    d.onload = v(nd, c, d, "TestLoadImage: loaded", !0, b);
    d.onerror = v(nd, c, d, "TestLoadImage: error", !1, b);
    d.onabort = v(nd, c, d, "TestLoadImage: abort", !1, b);
    d.ontimeout = v(nd, c, d, "TestLoadImage: timeout", !1, b);
    k.setTimeout(function () {
      if (d.ontimeout) d.ontimeout();
    }, 1E4);
    d.src = a;
  } else b(!1);
}

function nd(a, b, c, d, e) {
  try {
    b.onload = null, b.onerror = null, b.onabort = null, b.ontimeout = null, e(d);
  } catch (f) {}
}

var od = k.JSON.parse;

function X(a) {
  G.call(this);
  this.headers = new Q();
  this.H = a || null;
  this.b = !1;
  this.s = this.a = null;
  this.A = "";
  this.h = 0;
  this.f = "";
  this.g = this.w = this.l = this.v = !1;
  this.o = 0;
  this.m = null;
  this.I = pd;
  this.D = this.F = !1;
}

x(X, G);
var pd = "",
    qd = /^https?$/i,
    rd = ["POST", "PUT"];
g = X.prototype;

g.ca = function (a, b, c, d) {
  if (this.a) throw Error("[goog.net.XhrIo] Object is active with another request=" + this.A + "; newUri=" + a);
  b = b ? b.toUpperCase() : "GET";
  this.A = a;
  this.f = "";
  this.h = 0;
  this.v = !1;
  this.b = !0;
  this.a = new XMLHttpRequest();
  this.s = this.H ? Sb(this.H) : Sb(Wb);
  this.a.onreadystatechange = u(this.Fa, this);

  try {
    this.w = !0, this.a.open(b, String(a), !0), this.w = !1;
  } catch (f) {
    sd(this, f);
    return;
  }

  a = c || "";
  var e = new Q(this.headers);
  d && oc(d, function (f, h) {
    e.set(h, f);
  });
  d = ma(e.K());
  c = k.FormData && a instanceof k.FormData;
  !(0 <= ja(rd, b)) || d || c || e.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
  e.forEach(function (f, h) {
    this.a.setRequestHeader(h, f);
  }, this);
  this.I && (this.a.responseType = this.I);
  "withCredentials" in this.a && this.a.withCredentials !== this.F && (this.a.withCredentials = this.F);

  try {
    td(this), 0 < this.o && ((this.D = ud(this.a)) ? (this.a.timeout = this.o, this.a.ontimeout = u(this.Ca, this)) : this.m = Eb(this.Ca, this.o, this)), this.l = !0, this.a.send(a), this.l = !1;
  } catch (f) {
    sd(this, f);
  }
};

function ud(a) {
  return B && Ma(9) && aa(a.timeout) && void 0 !== a.ontimeout;
}

function na(a) {
  return "content-type" == a.toLowerCase();
}

g.Ca = function () {
  "undefined" != typeof goog && this.a && (this.f = "Timed out after " + this.o + "ms, aborting", this.h = 8, this.dispatchEvent("timeout"), this.abort(8));
};

function sd(a, b) {
  a.b = !1;
  a.a && (a.g = !0, a.a.abort(), a.g = !1);
  a.f = b;
  a.h = 5;
  vd(a);
  wd(a);
}

function vd(a) {
  a.v || (a.v = !0, a.dispatchEvent("complete"), a.dispatchEvent("error"));
}

g.abort = function (a) {
  this.a && this.b && (this.b = !1, this.g = !0, this.a.abort(), this.g = !1, this.h = a || 7, this.dispatchEvent("complete"), this.dispatchEvent("abort"), wd(this));
};

g.G = function () {
  this.a && (this.b && (this.b = !1, this.g = !0, this.a.abort(), this.g = !1), wd(this, !0));
  X.N.G.call(this);
};

g.Fa = function () {
  this.j || (this.w || this.l || this.g ? xd(this) : this.$a());
};

g.$a = function () {
  xd(this);
};

function xd(a) {
  if (a.b && "undefined" != typeof goog && (!a.s[1] || 4 != O(a) || 2 != a.T())) if (a.l && 4 == O(a)) Eb(a.Fa, 0, a);else if (a.dispatchEvent("readystatechange"), 4 == O(a)) {
    a.b = !1;

    try {
      var b = a.T();

      a: switch (b) {
        case 200:
        case 201:
        case 202:
        case 204:
        case 206:
        case 304:
        case 1223:
          var c = !0;
          break a;

        default:
          c = !1;
      }

      var d;

      if (!(d = c)) {
        var e;

        if (e = 0 === b) {
          var f = String(a.A).match(sc)[1] || null;

          if (!f && k.self && k.self.location) {
            var h = k.self.location.protocol;
            f = h.substr(0, h.length - 1);
          }

          e = !qd.test(f ? f.toLowerCase() : "");
        }

        d = e;
      }

      d ? (a.dispatchEvent("complete"), a.dispatchEvent("success")) : (a.h = 6, a.f = a.za() + " [" + a.T() + "]", vd(a));
    } finally {
      wd(a);
    }
  }
}

function wd(a, b) {
  if (a.a) {
    td(a);
    var c = a.a,
        d = a.s[0] ? ba : null;
    a.a = null;
    a.s = null;
    b || a.dispatchEvent("ready");

    try {
      c.onreadystatechange = d;
    } catch (e) {}
  }
}

function td(a) {
  a.a && a.D && (a.a.ontimeout = null);
  a.m && (k.clearTimeout(a.m), a.m = null);
}

function O(a) {
  return a.a ? a.a.readyState : 0;
}

g.T = function () {
  try {
    return 2 < O(this) ? this.a.status : -1;
  } catch (a) {
    return -1;
  }
};

g.za = function () {
  try {
    return 2 < O(this) ? this.a.statusText : "";
  } catch (a) {
    return "";
  }
};

g.aa = function () {
  try {
    return this.a ? this.a.responseText : "";
  } catch (a) {
    return "";
  }
};

g.Va = function (a) {
  if (this.a) {
    var b = this.a.responseText;
    a && 0 == b.indexOf(a) && (b = b.substring(a.length));
    return od(b);
  }
};

function hc(a, b) {
  return a.a ? a.a.getResponseHeader(b) : null;
}

g.ya = function () {
  return this.h;
};

g.Ya = function () {
  return m(this.f) ? this.f : String(this.f);
};

function yd(a) {
  var b = "";
  va(a, function (c, d) {
    b += d;
    b += ":";
    b += c;
    b += "\r\n";
  });
  return b;
}

function zd(a, b, c) {
  a: {
    for (d in c) {
      var d = !1;
      break a;
    }

    d = !0;
  }

  if (d) return a;
  c = yd(c);

  if (m(a)) {
    b = encodeURIComponent(String(b));
    c = null != c ? "=" + encodeURIComponent(String(c)) : "";

    if (b += c) {
      c = a.indexOf("#");
      0 > c && (c = a.length);
      d = a.indexOf("?");

      if (0 > d || d > c) {
        d = c;
        var e = "";
      } else e = a.substring(d + 1, c);

      a = [a.substr(0, d), e, a.substr(c)];
      c = a[1];
      a[1] = b ? c ? c + "&" + b : b : c;
      a = a[0] + (a[1] ? "?" + a[1] : "") + a[2];
    }

    return a;
  }

  T(a, b, c);
  return a;
}

function Ad(a) {
  this.f = [];
  this.F = new Xc();
  this.ga = this.pa = this.B = this.ha = this.a = this.I = this.j = this.V = this.g = this.J = this.i = null;
  this.Ra = this.P = 0;
  this.Pa = !!n("internalChannelParams.failFast", a);
  this.ia = this.w = this.s = this.l = this.h = this.c = null;
  this.oa = !0;
  this.m = this.ra = this.O = -1;
  this.S = this.v = this.A = 0;
  this.Oa = n("internalChannelParams.baseRetryDelayMs", a) || 5E3;
  this.Sa = n("internalChannelParams.retryDelaySeedMs", a) || 1E4;
  this.Qa = n("internalChannelParams.forwardChannelMaxRetries", a) || 2;
  this.qa = n("internalChannelParams.forwardChannelRequestTimeoutMs", a) || 2E4;
  this.La = a && a.Ab || void 0;
  this.D = void 0;
  this.R = a && a.supportsCrossDomainXhr || !1;
  this.H = "";
  this.b = new ad(a && a.concurrentRequestLimit);
  this.ja = new kd();
  this.o = a && void 0 !== a.backgroundChannelTest ? a.backgroundChannelTest : !0;
  (this.W = a && a.fastHandshake || !1) && !this.o && (this.o = !0);
  a && a.forceLongPolling && (this.oa = !1);
  this.fa = void 0;
}

g = Ad.prototype;
g.wa = 8;
g.u = 1;

function Bd(a) {
  Cd(a);

  if (3 == a.u) {
    var b = a.P++,
        c = N(a.B);
    T(c, "SID", a.H);
    T(c, "RID", b);
    T(c, "TYPE", "terminate");
    Dd(a, c);
    b = new M(a, b, void 0);
    b.F = 2;
    b.f = bc(N(c));
    c = !1;
    k.navigator && k.navigator.sendBeacon && (c = k.navigator.sendBeacon(b.f.toString(), ""));
    !c && k.Image && (new Image().src = b.f, c = !0);
    c || (b.a = b.g.$(null), b.a.ca(b.f));
    b.v = w();
    ec(b);
  }

  Ed(a);
}

function Cd(a) {
  a.w && (a.w.abort(), a.w = null);
  a.a && (a.a.cancel(), a.a = null);
  a.l && (k.clearTimeout(a.l), a.l = null);
  Fd(a);
  a.b.cancel();
  a.h && (aa(a.h) && k.clearTimeout(a.h), a.h = null);
}

function Gd(a, b) {
  a.f.push(new $c(a.Ra++, b));
  3 == a.u && Hd(a);
}

g.Da = function () {
  return 0 == this.u;
};

function Hd(a) {
  ed(a.b) || a.h || (a.h = !0, wb(a.Ia, a), a.A = 0);
}

function Id(a, b) {
  if (fd(a.b) >= a.b.f - (a.h ? 1 : 0)) return !1;
  if (a.h) return a.f = b.j.concat(a.f), !0;
  if (1 == a.u || 2 == a.u || a.A >= (a.Pa ? 0 : a.Qa)) return !1;
  a.h = Ob(u(a.Ia, a, b), Jd(a, a.A));
  a.A++;
  return !0;
}

g.Ia = function (a) {
  if (this.h) if (this.h = null, 1 == this.u) {
    if (!a) {
      this.P = Math.floor(1E5 * Math.random());
      a = this.P++;
      var b = new M(this, a, void 0),
          c = this.i;
      this.J && (c ? (c = wa(c), ya(c, this.J)) : c = this.J);
      null === this.g && (b.h = c);
      var d;
      if (this.W) a: {
        for (var e = d = 0; e < this.f.length; e++) {
          b: {
            var f = this.f[e];

            if ("__data__" in f.a && (f = f.a.__data__, m(f))) {
              f = f.length;
              break b;
            }

            f = void 0;
          }

          if (void 0 === f) break;
          d += f;

          if (4096 < d) {
            d = e;
            break a;
          }

          if (4096 === d || e === this.f.length - 1) {
            d = e + 1;
            break a;
          }
        }

        d = 1E3;
      } else d = 1E3;
      d = Kd(this, b, d);
      e = N(this.B);
      T(e, "RID", a);
      T(e, "CVER", 22);
      this.o && this.j && T(e, "X-HTTP-Session-Id", this.j);
      Dd(this, e);
      this.g && c && zd(e, this.g, c);
      dd(this.b, b);
      this.W ? (T(e, "$req", d), T(e, "SID", "null"), b.S = !0, ac(b, e, null)) : ac(b, e, d);
      this.u = 2;
    }
  } else 3 == this.u && (a ? Ld(this, a) : 0 == this.f.length || ed(this.b) || Ld(this));
};

function Ld(a, b) {
  var c;
  b ? c = b.W : c = a.P++;
  var d = N(a.B);
  T(d, "SID", a.H);
  T(d, "RID", c);
  T(d, "AID", a.O);
  Dd(a, d);
  a.g && a.i && zd(d, a.g, a.i);
  c = new M(a, c, a.A + 1);
  null === a.g && (c.h = a.i);
  b && (a.f = b.j.concat(a.f));
  b = Kd(a, c, 1E3);
  c.setTimeout(Math.round(.5 * a.qa) + Math.round(.5 * a.qa * Math.random()));
  dd(a.b, c);
  ac(c, d, b);
}

function Dd(a, b) {
  a.c && oc({}, function (c, d) {
    T(b, d, c);
  });
}

function Kd(a, b, c) {
  c = Math.min(a.f.length, c);
  var d = a.c ? u(a.c.Ta, a.c, a) : null;

  a: for (var e = a.f, f = -1;;) {
    var h = ["count=" + c];
    -1 == f ? 0 < c ? (f = e[0].b, h.push("ofs=" + f)) : f = 0 : h.push("ofs=" + f);

    for (var l = !0, F = 0; F < c; F++) {
      var Bb = e[F].b,
          Tc = e[F].a;
      Bb -= f;
      if (0 > Bb) f = Math.max(0, e[F].b - 100), l = !1;else try {
        ld(Tc, h, "req" + Bb + "_");
      } catch (Ud) {
        d && d(Tc);
      }
    }

    if (l) {
      d = h.join("&");
      break a;
    }
  }

  a = a.f.splice(0, c);
  b.j = a;
  return d;
}

function Md(a) {
  a.a || a.l || (a.S = 1, wb(a.Ha, a), a.v = 0);
}

function Nd(a) {
  if (a.a || a.l || 3 <= a.v) return !1;
  a.S++;
  a.l = Ob(u(a.Ha, a), Jd(a, a.v));
  a.v++;
  return !0;
}

g.Ha = function () {
  this.l = null;
  this.a = new M(this, "rpc", this.S);
  null === this.g && (this.a.h = this.i);
  this.a.J = 0;
  var a = N(this.pa);
  T(a, "RID", "rpc");
  T(a, "SID", this.H);
  T(a, "CI", this.ia ? "0" : "1");
  T(a, "AID", this.O);
  Dd(this, a);
  T(a, "TYPE", "xmlhttp");
  this.g && this.i && zd(a, this.g, this.i);
  this.D && this.a.setTimeout(this.D);
  dc(this.a, a, !0, this.ga);
};

function Vc(a, b, c) {
  var d = b.l;
  d && cd(a.b, d);
  a.ia = a.oa && c;
  a.m = b.c;
  a.B = Wc(a, null, a.ha);
  Hd(a);
}

g.Ga = function (a, b) {
  if (0 != this.u && (this.a == a || gd(this.b, a))) if (this.m = a.o, !a.s && gd(this.b, a) && 3 == this.u) {
    try {
      var c = this.ja.a.parse(b);
    } catch (f) {
      c = null;
    }

    if (q(c) && 3 == c.length) {
      b = c;
      if (0 == b[0]) a: {
        if (!this.l) {
          if (this.a) if (this.a.v + 3E3 < a.v) Fd(this), this.a.cancel(), this.a = null;else break a;
          Nd(this);
          K(18);
        }
      } else this.ra = b[1], 0 < this.ra - this.O && 37500 > b[2] && this.ia && 0 == this.v && !this.s && (this.s = Ob(u(this.Za, this), 6E3));

      if (1 >= fd(this.b) && this.fa) {
        try {
          this.fa();
        } catch (f) {}

        this.fa = void 0;
      }
    } else W(this, 11);
  } else if ((a.s || this.a == a) && Fd(this), !qa(b)) for (b = c = this.ja.a.parse(b), c = 0; c < b.length; c++) {
    var d = b[c];
    this.O = d[0];
    d = d[1];
    if (2 == this.u) {
      if ("c" == d[0]) {
        this.H = d[1];
        this.ga = d[2];
        var e = d[3];
        null != e && (this.wa = e);
        d = d[5];
        null != d && aa(d) && 0 < d && (this.D = 1.5 * d);
        this.o && (d = a.a) && ((e = hc(d, "X-Client-Wire-Protocol")) && cd(this.b, e), this.j && (d = hc(d, "X-HTTP-Session-Id"))) && (this.I = d, T(this.B, this.j, d));
        this.u = 3;
        this.c && this.c.va();
        d = a;
        this.pa = Wc(this, this.Y() ? this.ga : null, this.ha);
        d.s ? (hd(this.b, d), (e = this.D) && d.setTimeout(e), d.i && (gc(d), ec(d)), this.a = d) : Md(this);
        0 < this.f.length && Hd(this);
      } else "stop" != d[0] && "close" != d[0] || W(this, 7);
    } else 3 == this.u && ("stop" == d[0] || "close" == d[0] ? "stop" == d[0] ? W(this, 7) : Bd(this) : "noop" != d[0] && this.c && this.c.ua(d), this.v = 0);
  }
};

g.Za = function () {
  null != this.s && (this.s = null, this.a.cancel(), this.a = null, Nd(this), K(19));
};

function Fd(a) {
  null != a.s && (k.clearTimeout(a.s), a.s = null);
}

g.na = function (a) {
  var b = null;

  if (this.a == a) {
    Fd(this);
    this.a = null;
    var c = 2;
  } else if (gd(this.b, a)) b = a.j, hd(this.b, a), c = 1;else return;

  this.m = a.o;
  if (0 != this.u) if (a.b) 1 == c ? (b = w() - a.v, I.dispatchEvent(new Nb(I, a.l ? a.l.length : 0, b, this.A)), Hd(this)) : Md(this);else {
    var d = a.c;
    if (3 == d || 0 == d && 0 < this.m || !(1 == c && Id(this, a) || 2 == c && Nd(this))) switch (b && 0 < b.length && (a = this.b, a.c = a.c.concat(b)), d) {
      case 1:
        W(this, 5);
        break;

      case 4:
        W(this, 10);
        break;

      case 3:
        W(this, 6);
        break;

      default:
        W(this, 2);
    }
  }
};

function Jd(a, b) {
  var c = a.Oa + Math.floor(Math.random() * a.Sa);
  a.ma() || (c *= 2);
  return c * b;
}

function W(a, b) {
  if (2 == b) {
    var c = null;
    a.c && (c = null);
    var d = u(a.fb, a);
    c || (c = new S("//www.google.com/images/cleardot.gif"), k.location && "http" == k.location.protocol || uc(c, "https"), bc(c));
    md(c.toString(), d);
  } else K(2);

  a.u = 0;
  a.c && a.c.ta(b);
  Ed(a);
  Cd(a);
}

g.fb = function (a) {
  a ? K(2) : K(1);
};

function Ed(a) {
  a.u = 0;
  a.m = -1;

  if (a.c) {
    if (0 != id(a.b).length || 0 != a.f.length) a.b.c.length = 0, pa(a.f), a.f.length = 0;
    a.c.sa();
  }
}

function Wc(a, b, c) {
  var d = Jc(c);
  if ("" != d.b) b && vc(d, b + "." + d.b), wc(d, d.i);else {
    var e = k.location,
        f;
    b ? f = b + "." + e.hostname : f = e.hostname;
    d = Kc(e.protocol, f, +e.port, c);
  }
  a.V && va(a.V, function (h, l) {
    T(d, l, h);
  });
  b = a.j;
  c = a.I;
  b && c && T(d, b, c);
  T(d, "VER", a.wa);
  Dd(a, d);
  return d;
}

g.$ = function (a) {
  if (a && !this.R) throw Error("Can't create secondary domain capable XhrIo object.");
  a = new X(this.La);
  a.F = this.R;
  return a;
};

g.ma = function () {
  return !!this.c && !0;
};

g.Y = function () {
  return this.R;
};

function Od() {}

g = Od.prototype;

g.va = function () {};

g.ua = function () {};

g.ta = function () {};

g.sa = function () {};

g.Ta = function () {};

function Pd(a) {
  for (var b = arguments[0], c = 1; c < arguments.length; c++) {
    var d = arguments[c];
    if (0 == d.lastIndexOf("/", 0)) b = d;else {
      var e;
      (e = "" == b) || (e = b.length - 1, e = 0 <= e && b.indexOf("/", e) == e);
      e ? b += d : b += "/" + d;
    }
  }

  return b;
}

function Qd() {
  if (B && !(10 <= Number(Na))) throw Error("Environmental error: no available transport.");
}

Qd.prototype.a = function (a, b) {
  return new Y(a, b);
};

function Y(a, b) {
  G.call(this);
  this.a = new Ad(b);
  this.g = a;
  this.m = b && b.testUrl ? b.testUrl : Pd(this.g, "test");
  this.b = b && b.messageUrlParams || null;
  a = b && b.messageHeaders || null;
  b && b.clientProtocolHeaderRequired && (a ? a["X-Client-Protocol"] = "webchannel" : a = {
    "X-Client-Protocol": "webchannel"
  });
  this.a.i = a;
  a = b && b.initMessageHeaders || null;
  b && b.messageContentType && (a ? a["X-WebChannel-Content-Type"] = b.messageContentType : a = {
    "X-WebChannel-Content-Type": b.messageContentType
  });
  b && b.xa && (a ? a["X-WebChannel-Client-Profile"] = b.xa : a = {
    "X-WebChannel-Client-Profile": b.xa
  });
  this.a.J = a;
  (a = b && b.httpHeadersOverwriteParam) && !qa(a) && (this.a.g = a);
  this.l = b && b.supportsCrossDomainXhr || !1;
  this.h = b && b.sendRawJson || !1;
  (b = b && b.httpSessionIdParam) && !qa(b) && (this.a.j = b, a = this.b, null !== a && b in a && (a = this.b, b in a && delete a[b]));
  this.f = new Z(this);
}

x(Y, G);
g = Y.prototype;

g.addEventListener = function (a, b, c, d) {
  Y.N.addEventListener.call(this, a, b, c, d);
};

g.removeEventListener = function (a, b, c, d) {
  Y.N.removeEventListener.call(this, a, b, c, d);
};

g.Wa = function () {
  this.a.c = this.f;
  this.l && (this.a.R = !0);
  var a = this.a,
      b = this.m,
      c = this.g,
      d = this.b || void 0;
  K(0);
  a.ha = c;
  a.V = d || {};
  a.o && (a.F.b = [], a.F.a = !1);
  a.w = new Sc(a);
  null === a.g && (a.w.h = a.i);
  c = b;
  a.g && a.i && (c = zd(b, a.g, a.i));
  a = a.w;
  a.i = c;
  b = Wc(a.a, null, a.i);
  K(3);
  c = a.a.F.b;
  null != c ? (a.f = c[0], a.M = 1, Uc(a)) : (fc(b, "MODE", "init"), !a.a.o && a.a.j && fc(b, "X-HTTP-Session-Id", a.a.j), a.b = new M(a, void 0, void 0), a.b.h = a.h, dc(a.b, b, !1, null), a.M = 0);
};

g.close = function () {
  Bd(this.a);
};

g.Xa = function (a) {
  if (m(a)) {
    var b = {};
    b.__data__ = a;
    Gd(this.a, b);
  } else this.h ? (b = {}, b.__data__ = ob(a), Gd(this.a, b)) : Gd(this.a, a);
};

g.G = function () {
  this.a.c = null;
  delete this.f;
  Bd(this.a);
  delete this.a;
  Y.N.G.call(this);
};

function Rd(a) {
  Ub.call(this);
  var b = a.__sm__;

  if (b) {
    a: {
      for (var c in b) {
        a = c;
        break a;
      }

      a = void 0;
    }

    (this.c = a) ? (a = this.c, this.data = null !== b && a in b ? b[a] : void 0) : this.data = b;
  } else this.data = a;
}

x(Rd, Ub);

function Sd() {
  Vb.call(this);
  this.status = 1;
}

x(Sd, Vb);

function Z(a) {
  this.a = a;
}

x(Z, Od);

Z.prototype.va = function () {
  this.a.dispatchEvent("a");
};

Z.prototype.ua = function (a) {
  this.a.dispatchEvent(new Rd(a));
};

Z.prototype.ta = function (a) {
  this.a.dispatchEvent(new Sd(a));
};

Z.prototype.sa = function () {
  this.a.dispatchEvent("b");
};

var Td = v(function (a, b) {
  function c() {}

  c.prototype = a.prototype;
  var d = new c();
  a.apply(d, Array.prototype.slice.call(arguments, 1));
  return d;
}, Qd);
/*
Copyright 2017 Google Inc.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

Qd.prototype.createWebChannel = Qd.prototype.a;
Y.prototype.send = Y.prototype.Xa;
Y.prototype.open = Y.prototype.Wa;
Y.prototype.close = Y.prototype.close;
Pb.NO_ERROR = 0;
Pb.TIMEOUT = 8;
Pb.HTTP_ERROR = 6;
Qb.COMPLETE = "complete";
Tb.EventType = L;
L.OPEN = "a";
L.CLOSE = "b";
L.ERROR = "c";
L.MESSAGE = "d";
G.prototype.listen = G.prototype.Aa;
X.prototype.listenOnce = X.prototype.Ba;
X.prototype.getLastError = X.prototype.Ya;
X.prototype.getLastErrorCode = X.prototype.ya;
X.prototype.getStatus = X.prototype.T;
X.prototype.getStatusText = X.prototype.za;
X.prototype.getResponseJson = X.prototype.Va;
X.prototype.getResponseText = X.prototype.aa;
X.prototype.send = X.prototype.ca;
var tmp = {
  createWebChannelTransport: Td,
  ErrorCode: Pb,
  EventType: Qb,
  WebChannel: Tb,
  XhrIo: X
};
var tmp_1 = tmp.createWebChannelTransport;
var tmp_2 = tmp.ErrorCode;
var tmp_3 = tmp.EventType;
var tmp_4 = tmp.WebChannel;
var tmp_5 = tmp.XhrIo;
/* harmony default export */ __webpack_exports__["default"] = (tmp);

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/ansi-styles/index.js":
/*!*******************************************!*\
  !*** ./node_modules/ansi-styles/index.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

const colorConvert = __webpack_require__(/*! color-convert */ "./node_modules/color-convert/index.js");

const wrapAnsi16 = (fn, offset) => function () {
  const code = fn.apply(colorConvert, arguments);
  return "\x1B[".concat(code + offset, "m");
};

const wrapAnsi256 = (fn, offset) => function () {
  const code = fn.apply(colorConvert, arguments);
  return "\x1B[".concat(38 + offset, ";5;").concat(code, "m");
};

const wrapAnsi16m = (fn, offset) => function () {
  const rgb = fn.apply(colorConvert, arguments);
  return "\x1B[".concat(38 + offset, ";2;").concat(rgb[0], ";").concat(rgb[1], ";").concat(rgb[2], "m");
};

function assembleStyles() {
  const codes = new Map();
  const styles = {
    modifier: {
      reset: [0, 0],
      // 21 isn't widely supported and 22 does the same thing
      bold: [1, 22],
      dim: [2, 22],
      italic: [3, 23],
      underline: [4, 24],
      inverse: [7, 27],
      hidden: [8, 28],
      strikethrough: [9, 29]
    },
    color: {
      black: [30, 39],
      red: [31, 39],
      green: [32, 39],
      yellow: [33, 39],
      blue: [34, 39],
      magenta: [35, 39],
      cyan: [36, 39],
      white: [37, 39],
      gray: [90, 39],
      // Bright color
      redBright: [91, 39],
      greenBright: [92, 39],
      yellowBright: [93, 39],
      blueBright: [94, 39],
      magentaBright: [95, 39],
      cyanBright: [96, 39],
      whiteBright: [97, 39]
    },
    bgColor: {
      bgBlack: [40, 49],
      bgRed: [41, 49],
      bgGreen: [42, 49],
      bgYellow: [43, 49],
      bgBlue: [44, 49],
      bgMagenta: [45, 49],
      bgCyan: [46, 49],
      bgWhite: [47, 49],
      // Bright color
      bgBlackBright: [100, 49],
      bgRedBright: [101, 49],
      bgGreenBright: [102, 49],
      bgYellowBright: [103, 49],
      bgBlueBright: [104, 49],
      bgMagentaBright: [105, 49],
      bgCyanBright: [106, 49],
      bgWhiteBright: [107, 49]
    }
  }; // Fix humans

  styles.color.grey = styles.color.gray;

  for (const groupName of Object.keys(styles)) {
    const group = styles[groupName];

    for (const styleName of Object.keys(group)) {
      const style = group[styleName];
      styles[styleName] = {
        open: "\x1B[".concat(style[0], "m"),
        close: "\x1B[".concat(style[1], "m")
      };
      group[styleName] = styles[styleName];
      codes.set(style[0], style[1]);
    }

    Object.defineProperty(styles, groupName, {
      value: group,
      enumerable: false
    });
    Object.defineProperty(styles, 'codes', {
      value: codes,
      enumerable: false
    });
  }

  const ansi2ansi = n => n;

  const rgb2rgb = (r, g, b) => [r, g, b];

  styles.color.close = '\u001B[39m';
  styles.bgColor.close = '\u001B[49m';
  styles.color.ansi = {
    ansi: wrapAnsi16(ansi2ansi, 0)
  };
  styles.color.ansi256 = {
    ansi256: wrapAnsi256(ansi2ansi, 0)
  };
  styles.color.ansi16m = {
    rgb: wrapAnsi16m(rgb2rgb, 0)
  };
  styles.bgColor.ansi = {
    ansi: wrapAnsi16(ansi2ansi, 10)
  };
  styles.bgColor.ansi256 = {
    ansi256: wrapAnsi256(ansi2ansi, 10)
  };
  styles.bgColor.ansi16m = {
    rgb: wrapAnsi16m(rgb2rgb, 10)
  };

  for (let key of Object.keys(colorConvert)) {
    if (typeof colorConvert[key] !== 'object') {
      continue;
    }

    const suite = colorConvert[key];

    if (key === 'ansi16') {
      key = 'ansi';
    }

    if ('ansi16' in suite) {
      styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
      styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
    }

    if ('ansi256' in suite) {
      styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
      styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
    }

    if ('rgb' in suite) {
      styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
      styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
    }
  }

  return styles;
} // Make the export immutable


Object.defineProperty(module, 'exports', {
  enumerable: true,
  get: assembleStyles
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/chalk/index.js":
/*!*************************************!*\
  !*** ./node_modules/chalk/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

const escapeStringRegexp = __webpack_require__(/*! escape-string-regexp */ "./node_modules/escape-string-regexp/index.js");

const ansiStyles = __webpack_require__(/*! ansi-styles */ "./node_modules/ansi-styles/index.js");

const stdoutColor = __webpack_require__(/*! supports-color */ "./node_modules/chalk/node_modules/supports-color/browser.js").stdout;

const template = __webpack_require__(/*! ./templates.js */ "./node_modules/chalk/templates.js");

const isSimpleWindowsTerm = process.platform === 'win32' && !(Object({"NODE_ENV":"development","PUBLIC_URL":""}).TERM || '').toLowerCase().startsWith('xterm'); // `supportsColor.level` → `ansiStyles.color[name]` mapping

const levelMapping = ['ansi', 'ansi', 'ansi256', 'ansi16m']; // `color-convert` models to exclude from the Chalk API due to conflicts and such

const skipModels = new Set(['gray']);
const styles = Object.create(null);

function applyOptions(obj, options) {
  options = options || {}; // Detect level if not set manually

  const scLevel = stdoutColor ? stdoutColor.level : 0;
  obj.level = options.level === undefined ? scLevel : options.level;
  obj.enabled = 'enabled' in options ? options.enabled : obj.level > 0;
}

function Chalk(options) {
  // We check for this.template here since calling `chalk.constructor()`
  // by itself will have a `this` of a previously constructed chalk object
  if (!this || !(this instanceof Chalk) || this.template) {
    const chalk = {};
    applyOptions(chalk, options);

    chalk.template = function () {
      const args = [].slice.call(arguments);
      return chalkTag.apply(null, [chalk.template].concat(args));
    };

    Object.setPrototypeOf(chalk, Chalk.prototype);
    Object.setPrototypeOf(chalk.template, chalk);
    chalk.template.constructor = Chalk;
    return chalk.template;
  }

  applyOptions(this, options);
} // Use bright blue on Windows as the normal blue color is illegible


if (isSimpleWindowsTerm) {
  ansiStyles.blue.open = '\u001B[94m';
}

for (const key of Object.keys(ansiStyles)) {
  ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');
  styles[key] = {
    get() {
      const codes = ansiStyles[key];
      return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, key);
    }

  };
}

styles.visible = {
  get() {
    return build.call(this, this._styles || [], true, 'visible');
  }

};
ansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), 'g');

for (const model of Object.keys(ansiStyles.color.ansi)) {
  if (skipModels.has(model)) {
    continue;
  }

  styles[model] = {
    get() {
      const level = this.level;
      return function () {
        const open = ansiStyles.color[levelMapping[level]][model].apply(null, arguments);
        const codes = {
          open,
          close: ansiStyles.color.close,
          closeRe: ansiStyles.color.closeRe
        };
        return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
      };
    }

  };
}

ansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), 'g');

for (const model of Object.keys(ansiStyles.bgColor.ansi)) {
  if (skipModels.has(model)) {
    continue;
  }

  const bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);
  styles[bgModel] = {
    get() {
      const level = this.level;
      return function () {
        const open = ansiStyles.bgColor[levelMapping[level]][model].apply(null, arguments);
        const codes = {
          open,
          close: ansiStyles.bgColor.close,
          closeRe: ansiStyles.bgColor.closeRe
        };
        return build.call(this, this._styles ? this._styles.concat(codes) : [codes], this._empty, model);
      };
    }

  };
}

const proto = Object.defineProperties(() => {}, styles);

function build(_styles, _empty, key) {
  const builder = function () {
    return applyStyle.apply(builder, arguments);
  };

  builder._styles = _styles;
  builder._empty = _empty;
  const self = this;
  Object.defineProperty(builder, 'level', {
    enumerable: true,

    get() {
      return self.level;
    },

    set(level) {
      self.level = level;
    }

  });
  Object.defineProperty(builder, 'enabled', {
    enumerable: true,

    get() {
      return self.enabled;
    },

    set(enabled) {
      self.enabled = enabled;
    }

  }); // See below for fix regarding invisible grey/dim combination on Windows

  builder.hasGrey = this.hasGrey || key === 'gray' || key === 'grey'; // `__proto__` is used because we must return a function, but there is
  // no way to create a function with a different prototype

  builder.__proto__ = proto; // eslint-disable-line no-proto

  return builder;
}

function applyStyle() {
  // Support varags, but simply cast to string in case there's only one arg
  const args = arguments;
  const argsLen = args.length;
  let str = String(arguments[0]);

  if (argsLen === 0) {
    return '';
  }

  if (argsLen > 1) {
    // Don't slice `arguments`, it prevents V8 optimizations
    for (let a = 1; a < argsLen; a++) {
      str += ' ' + args[a];
    }
  }

  if (!this.enabled || this.level <= 0 || !str) {
    return this._empty ? '' : str;
  } // Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,
  // see https://github.com/chalk/chalk/issues/58
  // If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.


  const originalDim = ansiStyles.dim.open;

  if (isSimpleWindowsTerm && this.hasGrey) {
    ansiStyles.dim.open = '';
  }

  for (const code of this._styles.slice().reverse()) {
    // Replace any instances already present with a re-opening code
    // otherwise only the part of the string until said closing code
    // will be colored, and the rest will simply be 'plain'.
    str = code.open + str.replace(code.closeRe, code.open) + code.close; // Close the styling before a linebreak and reopen
    // after next line to fix a bleed issue on macOS
    // https://github.com/chalk/chalk/pull/92

    str = str.replace(/\r?\n/g, "".concat(code.close, "$&").concat(code.open));
  } // Reset the original `dim` if we changed it to work around the Windows dimmed gray issue


  ansiStyles.dim.open = originalDim;
  return str;
}

function chalkTag(chalk, strings) {
  if (!Array.isArray(strings)) {
    // If chalk() was called by itself or with a string,
    // return the string itself as a string.
    return [].slice.call(arguments, 1).join(' ');
  }

  const args = [].slice.call(arguments, 2);
  const parts = [strings.raw[0]];

  for (let i = 1; i < strings.length; i++) {
    parts.push(String(args[i - 1]).replace(/[{}\\]/g, '\\$&'));
    parts.push(String(strings.raw[i]));
  }

  return template(chalk, parts.join(''));
}

Object.defineProperties(Chalk.prototype, styles);
module.exports = Chalk(); // eslint-disable-line new-cap

module.exports.supportsColor = stdoutColor;
module.exports.default = module.exports; // For TypeScript
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/chalk/node_modules/supports-color/browser.js":
/*!*******************************************************************!*\
  !*** ./node_modules/chalk/node_modules/supports-color/browser.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  stdout: false,
  stderr: false
};

/***/ }),

/***/ "./node_modules/chalk/templates.js":
/*!*****************************************!*\
  !*** ./node_modules/chalk/templates.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const TEMPLATE_REGEX = /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
const STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
const ESCAPE_REGEX = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi;
const ESCAPES = new Map([['n', '\n'], ['r', '\r'], ['t', '\t'], ['b', '\b'], ['f', '\f'], ['v', '\v'], ['0', '\0'], ['\\', '\\'], ['e', '\u001B'], ['a', '\u0007']]);

function unescape(c) {
  if (c[0] === 'u' && c.length === 5 || c[0] === 'x' && c.length === 3) {
    return String.fromCharCode(parseInt(c.slice(1), 16));
  }

  return ESCAPES.get(c) || c;
}

function parseArguments(name, args) {
  const results = [];
  const chunks = args.trim().split(/\s*,\s*/g);
  let matches;

  for (const chunk of chunks) {
    if (!isNaN(chunk)) {
      results.push(Number(chunk));
    } else if (matches = chunk.match(STRING_REGEX)) {
      results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, chr) => escape ? unescape(escape) : chr));
    } else {
      throw new Error("Invalid Chalk template style argument: ".concat(chunk, " (in style '").concat(name, "')"));
    }
  }

  return results;
}

function parseStyle(style) {
  STYLE_REGEX.lastIndex = 0;
  const results = [];
  let matches;

  while ((matches = STYLE_REGEX.exec(style)) !== null) {
    const name = matches[1];

    if (matches[2]) {
      const args = parseArguments(name, matches[2]);
      results.push([name].concat(args));
    } else {
      results.push([name]);
    }
  }

  return results;
}

function buildStyle(chalk, styles) {
  const enabled = {};

  for (const layer of styles) {
    for (const style of layer.styles) {
      enabled[style[0]] = layer.inverse ? null : style.slice(1);
    }
  }

  let current = chalk;

  for (const styleName of Object.keys(enabled)) {
    if (Array.isArray(enabled[styleName])) {
      if (!(styleName in current)) {
        throw new Error("Unknown Chalk style: ".concat(styleName));
      }

      if (enabled[styleName].length > 0) {
        current = current[styleName].apply(current, enabled[styleName]);
      } else {
        current = current[styleName];
      }
    }
  }

  return current;
}

module.exports = (chalk, tmp) => {
  const styles = [];
  const chunks = [];
  let chunk = []; // eslint-disable-next-line max-params

  tmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr) => {
    if (escapeChar) {
      chunk.push(unescape(escapeChar));
    } else if (style) {
      const str = chunk.join('');
      chunk = [];
      chunks.push(styles.length === 0 ? str : buildStyle(chalk, styles)(str));
      styles.push({
        inverse,
        styles: parseStyle(style)
      });
    } else if (close) {
      if (styles.length === 0) {
        throw new Error('Found extraneous } in Chalk template literal');
      }

      chunks.push(buildStyle(chalk, styles)(chunk.join('')));
      chunk = [];
      styles.pop();
    } else {
      chunk.push(chr);
    }
  });
  chunks.push(chunk.join(''));

  if (styles.length > 0) {
    const errMsg = "Chalk template literal is missing ".concat(styles.length, " closing bracket").concat(styles.length === 1 ? '' : 's', " (`}`)");
    throw new Error(errMsg);
  }

  return chunks.join('');
};

/***/ }),

/***/ "./node_modules/color-convert/conversions.js":
/*!***************************************************!*\
  !*** ./node_modules/color-convert/conversions.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* MIT license */
var cssKeywords = __webpack_require__(/*! color-name */ "./node_modules/color-name/index.js"); // NOTE: conversions should only return primitive values (i.e. arrays, or
//       values that give correct `typeof` results).
//       do not use box values types (i.e. Number(), String(), etc.)


var reverseKeywords = {};

for (var key in cssKeywords) {
  if (cssKeywords.hasOwnProperty(key)) {
    reverseKeywords[cssKeywords[key]] = key;
  }
}

var convert = module.exports = {
  rgb: {
    channels: 3,
    labels: 'rgb'
  },
  hsl: {
    channels: 3,
    labels: 'hsl'
  },
  hsv: {
    channels: 3,
    labels: 'hsv'
  },
  hwb: {
    channels: 3,
    labels: 'hwb'
  },
  cmyk: {
    channels: 4,
    labels: 'cmyk'
  },
  xyz: {
    channels: 3,
    labels: 'xyz'
  },
  lab: {
    channels: 3,
    labels: 'lab'
  },
  lch: {
    channels: 3,
    labels: 'lch'
  },
  hex: {
    channels: 1,
    labels: ['hex']
  },
  keyword: {
    channels: 1,
    labels: ['keyword']
  },
  ansi16: {
    channels: 1,
    labels: ['ansi16']
  },
  ansi256: {
    channels: 1,
    labels: ['ansi256']
  },
  hcg: {
    channels: 3,
    labels: ['h', 'c', 'g']
  },
  apple: {
    channels: 3,
    labels: ['r16', 'g16', 'b16']
  },
  gray: {
    channels: 1,
    labels: ['gray']
  }
}; // hide .channels and .labels properties

for (var model in convert) {
  if (convert.hasOwnProperty(model)) {
    if (!('channels' in convert[model])) {
      throw new Error('missing channels property: ' + model);
    }

    if (!('labels' in convert[model])) {
      throw new Error('missing channel labels property: ' + model);
    }

    if (convert[model].labels.length !== convert[model].channels) {
      throw new Error('channel and label counts mismatch: ' + model);
    }

    var channels = convert[model].channels;
    var labels = convert[model].labels;
    delete convert[model].channels;
    delete convert[model].labels;
    Object.defineProperty(convert[model], 'channels', {
      value: channels
    });
    Object.defineProperty(convert[model], 'labels', {
      value: labels
    });
  }
}

convert.rgb.hsl = function (rgb) {
  var r = rgb[0] / 255;
  var g = rgb[1] / 255;
  var b = rgb[2] / 255;
  var min = Math.min(r, g, b);
  var max = Math.max(r, g, b);
  var delta = max - min;
  var h;
  var s;
  var l;

  if (max === min) {
    h = 0;
  } else if (r === max) {
    h = (g - b) / delta;
  } else if (g === max) {
    h = 2 + (b - r) / delta;
  } else if (b === max) {
    h = 4 + (r - g) / delta;
  }

  h = Math.min(h * 60, 360);

  if (h < 0) {
    h += 360;
  }

  l = (min + max) / 2;

  if (max === min) {
    s = 0;
  } else if (l <= 0.5) {
    s = delta / (max + min);
  } else {
    s = delta / (2 - max - min);
  }

  return [h, s * 100, l * 100];
};

convert.rgb.hsv = function (rgb) {
  var rdif;
  var gdif;
  var bdif;
  var h;
  var s;
  var r = rgb[0] / 255;
  var g = rgb[1] / 255;
  var b = rgb[2] / 255;
  var v = Math.max(r, g, b);
  var diff = v - Math.min(r, g, b);

  var diffc = function (c) {
    return (v - c) / 6 / diff + 1 / 2;
  };

  if (diff === 0) {
    h = s = 0;
  } else {
    s = diff / v;
    rdif = diffc(r);
    gdif = diffc(g);
    bdif = diffc(b);

    if (r === v) {
      h = bdif - gdif;
    } else if (g === v) {
      h = 1 / 3 + rdif - bdif;
    } else if (b === v) {
      h = 2 / 3 + gdif - rdif;
    }

    if (h < 0) {
      h += 1;
    } else if (h > 1) {
      h -= 1;
    }
  }

  return [h * 360, s * 100, v * 100];
};

convert.rgb.hwb = function (rgb) {
  var r = rgb[0];
  var g = rgb[1];
  var b = rgb[2];
  var h = convert.rgb.hsl(rgb)[0];
  var w = 1 / 255 * Math.min(r, Math.min(g, b));
  b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
  return [h, w * 100, b * 100];
};

convert.rgb.cmyk = function (rgb) {
  var r = rgb[0] / 255;
  var g = rgb[1] / 255;
  var b = rgb[2] / 255;
  var c;
  var m;
  var y;
  var k;
  k = Math.min(1 - r, 1 - g, 1 - b);
  c = (1 - r - k) / (1 - k) || 0;
  m = (1 - g - k) / (1 - k) || 0;
  y = (1 - b - k) / (1 - k) || 0;
  return [c * 100, m * 100, y * 100, k * 100];
};
/**
 * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
 * */


function comparativeDistance(x, y) {
  return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
}

convert.rgb.keyword = function (rgb) {
  var reversed = reverseKeywords[rgb];

  if (reversed) {
    return reversed;
  }

  var currentClosestDistance = Infinity;
  var currentClosestKeyword;

  for (var keyword in cssKeywords) {
    if (cssKeywords.hasOwnProperty(keyword)) {
      var value = cssKeywords[keyword]; // Compute comparative distance

      var distance = comparativeDistance(rgb, value); // Check if its less, if so set as closest

      if (distance < currentClosestDistance) {
        currentClosestDistance = distance;
        currentClosestKeyword = keyword;
      }
    }
  }

  return currentClosestKeyword;
};

convert.keyword.rgb = function (keyword) {
  return cssKeywords[keyword];
};

convert.rgb.xyz = function (rgb) {
  var r = rgb[0] / 255;
  var g = rgb[1] / 255;
  var b = rgb[2] / 255; // assume sRGB

  r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
  g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
  b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
  var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
  var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
  var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
  return [x * 100, y * 100, z * 100];
};

convert.rgb.lab = function (rgb) {
  var xyz = convert.rgb.xyz(rgb);
  var x = xyz[0];
  var y = xyz[1];
  var z = xyz[2];
  var l;
  var a;
  var b;
  x /= 95.047;
  y /= 100;
  z /= 108.883;
  x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
  y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
  z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
  l = 116 * y - 16;
  a = 500 * (x - y);
  b = 200 * (y - z);
  return [l, a, b];
};

convert.hsl.rgb = function (hsl) {
  var h = hsl[0] / 360;
  var s = hsl[1] / 100;
  var l = hsl[2] / 100;
  var t1;
  var t2;
  var t3;
  var rgb;
  var val;

  if (s === 0) {
    val = l * 255;
    return [val, val, val];
  }

  if (l < 0.5) {
    t2 = l * (1 + s);
  } else {
    t2 = l + s - l * s;
  }

  t1 = 2 * l - t2;
  rgb = [0, 0, 0];

  for (var i = 0; i < 3; i++) {
    t3 = h + 1 / 3 * -(i - 1);

    if (t3 < 0) {
      t3++;
    }

    if (t3 > 1) {
      t3--;
    }

    if (6 * t3 < 1) {
      val = t1 + (t2 - t1) * 6 * t3;
    } else if (2 * t3 < 1) {
      val = t2;
    } else if (3 * t3 < 2) {
      val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
    } else {
      val = t1;
    }

    rgb[i] = val * 255;
  }

  return rgb;
};

convert.hsl.hsv = function (hsl) {
  var h = hsl[0];
  var s = hsl[1] / 100;
  var l = hsl[2] / 100;
  var smin = s;
  var lmin = Math.max(l, 0.01);
  var sv;
  var v;
  l *= 2;
  s *= l <= 1 ? l : 2 - l;
  smin *= lmin <= 1 ? lmin : 2 - lmin;
  v = (l + s) / 2;
  sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
  return [h, sv * 100, v * 100];
};

convert.hsv.rgb = function (hsv) {
  var h = hsv[0] / 60;
  var s = hsv[1] / 100;
  var v = hsv[2] / 100;
  var hi = Math.floor(h) % 6;
  var f = h - Math.floor(h);
  var p = 255 * v * (1 - s);
  var q = 255 * v * (1 - s * f);
  var t = 255 * v * (1 - s * (1 - f));
  v *= 255;

  switch (hi) {
    case 0:
      return [v, t, p];

    case 1:
      return [q, v, p];

    case 2:
      return [p, v, t];

    case 3:
      return [p, q, v];

    case 4:
      return [t, p, v];

    case 5:
      return [v, p, q];
  }
};

convert.hsv.hsl = function (hsv) {
  var h = hsv[0];
  var s = hsv[1] / 100;
  var v = hsv[2] / 100;
  var vmin = Math.max(v, 0.01);
  var lmin;
  var sl;
  var l;
  l = (2 - s) * v;
  lmin = (2 - s) * vmin;
  sl = s * vmin;
  sl /= lmin <= 1 ? lmin : 2 - lmin;
  sl = sl || 0;
  l /= 2;
  return [h, sl * 100, l * 100];
}; // http://dev.w3.org/csswg/css-color/#hwb-to-rgb


convert.hwb.rgb = function (hwb) {
  var h = hwb[0] / 360;
  var wh = hwb[1] / 100;
  var bl = hwb[2] / 100;
  var ratio = wh + bl;
  var i;
  var v;
  var f;
  var n; // wh + bl cant be > 1

  if (ratio > 1) {
    wh /= ratio;
    bl /= ratio;
  }

  i = Math.floor(6 * h);
  v = 1 - bl;
  f = 6 * h - i;

  if ((i & 0x01) !== 0) {
    f = 1 - f;
  }

  n = wh + f * (v - wh); // linear interpolation

  var r;
  var g;
  var b;

  switch (i) {
    default:
    case 6:
    case 0:
      r = v;
      g = n;
      b = wh;
      break;

    case 1:
      r = n;
      g = v;
      b = wh;
      break;

    case 2:
      r = wh;
      g = v;
      b = n;
      break;

    case 3:
      r = wh;
      g = n;
      b = v;
      break;

    case 4:
      r = n;
      g = wh;
      b = v;
      break;

    case 5:
      r = v;
      g = wh;
      b = n;
      break;
  }

  return [r * 255, g * 255, b * 255];
};

convert.cmyk.rgb = function (cmyk) {
  var c = cmyk[0] / 100;
  var m = cmyk[1] / 100;
  var y = cmyk[2] / 100;
  var k = cmyk[3] / 100;
  var r;
  var g;
  var b;
  r = 1 - Math.min(1, c * (1 - k) + k);
  g = 1 - Math.min(1, m * (1 - k) + k);
  b = 1 - Math.min(1, y * (1 - k) + k);
  return [r * 255, g * 255, b * 255];
};

convert.xyz.rgb = function (xyz) {
  var x = xyz[0] / 100;
  var y = xyz[1] / 100;
  var z = xyz[2] / 100;
  var r;
  var g;
  var b;
  r = x * 3.2406 + y * -1.5372 + z * -0.4986;
  g = x * -0.9689 + y * 1.8758 + z * 0.0415;
  b = x * 0.0557 + y * -0.2040 + z * 1.0570; // assume sRGB

  r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r * 12.92;
  g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g * 12.92;
  b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b * 12.92;
  r = Math.min(Math.max(0, r), 1);
  g = Math.min(Math.max(0, g), 1);
  b = Math.min(Math.max(0, b), 1);
  return [r * 255, g * 255, b * 255];
};

convert.xyz.lab = function (xyz) {
  var x = xyz[0];
  var y = xyz[1];
  var z = xyz[2];
  var l;
  var a;
  var b;
  x /= 95.047;
  y /= 100;
  z /= 108.883;
  x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
  y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
  z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
  l = 116 * y - 16;
  a = 500 * (x - y);
  b = 200 * (y - z);
  return [l, a, b];
};

convert.lab.xyz = function (lab) {
  var l = lab[0];
  var a = lab[1];
  var b = lab[2];
  var x;
  var y;
  var z;
  y = (l + 16) / 116;
  x = a / 500 + y;
  z = y - b / 200;
  var y2 = Math.pow(y, 3);
  var x2 = Math.pow(x, 3);
  var z2 = Math.pow(z, 3);
  y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
  x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
  z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;
  x *= 95.047;
  y *= 100;
  z *= 108.883;
  return [x, y, z];
};

convert.lab.lch = function (lab) {
  var l = lab[0];
  var a = lab[1];
  var b = lab[2];
  var hr;
  var h;
  var c;
  hr = Math.atan2(b, a);
  h = hr * 360 / 2 / Math.PI;

  if (h < 0) {
    h += 360;
  }

  c = Math.sqrt(a * a + b * b);
  return [l, c, h];
};

convert.lch.lab = function (lch) {
  var l = lch[0];
  var c = lch[1];
  var h = lch[2];
  var a;
  var b;
  var hr;
  hr = h / 360 * 2 * Math.PI;
  a = c * Math.cos(hr);
  b = c * Math.sin(hr);
  return [l, a, b];
};

convert.rgb.ansi16 = function (args) {
  var r = args[0];
  var g = args[1];
  var b = args[2];
  var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

  value = Math.round(value / 50);

  if (value === 0) {
    return 30;
  }

  var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));

  if (value === 2) {
    ansi += 60;
  }

  return ansi;
};

convert.hsv.ansi16 = function (args) {
  // optimization here; we already know the value and don't need to get
  // it converted for us.
  return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
};

convert.rgb.ansi256 = function (args) {
  var r = args[0];
  var g = args[1];
  var b = args[2]; // we use the extended greyscale palette here, with the exception of
  // black and white. normal palette only has 4 greyscale shades.

  if (r === g && g === b) {
    if (r < 8) {
      return 16;
    }

    if (r > 248) {
      return 231;
    }

    return Math.round((r - 8) / 247 * 24) + 232;
  }

  var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
  return ansi;
};

convert.ansi16.rgb = function (args) {
  var color = args % 10; // handle greyscale

  if (color === 0 || color === 7) {
    if (args > 50) {
      color += 3.5;
    }

    color = color / 10.5 * 255;
    return [color, color, color];
  }

  var mult = (~~(args > 50) + 1) * 0.5;
  var r = (color & 1) * mult * 255;
  var g = (color >> 1 & 1) * mult * 255;
  var b = (color >> 2 & 1) * mult * 255;
  return [r, g, b];
};

convert.ansi256.rgb = function (args) {
  // handle greyscale
  if (args >= 232) {
    var c = (args - 232) * 10 + 8;
    return [c, c, c];
  }

  args -= 16;
  var rem;
  var r = Math.floor(args / 36) / 5 * 255;
  var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
  var b = rem % 6 / 5 * 255;
  return [r, g, b];
};

convert.rgb.hex = function (args) {
  var integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);
  var string = integer.toString(16).toUpperCase();
  return '000000'.substring(string.length) + string;
};

convert.hex.rgb = function (args) {
  var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);

  if (!match) {
    return [0, 0, 0];
  }

  var colorString = match[0];

  if (match[0].length === 3) {
    colorString = colorString.split('').map(function (char) {
      return char + char;
    }).join('');
  }

  var integer = parseInt(colorString, 16);
  var r = integer >> 16 & 0xFF;
  var g = integer >> 8 & 0xFF;
  var b = integer & 0xFF;
  return [r, g, b];
};

convert.rgb.hcg = function (rgb) {
  var r = rgb[0] / 255;
  var g = rgb[1] / 255;
  var b = rgb[2] / 255;
  var max = Math.max(Math.max(r, g), b);
  var min = Math.min(Math.min(r, g), b);
  var chroma = max - min;
  var grayscale;
  var hue;

  if (chroma < 1) {
    grayscale = min / (1 - chroma);
  } else {
    grayscale = 0;
  }

  if (chroma <= 0) {
    hue = 0;
  } else if (max === r) {
    hue = (g - b) / chroma % 6;
  } else if (max === g) {
    hue = 2 + (b - r) / chroma;
  } else {
    hue = 4 + (r - g) / chroma + 4;
  }

  hue /= 6;
  hue %= 1;
  return [hue * 360, chroma * 100, grayscale * 100];
};

convert.hsl.hcg = function (hsl) {
  var s = hsl[1] / 100;
  var l = hsl[2] / 100;
  var c = 1;
  var f = 0;

  if (l < 0.5) {
    c = 2.0 * s * l;
  } else {
    c = 2.0 * s * (1.0 - l);
  }

  if (c < 1.0) {
    f = (l - 0.5 * c) / (1.0 - c);
  }

  return [hsl[0], c * 100, f * 100];
};

convert.hsv.hcg = function (hsv) {
  var s = hsv[1] / 100;
  var v = hsv[2] / 100;
  var c = s * v;
  var f = 0;

  if (c < 1.0) {
    f = (v - c) / (1 - c);
  }

  return [hsv[0], c * 100, f * 100];
};

convert.hcg.rgb = function (hcg) {
  var h = hcg[0] / 360;
  var c = hcg[1] / 100;
  var g = hcg[2] / 100;

  if (c === 0.0) {
    return [g * 255, g * 255, g * 255];
  }

  var pure = [0, 0, 0];
  var hi = h % 1 * 6;
  var v = hi % 1;
  var w = 1 - v;
  var mg = 0;

  switch (Math.floor(hi)) {
    case 0:
      pure[0] = 1;
      pure[1] = v;
      pure[2] = 0;
      break;

    case 1:
      pure[0] = w;
      pure[1] = 1;
      pure[2] = 0;
      break;

    case 2:
      pure[0] = 0;
      pure[1] = 1;
      pure[2] = v;
      break;

    case 3:
      pure[0] = 0;
      pure[1] = w;
      pure[2] = 1;
      break;

    case 4:
      pure[0] = v;
      pure[1] = 0;
      pure[2] = 1;
      break;

    default:
      pure[0] = 1;
      pure[1] = 0;
      pure[2] = w;
  }

  mg = (1.0 - c) * g;
  return [(c * pure[0] + mg) * 255, (c * pure[1] + mg) * 255, (c * pure[2] + mg) * 255];
};

convert.hcg.hsv = function (hcg) {
  var c = hcg[1] / 100;
  var g = hcg[2] / 100;
  var v = c + g * (1.0 - c);
  var f = 0;

  if (v > 0.0) {
    f = c / v;
  }

  return [hcg[0], f * 100, v * 100];
};

convert.hcg.hsl = function (hcg) {
  var c = hcg[1] / 100;
  var g = hcg[2] / 100;
  var l = g * (1.0 - c) + 0.5 * c;
  var s = 0;

  if (l > 0.0 && l < 0.5) {
    s = c / (2 * l);
  } else if (l >= 0.5 && l < 1.0) {
    s = c / (2 * (1 - l));
  }

  return [hcg[0], s * 100, l * 100];
};

convert.hcg.hwb = function (hcg) {
  var c = hcg[1] / 100;
  var g = hcg[2] / 100;
  var v = c + g * (1.0 - c);
  return [hcg[0], (v - c) * 100, (1 - v) * 100];
};

convert.hwb.hcg = function (hwb) {
  var w = hwb[1] / 100;
  var b = hwb[2] / 100;
  var v = 1 - b;
  var c = v - w;
  var g = 0;

  if (c < 1) {
    g = (v - c) / (1 - c);
  }

  return [hwb[0], c * 100, g * 100];
};

convert.apple.rgb = function (apple) {
  return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
};

convert.rgb.apple = function (rgb) {
  return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
};

convert.gray.rgb = function (args) {
  return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
};

convert.gray.hsl = convert.gray.hsv = function (args) {
  return [0, 0, args[0]];
};

convert.gray.hwb = function (gray) {
  return [0, 100, gray[0]];
};

convert.gray.cmyk = function (gray) {
  return [0, 0, 0, gray[0]];
};

convert.gray.lab = function (gray) {
  return [gray[0], 0, 0];
};

convert.gray.hex = function (gray) {
  var val = Math.round(gray[0] / 100 * 255) & 0xFF;
  var integer = (val << 16) + (val << 8) + val;
  var string = integer.toString(16).toUpperCase();
  return '000000'.substring(string.length) + string;
};

convert.rgb.gray = function (rgb) {
  var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
  return [val / 255 * 100];
};

/***/ }),

/***/ "./node_modules/color-convert/index.js":
/*!*********************************************!*\
  !*** ./node_modules/color-convert/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var conversions = __webpack_require__(/*! ./conversions */ "./node_modules/color-convert/conversions.js");

var route = __webpack_require__(/*! ./route */ "./node_modules/color-convert/route.js");

var convert = {};
var models = Object.keys(conversions);

function wrapRaw(fn) {
  var wrappedFn = function (args) {
    if (args === undefined || args === null) {
      return args;
    }

    if (arguments.length > 1) {
      args = Array.prototype.slice.call(arguments);
    }

    return fn(args);
  }; // preserve .conversion property if there is one


  if ('conversion' in fn) {
    wrappedFn.conversion = fn.conversion;
  }

  return wrappedFn;
}

function wrapRounded(fn) {
  var wrappedFn = function (args) {
    if (args === undefined || args === null) {
      return args;
    }

    if (arguments.length > 1) {
      args = Array.prototype.slice.call(arguments);
    }

    var result = fn(args); // we're assuming the result is an array here.
    // see notice in conversions.js; don't use box types
    // in conversion functions.

    if (typeof result === 'object') {
      for (var len = result.length, i = 0; i < len; i++) {
        result[i] = Math.round(result[i]);
      }
    }

    return result;
  }; // preserve .conversion property if there is one


  if ('conversion' in fn) {
    wrappedFn.conversion = fn.conversion;
  }

  return wrappedFn;
}

models.forEach(function (fromModel) {
  convert[fromModel] = {};
  Object.defineProperty(convert[fromModel], 'channels', {
    value: conversions[fromModel].channels
  });
  Object.defineProperty(convert[fromModel], 'labels', {
    value: conversions[fromModel].labels
  });
  var routes = route(fromModel);
  var routeModels = Object.keys(routes);
  routeModels.forEach(function (toModel) {
    var fn = routes[toModel];
    convert[fromModel][toModel] = wrapRounded(fn);
    convert[fromModel][toModel].raw = wrapRaw(fn);
  });
});
module.exports = convert;

/***/ }),

/***/ "./node_modules/color-convert/route.js":
/*!*********************************************!*\
  !*** ./node_modules/color-convert/route.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var conversions = __webpack_require__(/*! ./conversions */ "./node_modules/color-convert/conversions.js");
/*
	this function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/


function buildGraph() {
  var graph = {}; // https://jsperf.com/object-keys-vs-for-in-with-closure/3

  var models = Object.keys(conversions);

  for (var len = models.length, i = 0; i < len; i++) {
    graph[models[i]] = {
      // http://jsperf.com/1-vs-infinity
      // micro-opt, but this is simple.
      distance: -1,
      parent: null
    };
  }

  return graph;
} // https://en.wikipedia.org/wiki/Breadth-first_search


function deriveBFS(fromModel) {
  var graph = buildGraph();
  var queue = [fromModel]; // unshift -> queue -> pop

  graph[fromModel].distance = 0;

  while (queue.length) {
    var current = queue.pop();
    var adjacents = Object.keys(conversions[current]);

    for (var len = adjacents.length, i = 0; i < len; i++) {
      var adjacent = adjacents[i];
      var node = graph[adjacent];

      if (node.distance === -1) {
        node.distance = graph[current].distance + 1;
        node.parent = current;
        queue.unshift(adjacent);
      }
    }
  }

  return graph;
}

function link(from, to) {
  return function (args) {
    return to(from(args));
  };
}

function wrapConversion(toModel, graph) {
  var path = [graph[toModel].parent, toModel];
  var fn = conversions[graph[toModel].parent][toModel];
  var cur = graph[toModel].parent;

  while (graph[cur].parent) {
    path.unshift(graph[cur].parent);
    fn = link(conversions[graph[cur].parent][cur], fn);
    cur = graph[cur].parent;
  }

  fn.conversion = path;
  return fn;
}

module.exports = function (fromModel) {
  var graph = deriveBFS(fromModel);
  var conversion = {};
  var models = Object.keys(graph);

  for (var len = models.length, i = 0; i < len; i++) {
    var toModel = models[i];
    var node = graph[toModel];

    if (node.parent === null) {
      // no possible conversion, or this node is the source model.
      continue;
    }

    conversion[toModel] = wrapConversion(toModel, graph);
  }

  return conversion;
};

/***/ }),

/***/ "./node_modules/color-name/index.js":
/*!******************************************!*\
  !*** ./node_modules/color-name/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  "aliceblue": [240, 248, 255],
  "antiquewhite": [250, 235, 215],
  "aqua": [0, 255, 255],
  "aquamarine": [127, 255, 212],
  "azure": [240, 255, 255],
  "beige": [245, 245, 220],
  "bisque": [255, 228, 196],
  "black": [0, 0, 0],
  "blanchedalmond": [255, 235, 205],
  "blue": [0, 0, 255],
  "blueviolet": [138, 43, 226],
  "brown": [165, 42, 42],
  "burlywood": [222, 184, 135],
  "cadetblue": [95, 158, 160],
  "chartreuse": [127, 255, 0],
  "chocolate": [210, 105, 30],
  "coral": [255, 127, 80],
  "cornflowerblue": [100, 149, 237],
  "cornsilk": [255, 248, 220],
  "crimson": [220, 20, 60],
  "cyan": [0, 255, 255],
  "darkblue": [0, 0, 139],
  "darkcyan": [0, 139, 139],
  "darkgoldenrod": [184, 134, 11],
  "darkgray": [169, 169, 169],
  "darkgreen": [0, 100, 0],
  "darkgrey": [169, 169, 169],
  "darkkhaki": [189, 183, 107],
  "darkmagenta": [139, 0, 139],
  "darkolivegreen": [85, 107, 47],
  "darkorange": [255, 140, 0],
  "darkorchid": [153, 50, 204],
  "darkred": [139, 0, 0],
  "darksalmon": [233, 150, 122],
  "darkseagreen": [143, 188, 143],
  "darkslateblue": [72, 61, 139],
  "darkslategray": [47, 79, 79],
  "darkslategrey": [47, 79, 79],
  "darkturquoise": [0, 206, 209],
  "darkviolet": [148, 0, 211],
  "deeppink": [255, 20, 147],
  "deepskyblue": [0, 191, 255],
  "dimgray": [105, 105, 105],
  "dimgrey": [105, 105, 105],
  "dodgerblue": [30, 144, 255],
  "firebrick": [178, 34, 34],
  "floralwhite": [255, 250, 240],
  "forestgreen": [34, 139, 34],
  "fuchsia": [255, 0, 255],
  "gainsboro": [220, 220, 220],
  "ghostwhite": [248, 248, 255],
  "gold": [255, 215, 0],
  "goldenrod": [218, 165, 32],
  "gray": [128, 128, 128],
  "green": [0, 128, 0],
  "greenyellow": [173, 255, 47],
  "grey": [128, 128, 128],
  "honeydew": [240, 255, 240],
  "hotpink": [255, 105, 180],
  "indianred": [205, 92, 92],
  "indigo": [75, 0, 130],
  "ivory": [255, 255, 240],
  "khaki": [240, 230, 140],
  "lavender": [230, 230, 250],
  "lavenderblush": [255, 240, 245],
  "lawngreen": [124, 252, 0],
  "lemonchiffon": [255, 250, 205],
  "lightblue": [173, 216, 230],
  "lightcoral": [240, 128, 128],
  "lightcyan": [224, 255, 255],
  "lightgoldenrodyellow": [250, 250, 210],
  "lightgray": [211, 211, 211],
  "lightgreen": [144, 238, 144],
  "lightgrey": [211, 211, 211],
  "lightpink": [255, 182, 193],
  "lightsalmon": [255, 160, 122],
  "lightseagreen": [32, 178, 170],
  "lightskyblue": [135, 206, 250],
  "lightslategray": [119, 136, 153],
  "lightslategrey": [119, 136, 153],
  "lightsteelblue": [176, 196, 222],
  "lightyellow": [255, 255, 224],
  "lime": [0, 255, 0],
  "limegreen": [50, 205, 50],
  "linen": [250, 240, 230],
  "magenta": [255, 0, 255],
  "maroon": [128, 0, 0],
  "mediumaquamarine": [102, 205, 170],
  "mediumblue": [0, 0, 205],
  "mediumorchid": [186, 85, 211],
  "mediumpurple": [147, 112, 219],
  "mediumseagreen": [60, 179, 113],
  "mediumslateblue": [123, 104, 238],
  "mediumspringgreen": [0, 250, 154],
  "mediumturquoise": [72, 209, 204],
  "mediumvioletred": [199, 21, 133],
  "midnightblue": [25, 25, 112],
  "mintcream": [245, 255, 250],
  "mistyrose": [255, 228, 225],
  "moccasin": [255, 228, 181],
  "navajowhite": [255, 222, 173],
  "navy": [0, 0, 128],
  "oldlace": [253, 245, 230],
  "olive": [128, 128, 0],
  "olivedrab": [107, 142, 35],
  "orange": [255, 165, 0],
  "orangered": [255, 69, 0],
  "orchid": [218, 112, 214],
  "palegoldenrod": [238, 232, 170],
  "palegreen": [152, 251, 152],
  "paleturquoise": [175, 238, 238],
  "palevioletred": [219, 112, 147],
  "papayawhip": [255, 239, 213],
  "peachpuff": [255, 218, 185],
  "peru": [205, 133, 63],
  "pink": [255, 192, 203],
  "plum": [221, 160, 221],
  "powderblue": [176, 224, 230],
  "purple": [128, 0, 128],
  "rebeccapurple": [102, 51, 153],
  "red": [255, 0, 0],
  "rosybrown": [188, 143, 143],
  "royalblue": [65, 105, 225],
  "saddlebrown": [139, 69, 19],
  "salmon": [250, 128, 114],
  "sandybrown": [244, 164, 96],
  "seagreen": [46, 139, 87],
  "seashell": [255, 245, 238],
  "sienna": [160, 82, 45],
  "silver": [192, 192, 192],
  "skyblue": [135, 206, 235],
  "slateblue": [106, 90, 205],
  "slategray": [112, 128, 144],
  "slategrey": [112, 128, 144],
  "snow": [255, 250, 250],
  "springgreen": [0, 255, 127],
  "steelblue": [70, 130, 180],
  "tan": [210, 180, 140],
  "teal": [0, 128, 128],
  "thistle": [216, 191, 216],
  "tomato": [255, 99, 71],
  "turquoise": [64, 224, 208],
  "violet": [238, 130, 238],
  "wheat": [245, 222, 179],
  "white": [255, 255, 255],
  "whitesmoke": [245, 245, 245],
  "yellow": [255, 255, 0],
  "yellowgreen": [154, 205, 50]
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader

module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return '@media ' + item[2] + '{' + content + '}';
      } else {
        return content;
      }
    }).join('');
  }; // import a list of modules into the list


  list.i = function (modules, mediaQuery) {
    if (typeof modules === 'string') {
      modules = [[null, modules, '']];
    }

    var alreadyImportedModules = {};

    for (var i = 0; i < this.length; i++) {
      var id = this[i][0];

      if (id != null) {
        alreadyImportedModules[id] = true;
      }
    }

    for (i = 0; i < modules.length; i++) {
      var item = modules[i]; // skip already imported module
      // this implementation is not 100% perfect for weird media query combinations
      // when a module is imported multiple times with different media queries.
      // I hope this will never occur (Hey this way we have smaller bundles)

      if (item[0] == null || !alreadyImportedModules[item[0]]) {
        if (mediaQuery && !item[2]) {
          item[2] = mediaQuery;
        } else if (mediaQuery) {
          item[2] = '(' + item[2] + ') and (' + mediaQuery + ')';
        }

        list.push(item);
      }
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || '';
  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;
  return '/*# ' + data + ' */';
}

/***/ }),

/***/ "./node_modules/escape-string-regexp/index.js":
/*!****************************************************!*\
  !*** ./node_modules/escape-string-regexp/index.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;

module.exports = function (str) {
  if (typeof str !== 'string') {
    throw new TypeError('Expected a string');
  }

  return str.replace(matchOperatorsRe, '\\$&');
};

/***/ }),

/***/ "./node_modules/firebase/app/dist/index.cjs.js":
/*!*****************************************************!*\
  !*** ./node_modules/firebase/app/dist/index.cjs.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var firebase = _interopDefault(__webpack_require__(/*! @firebase/app */ "./node_modules/@firebase/app/dist/index.cjs.js"));
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


module.exports = firebase;

/***/ }),

/***/ "./node_modules/firebase/auth/dist/index.esm.js":
/*!******************************************************!*\
  !*** ./node_modules/firebase/auth/dist/index.esm.js ***!
  \******************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _firebase_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/auth */ "./node_modules/@firebase/auth/dist/auth.esm.js");

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/***/ }),

/***/ "./node_modules/firebase/firestore/dist/index.esm.js":
/*!***********************************************************!*\
  !*** ./node_modules/firebase/firestore/dist/index.esm.js ***!
  \***********************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/firestore */ "./node_modules/@firebase/firestore/dist/index.cjs.js");
/* harmony import */ var _firebase_firestore__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_firebase_firestore__WEBPACK_IMPORTED_MODULE_0__);

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/***/ }),

/***/ "./node_modules/firebase/storage/dist/index.esm.js":
/*!*********************************************************!*\
  !*** ./node_modules/firebase/storage/dist/index.esm.js ***!
  \*********************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _firebase_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/storage */ "./node_modules/@firebase/storage/dist/index.esm.js");

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/***/ }),

/***/ "./node_modules/gud/index.js":
/*!***********************************!*\
  !*** ./node_modules/gud/index.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {// @flow


var key = '__global_unique_id__';

module.exports = function () {
  return global[key] = (global[key] || 0) + 1;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/history/esm/history.js":
/*!*********************************************!*\
  !*** ./node_modules/history/esm/history.js ***!
  \*********************************************/
/*! exports provided: createBrowserHistory, createHashHistory, createMemoryHistory, createLocation, locationsAreEqual, parsePath, createPath */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createBrowserHistory", function() { return createBrowserHistory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createHashHistory", function() { return createHashHistory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createMemoryHistory", function() { return createMemoryHistory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createLocation", function() { return createLocation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "locationsAreEqual", function() { return locationsAreEqual; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parsePath", function() { return parsePath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createPath", function() { return createPath; });
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var resolve_pathname__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! resolve-pathname */ "./node_modules/resolve-pathname/index.js");
/* harmony import */ var value_equal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! value-equal */ "./node_modules/value-equal/index.js");
/* harmony import */ var tiny_warning__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! tiny-warning */ "./node_modules/tiny-warning/dist/tiny-warning.esm.js");
/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tiny-invariant */ "./node_modules/tiny-invariant/dist/tiny-invariant.esm.js");






function addLeadingSlash(path) {
  return path.charAt(0) === '/' ? path : '/' + path;
}

function stripLeadingSlash(path) {
  return path.charAt(0) === '/' ? path.substr(1) : path;
}

function hasBasename(path, prefix) {
  return new RegExp('^' + prefix + '(\\/|\\?|#|$)', 'i').test(path);
}

function stripBasename(path, prefix) {
  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
}

function stripTrailingSlash(path) {
  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
}

function parsePath(path) {
  var pathname = path || '/';
  var search = '';
  var hash = '';
  var hashIndex = pathname.indexOf('#');

  if (hashIndex !== -1) {
    hash = pathname.substr(hashIndex);
    pathname = pathname.substr(0, hashIndex);
  }

  var searchIndex = pathname.indexOf('?');

  if (searchIndex !== -1) {
    search = pathname.substr(searchIndex);
    pathname = pathname.substr(0, searchIndex);
  }

  return {
    pathname: pathname,
    search: search === '?' ? '' : search,
    hash: hash === '#' ? '' : hash
  };
}

function createPath(location) {
  var pathname = location.pathname,
      search = location.search,
      hash = location.hash;
  var path = pathname || '/';
  if (search && search !== '?') path += search.charAt(0) === '?' ? search : "?" + search;
  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : "#" + hash;
  return path;
}

function createLocation(path, state, key, currentLocation) {
  var location;

  if (typeof path === 'string') {
    // Two-arg form: push(path, state)
    location = parsePath(path);
    location.state = state;
  } else {
    // One-arg form: push(location)
    location = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, path);
    if (location.pathname === undefined) location.pathname = '';

    if (location.search) {
      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
    } else {
      location.search = '';
    }

    if (location.hash) {
      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
    } else {
      location.hash = '';
    }

    if (state !== undefined && location.state === undefined) location.state = state;
  }

  try {
    location.pathname = decodeURI(location.pathname);
  } catch (e) {
    if (e instanceof URIError) {
      throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
    } else {
      throw e;
    }
  }

  if (key) location.key = key;

  if (currentLocation) {
    // Resolve incomplete/relative pathname relative to current location.
    if (!location.pathname) {
      location.pathname = currentLocation.pathname;
    } else if (location.pathname.charAt(0) !== '/') {
      location.pathname = Object(resolve_pathname__WEBPACK_IMPORTED_MODULE_1__["default"])(location.pathname, currentLocation.pathname);
    }
  } else {
    // When there is no prior location and pathname is empty, set it to /
    if (!location.pathname) {
      location.pathname = '/';
    }
  }

  return location;
}

function locationsAreEqual(a, b) {
  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && Object(value_equal__WEBPACK_IMPORTED_MODULE_2__["default"])(a.state, b.state);
}

function createTransitionManager() {
  var prompt = null;

  function setPrompt(nextPrompt) {
     true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_3__["default"])(prompt == null, 'A history supports only one prompt at a time') : undefined;
    prompt = nextPrompt;
    return function () {
      if (prompt === nextPrompt) prompt = null;
    };
  }

  function confirmTransitionTo(location, action, getUserConfirmation, callback) {
    // TODO: If another transition starts while we're still confirming
    // the previous one, we may end up in a weird state. Figure out the
    // best way to handle this.
    if (prompt != null) {
      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;

      if (typeof result === 'string') {
        if (typeof getUserConfirmation === 'function') {
          getUserConfirmation(result, callback);
        } else {
           true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_3__["default"])(false, 'A history needs a getUserConfirmation function in order to use a prompt message') : undefined;
          callback(true);
        }
      } else {
        // Return false from a transition hook to cancel the transition.
        callback(result !== false);
      }
    } else {
      callback(true);
    }
  }

  var listeners = [];

  function appendListener(fn) {
    var isActive = true;

    function listener() {
      if (isActive) fn.apply(void 0, arguments);
    }

    listeners.push(listener);
    return function () {
      isActive = false;
      listeners = listeners.filter(function (item) {
        return item !== listener;
      });
    };
  }

  function notifyListeners() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    listeners.forEach(function (listener) {
      return listener.apply(void 0, args);
    });
  }

  return {
    setPrompt: setPrompt,
    confirmTransitionTo: confirmTransitionTo,
    appendListener: appendListener,
    notifyListeners: notifyListeners
  };
}

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

function getConfirmation(message, callback) {
  callback(window.confirm(message)); // eslint-disable-line no-alert
}
/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */


function supportsHistory() {
  var ua = window.navigator.userAgent;
  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;
  return window.history && 'pushState' in window.history;
}
/**
 * Returns true if browser fires popstate on hash change.
 * IE10 and IE11 do not.
 */


function supportsPopStateOnHashChange() {
  return window.navigator.userAgent.indexOf('Trident') === -1;
}
/**
 * Returns false if using go(n) with hash history causes a full page reload.
 */


function supportsGoWithoutReloadUsingHash() {
  return window.navigator.userAgent.indexOf('Firefox') === -1;
}
/**
 * Returns true if a given popstate event is an extraneous WebKit event.
 * Accounts for the fact that Chrome on iOS fires real popstate events
 * containing undefined state when pressing the back button.
 */


function isExtraneousPopstateEvent(event) {
  event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
}

var PopStateEvent = 'popstate';
var HashChangeEvent = 'hashchange';

function getHistoryState() {
  try {
    return window.history.state || {};
  } catch (e) {
    // IE 11 sometimes throws when accessing window.history.state
    // See https://github.com/ReactTraining/history/pull/289
    return {};
  }
}
/**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */


function createBrowserHistory(props) {
  if (props === void 0) {
    props = {};
  }

  !canUseDOM ?  true ? Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_4__["default"])(false, 'Browser history needs a DOM') : undefined : void 0;
  var globalHistory = window.history;
  var canUseHistory = supportsHistory();
  var needsHashChangeListener = !supportsPopStateOnHashChange();
  var _props = props,
      _props$forceRefresh = _props.forceRefresh,
      forceRefresh = _props$forceRefresh === void 0 ? false : _props$forceRefresh,
      _props$getUserConfirm = _props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,
      _props$keyLength = _props.keyLength,
      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';

  function getDOMLocation(historyState) {
    var _ref = historyState || {},
        key = _ref.key,
        state = _ref.state;

    var _window$location = window.location,
        pathname = _window$location.pathname,
        search = _window$location.search,
        hash = _window$location.hash;
    var path = pathname + search + hash;
     true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_3__["default"])(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".') : undefined;
    if (basename) path = stripBasename(path, basename);
    return createLocation(path, state, key);
  }

  function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  }

  var transitionManager = createTransitionManager();

  function setState(nextState) {
    Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])(history, nextState);

    history.length = globalHistory.length;
    transitionManager.notifyListeners(history.location, history.action);
  }

  function handlePopState(event) {
    // Ignore extraneous popstate events in WebKit.
    if (isExtraneousPopstateEvent(event)) return;
    handlePop(getDOMLocation(event.state));
  }

  function handleHashChange() {
    handlePop(getDOMLocation(getHistoryState()));
  }

  var forceNextPop = false;

  function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = 'POP';
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (ok) {
          setState({
            action: action,
            location: location
          });
        } else {
          revertPop(location);
        }
      });
    }
  }

  function revertPop(fromLocation) {
    var toLocation = history.location; // TODO: We could probably make this more reliable by
    // keeping a list of keys we've seen in sessionStorage.
    // Instead, we just default to 0 for keys we don't know.

    var toIndex = allKeys.indexOf(toLocation.key);
    if (toIndex === -1) toIndex = 0;
    var fromIndex = allKeys.indexOf(fromLocation.key);
    if (fromIndex === -1) fromIndex = 0;
    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  }

  var initialLocation = getDOMLocation(getHistoryState());
  var allKeys = [initialLocation.key]; // Public interface

  function createHref(location) {
    return basename + createPath(location);
  }

  function push(path, state) {
     true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_3__["default"])(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : undefined;
    var action = 'PUSH';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var href = createHref(location);
      var key = location.key,
          state = location.state;

      if (canUseHistory) {
        globalHistory.pushState({
          key: key,
          state: state
        }, null, href);

        if (forceRefresh) {
          window.location.href = href;
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);
          var nextKeys = allKeys.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);
          nextKeys.push(location.key);
          allKeys = nextKeys;
          setState({
            action: action,
            location: location
          });
        }
      } else {
         true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_3__["default"])(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history') : undefined;
        window.location.href = href;
      }
    });
  }

  function replace(path, state) {
     true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_3__["default"])(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : undefined;
    var action = 'REPLACE';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var href = createHref(location);
      var key = location.key,
          state = location.state;

      if (canUseHistory) {
        globalHistory.replaceState({
          key: key,
          state: state
        }, null, href);

        if (forceRefresh) {
          window.location.replace(href);
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);
          if (prevIndex !== -1) allKeys[prevIndex] = location.key;
          setState({
            action: action,
            location: location
          });
        }
      } else {
         true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_3__["default"])(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history') : undefined;
        window.location.replace(href);
      }
    });
  }

  function go(n) {
    globalHistory.go(n);
  }

  function goBack() {
    go(-1);
  }

  function goForward() {
    go(1);
  }

  var listenerCount = 0;

  function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1 && delta === 1) {
      window.addEventListener(PopStateEvent, handlePopState);
      if (needsHashChangeListener) window.addEventListener(HashChangeEvent, handleHashChange);
    } else if (listenerCount === 0) {
      window.removeEventListener(PopStateEvent, handlePopState);
      if (needsHashChangeListener) window.removeEventListener(HashChangeEvent, handleHashChange);
    }
  }

  var isBlocked = false;

  function block(prompt) {
    if (prompt === void 0) {
      prompt = false;
    }

    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  }

  function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);
    return function () {
      checkDOMListeners(-1);
      unlisten();
    };
  }

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };
  return history;
}

var HashChangeEvent$1 = 'hashchange';
var HashPathCoders = {
  hashbang: {
    encodePath: function encodePath(path) {
      return path.charAt(0) === '!' ? path : '!/' + stripLeadingSlash(path);
    },
    decodePath: function decodePath(path) {
      return path.charAt(0) === '!' ? path.substr(1) : path;
    }
  },
  noslash: {
    encodePath: stripLeadingSlash,
    decodePath: addLeadingSlash
  },
  slash: {
    encodePath: addLeadingSlash,
    decodePath: addLeadingSlash
  }
};

function getHashPath() {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  var href = window.location.href;
  var hashIndex = href.indexOf('#');
  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
}

function pushHashPath(path) {
  window.location.hash = path;
}

function replaceHashPath(path) {
  var hashIndex = window.location.href.indexOf('#');
  window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);
}

function createHashHistory(props) {
  if (props === void 0) {
    props = {};
  }

  !canUseDOM ?  true ? Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_4__["default"])(false, 'Hash history needs a DOM') : undefined : void 0;
  var globalHistory = window.history;
  var canGoWithoutReload = supportsGoWithoutReloadUsingHash();
  var _props = props,
      _props$getUserConfirm = _props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === void 0 ? getConfirmation : _props$getUserConfirm,
      _props$hashType = _props.hashType,
      hashType = _props$hashType === void 0 ? 'slash' : _props$hashType;
  var basename = props.basename ? stripTrailingSlash(addLeadingSlash(props.basename)) : '';
  var _HashPathCoders$hashT = HashPathCoders[hashType],
      encodePath = _HashPathCoders$hashT.encodePath,
      decodePath = _HashPathCoders$hashT.decodePath;

  function getDOMLocation() {
    var path = decodePath(getHashPath());
     true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_3__["default"])(!basename || hasBasename(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".') : undefined;
    if (basename) path = stripBasename(path, basename);
    return createLocation(path);
  }

  var transitionManager = createTransitionManager();

  function setState(nextState) {
    Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])(history, nextState);

    history.length = globalHistory.length;
    transitionManager.notifyListeners(history.location, history.action);
  }

  var forceNextPop = false;
  var ignorePath = null;

  function handleHashChange() {
    var path = getHashPath();
    var encodedPath = encodePath(path);

    if (path !== encodedPath) {
      // Ensure we always have a properly-encoded hash.
      replaceHashPath(encodedPath);
    } else {
      var location = getDOMLocation();
      var prevLocation = history.location;
      if (!forceNextPop && locationsAreEqual(prevLocation, location)) return; // A hashchange doesn't always == location change.

      if (ignorePath === createPath(location)) return; // Ignore this change; we already setState in push/replace.

      ignorePath = null;
      handlePop(location);
    }
  }

  function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = 'POP';
      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (ok) {
          setState({
            action: action,
            location: location
          });
        } else {
          revertPop(location);
        }
      });
    }
  }

  function revertPop(fromLocation) {
    var toLocation = history.location; // TODO: We could probably make this more reliable by
    // keeping a list of paths we've seen in sessionStorage.
    // Instead, we just default to 0 for paths we don't know.

    var toIndex = allPaths.lastIndexOf(createPath(toLocation));
    if (toIndex === -1) toIndex = 0;
    var fromIndex = allPaths.lastIndexOf(createPath(fromLocation));
    if (fromIndex === -1) fromIndex = 0;
    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  } // Ensure the hash is encoded properly before doing anything else.


  var path = getHashPath();
  var encodedPath = encodePath(path);
  if (path !== encodedPath) replaceHashPath(encodedPath);
  var initialLocation = getDOMLocation();
  var allPaths = [createPath(initialLocation)]; // Public interface

  function createHref(location) {
    return '#' + encodePath(basename + createPath(location));
  }

  function push(path, state) {
     true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_3__["default"])(state === undefined, 'Hash history cannot push state; it is ignored') : undefined;
    var action = 'PUSH';
    var location = createLocation(path, undefined, undefined, history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var path = createPath(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a PUSH, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        pushHashPath(encodedPath);
        var prevIndex = allPaths.lastIndexOf(createPath(history.location));
        var nextPaths = allPaths.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);
        nextPaths.push(path);
        allPaths = nextPaths;
        setState({
          action: action,
          location: location
        });
      } else {
         true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_3__["default"])(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack') : undefined;
        setState();
      }
    });
  }

  function replace(path, state) {
     true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_3__["default"])(state === undefined, 'Hash history cannot replace state; it is ignored') : undefined;
    var action = 'REPLACE';
    var location = createLocation(path, undefined, undefined, history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var path = createPath(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a REPLACE, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        replaceHashPath(encodedPath);
      }

      var prevIndex = allPaths.indexOf(createPath(history.location));
      if (prevIndex !== -1) allPaths[prevIndex] = path;
      setState({
        action: action,
        location: location
      });
    });
  }

  function go(n) {
     true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_3__["default"])(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser') : undefined;
    globalHistory.go(n);
  }

  function goBack() {
    go(-1);
  }

  function goForward() {
    go(1);
  }

  var listenerCount = 0;

  function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1 && delta === 1) {
      window.addEventListener(HashChangeEvent$1, handleHashChange);
    } else if (listenerCount === 0) {
      window.removeEventListener(HashChangeEvent$1, handleHashChange);
    }
  }

  var isBlocked = false;

  function block(prompt) {
    if (prompt === void 0) {
      prompt = false;
    }

    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  }

  function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);
    return function () {
      checkDOMListeners(-1);
      unlisten();
    };
  }

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };
  return history;
}

function clamp(n, lowerBound, upperBound) {
  return Math.min(Math.max(n, lowerBound), upperBound);
}
/**
 * Creates a history object that stores locations in memory.
 */


function createMemoryHistory(props) {
  if (props === void 0) {
    props = {};
  }

  var _props = props,
      getUserConfirmation = _props.getUserConfirmation,
      _props$initialEntries = _props.initialEntries,
      initialEntries = _props$initialEntries === void 0 ? ['/'] : _props$initialEntries,
      _props$initialIndex = _props.initialIndex,
      initialIndex = _props$initialIndex === void 0 ? 0 : _props$initialIndex,
      _props$keyLength = _props.keyLength,
      keyLength = _props$keyLength === void 0 ? 6 : _props$keyLength;
  var transitionManager = createTransitionManager();

  function setState(nextState) {
    Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])(history, nextState);

    history.length = history.entries.length;
    transitionManager.notifyListeners(history.location, history.action);
  }

  function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  }

  var index = clamp(initialIndex, 0, initialEntries.length - 1);
  var entries = initialEntries.map(function (entry) {
    return typeof entry === 'string' ? createLocation(entry, undefined, createKey()) : createLocation(entry, undefined, entry.key || createKey());
  }); // Public interface

  var createHref = createPath;

  function push(path, state) {
     true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_3__["default"])(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : undefined;
    var action = 'PUSH';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      var prevIndex = history.index;
      var nextIndex = prevIndex + 1;
      var nextEntries = history.entries.slice(0);

      if (nextEntries.length > nextIndex) {
        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
      } else {
        nextEntries.push(location);
      }

      setState({
        action: action,
        location: location,
        index: nextIndex,
        entries: nextEntries
      });
    });
  }

  function replace(path, state) {
     true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_3__["default"])(!(typeof path === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored') : undefined;
    var action = 'REPLACE';
    var location = createLocation(path, state, createKey(), history.location);
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;
      history.entries[history.index] = location;
      setState({
        action: action,
        location: location
      });
    });
  }

  function go(n) {
    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);
    var action = 'POP';
    var location = history.entries[nextIndex];
    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (ok) {
        setState({
          action: action,
          location: location,
          index: nextIndex
        });
      } else {
        // Mimic the behavior of DOM histories by
        // causing a render after a cancelled POP.
        setState();
      }
    });
  }

  function goBack() {
    go(-1);
  }

  function goForward() {
    go(1);
  }

  function canGo(n) {
    var nextIndex = history.index + n;
    return nextIndex >= 0 && nextIndex < history.entries.length;
  }

  function block(prompt) {
    if (prompt === void 0) {
      prompt = false;
    }

    return transitionManager.setPrompt(prompt);
  }

  function listen(listener) {
    return transitionManager.appendListener(listener);
  }

  var history = {
    length: entries.length,
    action: 'POP',
    location: entries[index],
    index: index,
    entries: entries,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    canGo: canGo,
    block: block,
    listen: listen
  };
  return history;
}



/***/ }),

/***/ "./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

var ReactIs = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js");

var REACT_STATICS = {
  childContextTypes: true,
  contextType: true,
  contextTypes: true,
  defaultProps: true,
  displayName: true,
  getDefaultProps: true,
  getDerivedStateFromError: true,
  getDerivedStateFromProps: true,
  mixins: true,
  propTypes: true,
  type: true
};
var KNOWN_STATICS = {
  name: true,
  length: true,
  prototype: true,
  caller: true,
  callee: true,
  arguments: true,
  arity: true
};
var FORWARD_REF_STATICS = {
  '$$typeof': true,
  render: true,
  defaultProps: true,
  displayName: true,
  propTypes: true
};
var MEMO_STATICS = {
  '$$typeof': true,
  compare: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
  type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[ReactIs.ForwardRef] = FORWARD_REF_STATICS;

function getStatics(component) {
  if (ReactIs.isMemo(component)) {
    return MEMO_STATICS;
  }

  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
}

var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;

function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
  if (typeof sourceComponent !== 'string') {
    // don't hoist over string (html) components
    if (objectPrototype) {
      var inheritedComponent = getPrototypeOf(sourceComponent);

      if (inheritedComponent && inheritedComponent !== objectPrototype) {
        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
      }
    }

    var keys = getOwnPropertyNames(sourceComponent);

    if (getOwnPropertySymbols) {
      keys = keys.concat(getOwnPropertySymbols(sourceComponent));
    }

    var targetStatics = getStatics(targetComponent);
    var sourceStatics = getStatics(sourceComponent);

    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];

      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

        try {
          // Avoid failures from read-only properties
          defineProperty(targetComponent, key, descriptor);
        } catch (e) {}
      }
    }

    return targetComponent;
  }

  return targetComponent;
}

module.exports = hoistNonReactStatics;

/***/ }),

/***/ "./node_modules/inherits/inherits_browser.js":
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;

    var TempCtor = function () {};

    TempCtor.prototype = superCtor.prototype;
    ctor.prototype = new TempCtor();
    ctor.prototype.constructor = ctor;
  };
}

/***/ }),

/***/ "./node_modules/invariant/browser.js":
/*!*******************************************!*\
  !*** ./node_modules/invariant/browser.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function (condition, format, a, b, c, d, e, f) {
  if (true) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;

    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame

    throw error;
  }
};

module.exports = invariant;

/***/ }),

/***/ "./node_modules/json3/lib/json3.js":
/*!*****************************************!*\
  !*** ./node_modules/json3/lib/json3.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! JSON v3.3.2 | https://bestiejs.github.io/json3 | Copyright 2012-2015, Kit Cambridge, Benjamin Tan | http://kit.mit-license.org */
;
(function () {
  // Detect the `define` function exposed by asynchronous module loaders. The
  // strict `define` check is necessary for compatibility with `r.js`.
  var isLoader =  true && __webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js"); // A set of types used to distinguish objects from primitives.

  var objectTypes = {
    "function": true,
    "object": true
  }; // Detect the `exports` object exposed by CommonJS implementations.

  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports; // Use the `global` object exposed by Node (including Browserify via
  // `insert-module-globals`), Narwhal, and Ringo as the default context,
  // and the `window` object in browsers. Rhino exports a `global` function
  // instead.

  var root = objectTypes[typeof window] && window || this,
      freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == "object" && global;

  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {
    root = freeGlobal;
  } // Public: Initializes JSON 3 using the given `context` object, attaching the
  // `stringify` and `parse` functions to the specified `exports` object.


  function runInContext(context, exports) {
    context || (context = root.Object());
    exports || (exports = root.Object()); // Native constructor aliases.

    var Number = context.Number || root.Number,
        String = context.String || root.String,
        Object = context.Object || root.Object,
        Date = context.Date || root.Date,
        SyntaxError = context.SyntaxError || root.SyntaxError,
        TypeError = context.TypeError || root.TypeError,
        Math = context.Math || root.Math,
        nativeJSON = context.JSON || root.JSON; // Delegate to the native `stringify` and `parse` implementations.

    if (typeof nativeJSON == "object" && nativeJSON) {
      exports.stringify = nativeJSON.stringify;
      exports.parse = nativeJSON.parse;
    } // Convenience aliases.


    var objectProto = Object.prototype,
        getClass = objectProto.toString,
        isProperty = objectProto.hasOwnProperty,
        undefined; // Internal: Contains `try...catch` logic used by other functions.
    // This prevents other functions from being deoptimized.

    function attempt(func, errorFunc) {
      try {
        func();
      } catch (exception) {
        if (errorFunc) {
          errorFunc();
        }
      }
    } // Test the `Date#getUTC*` methods. Based on work by @Yaffle.


    var isExtended = new Date(-3509827334573292);
    attempt(function () {
      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
      // results for certain dates in Opera >= 10.53.
      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 && isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
    }); // Internal: Determines whether the native `JSON.stringify` and `parse`
    // implementations are spec-compliant. Based on work by Ken Snyder.

    function has(name) {
      if (has[name] != null) {
        // Return cached feature test result.
        return has[name];
      }

      var isSupported;

      if (name == "bug-string-char-index") {
        // IE <= 7 doesn't support accessing string characters using square
        // bracket notation. IE 8 only supports this for primitives.
        isSupported = "a"[0] != "a";
      } else if (name == "json") {
        // Indicates whether both `JSON.stringify` and `JSON.parse` are
        // supported.
        isSupported = has("json-stringify") && has("date-serialization") && has("json-parse");
      } else if (name == "date-serialization") {
        // Indicates whether `Date`s can be serialized accurately by `JSON.stringify`.
        isSupported = has("json-stringify") && isExtended;

        if (isSupported) {
          var stringify = exports.stringify;
          attempt(function () {
            isSupported = // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
            // serialize extended years.
            stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' && // The milliseconds are optional in ES 5, but required in 5.1.
            stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' && // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
            // four-digit years instead of six-digit years. Credits: @Yaffle.
            stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' && // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
            // values less than 1000. Credits: @Yaffle.
            stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
          });
        }
      } else {
        var value,
            serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}'; // Test `JSON.stringify`.

        if (name == "json-stringify") {
          var stringify = exports.stringify,
              stringifySupported = typeof stringify == "function";

          if (stringifySupported) {
            // A test function object with a custom `toJSON` method.
            (value = function () {
              return 1;
            }).toJSON = value;
            attempt(function () {
              stringifySupported = // Firefox 3.1b1 and b2 serialize string, number, and boolean
              // primitives as object literals.
              stringify(0) === "0" && // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
              // literals.
              stringify(new Number()) === "0" && stringify(new String()) == '""' && // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
              // does not define a canonical JSON representation (this applies to
              // objects with `toJSON` properties as well, *unless* they are nested
              // within an object or array).
              stringify(getClass) === undefined && // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
              // FF 3.1b3 pass this test.
              stringify(undefined) === undefined && // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
              // respectively, if the value is omitted entirely.
              stringify() === undefined && // FF 3.1b1, 2 throw an error if the given value is not a number,
              // string, array, object, Boolean, or `null` literal. This applies to
              // objects with custom `toJSON` methods as well, unless they are nested
              // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
              // methods entirely.
              stringify(value) === "1" && stringify([value]) == "[1]" && // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
              // `"[null]"`.
              stringify([undefined]) == "[null]" && // YUI 3.0.0b1 fails to serialize `null` literals.
              stringify(null) == "null" && // FF 3.1b1, 2 halts serialization if an array contains a function:
              // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
              // elides non-JSON values from objects and arrays, unless they
              // define custom `toJSON` methods.
              stringify([undefined, getClass, null]) == "[null,null,null]" && // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
              // where character escape codes are expected (e.g., `\b` => `\u0008`).
              stringify({
                "a": [value, true, false, null, "\x00\b\n\f\r\t"]
              }) == serialized && // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
              stringify(null, value) === "1" && stringify([1, 2], null, 1) == "[\n 1,\n 2\n]";
            }, function () {
              stringifySupported = false;
            });
          }

          isSupported = stringifySupported;
        } // Test `JSON.parse`.


        if (name == "json-parse") {
          var parse = exports.parse,
              parseSupported;

          if (typeof parse == "function") {
            attempt(function () {
              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
              // Conforming implementations should also coerce the initial argument to
              // a string prior to parsing.
              if (parse("0") === 0 && !parse(false)) {
                // Simple parsing test.
                value = parse(serialized);
                parseSupported = value["a"].length == 5 && value["a"][0] === 1;

                if (parseSupported) {
                  attempt(function () {
                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
                    parseSupported = !parse('"\t"');
                  });

                  if (parseSupported) {
                    attempt(function () {
                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading
                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
                      // certain octal literals.
                      parseSupported = parse("01") !== 1;
                    });
                  }

                  if (parseSupported) {
                    attempt(function () {
                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
                      // points. These environments, along with FF 3.1b1 and 2,
                      // also allow trailing commas in JSON objects and arrays.
                      parseSupported = parse("1.") !== 1;
                    });
                  }
                }
              }
            }, function () {
              parseSupported = false;
            });
          }

          isSupported = parseSupported;
        }
      }

      return has[name] = !!isSupported;
    }

    has["bug-string-char-index"] = has["date-serialization"] = has["json"] = has["json-stringify"] = has["json-parse"] = null;

    if (!has("json")) {
      // Common `[[Class]]` name aliases.
      var functionClass = "[object Function]",
          dateClass = "[object Date]",
          numberClass = "[object Number]",
          stringClass = "[object String]",
          arrayClass = "[object Array]",
          booleanClass = "[object Boolean]"; // Detect incomplete support for accessing string characters by index.

      var charIndexBuggy = has("bug-string-char-index"); // Internal: Normalizes the `for...in` iteration algorithm across
      // environments. Each enumerated key is yielded to a `callback` function.

      var forOwn = function (object, callback) {
        var size = 0,
            Properties,
            dontEnums,
            property; // Tests for bugs in the current environment's `for...in` algorithm. The
        // `valueOf` property inherits the non-enumerable flag from
        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.

        (Properties = function () {
          this.valueOf = 0;
        }).prototype.valueOf = 0; // Iterate over a new instance of the `Properties` class.

        dontEnums = new Properties();

        for (property in dontEnums) {
          // Ignore all properties inherited from `Object.prototype`.
          if (isProperty.call(dontEnums, property)) {
            size++;
          }
        }

        Properties = dontEnums = null; // Normalize the iteration algorithm.

        if (!size) {
          // A list of non-enumerable properties inherited from `Object.prototype`.
          dontEnums = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"]; // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
          // properties.

          forOwn = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass,
                property,
                length;
            var hasProperty = !isFunction && typeof object.constructor != "function" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;

            for (property in object) {
              // Gecko <= 1.0 enumerates the `prototype` property of functions under
              // certain conditions; IE does not.
              if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
                callback(property);
              }
            } // Manually invoke the callback for each non-enumerable property.


            for (length = dontEnums.length; property = dontEnums[--length];) {
              if (hasProperty.call(object, property)) {
                callback(property);
              }
            }
          };
        } else {
          // No bugs detected; use the standard `for...in` algorithm.
          forOwn = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass,
                property,
                isConstructor;

            for (property in object) {
              if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
                callback(property);
              }
            } // Manually invoke the callback for the `constructor` property due to
            // cross-environment inconsistencies.


            if (isConstructor || isProperty.call(object, property = "constructor")) {
              callback(property);
            }
          };
        }

        return forOwn(object, callback);
      }; // Public: Serializes a JavaScript `value` as a JSON string. The optional
      // `filter` argument may specify either a function that alters how object and
      // array members are serialized, or an array of strings and numbers that
      // indicates which properties should be serialized. The optional `width`
      // argument may be either a string or number that specifies the indentation
      // level of the output.


      if (!has("json-stringify") && !has("date-serialization")) {
        // Internal: A map of control characters and their escaped equivalents.
        var Escapes = {
          92: "\\\\",
          34: '\\"',
          8: "\\b",
          12: "\\f",
          10: "\\n",
          13: "\\r",
          9: "\\t"
        }; // Internal: Converts `value` into a zero-padded string such that its
        // length is at least equal to `width`. The `width` must be <= 6.

        var leadingZeroes = "000000";

        var toPaddedString = function (width, value) {
          // The `|| 0` expression is necessary to work around a bug in
          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
          return (leadingZeroes + (value || 0)).slice(-width);
        }; // Internal: Serializes a date object.


        var serializeDate = function (value) {
          var getData, year, month, date, time, hours, minutes, seconds, milliseconds; // Define additional utility methods if the `Date` methods are buggy.

          if (!isExtended) {
            var floor = Math.floor; // A mapping between the months of the year and the number of days between
            // January 1st and the first of the respective month.

            var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334]; // Internal: Calculates the number of days between the Unix epoch and the
            // first day of the given month.

            var getDay = function (year, month) {
              return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
            };

            getData = function (value) {
              // Manually compute the year, month, date, hours, minutes,
              // seconds, and milliseconds if the `getUTC*` methods are
              // buggy. Adapted from @Yaffle's `date-shim` project.
              date = floor(value / 864e5);

              for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);

              for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);

              date = 1 + date - getDay(year, month); // The `time` value specifies the time within the day (see ES
              // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
              // to compute `A modulo B`, as the `%` operator does not
              // correspond to the `modulo` operation for negative numbers.

              time = (value % 864e5 + 864e5) % 864e5; // The hours, minutes, seconds, and milliseconds are obtained by
              // decomposing the time within the day. See section 15.9.1.10.

              hours = floor(time / 36e5) % 24;
              minutes = floor(time / 6e4) % 60;
              seconds = floor(time / 1e3) % 60;
              milliseconds = time % 1e3;
            };
          } else {
            getData = function (value) {
              year = value.getUTCFullYear();
              month = value.getUTCMonth();
              date = value.getUTCDate();
              hours = value.getUTCHours();
              minutes = value.getUTCMinutes();
              seconds = value.getUTCSeconds();
              milliseconds = value.getUTCMilliseconds();
            };
          }

          serializeDate = function (value) {
            if (value > -1 / 0 && value < 1 / 0) {
              // Dates are serialized according to the `Date#toJSON` method
              // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
              // for the ISO 8601 date time string format.
              getData(value); // Serialize extended years correctly.

              value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) + "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) + // Months, dates, hours, minutes, and seconds should have two
              // digits; milliseconds should have three.
              "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) + // Milliseconds are optional in ES 5.0, but required in 5.1.
              "." + toPaddedString(3, milliseconds) + "Z";
              year = month = date = hours = minutes = seconds = milliseconds = null;
            } else {
              value = null;
            }

            return value;
          };

          return serializeDate(value);
        }; // For environments with `JSON.stringify` but buggy date serialization,
        // we override the native `Date#toJSON` implementation with a
        // spec-compliant one.


        if (has("json-stringify") && !has("date-serialization")) {
          // Internal: the `Date#toJSON` implementation used to override the native one.
          function dateToJSON(key) {
            return serializeDate(this);
          } // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.


          var nativeStringify = exports.stringify;

          exports.stringify = function (source, filter, width) {
            var nativeToJSON = Date.prototype.toJSON;
            Date.prototype.toJSON = dateToJSON;
            var result = nativeStringify(source, filter, width);
            Date.prototype.toJSON = nativeToJSON;
            return result;
          };
        } else {
          // Internal: Double-quotes a string `value`, replacing all ASCII control
          // characters (characters with code unit values between 0 and 31) with
          // their escaped equivalents. This is an implementation of the
          // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
          var unicodePrefix = "\\u00";

          var escapeChar = function (character) {
            var charCode = character.charCodeAt(0),
                escaped = Escapes[charCode];

            if (escaped) {
              return escaped;
            }

            return unicodePrefix + toPaddedString(2, charCode.toString(16));
          };

          var reEscape = /[\x00-\x1f\x22\x5c]/g;

          var quote = function (value) {
            reEscape.lastIndex = 0;
            return '"' + (reEscape.test(value) ? value.replace(reEscape, escapeChar) : value) + '"';
          }; // Internal: Recursively serializes an object. Implements the
          // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.


          var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
            var value, type, className, results, element, index, length, prefix, result;
            attempt(function () {
              // Necessary for host object support.
              value = object[property];
            });

            if (typeof value == "object" && value) {
              if (value.getUTCFullYear && getClass.call(value) == dateClass && value.toJSON === Date.prototype.toJSON) {
                value = serializeDate(value);
              } else if (typeof value.toJSON == "function") {
                value = value.toJSON(property);
              }
            }

            if (callback) {
              // If a replacement function was provided, call it to obtain the value
              // for serialization.
              value = callback.call(object, property, value);
            } // Exit early if value is `undefined` or `null`.


            if (value == undefined) {
              return value === undefined ? value : "null";
            }

            type = typeof value; // Only call `getClass` if the value is an object.

            if (type == "object") {
              className = getClass.call(value);
            }

            switch (className || type) {
              case "boolean":
              case booleanClass:
                // Booleans are represented literally.
                return "" + value;

              case "number":
              case numberClass:
                // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
                // `"null"`.
                return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";

              case "string":
              case stringClass:
                // Strings are double-quoted and escaped.
                return quote("" + value);
            } // Recursively serialize objects and arrays.


            if (typeof value == "object") {
              // Check for cyclic structures. This is a linear search; performance
              // is inversely proportional to the number of unique nested objects.
              for (length = stack.length; length--;) {
                if (stack[length] === value) {
                  // Cyclic structures cannot be serialized by `JSON.stringify`.
                  throw TypeError();
                }
              } // Add the object to the stack of traversed objects.


              stack.push(value);
              results = []; // Save the current indentation level and indent one additional level.

              prefix = indentation;
              indentation += whitespace;

              if (className == arrayClass) {
                // Recursively serialize array elements.
                for (index = 0, length = value.length; index < length; index++) {
                  element = serialize(index, value, callback, properties, whitespace, indentation, stack);
                  results.push(element === undefined ? "null" : element);
                }

                result = results.length ? whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : "[" + results.join(",") + "]" : "[]";
              } else {
                // Recursively serialize object members. Members are selected from
                // either a user-specified list of property names, or the object
                // itself.
                forOwn(properties || value, function (property) {
                  var element = serialize(property, value, callback, properties, whitespace, indentation, stack);

                  if (element !== undefined) {
                    // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
                    // is not the empty string, let `member` {quote(property) + ":"}
                    // be the concatenation of `member` and the `space` character."
                    // The "`space` character" refers to the literal space
                    // character, not the `space` {width} argument provided to
                    // `JSON.stringify`.
                    results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
                  }
                });
                result = results.length ? whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : "{" + results.join(",") + "}" : "{}";
              } // Remove the object from the traversed object stack.


              stack.pop();
              return result;
            }
          }; // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.


          exports.stringify = function (source, filter, width) {
            var whitespace, callback, properties, className;

            if (objectTypes[typeof filter] && filter) {
              className = getClass.call(filter);

              if (className == functionClass) {
                callback = filter;
              } else if (className == arrayClass) {
                // Convert the property names array into a makeshift set.
                properties = {};

                for (var index = 0, length = filter.length, value; index < length;) {
                  value = filter[index++];
                  className = getClass.call(value);

                  if (className == "[object String]" || className == "[object Number]") {
                    properties[value] = 1;
                  }
                }
              }
            }

            if (width) {
              className = getClass.call(width);

              if (className == numberClass) {
                // Convert the `width` to an integer and create a string containing
                // `width` number of space characters.
                if ((width -= width % 1) > 0) {
                  if (width > 10) {
                    width = 10;
                  }

                  for (whitespace = ""; whitespace.length < width;) {
                    whitespace += " ";
                  }
                }
              } else if (className == stringClass) {
                whitespace = width.length <= 10 ? width : width.slice(0, 10);
              }
            } // Opera <= 7.54u2 discards the values associated with empty string keys
            // (`""`) only if they are used directly within an object member list
            // (e.g., `!("" in { "": 1})`).


            return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
          };
        }
      } // Public: Parses a JSON source string.


      if (!has("json-parse")) {
        var fromCharCode = String.fromCharCode; // Internal: A map of escaped control characters and their unescaped
        // equivalents.

        var Unescapes = {
          92: "\\",
          34: '"',
          47: "/",
          98: "\b",
          116: "\t",
          110: "\n",
          102: "\f",
          114: "\r"
        }; // Internal: Stores the parser state.

        var Index, Source; // Internal: Resets the parser state and throws a `SyntaxError`.

        var abort = function () {
          Index = Source = null;
          throw SyntaxError();
        }; // Internal: Returns the next token, or `"$"` if the parser has reached
        // the end of the source string. A token may be a string, number, `null`
        // literal, or Boolean literal.


        var lex = function () {
          var source = Source,
              length = source.length,
              value,
              begin,
              position,
              isSigned,
              charCode;

          while (Index < length) {
            charCode = source.charCodeAt(Index);

            switch (charCode) {
              case 9:
              case 10:
              case 13:
              case 32:
                // Skip whitespace tokens, including tabs, carriage returns, line
                // feeds, and space characters.
                Index++;
                break;

              case 123:
              case 125:
              case 91:
              case 93:
              case 58:
              case 44:
                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
                // the current position.
                value = charIndexBuggy ? source.charAt(Index) : source[Index];
                Index++;
                return value;

              case 34:
                // `"` delimits a JSON string; advance to the next character and
                // begin parsing the string. String tokens are prefixed with the
                // sentinel `@` character to distinguish them from punctuators and
                // end-of-string tokens.
                for (value = "@", Index++; Index < length;) {
                  charCode = source.charCodeAt(Index);

                  if (charCode < 32) {
                    // Unescaped ASCII control characters (those with a code unit
                    // less than the space character) are not permitted.
                    abort();
                  } else if (charCode == 92) {
                    // A reverse solidus (`\`) marks the beginning of an escaped
                    // control character (including `"`, `\`, and `/`) or Unicode
                    // escape sequence.
                    charCode = source.charCodeAt(++Index);

                    switch (charCode) {
                      case 92:
                      case 34:
                      case 47:
                      case 98:
                      case 116:
                      case 110:
                      case 102:
                      case 114:
                        // Revive escaped control characters.
                        value += Unescapes[charCode];
                        Index++;
                        break;

                      case 117:
                        // `\u` marks the beginning of a Unicode escape sequence.
                        // Advance to the first character and validate the
                        // four-digit code point.
                        begin = ++Index;

                        for (position = Index + 4; Index < position; Index++) {
                          charCode = source.charCodeAt(Index); // A valid sequence comprises four hexdigits (case-
                          // insensitive) that form a single hexadecimal value.

                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                            // Invalid Unicode escape sequence.
                            abort();
                          }
                        } // Revive the escaped character.


                        value += fromCharCode("0x" + source.slice(begin, Index));
                        break;

                      default:
                        // Invalid escape sequence.
                        abort();
                    }
                  } else {
                    if (charCode == 34) {
                      // An unescaped double-quote character marks the end of the
                      // string.
                      break;
                    }

                    charCode = source.charCodeAt(Index);
                    begin = Index; // Optimize for the common case where a string is valid.

                    while (charCode >= 32 && charCode != 92 && charCode != 34) {
                      charCode = source.charCodeAt(++Index);
                    } // Append the string as-is.


                    value += source.slice(begin, Index);
                  }
                }

                if (source.charCodeAt(Index) == 34) {
                  // Advance to the next character and return the revived string.
                  Index++;
                  return value;
                } // Unterminated string.


                abort();

              default:
                // Parse numbers and literals.
                begin = Index; // Advance past the negative sign, if one is specified.

                if (charCode == 45) {
                  isSigned = true;
                  charCode = source.charCodeAt(++Index);
                } // Parse an integer or floating-point value.


                if (charCode >= 48 && charCode <= 57) {
                  // Leading zeroes are interpreted as octal literals.
                  if (charCode == 48 && (charCode = source.charCodeAt(Index + 1), charCode >= 48 && charCode <= 57)) {
                    // Illegal octal literal.
                    abort();
                  }

                  isSigned = false; // Parse the integer component.

                  for (; Index < length && (charCode = source.charCodeAt(Index), charCode >= 48 && charCode <= 57); Index++); // Floats cannot contain a leading decimal point; however, this
                  // case is already accounted for by the parser.


                  if (source.charCodeAt(Index) == 46) {
                    position = ++Index; // Parse the decimal component.

                    for (; position < length; position++) {
                      charCode = source.charCodeAt(position);

                      if (charCode < 48 || charCode > 57) {
                        break;
                      }
                    }

                    if (position == Index) {
                      // Illegal trailing decimal.
                      abort();
                    }

                    Index = position;
                  } // Parse exponents. The `e` denoting the exponent is
                  // case-insensitive.


                  charCode = source.charCodeAt(Index);

                  if (charCode == 101 || charCode == 69) {
                    charCode = source.charCodeAt(++Index); // Skip past the sign following the exponent, if one is
                    // specified.

                    if (charCode == 43 || charCode == 45) {
                      Index++;
                    } // Parse the exponential component.


                    for (position = Index; position < length; position++) {
                      charCode = source.charCodeAt(position);

                      if (charCode < 48 || charCode > 57) {
                        break;
                      }
                    }

                    if (position == Index) {
                      // Illegal empty exponent.
                      abort();
                    }

                    Index = position;
                  } // Coerce the parsed value to a JavaScript number.


                  return +source.slice(begin, Index);
                } // A negative sign may only precede numbers.


                if (isSigned) {
                  abort();
                } // `true`, `false`, and `null` literals.


                var temp = source.slice(Index, Index + 4);

                if (temp == "true") {
                  Index += 4;
                  return true;
                } else if (temp == "fals" && source.charCodeAt(Index + 4) == 101) {
                  Index += 5;
                  return false;
                } else if (temp == "null") {
                  Index += 4;
                  return null;
                } // Unrecognized token.


                abort();
            }
          } // Return the sentinel `$` character if the parser has reached the end
          // of the source string.


          return "$";
        }; // Internal: Parses a JSON `value` token.


        var get = function (value) {
          var results, hasMembers;

          if (value == "$") {
            // Unexpected end of input.
            abort();
          }

          if (typeof value == "string") {
            if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
              // Remove the sentinel `@` character.
              return value.slice(1);
            } // Parse object and array literals.


            if (value == "[") {
              // Parses a JSON array, returning a new JavaScript array.
              results = [];

              for (;;) {
                value = lex(); // A closing square bracket marks the end of the array literal.

                if (value == "]") {
                  break;
                } // If the array literal contains elements, the current token
                // should be a comma separating the previous element from the
                // next.


                if (hasMembers) {
                  if (value == ",") {
                    value = lex();

                    if (value == "]") {
                      // Unexpected trailing `,` in array literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each array element.
                    abort();
                  }
                } else {
                  hasMembers = true;
                } // Elisions and leading commas are not permitted.


                if (value == ",") {
                  abort();
                }

                results.push(get(value));
              }

              return results;
            } else if (value == "{") {
              // Parses a JSON object, returning a new JavaScript object.
              results = {};

              for (;;) {
                value = lex(); // A closing curly brace marks the end of the object literal.

                if (value == "}") {
                  break;
                } // If the object literal contains members, the current token
                // should be a comma separator.


                if (hasMembers) {
                  if (value == ",") {
                    value = lex();

                    if (value == "}") {
                      // Unexpected trailing `,` in object literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each object member.
                    abort();
                  }
                } else {
                  hasMembers = true;
                } // Leading commas are not permitted, object property names must be
                // double-quoted strings, and a `:` must separate each property
                // name and value.


                if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                  abort();
                }

                results[value.slice(1)] = get(lex());
              }

              return results;
            } // Unexpected token encountered.


            abort();
          }

          return value;
        }; // Internal: Updates a traversed object member.


        var update = function (source, property, callback) {
          var element = walk(source, property, callback);

          if (element === undefined) {
            delete source[property];
          } else {
            source[property] = element;
          }
        }; // Internal: Recursively traverses a parsed JSON object, invoking the
        // `callback` function for each value. This is an implementation of the
        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.


        var walk = function (source, property, callback) {
          var value = source[property],
              length;

          if (typeof value == "object" && value) {
            // `forOwn` can't be used to traverse an array in Opera <= 8.54
            // because its `Object#hasOwnProperty` implementation returns `false`
            // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
            if (getClass.call(value) == arrayClass) {
              for (length = value.length; length--;) {
                update(getClass, forOwn, value, length, callback);
              }
            } else {
              forOwn(value, function (property) {
                update(value, property, callback);
              });
            }
          }

          return callback.call(source, property, value);
        }; // Public: `JSON.parse`. See ES 5.1 section 15.12.2.


        exports.parse = function (source, callback) {
          var result, value;
          Index = 0;
          Source = "" + source;
          result = get(lex()); // If a JSON string contains multiple tokens, it is invalid.

          if (lex() != "$") {
            abort();
          } // Reset the parser state.


          Index = Source = null;
          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
        };
      }
    }

    exports.runInContext = runInContext;
    return exports;
  }

  if (freeExports && !isLoader) {
    // Export for CommonJS environments.
    runInContext(root, freeExports);
  } else {
    // Export for web browsers and JavaScript engines.
    var nativeJSON = root.JSON,
        previousJSON = root.JSON3,
        isRestored = false;
    var JSON3 = runInContext(root, root.JSON3 = {
      // Public: Restores the original value of the global `JSON` object and
      // returns a reference to the `JSON3` object.
      "noConflict": function () {
        if (!isRestored) {
          isRestored = true;
          root.JSON = nativeJSON;
          root.JSON3 = previousJSON;
          nativeJSON = previousJSON = null;
        }

        return JSON3;
      }
    });
    root.JSON = {
      "parse": JSON3.parse,
      "stringify": JSON3.stringify
    };
  } // Export for asynchronous module loaders.


  if (isLoader) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return JSON3;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
}).call(this);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module), __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/lodash/_DataView.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_DataView.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");
/* Built-in method references that are verified to be native. */


var DataView = getNative(root, 'DataView');
module.exports = DataView;

/***/ }),

/***/ "./node_modules/lodash/_Hash.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/_Hash.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var hashClear = __webpack_require__(/*! ./_hashClear */ "./node_modules/lodash/_hashClear.js"),
    hashDelete = __webpack_require__(/*! ./_hashDelete */ "./node_modules/lodash/_hashDelete.js"),
    hashGet = __webpack_require__(/*! ./_hashGet */ "./node_modules/lodash/_hashGet.js"),
    hashHas = __webpack_require__(/*! ./_hashHas */ "./node_modules/lodash/_hashHas.js"),
    hashSet = __webpack_require__(/*! ./_hashSet */ "./node_modules/lodash/_hashSet.js");
/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */


function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
} // Add methods to `Hash`.


Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;
module.exports = Hash;

/***/ }),

/***/ "./node_modules/lodash/_LazyWrapper.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_LazyWrapper.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseCreate = __webpack_require__(/*! ./_baseCreate */ "./node_modules/lodash/_baseCreate.js"),
    baseLodash = __webpack_require__(/*! ./_baseLodash */ "./node_modules/lodash/_baseLodash.js");
/** Used as references for the maximum length and index of an array. */


var MAX_ARRAY_LENGTH = 4294967295;
/**
 * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
 *
 * @private
 * @constructor
 * @param {*} value The value to wrap.
 */

function LazyWrapper(value) {
  this.__wrapped__ = value;
  this.__actions__ = [];
  this.__dir__ = 1;
  this.__filtered__ = false;
  this.__iteratees__ = [];
  this.__takeCount__ = MAX_ARRAY_LENGTH;
  this.__views__ = [];
} // Ensure `LazyWrapper` is an instance of `baseLodash`.


LazyWrapper.prototype = baseCreate(baseLodash.prototype);
LazyWrapper.prototype.constructor = LazyWrapper;
module.exports = LazyWrapper;

/***/ }),

/***/ "./node_modules/lodash/_ListCache.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_ListCache.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var listCacheClear = __webpack_require__(/*! ./_listCacheClear */ "./node_modules/lodash/_listCacheClear.js"),
    listCacheDelete = __webpack_require__(/*! ./_listCacheDelete */ "./node_modules/lodash/_listCacheDelete.js"),
    listCacheGet = __webpack_require__(/*! ./_listCacheGet */ "./node_modules/lodash/_listCacheGet.js"),
    listCacheHas = __webpack_require__(/*! ./_listCacheHas */ "./node_modules/lodash/_listCacheHas.js"),
    listCacheSet = __webpack_require__(/*! ./_listCacheSet */ "./node_modules/lodash/_listCacheSet.js");
/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */


function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
} // Add methods to `ListCache`.


ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;
module.exports = ListCache;

/***/ }),

/***/ "./node_modules/lodash/_LodashWrapper.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_LodashWrapper.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseCreate = __webpack_require__(/*! ./_baseCreate */ "./node_modules/lodash/_baseCreate.js"),
    baseLodash = __webpack_require__(/*! ./_baseLodash */ "./node_modules/lodash/_baseLodash.js");
/**
 * The base constructor for creating `lodash` wrapper objects.
 *
 * @private
 * @param {*} value The value to wrap.
 * @param {boolean} [chainAll] Enable explicit method chain sequences.
 */


function LodashWrapper(value, chainAll) {
  this.__wrapped__ = value;
  this.__actions__ = [];
  this.__chain__ = !!chainAll;
  this.__index__ = 0;
  this.__values__ = undefined;
}

LodashWrapper.prototype = baseCreate(baseLodash.prototype);
LodashWrapper.prototype.constructor = LodashWrapper;
module.exports = LodashWrapper;

/***/ }),

/***/ "./node_modules/lodash/_Map.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/_Map.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");
/* Built-in method references that are verified to be native. */


var Map = getNative(root, 'Map');
module.exports = Map;

/***/ }),

/***/ "./node_modules/lodash/_MapCache.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_MapCache.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var mapCacheClear = __webpack_require__(/*! ./_mapCacheClear */ "./node_modules/lodash/_mapCacheClear.js"),
    mapCacheDelete = __webpack_require__(/*! ./_mapCacheDelete */ "./node_modules/lodash/_mapCacheDelete.js"),
    mapCacheGet = __webpack_require__(/*! ./_mapCacheGet */ "./node_modules/lodash/_mapCacheGet.js"),
    mapCacheHas = __webpack_require__(/*! ./_mapCacheHas */ "./node_modules/lodash/_mapCacheHas.js"),
    mapCacheSet = __webpack_require__(/*! ./_mapCacheSet */ "./node_modules/lodash/_mapCacheSet.js");
/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */


function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;
  this.clear();

  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
} // Add methods to `MapCache`.


MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;
module.exports = MapCache;

/***/ }),

/***/ "./node_modules/lodash/_Promise.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_Promise.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");
/* Built-in method references that are verified to be native. */


var Promise = getNative(root, 'Promise');
module.exports = Promise;

/***/ }),

/***/ "./node_modules/lodash/_Set.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/_Set.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");
/* Built-in method references that are verified to be native. */


var Set = getNative(root, 'Set');
module.exports = Set;

/***/ }),

/***/ "./node_modules/lodash/_SetCache.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_SetCache.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var MapCache = __webpack_require__(/*! ./_MapCache */ "./node_modules/lodash/_MapCache.js"),
    setCacheAdd = __webpack_require__(/*! ./_setCacheAdd */ "./node_modules/lodash/_setCacheAdd.js"),
    setCacheHas = __webpack_require__(/*! ./_setCacheHas */ "./node_modules/lodash/_setCacheHas.js");
/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */


function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;
  this.__data__ = new MapCache();

  while (++index < length) {
    this.add(values[index]);
  }
} // Add methods to `SetCache`.


SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;
module.exports = SetCache;

/***/ }),

/***/ "./node_modules/lodash/_Stack.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_Stack.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(/*! ./_ListCache */ "./node_modules/lodash/_ListCache.js"),
    stackClear = __webpack_require__(/*! ./_stackClear */ "./node_modules/lodash/_stackClear.js"),
    stackDelete = __webpack_require__(/*! ./_stackDelete */ "./node_modules/lodash/_stackDelete.js"),
    stackGet = __webpack_require__(/*! ./_stackGet */ "./node_modules/lodash/_stackGet.js"),
    stackHas = __webpack_require__(/*! ./_stackHas */ "./node_modules/lodash/_stackHas.js"),
    stackSet = __webpack_require__(/*! ./_stackSet */ "./node_modules/lodash/_stackSet.js");
/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */


function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
} // Add methods to `Stack`.


Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;
module.exports = Stack;

/***/ }),

/***/ "./node_modules/lodash/_Symbol.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_Symbol.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");
/** Built-in value references. */


var Symbol = root.Symbol;
module.exports = Symbol;

/***/ }),

/***/ "./node_modules/lodash/_Uint8Array.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_Uint8Array.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");
/** Built-in value references. */


var Uint8Array = root.Uint8Array;
module.exports = Uint8Array;

/***/ }),

/***/ "./node_modules/lodash/_WeakMap.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_WeakMap.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");
/* Built-in method references that are verified to be native. */


var WeakMap = getNative(root, 'WeakMap');
module.exports = WeakMap;

/***/ }),

/***/ "./node_modules/lodash/_apply.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_apply.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0:
      return func.call(thisArg);

    case 1:
      return func.call(thisArg, args[0]);

    case 2:
      return func.call(thisArg, args[0], args[1]);

    case 3:
      return func.call(thisArg, args[0], args[1], args[2]);
  }

  return func.apply(thisArg, args);
}

module.exports = apply;

/***/ }),

/***/ "./node_modules/lodash/_arrayAggregator.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_arrayAggregator.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * A specialized version of `baseAggregator` for arrays.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} setter The function to set `accumulator` values.
 * @param {Function} iteratee The iteratee to transform keys.
 * @param {Object} accumulator The initial aggregated object.
 * @returns {Function} Returns `accumulator`.
 */
function arrayAggregator(array, setter, iteratee, accumulator) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    var value = array[index];
    setter(accumulator, value, iteratee(value), array);
  }

  return accumulator;
}

module.exports = arrayAggregator;

/***/ }),

/***/ "./node_modules/lodash/_arrayEach.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_arrayEach.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }

  return array;
}

module.exports = arrayEach;

/***/ }),

/***/ "./node_modules/lodash/_arrayEvery.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_arrayEvery.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.every` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`.
 */
function arrayEvery(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (!predicate(array[index], index, array)) {
      return false;
    }
  }

  return true;
}

module.exports = arrayEvery;

/***/ }),

/***/ "./node_modules/lodash/_arrayFilter.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_arrayFilter.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];

    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }

  return result;
}

module.exports = arrayFilter;

/***/ }),

/***/ "./node_modules/lodash/_arrayIncludes.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_arrayIncludes.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseIndexOf = __webpack_require__(/*! ./_baseIndexOf */ "./node_modules/lodash/_baseIndexOf.js");
/**
 * A specialized version of `_.includes` for arrays without support for
 * specifying an index to search from.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */


function arrayIncludes(array, value) {
  var length = array == null ? 0 : array.length;
  return !!length && baseIndexOf(array, value, 0) > -1;
}

module.exports = arrayIncludes;

/***/ }),

/***/ "./node_modules/lodash/_arrayIncludesWith.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash/_arrayIncludesWith.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * This function is like `arrayIncludes` except that it accepts a comparator.
 *
 * @private
 * @param {Array} [array] The array to inspect.
 * @param {*} target The value to search for.
 * @param {Function} comparator The comparator invoked per element.
 * @returns {boolean} Returns `true` if `target` is found, else `false`.
 */
function arrayIncludesWith(array, value, comparator) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (comparator(value, array[index])) {
      return true;
    }
  }

  return false;
}

module.exports = arrayIncludesWith;

/***/ }),

/***/ "./node_modules/lodash/_arrayLikeKeys.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_arrayLikeKeys.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseTimes = __webpack_require__(/*! ./_baseTimes */ "./node_modules/lodash/_baseTimes.js"),
    isArguments = __webpack_require__(/*! ./isArguments */ "./node_modules/lodash/isArguments.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isBuffer = __webpack_require__(/*! ./isBuffer */ "./node_modules/lodash/isBuffer.js"),
    isIndex = __webpack_require__(/*! ./_isIndex */ "./node_modules/lodash/_isIndex.js"),
    isTypedArray = __webpack_require__(/*! ./isTypedArray */ "./node_modules/lodash/isTypedArray.js");
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */

function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && ( // Safari 9 has enumerable `arguments.length` in strict mode.
    key == 'length' || // Node.js 0.10 has enumerable non-index properties on buffers.
    isBuff && (key == 'offset' || key == 'parent') || // PhantomJS 2 has enumerable non-index properties on typed arrays.
    isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
    isIndex(key, length)))) {
      result.push(key);
    }
  }

  return result;
}

module.exports = arrayLikeKeys;

/***/ }),

/***/ "./node_modules/lodash/_arrayMap.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_arrayMap.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }

  return result;
}

module.exports = arrayMap;

/***/ }),

/***/ "./node_modules/lodash/_arrayPush.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_arrayPush.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }

  return array;
}

module.exports = arrayPush;

/***/ }),

/***/ "./node_modules/lodash/_arrayReduce.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_arrayReduce.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.reduce` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @param {boolean} [initAccum] Specify using the first element of `array` as
 *  the initial value.
 * @returns {*} Returns the accumulated value.
 */
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index = -1,
      length = array == null ? 0 : array.length;

  if (initAccum && length) {
    accumulator = array[++index];
  }

  while (++index < length) {
    accumulator = iteratee(accumulator, array[index], index, array);
  }

  return accumulator;
}

module.exports = arrayReduce;

/***/ }),

/***/ "./node_modules/lodash/_arraySome.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_arraySome.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }

  return false;
}

module.exports = arraySome;

/***/ }),

/***/ "./node_modules/lodash/_asciiSize.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_asciiSize.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseProperty = __webpack_require__(/*! ./_baseProperty */ "./node_modules/lodash/_baseProperty.js");
/**
 * Gets the size of an ASCII `string`.
 *
 * @private
 * @param {string} string The string inspect.
 * @returns {number} Returns the string size.
 */


var asciiSize = baseProperty('length');
module.exports = asciiSize;

/***/ }),

/***/ "./node_modules/lodash/_asciiToArray.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_asciiToArray.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function asciiToArray(string) {
  return string.split('');
}

module.exports = asciiToArray;

/***/ }),

/***/ "./node_modules/lodash/_assignMergeValue.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_assignMergeValue.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ "./node_modules/lodash/_baseAssignValue.js"),
    eq = __webpack_require__(/*! ./eq */ "./node_modules/lodash/eq.js");
/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */


function assignMergeValue(object, key, value) {
  if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignMergeValue;

/***/ }),

/***/ "./node_modules/lodash/_assignValue.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_assignValue.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ "./node_modules/lodash/_baseAssignValue.js"),
    eq = __webpack_require__(/*! ./eq */ "./node_modules/lodash/eq.js");
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */

function assignValue(object, key, value) {
  var objValue = object[key];

  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;

/***/ }),

/***/ "./node_modules/lodash/_assocIndexOf.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_assocIndexOf.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var eq = __webpack_require__(/*! ./eq */ "./node_modules/lodash/eq.js");
/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */


function assocIndexOf(array, key) {
  var length = array.length;

  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }

  return -1;
}

module.exports = assocIndexOf;

/***/ }),

/***/ "./node_modules/lodash/_baseAggregator.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_baseAggregator.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseEach = __webpack_require__(/*! ./_baseEach */ "./node_modules/lodash/_baseEach.js");
/**
 * Aggregates elements of `collection` on `accumulator` with keys transformed
 * by `iteratee` and values set by `setter`.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} setter The function to set `accumulator` values.
 * @param {Function} iteratee The iteratee to transform keys.
 * @param {Object} accumulator The initial aggregated object.
 * @returns {Function} Returns `accumulator`.
 */


function baseAggregator(collection, setter, iteratee, accumulator) {
  baseEach(collection, function (value, key, collection) {
    setter(accumulator, value, iteratee(value), collection);
  });
  return accumulator;
}

module.exports = baseAggregator;

/***/ }),

/***/ "./node_modules/lodash/_baseAssign.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseAssign.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");
/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */


function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

module.exports = baseAssign;

/***/ }),

/***/ "./node_modules/lodash/_baseAssignIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseAssignIn.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    keysIn = __webpack_require__(/*! ./keysIn */ "./node_modules/lodash/keysIn.js");
/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */


function baseAssignIn(object, source) {
  return object && copyObject(source, keysIn(source), object);
}

module.exports = baseAssignIn;

/***/ }),

/***/ "./node_modules/lodash/_baseAssignValue.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseAssignValue.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var defineProperty = __webpack_require__(/*! ./_defineProperty */ "./node_modules/lodash/_defineProperty.js");
/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */


function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;

/***/ }),

/***/ "./node_modules/lodash/_baseClone.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseClone.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__(/*! ./_Stack */ "./node_modules/lodash/_Stack.js"),
    arrayEach = __webpack_require__(/*! ./_arrayEach */ "./node_modules/lodash/_arrayEach.js"),
    assignValue = __webpack_require__(/*! ./_assignValue */ "./node_modules/lodash/_assignValue.js"),
    baseAssign = __webpack_require__(/*! ./_baseAssign */ "./node_modules/lodash/_baseAssign.js"),
    baseAssignIn = __webpack_require__(/*! ./_baseAssignIn */ "./node_modules/lodash/_baseAssignIn.js"),
    cloneBuffer = __webpack_require__(/*! ./_cloneBuffer */ "./node_modules/lodash/_cloneBuffer.js"),
    copyArray = __webpack_require__(/*! ./_copyArray */ "./node_modules/lodash/_copyArray.js"),
    copySymbols = __webpack_require__(/*! ./_copySymbols */ "./node_modules/lodash/_copySymbols.js"),
    copySymbolsIn = __webpack_require__(/*! ./_copySymbolsIn */ "./node_modules/lodash/_copySymbolsIn.js"),
    getAllKeys = __webpack_require__(/*! ./_getAllKeys */ "./node_modules/lodash/_getAllKeys.js"),
    getAllKeysIn = __webpack_require__(/*! ./_getAllKeysIn */ "./node_modules/lodash/_getAllKeysIn.js"),
    getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    initCloneArray = __webpack_require__(/*! ./_initCloneArray */ "./node_modules/lodash/_initCloneArray.js"),
    initCloneByTag = __webpack_require__(/*! ./_initCloneByTag */ "./node_modules/lodash/_initCloneByTag.js"),
    initCloneObject = __webpack_require__(/*! ./_initCloneObject */ "./node_modules/lodash/_initCloneObject.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isBuffer = __webpack_require__(/*! ./isBuffer */ "./node_modules/lodash/isBuffer.js"),
    isMap = __webpack_require__(/*! ./isMap */ "./node_modules/lodash/isMap.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    isSet = __webpack_require__(/*! ./isSet */ "./node_modules/lodash/isSet.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");
/** Used to compose bitmasks for cloning. */


var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;
/** `Object#toString` result references. */

var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';
/** Used to identify `toStringTag` values supported by `_.clone`. */

var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */

function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }

  if (result !== undefined) {
    return result;
  }

  if (!isObject(value)) {
    return value;
  }

  var isArr = isArray(value);

  if (isArr) {
    result = initCloneArray(value);

    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }

    if (tag == objectTag || tag == argsTag || isFunc && !object) {
      result = isFlat || isFunc ? {} : initCloneObject(value);

      if (!isDeep) {
        return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }

      result = initCloneByTag(value, tag, isDeep);
    }
  } // Check for circular references and return its corresponding clone.


  stack || (stack = new Stack());
  var stacked = stack.get(value);

  if (stacked) {
    return stacked;
  }

  stack.set(value, result);

  if (isSet(value)) {
    value.forEach(function (subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
    return result;
  }

  if (isMap(value)) {
    value.forEach(function (subValue, key) {
      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
    return result;
  }

  var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function (subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    } // Recursively populate clone (susceptible to call stack limits).


    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

module.exports = baseClone;

/***/ }),

/***/ "./node_modules/lodash/_baseCreate.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseCreate.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js");
/** Built-in value references. */


var objectCreate = Object.create;
/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */

var baseCreate = function () {
  function object() {}

  return function (proto) {
    if (!isObject(proto)) {
      return {};
    }

    if (objectCreate) {
      return objectCreate(proto);
    }

    object.prototype = proto;
    var result = new object();
    object.prototype = undefined;
    return result;
  };
}();

module.exports = baseCreate;

/***/ }),

/***/ "./node_modules/lodash/_baseDifference.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_baseDifference.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var SetCache = __webpack_require__(/*! ./_SetCache */ "./node_modules/lodash/_SetCache.js"),
    arrayIncludes = __webpack_require__(/*! ./_arrayIncludes */ "./node_modules/lodash/_arrayIncludes.js"),
    arrayIncludesWith = __webpack_require__(/*! ./_arrayIncludesWith */ "./node_modules/lodash/_arrayIncludesWith.js"),
    arrayMap = __webpack_require__(/*! ./_arrayMap */ "./node_modules/lodash/_arrayMap.js"),
    baseUnary = __webpack_require__(/*! ./_baseUnary */ "./node_modules/lodash/_baseUnary.js"),
    cacheHas = __webpack_require__(/*! ./_cacheHas */ "./node_modules/lodash/_cacheHas.js");
/** Used as the size to enable large array optimizations. */


var LARGE_ARRAY_SIZE = 200;
/**
 * The base implementation of methods like `_.difference` without support
 * for excluding multiple arrays or iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Array} values The values to exclude.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 */

function baseDifference(array, values, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      isCommon = true,
      length = array.length,
      result = [],
      valuesLength = values.length;

  if (!length) {
    return result;
  }

  if (iteratee) {
    values = arrayMap(values, baseUnary(iteratee));
  }

  if (comparator) {
    includes = arrayIncludesWith;
    isCommon = false;
  } else if (values.length >= LARGE_ARRAY_SIZE) {
    includes = cacheHas;
    isCommon = false;
    values = new SetCache(values);
  }

  outer: while (++index < length) {
    var value = array[index],
        computed = iteratee == null ? value : iteratee(value);
    value = comparator || value !== 0 ? value : 0;

    if (isCommon && computed === computed) {
      var valuesIndex = valuesLength;

      while (valuesIndex--) {
        if (values[valuesIndex] === computed) {
          continue outer;
        }
      }

      result.push(value);
    } else if (!includes(values, computed, comparator)) {
      result.push(value);
    }
  }

  return result;
}

module.exports = baseDifference;

/***/ }),

/***/ "./node_modules/lodash/_baseEach.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseEach.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseForOwn = __webpack_require__(/*! ./_baseForOwn */ "./node_modules/lodash/_baseForOwn.js"),
    createBaseEach = __webpack_require__(/*! ./_createBaseEach */ "./node_modules/lodash/_createBaseEach.js");
/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */


var baseEach = createBaseEach(baseForOwn);
module.exports = baseEach;

/***/ }),

/***/ "./node_modules/lodash/_baseEvery.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseEvery.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseEach = __webpack_require__(/*! ./_baseEach */ "./node_modules/lodash/_baseEach.js");
/**
 * The base implementation of `_.every` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`
 */


function baseEvery(collection, predicate) {
  var result = true;
  baseEach(collection, function (value, index, collection) {
    result = !!predicate(value, index, collection);
    return result;
  });
  return result;
}

module.exports = baseEvery;

/***/ }),

/***/ "./node_modules/lodash/_baseFilter.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseFilter.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseEach = __webpack_require__(/*! ./_baseEach */ "./node_modules/lodash/_baseEach.js");
/**
 * The base implementation of `_.filter` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */


function baseFilter(collection, predicate) {
  var result = [];
  baseEach(collection, function (value, index, collection) {
    if (predicate(value, index, collection)) {
      result.push(value);
    }
  });
  return result;
}

module.exports = baseFilter;

/***/ }),

/***/ "./node_modules/lodash/_baseFindIndex.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_baseFindIndex.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while (fromRight ? index-- : ++index < length) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }

  return -1;
}

module.exports = baseFindIndex;

/***/ }),

/***/ "./node_modules/lodash/_baseFlatten.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseFlatten.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayPush = __webpack_require__(/*! ./_arrayPush */ "./node_modules/lodash/_arrayPush.js"),
    isFlattenable = __webpack_require__(/*! ./_isFlattenable */ "./node_modules/lodash/_isFlattenable.js");
/**
 * The base implementation of `_.flatten` with support for restricting flattening.
 *
 * @private
 * @param {Array} array The array to flatten.
 * @param {number} depth The maximum recursion depth.
 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
 * @param {Array} [result=[]] The initial result value.
 * @returns {Array} Returns the new flattened array.
 */


function baseFlatten(array, depth, predicate, isStrict, result) {
  var index = -1,
      length = array.length;
  predicate || (predicate = isFlattenable);
  result || (result = []);

  while (++index < length) {
    var value = array[index];

    if (depth > 0 && predicate(value)) {
      if (depth > 1) {
        // Recursively flatten arrays (susceptible to call stack limits).
        baseFlatten(value, depth - 1, predicate, isStrict, result);
      } else {
        arrayPush(result, value);
      }
    } else if (!isStrict) {
      result[result.length] = value;
    }
  }

  return result;
}

module.exports = baseFlatten;

/***/ }),

/***/ "./node_modules/lodash/_baseFor.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseFor.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var createBaseFor = __webpack_require__(/*! ./_createBaseFor */ "./node_modules/lodash/_createBaseFor.js");
/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */


var baseFor = createBaseFor();
module.exports = baseFor;

/***/ }),

/***/ "./node_modules/lodash/_baseForOwn.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseForOwn.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseFor = __webpack_require__(/*! ./_baseFor */ "./node_modules/lodash/_baseFor.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");
/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */


function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

module.exports = baseForOwn;

/***/ }),

/***/ "./node_modules/lodash/_baseGet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseGet.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var castPath = __webpack_require__(/*! ./_castPath */ "./node_modules/lodash/_castPath.js"),
    toKey = __webpack_require__(/*! ./_toKey */ "./node_modules/lodash/_toKey.js");
/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */


function baseGet(object, path) {
  path = castPath(path, object);
  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }

  return index && index == length ? object : undefined;
}

module.exports = baseGet;

/***/ }),

/***/ "./node_modules/lodash/_baseGetAllKeys.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_baseGetAllKeys.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayPush = __webpack_require__(/*! ./_arrayPush */ "./node_modules/lodash/_arrayPush.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js");
/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */


function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;

/***/ }),

/***/ "./node_modules/lodash/_baseGetTag.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseGetTag.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js"),
    getRawTag = __webpack_require__(/*! ./_getRawTag */ "./node_modules/lodash/_getRawTag.js"),
    objectToString = __webpack_require__(/*! ./_objectToString */ "./node_modules/lodash/_objectToString.js");
/** `Object#toString` result references. */


var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';
/** Built-in value references. */

var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }

  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}

module.exports = baseGetTag;

/***/ }),

/***/ "./node_modules/lodash/_baseHas.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseHas.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.has` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */

function baseHas(object, key) {
  return object != null && hasOwnProperty.call(object, key);
}

module.exports = baseHas;

/***/ }),

/***/ "./node_modules/lodash/_baseHasIn.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseHasIn.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

module.exports = baseHasIn;

/***/ }),

/***/ "./node_modules/lodash/_baseIndexOf.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseIndexOf.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseFindIndex = __webpack_require__(/*! ./_baseFindIndex */ "./node_modules/lodash/_baseFindIndex.js"),
    baseIsNaN = __webpack_require__(/*! ./_baseIsNaN */ "./node_modules/lodash/_baseIsNaN.js"),
    strictIndexOf = __webpack_require__(/*! ./_strictIndexOf */ "./node_modules/lodash/_strictIndexOf.js");
/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */


function baseIndexOf(array, value, fromIndex) {
  return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
}

module.exports = baseIndexOf;

/***/ }),

/***/ "./node_modules/lodash/_baseInvoke.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseInvoke.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var apply = __webpack_require__(/*! ./_apply */ "./node_modules/lodash/_apply.js"),
    castPath = __webpack_require__(/*! ./_castPath */ "./node_modules/lodash/_castPath.js"),
    last = __webpack_require__(/*! ./last */ "./node_modules/lodash/last.js"),
    parent = __webpack_require__(/*! ./_parent */ "./node_modules/lodash/_parent.js"),
    toKey = __webpack_require__(/*! ./_toKey */ "./node_modules/lodash/_toKey.js");
/**
 * The base implementation of `_.invoke` without support for individual
 * method arguments.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the method to invoke.
 * @param {Array} args The arguments to invoke the method with.
 * @returns {*} Returns the result of the invoked method.
 */


function baseInvoke(object, path, args) {
  path = castPath(path, object);
  object = parent(object, path);
  var func = object == null ? object : object[toKey(last(path))];
  return func == null ? undefined : apply(func, object, args);
}

module.exports = baseInvoke;

/***/ }),

/***/ "./node_modules/lodash/_baseIsArguments.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseIsArguments.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");
/** `Object#toString` result references. */


var argsTag = '[object Arguments]';
/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */

function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;

/***/ }),

/***/ "./node_modules/lodash/_baseIsEqual.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseIsEqual.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseIsEqualDeep = __webpack_require__(/*! ./_baseIsEqualDeep */ "./node_modules/lodash/_baseIsEqualDeep.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");
/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */


function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }

  if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
    return value !== value && other !== other;
  }

  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;

/***/ }),

/***/ "./node_modules/lodash/_baseIsEqualDeep.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseIsEqualDeep.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__(/*! ./_Stack */ "./node_modules/lodash/_Stack.js"),
    equalArrays = __webpack_require__(/*! ./_equalArrays */ "./node_modules/lodash/_equalArrays.js"),
    equalByTag = __webpack_require__(/*! ./_equalByTag */ "./node_modules/lodash/_equalByTag.js"),
    equalObjects = __webpack_require__(/*! ./_equalObjects */ "./node_modules/lodash/_equalObjects.js"),
    getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isBuffer = __webpack_require__(/*! ./isBuffer */ "./node_modules/lodash/isBuffer.js"),
    isTypedArray = __webpack_require__(/*! ./isTypedArray */ "./node_modules/lodash/isTypedArray.js");
/** Used to compose bitmasks for value comparisons. */


var COMPARE_PARTIAL_FLAG = 1;
/** `Object#toString` result references. */

var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';
/** Used for built-in method references. */

var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);
  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;
  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }

    objIsArr = true;
    objIsObj = false;
  }

  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack());
    return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }

  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;
      stack || (stack = new Stack());
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }

  if (!isSameTag) {
    return false;
  }

  stack || (stack = new Stack());
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;

/***/ }),

/***/ "./node_modules/lodash/_baseIsMap.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseIsMap.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");
/** `Object#toString` result references. */


var mapTag = '[object Map]';
/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */

function baseIsMap(value) {
  return isObjectLike(value) && getTag(value) == mapTag;
}

module.exports = baseIsMap;

/***/ }),

/***/ "./node_modules/lodash/_baseIsMatch.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseIsMatch.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__(/*! ./_Stack */ "./node_modules/lodash/_Stack.js"),
    baseIsEqual = __webpack_require__(/*! ./_baseIsEqual */ "./node_modules/lodash/_baseIsEqual.js");
/** Used to compose bitmasks for value comparisons. */


var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;
/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */

function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }

  object = Object(object);

  while (index--) {
    var data = matchData[index];

    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
      return false;
    }
  }

  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack();

      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }

      if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
        return false;
      }
    }
  }

  return true;
}

module.exports = baseIsMatch;

/***/ }),

/***/ "./node_modules/lodash/_baseIsNaN.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseIsNaN.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

module.exports = baseIsNaN;

/***/ }),

/***/ "./node_modules/lodash/_baseIsNative.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseIsNative.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__(/*! ./isFunction */ "./node_modules/lodash/isFunction.js"),
    isMasked = __webpack_require__(/*! ./_isMasked */ "./node_modules/lodash/_isMasked.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    toSource = __webpack_require__(/*! ./_toSource */ "./node_modules/lodash/_toSource.js");
/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */


var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
/** Used to detect host constructors (Safari). */

var reIsHostCtor = /^\[object .+?Constructor\]$/;
/** Used for built-in method references. */

var funcProto = Function.prototype,
    objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */

var funcToString = funcProto.toString;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to detect if a method is native. */

var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */

function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }

  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;

/***/ }),

/***/ "./node_modules/lodash/_baseIsSet.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseIsSet.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");
/** `Object#toString` result references. */


var setTag = '[object Set]';
/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */

function baseIsSet(value) {
  return isObjectLike(value) && getTag(value) == setTag;
}

module.exports = baseIsSet;

/***/ }),

/***/ "./node_modules/lodash/_baseIsTypedArray.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_baseIsTypedArray.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isLength = __webpack_require__(/*! ./isLength */ "./node_modules/lodash/isLength.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");
/** `Object#toString` result references. */


var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';
/** Used to identify `toStringTag` values of typed arrays. */

var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */

function baseIsTypedArray(value) {
  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;

/***/ }),

/***/ "./node_modules/lodash/_baseIteratee.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseIteratee.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseMatches = __webpack_require__(/*! ./_baseMatches */ "./node_modules/lodash/_baseMatches.js"),
    baseMatchesProperty = __webpack_require__(/*! ./_baseMatchesProperty */ "./node_modules/lodash/_baseMatchesProperty.js"),
    identity = __webpack_require__(/*! ./identity */ "./node_modules/lodash/identity.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    property = __webpack_require__(/*! ./property */ "./node_modules/lodash/property.js");
/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */


function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }

  if (value == null) {
    return identity;
  }

  if (typeof value == 'object') {
    return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
  }

  return property(value);
}

module.exports = baseIteratee;

/***/ }),

/***/ "./node_modules/lodash/_baseKeys.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseKeys.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isPrototype = __webpack_require__(/*! ./_isPrototype */ "./node_modules/lodash/_isPrototype.js"),
    nativeKeys = __webpack_require__(/*! ./_nativeKeys */ "./node_modules/lodash/_nativeKeys.js");
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }

  var result = [];

  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }

  return result;
}

module.exports = baseKeys;

/***/ }),

/***/ "./node_modules/lodash/_baseKeysIn.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseKeysIn.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    isPrototype = __webpack_require__(/*! ./_isPrototype */ "./node_modules/lodash/_isPrototype.js"),
    nativeKeysIn = __webpack_require__(/*! ./_nativeKeysIn */ "./node_modules/lodash/_nativeKeysIn.js");
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */

function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }

  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }

  return result;
}

module.exports = baseKeysIn;

/***/ }),

/***/ "./node_modules/lodash/_baseLodash.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseLodash.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * The function whose prototype chain sequence wrappers inherit from.
 *
 * @private
 */
function baseLodash() {// No operation performed.
}

module.exports = baseLodash;

/***/ }),

/***/ "./node_modules/lodash/_baseMap.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseMap.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseEach = __webpack_require__(/*! ./_baseEach */ "./node_modules/lodash/_baseEach.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js");
/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */


function baseMap(collection, iteratee) {
  var index = -1,
      result = isArrayLike(collection) ? Array(collection.length) : [];
  baseEach(collection, function (value, key, collection) {
    result[++index] = iteratee(value, key, collection);
  });
  return result;
}

module.exports = baseMap;

/***/ }),

/***/ "./node_modules/lodash/_baseMatches.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseMatches.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseIsMatch = __webpack_require__(/*! ./_baseIsMatch */ "./node_modules/lodash/_baseIsMatch.js"),
    getMatchData = __webpack_require__(/*! ./_getMatchData */ "./node_modules/lodash/_getMatchData.js"),
    matchesStrictComparable = __webpack_require__(/*! ./_matchesStrictComparable */ "./node_modules/lodash/_matchesStrictComparable.js");
/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */


function baseMatches(source) {
  var matchData = getMatchData(source);

  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }

  return function (object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

module.exports = baseMatches;

/***/ }),

/***/ "./node_modules/lodash/_baseMatchesProperty.js":
/*!*****************************************************!*\
  !*** ./node_modules/lodash/_baseMatchesProperty.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseIsEqual = __webpack_require__(/*! ./_baseIsEqual */ "./node_modules/lodash/_baseIsEqual.js"),
    get = __webpack_require__(/*! ./get */ "./node_modules/lodash/get.js"),
    hasIn = __webpack_require__(/*! ./hasIn */ "./node_modules/lodash/hasIn.js"),
    isKey = __webpack_require__(/*! ./_isKey */ "./node_modules/lodash/_isKey.js"),
    isStrictComparable = __webpack_require__(/*! ./_isStrictComparable */ "./node_modules/lodash/_isStrictComparable.js"),
    matchesStrictComparable = __webpack_require__(/*! ./_matchesStrictComparable */ "./node_modules/lodash/_matchesStrictComparable.js"),
    toKey = __webpack_require__(/*! ./_toKey */ "./node_modules/lodash/_toKey.js");
/** Used to compose bitmasks for value comparisons. */


var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;
/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */

function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }

  return function (object) {
    var objValue = get(object, path);
    return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

module.exports = baseMatchesProperty;

/***/ }),

/***/ "./node_modules/lodash/_baseMerge.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseMerge.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Stack = __webpack_require__(/*! ./_Stack */ "./node_modules/lodash/_Stack.js"),
    assignMergeValue = __webpack_require__(/*! ./_assignMergeValue */ "./node_modules/lodash/_assignMergeValue.js"),
    baseFor = __webpack_require__(/*! ./_baseFor */ "./node_modules/lodash/_baseFor.js"),
    baseMergeDeep = __webpack_require__(/*! ./_baseMergeDeep */ "./node_modules/lodash/_baseMergeDeep.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    keysIn = __webpack_require__(/*! ./keysIn */ "./node_modules/lodash/keysIn.js"),
    safeGet = __webpack_require__(/*! ./_safeGet */ "./node_modules/lodash/_safeGet.js");
/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */


function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }

  baseFor(source, function (srcValue, key) {
    if (isObject(srcValue)) {
      stack || (stack = new Stack());
      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    } else {
      var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }

      assignMergeValue(object, key, newValue);
    }
  }, keysIn);
}

module.exports = baseMerge;

/***/ }),

/***/ "./node_modules/lodash/_baseMergeDeep.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_baseMergeDeep.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var assignMergeValue = __webpack_require__(/*! ./_assignMergeValue */ "./node_modules/lodash/_assignMergeValue.js"),
    cloneBuffer = __webpack_require__(/*! ./_cloneBuffer */ "./node_modules/lodash/_cloneBuffer.js"),
    cloneTypedArray = __webpack_require__(/*! ./_cloneTypedArray */ "./node_modules/lodash/_cloneTypedArray.js"),
    copyArray = __webpack_require__(/*! ./_copyArray */ "./node_modules/lodash/_copyArray.js"),
    initCloneObject = __webpack_require__(/*! ./_initCloneObject */ "./node_modules/lodash/_initCloneObject.js"),
    isArguments = __webpack_require__(/*! ./isArguments */ "./node_modules/lodash/isArguments.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isArrayLikeObject = __webpack_require__(/*! ./isArrayLikeObject */ "./node_modules/lodash/isArrayLikeObject.js"),
    isBuffer = __webpack_require__(/*! ./isBuffer */ "./node_modules/lodash/isBuffer.js"),
    isFunction = __webpack_require__(/*! ./isFunction */ "./node_modules/lodash/isFunction.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    isPlainObject = __webpack_require__(/*! ./isPlainObject */ "./node_modules/lodash/isPlainObject.js"),
    isTypedArray = __webpack_require__(/*! ./isTypedArray */ "./node_modules/lodash/isTypedArray.js"),
    safeGet = __webpack_require__(/*! ./_safeGet */ "./node_modules/lodash/_safeGet.js"),
    toPlainObject = __webpack_require__(/*! ./toPlainObject */ "./node_modules/lodash/toPlainObject.js");
/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */


function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = safeGet(object, key),
      srcValue = safeGet(source, key),
      stacked = stack.get(srcValue);

  if (stacked) {
    assignMergeValue(object, key, stacked);
    return;
  }

  var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
  var isCommon = newValue === undefined;

  if (isCommon) {
    var isArr = isArray(srcValue),
        isBuff = !isArr && isBuffer(srcValue),
        isTyped = !isArr && !isBuff && isTypedArray(srcValue);
    newValue = srcValue;

    if (isArr || isBuff || isTyped) {
      if (isArray(objValue)) {
        newValue = objValue;
      } else if (isArrayLikeObject(objValue)) {
        newValue = copyArray(objValue);
      } else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer(srcValue, true);
      } else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray(srcValue, true);
      } else {
        newValue = [];
      }
    } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
      newValue = objValue;

      if (isArguments(objValue)) {
        newValue = toPlainObject(objValue);
      } else if (!isObject(objValue) || isFunction(objValue)) {
        newValue = initCloneObject(srcValue);
      }
    } else {
      isCommon = false;
    }
  }

  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }

  assignMergeValue(object, key, newValue);
}

module.exports = baseMergeDeep;

/***/ }),

/***/ "./node_modules/lodash/_basePick.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_basePick.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var basePickBy = __webpack_require__(/*! ./_basePickBy */ "./node_modules/lodash/_basePickBy.js"),
    hasIn = __webpack_require__(/*! ./hasIn */ "./node_modules/lodash/hasIn.js");
/**
 * The base implementation of `_.pick` without support for individual
 * property identifiers.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @returns {Object} Returns the new object.
 */


function basePick(object, paths) {
  return basePickBy(object, paths, function (value, path) {
    return hasIn(object, path);
  });
}

module.exports = basePick;

/***/ }),

/***/ "./node_modules/lodash/_basePickBy.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_basePickBy.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__(/*! ./_baseGet */ "./node_modules/lodash/_baseGet.js"),
    baseSet = __webpack_require__(/*! ./_baseSet */ "./node_modules/lodash/_baseSet.js"),
    castPath = __webpack_require__(/*! ./_castPath */ "./node_modules/lodash/_castPath.js");
/**
 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @param {Function} predicate The function invoked per property.
 * @returns {Object} Returns the new object.
 */


function basePickBy(object, paths, predicate) {
  var index = -1,
      length = paths.length,
      result = {};

  while (++index < length) {
    var path = paths[index],
        value = baseGet(object, path);

    if (predicate(value, path)) {
      baseSet(result, castPath(path, object), value);
    }
  }

  return result;
}

module.exports = basePickBy;

/***/ }),

/***/ "./node_modules/lodash/_baseProperty.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseProperty.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function (object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;

/***/ }),

/***/ "./node_modules/lodash/_basePropertyDeep.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_basePropertyDeep.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__(/*! ./_baseGet */ "./node_modules/lodash/_baseGet.js");
/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */


function basePropertyDeep(path) {
  return function (object) {
    return baseGet(object, path);
  };
}

module.exports = basePropertyDeep;

/***/ }),

/***/ "./node_modules/lodash/_basePullAt.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_basePullAt.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseUnset = __webpack_require__(/*! ./_baseUnset */ "./node_modules/lodash/_baseUnset.js"),
    isIndex = __webpack_require__(/*! ./_isIndex */ "./node_modules/lodash/_isIndex.js");
/** Used for built-in method references. */


var arrayProto = Array.prototype;
/** Built-in value references. */

var splice = arrayProto.splice;
/**
 * The base implementation of `_.pullAt` without support for individual
 * indexes or capturing the removed elements.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {number[]} indexes The indexes of elements to remove.
 * @returns {Array} Returns `array`.
 */

function basePullAt(array, indexes) {
  var length = array ? indexes.length : 0,
      lastIndex = length - 1;

  while (length--) {
    var index = indexes[length];

    if (length == lastIndex || index !== previous) {
      var previous = index;

      if (isIndex(index)) {
        splice.call(array, index, 1);
      } else {
        baseUnset(array, index);
      }
    }
  }

  return array;
}

module.exports = basePullAt;

/***/ }),

/***/ "./node_modules/lodash/_baseReduce.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseReduce.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.reduce` and `_.reduceRight`, without support
 * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {*} accumulator The initial value.
 * @param {boolean} initAccum Specify using the first or last element of
 *  `collection` as the initial value.
 * @param {Function} eachFunc The function to iterate over `collection`.
 * @returns {*} Returns the accumulated value.
 */
function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
  eachFunc(collection, function (value, index, collection) {
    accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
  });
  return accumulator;
}

module.exports = baseReduce;

/***/ }),

/***/ "./node_modules/lodash/_baseRest.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseRest.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var identity = __webpack_require__(/*! ./identity */ "./node_modules/lodash/identity.js"),
    overRest = __webpack_require__(/*! ./_overRest */ "./node_modules/lodash/_overRest.js"),
    setToString = __webpack_require__(/*! ./_setToString */ "./node_modules/lodash/_setToString.js");
/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */


function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

module.exports = baseRest;

/***/ }),

/***/ "./node_modules/lodash/_baseSet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseSet.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var assignValue = __webpack_require__(/*! ./_assignValue */ "./node_modules/lodash/_assignValue.js"),
    castPath = __webpack_require__(/*! ./_castPath */ "./node_modules/lodash/_castPath.js"),
    isIndex = __webpack_require__(/*! ./_isIndex */ "./node_modules/lodash/_isIndex.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    toKey = __webpack_require__(/*! ./_toKey */ "./node_modules/lodash/_toKey.js");
/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */


function baseSet(object, path, value, customizer) {
  if (!isObject(object)) {
    return object;
  }

  path = castPath(path, object);
  var index = -1,
      length = path.length,
      lastIndex = length - 1,
      nested = object;

  while (nested != null && ++index < length) {
    var key = toKey(path[index]),
        newValue = value;

    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;

      if (newValue === undefined) {
        newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
      }
    }

    assignValue(nested, key, newValue);
    nested = nested[key];
  }

  return object;
}

module.exports = baseSet;

/***/ }),

/***/ "./node_modules/lodash/_baseSetData.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseSetData.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var identity = __webpack_require__(/*! ./identity */ "./node_modules/lodash/identity.js"),
    metaMap = __webpack_require__(/*! ./_metaMap */ "./node_modules/lodash/_metaMap.js");
/**
 * The base implementation of `setData` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to associate metadata with.
 * @param {*} data The metadata.
 * @returns {Function} Returns `func`.
 */


var baseSetData = !metaMap ? identity : function (func, data) {
  metaMap.set(func, data);
  return func;
};
module.exports = baseSetData;

/***/ }),

/***/ "./node_modules/lodash/_baseSetToString.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseSetToString.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var constant = __webpack_require__(/*! ./constant */ "./node_modules/lodash/constant.js"),
    defineProperty = __webpack_require__(/*! ./_defineProperty */ "./node_modules/lodash/_defineProperty.js"),
    identity = __webpack_require__(/*! ./identity */ "./node_modules/lodash/identity.js");
/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */


var baseSetToString = !defineProperty ? identity : function (func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};
module.exports = baseSetToString;

/***/ }),

/***/ "./node_modules/lodash/_baseSlice.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseSlice.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : length + start;
  }

  end = end > length ? length : end;

  if (end < 0) {
    end += length;
  }

  length = start > end ? 0 : end - start >>> 0;
  start >>>= 0;
  var result = Array(length);

  while (++index < length) {
    result[index] = array[index + start];
  }

  return result;
}

module.exports = baseSlice;

/***/ }),

/***/ "./node_modules/lodash/_baseSome.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseSome.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseEach = __webpack_require__(/*! ./_baseEach */ "./node_modules/lodash/_baseEach.js");
/**
 * The base implementation of `_.some` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */


function baseSome(collection, predicate) {
  var result;
  baseEach(collection, function (value, index, collection) {
    result = predicate(value, index, collection);
    return !result;
  });
  return !!result;
}

module.exports = baseSome;

/***/ }),

/***/ "./node_modules/lodash/_baseTimes.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseTimes.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }

  return result;
}

module.exports = baseTimes;

/***/ }),

/***/ "./node_modules/lodash/_baseToString.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseToString.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js"),
    arrayMap = __webpack_require__(/*! ./_arrayMap */ "./node_modules/lodash/_arrayMap.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");
/** Used as references for various `Number` constants. */


var INFINITY = 1 / 0;
/** Used to convert symbols to primitives and strings. */

var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;
/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */

function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }

  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }

  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }

  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}

module.exports = baseToString;

/***/ }),

/***/ "./node_modules/lodash/_baseUnary.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseUnary.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function (value) {
    return func(value);
  };
}

module.exports = baseUnary;

/***/ }),

/***/ "./node_modules/lodash/_baseUniq.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseUniq.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var SetCache = __webpack_require__(/*! ./_SetCache */ "./node_modules/lodash/_SetCache.js"),
    arrayIncludes = __webpack_require__(/*! ./_arrayIncludes */ "./node_modules/lodash/_arrayIncludes.js"),
    arrayIncludesWith = __webpack_require__(/*! ./_arrayIncludesWith */ "./node_modules/lodash/_arrayIncludesWith.js"),
    cacheHas = __webpack_require__(/*! ./_cacheHas */ "./node_modules/lodash/_cacheHas.js"),
    createSet = __webpack_require__(/*! ./_createSet */ "./node_modules/lodash/_createSet.js"),
    setToArray = __webpack_require__(/*! ./_setToArray */ "./node_modules/lodash/_setToArray.js");
/** Used as the size to enable large array optimizations. */


var LARGE_ARRAY_SIZE = 200;
/**
 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} [iteratee] The iteratee invoked per element.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new duplicate free array.
 */

function baseUniq(array, iteratee, comparator) {
  var index = -1,
      includes = arrayIncludes,
      length = array.length,
      isCommon = true,
      result = [],
      seen = result;

  if (comparator) {
    isCommon = false;
    includes = arrayIncludesWith;
  } else if (length >= LARGE_ARRAY_SIZE) {
    var set = iteratee ? null : createSet(array);

    if (set) {
      return setToArray(set);
    }

    isCommon = false;
    includes = cacheHas;
    seen = new SetCache();
  } else {
    seen = iteratee ? [] : result;
  }

  outer: while (++index < length) {
    var value = array[index],
        computed = iteratee ? iteratee(value) : value;
    value = comparator || value !== 0 ? value : 0;

    if (isCommon && computed === computed) {
      var seenIndex = seen.length;

      while (seenIndex--) {
        if (seen[seenIndex] === computed) {
          continue outer;
        }
      }

      if (iteratee) {
        seen.push(computed);
      }

      result.push(value);
    } else if (!includes(seen, computed, comparator)) {
      if (seen !== result) {
        seen.push(computed);
      }

      result.push(value);
    }
  }

  return result;
}

module.exports = baseUniq;

/***/ }),

/***/ "./node_modules/lodash/_baseUnset.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseUnset.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var castPath = __webpack_require__(/*! ./_castPath */ "./node_modules/lodash/_castPath.js"),
    last = __webpack_require__(/*! ./last */ "./node_modules/lodash/last.js"),
    parent = __webpack_require__(/*! ./_parent */ "./node_modules/lodash/_parent.js"),
    toKey = __webpack_require__(/*! ./_toKey */ "./node_modules/lodash/_toKey.js");
/**
 * The base implementation of `_.unset`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The property path to unset.
 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
 */


function baseUnset(object, path) {
  path = castPath(path, object);
  object = parent(object, path);
  return object == null || delete object[toKey(last(path))];
}

module.exports = baseUnset;

/***/ }),

/***/ "./node_modules/lodash/_baseValues.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseValues.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayMap = __webpack_require__(/*! ./_arrayMap */ "./node_modules/lodash/_arrayMap.js");
/**
 * The base implementation of `_.values` and `_.valuesIn` which creates an
 * array of `object` property values corresponding to the property names
 * of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the array of property values.
 */


function baseValues(object, props) {
  return arrayMap(props, function (key) {
    return object[key];
  });
}

module.exports = baseValues;

/***/ }),

/***/ "./node_modules/lodash/_cacheHas.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_cacheHas.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;

/***/ }),

/***/ "./node_modules/lodash/_castFunction.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_castFunction.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var identity = __webpack_require__(/*! ./identity */ "./node_modules/lodash/identity.js");
/**
 * Casts `value` to `identity` if it's not a function.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {Function} Returns cast function.
 */


function castFunction(value) {
  return typeof value == 'function' ? value : identity;
}

module.exports = castFunction;

/***/ }),

/***/ "./node_modules/lodash/_castPath.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_castPath.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isKey = __webpack_require__(/*! ./_isKey */ "./node_modules/lodash/_isKey.js"),
    stringToPath = __webpack_require__(/*! ./_stringToPath */ "./node_modules/lodash/_stringToPath.js"),
    toString = __webpack_require__(/*! ./toString */ "./node_modules/lodash/toString.js");
/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */


function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }

  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;

/***/ }),

/***/ "./node_modules/lodash/_castSlice.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_castSlice.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseSlice = __webpack_require__(/*! ./_baseSlice */ "./node_modules/lodash/_baseSlice.js");
/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */


function castSlice(array, start, end) {
  var length = array.length;
  end = end === undefined ? length : end;
  return !start && end >= length ? array : baseSlice(array, start, end);
}

module.exports = castSlice;

/***/ }),

/***/ "./node_modules/lodash/_charsEndIndex.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_charsEndIndex.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseIndexOf = __webpack_require__(/*! ./_baseIndexOf */ "./node_modules/lodash/_baseIndexOf.js");
/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
 * that is not found in the character symbols.
 *
 * @private
 * @param {Array} strSymbols The string symbols to inspect.
 * @param {Array} chrSymbols The character symbols to find.
 * @returns {number} Returns the index of the last unmatched string symbol.
 */


function charsEndIndex(strSymbols, chrSymbols) {
  var index = strSymbols.length;

  while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}

  return index;
}

module.exports = charsEndIndex;

/***/ }),

/***/ "./node_modules/lodash/_charsStartIndex.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_charsStartIndex.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseIndexOf = __webpack_require__(/*! ./_baseIndexOf */ "./node_modules/lodash/_baseIndexOf.js");
/**
 * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
 * that is not found in the character symbols.
 *
 * @private
 * @param {Array} strSymbols The string symbols to inspect.
 * @param {Array} chrSymbols The character symbols to find.
 * @returns {number} Returns the index of the first unmatched string symbol.
 */


function charsStartIndex(strSymbols, chrSymbols) {
  var index = -1,
      length = strSymbols.length;

  while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}

  return index;
}

module.exports = charsStartIndex;

/***/ }),

/***/ "./node_modules/lodash/_cloneArrayBuffer.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_cloneArrayBuffer.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Uint8Array = __webpack_require__(/*! ./_Uint8Array */ "./node_modules/lodash/_Uint8Array.js");
/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */


function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

module.exports = cloneArrayBuffer;

/***/ }),

/***/ "./node_modules/lodash/_cloneBuffer.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_cloneBuffer.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");
/** Detect free variable `exports`. */


var freeExports =  true && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */

var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */

var moduleExports = freeModule && freeModule.exports === freeExports;
/** Built-in value references. */

var Buffer = moduleExports ? root.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;
/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */

function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }

  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
  buffer.copy(result);
  return result;
}

module.exports = cloneBuffer;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/lodash/_cloneDataView.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_cloneDataView.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var cloneArrayBuffer = __webpack_require__(/*! ./_cloneArrayBuffer */ "./node_modules/lodash/_cloneArrayBuffer.js");
/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */


function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

module.exports = cloneDataView;

/***/ }),

/***/ "./node_modules/lodash/_cloneRegExp.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_cloneRegExp.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;
/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */

function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

module.exports = cloneRegExp;

/***/ }),

/***/ "./node_modules/lodash/_cloneSymbol.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_cloneSymbol.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js");
/** Used to convert symbols to primitives and strings. */


var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */

function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

module.exports = cloneSymbol;

/***/ }),

/***/ "./node_modules/lodash/_cloneTypedArray.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_cloneTypedArray.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var cloneArrayBuffer = __webpack_require__(/*! ./_cloneArrayBuffer */ "./node_modules/lodash/_cloneArrayBuffer.js");
/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */


function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

module.exports = cloneTypedArray;

/***/ }),

/***/ "./node_modules/lodash/_composeArgs.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_composeArgs.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;
/**
 * Creates an array that is the composition of partially applied arguments,
 * placeholders, and provided arguments into a single array of arguments.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to prepend to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */

function composeArgs(args, partials, holders, isCurried) {
  var argsIndex = -1,
      argsLength = args.length,
      holdersLength = holders.length,
      leftIndex = -1,
      leftLength = partials.length,
      rangeLength = nativeMax(argsLength - holdersLength, 0),
      result = Array(leftLength + rangeLength),
      isUncurried = !isCurried;

  while (++leftIndex < leftLength) {
    result[leftIndex] = partials[leftIndex];
  }

  while (++argsIndex < holdersLength) {
    if (isUncurried || argsIndex < argsLength) {
      result[holders[argsIndex]] = args[argsIndex];
    }
  }

  while (rangeLength--) {
    result[leftIndex++] = args[argsIndex++];
  }

  return result;
}

module.exports = composeArgs;

/***/ }),

/***/ "./node_modules/lodash/_composeArgsRight.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_composeArgsRight.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;
/**
 * This function is like `composeArgs` except that the arguments composition
 * is tailored for `_.partialRight`.
 *
 * @private
 * @param {Array} args The provided arguments.
 * @param {Array} partials The arguments to append to those provided.
 * @param {Array} holders The `partials` placeholder indexes.
 * @params {boolean} [isCurried] Specify composing for a curried function.
 * @returns {Array} Returns the new array of composed arguments.
 */

function composeArgsRight(args, partials, holders, isCurried) {
  var argsIndex = -1,
      argsLength = args.length,
      holdersIndex = -1,
      holdersLength = holders.length,
      rightIndex = -1,
      rightLength = partials.length,
      rangeLength = nativeMax(argsLength - holdersLength, 0),
      result = Array(rangeLength + rightLength),
      isUncurried = !isCurried;

  while (++argsIndex < rangeLength) {
    result[argsIndex] = args[argsIndex];
  }

  var offset = argsIndex;

  while (++rightIndex < rightLength) {
    result[offset + rightIndex] = partials[rightIndex];
  }

  while (++holdersIndex < holdersLength) {
    if (isUncurried || argsIndex < argsLength) {
      result[offset + holders[holdersIndex]] = args[argsIndex++];
    }
  }

  return result;
}

module.exports = composeArgsRight;

/***/ }),

/***/ "./node_modules/lodash/_copyArray.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_copyArray.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;
  array || (array = Array(length));

  while (++index < length) {
    array[index] = source[index];
  }

  return array;
}

module.exports = copyArray;

/***/ }),

/***/ "./node_modules/lodash/_copyObject.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_copyObject.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var assignValue = __webpack_require__(/*! ./_assignValue */ "./node_modules/lodash/_assignValue.js"),
    baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ "./node_modules/lodash/_baseAssignValue.js");
/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */


function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});
  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];
    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }

    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }

  return object;
}

module.exports = copyObject;

/***/ }),

/***/ "./node_modules/lodash/_copySymbols.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_copySymbols.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    getSymbols = __webpack_require__(/*! ./_getSymbols */ "./node_modules/lodash/_getSymbols.js");
/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */


function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

module.exports = copySymbols;

/***/ }),

/***/ "./node_modules/lodash/_copySymbolsIn.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_copySymbolsIn.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    getSymbolsIn = __webpack_require__(/*! ./_getSymbolsIn */ "./node_modules/lodash/_getSymbolsIn.js");
/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */


function copySymbolsIn(source, object) {
  return copyObject(source, getSymbolsIn(source), object);
}

module.exports = copySymbolsIn;

/***/ }),

/***/ "./node_modules/lodash/_coreJsData.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_coreJsData.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");
/** Used to detect overreaching core-js shims. */


var coreJsData = root['__core-js_shared__'];
module.exports = coreJsData;

/***/ }),

/***/ "./node_modules/lodash/_countHolders.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_countHolders.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Gets the number of `placeholder` occurrences in `array`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} placeholder The placeholder to search for.
 * @returns {number} Returns the placeholder count.
 */
function countHolders(array, placeholder) {
  var length = array.length,
      result = 0;

  while (length--) {
    if (array[length] === placeholder) {
      ++result;
    }
  }

  return result;
}

module.exports = countHolders;

/***/ }),

/***/ "./node_modules/lodash/_createAggregator.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_createAggregator.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayAggregator = __webpack_require__(/*! ./_arrayAggregator */ "./node_modules/lodash/_arrayAggregator.js"),
    baseAggregator = __webpack_require__(/*! ./_baseAggregator */ "./node_modules/lodash/_baseAggregator.js"),
    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ "./node_modules/lodash/_baseIteratee.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js");
/**
 * Creates a function like `_.groupBy`.
 *
 * @private
 * @param {Function} setter The function to set accumulator values.
 * @param {Function} [initializer] The accumulator object initializer.
 * @returns {Function} Returns the new aggregator function.
 */


function createAggregator(setter, initializer) {
  return function (collection, iteratee) {
    var func = isArray(collection) ? arrayAggregator : baseAggregator,
        accumulator = initializer ? initializer() : {};
    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);
  };
}

module.exports = createAggregator;

/***/ }),

/***/ "./node_modules/lodash/_createAssigner.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_createAssigner.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseRest = __webpack_require__(/*! ./_baseRest */ "./node_modules/lodash/_baseRest.js"),
    isIterateeCall = __webpack_require__(/*! ./_isIterateeCall */ "./node_modules/lodash/_isIterateeCall.js");
/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */


function createAssigner(assigner) {
  return baseRest(function (object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;
    customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }

    object = Object(object);

    while (++index < length) {
      var source = sources[index];

      if (source) {
        assigner(object, source, index, customizer);
      }
    }

    return object;
  });
}

module.exports = createAssigner;

/***/ }),

/***/ "./node_modules/lodash/_createBaseEach.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_createBaseEach.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js");
/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */


function createBaseEach(eachFunc, fromRight) {
  return function (collection, iteratee) {
    if (collection == null) {
      return collection;
    }

    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }

    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while (fromRight ? index-- : ++index < length) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }

    return collection;
  };
}

module.exports = createBaseEach;

/***/ }),

/***/ "./node_modules/lodash/_createBaseFor.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_createBaseFor.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function (object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];

      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }

    return object;
  };
}

module.exports = createBaseFor;

/***/ }),

/***/ "./node_modules/lodash/_createBind.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_createBind.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var createCtor = __webpack_require__(/*! ./_createCtor */ "./node_modules/lodash/_createCtor.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");
/** Used to compose bitmasks for function metadata. */


var WRAP_BIND_FLAG = 1;
/**
 * Creates a function that wraps `func` to invoke it with the optional `this`
 * binding of `thisArg`.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @returns {Function} Returns the new wrapped function.
 */

function createBind(func, bitmask, thisArg) {
  var isBind = bitmask & WRAP_BIND_FLAG,
      Ctor = createCtor(func);

  function wrapper() {
    var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
    return fn.apply(isBind ? thisArg : this, arguments);
  }

  return wrapper;
}

module.exports = createBind;

/***/ }),

/***/ "./node_modules/lodash/_createCaseFirst.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_createCaseFirst.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var castSlice = __webpack_require__(/*! ./_castSlice */ "./node_modules/lodash/_castSlice.js"),
    hasUnicode = __webpack_require__(/*! ./_hasUnicode */ "./node_modules/lodash/_hasUnicode.js"),
    stringToArray = __webpack_require__(/*! ./_stringToArray */ "./node_modules/lodash/_stringToArray.js"),
    toString = __webpack_require__(/*! ./toString */ "./node_modules/lodash/toString.js");
/**
 * Creates a function like `_.lowerFirst`.
 *
 * @private
 * @param {string} methodName The name of the `String` case method to use.
 * @returns {Function} Returns the new case function.
 */


function createCaseFirst(methodName) {
  return function (string) {
    string = toString(string);
    var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
    var chr = strSymbols ? strSymbols[0] : string.charAt(0);
    var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
    return chr[methodName]() + trailing;
  };
}

module.exports = createCaseFirst;

/***/ }),

/***/ "./node_modules/lodash/_createCtor.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_createCtor.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseCreate = __webpack_require__(/*! ./_baseCreate */ "./node_modules/lodash/_baseCreate.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js");
/**
 * Creates a function that produces an instance of `Ctor` regardless of
 * whether it was invoked as part of a `new` expression or by `call` or `apply`.
 *
 * @private
 * @param {Function} Ctor The constructor to wrap.
 * @returns {Function} Returns the new wrapped function.
 */


function createCtor(Ctor) {
  return function () {
    // Use a `switch` statement to work with class constructors. See
    // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
    // for more details.
    var args = arguments;

    switch (args.length) {
      case 0:
        return new Ctor();

      case 1:
        return new Ctor(args[0]);

      case 2:
        return new Ctor(args[0], args[1]);

      case 3:
        return new Ctor(args[0], args[1], args[2]);

      case 4:
        return new Ctor(args[0], args[1], args[2], args[3]);

      case 5:
        return new Ctor(args[0], args[1], args[2], args[3], args[4]);

      case 6:
        return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);

      case 7:
        return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
    }

    var thisBinding = baseCreate(Ctor.prototype),
        result = Ctor.apply(thisBinding, args); // Mimic the constructor's `return` behavior.
    // See https://es5.github.io/#x13.2.2 for more details.

    return isObject(result) ? result : thisBinding;
  };
}

module.exports = createCtor;

/***/ }),

/***/ "./node_modules/lodash/_createCurry.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_createCurry.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var apply = __webpack_require__(/*! ./_apply */ "./node_modules/lodash/_apply.js"),
    createCtor = __webpack_require__(/*! ./_createCtor */ "./node_modules/lodash/_createCtor.js"),
    createHybrid = __webpack_require__(/*! ./_createHybrid */ "./node_modules/lodash/_createHybrid.js"),
    createRecurry = __webpack_require__(/*! ./_createRecurry */ "./node_modules/lodash/_createRecurry.js"),
    getHolder = __webpack_require__(/*! ./_getHolder */ "./node_modules/lodash/_getHolder.js"),
    replaceHolders = __webpack_require__(/*! ./_replaceHolders */ "./node_modules/lodash/_replaceHolders.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");
/**
 * Creates a function that wraps `func` to enable currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {number} arity The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */


function createCurry(func, bitmask, arity) {
  var Ctor = createCtor(func);

  function wrapper() {
    var length = arguments.length,
        args = Array(length),
        index = length,
        placeholder = getHolder(wrapper);

    while (index--) {
      args[index] = arguments[index];
    }

    var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
    length -= holders.length;

    if (length < arity) {
      return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
    }

    var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
    return apply(fn, this, args);
  }

  return wrapper;
}

module.exports = createCurry;

/***/ }),

/***/ "./node_modules/lodash/_createHybrid.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_createHybrid.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var composeArgs = __webpack_require__(/*! ./_composeArgs */ "./node_modules/lodash/_composeArgs.js"),
    composeArgsRight = __webpack_require__(/*! ./_composeArgsRight */ "./node_modules/lodash/_composeArgsRight.js"),
    countHolders = __webpack_require__(/*! ./_countHolders */ "./node_modules/lodash/_countHolders.js"),
    createCtor = __webpack_require__(/*! ./_createCtor */ "./node_modules/lodash/_createCtor.js"),
    createRecurry = __webpack_require__(/*! ./_createRecurry */ "./node_modules/lodash/_createRecurry.js"),
    getHolder = __webpack_require__(/*! ./_getHolder */ "./node_modules/lodash/_getHolder.js"),
    reorder = __webpack_require__(/*! ./_reorder */ "./node_modules/lodash/_reorder.js"),
    replaceHolders = __webpack_require__(/*! ./_replaceHolders */ "./node_modules/lodash/_replaceHolders.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");
/** Used to compose bitmasks for function metadata. */


var WRAP_BIND_FLAG = 1,
    WRAP_BIND_KEY_FLAG = 2,
    WRAP_CURRY_FLAG = 8,
    WRAP_CURRY_RIGHT_FLAG = 16,
    WRAP_ARY_FLAG = 128,
    WRAP_FLIP_FLAG = 512;
/**
 * Creates a function that wraps `func` to invoke it with optional `this`
 * binding of `thisArg`, partial application, and currying.
 *
 * @private
 * @param {Function|string} func The function or method name to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to prepend to those provided to
 *  the new function.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [partialsRight] The arguments to append to those provided
 *  to the new function.
 * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */

function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
  var isAry = bitmask & WRAP_ARY_FLAG,
      isBind = bitmask & WRAP_BIND_FLAG,
      isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
      isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
      isFlip = bitmask & WRAP_FLIP_FLAG,
      Ctor = isBindKey ? undefined : createCtor(func);

  function wrapper() {
    var length = arguments.length,
        args = Array(length),
        index = length;

    while (index--) {
      args[index] = arguments[index];
    }

    if (isCurried) {
      var placeholder = getHolder(wrapper),
          holdersCount = countHolders(args, placeholder);
    }

    if (partials) {
      args = composeArgs(args, partials, holders, isCurried);
    }

    if (partialsRight) {
      args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
    }

    length -= holdersCount;

    if (isCurried && length < arity) {
      var newHolders = replaceHolders(args, placeholder);
      return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
    }

    var thisBinding = isBind ? thisArg : this,
        fn = isBindKey ? thisBinding[func] : func;
    length = args.length;

    if (argPos) {
      args = reorder(args, argPos);
    } else if (isFlip && length > 1) {
      args.reverse();
    }

    if (isAry && ary < length) {
      args.length = ary;
    }

    if (this && this !== root && this instanceof wrapper) {
      fn = Ctor || createCtor(fn);
    }

    return fn.apply(thisBinding, args);
  }

  return wrapper;
}

module.exports = createHybrid;

/***/ }),

/***/ "./node_modules/lodash/_createPartial.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_createPartial.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var apply = __webpack_require__(/*! ./_apply */ "./node_modules/lodash/_apply.js"),
    createCtor = __webpack_require__(/*! ./_createCtor */ "./node_modules/lodash/_createCtor.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");
/** Used to compose bitmasks for function metadata. */


var WRAP_BIND_FLAG = 1;
/**
 * Creates a function that wraps `func` to invoke it with the `this` binding
 * of `thisArg` and `partials` prepended to the arguments it receives.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} partials The arguments to prepend to those provided to
 *  the new function.
 * @returns {Function} Returns the new wrapped function.
 */

function createPartial(func, bitmask, thisArg, partials) {
  var isBind = bitmask & WRAP_BIND_FLAG,
      Ctor = createCtor(func);

  function wrapper() {
    var argsIndex = -1,
        argsLength = arguments.length,
        leftIndex = -1,
        leftLength = partials.length,
        args = Array(leftLength + argsLength),
        fn = this && this !== root && this instanceof wrapper ? Ctor : func;

    while (++leftIndex < leftLength) {
      args[leftIndex] = partials[leftIndex];
    }

    while (argsLength--) {
      args[leftIndex++] = arguments[++argsIndex];
    }

    return apply(fn, isBind ? thisArg : this, args);
  }

  return wrapper;
}

module.exports = createPartial;

/***/ }),

/***/ "./node_modules/lodash/_createRecurry.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_createRecurry.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isLaziable = __webpack_require__(/*! ./_isLaziable */ "./node_modules/lodash/_isLaziable.js"),
    setData = __webpack_require__(/*! ./_setData */ "./node_modules/lodash/_setData.js"),
    setWrapToString = __webpack_require__(/*! ./_setWrapToString */ "./node_modules/lodash/_setWrapToString.js");
/** Used to compose bitmasks for function metadata. */


var WRAP_BIND_FLAG = 1,
    WRAP_BIND_KEY_FLAG = 2,
    WRAP_CURRY_BOUND_FLAG = 4,
    WRAP_CURRY_FLAG = 8,
    WRAP_PARTIAL_FLAG = 32,
    WRAP_PARTIAL_RIGHT_FLAG = 64;
/**
 * Creates a function that wraps `func` to continue currying.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @param {Function} wrapFunc The function to create the `func` wrapper.
 * @param {*} placeholder The placeholder value.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to prepend to those provided to
 *  the new function.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */

function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
  var isCurry = bitmask & WRAP_CURRY_FLAG,
      newHolders = isCurry ? holders : undefined,
      newHoldersRight = isCurry ? undefined : holders,
      newPartials = isCurry ? partials : undefined,
      newPartialsRight = isCurry ? undefined : partials;
  bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
  bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

  if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
    bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
  }

  var newData = [func, bitmask, thisArg, newPartials, newHolders, newPartialsRight, newHoldersRight, argPos, ary, arity];
  var result = wrapFunc.apply(undefined, newData);

  if (isLaziable(func)) {
    setData(result, newData);
  }

  result.placeholder = placeholder;
  return setWrapToString(result, func, bitmask);
}

module.exports = createRecurry;

/***/ }),

/***/ "./node_modules/lodash/_createSet.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_createSet.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Set = __webpack_require__(/*! ./_Set */ "./node_modules/lodash/_Set.js"),
    noop = __webpack_require__(/*! ./noop */ "./node_modules/lodash/noop.js"),
    setToArray = __webpack_require__(/*! ./_setToArray */ "./node_modules/lodash/_setToArray.js");
/** Used as references for various `Number` constants. */


var INFINITY = 1 / 0;
/**
 * Creates a set object of `values`.
 *
 * @private
 * @param {Array} values The values to add to the set.
 * @returns {Object} Returns the new set.
 */

var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY) ? noop : function (values) {
  return new Set(values);
};
module.exports = createSet;

/***/ }),

/***/ "./node_modules/lodash/_createWrap.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_createWrap.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseSetData = __webpack_require__(/*! ./_baseSetData */ "./node_modules/lodash/_baseSetData.js"),
    createBind = __webpack_require__(/*! ./_createBind */ "./node_modules/lodash/_createBind.js"),
    createCurry = __webpack_require__(/*! ./_createCurry */ "./node_modules/lodash/_createCurry.js"),
    createHybrid = __webpack_require__(/*! ./_createHybrid */ "./node_modules/lodash/_createHybrid.js"),
    createPartial = __webpack_require__(/*! ./_createPartial */ "./node_modules/lodash/_createPartial.js"),
    getData = __webpack_require__(/*! ./_getData */ "./node_modules/lodash/_getData.js"),
    mergeData = __webpack_require__(/*! ./_mergeData */ "./node_modules/lodash/_mergeData.js"),
    setData = __webpack_require__(/*! ./_setData */ "./node_modules/lodash/_setData.js"),
    setWrapToString = __webpack_require__(/*! ./_setWrapToString */ "./node_modules/lodash/_setWrapToString.js"),
    toInteger = __webpack_require__(/*! ./toInteger */ "./node_modules/lodash/toInteger.js");
/** Error message constants. */


var FUNC_ERROR_TEXT = 'Expected a function';
/** Used to compose bitmasks for function metadata. */

var WRAP_BIND_FLAG = 1,
    WRAP_BIND_KEY_FLAG = 2,
    WRAP_CURRY_FLAG = 8,
    WRAP_CURRY_RIGHT_FLAG = 16,
    WRAP_PARTIAL_FLAG = 32,
    WRAP_PARTIAL_RIGHT_FLAG = 64;
/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeMax = Math.max;
/**
 * Creates a function that either curries or invokes `func` with optional
 * `this` binding and partially applied arguments.
 *
 * @private
 * @param {Function|string} func The function or method name to wrap.
 * @param {number} bitmask The bitmask flags.
 *    1 - `_.bind`
 *    2 - `_.bindKey`
 *    4 - `_.curry` or `_.curryRight` of a bound function
 *    8 - `_.curry`
 *   16 - `_.curryRight`
 *   32 - `_.partial`
 *   64 - `_.partialRight`
 *  128 - `_.rearg`
 *  256 - `_.ary`
 *  512 - `_.flip`
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {Array} [partials] The arguments to be partially applied.
 * @param {Array} [holders] The `partials` placeholder indexes.
 * @param {Array} [argPos] The argument positions of the new function.
 * @param {number} [ary] The arity cap of `func`.
 * @param {number} [arity] The arity of `func`.
 * @returns {Function} Returns the new wrapped function.
 */

function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
  var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;

  if (!isBindKey && typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }

  var length = partials ? partials.length : 0;

  if (!length) {
    bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
    partials = holders = undefined;
  }

  ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
  arity = arity === undefined ? arity : toInteger(arity);
  length -= holders ? holders.length : 0;

  if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
    var partialsRight = partials,
        holdersRight = holders;
    partials = holders = undefined;
  }

  var data = isBindKey ? undefined : getData(func);
  var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

  if (data) {
    mergeData(newData, data);
  }

  func = newData[0];
  bitmask = newData[1];
  thisArg = newData[2];
  partials = newData[3];
  holders = newData[4];
  arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);

  if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
    bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
  }

  if (!bitmask || bitmask == WRAP_BIND_FLAG) {
    var result = createBind(func, bitmask, thisArg);
  } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
    result = createCurry(func, bitmask, arity);
  } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
    result = createPartial(func, bitmask, thisArg, partials);
  } else {
    result = createHybrid.apply(undefined, newData);
  }

  var setter = data ? baseSetData : setData;
  return setWrapToString(setter(result, newData), func, bitmask);
}

module.exports = createWrap;

/***/ }),

/***/ "./node_modules/lodash/_customDefaultsMerge.js":
/*!*****************************************************!*\
  !*** ./node_modules/lodash/_customDefaultsMerge.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseMerge = __webpack_require__(/*! ./_baseMerge */ "./node_modules/lodash/_baseMerge.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js");
/**
 * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
 * objects into destination objects that are passed thru.
 *
 * @private
 * @param {*} objValue The destination value.
 * @param {*} srcValue The source value.
 * @param {string} key The key of the property to merge.
 * @param {Object} object The parent object of `objValue`.
 * @param {Object} source The parent object of `srcValue`.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 * @returns {*} Returns the value to assign.
 */


function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
  if (isObject(objValue) && isObject(srcValue)) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, objValue);
    baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
    stack['delete'](srcValue);
  }

  return objValue;
}

module.exports = customDefaultsMerge;

/***/ }),

/***/ "./node_modules/lodash/_customOmitClone.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_customOmitClone.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isPlainObject = __webpack_require__(/*! ./isPlainObject */ "./node_modules/lodash/isPlainObject.js");
/**
 * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
 * objects.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {string} key The key of the property to inspect.
 * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
 */


function customOmitClone(value) {
  return isPlainObject(value) ? undefined : value;
}

module.exports = customOmitClone;

/***/ }),

/***/ "./node_modules/lodash/_defineProperty.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_defineProperty.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js");

var defineProperty = function () {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}();

module.exports = defineProperty;

/***/ }),

/***/ "./node_modules/lodash/_equalArrays.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_equalArrays.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var SetCache = __webpack_require__(/*! ./_SetCache */ "./node_modules/lodash/_SetCache.js"),
    arraySome = __webpack_require__(/*! ./_arraySome */ "./node_modules/lodash/_arraySome.js"),
    cacheHas = __webpack_require__(/*! ./_cacheHas */ "./node_modules/lodash/_cacheHas.js");
/** Used to compose bitmasks for value comparisons. */


var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;
/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */

function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  } // Assume cyclic values are equal.


  var stacked = stack.get(array);

  if (stacked && stack.get(other)) {
    return stacked == other;
  }

  var index = -1,
      result = true,
      seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;
  stack.set(array, other);
  stack.set(other, array); // Ignore non-index properties.

  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
    }

    if (compared !== undefined) {
      if (compared) {
        continue;
      }

      result = false;
      break;
    } // Recursively compare arrays (susceptible to call stack limits).


    if (seen) {
      if (!arraySome(other, function (othValue, othIndex) {
        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          return seen.push(othIndex);
        }
      })) {
        result = false;
        break;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
      result = false;
      break;
    }
  }

  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;

/***/ }),

/***/ "./node_modules/lodash/_equalByTag.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_equalByTag.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js"),
    Uint8Array = __webpack_require__(/*! ./_Uint8Array */ "./node_modules/lodash/_Uint8Array.js"),
    eq = __webpack_require__(/*! ./eq */ "./node_modules/lodash/eq.js"),
    equalArrays = __webpack_require__(/*! ./_equalArrays */ "./node_modules/lodash/_equalArrays.js"),
    mapToArray = __webpack_require__(/*! ./_mapToArray */ "./node_modules/lodash/_mapToArray.js"),
    setToArray = __webpack_require__(/*! ./_setToArray */ "./node_modules/lodash/_setToArray.js");
/** Used to compose bitmasks for value comparisons. */


var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;
/** `Object#toString` result references. */

var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';
var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';
/** Used to convert symbols to primitives and strings. */

var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;
/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
        return false;
      }

      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }

      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == other + '';

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      } // Assume cyclic values are equal.


      var stacked = stack.get(object);

      if (stacked) {
        return stacked == other;
      }

      bitmask |= COMPARE_UNORDERED_FLAG; // Recursively compare objects (susceptible to call stack limits).

      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }

  }

  return false;
}

module.exports = equalByTag;

/***/ }),

/***/ "./node_modules/lodash/_equalObjects.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_equalObjects.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getAllKeys = __webpack_require__(/*! ./_getAllKeys */ "./node_modules/lodash/_getAllKeys.js");
/** Used to compose bitmasks for value comparisons. */


var COMPARE_PARTIAL_FLAG = 1;
/** Used for built-in method references. */

var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */

function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }

  var index = objLength;

  while (index--) {
    var key = objProps[index];

    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  } // Assume cyclic values are equal.


  var stacked = stack.get(object);

  if (stacked && stack.get(other)) {
    return stacked == other;
  }

  var result = true;
  stack.set(object, other);
  stack.set(other, object);
  var skipCtor = isPartial;

  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
    } // Recursively compare objects (susceptible to call stack limits).


    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
      result = false;
      break;
    }

    skipCtor || (skipCtor = key == 'constructor');
  }

  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor; // Non `Object` object instances with different constructors are not equal.

    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }

  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;

/***/ }),

/***/ "./node_modules/lodash/_flatRest.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_flatRest.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var flatten = __webpack_require__(/*! ./flatten */ "./node_modules/lodash/flatten.js"),
    overRest = __webpack_require__(/*! ./_overRest */ "./node_modules/lodash/_overRest.js"),
    setToString = __webpack_require__(/*! ./_setToString */ "./node_modules/lodash/_setToString.js");
/**
 * A specialized version of `baseRest` which flattens the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @returns {Function} Returns the new function.
 */


function flatRest(func) {
  return setToString(overRest(func, undefined, flatten), func + '');
}

module.exports = flatRest;

/***/ }),

/***/ "./node_modules/lodash/_freeGlobal.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_freeGlobal.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
module.exports = freeGlobal;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/lodash/_getAllKeys.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getAllKeys.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGetAllKeys = __webpack_require__(/*! ./_baseGetAllKeys */ "./node_modules/lodash/_baseGetAllKeys.js"),
    getSymbols = __webpack_require__(/*! ./_getSymbols */ "./node_modules/lodash/_getSymbols.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");
/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */


function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;

/***/ }),

/***/ "./node_modules/lodash/_getAllKeysIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getAllKeysIn.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGetAllKeys = __webpack_require__(/*! ./_baseGetAllKeys */ "./node_modules/lodash/_baseGetAllKeys.js"),
    getSymbolsIn = __webpack_require__(/*! ./_getSymbolsIn */ "./node_modules/lodash/_getSymbolsIn.js"),
    keysIn = __webpack_require__(/*! ./keysIn */ "./node_modules/lodash/keysIn.js");
/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */


function getAllKeysIn(object) {
  return baseGetAllKeys(object, keysIn, getSymbolsIn);
}

module.exports = getAllKeysIn;

/***/ }),

/***/ "./node_modules/lodash/_getData.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_getData.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var metaMap = __webpack_require__(/*! ./_metaMap */ "./node_modules/lodash/_metaMap.js"),
    noop = __webpack_require__(/*! ./noop */ "./node_modules/lodash/noop.js");
/**
 * Gets metadata for `func`.
 *
 * @private
 * @param {Function} func The function to query.
 * @returns {*} Returns the metadata for `func`.
 */


var getData = !metaMap ? noop : function (func) {
  return metaMap.get(func);
};
module.exports = getData;

/***/ }),

/***/ "./node_modules/lodash/_getFuncName.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_getFuncName.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var realNames = __webpack_require__(/*! ./_realNames */ "./node_modules/lodash/_realNames.js");
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Gets the name of `func`.
 *
 * @private
 * @param {Function} func The function to query.
 * @returns {string} Returns the function name.
 */

function getFuncName(func) {
  var result = func.name + '',
      array = realNames[result],
      length = hasOwnProperty.call(realNames, result) ? array.length : 0;

  while (length--) {
    var data = array[length],
        otherFunc = data.func;

    if (otherFunc == null || otherFunc == func) {
      return data.name;
    }
  }

  return result;
}

module.exports = getFuncName;

/***/ }),

/***/ "./node_modules/lodash/_getHolder.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getHolder.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Gets the argument placeholder value for `func`.
 *
 * @private
 * @param {Function} func The function to inspect.
 * @returns {*} Returns the placeholder value.
 */
function getHolder(func) {
  var object = func;
  return object.placeholder;
}

module.exports = getHolder;

/***/ }),

/***/ "./node_modules/lodash/_getMapData.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getMapData.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isKeyable = __webpack_require__(/*! ./_isKeyable */ "./node_modules/lodash/_isKeyable.js");
/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */


function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
}

module.exports = getMapData;

/***/ }),

/***/ "./node_modules/lodash/_getMatchData.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getMatchData.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isStrictComparable = __webpack_require__(/*! ./_isStrictComparable */ "./node_modules/lodash/_isStrictComparable.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");
/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */


function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];
    result[length] = [key, value, isStrictComparable(value)];
  }

  return result;
}

module.exports = getMatchData;

/***/ }),

/***/ "./node_modules/lodash/_getNative.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getNative.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseIsNative = __webpack_require__(/*! ./_baseIsNative */ "./node_modules/lodash/_baseIsNative.js"),
    getValue = __webpack_require__(/*! ./_getValue */ "./node_modules/lodash/_getValue.js");
/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */


function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;

/***/ }),

/***/ "./node_modules/lodash/_getPrototype.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getPrototype.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var overArg = __webpack_require__(/*! ./_overArg */ "./node_modules/lodash/_overArg.js");
/** Built-in value references. */


var getPrototype = overArg(Object.getPrototypeOf, Object);
module.exports = getPrototype;

/***/ }),

/***/ "./node_modules/lodash/_getRawTag.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getRawTag.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js");
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var nativeObjectToString = objectProto.toString;
/** Built-in value references. */

var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */

function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);

  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }

  return result;
}

module.exports = getRawTag;

/***/ }),

/***/ "./node_modules/lodash/_getSymbols.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getSymbols.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayFilter = __webpack_require__(/*! ./_arrayFilter */ "./node_modules/lodash/_arrayFilter.js"),
    stubArray = __webpack_require__(/*! ./stubArray */ "./node_modules/lodash/stubArray.js");
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Built-in value references. */

var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeGetSymbols = Object.getOwnPropertySymbols;
/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */

var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
  if (object == null) {
    return [];
  }

  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function (symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};
module.exports = getSymbols;

/***/ }),

/***/ "./node_modules/lodash/_getSymbolsIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getSymbolsIn.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayPush = __webpack_require__(/*! ./_arrayPush */ "./node_modules/lodash/_arrayPush.js"),
    getPrototype = __webpack_require__(/*! ./_getPrototype */ "./node_modules/lodash/_getPrototype.js"),
    getSymbols = __webpack_require__(/*! ./_getSymbols */ "./node_modules/lodash/_getSymbols.js"),
    stubArray = __webpack_require__(/*! ./stubArray */ "./node_modules/lodash/stubArray.js");
/* Built-in method references for those with the same name as other `lodash` methods. */


var nativeGetSymbols = Object.getOwnPropertySymbols;
/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */

var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
  var result = [];

  while (object) {
    arrayPush(result, getSymbols(object));
    object = getPrototype(object);
  }

  return result;
};
module.exports = getSymbolsIn;

/***/ }),

/***/ "./node_modules/lodash/_getTag.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_getTag.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var DataView = __webpack_require__(/*! ./_DataView */ "./node_modules/lodash/_DataView.js"),
    Map = __webpack_require__(/*! ./_Map */ "./node_modules/lodash/_Map.js"),
    Promise = __webpack_require__(/*! ./_Promise */ "./node_modules/lodash/_Promise.js"),
    Set = __webpack_require__(/*! ./_Set */ "./node_modules/lodash/_Set.js"),
    WeakMap = __webpack_require__(/*! ./_WeakMap */ "./node_modules/lodash/_WeakMap.js"),
    baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    toSource = __webpack_require__(/*! ./_toSource */ "./node_modules/lodash/_toSource.js");
/** `Object#toString` result references. */


var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';
var dataViewTag = '[object DataView]';
/** Used to detect maps, sets, and weakmaps. */

var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);
/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */

var getTag = baseGetTag; // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.

if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
  getTag = function (value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString:
          return dataViewTag;

        case mapCtorString:
          return mapTag;

        case promiseCtorString:
          return promiseTag;

        case setCtorString:
          return setTag;

        case weakMapCtorString:
          return weakMapTag;
      }
    }

    return result;
  };
}

module.exports = getTag;

/***/ }),

/***/ "./node_modules/lodash/_getValue.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_getValue.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;

/***/ }),

/***/ "./node_modules/lodash/_getWrapDetails.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_getWrapDetails.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used to match wrap detail comments. */
var reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
    reSplitDetails = /,? & /;
/**
 * Extracts wrapper details from the `source` body comment.
 *
 * @private
 * @param {string} source The source to inspect.
 * @returns {Array} Returns the wrapper details.
 */

function getWrapDetails(source) {
  var match = source.match(reWrapDetails);
  return match ? match[1].split(reSplitDetails) : [];
}

module.exports = getWrapDetails;

/***/ }),

/***/ "./node_modules/lodash/_hasPath.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hasPath.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var castPath = __webpack_require__(/*! ./_castPath */ "./node_modules/lodash/_castPath.js"),
    isArguments = __webpack_require__(/*! ./isArguments */ "./node_modules/lodash/isArguments.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isIndex = __webpack_require__(/*! ./_isIndex */ "./node_modules/lodash/_isIndex.js"),
    isLength = __webpack_require__(/*! ./isLength */ "./node_modules/lodash/isLength.js"),
    toKey = __webpack_require__(/*! ./_toKey */ "./node_modules/lodash/_toKey.js");
/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */


function hasPath(object, path, hasFunc) {
  path = castPath(path, object);
  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);

    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }

    object = object[key];
  }

  if (result || ++index != length) {
    return result;
  }

  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
}

module.exports = hasPath;

/***/ }),

/***/ "./node_modules/lodash/_hasUnicode.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_hasUnicode.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\ufe0e\\ufe0f';
/** Used to compose unicode capture groups. */

var rsZWJ = '\\u200d';
/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */

var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');
/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */

function hasUnicode(string) {
  return reHasUnicode.test(string);
}

module.exports = hasUnicode;

/***/ }),

/***/ "./node_modules/lodash/_hashClear.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_hashClear.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "./node_modules/lodash/_nativeCreate.js");
/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */


function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;

/***/ }),

/***/ "./node_modules/lodash/_hashDelete.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_hashDelete.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;

/***/ }),

/***/ "./node_modules/lodash/_hashGet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashGet.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "./node_modules/lodash/_nativeCreate.js");
/** Used to stand-in for `undefined` hash values. */


var HASH_UNDEFINED = '__lodash_hash_undefined__';
/** Used for built-in method references. */

var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */

function hashGet(key) {
  var data = this.__data__;

  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }

  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;

/***/ }),

/***/ "./node_modules/lodash/_hashHas.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashHas.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "./node_modules/lodash/_nativeCreate.js");
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */

function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
}

module.exports = hashHas;

/***/ }),

/***/ "./node_modules/lodash/_hashSet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashSet.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "./node_modules/lodash/_nativeCreate.js");
/** Used to stand-in for `undefined` hash values. */


var HASH_UNDEFINED = '__lodash_hash_undefined__';
/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */

function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;

/***/ }),

/***/ "./node_modules/lodash/_initCloneArray.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_initCloneArray.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */

function initCloneArray(array) {
  var length = array.length,
      result = new array.constructor(length); // Add properties assigned by `RegExp#exec`.

  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }

  return result;
}

module.exports = initCloneArray;

/***/ }),

/***/ "./node_modules/lodash/_initCloneByTag.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_initCloneByTag.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var cloneArrayBuffer = __webpack_require__(/*! ./_cloneArrayBuffer */ "./node_modules/lodash/_cloneArrayBuffer.js"),
    cloneDataView = __webpack_require__(/*! ./_cloneDataView */ "./node_modules/lodash/_cloneDataView.js"),
    cloneRegExp = __webpack_require__(/*! ./_cloneRegExp */ "./node_modules/lodash/_cloneRegExp.js"),
    cloneSymbol = __webpack_require__(/*! ./_cloneSymbol */ "./node_modules/lodash/_cloneSymbol.js"),
    cloneTypedArray = __webpack_require__(/*! ./_cloneTypedArray */ "./node_modules/lodash/_cloneTypedArray.js");
/** `Object#toString` result references. */


var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';
var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';
/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */

function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;

  switch (tag) {
    case arrayBufferTag:
      return cloneArrayBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case dataViewTag:
      return cloneDataView(object, isDeep);

    case float32Tag:
    case float64Tag:
    case int8Tag:
    case int16Tag:
    case int32Tag:
    case uint8Tag:
    case uint8ClampedTag:
    case uint16Tag:
    case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return new Ctor();

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return new Ctor();

    case symbolTag:
      return cloneSymbol(object);
  }
}

module.exports = initCloneByTag;

/***/ }),

/***/ "./node_modules/lodash/_initCloneObject.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_initCloneObject.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseCreate = __webpack_require__(/*! ./_baseCreate */ "./node_modules/lodash/_baseCreate.js"),
    getPrototype = __webpack_require__(/*! ./_getPrototype */ "./node_modules/lodash/_getPrototype.js"),
    isPrototype = __webpack_require__(/*! ./_isPrototype */ "./node_modules/lodash/_isPrototype.js");
/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */


function initCloneObject(object) {
  return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
}

module.exports = initCloneObject;

/***/ }),

/***/ "./node_modules/lodash/_insertWrapDetails.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash/_insertWrapDetails.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used to match wrap detail comments. */
var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/;
/**
 * Inserts wrapper `details` in a comment at the top of the `source` body.
 *
 * @private
 * @param {string} source The source to modify.
 * @returns {Array} details The details to insert.
 * @returns {string} Returns the modified source.
 */

function insertWrapDetails(source, details) {
  var length = details.length;

  if (!length) {
    return source;
  }

  var lastIndex = length - 1;
  details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
  details = details.join(length > 2 ? ', ' : ' ');
  return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
}

module.exports = insertWrapDetails;

/***/ }),

/***/ "./node_modules/lodash/_isFlattenable.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_isFlattenable.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js"),
    isArguments = __webpack_require__(/*! ./isArguments */ "./node_modules/lodash/isArguments.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js");
/** Built-in value references. */


var spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;
/**
 * Checks if `value` is a flattenable `arguments` object or array.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
 */

function isFlattenable(value) {
  return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
}

module.exports = isFlattenable;

/***/ }),

/***/ "./node_modules/lodash/_isIndex.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_isIndex.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;
/** Used to detect unsigned integer values. */

var reIsUint = /^(?:0|[1-9]\d*)$/;
/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */

function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;
  return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}

module.exports = isIndex;

/***/ }),

/***/ "./node_modules/lodash/_isIterateeCall.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_isIterateeCall.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var eq = __webpack_require__(/*! ./eq */ "./node_modules/lodash/eq.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js"),
    isIndex = __webpack_require__(/*! ./_isIndex */ "./node_modules/lodash/_isIndex.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js");
/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */


function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }

  var type = typeof index;

  if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
    return eq(object[index], value);
  }

  return false;
}

module.exports = isIterateeCall;

/***/ }),

/***/ "./node_modules/lodash/_isKey.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_isKey.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");
/** Used to match property names within property paths. */


var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;
/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */

function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }

  var type = typeof value;

  if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
    return true;
  }

  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
}

module.exports = isKey;

/***/ }),

/***/ "./node_modules/lodash/_isKeyable.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_isKeyable.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
}

module.exports = isKeyable;

/***/ }),

/***/ "./node_modules/lodash/_isLaziable.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_isLaziable.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var LazyWrapper = __webpack_require__(/*! ./_LazyWrapper */ "./node_modules/lodash/_LazyWrapper.js"),
    getData = __webpack_require__(/*! ./_getData */ "./node_modules/lodash/_getData.js"),
    getFuncName = __webpack_require__(/*! ./_getFuncName */ "./node_modules/lodash/_getFuncName.js"),
    lodash = __webpack_require__(/*! ./wrapperLodash */ "./node_modules/lodash/wrapperLodash.js");
/**
 * Checks if `func` has a lazy counterpart.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
 *  else `false`.
 */


function isLaziable(func) {
  var funcName = getFuncName(func),
      other = lodash[funcName];

  if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
    return false;
  }

  if (func === other) {
    return true;
  }

  var data = getData(other);
  return !!data && func === data[0];
}

module.exports = isLaziable;

/***/ }),

/***/ "./node_modules/lodash/_isMasked.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_isMasked.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var coreJsData = __webpack_require__(/*! ./_coreJsData */ "./node_modules/lodash/_coreJsData.js");
/** Used to detect methods masquerading as native. */


var maskSrcKey = function () {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? 'Symbol(src)_1.' + uid : '';
}();
/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */


function isMasked(func) {
  return !!maskSrcKey && maskSrcKey in func;
}

module.exports = isMasked;

/***/ }),

/***/ "./node_modules/lodash/_isPrototype.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_isPrototype.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;
/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */

function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
  return value === proto;
}

module.exports = isPrototype;

/***/ }),

/***/ "./node_modules/lodash/_isStrictComparable.js":
/*!****************************************************!*\
  !*** ./node_modules/lodash/_isStrictComparable.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js");
/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */


function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;

/***/ }),

/***/ "./node_modules/lodash/_listCacheClear.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_listCacheClear.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;

/***/ }),

/***/ "./node_modules/lodash/_listCacheDelete.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_listCacheDelete.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");
/** Used for built-in method references. */


var arrayProto = Array.prototype;
/** Built-in value references. */

var splice = arrayProto.splice;
/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */

function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }

  var lastIndex = data.length - 1;

  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }

  --this.size;
  return true;
}

module.exports = listCacheDelete;

/***/ }),

/***/ "./node_modules/lodash/_listCacheGet.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheGet.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");
/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */


function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);
  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;

/***/ }),

/***/ "./node_modules/lodash/_listCacheHas.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheHas.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");
/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */


function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;

/***/ }),

/***/ "./node_modules/lodash/_listCacheSet.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheSet.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");
/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */


function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }

  return this;
}

module.exports = listCacheSet;

/***/ }),

/***/ "./node_modules/lodash/_mapCacheClear.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_mapCacheClear.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Hash = __webpack_require__(/*! ./_Hash */ "./node_modules/lodash/_Hash.js"),
    ListCache = __webpack_require__(/*! ./_ListCache */ "./node_modules/lodash/_ListCache.js"),
    Map = __webpack_require__(/*! ./_Map */ "./node_modules/lodash/_Map.js");
/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */


function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash(),
    'map': new (Map || ListCache)(),
    'string': new Hash()
  };
}

module.exports = mapCacheClear;

/***/ }),

/***/ "./node_modules/lodash/_mapCacheDelete.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_mapCacheDelete.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(/*! ./_getMapData */ "./node_modules/lodash/_getMapData.js");
/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */


function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;

/***/ }),

/***/ "./node_modules/lodash/_mapCacheGet.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheGet.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(/*! ./_getMapData */ "./node_modules/lodash/_getMapData.js");
/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */


function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;

/***/ }),

/***/ "./node_modules/lodash/_mapCacheHas.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheHas.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(/*! ./_getMapData */ "./node_modules/lodash/_getMapData.js");
/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */


function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;

/***/ }),

/***/ "./node_modules/lodash/_mapCacheSet.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheSet.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getMapData = __webpack_require__(/*! ./_getMapData */ "./node_modules/lodash/_getMapData.js");
/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */


function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;
  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;

/***/ }),

/***/ "./node_modules/lodash/_mapToArray.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_mapToArray.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);
  map.forEach(function (value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;

/***/ }),

/***/ "./node_modules/lodash/_matchesStrictComparable.js":
/*!*********************************************************!*\
  !*** ./node_modules/lodash/_matchesStrictComparable.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function (object) {
    if (object == null) {
      return false;
    }

    return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
  };
}

module.exports = matchesStrictComparable;

/***/ }),

/***/ "./node_modules/lodash/_memoizeCapped.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_memoizeCapped.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var memoize = __webpack_require__(/*! ./memoize */ "./node_modules/lodash/memoize.js");
/** Used as the maximum memoize cache size. */


var MAX_MEMOIZE_SIZE = 500;
/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */

function memoizeCapped(func) {
  var result = memoize(func, function (key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }

    return key;
  });
  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;

/***/ }),

/***/ "./node_modules/lodash/_mergeData.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_mergeData.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var composeArgs = __webpack_require__(/*! ./_composeArgs */ "./node_modules/lodash/_composeArgs.js"),
    composeArgsRight = __webpack_require__(/*! ./_composeArgsRight */ "./node_modules/lodash/_composeArgsRight.js"),
    replaceHolders = __webpack_require__(/*! ./_replaceHolders */ "./node_modules/lodash/_replaceHolders.js");
/** Used as the internal argument placeholder. */


var PLACEHOLDER = '__lodash_placeholder__';
/** Used to compose bitmasks for function metadata. */

var WRAP_BIND_FLAG = 1,
    WRAP_BIND_KEY_FLAG = 2,
    WRAP_CURRY_BOUND_FLAG = 4,
    WRAP_CURRY_FLAG = 8,
    WRAP_ARY_FLAG = 128,
    WRAP_REARG_FLAG = 256;
/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeMin = Math.min;
/**
 * Merges the function metadata of `source` into `data`.
 *
 * Merging metadata reduces the number of wrappers used to invoke a function.
 * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
 * may be applied regardless of execution order. Methods like `_.ary` and
 * `_.rearg` modify function arguments, making the order in which they are
 * executed important, preventing the merging of metadata. However, we make
 * an exception for a safe combined case where curried functions have `_.ary`
 * and or `_.rearg` applied.
 *
 * @private
 * @param {Array} data The destination metadata.
 * @param {Array} source The source metadata.
 * @returns {Array} Returns `data`.
 */

function mergeData(data, source) {
  var bitmask = data[1],
      srcBitmask = source[1],
      newBitmask = bitmask | srcBitmask,
      isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
  var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG; // Exit early if metadata can't be merged.

  if (!(isCommon || isCombo)) {
    return data;
  } // Use source `thisArg` if available.


  if (srcBitmask & WRAP_BIND_FLAG) {
    data[2] = source[2]; // Set when currying a bound function.

    newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
  } // Compose partial arguments.


  var value = source[3];

  if (value) {
    var partials = data[3];
    data[3] = partials ? composeArgs(partials, value, source[4]) : value;
    data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
  } // Compose partial right arguments.


  value = source[5];

  if (value) {
    partials = data[5];
    data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
    data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
  } // Use source `argPos` if available.


  value = source[7];

  if (value) {
    data[7] = value;
  } // Use source `ary` if it's smaller.


  if (srcBitmask & WRAP_ARY_FLAG) {
    data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
  } // Use source `arity` if one is not provided.


  if (data[9] == null) {
    data[9] = source[9];
  } // Use source `func` and merge bitmasks.


  data[0] = source[0];
  data[1] = newBitmask;
  return data;
}

module.exports = mergeData;

/***/ }),

/***/ "./node_modules/lodash/_metaMap.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_metaMap.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var WeakMap = __webpack_require__(/*! ./_WeakMap */ "./node_modules/lodash/_WeakMap.js");
/** Used to store function metadata. */


var metaMap = WeakMap && new WeakMap();
module.exports = metaMap;

/***/ }),

/***/ "./node_modules/lodash/_nativeCreate.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_nativeCreate.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js");
/* Built-in method references that are verified to be native. */


var nativeCreate = getNative(Object, 'create');
module.exports = nativeCreate;

/***/ }),

/***/ "./node_modules/lodash/_nativeKeys.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_nativeKeys.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var overArg = __webpack_require__(/*! ./_overArg */ "./node_modules/lodash/_overArg.js");
/* Built-in method references for those with the same name as other `lodash` methods. */


var nativeKeys = overArg(Object.keys, Object);
module.exports = nativeKeys;

/***/ }),

/***/ "./node_modules/lodash/_nativeKeysIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_nativeKeysIn.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];

  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }

  return result;
}

module.exports = nativeKeysIn;

/***/ }),

/***/ "./node_modules/lodash/_nodeUtil.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_nodeUtil.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ "./node_modules/lodash/_freeGlobal.js");
/** Detect free variable `exports`. */


var freeExports =  true && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */

var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */

var moduleExports = freeModule && freeModule.exports === freeExports;
/** Detect free variable `process` from Node.js. */

var freeProcess = moduleExports && freeGlobal.process;
/** Used to access faster Node.js helpers. */

var nodeUtil = function () {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    } // Legacy `process.binding('util')` for Node.js < 10.


    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}();

module.exports = nodeUtil;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/lodash/_objectToString.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_objectToString.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */

var nativeObjectToString = objectProto.toString;
/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */

function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;

/***/ }),

/***/ "./node_modules/lodash/_overArg.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_overArg.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function (arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;

/***/ }),

/***/ "./node_modules/lodash/_overRest.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_overRest.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var apply = __webpack_require__(/*! ./_apply */ "./node_modules/lodash/_apply.js");
/* Built-in method references for those with the same name as other `lodash` methods. */


var nativeMax = Math.max;
/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */

function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? func.length - 1 : start, 0);
  return function () {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }

    index = -1;
    var otherArgs = Array(start + 1);

    while (++index < start) {
      otherArgs[index] = args[index];
    }

    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

module.exports = overRest;

/***/ }),

/***/ "./node_modules/lodash/_parent.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_parent.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__(/*! ./_baseGet */ "./node_modules/lodash/_baseGet.js"),
    baseSlice = __webpack_require__(/*! ./_baseSlice */ "./node_modules/lodash/_baseSlice.js");
/**
 * Gets the parent value at `path` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} path The path to get the parent value of.
 * @returns {*} Returns the parent value.
 */


function parent(object, path) {
  return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
}

module.exports = parent;

/***/ }),

/***/ "./node_modules/lodash/_realNames.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_realNames.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used to lookup unminified function names. */
var realNames = {};
module.exports = realNames;

/***/ }),

/***/ "./node_modules/lodash/_reorder.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_reorder.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var copyArray = __webpack_require__(/*! ./_copyArray */ "./node_modules/lodash/_copyArray.js"),
    isIndex = __webpack_require__(/*! ./_isIndex */ "./node_modules/lodash/_isIndex.js");
/* Built-in method references for those with the same name as other `lodash` methods. */


var nativeMin = Math.min;
/**
 * Reorder `array` according to the specified indexes where the element at
 * the first index is assigned as the first element, the element at
 * the second index is assigned as the second element, and so on.
 *
 * @private
 * @param {Array} array The array to reorder.
 * @param {Array} indexes The arranged array indexes.
 * @returns {Array} Returns `array`.
 */

function reorder(array, indexes) {
  var arrLength = array.length,
      length = nativeMin(indexes.length, arrLength),
      oldArray = copyArray(array);

  while (length--) {
    var index = indexes[length];
    array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
  }

  return array;
}

module.exports = reorder;

/***/ }),

/***/ "./node_modules/lodash/_replaceHolders.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_replaceHolders.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used as the internal argument placeholder. */
var PLACEHOLDER = '__lodash_placeholder__';
/**
 * Replaces all `placeholder` elements in `array` with an internal placeholder
 * and returns an array of their indexes.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {*} placeholder The placeholder to replace.
 * @returns {Array} Returns the new array of placeholder indexes.
 */

function replaceHolders(array, placeholder) {
  var index = -1,
      length = array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];

    if (value === placeholder || value === PLACEHOLDER) {
      array[index] = PLACEHOLDER;
      result[resIndex++] = index;
    }
  }

  return result;
}

module.exports = replaceHolders;

/***/ }),

/***/ "./node_modules/lodash/_root.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/_root.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ "./node_modules/lodash/_freeGlobal.js");
/** Detect free variable `self`. */


var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */

var root = freeGlobal || freeSelf || Function('return this')();
module.exports = root;

/***/ }),

/***/ "./node_modules/lodash/_safeGet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_safeGet.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Gets the value at `key`, unless `key` is "__proto__".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function safeGet(object, key) {
  if (key == '__proto__') {
    return;
  }

  return object[key];
}

module.exports = safeGet;

/***/ }),

/***/ "./node_modules/lodash/_setCacheAdd.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_setCacheAdd.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';
/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */

function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);

  return this;
}

module.exports = setCacheAdd;

/***/ }),

/***/ "./node_modules/lodash/_setCacheHas.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_setCacheHas.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;

/***/ }),

/***/ "./node_modules/lodash/_setData.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_setData.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseSetData = __webpack_require__(/*! ./_baseSetData */ "./node_modules/lodash/_baseSetData.js"),
    shortOut = __webpack_require__(/*! ./_shortOut */ "./node_modules/lodash/_shortOut.js");
/**
 * Sets metadata for `func`.
 *
 * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
 * period of time, it will trip its breaker and transition to an identity
 * function to avoid garbage collection pauses in V8. See
 * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
 * for more details.
 *
 * @private
 * @param {Function} func The function to associate metadata with.
 * @param {*} data The metadata.
 * @returns {Function} Returns `func`.
 */


var setData = shortOut(baseSetData);
module.exports = setData;

/***/ }),

/***/ "./node_modules/lodash/_setToArray.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_setToArray.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);
  set.forEach(function (value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;

/***/ }),

/***/ "./node_modules/lodash/_setToString.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_setToString.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseSetToString = __webpack_require__(/*! ./_baseSetToString */ "./node_modules/lodash/_baseSetToString.js"),
    shortOut = __webpack_require__(/*! ./_shortOut */ "./node_modules/lodash/_shortOut.js");
/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */


var setToString = shortOut(baseSetToString);
module.exports = setToString;

/***/ }),

/***/ "./node_modules/lodash/_setWrapToString.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_setWrapToString.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getWrapDetails = __webpack_require__(/*! ./_getWrapDetails */ "./node_modules/lodash/_getWrapDetails.js"),
    insertWrapDetails = __webpack_require__(/*! ./_insertWrapDetails */ "./node_modules/lodash/_insertWrapDetails.js"),
    setToString = __webpack_require__(/*! ./_setToString */ "./node_modules/lodash/_setToString.js"),
    updateWrapDetails = __webpack_require__(/*! ./_updateWrapDetails */ "./node_modules/lodash/_updateWrapDetails.js");
/**
 * Sets the `toString` method of `wrapper` to mimic the source of `reference`
 * with wrapper details in a comment at the top of the source body.
 *
 * @private
 * @param {Function} wrapper The function to modify.
 * @param {Function} reference The reference function.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Function} Returns `wrapper`.
 */


function setWrapToString(wrapper, reference, bitmask) {
  var source = reference + '';
  return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
}

module.exports = setWrapToString;

/***/ }),

/***/ "./node_modules/lodash/_shortOut.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_shortOut.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;
/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeNow = Date.now;
/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */

function shortOut(func) {
  var count = 0,
      lastCalled = 0;
  return function () {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);
    lastCalled = stamp;

    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }

    return func.apply(undefined, arguments);
  };
}

module.exports = shortOut;

/***/ }),

/***/ "./node_modules/lodash/_stackClear.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_stackClear.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(/*! ./_ListCache */ "./node_modules/lodash/_ListCache.js");
/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */


function stackClear() {
  this.__data__ = new ListCache();
  this.size = 0;
}

module.exports = stackClear;

/***/ }),

/***/ "./node_modules/lodash/_stackDelete.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_stackDelete.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);
  this.size = data.size;
  return result;
}

module.exports = stackDelete;

/***/ }),

/***/ "./node_modules/lodash/_stackGet.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackGet.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;

/***/ }),

/***/ "./node_modules/lodash/_stackHas.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackHas.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;

/***/ }),

/***/ "./node_modules/lodash/_stackSet.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackSet.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var ListCache = __webpack_require__(/*! ./_ListCache */ "./node_modules/lodash/_ListCache.js"),
    Map = __webpack_require__(/*! ./_Map */ "./node_modules/lodash/_Map.js"),
    MapCache = __webpack_require__(/*! ./_MapCache */ "./node_modules/lodash/_MapCache.js");
/** Used as the size to enable large array optimizations. */


var LARGE_ARRAY_SIZE = 200;
/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */

function stackSet(key, value) {
  var data = this.__data__;

  if (data instanceof ListCache) {
    var pairs = data.__data__;

    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }

    data = this.__data__ = new MapCache(pairs);
  }

  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;

/***/ }),

/***/ "./node_modules/lodash/_strictIndexOf.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_strictIndexOf.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }

  return -1;
}

module.exports = strictIndexOf;

/***/ }),

/***/ "./node_modules/lodash/_stringSize.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_stringSize.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var asciiSize = __webpack_require__(/*! ./_asciiSize */ "./node_modules/lodash/_asciiSize.js"),
    hasUnicode = __webpack_require__(/*! ./_hasUnicode */ "./node_modules/lodash/_hasUnicode.js"),
    unicodeSize = __webpack_require__(/*! ./_unicodeSize */ "./node_modules/lodash/_unicodeSize.js");
/**
 * Gets the number of symbols in `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the string size.
 */


function stringSize(string) {
  return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
}

module.exports = stringSize;

/***/ }),

/***/ "./node_modules/lodash/_stringToArray.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_stringToArray.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var asciiToArray = __webpack_require__(/*! ./_asciiToArray */ "./node_modules/lodash/_asciiToArray.js"),
    hasUnicode = __webpack_require__(/*! ./_hasUnicode */ "./node_modules/lodash/_hasUnicode.js"),
    unicodeToArray = __webpack_require__(/*! ./_unicodeToArray */ "./node_modules/lodash/_unicodeToArray.js");
/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */


function stringToArray(string) {
  return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
}

module.exports = stringToArray;

/***/ }),

/***/ "./node_modules/lodash/_stringToPath.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_stringToPath.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var memoizeCapped = __webpack_require__(/*! ./_memoizeCapped */ "./node_modules/lodash/_memoizeCapped.js");
/** Used to match property names within property paths. */


var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
/** Used to match backslashes in property paths. */

var reEscapeChar = /\\(\\)?/g;
/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */

var stringToPath = memoizeCapped(function (string) {
  var result = [];

  if (string.charCodeAt(0) === 46
  /* . */
  ) {
      result.push('');
    }

  string.replace(rePropName, function (match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
  });
  return result;
});
module.exports = stringToPath;

/***/ }),

/***/ "./node_modules/lodash/_toKey.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_toKey.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");
/** Used as references for various `Number` constants. */


var INFINITY = 1 / 0;
/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */

function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }

  var result = value + '';
  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
}

module.exports = toKey;

/***/ }),

/***/ "./node_modules/lodash/_toSource.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_toSource.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used for built-in method references. */
var funcProto = Function.prototype;
/** Used to resolve the decompiled source of functions. */

var funcToString = funcProto.toString;
/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */

function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}

    try {
      return func + '';
    } catch (e) {}
  }

  return '';
}

module.exports = toSource;

/***/ }),

/***/ "./node_modules/lodash/_unicodeSize.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_unicodeSize.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\ufe0e\\ufe0f';
/** Used to compose unicode capture groups. */

var rsAstral = '[' + rsAstralRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsZWJ = '\\u200d';
/** Used to compose unicode regexes. */

var reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */

var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
/**
 * Gets the size of a Unicode `string`.
 *
 * @private
 * @param {string} string The string inspect.
 * @returns {number} Returns the string size.
 */

function unicodeSize(string) {
  var result = reUnicode.lastIndex = 0;

  while (reUnicode.test(string)) {
    ++result;
  }

  return result;
}

module.exports = unicodeSize;

/***/ }),

/***/ "./node_modules/lodash/_unicodeToArray.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_unicodeToArray.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\ufe0e\\ufe0f';
/** Used to compose unicode capture groups. */

var rsAstral = '[' + rsAstralRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsZWJ = '\\u200d';
/** Used to compose unicode regexes. */

var reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */

var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */

function unicodeToArray(string) {
  return string.match(reUnicode) || [];
}

module.exports = unicodeToArray;

/***/ }),

/***/ "./node_modules/lodash/_updateWrapDetails.js":
/*!***************************************************!*\
  !*** ./node_modules/lodash/_updateWrapDetails.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayEach = __webpack_require__(/*! ./_arrayEach */ "./node_modules/lodash/_arrayEach.js"),
    arrayIncludes = __webpack_require__(/*! ./_arrayIncludes */ "./node_modules/lodash/_arrayIncludes.js");
/** Used to compose bitmasks for function metadata. */


var WRAP_BIND_FLAG = 1,
    WRAP_BIND_KEY_FLAG = 2,
    WRAP_CURRY_FLAG = 8,
    WRAP_CURRY_RIGHT_FLAG = 16,
    WRAP_PARTIAL_FLAG = 32,
    WRAP_PARTIAL_RIGHT_FLAG = 64,
    WRAP_ARY_FLAG = 128,
    WRAP_REARG_FLAG = 256,
    WRAP_FLIP_FLAG = 512;
/** Used to associate wrap methods with their bit flags. */

var wrapFlags = [['ary', WRAP_ARY_FLAG], ['bind', WRAP_BIND_FLAG], ['bindKey', WRAP_BIND_KEY_FLAG], ['curry', WRAP_CURRY_FLAG], ['curryRight', WRAP_CURRY_RIGHT_FLAG], ['flip', WRAP_FLIP_FLAG], ['partial', WRAP_PARTIAL_FLAG], ['partialRight', WRAP_PARTIAL_RIGHT_FLAG], ['rearg', WRAP_REARG_FLAG]];
/**
 * Updates wrapper `details` based on `bitmask` flags.
 *
 * @private
 * @returns {Array} details The details to modify.
 * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
 * @returns {Array} Returns `details`.
 */

function updateWrapDetails(details, bitmask) {
  arrayEach(wrapFlags, function (pair) {
    var value = '_.' + pair[0];

    if (bitmask & pair[1] && !arrayIncludes(details, value)) {
      details.push(value);
    }
  });
  return details.sort();
}

module.exports = updateWrapDetails;

/***/ }),

/***/ "./node_modules/lodash/_wrapperClone.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_wrapperClone.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var LazyWrapper = __webpack_require__(/*! ./_LazyWrapper */ "./node_modules/lodash/_LazyWrapper.js"),
    LodashWrapper = __webpack_require__(/*! ./_LodashWrapper */ "./node_modules/lodash/_LodashWrapper.js"),
    copyArray = __webpack_require__(/*! ./_copyArray */ "./node_modules/lodash/_copyArray.js");
/**
 * Creates a clone of `wrapper`.
 *
 * @private
 * @param {Object} wrapper The wrapper to clone.
 * @returns {Object} Returns the cloned wrapper.
 */


function wrapperClone(wrapper) {
  if (wrapper instanceof LazyWrapper) {
    return wrapper.clone();
  }

  var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
  result.__actions__ = copyArray(wrapper.__actions__);
  result.__index__ = wrapper.__index__;
  result.__values__ = wrapper.__values__;
  return result;
}

module.exports = wrapperClone;

/***/ }),

/***/ "./node_modules/lodash/ary.js":
/*!************************************!*\
  !*** ./node_modules/lodash/ary.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var createWrap = __webpack_require__(/*! ./_createWrap */ "./node_modules/lodash/_createWrap.js");
/** Used to compose bitmasks for function metadata. */


var WRAP_ARY_FLAG = 128;
/**
 * Creates a function that invokes `func`, with up to `n` arguments,
 * ignoring any additional arguments.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} func The function to cap arguments for.
 * @param {number} [n=func.length] The arity cap.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Function} Returns the new capped function.
 * @example
 *
 * _.map(['6', '8', '10'], _.ary(parseInt, 1));
 * // => [6, 8, 10]
 */

function ary(func, n, guard) {
  n = guard ? undefined : n;
  n = func && n == null ? func.length : n;
  return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
}

module.exports = ary;

/***/ }),

/***/ "./node_modules/lodash/assign.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/assign.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var assignValue = __webpack_require__(/*! ./_assignValue */ "./node_modules/lodash/_assignValue.js"),
    copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    createAssigner = __webpack_require__(/*! ./_createAssigner */ "./node_modules/lodash/_createAssigner.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js"),
    isPrototype = __webpack_require__(/*! ./_isPrototype */ "./node_modules/lodash/_isPrototype.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Assigns own enumerable string keyed properties of source objects to the
 * destination object. Source objects are applied from left to right.
 * Subsequent sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object` and is loosely based on
 * [`Object.assign`](https://mdn.io/Object/assign).
 *
 * @static
 * @memberOf _
 * @since 0.10.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.assignIn
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * function Bar() {
 *   this.c = 3;
 * }
 *
 * Foo.prototype.b = 2;
 * Bar.prototype.d = 4;
 *
 * _.assign({ 'a': 0 }, new Foo, new Bar);
 * // => { 'a': 1, 'c': 3 }
 */

var assign = createAssigner(function (object, source) {
  if (isPrototype(source) || isArrayLike(source)) {
    copyObject(source, keys(source), object);
    return;
  }

  for (var key in source) {
    if (hasOwnProperty.call(source, key)) {
      assignValue(object, key, source[key]);
    }
  }
});
module.exports = assign;

/***/ }),

/***/ "./node_modules/lodash/capitalize.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/capitalize.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toString = __webpack_require__(/*! ./toString */ "./node_modules/lodash/toString.js"),
    upperFirst = __webpack_require__(/*! ./upperFirst */ "./node_modules/lodash/upperFirst.js");
/**
 * Converts the first character of `string` to upper case and the remaining
 * to lower case.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to capitalize.
 * @returns {string} Returns the capitalized string.
 * @example
 *
 * _.capitalize('FRED');
 * // => 'Fred'
 */


function capitalize(string) {
  return upperFirst(toString(string).toLowerCase());
}

module.exports = capitalize;

/***/ }),

/***/ "./node_modules/lodash/clone.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/clone.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseClone = __webpack_require__(/*! ./_baseClone */ "./node_modules/lodash/_baseClone.js");
/** Used to compose bitmasks for cloning. */


var CLONE_SYMBOLS_FLAG = 4;
/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeep
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */

function clone(value) {
  return baseClone(value, CLONE_SYMBOLS_FLAG);
}

module.exports = clone;

/***/ }),

/***/ "./node_modules/lodash/cloneDeep.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/cloneDeep.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseClone = __webpack_require__(/*! ./_baseClone */ "./node_modules/lodash/_baseClone.js");
/** Used to compose bitmasks for cloning. */


var CLONE_DEEP_FLAG = 1,
    CLONE_SYMBOLS_FLAG = 4;
/**
 * This method is like `_.clone` except that it recursively clones `value`.
 *
 * @static
 * @memberOf _
 * @since 1.0.0
 * @category Lang
 * @param {*} value The value to recursively clone.
 * @returns {*} Returns the deep cloned value.
 * @see _.clone
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var deep = _.cloneDeep(objects);
 * console.log(deep[0] === objects[0]);
 * // => false
 */

function cloneDeep(value) {
  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
}

module.exports = cloneDeep;

/***/ }),

/***/ "./node_modules/lodash/compact.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/compact.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Creates an array with all falsey values removed. The values `false`, `null`,
 * `0`, `""`, `undefined`, and `NaN` are falsey.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to compact.
 * @returns {Array} Returns the new array of filtered values.
 * @example
 *
 * _.compact([0, 1, false, 2, '', 3]);
 * // => [1, 2, 3]
 */
function compact(array) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];

    if (value) {
      result[resIndex++] = value;
    }
  }

  return result;
}

module.exports = compact;

/***/ }),

/***/ "./node_modules/lodash/constant.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/constant.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function () {
    return value;
  };
}

module.exports = constant;

/***/ }),

/***/ "./node_modules/lodash/curry.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/curry.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var createWrap = __webpack_require__(/*! ./_createWrap */ "./node_modules/lodash/_createWrap.js");
/** Used to compose bitmasks for function metadata. */


var WRAP_CURRY_FLAG = 8;
/**
 * Creates a function that accepts arguments of `func` and either invokes
 * `func` returning its result, if at least `arity` number of arguments have
 * been provided, or returns a function that accepts the remaining `func`
 * arguments, and so on. The arity of `func` may be specified if `func.length`
 * is not sufficient.
 *
 * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
 * may be used as a placeholder for provided arguments.
 *
 * **Note:** This method doesn't set the "length" property of curried functions.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Function
 * @param {Function} func The function to curry.
 * @param {number} [arity=func.length] The arity of `func`.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {Function} Returns the new curried function.
 * @example
 *
 * var abc = function(a, b, c) {
 *   return [a, b, c];
 * };
 *
 * var curried = _.curry(abc);
 *
 * curried(1)(2)(3);
 * // => [1, 2, 3]
 *
 * curried(1, 2)(3);
 * // => [1, 2, 3]
 *
 * curried(1, 2, 3);
 * // => [1, 2, 3]
 *
 * // Curried with placeholders.
 * curried(1)(_, 3)(2);
 * // => [1, 2, 3]
 */

function curry(func, arity, guard) {
  arity = guard ? undefined : arity;
  var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
  result.placeholder = curry.placeholder;
  return result;
} // Assign default placeholders.


curry.placeholder = {};
module.exports = curry;

/***/ }),

/***/ "./node_modules/lodash/defaultsDeep.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/defaultsDeep.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var apply = __webpack_require__(/*! ./_apply */ "./node_modules/lodash/_apply.js"),
    baseRest = __webpack_require__(/*! ./_baseRest */ "./node_modules/lodash/_baseRest.js"),
    customDefaultsMerge = __webpack_require__(/*! ./_customDefaultsMerge */ "./node_modules/lodash/_customDefaultsMerge.js"),
    mergeWith = __webpack_require__(/*! ./mergeWith */ "./node_modules/lodash/mergeWith.js");
/**
 * This method is like `_.defaults` except that it recursively assigns
 * default properties.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 3.10.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @see _.defaults
 * @example
 *
 * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
 * // => { 'a': { 'b': 2, 'c': 3 } }
 */


var defaultsDeep = baseRest(function (args) {
  args.push(undefined, customDefaultsMerge);
  return apply(mergeWith, undefined, args);
});
module.exports = defaultsDeep;

/***/ }),

/***/ "./node_modules/lodash/differenceWith.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/differenceWith.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseDifference = __webpack_require__(/*! ./_baseDifference */ "./node_modules/lodash/_baseDifference.js"),
    baseFlatten = __webpack_require__(/*! ./_baseFlatten */ "./node_modules/lodash/_baseFlatten.js"),
    baseRest = __webpack_require__(/*! ./_baseRest */ "./node_modules/lodash/_baseRest.js"),
    isArrayLikeObject = __webpack_require__(/*! ./isArrayLikeObject */ "./node_modules/lodash/isArrayLikeObject.js"),
    last = __webpack_require__(/*! ./last */ "./node_modules/lodash/last.js");
/**
 * This method is like `_.difference` except that it accepts `comparator`
 * which is invoked to compare elements of `array` to `values`. The order and
 * references of result values are determined by the first array. The comparator
 * is invoked with two arguments: (arrVal, othVal).
 *
 * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {Array} array The array to inspect.
 * @param {...Array} [values] The values to exclude.
 * @param {Function} [comparator] The comparator invoked per element.
 * @returns {Array} Returns the new array of filtered values.
 * @example
 *
 * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
 *
 * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
 * // => [{ 'x': 2, 'y': 1 }]
 */


var differenceWith = baseRest(function (array, values) {
  var comparator = last(values);

  if (isArrayLikeObject(comparator)) {
    comparator = undefined;
  }

  return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
});
module.exports = differenceWith;

/***/ }),

/***/ "./node_modules/lodash/eq.js":
/*!***********************************!*\
  !*** ./node_modules/lodash/eq.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || value !== value && other !== other;
}

module.exports = eq;

/***/ }),

/***/ "./node_modules/lodash/every.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/every.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayEvery = __webpack_require__(/*! ./_arrayEvery */ "./node_modules/lodash/_arrayEvery.js"),
    baseEvery = __webpack_require__(/*! ./_baseEvery */ "./node_modules/lodash/_baseEvery.js"),
    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ "./node_modules/lodash/_baseIteratee.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isIterateeCall = __webpack_require__(/*! ./_isIterateeCall */ "./node_modules/lodash/_isIterateeCall.js");
/**
 * Checks if `predicate` returns truthy for **all** elements of `collection`.
 * Iteration is stopped once `predicate` returns falsey. The predicate is
 * invoked with three arguments: (value, index|key, collection).
 *
 * **Note:** This method returns `true` for
 * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
 * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
 * elements of empty collections.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`.
 * @example
 *
 * _.every([true, 1, null, 'yes'], Boolean);
 * // => false
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': false },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.every(users, { 'user': 'barney', 'active': false });
 * // => false
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.every(users, ['active', false]);
 * // => true
 *
 * // The `_.property` iteratee shorthand.
 * _.every(users, 'active');
 * // => false
 */


function every(collection, predicate, guard) {
  var func = isArray(collection) ? arrayEvery : baseEvery;

  if (guard && isIterateeCall(collection, predicate, guard)) {
    predicate = undefined;
  }

  return func(collection, baseIteratee(predicate, 3));
}

module.exports = every;

/***/ }),

/***/ "./node_modules/lodash/filter.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/filter.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayFilter = __webpack_require__(/*! ./_arrayFilter */ "./node_modules/lodash/_arrayFilter.js"),
    baseFilter = __webpack_require__(/*! ./_baseFilter */ "./node_modules/lodash/_baseFilter.js"),
    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ "./node_modules/lodash/_baseIteratee.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js");
/**
 * Iterates over elements of `collection`, returning an array of all elements
 * `predicate` returns truthy for. The predicate is invoked with three
 * arguments: (value, index|key, collection).
 *
 * **Note:** Unlike `_.remove`, this method returns a new array.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 * @see _.reject
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': true },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * _.filter(users, function(o) { return !o.active; });
 * // => objects for ['fred']
 *
 * // The `_.matches` iteratee shorthand.
 * _.filter(users, { 'age': 36, 'active': true });
 * // => objects for ['barney']
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.filter(users, ['active', false]);
 * // => objects for ['fred']
 *
 * // The `_.property` iteratee shorthand.
 * _.filter(users, 'active');
 * // => objects for ['barney']
 */


function filter(collection, predicate) {
  var func = isArray(collection) ? arrayFilter : baseFilter;
  return func(collection, baseIteratee(predicate, 3));
}

module.exports = filter;

/***/ }),

/***/ "./node_modules/lodash/flatMap.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/flatMap.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseFlatten = __webpack_require__(/*! ./_baseFlatten */ "./node_modules/lodash/_baseFlatten.js"),
    map = __webpack_require__(/*! ./map */ "./node_modules/lodash/map.js");
/**
 * Creates a flattened array of values by running each element in `collection`
 * thru `iteratee` and flattening the mapped results. The iteratee is invoked
 * with three arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * function duplicate(n) {
 *   return [n, n];
 * }
 *
 * _.flatMap([1, 2], duplicate);
 * // => [1, 1, 2, 2]
 */


function flatMap(collection, iteratee) {
  return baseFlatten(map(collection, iteratee), 1);
}

module.exports = flatMap;

/***/ }),

/***/ "./node_modules/lodash/flatten.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/flatten.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseFlatten = __webpack_require__(/*! ./_baseFlatten */ "./node_modules/lodash/_baseFlatten.js");
/**
 * Flattens `array` a single level deep.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to flatten.
 * @returns {Array} Returns the new flattened array.
 * @example
 *
 * _.flatten([1, [2, [3, [4]], 5]]);
 * // => [1, 2, [3, [4]], 5]
 */


function flatten(array) {
  var length = array == null ? 0 : array.length;
  return length ? baseFlatten(array, 1) : [];
}

module.exports = flatten;

/***/ }),

/***/ "./node_modules/lodash/forEach.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/forEach.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayEach = __webpack_require__(/*! ./_arrayEach */ "./node_modules/lodash/_arrayEach.js"),
    baseEach = __webpack_require__(/*! ./_baseEach */ "./node_modules/lodash/_baseEach.js"),
    castFunction = __webpack_require__(/*! ./_castFunction */ "./node_modules/lodash/_castFunction.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js");
/**
 * Iterates over elements of `collection` and invokes `iteratee` for each element.
 * The iteratee is invoked with three arguments: (value, index|key, collection).
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * **Note:** As with other "Collections" methods, objects with a "length"
 * property are iterated like arrays. To avoid this behavior use `_.forIn`
 * or `_.forOwn` for object iteration.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @alias each
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 * @see _.forEachRight
 * @example
 *
 * _.forEach([1, 2], function(value) {
 *   console.log(value);
 * });
 * // => Logs `1` then `2`.
 *
 * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
 *   console.log(key);
 * });
 * // => Logs 'a' then 'b' (iteration order is not guaranteed).
 */


function forEach(collection, iteratee) {
  var func = isArray(collection) ? arrayEach : baseEach;
  return func(collection, castFunction(iteratee));
}

module.exports = forEach;

/***/ }),

/***/ "./node_modules/lodash/fp/_baseConvert.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/fp/_baseConvert.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var mapping = __webpack_require__(/*! ./_mapping */ "./node_modules/lodash/fp/_mapping.js"),
    fallbackHolder = __webpack_require__(/*! ./placeholder */ "./node_modules/lodash/fp/placeholder.js");
/** Built-in value reference. */


var push = Array.prototype.push;
/**
 * Creates a function, with an arity of `n`, that invokes `func` with the
 * arguments it receives.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {number} n The arity of the new function.
 * @returns {Function} Returns the new function.
 */

function baseArity(func, n) {
  return n == 2 ? function (a, b) {
    return func.apply(undefined, arguments);
  } : function (a) {
    return func.apply(undefined, arguments);
  };
}
/**
 * Creates a function that invokes `func`, with up to `n` arguments, ignoring
 * any additional arguments.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @param {number} n The arity cap.
 * @returns {Function} Returns the new function.
 */


function baseAry(func, n) {
  return n == 2 ? function (a, b) {
    return func(a, b);
  } : function (a) {
    return func(a);
  };
}
/**
 * Creates a clone of `array`.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the cloned array.
 */


function cloneArray(array) {
  var length = array ? array.length : 0,
      result = Array(length);

  while (length--) {
    result[length] = array[length];
  }

  return result;
}
/**
 * Creates a function that clones a given object using the assignment `func`.
 *
 * @private
 * @param {Function} func The assignment function.
 * @returns {Function} Returns the new cloner function.
 */


function createCloner(func) {
  return function (object) {
    return func({}, object);
  };
}
/**
 * A specialized version of `_.spread` which flattens the spread array into
 * the arguments of the invoked `func`.
 *
 * @private
 * @param {Function} func The function to spread arguments over.
 * @param {number} start The start position of the spread.
 * @returns {Function} Returns the new function.
 */


function flatSpread(func, start) {
  return function () {
    var length = arguments.length,
        lastIndex = length - 1,
        args = Array(length);

    while (length--) {
      args[length] = arguments[length];
    }

    var array = args[start],
        otherArgs = args.slice(0, start);

    if (array) {
      push.apply(otherArgs, array);
    }

    if (start != lastIndex) {
      push.apply(otherArgs, args.slice(start + 1));
    }

    return func.apply(this, otherArgs);
  };
}
/**
 * Creates a function that wraps `func` and uses `cloner` to clone the first
 * argument it receives.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} cloner The function to clone arguments.
 * @returns {Function} Returns the new immutable function.
 */


function wrapImmutable(func, cloner) {
  return function () {
    var length = arguments.length;

    if (!length) {
      return;
    }

    var args = Array(length);

    while (length--) {
      args[length] = arguments[length];
    }

    var result = args[0] = cloner.apply(undefined, args);
    func.apply(undefined, args);
    return result;
  };
}
/**
 * The base implementation of `convert` which accepts a `util` object of methods
 * required to perform conversions.
 *
 * @param {Object} util The util object.
 * @param {string} name The name of the function to convert.
 * @param {Function} func The function to convert.
 * @param {Object} [options] The options object.
 * @param {boolean} [options.cap=true] Specify capping iteratee arguments.
 * @param {boolean} [options.curry=true] Specify currying.
 * @param {boolean} [options.fixed=true] Specify fixed arity.
 * @param {boolean} [options.immutable=true] Specify immutable operations.
 * @param {boolean} [options.rearg=true] Specify rearranging arguments.
 * @returns {Function|Object} Returns the converted function or object.
 */


function baseConvert(util, name, func, options) {
  var isLib = typeof name == 'function',
      isObj = name === Object(name);

  if (isObj) {
    options = func;
    func = name;
    name = undefined;
  }

  if (func == null) {
    throw new TypeError();
  }

  options || (options = {});
  var config = {
    'cap': 'cap' in options ? options.cap : true,
    'curry': 'curry' in options ? options.curry : true,
    'fixed': 'fixed' in options ? options.fixed : true,
    'immutable': 'immutable' in options ? options.immutable : true,
    'rearg': 'rearg' in options ? options.rearg : true
  };
  var defaultHolder = isLib ? func : fallbackHolder,
      forceCurry = 'curry' in options && options.curry,
      forceFixed = 'fixed' in options && options.fixed,
      forceRearg = 'rearg' in options && options.rearg,
      pristine = isLib ? func.runInContext() : undefined;
  var helpers = isLib ? func : {
    'ary': util.ary,
    'assign': util.assign,
    'clone': util.clone,
    'curry': util.curry,
    'forEach': util.forEach,
    'isArray': util.isArray,
    'isError': util.isError,
    'isFunction': util.isFunction,
    'isWeakMap': util.isWeakMap,
    'iteratee': util.iteratee,
    'keys': util.keys,
    'rearg': util.rearg,
    'toInteger': util.toInteger,
    'toPath': util.toPath
  };
  var ary = helpers.ary,
      assign = helpers.assign,
      clone = helpers.clone,
      curry = helpers.curry,
      each = helpers.forEach,
      isArray = helpers.isArray,
      isError = helpers.isError,
      isFunction = helpers.isFunction,
      isWeakMap = helpers.isWeakMap,
      keys = helpers.keys,
      rearg = helpers.rearg,
      toInteger = helpers.toInteger,
      toPath = helpers.toPath;
  var aryMethodKeys = keys(mapping.aryMethod);
  var wrappers = {
    'castArray': function (castArray) {
      return function () {
        var value = arguments[0];
        return isArray(value) ? castArray(cloneArray(value)) : castArray.apply(undefined, arguments);
      };
    },
    'iteratee': function (iteratee) {
      return function () {
        var func = arguments[0],
            arity = arguments[1],
            result = iteratee(func, arity),
            length = result.length;

        if (config.cap && typeof arity == 'number') {
          arity = arity > 2 ? arity - 2 : 1;
          return length && length <= arity ? result : baseAry(result, arity);
        }

        return result;
      };
    },
    'mixin': function (mixin) {
      return function (source) {
        var func = this;

        if (!isFunction(func)) {
          return mixin(func, Object(source));
        }

        var pairs = [];
        each(keys(source), function (key) {
          if (isFunction(source[key])) {
            pairs.push([key, func.prototype[key]]);
          }
        });
        mixin(func, Object(source));
        each(pairs, function (pair) {
          var value = pair[1];

          if (isFunction(value)) {
            func.prototype[pair[0]] = value;
          } else {
            delete func.prototype[pair[0]];
          }
        });
        return func;
      };
    },
    'nthArg': function (nthArg) {
      return function (n) {
        var arity = n < 0 ? 1 : toInteger(n) + 1;
        return curry(nthArg(n), arity);
      };
    },
    'rearg': function (rearg) {
      return function (func, indexes) {
        var arity = indexes ? indexes.length : 0;
        return curry(rearg(func, indexes), arity);
      };
    },
    'runInContext': function (runInContext) {
      return function (context) {
        return baseConvert(util, runInContext(context), options);
      };
    }
  };
  /*--------------------------------------------------------------------------*/

  /**
   * Casts `func` to a function with an arity capped iteratee if needed.
   *
   * @private
   * @param {string} name The name of the function to inspect.
   * @param {Function} func The function to inspect.
   * @returns {Function} Returns the cast function.
   */

  function castCap(name, func) {
    if (config.cap) {
      var indexes = mapping.iterateeRearg[name];

      if (indexes) {
        return iterateeRearg(func, indexes);
      }

      var n = !isLib && mapping.iterateeAry[name];

      if (n) {
        return iterateeAry(func, n);
      }
    }

    return func;
  }
  /**
   * Casts `func` to a curried function if needed.
   *
   * @private
   * @param {string} name The name of the function to inspect.
   * @param {Function} func The function to inspect.
   * @param {number} n The arity of `func`.
   * @returns {Function} Returns the cast function.
   */


  function castCurry(name, func, n) {
    return forceCurry || config.curry && n > 1 ? curry(func, n) : func;
  }
  /**
   * Casts `func` to a fixed arity function if needed.
   *
   * @private
   * @param {string} name The name of the function to inspect.
   * @param {Function} func The function to inspect.
   * @param {number} n The arity cap.
   * @returns {Function} Returns the cast function.
   */


  function castFixed(name, func, n) {
    if (config.fixed && (forceFixed || !mapping.skipFixed[name])) {
      var data = mapping.methodSpread[name],
          start = data && data.start;
      return start === undefined ? ary(func, n) : flatSpread(func, start);
    }

    return func;
  }
  /**
   * Casts `func` to an rearged function if needed.
   *
   * @private
   * @param {string} name The name of the function to inspect.
   * @param {Function} func The function to inspect.
   * @param {number} n The arity of `func`.
   * @returns {Function} Returns the cast function.
   */


  function castRearg(name, func, n) {
    return config.rearg && n > 1 && (forceRearg || !mapping.skipRearg[name]) ? rearg(func, mapping.methodRearg[name] || mapping.aryRearg[n]) : func;
  }
  /**
   * Creates a clone of `object` by `path`.
   *
   * @private
   * @param {Object} object The object to clone.
   * @param {Array|string} path The path to clone by.
   * @returns {Object} Returns the cloned object.
   */


  function cloneByPath(object, path) {
    path = toPath(path);
    var index = -1,
        length = path.length,
        lastIndex = length - 1,
        result = clone(Object(object)),
        nested = result;

    while (nested != null && ++index < length) {
      var key = path[index],
          value = nested[key];

      if (value != null && !(isFunction(value) || isError(value) || isWeakMap(value))) {
        nested[key] = clone(index == lastIndex ? value : Object(value));
      }

      nested = nested[key];
    }

    return result;
  }
  /**
   * Converts `lodash` to an immutable auto-curried iteratee-first data-last
   * version with conversion `options` applied.
   *
   * @param {Object} [options] The options object. See `baseConvert` for more details.
   * @returns {Function} Returns the converted `lodash`.
   */


  function convertLib(options) {
    return _.runInContext.convert(options)(undefined);
  }
  /**
   * Create a converter function for `func` of `name`.
   *
   * @param {string} name The name of the function to convert.
   * @param {Function} func The function to convert.
   * @returns {Function} Returns the new converter function.
   */


  function createConverter(name, func) {
    var realName = mapping.aliasToReal[name] || name,
        methodName = mapping.remap[realName] || realName,
        oldOptions = options;
    return function (options) {
      var newUtil = isLib ? pristine : helpers,
          newFunc = isLib ? pristine[methodName] : func,
          newOptions = assign(assign({}, oldOptions), options);
      return baseConvert(newUtil, realName, newFunc, newOptions);
    };
  }
  /**
   * Creates a function that wraps `func` to invoke its iteratee, with up to `n`
   * arguments, ignoring any additional arguments.
   *
   * @private
   * @param {Function} func The function to cap iteratee arguments for.
   * @param {number} n The arity cap.
   * @returns {Function} Returns the new function.
   */


  function iterateeAry(func, n) {
    return overArg(func, function (func) {
      return typeof func == 'function' ? baseAry(func, n) : func;
    });
  }
  /**
   * Creates a function that wraps `func` to invoke its iteratee with arguments
   * arranged according to the specified `indexes` where the argument value at
   * the first index is provided as the first argument, the argument value at
   * the second index is provided as the second argument, and so on.
   *
   * @private
   * @param {Function} func The function to rearrange iteratee arguments for.
   * @param {number[]} indexes The arranged argument indexes.
   * @returns {Function} Returns the new function.
   */


  function iterateeRearg(func, indexes) {
    return overArg(func, function (func) {
      var n = indexes.length;
      return baseArity(rearg(baseAry(func, n), indexes), n);
    });
  }
  /**
   * Creates a function that invokes `func` with its first argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */


  function overArg(func, transform) {
    return function () {
      var length = arguments.length;

      if (!length) {
        return func();
      }

      var args = Array(length);

      while (length--) {
        args[length] = arguments[length];
      }

      var index = config.rearg ? 0 : length - 1;
      args[index] = transform(args[index]);
      return func.apply(undefined, args);
    };
  }
  /**
   * Creates a function that wraps `func` and applys the conversions
   * rules by `name`.
   *
   * @private
   * @param {string} name The name of the function to wrap.
   * @param {Function} func The function to wrap.
   * @returns {Function} Returns the converted function.
   */


  function wrap(name, func, placeholder) {
    var result,
        realName = mapping.aliasToReal[name] || name,
        wrapped = func,
        wrapper = wrappers[realName];

    if (wrapper) {
      wrapped = wrapper(func);
    } else if (config.immutable) {
      if (mapping.mutate.array[realName]) {
        wrapped = wrapImmutable(func, cloneArray);
      } else if (mapping.mutate.object[realName]) {
        wrapped = wrapImmutable(func, createCloner(func));
      } else if (mapping.mutate.set[realName]) {
        wrapped = wrapImmutable(func, cloneByPath);
      }
    }

    each(aryMethodKeys, function (aryKey) {
      each(mapping.aryMethod[aryKey], function (otherName) {
        if (realName == otherName) {
          var data = mapping.methodSpread[realName],
              afterRearg = data && data.afterRearg;
          result = afterRearg ? castFixed(realName, castRearg(realName, wrapped, aryKey), aryKey) : castRearg(realName, castFixed(realName, wrapped, aryKey), aryKey);
          result = castCap(realName, result);
          result = castCurry(realName, result, aryKey);
          return false;
        }
      });
      return !result;
    });
    result || (result = wrapped);

    if (result == func) {
      result = forceCurry ? curry(result, 1) : function () {
        return func.apply(this, arguments);
      };
    }

    result.convert = createConverter(realName, func);
    result.placeholder = func.placeholder = placeholder;
    return result;
  }
  /*--------------------------------------------------------------------------*/


  if (!isObj) {
    return wrap(name, func, defaultHolder);
  }

  var _ = func; // Convert methods by ary cap.

  var pairs = [];
  each(aryMethodKeys, function (aryKey) {
    each(mapping.aryMethod[aryKey], function (key) {
      var func = _[mapping.remap[key] || key];

      if (func) {
        pairs.push([key, wrap(key, func, _)]);
      }
    });
  }); // Convert remaining methods.

  each(keys(_), function (key) {
    var func = _[key];

    if (typeof func == 'function') {
      var length = pairs.length;

      while (length--) {
        if (pairs[length][0] == key) {
          return;
        }
      }

      func.convert = createConverter(key, func);
      pairs.push([key, func]);
    }
  }); // Assign to `_` leaving `_.prototype` unchanged to allow chaining.

  each(pairs, function (pair) {
    _[pair[0]] = pair[1];
  });
  _.convert = convertLib;
  _.placeholder = _; // Assign aliases.

  each(keys(_), function (key) {
    each(mapping.realToAlias[key] || [], function (alias) {
      _[alias] = _[key];
    });
  });
  return _;
}

module.exports = baseConvert;

/***/ }),

/***/ "./node_modules/lodash/fp/_mapping.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/fp/_mapping.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used to map aliases to their real names. */
exports.aliasToReal = {
  // Lodash aliases.
  'each': 'forEach',
  'eachRight': 'forEachRight',
  'entries': 'toPairs',
  'entriesIn': 'toPairsIn',
  'extend': 'assignIn',
  'extendAll': 'assignInAll',
  'extendAllWith': 'assignInAllWith',
  'extendWith': 'assignInWith',
  'first': 'head',
  // Methods that are curried variants of others.
  'conforms': 'conformsTo',
  'matches': 'isMatch',
  'property': 'get',
  // Ramda aliases.
  '__': 'placeholder',
  'F': 'stubFalse',
  'T': 'stubTrue',
  'all': 'every',
  'allPass': 'overEvery',
  'always': 'constant',
  'any': 'some',
  'anyPass': 'overSome',
  'apply': 'spread',
  'assoc': 'set',
  'assocPath': 'set',
  'complement': 'negate',
  'compose': 'flowRight',
  'contains': 'includes',
  'dissoc': 'unset',
  'dissocPath': 'unset',
  'dropLast': 'dropRight',
  'dropLastWhile': 'dropRightWhile',
  'equals': 'isEqual',
  'identical': 'eq',
  'indexBy': 'keyBy',
  'init': 'initial',
  'invertObj': 'invert',
  'juxt': 'over',
  'omitAll': 'omit',
  'nAry': 'ary',
  'path': 'get',
  'pathEq': 'matchesProperty',
  'pathOr': 'getOr',
  'paths': 'at',
  'pickAll': 'pick',
  'pipe': 'flow',
  'pluck': 'map',
  'prop': 'get',
  'propEq': 'matchesProperty',
  'propOr': 'getOr',
  'props': 'at',
  'symmetricDifference': 'xor',
  'symmetricDifferenceBy': 'xorBy',
  'symmetricDifferenceWith': 'xorWith',
  'takeLast': 'takeRight',
  'takeLastWhile': 'takeRightWhile',
  'unapply': 'rest',
  'unnest': 'flatten',
  'useWith': 'overArgs',
  'where': 'conformsTo',
  'whereEq': 'isMatch',
  'zipObj': 'zipObject'
};
/** Used to map ary to method names. */

exports.aryMethod = {
  '1': ['assignAll', 'assignInAll', 'attempt', 'castArray', 'ceil', 'create', 'curry', 'curryRight', 'defaultsAll', 'defaultsDeepAll', 'floor', 'flow', 'flowRight', 'fromPairs', 'invert', 'iteratee', 'memoize', 'method', 'mergeAll', 'methodOf', 'mixin', 'nthArg', 'over', 'overEvery', 'overSome', 'rest', 'reverse', 'round', 'runInContext', 'spread', 'template', 'trim', 'trimEnd', 'trimStart', 'uniqueId', 'words', 'zipAll'],
  '2': ['add', 'after', 'ary', 'assign', 'assignAllWith', 'assignIn', 'assignInAllWith', 'at', 'before', 'bind', 'bindAll', 'bindKey', 'chunk', 'cloneDeepWith', 'cloneWith', 'concat', 'conformsTo', 'countBy', 'curryN', 'curryRightN', 'debounce', 'defaults', 'defaultsDeep', 'defaultTo', 'delay', 'difference', 'divide', 'drop', 'dropRight', 'dropRightWhile', 'dropWhile', 'endsWith', 'eq', 'every', 'filter', 'find', 'findIndex', 'findKey', 'findLast', 'findLastIndex', 'findLastKey', 'flatMap', 'flatMapDeep', 'flattenDepth', 'forEach', 'forEachRight', 'forIn', 'forInRight', 'forOwn', 'forOwnRight', 'get', 'groupBy', 'gt', 'gte', 'has', 'hasIn', 'includes', 'indexOf', 'intersection', 'invertBy', 'invoke', 'invokeMap', 'isEqual', 'isMatch', 'join', 'keyBy', 'lastIndexOf', 'lt', 'lte', 'map', 'mapKeys', 'mapValues', 'matchesProperty', 'maxBy', 'meanBy', 'merge', 'mergeAllWith', 'minBy', 'multiply', 'nth', 'omit', 'omitBy', 'overArgs', 'pad', 'padEnd', 'padStart', 'parseInt', 'partial', 'partialRight', 'partition', 'pick', 'pickBy', 'propertyOf', 'pull', 'pullAll', 'pullAt', 'random', 'range', 'rangeRight', 'rearg', 'reject', 'remove', 'repeat', 'restFrom', 'result', 'sampleSize', 'some', 'sortBy', 'sortedIndex', 'sortedIndexOf', 'sortedLastIndex', 'sortedLastIndexOf', 'sortedUniqBy', 'split', 'spreadFrom', 'startsWith', 'subtract', 'sumBy', 'take', 'takeRight', 'takeRightWhile', 'takeWhile', 'tap', 'throttle', 'thru', 'times', 'trimChars', 'trimCharsEnd', 'trimCharsStart', 'truncate', 'union', 'uniqBy', 'uniqWith', 'unset', 'unzipWith', 'without', 'wrap', 'xor', 'zip', 'zipObject', 'zipObjectDeep'],
  '3': ['assignInWith', 'assignWith', 'clamp', 'differenceBy', 'differenceWith', 'findFrom', 'findIndexFrom', 'findLastFrom', 'findLastIndexFrom', 'getOr', 'includesFrom', 'indexOfFrom', 'inRange', 'intersectionBy', 'intersectionWith', 'invokeArgs', 'invokeArgsMap', 'isEqualWith', 'isMatchWith', 'flatMapDepth', 'lastIndexOfFrom', 'mergeWith', 'orderBy', 'padChars', 'padCharsEnd', 'padCharsStart', 'pullAllBy', 'pullAllWith', 'rangeStep', 'rangeStepRight', 'reduce', 'reduceRight', 'replace', 'set', 'slice', 'sortedIndexBy', 'sortedLastIndexBy', 'transform', 'unionBy', 'unionWith', 'update', 'xorBy', 'xorWith', 'zipWith'],
  '4': ['fill', 'setWith', 'updateWith']
};
/** Used to map ary to rearg configs. */

exports.aryRearg = {
  '2': [1, 0],
  '3': [2, 0, 1],
  '4': [3, 2, 0, 1]
};
/** Used to map method names to their iteratee ary. */

exports.iterateeAry = {
  'dropRightWhile': 1,
  'dropWhile': 1,
  'every': 1,
  'filter': 1,
  'find': 1,
  'findFrom': 1,
  'findIndex': 1,
  'findIndexFrom': 1,
  'findKey': 1,
  'findLast': 1,
  'findLastFrom': 1,
  'findLastIndex': 1,
  'findLastIndexFrom': 1,
  'findLastKey': 1,
  'flatMap': 1,
  'flatMapDeep': 1,
  'flatMapDepth': 1,
  'forEach': 1,
  'forEachRight': 1,
  'forIn': 1,
  'forInRight': 1,
  'forOwn': 1,
  'forOwnRight': 1,
  'map': 1,
  'mapKeys': 1,
  'mapValues': 1,
  'partition': 1,
  'reduce': 2,
  'reduceRight': 2,
  'reject': 1,
  'remove': 1,
  'some': 1,
  'takeRightWhile': 1,
  'takeWhile': 1,
  'times': 1,
  'transform': 2
};
/** Used to map method names to iteratee rearg configs. */

exports.iterateeRearg = {
  'mapKeys': [1],
  'reduceRight': [1, 0]
};
/** Used to map method names to rearg configs. */

exports.methodRearg = {
  'assignInAllWith': [1, 0],
  'assignInWith': [1, 2, 0],
  'assignAllWith': [1, 0],
  'assignWith': [1, 2, 0],
  'differenceBy': [1, 2, 0],
  'differenceWith': [1, 2, 0],
  'getOr': [2, 1, 0],
  'intersectionBy': [1, 2, 0],
  'intersectionWith': [1, 2, 0],
  'isEqualWith': [1, 2, 0],
  'isMatchWith': [2, 1, 0],
  'mergeAllWith': [1, 0],
  'mergeWith': [1, 2, 0],
  'padChars': [2, 1, 0],
  'padCharsEnd': [2, 1, 0],
  'padCharsStart': [2, 1, 0],
  'pullAllBy': [2, 1, 0],
  'pullAllWith': [2, 1, 0],
  'rangeStep': [1, 2, 0],
  'rangeStepRight': [1, 2, 0],
  'setWith': [3, 1, 2, 0],
  'sortedIndexBy': [2, 1, 0],
  'sortedLastIndexBy': [2, 1, 0],
  'unionBy': [1, 2, 0],
  'unionWith': [1, 2, 0],
  'updateWith': [3, 1, 2, 0],
  'xorBy': [1, 2, 0],
  'xorWith': [1, 2, 0],
  'zipWith': [1, 2, 0]
};
/** Used to map method names to spread configs. */

exports.methodSpread = {
  'assignAll': {
    'start': 0
  },
  'assignAllWith': {
    'start': 0
  },
  'assignInAll': {
    'start': 0
  },
  'assignInAllWith': {
    'start': 0
  },
  'defaultsAll': {
    'start': 0
  },
  'defaultsDeepAll': {
    'start': 0
  },
  'invokeArgs': {
    'start': 2
  },
  'invokeArgsMap': {
    'start': 2
  },
  'mergeAll': {
    'start': 0
  },
  'mergeAllWith': {
    'start': 0
  },
  'partial': {
    'start': 1
  },
  'partialRight': {
    'start': 1
  },
  'without': {
    'start': 1
  },
  'zipAll': {
    'start': 0
  }
};
/** Used to identify methods which mutate arrays or objects. */

exports.mutate = {
  'array': {
    'fill': true,
    'pull': true,
    'pullAll': true,
    'pullAllBy': true,
    'pullAllWith': true,
    'pullAt': true,
    'remove': true,
    'reverse': true
  },
  'object': {
    'assign': true,
    'assignAll': true,
    'assignAllWith': true,
    'assignIn': true,
    'assignInAll': true,
    'assignInAllWith': true,
    'assignInWith': true,
    'assignWith': true,
    'defaults': true,
    'defaultsAll': true,
    'defaultsDeep': true,
    'defaultsDeepAll': true,
    'merge': true,
    'mergeAll': true,
    'mergeAllWith': true,
    'mergeWith': true
  },
  'set': {
    'set': true,
    'setWith': true,
    'unset': true,
    'update': true,
    'updateWith': true
  }
};
/** Used to map real names to their aliases. */

exports.realToAlias = function () {
  var hasOwnProperty = Object.prototype.hasOwnProperty,
      object = exports.aliasToReal,
      result = {};

  for (var key in object) {
    var value = object[key];

    if (hasOwnProperty.call(result, value)) {
      result[value].push(key);
    } else {
      result[value] = [key];
    }
  }

  return result;
}();
/** Used to map method names to other names. */


exports.remap = {
  'assignAll': 'assign',
  'assignAllWith': 'assignWith',
  'assignInAll': 'assignIn',
  'assignInAllWith': 'assignInWith',
  'curryN': 'curry',
  'curryRightN': 'curryRight',
  'defaultsAll': 'defaults',
  'defaultsDeepAll': 'defaultsDeep',
  'findFrom': 'find',
  'findIndexFrom': 'findIndex',
  'findLastFrom': 'findLast',
  'findLastIndexFrom': 'findLastIndex',
  'getOr': 'get',
  'includesFrom': 'includes',
  'indexOfFrom': 'indexOf',
  'invokeArgs': 'invoke',
  'invokeArgsMap': 'invokeMap',
  'lastIndexOfFrom': 'lastIndexOf',
  'mergeAll': 'merge',
  'mergeAllWith': 'mergeWith',
  'padChars': 'pad',
  'padCharsEnd': 'padEnd',
  'padCharsStart': 'padStart',
  'propertyOf': 'get',
  'rangeStep': 'range',
  'rangeStepRight': 'rangeRight',
  'restFrom': 'rest',
  'spreadFrom': 'spread',
  'trimChars': 'trim',
  'trimCharsEnd': 'trimEnd',
  'trimCharsStart': 'trimStart',
  'zipAll': 'zip'
};
/** Used to track methods that skip fixing their arity. */

exports.skipFixed = {
  'castArray': true,
  'flow': true,
  'flowRight': true,
  'iteratee': true,
  'mixin': true,
  'rearg': true,
  'runInContext': true
};
/** Used to track methods that skip rearranging arguments. */

exports.skipRearg = {
  'add': true,
  'assign': true,
  'assignIn': true,
  'bind': true,
  'bindKey': true,
  'concat': true,
  'difference': true,
  'divide': true,
  'eq': true,
  'gt': true,
  'gte': true,
  'isEqual': true,
  'lt': true,
  'lte': true,
  'matchesProperty': true,
  'merge': true,
  'multiply': true,
  'overArgs': true,
  'partial': true,
  'partialRight': true,
  'propertyOf': true,
  'random': true,
  'range': true,
  'rangeRight': true,
  'subtract': true,
  'zip': true,
  'zipObject': true,
  'zipObjectDeep': true
};

/***/ }),

/***/ "./node_modules/lodash/fp/_util.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/fp/_util.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  'ary': __webpack_require__(/*! ../ary */ "./node_modules/lodash/ary.js"),
  'assign': __webpack_require__(/*! ../_baseAssign */ "./node_modules/lodash/_baseAssign.js"),
  'clone': __webpack_require__(/*! ../clone */ "./node_modules/lodash/clone.js"),
  'curry': __webpack_require__(/*! ../curry */ "./node_modules/lodash/curry.js"),
  'forEach': __webpack_require__(/*! ../_arrayEach */ "./node_modules/lodash/_arrayEach.js"),
  'isArray': __webpack_require__(/*! ../isArray */ "./node_modules/lodash/isArray.js"),
  'isError': __webpack_require__(/*! ../isError */ "./node_modules/lodash/isError.js"),
  'isFunction': __webpack_require__(/*! ../isFunction */ "./node_modules/lodash/isFunction.js"),
  'isWeakMap': __webpack_require__(/*! ../isWeakMap */ "./node_modules/lodash/isWeakMap.js"),
  'iteratee': __webpack_require__(/*! ../iteratee */ "./node_modules/lodash/iteratee.js"),
  'keys': __webpack_require__(/*! ../_baseKeys */ "./node_modules/lodash/_baseKeys.js"),
  'rearg': __webpack_require__(/*! ../rearg */ "./node_modules/lodash/rearg.js"),
  'toInteger': __webpack_require__(/*! ../toInteger */ "./node_modules/lodash/toInteger.js"),
  'toPath': __webpack_require__(/*! ../toPath */ "./node_modules/lodash/toPath.js")
};

/***/ }),

/***/ "./node_modules/lodash/fp/assign.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/fp/assign.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var convert = __webpack_require__(/*! ./convert */ "./node_modules/lodash/fp/convert.js"),
    func = convert('assign', __webpack_require__(/*! ../assign */ "./node_modules/lodash/assign.js"));

func.placeholder = __webpack_require__(/*! ./placeholder */ "./node_modules/lodash/fp/placeholder.js");
module.exports = func;

/***/ }),

/***/ "./node_modules/lodash/fp/convert.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/fp/convert.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseConvert = __webpack_require__(/*! ./_baseConvert */ "./node_modules/lodash/fp/_baseConvert.js"),
    util = __webpack_require__(/*! ./_util */ "./node_modules/lodash/fp/_util.js");
/**
 * Converts `func` of `name` to an immutable auto-curried iteratee-first data-last
 * version with conversion `options` applied. If `name` is an object its methods
 * will be converted.
 *
 * @param {string} name The name of the function to wrap.
 * @param {Function} [func] The function to wrap.
 * @param {Object} [options] The options object. See `baseConvert` for more details.
 * @returns {Function|Object} Returns the converted function or object.
 */


function convert(name, func, options) {
  return baseConvert(util, name, func, options);
}

module.exports = convert;

/***/ }),

/***/ "./node_modules/lodash/fp/merge.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/fp/merge.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var convert = __webpack_require__(/*! ./convert */ "./node_modules/lodash/fp/convert.js"),
    func = convert('merge', __webpack_require__(/*! ../merge */ "./node_modules/lodash/merge.js"));

func.placeholder = __webpack_require__(/*! ./placeholder */ "./node_modules/lodash/fp/placeholder.js");
module.exports = func;

/***/ }),

/***/ "./node_modules/lodash/fp/placeholder.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/fp/placeholder.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * The default argument placeholder value for methods.
 *
 * @type {Object}
 */
module.exports = {};

/***/ }),

/***/ "./node_modules/lodash/fp/setWith.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/fp/setWith.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var convert = __webpack_require__(/*! ./convert */ "./node_modules/lodash/fp/convert.js"),
    func = convert('setWith', __webpack_require__(/*! ../setWith */ "./node_modules/lodash/setWith.js"));

func.placeholder = __webpack_require__(/*! ./placeholder */ "./node_modules/lodash/fp/placeholder.js");
module.exports = func;

/***/ }),

/***/ "./node_modules/lodash/fp/unset.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/fp/unset.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var convert = __webpack_require__(/*! ./convert */ "./node_modules/lodash/fp/convert.js"),
    func = convert('unset', __webpack_require__(/*! ../unset */ "./node_modules/lodash/unset.js"));

func.placeholder = __webpack_require__(/*! ./placeholder */ "./node_modules/lodash/fp/placeholder.js");
module.exports = func;

/***/ }),

/***/ "./node_modules/lodash/get.js":
/*!************************************!*\
  !*** ./node_modules/lodash/get.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGet = __webpack_require__(/*! ./_baseGet */ "./node_modules/lodash/_baseGet.js");
/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */


function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;

/***/ }),

/***/ "./node_modules/lodash/groupBy.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/groupBy.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ "./node_modules/lodash/_baseAssignValue.js"),
    createAggregator = __webpack_require__(/*! ./_createAggregator */ "./node_modules/lodash/_createAggregator.js");
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Creates an object composed of keys generated from the results of running
 * each element of `collection` thru `iteratee`. The order of grouped values
 * is determined by the order they occur in `collection`. The corresponding
 * value of each key is an array of elements responsible for generating the
 * key. The iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
 * @returns {Object} Returns the composed aggregate object.
 * @example
 *
 * _.groupBy([6.1, 4.2, 6.3], Math.floor);
 * // => { '4': [4.2], '6': [6.1, 6.3] }
 *
 * // The `_.property` iteratee shorthand.
 * _.groupBy(['one', 'two', 'three'], 'length');
 * // => { '3': ['one', 'two'], '5': ['three'] }
 */

var groupBy = createAggregator(function (result, value, key) {
  if (hasOwnProperty.call(result, key)) {
    result[key].push(value);
  } else {
    baseAssignValue(result, key, [value]);
  }
});
module.exports = groupBy;

/***/ }),

/***/ "./node_modules/lodash/has.js":
/*!************************************!*\
  !*** ./node_modules/lodash/has.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseHas = __webpack_require__(/*! ./_baseHas */ "./node_modules/lodash/_baseHas.js"),
    hasPath = __webpack_require__(/*! ./_hasPath */ "./node_modules/lodash/_hasPath.js");
/**
 * Checks if `path` is a direct property of `object`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = { 'a': { 'b': 2 } };
 * var other = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.has(object, 'a');
 * // => true
 *
 * _.has(object, 'a.b');
 * // => true
 *
 * _.has(object, ['a', 'b']);
 * // => true
 *
 * _.has(other, 'a');
 * // => false
 */


function has(object, path) {
  return object != null && hasPath(object, path, baseHas);
}

module.exports = has;

/***/ }),

/***/ "./node_modules/lodash/hasIn.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/hasIn.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseHasIn = __webpack_require__(/*! ./_baseHasIn */ "./node_modules/lodash/_baseHasIn.js"),
    hasPath = __webpack_require__(/*! ./_hasPath */ "./node_modules/lodash/_hasPath.js");
/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */


function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;

/***/ }),

/***/ "./node_modules/lodash/identity.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/identity.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;

/***/ }),

/***/ "./node_modules/lodash/invoke.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/invoke.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseInvoke = __webpack_require__(/*! ./_baseInvoke */ "./node_modules/lodash/_baseInvoke.js"),
    baseRest = __webpack_require__(/*! ./_baseRest */ "./node_modules/lodash/_baseRest.js");
/**
 * Invokes the method at `path` of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the method to invoke.
 * @param {...*} [args] The arguments to invoke the method with.
 * @returns {*} Returns the result of the invoked method.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
 *
 * _.invoke(object, 'a[0].b.c.slice', 1, 3);
 * // => [2, 3]
 */


var invoke = baseRest(baseInvoke);
module.exports = invoke;

/***/ }),

/***/ "./node_modules/lodash/isArguments.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/isArguments.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseIsArguments = __webpack_require__(/*! ./_baseIsArguments */ "./node_modules/lodash/_baseIsArguments.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/** Built-in value references. */

var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */

var isArguments = baseIsArguments(function () {
  return arguments;
}()) ? baseIsArguments : function (value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
};
module.exports = isArguments;

/***/ }),

/***/ "./node_modules/lodash/isArray.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/isArray.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;
module.exports = isArray;

/***/ }),

/***/ "./node_modules/lodash/isArrayLike.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/isArrayLike.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isFunction = __webpack_require__(/*! ./isFunction */ "./node_modules/lodash/isFunction.js"),
    isLength = __webpack_require__(/*! ./isLength */ "./node_modules/lodash/isLength.js");
/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */


function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;

/***/ }),

/***/ "./node_modules/lodash/isArrayLikeObject.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/isArrayLikeObject.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");
/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */


function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

module.exports = isArrayLikeObject;

/***/ }),

/***/ "./node_modules/lodash/isBoolean.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/isBoolean.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");
/** `Object#toString` result references. */


var boolTag = '[object Boolean]';
/**
 * Checks if `value` is classified as a boolean primitive or object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
 * @example
 *
 * _.isBoolean(false);
 * // => true
 *
 * _.isBoolean(null);
 * // => false
 */

function isBoolean(value) {
  return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
}

module.exports = isBoolean;

/***/ }),

/***/ "./node_modules/lodash/isBuffer.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isBuffer.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js"),
    stubFalse = __webpack_require__(/*! ./stubFalse */ "./node_modules/lodash/stubFalse.js");
/** Detect free variable `exports`. */


var freeExports =  true && exports && !exports.nodeType && exports;
/** Detect free variable `module`. */

var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */

var moduleExports = freeModule && freeModule.exports === freeExports;
/** Built-in value references. */

var Buffer = moduleExports ? root.Buffer : undefined;
/* Built-in method references for those with the same name as other `lodash` methods. */

var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */

var isBuffer = nativeIsBuffer || stubFalse;
module.exports = isBuffer;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/lodash/isEmpty.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/isEmpty.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseKeys = __webpack_require__(/*! ./_baseKeys */ "./node_modules/lodash/_baseKeys.js"),
    getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    isArguments = __webpack_require__(/*! ./isArguments */ "./node_modules/lodash/isArguments.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js"),
    isBuffer = __webpack_require__(/*! ./isBuffer */ "./node_modules/lodash/isBuffer.js"),
    isPrototype = __webpack_require__(/*! ./_isPrototype */ "./node_modules/lodash/_isPrototype.js"),
    isTypedArray = __webpack_require__(/*! ./isTypedArray */ "./node_modules/lodash/isTypedArray.js");
/** `Object#toString` result references. */


var mapTag = '[object Map]',
    setTag = '[object Set]';
/** Used for built-in method references. */

var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Checks if `value` is an empty object, collection, map, or set.
 *
 * Objects are considered empty if they have no own enumerable string keyed
 * properties.
 *
 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
 * jQuery-like collections are considered empty if they have a `length` of `0`.
 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */

function isEmpty(value) {
  if (value == null) {
    return true;
  }

  if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
    return !value.length;
  }

  var tag = getTag(value);

  if (tag == mapTag || tag == setTag) {
    return !value.size;
  }

  if (isPrototype(value)) {
    return !baseKeys(value).length;
  }

  for (var key in value) {
    if (hasOwnProperty.call(value, key)) {
      return false;
    }
  }

  return true;
}

module.exports = isEmpty;

/***/ }),

/***/ "./node_modules/lodash/isEqual.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/isEqual.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseIsEqual = __webpack_require__(/*! ./_baseIsEqual */ "./node_modules/lodash/_baseIsEqual.js");
/**
 * Performs a deep comparison between two values to determine if they are
 * equivalent.
 *
 * **Note:** This method supports comparing arrays, array buffers, booleans,
 * date objects, error objects, maps, numbers, `Object` objects, regexes,
 * sets, strings, symbols, and typed arrays. `Object` objects are compared
 * by their own, not inherited, enumerable properties. Functions and DOM
 * nodes are compared by strict equality, i.e. `===`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.isEqual(object, other);
 * // => true
 *
 * object === other;
 * // => false
 */


function isEqual(value, other) {
  return baseIsEqual(value, other);
}

module.exports = isEqual;

/***/ }),

/***/ "./node_modules/lodash/isError.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/isError.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js"),
    isPlainObject = __webpack_require__(/*! ./isPlainObject */ "./node_modules/lodash/isPlainObject.js");
/** `Object#toString` result references. */


var domExcTag = '[object DOMException]',
    errorTag = '[object Error]';
/**
 * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
 * `SyntaxError`, `TypeError`, or `URIError` object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
 * @example
 *
 * _.isError(new Error);
 * // => true
 *
 * _.isError(Error);
 * // => false
 */

function isError(value) {
  if (!isObjectLike(value)) {
    return false;
  }

  var tag = baseGetTag(value);
  return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value);
}

module.exports = isError;

/***/ }),

/***/ "./node_modules/lodash/isFunction.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/isFunction.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js");
/** `Object#toString` result references. */


var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */

function isFunction(value) {
  if (!isObject(value)) {
    return false;
  } // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.


  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;

/***/ }),

/***/ "./node_modules/lodash/isLength.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isLength.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;
/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */

function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;

/***/ }),

/***/ "./node_modules/lodash/isMap.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/isMap.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseIsMap = __webpack_require__(/*! ./_baseIsMap */ "./node_modules/lodash/_baseIsMap.js"),
    baseUnary = __webpack_require__(/*! ./_baseUnary */ "./node_modules/lodash/_baseUnary.js"),
    nodeUtil = __webpack_require__(/*! ./_nodeUtil */ "./node_modules/lodash/_nodeUtil.js");
/* Node.js helper references. */


var nodeIsMap = nodeUtil && nodeUtil.isMap;
/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */

var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
module.exports = isMap;

/***/ }),

/***/ "./node_modules/lodash/isNaN.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/isNaN.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isNumber = __webpack_require__(/*! ./isNumber */ "./node_modules/lodash/isNumber.js");
/**
 * Checks if `value` is `NaN`.
 *
 * **Note:** This method is based on
 * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
 * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
 * `undefined` and other non-number values.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 * @example
 *
 * _.isNaN(NaN);
 * // => true
 *
 * _.isNaN(new Number(NaN));
 * // => true
 *
 * isNaN(undefined);
 * // => true
 *
 * _.isNaN(undefined);
 * // => false
 */


function isNaN(value) {
  // An `NaN` primitive is the only value that is not equal to itself.
  // Perform the `toStringTag` check first to avoid errors with some
  // ActiveX objects in IE.
  return isNumber(value) && value != +value;
}

module.exports = isNaN;

/***/ }),

/***/ "./node_modules/lodash/isNumber.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isNumber.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");
/** `Object#toString` result references. */


var numberTag = '[object Number]';
/**
 * Checks if `value` is classified as a `Number` primitive or object.
 *
 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
 * classified as numbers, use the `_.isFinite` method.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
 * @example
 *
 * _.isNumber(3);
 * // => true
 *
 * _.isNumber(Number.MIN_VALUE);
 * // => true
 *
 * _.isNumber(Infinity);
 * // => true
 *
 * _.isNumber('3');
 * // => false
 */

function isNumber(value) {
  return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
}

module.exports = isNumber;

/***/ }),

/***/ "./node_modules/lodash/isObject.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isObject.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;

/***/ }),

/***/ "./node_modules/lodash/isObjectLike.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/isObjectLike.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;

/***/ }),

/***/ "./node_modules/lodash/isPlainObject.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/isPlainObject.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    getPrototype = __webpack_require__(/*! ./_getPrototype */ "./node_modules/lodash/_getPrototype.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");
/** `Object#toString` result references. */


var objectTag = '[object Object]';
/** Used for built-in method references. */

var funcProto = Function.prototype,
    objectProto = Object.prototype;
/** Used to resolve the decompiled source of functions. */

var funcToString = funcProto.toString;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/** Used to infer the `Object` constructor. */

var objectCtorString = funcToString.call(Object);
/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */

function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
    return false;
  }

  var proto = getPrototype(value);

  if (proto === null) {
    return true;
  }

  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
}

module.exports = isPlainObject;

/***/ }),

/***/ "./node_modules/lodash/isSet.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/isSet.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseIsSet = __webpack_require__(/*! ./_baseIsSet */ "./node_modules/lodash/_baseIsSet.js"),
    baseUnary = __webpack_require__(/*! ./_baseUnary */ "./node_modules/lodash/_baseUnary.js"),
    nodeUtil = __webpack_require__(/*! ./_nodeUtil */ "./node_modules/lodash/_nodeUtil.js");
/* Node.js helper references. */


var nodeIsSet = nodeUtil && nodeUtil.isSet;
/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */

var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
module.exports = isSet;

/***/ }),

/***/ "./node_modules/lodash/isString.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isString.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");
/** `Object#toString` result references. */


var stringTag = '[object String]';
/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */

function isString(value) {
  return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
}

module.exports = isString;

/***/ }),

/***/ "./node_modules/lodash/isSymbol.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isSymbol.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");
/** `Object#toString` result references. */


var symbolTag = '[object Symbol]';
/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */

function isSymbol(value) {
  return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
}

module.exports = isSymbol;

/***/ }),

/***/ "./node_modules/lodash/isTypedArray.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/isTypedArray.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseIsTypedArray = __webpack_require__(/*! ./_baseIsTypedArray */ "./node_modules/lodash/_baseIsTypedArray.js"),
    baseUnary = __webpack_require__(/*! ./_baseUnary */ "./node_modules/lodash/_baseUnary.js"),
    nodeUtil = __webpack_require__(/*! ./_nodeUtil */ "./node_modules/lodash/_nodeUtil.js");
/* Node.js helper references. */


var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */

var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
module.exports = isTypedArray;

/***/ }),

/***/ "./node_modules/lodash/isUndefined.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/isUndefined.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Checks if `value` is `undefined`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
 * @example
 *
 * _.isUndefined(void 0);
 * // => true
 *
 * _.isUndefined(null);
 * // => false
 */
function isUndefined(value) {
  return value === undefined;
}

module.exports = isUndefined;

/***/ }),

/***/ "./node_modules/lodash/isWeakMap.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/isWeakMap.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");
/** `Object#toString` result references. */


var weakMapTag = '[object WeakMap]';
/**
 * Checks if `value` is classified as a `WeakMap` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
 * @example
 *
 * _.isWeakMap(new WeakMap);
 * // => true
 *
 * _.isWeakMap(new Map);
 * // => false
 */

function isWeakMap(value) {
  return isObjectLike(value) && getTag(value) == weakMapTag;
}

module.exports = isWeakMap;

/***/ }),

/***/ "./node_modules/lodash/iteratee.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/iteratee.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseClone = __webpack_require__(/*! ./_baseClone */ "./node_modules/lodash/_baseClone.js"),
    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ "./node_modules/lodash/_baseIteratee.js");
/** Used to compose bitmasks for cloning. */


var CLONE_DEEP_FLAG = 1;
/**
 * Creates a function that invokes `func` with the arguments of the created
 * function. If `func` is a property name, the created function returns the
 * property value for a given element. If `func` is an array or object, the
 * created function returns `true` for elements that contain the equivalent
 * source properties, otherwise it returns `false`.
 *
 * @static
 * @since 4.0.0
 * @memberOf _
 * @category Util
 * @param {*} [func=_.identity] The value to convert to a callback.
 * @returns {Function} Returns the callback.
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': true },
 *   { 'user': 'fred',   'age': 40, 'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
 * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.filter(users, _.iteratee(['user', 'fred']));
 * // => [{ 'user': 'fred', 'age': 40 }]
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, _.iteratee('user'));
 * // => ['barney', 'fred']
 *
 * // Create custom iteratee shorthands.
 * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
 *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
 *     return func.test(string);
 *   };
 * });
 *
 * _.filter(['abc', 'def'], /ef/);
 * // => ['def']
 */

function iteratee(func) {
  return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
}

module.exports = iteratee;

/***/ }),

/***/ "./node_modules/lodash/keyBy.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/keyBy.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ "./node_modules/lodash/_baseAssignValue.js"),
    createAggregator = __webpack_require__(/*! ./_createAggregator */ "./node_modules/lodash/_createAggregator.js");
/**
 * Creates an object composed of keys generated from the results of running
 * each element of `collection` thru `iteratee`. The corresponding value of
 * each key is the last element responsible for generating the key. The
 * iteratee is invoked with one argument: (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
 * @returns {Object} Returns the composed aggregate object.
 * @example
 *
 * var array = [
 *   { 'dir': 'left', 'code': 97 },
 *   { 'dir': 'right', 'code': 100 }
 * ];
 *
 * _.keyBy(array, function(o) {
 *   return String.fromCharCode(o.code);
 * });
 * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
 *
 * _.keyBy(array, 'dir');
 * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
 */


var keyBy = createAggregator(function (result, value, key) {
  baseAssignValue(result, key, value);
});
module.exports = keyBy;

/***/ }),

/***/ "./node_modules/lodash/keys.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/keys.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeKeys = __webpack_require__(/*! ./_arrayLikeKeys */ "./node_modules/lodash/_arrayLikeKeys.js"),
    baseKeys = __webpack_require__(/*! ./_baseKeys */ "./node_modules/lodash/_baseKeys.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js");
/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */


function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;

/***/ }),

/***/ "./node_modules/lodash/keysIn.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/keysIn.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeKeys = __webpack_require__(/*! ./_arrayLikeKeys */ "./node_modules/lodash/_arrayLikeKeys.js"),
    baseKeysIn = __webpack_require__(/*! ./_baseKeysIn */ "./node_modules/lodash/_baseKeysIn.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js");
/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */


function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

module.exports = keysIn;

/***/ }),

/***/ "./node_modules/lodash/last.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/last.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Gets the last element of `array`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the last element of `array`.
 * @example
 *
 * _.last([1, 2, 3]);
 * // => 3
 */
function last(array) {
  var length = array == null ? 0 : array.length;
  return length ? array[length - 1] : undefined;
}

module.exports = last;

/***/ }),

/***/ "./node_modules/lodash/map.js":
/*!************************************!*\
  !*** ./node_modules/lodash/map.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayMap = __webpack_require__(/*! ./_arrayMap */ "./node_modules/lodash/_arrayMap.js"),
    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ "./node_modules/lodash/_baseIteratee.js"),
    baseMap = __webpack_require__(/*! ./_baseMap */ "./node_modules/lodash/_baseMap.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js");
/**
 * Creates an array of values by running each element in `collection` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
 *
 * The guarded methods are:
 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * _.map([4, 8], square);
 * // => [16, 64]
 *
 * _.map({ 'a': 4, 'b': 8 }, square);
 * // => [16, 64] (iteration order is not guaranteed)
 *
 * var users = [
 *   { 'user': 'barney' },
 *   { 'user': 'fred' }
 * ];
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, 'user');
 * // => ['barney', 'fred']
 */


function map(collection, iteratee) {
  var func = isArray(collection) ? arrayMap : baseMap;
  return func(collection, baseIteratee(iteratee, 3));
}

module.exports = map;

/***/ }),

/***/ "./node_modules/lodash/mapValues.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/mapValues.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ "./node_modules/lodash/_baseAssignValue.js"),
    baseForOwn = __webpack_require__(/*! ./_baseForOwn */ "./node_modules/lodash/_baseForOwn.js"),
    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ "./node_modules/lodash/_baseIteratee.js");
/**
 * Creates an object with the same keys as `object` and values generated
 * by running each own enumerable string keyed property of `object` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, key, object).
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Object
 * @param {Object} object The object to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Object} Returns the new mapped object.
 * @see _.mapKeys
 * @example
 *
 * var users = {
 *   'fred':    { 'user': 'fred',    'age': 40 },
 *   'pebbles': { 'user': 'pebbles', 'age': 1 }
 * };
 *
 * _.mapValues(users, function(o) { return o.age; });
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 *
 * // The `_.property` iteratee shorthand.
 * _.mapValues(users, 'age');
 * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
 */


function mapValues(object, iteratee) {
  var result = {};
  iteratee = baseIteratee(iteratee, 3);
  baseForOwn(object, function (value, key, object) {
    baseAssignValue(result, key, iteratee(value, key, object));
  });
  return result;
}

module.exports = mapValues;

/***/ }),

/***/ "./node_modules/lodash/memoize.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/memoize.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var MapCache = __webpack_require__(/*! ./_MapCache */ "./node_modules/lodash/_MapCache.js");
/** Error message constants. */


var FUNC_ERROR_TEXT = 'Expected a function';
/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */

function memoize(func, resolver) {
  if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }

  var memoized = function () {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }

    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };

  memoized.cache = new (memoize.Cache || MapCache)();
  return memoized;
} // Expose `MapCache`.


memoize.Cache = MapCache;
module.exports = memoize;

/***/ }),

/***/ "./node_modules/lodash/merge.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/merge.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseMerge = __webpack_require__(/*! ./_baseMerge */ "./node_modules/lodash/_baseMerge.js"),
    createAssigner = __webpack_require__(/*! ./_createAssigner */ "./node_modules/lodash/_createAssigner.js");
/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */


var merge = createAssigner(function (object, source, srcIndex) {
  baseMerge(object, source, srcIndex);
});
module.exports = merge;

/***/ }),

/***/ "./node_modules/lodash/mergeWith.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/mergeWith.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseMerge = __webpack_require__(/*! ./_baseMerge */ "./node_modules/lodash/_baseMerge.js"),
    createAssigner = __webpack_require__(/*! ./_createAssigner */ "./node_modules/lodash/_createAssigner.js");
/**
 * This method is like `_.merge` except that it accepts `customizer` which
 * is invoked to produce the merged values of the destination and source
 * properties. If `customizer` returns `undefined`, merging is handled by the
 * method instead. The `customizer` is invoked with six arguments:
 * (objValue, srcValue, key, object, source, stack).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} sources The source objects.
 * @param {Function} customizer The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @example
 *
 * function customizer(objValue, srcValue) {
 *   if (_.isArray(objValue)) {
 *     return objValue.concat(srcValue);
 *   }
 * }
 *
 * var object = { 'a': [1], 'b': [2] };
 * var other = { 'a': [3], 'b': [4] };
 *
 * _.mergeWith(object, other, customizer);
 * // => { 'a': [1, 3], 'b': [2, 4] }
 */


var mergeWith = createAssigner(function (object, source, srcIndex, customizer) {
  baseMerge(object, source, srcIndex, customizer);
});
module.exports = mergeWith;

/***/ }),

/***/ "./node_modules/lodash/negate.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/negate.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';
/**
 * Creates a function that negates the result of the predicate `func`. The
 * `func` predicate is invoked with the `this` binding and arguments of the
 * created function.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} predicate The predicate to negate.
 * @returns {Function} Returns the new negated function.
 * @example
 *
 * function isEven(n) {
 *   return n % 2 == 0;
 * }
 *
 * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
 * // => [1, 3, 5]
 */

function negate(predicate) {
  if (typeof predicate != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }

  return function () {
    var args = arguments;

    switch (args.length) {
      case 0:
        return !predicate.call(this);

      case 1:
        return !predicate.call(this, args[0]);

      case 2:
        return !predicate.call(this, args[0], args[1]);

      case 3:
        return !predicate.call(this, args[0], args[1], args[2]);
    }

    return !predicate.apply(this, args);
  };
}

module.exports = negate;

/***/ }),

/***/ "./node_modules/lodash/noop.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/noop.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */
function noop() {// No operation performed.
}

module.exports = noop;

/***/ }),

/***/ "./node_modules/lodash/omit.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/omit.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayMap = __webpack_require__(/*! ./_arrayMap */ "./node_modules/lodash/_arrayMap.js"),
    baseClone = __webpack_require__(/*! ./_baseClone */ "./node_modules/lodash/_baseClone.js"),
    baseUnset = __webpack_require__(/*! ./_baseUnset */ "./node_modules/lodash/_baseUnset.js"),
    castPath = __webpack_require__(/*! ./_castPath */ "./node_modules/lodash/_castPath.js"),
    copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    customOmitClone = __webpack_require__(/*! ./_customOmitClone */ "./node_modules/lodash/_customOmitClone.js"),
    flatRest = __webpack_require__(/*! ./_flatRest */ "./node_modules/lodash/_flatRest.js"),
    getAllKeysIn = __webpack_require__(/*! ./_getAllKeysIn */ "./node_modules/lodash/_getAllKeysIn.js");
/** Used to compose bitmasks for cloning. */


var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;
/**
 * The opposite of `_.pick`; this method creates an object composed of the
 * own and inherited enumerable property paths of `object` that are not omitted.
 *
 * **Note:** This method is considerably slower than `_.pick`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to omit.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.omit(object, ['a', 'c']);
 * // => { 'b': '2' }
 */

var omit = flatRest(function (object, paths) {
  var result = {};

  if (object == null) {
    return result;
  }

  var isDeep = false;
  paths = arrayMap(paths, function (path) {
    path = castPath(path, object);
    isDeep || (isDeep = path.length > 1);
    return path;
  });
  copyObject(object, getAllKeysIn(object), result);

  if (isDeep) {
    result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
  }

  var length = paths.length;

  while (length--) {
    baseUnset(result, paths[length]);
  }

  return result;
});
module.exports = omit;

/***/ }),

/***/ "./node_modules/lodash/omitBy.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/omitBy.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseIteratee = __webpack_require__(/*! ./_baseIteratee */ "./node_modules/lodash/_baseIteratee.js"),
    negate = __webpack_require__(/*! ./negate */ "./node_modules/lodash/negate.js"),
    pickBy = __webpack_require__(/*! ./pickBy */ "./node_modules/lodash/pickBy.js");
/**
 * The opposite of `_.pickBy`; this method creates an object composed of
 * the own and inherited enumerable string keyed properties of `object` that
 * `predicate` doesn't return truthy for. The predicate is invoked with two
 * arguments: (value, key).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The source object.
 * @param {Function} [predicate=_.identity] The function invoked per property.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.omitBy(object, _.isNumber);
 * // => { 'b': '2' }
 */


function omitBy(object, predicate) {
  return pickBy(object, negate(baseIteratee(predicate)));
}

module.exports = omitBy;

/***/ }),

/***/ "./node_modules/lodash/pick.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/pick.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var basePick = __webpack_require__(/*! ./_basePick */ "./node_modules/lodash/_basePick.js"),
    flatRest = __webpack_require__(/*! ./_flatRest */ "./node_modules/lodash/_flatRest.js");
/**
 * Creates an object composed of the picked `object` properties.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The source object.
 * @param {...(string|string[])} [paths] The property paths to pick.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.pick(object, ['a', 'c']);
 * // => { 'a': 1, 'c': 3 }
 */


var pick = flatRest(function (object, paths) {
  return object == null ? {} : basePick(object, paths);
});
module.exports = pick;

/***/ }),

/***/ "./node_modules/lodash/pickBy.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/pickBy.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayMap = __webpack_require__(/*! ./_arrayMap */ "./node_modules/lodash/_arrayMap.js"),
    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ "./node_modules/lodash/_baseIteratee.js"),
    basePickBy = __webpack_require__(/*! ./_basePickBy */ "./node_modules/lodash/_basePickBy.js"),
    getAllKeysIn = __webpack_require__(/*! ./_getAllKeysIn */ "./node_modules/lodash/_getAllKeysIn.js");
/**
 * Creates an object composed of the `object` properties `predicate` returns
 * truthy for. The predicate is invoked with two arguments: (value, key).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The source object.
 * @param {Function} [predicate=_.identity] The function invoked per property.
 * @returns {Object} Returns the new object.
 * @example
 *
 * var object = { 'a': 1, 'b': '2', 'c': 3 };
 *
 * _.pickBy(object, _.isNumber);
 * // => { 'a': 1, 'c': 3 }
 */


function pickBy(object, predicate) {
  if (object == null) {
    return {};
  }

  var props = arrayMap(getAllKeysIn(object), function (prop) {
    return [prop];
  });
  predicate = baseIteratee(predicate);
  return basePickBy(object, props, function (value, path) {
    return predicate(value, path[0]);
  });
}

module.exports = pickBy;

/***/ }),

/***/ "./node_modules/lodash/property.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/property.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseProperty = __webpack_require__(/*! ./_baseProperty */ "./node_modules/lodash/_baseProperty.js"),
    basePropertyDeep = __webpack_require__(/*! ./_basePropertyDeep */ "./node_modules/lodash/_basePropertyDeep.js"),
    isKey = __webpack_require__(/*! ./_isKey */ "./node_modules/lodash/_isKey.js"),
    toKey = __webpack_require__(/*! ./_toKey */ "./node_modules/lodash/_toKey.js");
/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */


function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = property;

/***/ }),

/***/ "./node_modules/lodash/rearg.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/rearg.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var createWrap = __webpack_require__(/*! ./_createWrap */ "./node_modules/lodash/_createWrap.js"),
    flatRest = __webpack_require__(/*! ./_flatRest */ "./node_modules/lodash/_flatRest.js");
/** Used to compose bitmasks for function metadata. */


var WRAP_REARG_FLAG = 256;
/**
 * Creates a function that invokes `func` with arguments arranged according
 * to the specified `indexes` where the argument value at the first index is
 * provided as the first argument, the argument value at the second index is
 * provided as the second argument, and so on.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Function
 * @param {Function} func The function to rearrange arguments for.
 * @param {...(number|number[])} indexes The arranged argument indexes.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var rearged = _.rearg(function(a, b, c) {
 *   return [a, b, c];
 * }, [2, 0, 1]);
 *
 * rearged('b', 'c', 'a')
 * // => ['a', 'b', 'c']
 */

var rearg = flatRest(function (func, indexes) {
  return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
});
module.exports = rearg;

/***/ }),

/***/ "./node_modules/lodash/reduce.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/reduce.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayReduce = __webpack_require__(/*! ./_arrayReduce */ "./node_modules/lodash/_arrayReduce.js"),
    baseEach = __webpack_require__(/*! ./_baseEach */ "./node_modules/lodash/_baseEach.js"),
    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ "./node_modules/lodash/_baseIteratee.js"),
    baseReduce = __webpack_require__(/*! ./_baseReduce */ "./node_modules/lodash/_baseReduce.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js");
/**
 * Reduces `collection` to a value which is the accumulated result of running
 * each element in `collection` thru `iteratee`, where each successive
 * invocation is supplied the return value of the previous. If `accumulator`
 * is not given, the first element of `collection` is used as the initial
 * value. The iteratee is invoked with four arguments:
 * (accumulator, value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.reduce`, `_.reduceRight`, and `_.transform`.
 *
 * The guarded methods are:
 * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
 * and `sortBy`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @param {*} [accumulator] The initial value.
 * @returns {*} Returns the accumulated value.
 * @see _.reduceRight
 * @example
 *
 * _.reduce([1, 2], function(sum, n) {
 *   return sum + n;
 * }, 0);
 * // => 3
 *
 * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
 *   (result[value] || (result[value] = [])).push(key);
 *   return result;
 * }, {});
 * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
 */


function reduce(collection, iteratee, accumulator) {
  var func = isArray(collection) ? arrayReduce : baseReduce,
      initAccum = arguments.length < 3;
  return func(collection, baseIteratee(iteratee, 4), accumulator, initAccum, baseEach);
}

module.exports = reduce;

/***/ }),

/***/ "./node_modules/lodash/reject.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/reject.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayFilter = __webpack_require__(/*! ./_arrayFilter */ "./node_modules/lodash/_arrayFilter.js"),
    baseFilter = __webpack_require__(/*! ./_baseFilter */ "./node_modules/lodash/_baseFilter.js"),
    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ "./node_modules/lodash/_baseIteratee.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    negate = __webpack_require__(/*! ./negate */ "./node_modules/lodash/negate.js");
/**
 * The opposite of `_.filter`; this method returns the elements of `collection`
 * that `predicate` does **not** return truthy for.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 * @see _.filter
 * @example
 *
 * var users = [
 *   { 'user': 'barney', 'age': 36, 'active': false },
 *   { 'user': 'fred',   'age': 40, 'active': true }
 * ];
 *
 * _.reject(users, function(o) { return !o.active; });
 * // => objects for ['fred']
 *
 * // The `_.matches` iteratee shorthand.
 * _.reject(users, { 'age': 40, 'active': true });
 * // => objects for ['barney']
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.reject(users, ['active', false]);
 * // => objects for ['fred']
 *
 * // The `_.property` iteratee shorthand.
 * _.reject(users, 'active');
 * // => objects for ['barney']
 */


function reject(collection, predicate) {
  var func = isArray(collection) ? arrayFilter : baseFilter;
  return func(collection, negate(baseIteratee(predicate, 3)));
}

module.exports = reject;

/***/ }),

/***/ "./node_modules/lodash/remove.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/remove.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseIteratee = __webpack_require__(/*! ./_baseIteratee */ "./node_modules/lodash/_baseIteratee.js"),
    basePullAt = __webpack_require__(/*! ./_basePullAt */ "./node_modules/lodash/_basePullAt.js");
/**
 * Removes all elements from `array` that `predicate` returns truthy for
 * and returns an array of the removed elements. The predicate is invoked
 * with three arguments: (value, index, array).
 *
 * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
 * to pull elements from an array by value.
 *
 * @static
 * @memberOf _
 * @since 2.0.0
 * @category Array
 * @param {Array} array The array to modify.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new array of removed elements.
 * @example
 *
 * var array = [1, 2, 3, 4];
 * var evens = _.remove(array, function(n) {
 *   return n % 2 == 0;
 * });
 *
 * console.log(array);
 * // => [1, 3]
 *
 * console.log(evens);
 * // => [2, 4]
 */


function remove(array, predicate) {
  var result = [];

  if (!(array && array.length)) {
    return result;
  }

  var index = -1,
      indexes = [],
      length = array.length;
  predicate = baseIteratee(predicate, 3);

  while (++index < length) {
    var value = array[index];

    if (predicate(value, index, array)) {
      result.push(value);
      indexes.push(index);
    }
  }

  basePullAt(array, indexes);
  return result;
}

module.exports = remove;

/***/ }),

/***/ "./node_modules/lodash/replace.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/replace.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toString = __webpack_require__(/*! ./toString */ "./node_modules/lodash/toString.js");
/**
 * Replaces matches for `pattern` in `string` with `replacement`.
 *
 * **Note:** This method is based on
 * [`String#replace`](https://mdn.io/String/replace).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to modify.
 * @param {RegExp|string} pattern The pattern to replace.
 * @param {Function|string} replacement The match replacement.
 * @returns {string} Returns the modified string.
 * @example
 *
 * _.replace('Hi Fred', 'Fred', 'Barney');
 * // => 'Hi Barney'
 */


function replace() {
  var args = arguments,
      string = toString(args[0]);
  return args.length < 3 ? string : string.replace(args[1], args[2]);
}

module.exports = replace;

/***/ }),

/***/ "./node_modules/lodash/set.js":
/*!************************************!*\
  !*** ./node_modules/lodash/set.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseSet = __webpack_require__(/*! ./_baseSet */ "./node_modules/lodash/_baseSet.js");
/**
 * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
 * it's created. Arrays are created for missing index properties while objects
 * are created for all other missing properties. Use `_.setWith` to customize
 * `path` creation.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.set(object, 'a[0].b.c', 4);
 * console.log(object.a[0].b.c);
 * // => 4
 *
 * _.set(object, ['x', '0', 'y', 'z'], 5);
 * console.log(object.x[0].y.z);
 * // => 5
 */


function set(object, path, value) {
  return object == null ? object : baseSet(object, path, value);
}

module.exports = set;

/***/ }),

/***/ "./node_modules/lodash/setWith.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/setWith.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseSet = __webpack_require__(/*! ./_baseSet */ "./node_modules/lodash/_baseSet.js");
/**
 * This method is like `_.set` except that it accepts `customizer` which is
 * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
 * path creation is handled by the method instead. The `customizer` is invoked
 * with three arguments: (nsValue, key, nsObject).
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize assigned values.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {};
 *
 * _.setWith(object, '[0][1]', 'a', Object);
 * // => { '0': { '1': 'a' } }
 */


function setWith(object, path, value, customizer) {
  customizer = typeof customizer == 'function' ? customizer : undefined;
  return object == null ? object : baseSet(object, path, value, customizer);
}

module.exports = setWith;

/***/ }),

/***/ "./node_modules/lodash/size.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/size.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseKeys = __webpack_require__(/*! ./_baseKeys */ "./node_modules/lodash/_baseKeys.js"),
    getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js"),
    isString = __webpack_require__(/*! ./isString */ "./node_modules/lodash/isString.js"),
    stringSize = __webpack_require__(/*! ./_stringSize */ "./node_modules/lodash/_stringSize.js");
/** `Object#toString` result references. */


var mapTag = '[object Map]',
    setTag = '[object Set]';
/**
 * Gets the size of `collection` by returning its length for array-like
 * values or the number of own enumerable string keyed properties for objects.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object|string} collection The collection to inspect.
 * @returns {number} Returns the collection size.
 * @example
 *
 * _.size([1, 2, 3]);
 * // => 3
 *
 * _.size({ 'a': 1, 'b': 2 });
 * // => 2
 *
 * _.size('pebbles');
 * // => 7
 */

function size(collection) {
  if (collection == null) {
    return 0;
  }

  if (isArrayLike(collection)) {
    return isString(collection) ? stringSize(collection) : collection.length;
  }

  var tag = getTag(collection);

  if (tag == mapTag || tag == setTag) {
    return collection.size;
  }

  return baseKeys(collection).length;
}

module.exports = size;

/***/ }),

/***/ "./node_modules/lodash/some.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/some.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arraySome = __webpack_require__(/*! ./_arraySome */ "./node_modules/lodash/_arraySome.js"),
    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ "./node_modules/lodash/_baseIteratee.js"),
    baseSome = __webpack_require__(/*! ./_baseSome */ "./node_modules/lodash/_baseSome.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isIterateeCall = __webpack_require__(/*! ./_isIterateeCall */ "./node_modules/lodash/_isIterateeCall.js");
/**
 * Checks if `predicate` returns truthy for **any** element of `collection`.
 * Iteration is stopped once `predicate` returns truthy. The predicate is
 * invoked with three arguments: (value, index|key, collection).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [predicate=_.identity] The function invoked per iteration.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 * @example
 *
 * _.some([null, 0, 'yes', false], Boolean);
 * // => true
 *
 * var users = [
 *   { 'user': 'barney', 'active': true },
 *   { 'user': 'fred',   'active': false }
 * ];
 *
 * // The `_.matches` iteratee shorthand.
 * _.some(users, { 'user': 'barney', 'active': false });
 * // => false
 *
 * // The `_.matchesProperty` iteratee shorthand.
 * _.some(users, ['active', false]);
 * // => true
 *
 * // The `_.property` iteratee shorthand.
 * _.some(users, 'active');
 * // => true
 */


function some(collection, predicate, guard) {
  var func = isArray(collection) ? arraySome : baseSome;

  if (guard && isIterateeCall(collection, predicate, guard)) {
    predicate = undefined;
  }

  return func(collection, baseIteratee(predicate, 3));
}

module.exports = some;

/***/ }),

/***/ "./node_modules/lodash/stubArray.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/stubArray.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;

/***/ }),

/***/ "./node_modules/lodash/stubFalse.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/stubFalse.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;

/***/ }),

/***/ "./node_modules/lodash/toFinite.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/toFinite.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toNumber = __webpack_require__(/*! ./toNumber */ "./node_modules/lodash/toNumber.js");
/** Used as references for various `Number` constants. */


var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;
/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */

function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }

  value = toNumber(value);

  if (value === INFINITY || value === -INFINITY) {
    var sign = value < 0 ? -1 : 1;
    return sign * MAX_INTEGER;
  }

  return value === value ? value : 0;
}

module.exports = toFinite;

/***/ }),

/***/ "./node_modules/lodash/toInteger.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/toInteger.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toFinite = __webpack_require__(/*! ./toFinite */ "./node_modules/lodash/toFinite.js");
/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */


function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;
  return result === result ? remainder ? result - remainder : result : 0;
}

module.exports = toInteger;

/***/ }),

/***/ "./node_modules/lodash/toNumber.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/toNumber.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");
/** Used as references for various `Number` constants. */


var NAN = 0 / 0;
/** Used to match leading and trailing whitespace. */

var reTrim = /^\s+|\s+$/g;
/** Used to detect bad signed hexadecimal string values. */

var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
/** Used to detect binary string values. */

var reIsBinary = /^0b[01]+$/i;
/** Used to detect octal string values. */

var reIsOctal = /^0o[0-7]+$/i;
/** Built-in method references without a dependency on `root`. */

var freeParseInt = parseInt;
/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */

function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }

  if (isSymbol(value)) {
    return NAN;
  }

  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? other + '' : other;
  }

  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }

  value = value.replace(reTrim, '');
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}

module.exports = toNumber;

/***/ }),

/***/ "./node_modules/lodash/toPath.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/toPath.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayMap = __webpack_require__(/*! ./_arrayMap */ "./node_modules/lodash/_arrayMap.js"),
    copyArray = __webpack_require__(/*! ./_copyArray */ "./node_modules/lodash/_copyArray.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js"),
    stringToPath = __webpack_require__(/*! ./_stringToPath */ "./node_modules/lodash/_stringToPath.js"),
    toKey = __webpack_require__(/*! ./_toKey */ "./node_modules/lodash/_toKey.js"),
    toString = __webpack_require__(/*! ./toString */ "./node_modules/lodash/toString.js");
/**
 * Converts `value` to a property path array.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Util
 * @param {*} value The value to convert.
 * @returns {Array} Returns the new property path array.
 * @example
 *
 * _.toPath('a.b.c');
 * // => ['a', 'b', 'c']
 *
 * _.toPath('a[0].b.c');
 * // => ['a', '0', 'b', 'c']
 */


function toPath(value) {
  if (isArray(value)) {
    return arrayMap(value, toKey);
  }

  return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
}

module.exports = toPath;

/***/ }),

/***/ "./node_modules/lodash/toPlainObject.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/toPlainObject.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    keysIn = __webpack_require__(/*! ./keysIn */ "./node_modules/lodash/keysIn.js");
/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */


function toPlainObject(value) {
  return copyObject(value, keysIn(value));
}

module.exports = toPlainObject;

/***/ }),

/***/ "./node_modules/lodash/toString.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/toString.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseToString = __webpack_require__(/*! ./_baseToString */ "./node_modules/lodash/_baseToString.js");
/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */


function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;

/***/ }),

/***/ "./node_modules/lodash/trim.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/trim.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseToString = __webpack_require__(/*! ./_baseToString */ "./node_modules/lodash/_baseToString.js"),
    castSlice = __webpack_require__(/*! ./_castSlice */ "./node_modules/lodash/_castSlice.js"),
    charsEndIndex = __webpack_require__(/*! ./_charsEndIndex */ "./node_modules/lodash/_charsEndIndex.js"),
    charsStartIndex = __webpack_require__(/*! ./_charsStartIndex */ "./node_modules/lodash/_charsStartIndex.js"),
    stringToArray = __webpack_require__(/*! ./_stringToArray */ "./node_modules/lodash/_stringToArray.js"),
    toString = __webpack_require__(/*! ./toString */ "./node_modules/lodash/toString.js");
/** Used to match leading and trailing whitespace. */


var reTrim = /^\s+|\s+$/g;
/**
 * Removes leading and trailing whitespace or specified characters from `string`.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category String
 * @param {string} [string=''] The string to trim.
 * @param {string} [chars=whitespace] The characters to trim.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {string} Returns the trimmed string.
 * @example
 *
 * _.trim('  abc  ');
 * // => 'abc'
 *
 * _.trim('-_-abc-_-', '_-');
 * // => 'abc'
 *
 * _.map(['  foo  ', '  bar  '], _.trim);
 * // => ['foo', 'bar']
 */

function trim(string, chars, guard) {
  string = toString(string);

  if (string && (guard || chars === undefined)) {
    return string.replace(reTrim, '');
  }

  if (!string || !(chars = baseToString(chars))) {
    return string;
  }

  var strSymbols = stringToArray(string),
      chrSymbols = stringToArray(chars),
      start = charsStartIndex(strSymbols, chrSymbols),
      end = charsEndIndex(strSymbols, chrSymbols) + 1;
  return castSlice(strSymbols, start, end).join('');
}

module.exports = trim;

/***/ }),

/***/ "./node_modules/lodash/trimStart.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/trimStart.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseToString = __webpack_require__(/*! ./_baseToString */ "./node_modules/lodash/_baseToString.js"),
    castSlice = __webpack_require__(/*! ./_castSlice */ "./node_modules/lodash/_castSlice.js"),
    charsStartIndex = __webpack_require__(/*! ./_charsStartIndex */ "./node_modules/lodash/_charsStartIndex.js"),
    stringToArray = __webpack_require__(/*! ./_stringToArray */ "./node_modules/lodash/_stringToArray.js"),
    toString = __webpack_require__(/*! ./toString */ "./node_modules/lodash/toString.js");
/** Used to match leading and trailing whitespace. */


var reTrimStart = /^\s+/;
/**
 * Removes leading whitespace or specified characters from `string`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to trim.
 * @param {string} [chars=whitespace] The characters to trim.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {string} Returns the trimmed string.
 * @example
 *
 * _.trimStart('  abc  ');
 * // => 'abc  '
 *
 * _.trimStart('-_-abc-_-', '_-');
 * // => 'abc-_-'
 */

function trimStart(string, chars, guard) {
  string = toString(string);

  if (string && (guard || chars === undefined)) {
    return string.replace(reTrimStart, '');
  }

  if (!string || !(chars = baseToString(chars))) {
    return string;
  }

  var strSymbols = stringToArray(string),
      start = charsStartIndex(strSymbols, stringToArray(chars));
  return castSlice(strSymbols, start).join('');
}

module.exports = trimStart;

/***/ }),

/***/ "./node_modules/lodash/unionBy.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/unionBy.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseFlatten = __webpack_require__(/*! ./_baseFlatten */ "./node_modules/lodash/_baseFlatten.js"),
    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ "./node_modules/lodash/_baseIteratee.js"),
    baseRest = __webpack_require__(/*! ./_baseRest */ "./node_modules/lodash/_baseRest.js"),
    baseUniq = __webpack_require__(/*! ./_baseUniq */ "./node_modules/lodash/_baseUniq.js"),
    isArrayLikeObject = __webpack_require__(/*! ./isArrayLikeObject */ "./node_modules/lodash/isArrayLikeObject.js"),
    last = __webpack_require__(/*! ./last */ "./node_modules/lodash/last.js");
/**
 * This method is like `_.union` except that it accepts `iteratee` which is
 * invoked for each element of each `arrays` to generate the criterion by
 * which uniqueness is computed. Result values are chosen from the first
 * array in which the value occurs. The iteratee is invoked with one argument:
 * (value).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Array
 * @param {...Array} [arrays] The arrays to inspect.
 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
 * @returns {Array} Returns the new array of combined values.
 * @example
 *
 * _.unionBy([2.1], [1.2, 2.3], Math.floor);
 * // => [2.1, 1.2]
 *
 * // The `_.property` iteratee shorthand.
 * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
 * // => [{ 'x': 1 }, { 'x': 2 }]
 */


var unionBy = baseRest(function (arrays) {
  var iteratee = last(arrays);

  if (isArrayLikeObject(iteratee)) {
    iteratee = undefined;
  }

  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), baseIteratee(iteratee, 2));
});
module.exports = unionBy;

/***/ }),

/***/ "./node_modules/lodash/unset.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/unset.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseUnset = __webpack_require__(/*! ./_baseUnset */ "./node_modules/lodash/_baseUnset.js");
/**
 * Removes the property at `path` of `object`.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to unset.
 * @returns {boolean} Returns `true` if the property is deleted, else `false`.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 7 } }] };
 * _.unset(object, 'a[0].b.c');
 * // => true
 *
 * console.log(object);
 * // => { 'a': [{ 'b': {} }] };
 *
 * _.unset(object, ['a', '0', 'b', 'c']);
 * // => true
 *
 * console.log(object);
 * // => { 'a': [{ 'b': {} }] };
 */


function unset(object, path) {
  return object == null ? true : baseUnset(object, path);
}

module.exports = unset;

/***/ }),

/***/ "./node_modules/lodash/upperFirst.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/upperFirst.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var createCaseFirst = __webpack_require__(/*! ./_createCaseFirst */ "./node_modules/lodash/_createCaseFirst.js");
/**
 * Converts the first character of `string` to upper case.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.upperFirst('fred');
 * // => 'Fred'
 *
 * _.upperFirst('FRED');
 * // => 'FRED'
 */


var upperFirst = createCaseFirst('toUpperCase');
module.exports = upperFirst;

/***/ }),

/***/ "./node_modules/lodash/values.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/values.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var baseValues = __webpack_require__(/*! ./_baseValues */ "./node_modules/lodash/_baseValues.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");
/**
 * Creates an array of the own enumerable string keyed property values of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property values.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.values(new Foo);
 * // => [1, 2] (iteration order is not guaranteed)
 *
 * _.values('hi');
 * // => ['h', 'i']
 */


function values(object) {
  return object == null ? [] : baseValues(object, keys(object));
}

module.exports = values;

/***/ }),

/***/ "./node_modules/lodash/wrapperLodash.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/wrapperLodash.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var LazyWrapper = __webpack_require__(/*! ./_LazyWrapper */ "./node_modules/lodash/_LazyWrapper.js"),
    LodashWrapper = __webpack_require__(/*! ./_LodashWrapper */ "./node_modules/lodash/_LodashWrapper.js"),
    baseLodash = __webpack_require__(/*! ./_baseLodash */ "./node_modules/lodash/_baseLodash.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js"),
    wrapperClone = __webpack_require__(/*! ./_wrapperClone */ "./node_modules/lodash/_wrapperClone.js");
/** Used for built-in method references. */


var objectProto = Object.prototype;
/** Used to check objects for own properties. */

var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Creates a `lodash` object which wraps `value` to enable implicit method
 * chain sequences. Methods that operate on and return arrays, collections,
 * and functions can be chained together. Methods that retrieve a single value
 * or may return a primitive value will automatically end the chain sequence
 * and return the unwrapped value. Otherwise, the value must be unwrapped
 * with `_#value`.
 *
 * Explicit chain sequences, which must be unwrapped with `_#value`, may be
 * enabled using `_.chain`.
 *
 * The execution of chained methods is lazy, that is, it's deferred until
 * `_#value` is implicitly or explicitly called.
 *
 * Lazy evaluation allows several methods to support shortcut fusion.
 * Shortcut fusion is an optimization to merge iteratee calls; this avoids
 * the creation of intermediate arrays and can greatly reduce the number of
 * iteratee executions. Sections of a chain sequence qualify for shortcut
 * fusion if the section is applied to an array and iteratees accept only
 * one argument. The heuristic for whether a section qualifies for shortcut
 * fusion is subject to change.
 *
 * Chaining is supported in custom builds as long as the `_#value` method is
 * directly or indirectly included in the build.
 *
 * In addition to lodash methods, wrappers have `Array` and `String` methods.
 *
 * The wrapper `Array` methods are:
 * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
 *
 * The wrapper `String` methods are:
 * `replace` and `split`
 *
 * The wrapper methods that support shortcut fusion are:
 * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
 * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
 * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
 *
 * The chainable wrapper methods are:
 * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
 * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
 * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
 * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
 * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
 * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
 * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
 * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
 * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
 * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
 * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
 * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
 * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
 * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
 * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
 * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
 * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
 * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
 * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
 * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
 * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
 * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
 * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
 * `zipObject`, `zipObjectDeep`, and `zipWith`
 *
 * The wrapper methods that are **not** chainable by default are:
 * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
 * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
 * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
 * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
 * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
 * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
 * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
 * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
 * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
 * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
 * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
 * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
 * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
 * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
 * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
 * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
 * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
 * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
 * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
 * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
 * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
 * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
 * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
 * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
 * `upperFirst`, `value`, and `words`
 *
 * @name _
 * @constructor
 * @category Seq
 * @param {*} value The value to wrap in a `lodash` instance.
 * @returns {Object} Returns the new `lodash` wrapper instance.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * var wrapped = _([1, 2, 3]);
 *
 * // Returns an unwrapped value.
 * wrapped.reduce(_.add);
 * // => 6
 *
 * // Returns a wrapped value.
 * var squares = wrapped.map(square);
 *
 * _.isArray(squares);
 * // => false
 *
 * _.isArray(squares.value());
 * // => true
 */

function lodash(value) {
  if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
    if (value instanceof LodashWrapper) {
      return value;
    }

    if (hasOwnProperty.call(value, '__wrapped__')) {
      return wrapperClone(value);
    }
  }

  return new LodashWrapper(value);
} // Ensure wrappers are instances of `baseLodash`.


lodash.prototype = baseLodash.prototype;
lodash.prototype.constructor = lodash;
module.exports = lodash;

/***/ }),

/***/ "./node_modules/mini-create-react-context/dist/esm/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/mini-create-react-context/dist/esm/index.js ***!
  \******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/inheritsLoose */ "./node_modules/@babel/runtime/helpers/inheritsLoose.js");
/* harmony import */ var _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var gud__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! gud */ "./node_modules/gud/index.js");
/* harmony import */ var gud__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(gud__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var tiny_warning__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tiny-warning */ "./node_modules/tiny-warning/dist/tiny-warning.esm.js");





var MAX_SIGNED_31_BIT_INT = 1073741823;

function objectIs(x, y) {
  if (x === y) {
    return x !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}

function createEventEmitter(value) {
  var handlers = [];
  return {
    on: function on(handler) {
      handlers.push(handler);
    },
    off: function off(handler) {
      handlers = handlers.filter(function (h) {
        return h !== handler;
      });
    },
    get: function get() {
      return value;
    },
    set: function set(newValue, changedBits) {
      value = newValue;
      handlers.forEach(function (handler) {
        return handler(value, changedBits);
      });
    }
  };
}

function onlyChild(children) {
  return Array.isArray(children) ? children[0] : children;
}

function createReactContext(defaultValue, calculateChangedBits) {
  var _Provider$childContex, _Consumer$contextType;

  var contextProp = '__create-react-context-' + gud__WEBPACK_IMPORTED_MODULE_3___default()() + '__';

  var Provider =
  /*#__PURE__*/
  function (_Component) {
    _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default()(Provider, _Component);

    function Provider() {
      var _this;

      _this = _Component.apply(this, arguments) || this;
      _this.emitter = createEventEmitter(_this.props.value);
      return _this;
    }

    var _proto = Provider.prototype;

    _proto.getChildContext = function getChildContext() {
      var _ref;

      return _ref = {}, _ref[contextProp] = this.emitter, _ref;
    };

    _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
      if (this.props.value !== nextProps.value) {
        var oldValue = this.props.value;
        var newValue = nextProps.value;
        var changedBits;

        if (objectIs(oldValue, newValue)) {
          changedBits = 0;
        } else {
          changedBits = typeof calculateChangedBits === 'function' ? calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

          if (true) {
            Object(tiny_warning__WEBPACK_IMPORTED_MODULE_4__["default"])((changedBits & MAX_SIGNED_31_BIT_INT) === changedBits, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: ' + changedBits);
          }

          changedBits |= 0;

          if (changedBits !== 0) {
            this.emitter.set(nextProps.value, changedBits);
          }
        }
      }
    };

    _proto.render = function render() {
      return this.props.children;
    };

    return Provider;
  }(react__WEBPACK_IMPORTED_MODULE_0__["Component"]);

  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[contextProp] = prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object.isRequired, _Provider$childContex);

  var Consumer =
  /*#__PURE__*/
  function (_Component2) {
    _babel_runtime_helpers_inheritsLoose__WEBPACK_IMPORTED_MODULE_1___default()(Consumer, _Component2);

    function Consumer() {
      var _this2;

      _this2 = _Component2.apply(this, arguments) || this;
      _this2.state = {
        value: _this2.getValue()
      };

      _this2.onUpdate = function (newValue, changedBits) {
        var observedBits = _this2.observedBits | 0;

        if ((observedBits & changedBits) !== 0) {
          _this2.setState({
            value: _this2.getValue()
          });
        }
      };

      return _this2;
    }

    var _proto2 = Consumer.prototype;

    _proto2.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
      var observedBits = nextProps.observedBits;
      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
    };

    _proto2.componentDidMount = function componentDidMount() {
      if (this.context[contextProp]) {
        this.context[contextProp].on(this.onUpdate);
      }

      var observedBits = this.props.observedBits;
      this.observedBits = observedBits === undefined || observedBits === null ? MAX_SIGNED_31_BIT_INT : observedBits;
    };

    _proto2.componentWillUnmount = function componentWillUnmount() {
      if (this.context[contextProp]) {
        this.context[contextProp].off(this.onUpdate);
      }
    };

    _proto2.getValue = function getValue() {
      if (this.context[contextProp]) {
        return this.context[contextProp].get();
      } else {
        return defaultValue;
      }
    };

    _proto2.render = function render() {
      return onlyChild(this.props.children)(this.state.value);
    };

    return Consumer;
  }(react__WEBPACK_IMPORTED_MODULE_0__["Component"]);

  Consumer.contextTypes = (_Consumer$contextType = {}, _Consumer$contextType[contextProp] = prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.object, _Consumer$contextType);
  return {
    Provider: Provider,
    Consumer: Consumer
  };
}

var index = react__WEBPACK_IMPORTED_MODULE_0___default.a.createContext || createReactContext;
/* harmony default export */ __webpack_exports__["default"] = (index);

/***/ }),

/***/ "./node_modules/node-libs-browser/node_modules/punycode/punycode.js":
/*!**************************************************************************!*\
  !*** ./node_modules/node-libs-browser/node_modules/punycode/punycode.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
;

(function (root) {
  /** Detect free variables */
  var freeExports =  true && exports && !exports.nodeType && exports;
  var freeModule =  true && module && !module.nodeType && module;
  var freeGlobal = typeof global == 'object' && global;

  if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) {
    root = freeGlobal;
  }
  /**
   * The `punycode` object.
   * @name punycode
   * @type Object
   */


  var punycode,

  /** Highest positive signed 32-bit float value */
  maxInt = 2147483647,
      // aka. 0x7FFFFFFF or 2^31-1

  /** Bootstring parameters */
  base = 36,
      tMin = 1,
      tMax = 26,
      skew = 38,
      damp = 700,
      initialBias = 72,
      initialN = 128,
      // 0x80
  delimiter = '-',
      // '\x2D'

  /** Regular expressions */
  regexPunycode = /^xn--/,
      regexNonASCII = /[^\x20-\x7E]/,
      // unprintable ASCII chars + non-ASCII chars
  regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g,
      // RFC 3490 separators

  /** Error messages */
  errors = {
    'overflow': 'Overflow: input needs wider integers to process',
    'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
    'invalid-input': 'Invalid input'
  },

  /** Convenience shortcuts */
  baseMinusTMin = base - tMin,
      floor = Math.floor,
      stringFromCharCode = String.fromCharCode,

  /** Temporary variable */
  key;
  /*--------------------------------------------------------------------------*/

  /**
   * A generic error utility function.
   * @private
   * @param {String} type The error type.
   * @returns {Error} Throws a `RangeError` with the applicable error message.
   */

  function error(type) {
    throw new RangeError(errors[type]);
  }
  /**
   * A generic `Array#map` utility function.
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} callback The function that gets called for every array
   * item.
   * @returns {Array} A new array of values returned by the callback function.
   */


  function map(array, fn) {
    var length = array.length;
    var result = [];

    while (length--) {
      result[length] = fn(array[length]);
    }

    return result;
  }
  /**
   * A simple `Array#map`-like wrapper to work with domain name strings or email
   * addresses.
   * @private
   * @param {String} domain The domain name or email address.
   * @param {Function} callback The function that gets called for every
   * character.
   * @returns {Array} A new string of characters returned by the callback
   * function.
   */


  function mapDomain(string, fn) {
    var parts = string.split('@');
    var result = '';

    if (parts.length > 1) {
      // In email addresses, only the domain name should be punycoded. Leave
      // the local part (i.e. everything up to `@`) intact.
      result = parts[0] + '@';
      string = parts[1];
    } // Avoid `split(regex)` for IE8 compatibility. See #17.


    string = string.replace(regexSeparators, '\x2E');
    var labels = string.split('.');
    var encoded = map(labels, fn).join('.');
    return result + encoded;
  }
  /**
   * Creates an array containing the numeric code points of each Unicode
   * character in the string. While JavaScript uses UCS-2 internally,
   * this function will convert a pair of surrogate halves (each of which
   * UCS-2 exposes as separate characters) into a single code point,
   * matching UTF-16.
   * @see `punycode.ucs2.encode`
   * @see <https://mathiasbynens.be/notes/javascript-encoding>
   * @memberOf punycode.ucs2
   * @name decode
   * @param {String} string The Unicode input string (UCS-2).
   * @returns {Array} The new array of code points.
   */


  function ucs2decode(string) {
    var output = [],
        counter = 0,
        length = string.length,
        value,
        extra;

    while (counter < length) {
      value = string.charCodeAt(counter++);

      if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
        // high surrogate, and there is a next character
        extra = string.charCodeAt(counter++);

        if ((extra & 0xFC00) == 0xDC00) {
          // low surrogate
          output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
        } else {
          // unmatched surrogate; only append this code unit, in case the next
          // code unit is the high surrogate of a surrogate pair
          output.push(value);
          counter--;
        }
      } else {
        output.push(value);
      }
    }

    return output;
  }
  /**
   * Creates a string based on an array of numeric code points.
   * @see `punycode.ucs2.decode`
   * @memberOf punycode.ucs2
   * @name encode
   * @param {Array} codePoints The array of numeric code points.
   * @returns {String} The new Unicode string (UCS-2).
   */


  function ucs2encode(array) {
    return map(array, function (value) {
      var output = '';

      if (value > 0xFFFF) {
        value -= 0x10000;
        output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
        value = 0xDC00 | value & 0x3FF;
      }

      output += stringFromCharCode(value);
      return output;
    }).join('');
  }
  /**
   * Converts a basic code point into a digit/integer.
   * @see `digitToBasic()`
   * @private
   * @param {Number} codePoint The basic numeric code point value.
   * @returns {Number} The numeric value of a basic code point (for use in
   * representing integers) in the range `0` to `base - 1`, or `base` if
   * the code point does not represent a value.
   */


  function basicToDigit(codePoint) {
    if (codePoint - 48 < 10) {
      return codePoint - 22;
    }

    if (codePoint - 65 < 26) {
      return codePoint - 65;
    }

    if (codePoint - 97 < 26) {
      return codePoint - 97;
    }

    return base;
  }
  /**
   * Converts a digit/integer into a basic code point.
   * @see `basicToDigit()`
   * @private
   * @param {Number} digit The numeric value of a basic code point.
   * @returns {Number} The basic code point whose value (when used for
   * representing integers) is `digit`, which needs to be in the range
   * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
   * used; else, the lowercase form is used. The behavior is undefined
   * if `flag` is non-zero and `digit` has no uppercase form.
   */


  function digitToBasic(digit, flag) {
    //  0..25 map to ASCII a..z or A..Z
    // 26..35 map to ASCII 0..9
    return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
  }
  /**
   * Bias adaptation function as per section 3.4 of RFC 3492.
   * https://tools.ietf.org/html/rfc3492#section-3.4
   * @private
   */


  function adapt(delta, numPoints, firstTime) {
    var k = 0;
    delta = firstTime ? floor(delta / damp) : delta >> 1;
    delta += floor(delta / numPoints);

    for (;
    /* no initialization */
    delta > baseMinusTMin * tMax >> 1; k += base) {
      delta = floor(delta / baseMinusTMin);
    }

    return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
  }
  /**
   * Converts a Punycode string of ASCII-only symbols to a string of Unicode
   * symbols.
   * @memberOf punycode
   * @param {String} input The Punycode string of ASCII-only symbols.
   * @returns {String} The resulting string of Unicode symbols.
   */


  function decode(input) {
    // Don't use UCS-2
    var output = [],
        inputLength = input.length,
        out,
        i = 0,
        n = initialN,
        bias = initialBias,
        basic,
        j,
        index,
        oldi,
        w,
        k,
        digit,
        t,

    /** Cached calculation results */
    baseMinusT; // Handle the basic code points: let `basic` be the number of input code
    // points before the last delimiter, or `0` if there is none, then copy
    // the first basic code points to the output.

    basic = input.lastIndexOf(delimiter);

    if (basic < 0) {
      basic = 0;
    }

    for (j = 0; j < basic; ++j) {
      // if it's not a basic code point
      if (input.charCodeAt(j) >= 0x80) {
        error('not-basic');
      }

      output.push(input.charCodeAt(j));
    } // Main decoding loop: start just after the last delimiter if any basic code
    // points were copied; start at the beginning otherwise.


    for (index = basic > 0 ? basic + 1 : 0; index < inputLength;)
    /* no final expression */
    {
      // `index` is the index of the next character to be consumed.
      // Decode a generalized variable-length integer into `delta`,
      // which gets added to `i`. The overflow checking is easier
      // if we increase `i` as we go, then subtract off its starting
      // value at the end to obtain `delta`.
      for (oldi = i, w = 1, k = base;;
      /* no condition */
      k += base) {
        if (index >= inputLength) {
          error('invalid-input');
        }

        digit = basicToDigit(input.charCodeAt(index++));

        if (digit >= base || digit > floor((maxInt - i) / w)) {
          error('overflow');
        }

        i += digit * w;
        t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

        if (digit < t) {
          break;
        }

        baseMinusT = base - t;

        if (w > floor(maxInt / baseMinusT)) {
          error('overflow');
        }

        w *= baseMinusT;
      }

      out = output.length + 1;
      bias = adapt(i - oldi, out, oldi == 0); // `i` was supposed to wrap around from `out` to `0`,
      // incrementing `n` each time, so we'll fix that now:

      if (floor(i / out) > maxInt - n) {
        error('overflow');
      }

      n += floor(i / out);
      i %= out; // Insert `n` at position `i` of the output

      output.splice(i++, 0, n);
    }

    return ucs2encode(output);
  }
  /**
   * Converts a string of Unicode symbols (e.g. a domain name label) to a
   * Punycode string of ASCII-only symbols.
   * @memberOf punycode
   * @param {String} input The string of Unicode symbols.
   * @returns {String} The resulting Punycode string of ASCII-only symbols.
   */


  function encode(input) {
    var n,
        delta,
        handledCPCount,
        basicLength,
        bias,
        j,
        m,
        q,
        k,
        t,
        currentValue,
        output = [],

    /** `inputLength` will hold the number of code points in `input`. */
    inputLength,

    /** Cached calculation results */
    handledCPCountPlusOne,
        baseMinusT,
        qMinusT; // Convert the input in UCS-2 to Unicode

    input = ucs2decode(input); // Cache the length

    inputLength = input.length; // Initialize the state

    n = initialN;
    delta = 0;
    bias = initialBias; // Handle the basic code points

    for (j = 0; j < inputLength; ++j) {
      currentValue = input[j];

      if (currentValue < 0x80) {
        output.push(stringFromCharCode(currentValue));
      }
    }

    handledCPCount = basicLength = output.length; // `handledCPCount` is the number of code points that have been handled;
    // `basicLength` is the number of basic code points.
    // Finish the basic string - if it is not empty - with a delimiter

    if (basicLength) {
      output.push(delimiter);
    } // Main encoding loop:


    while (handledCPCount < inputLength) {
      // All non-basic code points < n have been handled already. Find the next
      // larger one:
      for (m = maxInt, j = 0; j < inputLength; ++j) {
        currentValue = input[j];

        if (currentValue >= n && currentValue < m) {
          m = currentValue;
        }
      } // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
      // but guard against overflow


      handledCPCountPlusOne = handledCPCount + 1;

      if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
        error('overflow');
      }

      delta += (m - n) * handledCPCountPlusOne;
      n = m;

      for (j = 0; j < inputLength; ++j) {
        currentValue = input[j];

        if (currentValue < n && ++delta > maxInt) {
          error('overflow');
        }

        if (currentValue == n) {
          // Represent delta as a generalized variable-length integer
          for (q = delta, k = base;;
          /* no condition */
          k += base) {
            t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;

            if (q < t) {
              break;
            }

            qMinusT = q - t;
            baseMinusT = base - t;
            output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
            q = floor(qMinusT / baseMinusT);
          }

          output.push(stringFromCharCode(digitToBasic(q, 0)));
          bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
          delta = 0;
          ++handledCPCount;
        }
      }

      ++delta;
      ++n;
    }

    return output.join('');
  }
  /**
   * Converts a Punycode string representing a domain name or an email address
   * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
   * it doesn't matter if you call it on a string that has already been
   * converted to Unicode.
   * @memberOf punycode
   * @param {String} input The Punycoded domain name or email address to
   * convert to Unicode.
   * @returns {String} The Unicode representation of the given Punycode
   * string.
   */


  function toUnicode(input) {
    return mapDomain(input, function (string) {
      return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
    });
  }
  /**
   * Converts a Unicode string representing a domain name or an email address to
   * Punycode. Only the non-ASCII parts of the domain name will be converted,
   * i.e. it doesn't matter if you call it with a domain that's already in
   * ASCII.
   * @memberOf punycode
   * @param {String} input The domain name or email address to convert, as a
   * Unicode string.
   * @returns {String} The Punycode representation of the given domain name or
   * email address.
   */


  function toASCII(input) {
    return mapDomain(input, function (string) {
      return regexNonASCII.test(string) ? 'xn--' + encode(string) : string;
    });
  }
  /*--------------------------------------------------------------------------*/

  /** Define the public API */


  punycode = {
    /**
     * A string representing the current Punycode.js version number.
     * @memberOf punycode
     * @type String
     */
    'version': '1.4.1',

    /**
     * An object of methods to convert from JavaScript's internal character
     * representation (UCS-2) to Unicode code points, and back.
     * @see <https://mathiasbynens.be/notes/javascript-encoding>
     * @memberOf punycode
     * @type Object
     */
    'ucs2': {
      'decode': ucs2decode,
      'encode': ucs2encode
    },
    'decode': decode,
    'encode': encode,
    'toASCII': toASCII,
    'toUnicode': toUnicode
  };
  /** Expose `punycode` */
  // Some AMD build optimizers, like r.js, check for specific condition patterns
  // like the following:

  if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return punycode;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else {}
})(this);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module), __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/object-assign/index.js":
/*!*********************************************!*\
  !*** ./node_modules/object-assign/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* eslint-disable no-unused-vars */

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
  if (val === null || val === undefined) {
    throw new TypeError('Object.assign cannot be called with null or undefined');
  }

  return Object(val);
}

function shouldUseNative() {
  try {
    if (!Object.assign) {
      return false;
    } // Detect buggy property enumeration order in older V8 versions.
    // https://bugs.chromium.org/p/v8/issues/detail?id=4118


    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers

    test1[5] = 'de';

    if (Object.getOwnPropertyNames(test1)[0] === '5') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test2 = {};

    for (var i = 0; i < 10; i++) {
      test2['_' + String.fromCharCode(i)] = i;
    }

    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
      return test2[n];
    });

    if (order2.join('') !== '0123456789') {
      return false;
    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


    var test3 = {};
    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
      test3[letter] = letter;
    });

    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
      return false;
    }

    return true;
  } catch (err) {
    // We don't expect any of the above to throw, but better to be safe.
    return false;
  }
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
  var from;
  var to = toObject(target);
  var symbols;

  for (var s = 1; s < arguments.length; s++) {
    from = Object(arguments[s]);

    for (var key in from) {
      if (hasOwnProperty.call(from, key)) {
        to[key] = from[key];
      }
    }

    if (getOwnPropertySymbols) {
      symbols = getOwnPropertySymbols(from);

      for (var i = 0; i < symbols.length; i++) {
        if (propIsEnumerable.call(from, symbols[i])) {
          to[symbols[i]] = from[symbols[i]];
        }
      }
    }
  }

  return to;
};

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};

/***/ }),

/***/ "./node_modules/prop-types/checkPropTypes.js":
/*!***************************************************!*\
  !*** ./node_modules/prop-types/checkPropTypes.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var printWarning = function () {};

if (true) {
  var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ "./node_modules/prop-types/lib/ReactPropTypesSecret.js");

  var loggedTypeFailures = {};

  printWarning = function (text) {
    var message = 'Warning: ' + text;

    if (typeof console !== 'undefined') {
      console.error(message);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}
/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */


function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (true) {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error; // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.

        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.');
            err.name = 'Invariant Violation';
            throw err;
          }

          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }

        if (error && !(error instanceof Error)) {
          printWarning((componentName || 'React class') + ': type specification of ' + location + ' `' + typeSpecName + '` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a ' + typeof error + '. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).');
        }

        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;
          var stack = getStack ? getStack() : '';
          printWarning('Failed ' + location + ' type: ' + error.message + (stack != null ? stack : ''));
        }
      }
    }
  }
}

module.exports = checkPropTypes;

/***/ }),

/***/ "./node_modules/prop-types/factoryWithTypeCheckers.js":
/*!************************************************************!*\
  !*** ./node_modules/prop-types/factoryWithTypeCheckers.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var assign = __webpack_require__(/*! object-assign */ "./node_modules/object-assign/index.js");

var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ "./node_modules/prop-types/lib/ReactPropTypesSecret.js");

var checkPropTypes = __webpack_require__(/*! ./checkPropTypes */ "./node_modules/prop-types/checkPropTypes.js");

var printWarning = function () {};

if (true) {
  printWarning = function (text) {
    var message = 'Warning: ' + text;

    if (typeof console !== 'undefined') {
      console.error(message);
    }

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

module.exports = function (isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */

  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);

    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }
  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */


  var ANONYMOUS = '<<anonymous>>'; // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.

  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),
    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker
  };
  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */

  /*eslint-disable no-self-compare*/

  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */


  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  } // Make `instanceof Error` still work for returned errors.


  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (true) {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }

    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error('Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
          err.name = 'Invariant Violation';
          throw err;
        } else if ( true && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;

          if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
          manualPropTypeWarningCount < 3) {
            printWarning('You are manually calling a React.PropTypes validation ' + 'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.');
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }

      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }

          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }

        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);
    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);

      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }

      var propValue = props[propName];

      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }

      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);

        if (error instanceof Error) {
          return error;
        }
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];

      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
       true ? printWarning('Invalid argument supplied to oneOf, expected an instance of array.') : undefined;
      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];

      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues);
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }

    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }

      var propValue = props[propName];
      var propType = getPropType(propValue);

      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }

      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

          if (error instanceof Error) {
            return error;
          }
        }
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
       true ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : undefined;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];

      if (typeof checker !== 'function') {
        printWarning('Invalid argument supplied to oneOfType. Expected an array of check functions, but ' + 'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.');
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];

        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }

    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);

      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }

      for (var key in shapeTypes) {
        var checker = shapeTypes[key];

        if (!checker) {
          continue;
        }

        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

        if (error) {
          return error;
        }
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);

      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      } // We need to check all keys in case some are required but missing from
      // props.


      var allKeys = assign({}, props[propName], shapeTypes);

      for (var key in allKeys) {
        var checker = shapeTypes[key];

        if (!checker) {
          return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
        }

        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);

        if (error) {
          return error;
        }
      }

      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;

      case 'boolean':
        return !propValue;

      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }

        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);

        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;

          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;

              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;

      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    } // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'


    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    } // Fallback for non-spec compliant Symbols which are polyfilled.


    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  } // Equivalent of `typeof` but with special handling for array and regexp.


  function getPropType(propValue) {
    var propType = typeof propValue;

    if (Array.isArray(propValue)) {
      return 'array';
    }

    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }

    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }

    return propType;
  } // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.


  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }

    var propType = getPropType(propValue);

    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }

    return propType;
  } // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"


  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);

    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;

      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;

      default:
        return type;
    }
  } // Returns class name of the object, if any.


  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }

    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.PropTypes = ReactPropTypes;
  return ReactPropTypes;
};

/***/ }),

/***/ "./node_modules/prop-types/index.js":
/*!******************************************!*\
  !*** ./node_modules/prop-types/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
if (true) {
  var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element') || 0xeac7;

  var isValidElement = function (object) {
    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
  }; // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod


  var throwOnDirectAccess = true;
  module.exports = __webpack_require__(/*! ./factoryWithTypeCheckers */ "./node_modules/prop-types/factoryWithTypeCheckers.js")(isValidElement, throwOnDirectAccess);
} else {}

/***/ }),

/***/ "./node_modules/prop-types/lib/ReactPropTypesSecret.js":
/*!*************************************************************!*\
  !*** ./node_modules/prop-types/lib/ReactPropTypesSecret.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';
module.exports = ReactPropTypesSecret;

/***/ }),

/***/ "./node_modules/querystring-es3/decode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/decode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
 // If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function (qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);
  var maxKeys = 1000;

  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length; // maxKeys <= 0 means that we should not limit keys count

  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr,
        vstr,
        k,
        v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

/***/ }),

/***/ "./node_modules/querystring-es3/encode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/encode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


var stringifyPrimitive = function (v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function (obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';

  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function (k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;

      if (isArray(obj[k])) {
        return map(obj[k], function (v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);
  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq + encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map(xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];

  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }

  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }

  return res;
};

/***/ }),

/***/ "./node_modules/querystring-es3/index.js":
/*!***********************************************!*\
  !*** ./node_modules/querystring-es3/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(/*! ./decode */ "./node_modules/querystring-es3/decode.js");
exports.encode = exports.stringify = __webpack_require__(/*! ./encode */ "./node_modules/querystring-es3/encode.js");

/***/ }),

/***/ "./node_modules/querystringify/index.js":
/*!**********************************************!*\
  !*** ./node_modules/querystringify/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var has = Object.prototype.hasOwnProperty,
    undef;
/**
 * Decode a URI encoded string.
 *
 * @param {String} input The URI encoded string.
 * @returns {String|Null} The decoded string.
 * @api private
 */

function decode(input) {
  try {
    return decodeURIComponent(input.replace(/\+/g, ' '));
  } catch (e) {
    return null;
  }
}
/**
 * Attempts to encode a given input.
 *
 * @param {String} input The string that needs to be encoded.
 * @returns {String|Null} The encoded string.
 * @api private
 */


function encode(input) {
  try {
    return encodeURIComponent(input);
  } catch (e) {
    return null;
  }
}
/**
 * Simple query string parser.
 *
 * @param {String} query The query string that needs to be parsed.
 * @returns {Object}
 * @api public
 */


function querystring(query) {
  var parser = /([^=?&]+)=?([^&]*)/g,
      result = {},
      part;

  while (part = parser.exec(query)) {
    var key = decode(part[1]),
        value = decode(part[2]); //
    // Prevent overriding of existing properties. This ensures that build-in
    // methods like `toString` or __proto__ are not overriden by malicious
    // querystrings.
    //
    // In the case if failed decoding, we want to omit the key/value pairs
    // from the result.
    //

    if (key === null || value === null || key in result) continue;
    result[key] = value;
  }

  return result;
}
/**
 * Transform a query string to an object.
 *
 * @param {Object} obj Object that should be transformed.
 * @param {String} prefix Optional prefix.
 * @returns {String}
 * @api public
 */


function querystringify(obj, prefix) {
  prefix = prefix || '';
  var pairs = [],
      value,
      key; //
  // Optionally prefix with a '?' if needed
  //

  if ('string' !== typeof prefix) prefix = '?';

  for (key in obj) {
    if (has.call(obj, key)) {
      value = obj[key]; //
      // Edge cases where we actually want to encode the value to an empty
      // string instead of the stringified value.
      //

      if (!value && (value === null || value === undef || isNaN(value))) {
        value = '';
      }

      key = encodeURIComponent(key);
      value = encodeURIComponent(value); //
      // If we failed to encode the strings, we should bail out as we don't
      // want to add invalid strings to the query.
      //

      if (key === null || value === null) continue;
      pairs.push(key + '=' + value);
    }
  }

  return pairs.length ? prefix + pairs.join('&') : '';
} //
// Expose the module.
//


exports.stringify = querystringify;
exports.parse = querystring;

/***/ }),

/***/ "./node_modules/react-dev-utils/formatWebpackMessages.js":
/*!***************************************************************!*\
  !*** ./node_modules/react-dev-utils/formatWebpackMessages.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


var _slicedToArray = __webpack_require__(/*! ./node_modules/@babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/slicedToArray.js");

const chalk = __webpack_require__(/*! chalk */ "./node_modules/chalk/index.js");

const friendlySyntaxErrorLabel = 'Syntax error:';

function isLikelyASyntaxError(message) {
  return message.indexOf(friendlySyntaxErrorLabel) !== -1;
} // Cleans up webpack error messages.


function formatMessage(message) {
  let lines = message.split('\n'); // Strip Webpack-added headers off errors/warnings
  // https://github.com/webpack/webpack/blob/master/lib/ModuleError.js

  lines = lines.filter(line => !/Module [A-z ]+\(from/.test(line)); // Transform parsing error into syntax error
  // TODO: move this to our ESLint formatter?

  lines = lines.map(line => {
    const parsingError = /Line (\d+):(?:(\d+):)?\s*Parsing error: (.+)$/.exec(line);

    if (!parsingError) {
      return line;
    }

    const _parsingError = _slicedToArray(parsingError, 4),
          errorLine = _parsingError[1],
          errorColumn = _parsingError[2],
          errorMessage = _parsingError[3];

    return "".concat(friendlySyntaxErrorLabel, " ").concat(errorMessage, " (").concat(errorLine, ":").concat(errorColumn, ")");
  });
  message = lines.join('\n'); // Smoosh syntax errors (commonly found in CSS)

  message = message.replace(/SyntaxError\s+\((\d+):(\d+)\)\s*(.+?)\n/g, "".concat(friendlySyntaxErrorLabel, " $3 ($1:$2)\n")); // Remove columns from ESLint formatter output (we added these for more
  // accurate syntax errors)

  message = message.replace(/Line (\d+):\d+:/g, 'Line $1:'); // Clean up export errors

  message = message.replace(/^.*export '(.+?)' was not found in '(.+?)'.*$/gm, "Attempted import error: '$1' is not exported from '$2'.");
  message = message.replace(/^.*export 'default' \(imported as '(.+?)'\) was not found in '(.+?)'.*$/gm, "Attempted import error: '$2' does not contain a default export (imported as '$1').");
  message = message.replace(/^.*export '(.+?)' \(imported as '(.+?)'\) was not found in '(.+?)'.*$/gm, "Attempted import error: '$1' is not exported from '$3' (imported as '$2').");
  lines = message.split('\n'); // Remove leading newline

  if (lines.length > 2 && lines[1].trim() === '') {
    lines.splice(1, 1);
  } // Clean up file name


  lines[0] = lines[0].replace(/^(.*) \d+:\d+-\d+$/, '$1'); // Cleans up verbose "module not found" messages for files and packages.

  if (lines[1] && lines[1].indexOf('Module not found: ') === 0) {
    lines = [lines[0], lines[1].replace('Error: ', '').replace('Module not found: Cannot find file:', 'Cannot find file:')];
  } // Add helpful message for users trying to use Sass for the first time


  if (lines[1] && lines[1].match(/Cannot find module.+node-sass/)) {
    lines[1] = 'To import Sass files, you first need to install node-sass.\n';
    lines[1] += 'Run `npm install node-sass` or `yarn add node-sass` inside your workspace.';
  }

  lines[0] = chalk.inverse(lines[0]);
  message = lines.join('\n'); // Internal stacks are generally useless so we strip them... with the
  // exception of stacks containing `webpack:` because they're normally
  // from user code generated by Webpack. For more information see
  // https://github.com/facebook/create-react-app/pull/1050

  message = message.replace(/^\s*at\s((?!webpack:).)*:\d+:\d+[\s)]*(\n|$)/gm, ''); // at ... ...:x:y

  message = message.replace(/^\s*at\s<anonymous>(\n|$)/gm, ''); // at <anonymous>

  lines = message.split('\n'); // Remove duplicated newlines

  lines = lines.filter((line, index, arr) => index === 0 || line.trim() !== '' || line.trim() !== arr[index - 1].trim()); // Reassemble the message

  message = lines.join('\n');
  return message.trim();
}

function formatWebpackMessages(json) {
  const formattedErrors = json.errors.map(function (message) {
    return formatMessage(message, true);
  });
  const formattedWarnings = json.warnings.map(function (message) {
    return formatMessage(message, false);
  });
  const result = {
    errors: formattedErrors,
    warnings: formattedWarnings
  };

  if (result.errors.some(isLikelyASyntaxError)) {
    // If there are any syntax errors, show just them.
    result.errors = result.errors.filter(isLikelyASyntaxError);
  }

  return result;
}

module.exports = formatWebpackMessages;

/***/ }),

/***/ "./node_modules/react-dev-utils/launchEditorEndpoint.js":
/*!**************************************************************!*\
  !*** ./node_modules/react-dev-utils/launchEditorEndpoint.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
 // TODO: we might want to make this injectable to support DEV-time non-root URLs.

module.exports = '/__open-stack-frame-in-editor';

/***/ }),

/***/ "./node_modules/react-dev-utils/node_modules/ansi-regex/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/react-dev-utils/node_modules/ansi-regex/index.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = options => {
  options = Object.assign({
    onlyFirst: false
  }, options);
  const pattern = ['[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)', '(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))'].join('|');
  return new RegExp(pattern, options.onlyFirst ? undefined : 'g');
};

/***/ }),

/***/ "./node_modules/react-dev-utils/node_modules/strip-ansi/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/react-dev-utils/node_modules/strip-ansi/index.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


const ansiRegex = __webpack_require__(/*! ansi-regex */ "./node_modules/react-dev-utils/node_modules/ansi-regex/index.js");

const stripAnsi = string => typeof string === 'string' ? string.replace(ansiRegex(), '') : string;

module.exports = stripAnsi;
module.exports.default = stripAnsi;

/***/ }),

/***/ "./node_modules/react-dev-utils/webpackHotDevClient.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-dev-utils/webpackHotDevClient.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2015-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
 // This alternative WebpackDevServer combines the functionality of:
// https://github.com/webpack/webpack-dev-server/blob/webpack-1/client/index.js
// https://github.com/webpack/webpack/blob/webpack-1/hot/dev-server.js
// It only supports their simplest configuration (hot updates on same server).
// It makes some opinionated choices on top, like adding a syntax error overlay
// that looks similar to our console output. The error overlay is inspired by:
// https://github.com/glenjamin/webpack-hot-middleware

var SockJS = __webpack_require__(/*! sockjs-client */ "./node_modules/sockjs-client/lib/entry.js");

var stripAnsi = __webpack_require__(/*! strip-ansi */ "./node_modules/react-dev-utils/node_modules/strip-ansi/index.js");

var url = __webpack_require__(/*! url */ "./node_modules/url/url.js");

var launchEditorEndpoint = __webpack_require__(/*! ./launchEditorEndpoint */ "./node_modules/react-dev-utils/launchEditorEndpoint.js");

var formatWebpackMessages = __webpack_require__(/*! ./formatWebpackMessages */ "./node_modules/react-dev-utils/formatWebpackMessages.js");

var ErrorOverlay = __webpack_require__(/*! react-error-overlay */ "./node_modules/react-error-overlay/lib/index.js");

ErrorOverlay.setEditorHandler(function editorHandler(errorLocation) {
  // Keep this sync with errorOverlayMiddleware.js
  fetch(launchEditorEndpoint + '?fileName=' + window.encodeURIComponent(errorLocation.fileName) + '&lineNumber=' + window.encodeURIComponent(errorLocation.lineNumber || 1) + '&colNumber=' + window.encodeURIComponent(errorLocation.colNumber || 1));
}); // We need to keep track of if there has been a runtime error.
// Essentially, we cannot guarantee application state was not corrupted by the
// runtime error. To prevent confusing behavior, we forcibly reload the entire
// application. This is handled below when we are notified of a compile (code
// change).
// See https://github.com/facebook/create-react-app/issues/3096

var hadRuntimeError = false;
ErrorOverlay.startReportingRuntimeErrors({
  onError: function () {
    hadRuntimeError = true;
  },
  filename: '/static/js/bundle.js'
});

if ( true && typeof module.hot.dispose === 'function') {
  module.hot.dispose(function () {
    // TODO: why do we need this?
    ErrorOverlay.stopReportingRuntimeErrors();
  });
} // Connect to WebpackDevServer via a socket.


var connection = new SockJS(url.format({
  protocol: window.location.protocol,
  hostname: window.location.hostname,
  port: window.location.port,
  // Hardcoded in WebpackDevServer
  pathname: '/sockjs-node'
})); // Unlike WebpackDevServer client, we won't try to reconnect
// to avoid spamming the console. Disconnect usually happens
// when developer stops the server.

connection.onclose = function () {
  if (typeof console !== 'undefined' && typeof console.info === 'function') {
    console.info('The development server has disconnected.\nRefresh the page if necessary.');
  }
}; // Remember some state related to hot module replacement.


var isFirstCompilation = true;
var mostRecentCompilationHash = null;
var hasCompileErrors = false;

function clearOutdatedErrors() {
  // Clean up outdated compile errors, if any.
  if (typeof console !== 'undefined' && typeof console.clear === 'function') {
    if (hasCompileErrors) {
      console.clear();
    }
  }
} // Successful compilation.


function handleSuccess() {
  clearOutdatedErrors();
  var isHotUpdate = !isFirstCompilation;
  isFirstCompilation = false;
  hasCompileErrors = false; // Attempt to apply hot updates or reload.

  if (isHotUpdate) {
    tryApplyUpdates(function onHotUpdateSuccess() {
      // Only dismiss it when we're sure it's a hot update.
      // Otherwise it would flicker right before the reload.
      tryDismissErrorOverlay();
    });
  }
} // Compilation with warnings (e.g. ESLint).


function handleWarnings(warnings) {
  clearOutdatedErrors();
  var isHotUpdate = !isFirstCompilation;
  isFirstCompilation = false;
  hasCompileErrors = false;

  function printWarnings() {
    // Print warnings to the console.
    var formatted = formatWebpackMessages({
      warnings: warnings,
      errors: []
    });

    if (typeof console !== 'undefined' && typeof console.warn === 'function') {
      for (var i = 0; i < formatted.warnings.length; i++) {
        if (i === 5) {
          console.warn('There were more warnings in other files.\n' + 'You can find a complete log in the terminal.');
          break;
        }

        console.warn(stripAnsi(formatted.warnings[i]));
      }
    }
  }

  printWarnings(); // Attempt to apply hot updates or reload.

  if (isHotUpdate) {
    tryApplyUpdates(function onSuccessfulHotUpdate() {
      // Only dismiss it when we're sure it's a hot update.
      // Otherwise it would flicker right before the reload.
      tryDismissErrorOverlay();
    });
  }
} // Compilation with errors (e.g. syntax error or missing modules).


function handleErrors(errors) {
  clearOutdatedErrors();
  isFirstCompilation = false;
  hasCompileErrors = true; // "Massage" webpack messages.

  var formatted = formatWebpackMessages({
    errors: errors,
    warnings: []
  }); // Only show the first error.

  ErrorOverlay.reportBuildError(formatted.errors[0]); // Also log them to the console.

  if (typeof console !== 'undefined' && typeof console.error === 'function') {
    for (var i = 0; i < formatted.errors.length; i++) {
      console.error(stripAnsi(formatted.errors[i]));
    }
  } // Do not attempt to reload now.
  // We will reload on next success instead.

}

function tryDismissErrorOverlay() {
  if (!hasCompileErrors) {
    ErrorOverlay.dismissBuildError();
  }
} // There is a newer version of the code available.


function handleAvailableHash(hash) {
  // Update last known compilation hash.
  mostRecentCompilationHash = hash;
} // Handle messages from the server.


connection.onmessage = function (e) {
  var message = JSON.parse(e.data);

  switch (message.type) {
    case 'hash':
      handleAvailableHash(message.data);
      break;

    case 'still-ok':
    case 'ok':
      handleSuccess();
      break;

    case 'content-changed':
      // Triggered when a file from `contentBase` changed.
      window.location.reload();
      break;

    case 'warnings':
      handleWarnings(message.data);
      break;

    case 'errors':
      handleErrors(message.data);
      break;

    default: // Do nothing.

  }
}; // Is there a newer version of this code available?


function isUpdateAvailable() {
  /* globals __webpack_hash__ */
  // __webpack_hash__ is the hash of the current compilation.
  // It's a global variable injected by Webpack.
  return mostRecentCompilationHash !== __webpack_require__.h();
} // Webpack disallows updates in other states.


function canApplyUpdates() {
  return module.hot.status() === 'idle';
} // Attempt to update code on the fly, fall back to a hard reload.


function tryApplyUpdates(onHotUpdateSuccess) {
  if (false) {}

  if (!isUpdateAvailable() || !canApplyUpdates()) {
    return;
  }

  function handleApplyUpdates(err, updatedModules) {
    if (err || !updatedModules || hadRuntimeError) {
      window.location.reload();
      return;
    }

    if (typeof onHotUpdateSuccess === 'function') {
      // Maybe we want to do something.
      onHotUpdateSuccess();
    }

    if (isUpdateAvailable()) {
      // While we were updating, there was a new update! Do it again.
      tryApplyUpdates();
    }
  } // https://webpack.github.io/docs/hot-module-replacement.html#check


  var result = module.hot.check(
  /* autoApply */
  true, handleApplyUpdates); // // Webpack 2 returns a Promise instead of invoking a callback

  if (result && result.then) {
    result.then(function (updatedModules) {
      handleApplyUpdates(null, updatedModules);
    }, function (err) {
      handleApplyUpdates(err, null);
    });
  }
}

/***/ }),

/***/ "./node_modules/react-dom/cjs/react-dom.development.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-dom/cjs/react-dom.development.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.8.6
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


if (true) {
  (function () {
    'use strict';

    var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");

    var _assign = __webpack_require__(/*! object-assign */ "./node_modules/object-assign/index.js");

    var checkPropTypes = __webpack_require__(/*! prop-types/checkPropTypes */ "./node_modules/prop-types/checkPropTypes.js");

    var scheduler = __webpack_require__(/*! scheduler */ "./node_modules/scheduler/index.js");

    var tracing = __webpack_require__(/*! scheduler/tracing */ "./node_modules/scheduler/tracing.js");
    /**
     * Use invariant() to assert state which your program assumes to be true.
     *
     * Provide sprintf-style format (only %s is supported) and arguments
     * to provide information about what broke and what you were
     * expecting.
     *
     * The invariant message will be stripped in production, but the invariant
     * will remain to ensure logic does not differ in production.
     */


    var validateFormat = function () {};

    {
      validateFormat = function (format) {
        if (format === undefined) {
          throw new Error('invariant requires an error message argument');
        }
      };
    }

    function invariant(condition, format, a, b, c, d, e, f) {
      validateFormat(format);

      if (!condition) {
        var error = void 0;

        if (format === undefined) {
          error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(format.replace(/%s/g, function () {
            return args[argIndex++];
          }));
          error.name = 'Invariant Violation';
        }

        error.framesToPop = 1; // we don't care about invariant's own frame

        throw error;
      }
    } // Relying on the `invariant()` implementation lets us
    // preserve the format and params in the www builds.


    !React ? invariant(false, 'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.') : void 0;

    var invokeGuardedCallbackImpl = function (name, func, context, a, b, c, d, e, f) {
      var funcArgs = Array.prototype.slice.call(arguments, 3);

      try {
        func.apply(context, funcArgs);
      } catch (error) {
        this.onError(error);
      }
    };

    {
      // In DEV mode, we swap out invokeGuardedCallback for a special version
      // that plays more nicely with the browser's DevTools. The idea is to preserve
      // "Pause on exceptions" behavior. Because React wraps all user-provided
      // functions in invokeGuardedCallback, and the production version of
      // invokeGuardedCallback uses a try-catch, all user exceptions are treated
      // like caught exceptions, and the DevTools won't pause unless the developer
      // takes the extra step of enabling pause on caught exceptions. This is
      // unintuitive, though, because even though React has caught the error, from
      // the developer's perspective, the error is uncaught.
      //
      // To preserve the expected "Pause on exceptions" behavior, we don't use a
      // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
      // DOM node, and call the user-provided callback from inside an event handler
      // for that fake event. If the callback throws, the error is "captured" using
      // a global event handler. But because the error happens in a different
      // event loop context, it does not interrupt the normal program flow.
      // Effectively, this gives us try-catch behavior without actually using
      // try-catch. Neat!
      // Check that the browser supports the APIs we need to implement our special
      // DEV version of invokeGuardedCallback
      if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
        var fakeNode = document.createElement('react');

        var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
          // If document doesn't exist we know for sure we will crash in this method
          // when we call document.createEvent(). However this can cause confusing
          // errors: https://github.com/facebookincubator/create-react-app/issues/3482
          // So we preemptively throw with a better message instead.
          !(typeof document !== 'undefined') ? invariant(false, 'The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.') : void 0;
          var evt = document.createEvent('Event'); // Keeps track of whether the user-provided callback threw an error. We
          // set this to true at the beginning, then set it to false right after
          // calling the function. If the function errors, `didError` will never be
          // set to false. This strategy works even if the browser is flaky and
          // fails to call our global error handler, because it doesn't rely on
          // the error event at all.

          var didError = true; // Keeps track of the value of window.event so that we can reset it
          // during the callback to let user code access window.event in the
          // browsers that support it.

          var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
          // dispatching: https://github.com/facebook/react/issues/13688

          var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event'); // Create an event handler for our fake event. We will synchronously
          // dispatch our fake event using `dispatchEvent`. Inside the handler, we
          // call the user-provided callback.

          var funcArgs = Array.prototype.slice.call(arguments, 3);

          function callCallback() {
            // We immediately remove the callback from event listeners so that
            // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
            // nested call would trigger the fake event handlers of any call higher
            // in the stack.
            fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
            // window.event assignment in both IE <= 10 as they throw an error
            // "Member not found" in strict mode, and in Firefox which does not
            // support window.event.

            if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
              window.event = windowEvent;
            }

            func.apply(context, funcArgs);
            didError = false;
          } // Create a global error event handler. We use this to capture the value
          // that was thrown. It's possible that this error handler will fire more
          // than once; for example, if non-React code also calls `dispatchEvent`
          // and a handler for that event throws. We should be resilient to most of
          // those cases. Even if our error event handler fires more than once, the
          // last error event is always used. If the callback actually does error,
          // we know that the last error event is the correct one, because it's not
          // possible for anything else to have happened in between our callback
          // erroring and the code that follows the `dispatchEvent` call below. If
          // the callback doesn't error, but the error event was fired, we know to
          // ignore it because `didError` will be false, as described above.


          var error = void 0; // Use this to track whether the error event is ever called.

          var didSetError = false;
          var isCrossOriginError = false;

          function handleWindowError(event) {
            error = event.error;
            didSetError = true;

            if (error === null && event.colno === 0 && event.lineno === 0) {
              isCrossOriginError = true;
            }

            if (event.defaultPrevented) {
              // Some other error handler has prevented default.
              // Browsers silence the error report if this happens.
              // We'll remember this to later decide whether to log it or not.
              if (error != null && typeof error === 'object') {
                try {
                  error._suppressLogging = true;
                } catch (inner) {// Ignore.
                }
              }
            }
          } // Create a fake event type.


          var evtType = 'react-' + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

          window.addEventListener('error', handleWindowError);
          fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
          // errors, it will trigger our global error handler.

          evt.initEvent(evtType, false, false);
          fakeNode.dispatchEvent(evt);

          if (windowEventDescriptor) {
            Object.defineProperty(window, 'event', windowEventDescriptor);
          }

          if (didError) {
            if (!didSetError) {
              // The callback errored, but the error event never fired.
              error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
            } else if (isCrossOriginError) {
              error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
            }

            this.onError(error);
          } // Remove our event listeners


          window.removeEventListener('error', handleWindowError);
        };

        invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
      }
    }
    var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl; // Used by Fiber to simulate a try-catch.

    var hasError = false;
    var caughtError = null; // Used by event system to capture/rethrow the first error.

    var hasRethrowError = false;
    var rethrowError = null;
    var reporter = {
      onError: function (error) {
        hasError = true;
        caughtError = error;
      }
    };
    /**
     * Call a function while guarding against errors that happens within it.
     * Returns an error if it throws, otherwise null.
     *
     * In production, this is implemented using a try-catch. The reason we don't
     * use a try-catch directly is so that we can swap out a different
     * implementation in DEV mode.
     *
     * @param {String} name of the guard to use for logging or debugging
     * @param {Function} func The function to invoke
     * @param {*} context The context to use when calling the function
     * @param {...*} args Arguments for function
     */

    function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
      hasError = false;
      caughtError = null;
      invokeGuardedCallbackImpl$1.apply(reporter, arguments);
    }
    /**
     * Same as invokeGuardedCallback, but instead of returning an error, it stores
     * it in a global so it can be rethrown by `rethrowCaughtError` later.
     * TODO: See if caughtError and rethrowError can be unified.
     *
     * @param {String} name of the guard to use for logging or debugging
     * @param {Function} func The function to invoke
     * @param {*} context The context to use when calling the function
     * @param {...*} args Arguments for function
     */


    function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
      invokeGuardedCallback.apply(this, arguments);

      if (hasError) {
        var error = clearCaughtError();

        if (!hasRethrowError) {
          hasRethrowError = true;
          rethrowError = error;
        }
      }
    }
    /**
     * During execution of guarded functions we will capture the first error which
     * we will rethrow to be handled by the top level error handler.
     */


    function rethrowCaughtError() {
      if (hasRethrowError) {
        var error = rethrowError;
        hasRethrowError = false;
        rethrowError = null;
        throw error;
      }
    }

    function hasCaughtError() {
      return hasError;
    }

    function clearCaughtError() {
      if (hasError) {
        var error = caughtError;
        hasError = false;
        caughtError = null;
        return error;
      } else {
        invariant(false, 'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.');
      }
    }
    /**
     * Injectable ordering of event plugins.
     */


    var eventPluginOrder = null;
    /**
     * Injectable mapping from names to event plugin modules.
     */

    var namesToPlugins = {};
    /**
     * Recomputes the plugin list using the injected plugins and plugin ordering.
     *
     * @private
     */

    function recomputePluginOrdering() {
      if (!eventPluginOrder) {
        // Wait until an `eventPluginOrder` is injected.
        return;
      }

      for (var pluginName in namesToPlugins) {
        var pluginModule = namesToPlugins[pluginName];
        var pluginIndex = eventPluginOrder.indexOf(pluginName);
        !(pluginIndex > -1) ? invariant(false, 'EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `%s`.', pluginName) : void 0;

        if (plugins[pluginIndex]) {
          continue;
        }

        !pluginModule.extractEvents ? invariant(false, 'EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `%s` does not.', pluginName) : void 0;
        plugins[pluginIndex] = pluginModule;
        var publishedEvents = pluginModule.eventTypes;

        for (var eventName in publishedEvents) {
          !publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName) ? invariant(false, 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName) : void 0;
        }
      }
    }
    /**
     * Publishes an event so that it can be dispatched by the supplied plugin.
     *
     * @param {object} dispatchConfig Dispatch configuration for the event.
     * @param {object} PluginModule Plugin publishing the event.
     * @return {boolean} True if the event was successfully published.
     * @private
     */


    function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
      !!eventNameDispatchConfigs.hasOwnProperty(eventName) ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same event name, `%s`.', eventName) : void 0;
      eventNameDispatchConfigs[eventName] = dispatchConfig;
      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

      if (phasedRegistrationNames) {
        for (var phaseName in phasedRegistrationNames) {
          if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
            var phasedRegistrationName = phasedRegistrationNames[phaseName];
            publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
          }
        }

        return true;
      } else if (dispatchConfig.registrationName) {
        publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
        return true;
      }

      return false;
    }
    /**
     * Publishes a registration name that is used to identify dispatched events.
     *
     * @param {string} registrationName Registration name to add.
     * @param {object} PluginModule Plugin publishing the event.
     * @private
     */


    function publishRegistrationName(registrationName, pluginModule, eventName) {
      !!registrationNameModules[registrationName] ? invariant(false, 'EventPluginHub: More than one plugin attempted to publish the same registration name, `%s`.', registrationName) : void 0;
      registrationNameModules[registrationName] = pluginModule;
      registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;
      {
        var lowerCasedName = registrationName.toLowerCase();
        possibleRegistrationNames[lowerCasedName] = registrationName;

        if (registrationName === 'onDoubleClick') {
          possibleRegistrationNames.ondblclick = registrationName;
        }
      }
    }
    /**
     * Registers plugins so that they can extract and dispatch events.
     *
     * @see {EventPluginHub}
     */

    /**
     * Ordered list of injected plugins.
     */


    var plugins = [];
    /**
     * Mapping from event name to dispatch config
     */

    var eventNameDispatchConfigs = {};
    /**
     * Mapping from registration name to plugin module
     */

    var registrationNameModules = {};
    /**
     * Mapping from registration name to event name
     */

    var registrationNameDependencies = {};
    /**
     * Mapping from lowercase registration names to the properly cased version,
     * used to warn in the case of missing event handlers. Available
     * only in true.
     * @type {Object}
     */

    var possibleRegistrationNames = {}; // Trust the developer to only use possibleRegistrationNames in true

    /**
     * Injects an ordering of plugins (by plugin name). This allows the ordering
     * to be decoupled from injection of the actual plugins so that ordering is
     * always deterministic regardless of packaging, on-the-fly injection, etc.
     *
     * @param {array} InjectedEventPluginOrder
     * @internal
     * @see {EventPluginHub.injection.injectEventPluginOrder}
     */

    function injectEventPluginOrder(injectedEventPluginOrder) {
      !!eventPluginOrder ? invariant(false, 'EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React.') : void 0; // Clone the ordering so it cannot be dynamically mutated.

      eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
      recomputePluginOrdering();
    }
    /**
     * Injects plugins to be used by `EventPluginHub`. The plugin names must be
     * in the ordering injected by `injectEventPluginOrder`.
     *
     * Plugins can be injected as part of page initialization or on-the-fly.
     *
     * @param {object} injectedNamesToPlugins Map from names to plugin modules.
     * @internal
     * @see {EventPluginHub.injection.injectEventPluginsByName}
     */


    function injectEventPluginsByName(injectedNamesToPlugins) {
      var isOrderingDirty = false;

      for (var pluginName in injectedNamesToPlugins) {
        if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
          continue;
        }

        var pluginModule = injectedNamesToPlugins[pluginName];

        if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
          !!namesToPlugins[pluginName] ? invariant(false, 'EventPluginRegistry: Cannot inject two different event plugins using the same name, `%s`.', pluginName) : void 0;
          namesToPlugins[pluginName] = pluginModule;
          isOrderingDirty = true;
        }
      }

      if (isOrderingDirty) {
        recomputePluginOrdering();
      }
    }
    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */


    var warningWithoutStack = function () {};

    {
      warningWithoutStack = function (condition, format) {
        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        if (format === undefined) {
          throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
        }

        if (args.length > 8) {
          // Check before the condition to catch violations early.
          throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
        }

        if (condition) {
          return;
        }

        if (typeof console !== 'undefined') {
          var argsWithFormat = args.map(function (item) {
            return '' + item;
          });
          argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
          // breaks IE9: https://github.com/facebook/react/issues/13610

          Function.prototype.apply.call(console.error, console, argsWithFormat);
        }

        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          var argIndex = 0;
          var message = 'Warning: ' + format.replace(/%s/g, function () {
            return args[argIndex++];
          });
          throw new Error(message);
        } catch (x) {}
      };
    }
    var warningWithoutStack$1 = warningWithoutStack;
    var getFiberCurrentPropsFromNode = null;
    var getInstanceFromNode = null;
    var getNodeFromInstance = null;

    function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
      getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
      getInstanceFromNode = getInstanceFromNodeImpl;
      getNodeFromInstance = getNodeFromInstanceImpl;
      {
        !(getNodeFromInstance && getInstanceFromNode) ? warningWithoutStack$1(false, 'EventPluginUtils.setComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.') : void 0;
      }
    }

    var validateEventDispatches = void 0;
    {
      validateEventDispatches = function (event) {
        var dispatchListeners = event._dispatchListeners;
        var dispatchInstances = event._dispatchInstances;
        var listenersIsArr = Array.isArray(dispatchListeners);
        var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
        var instancesIsArr = Array.isArray(dispatchInstances);
        var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;
        !(instancesIsArr === listenersIsArr && instancesLen === listenersLen) ? warningWithoutStack$1(false, 'EventPluginUtils: Invalid `event`.') : void 0;
      };
    }
    /**
     * Dispatch the event to the listener.
     * @param {SyntheticEvent} event SyntheticEvent to handle
     * @param {function} listener Application-level callback
     * @param {*} inst Internal component instance
     */

    function executeDispatch(event, listener, inst) {
      var type = event.type || 'unknown-event';
      event.currentTarget = getNodeFromInstance(inst);
      invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
      event.currentTarget = null;
    }
    /**
     * Standard/simple iteration through an event's collected dispatches.
     */


    function executeDispatchesInOrder(event) {
      var dispatchListeners = event._dispatchListeners;
      var dispatchInstances = event._dispatchInstances;
      {
        validateEventDispatches(event);
      }

      if (Array.isArray(dispatchListeners)) {
        for (var i = 0; i < dispatchListeners.length; i++) {
          if (event.isPropagationStopped()) {
            break;
          } // Listeners and Instances are two parallel arrays that are always in sync.


          executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
        }
      } else if (dispatchListeners) {
        executeDispatch(event, dispatchListeners, dispatchInstances);
      }

      event._dispatchListeners = null;
      event._dispatchInstances = null;
    }
    /**
     * @see executeDispatchesInOrderStopAtTrueImpl
     */

    /**
     * Execution of a "direct" dispatch - there must be at most one dispatch
     * accumulated on the event or it is considered an error. It doesn't really make
     * sense for an event with multiple dispatches (bubbled) to keep track of the
     * return values at each dispatch execution, but it does tend to make sense when
     * dealing with "direct" dispatches.
     *
     * @return {*} The return value of executing the single dispatch.
     */

    /**
     * @param {SyntheticEvent} event
     * @return {boolean} True iff number of dispatches accumulated is greater than 0.
     */

    /**
     * Accumulates items that must not be null or undefined into the first one. This
     * is used to conserve memory by avoiding array allocations, and thus sacrifices
     * API cleanness. Since `current` can be null before being passed in and not
     * null after this function, make sure to assign it back to `current`:
     *
     * `a = accumulateInto(a, b);`
     *
     * This API should be sparingly used. Try `accumulate` for something cleaner.
     *
     * @return {*|array<*>} An accumulation of items.
     */


    function accumulateInto(current, next) {
      !(next != null) ? invariant(false, 'accumulateInto(...): Accumulated items must not be null or undefined.') : void 0;

      if (current == null) {
        return next;
      } // Both are not empty. Warning: Never call x.concat(y) when you are not
      // certain that x is an Array (x could be a string with concat method).


      if (Array.isArray(current)) {
        if (Array.isArray(next)) {
          current.push.apply(current, next);
          return current;
        }

        current.push(next);
        return current;
      }

      if (Array.isArray(next)) {
        // A bit too dangerous to mutate `next`.
        return [current].concat(next);
      }

      return [current, next];
    }
    /**
     * @param {array} arr an "accumulation" of items which is either an Array or
     * a single item. Useful when paired with the `accumulate` module. This is a
     * simple utility that allows us to reason about a collection of items, but
     * handling the case when there is exactly one item (and we do not need to
     * allocate an array).
     * @param {function} cb Callback invoked with each element or a collection.
     * @param {?} [scope] Scope used as `this` in a callback.
     */


    function forEachAccumulated(arr, cb, scope) {
      if (Array.isArray(arr)) {
        arr.forEach(cb, scope);
      } else if (arr) {
        cb.call(scope, arr);
      }
    }
    /**
     * Internal queue of events that have accumulated their dispatches and are
     * waiting to have their dispatches executed.
     */


    var eventQueue = null;
    /**
     * Dispatches an event and releases it back into the pool, unless persistent.
     *
     * @param {?object} event Synthetic event to be dispatched.
     * @private
     */

    var executeDispatchesAndRelease = function (event) {
      if (event) {
        executeDispatchesInOrder(event);

        if (!event.isPersistent()) {
          event.constructor.release(event);
        }
      }
    };

    var executeDispatchesAndReleaseTopLevel = function (e) {
      return executeDispatchesAndRelease(e);
    };

    function isInteractive(tag) {
      return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
    }

    function shouldPreventMouseEvent(name, type, props) {
      switch (name) {
        case 'onClick':
        case 'onClickCapture':
        case 'onDoubleClick':
        case 'onDoubleClickCapture':
        case 'onMouseDown':
        case 'onMouseDownCapture':
        case 'onMouseMove':
        case 'onMouseMoveCapture':
        case 'onMouseUp':
        case 'onMouseUpCapture':
          return !!(props.disabled && isInteractive(type));

        default:
          return false;
      }
    }
    /**
     * This is a unified interface for event plugins to be installed and configured.
     *
     * Event plugins can implement the following properties:
     *
     *   `extractEvents` {function(string, DOMEventTarget, string, object): *}
     *     Required. When a top-level event is fired, this method is expected to
     *     extract synthetic events that will in turn be queued and dispatched.
     *
     *   `eventTypes` {object}
     *     Optional, plugins that fire events must publish a mapping of registration
     *     names that are used to register listeners. Values of this mapping must
     *     be objects that contain `registrationName` or `phasedRegistrationNames`.
     *
     *   `executeDispatch` {function(object, function, string)}
     *     Optional, allows plugins to override how an event gets dispatched. By
     *     default, the listener is simply invoked.
     *
     * Each plugin that is injected into `EventsPluginHub` is immediately operable.
     *
     * @public
     */

    /**
     * Methods for injecting dependencies.
     */


    var injection = {
      /**
       * @param {array} InjectedEventPluginOrder
       * @public
       */
      injectEventPluginOrder: injectEventPluginOrder,

      /**
       * @param {object} injectedNamesToPlugins Map from names to plugin modules.
       */
      injectEventPluginsByName: injectEventPluginsByName
    };
    /**
     * @param {object} inst The instance, which is the source of events.
     * @param {string} registrationName Name of listener (e.g. `onClick`).
     * @return {?function} The stored callback.
     */

    function getListener(inst, registrationName) {
      var listener = void 0; // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
      // live here; needs to be moved to a better place soon

      var stateNode = inst.stateNode;

      if (!stateNode) {
        // Work in progress (ex: onload events in incremental mode).
        return null;
      }

      var props = getFiberCurrentPropsFromNode(stateNode);

      if (!props) {
        // Work in progress.
        return null;
      }

      listener = props[registrationName];

      if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
        return null;
      }

      !(!listener || typeof listener === 'function') ? invariant(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener) : void 0;
      return listener;
    }
    /**
     * Allows registered plugins an opportunity to extract events from top-level
     * native browser events.
     *
     * @return {*} An accumulation of synthetic events.
     * @internal
     */


    function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var events = null;

      for (var i = 0; i < plugins.length; i++) {
        // Not every plugin in the ordering may be loaded at runtime.
        var possiblePlugin = plugins[i];

        if (possiblePlugin) {
          var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);

          if (extractedEvents) {
            events = accumulateInto(events, extractedEvents);
          }
        }
      }

      return events;
    }

    function runEventsInBatch(events) {
      if (events !== null) {
        eventQueue = accumulateInto(eventQueue, events);
      } // Set `eventQueue` to null before processing it so that we can tell if more
      // events get enqueued while processing.


      var processingEventQueue = eventQueue;
      eventQueue = null;

      if (!processingEventQueue) {
        return;
      }

      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
      !!eventQueue ? invariant(false, 'processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented.') : void 0; // This would be a good time to rethrow if any of the event handlers threw.

      rethrowCaughtError();
    }

    function runExtractedEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var events = extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
      runEventsInBatch(events);
    }

    var FunctionComponent = 0;
    var ClassComponent = 1;
    var IndeterminateComponent = 2; // Before we know whether it is function or class

    var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

    var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

    var HostComponent = 5;
    var HostText = 6;
    var Fragment = 7;
    var Mode = 8;
    var ContextConsumer = 9;
    var ContextProvider = 10;
    var ForwardRef = 11;
    var Profiler = 12;
    var SuspenseComponent = 13;
    var MemoComponent = 14;
    var SimpleMemoComponent = 15;
    var LazyComponent = 16;
    var IncompleteClassComponent = 17;
    var DehydratedSuspenseComponent = 18;
    var randomKey = Math.random().toString(36).slice(2);
    var internalInstanceKey = '__reactInternalInstance$' + randomKey;
    var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;

    function precacheFiberNode(hostInst, node) {
      node[internalInstanceKey] = hostInst;
    }
    /**
     * Given a DOM node, return the closest ReactDOMComponent or
     * ReactDOMTextComponent instance ancestor.
     */


    function getClosestInstanceFromNode(node) {
      if (node[internalInstanceKey]) {
        return node[internalInstanceKey];
      }

      while (!node[internalInstanceKey]) {
        if (node.parentNode) {
          node = node.parentNode;
        } else {
          // Top of the tree. This node must not be part of a React tree (or is
          // unmounted, potentially).
          return null;
        }
      }

      var inst = node[internalInstanceKey];

      if (inst.tag === HostComponent || inst.tag === HostText) {
        // In Fiber, this will always be the deepest root.
        return inst;
      }

      return null;
    }
    /**
     * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
     * instance, or null if the node was not rendered by this React.
     */


    function getInstanceFromNode$1(node) {
      var inst = node[internalInstanceKey];

      if (inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) {
          return inst;
        } else {
          return null;
        }
      }

      return null;
    }
    /**
     * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
     * DOM node.
     */


    function getNodeFromInstance$1(inst) {
      if (inst.tag === HostComponent || inst.tag === HostText) {
        // In Fiber this, is just the state node right now. We assume it will be
        // a host component or host text.
        return inst.stateNode;
      } // Without this first invariant, passing a non-DOM-component triggers the next
      // invariant for a missing parent, which is super confusing.


      invariant(false, 'getNodeFromInstance: Invalid argument.');
    }

    function getFiberCurrentPropsFromNode$1(node) {
      return node[internalEventHandlersKey] || null;
    }

    function updateFiberProps(node, props) {
      node[internalEventHandlersKey] = props;
    }

    function getParent(inst) {
      do {
        inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
        // That is depending on if we want nested subtrees (layers) to bubble
        // events to their parent. We could also go through parentNode on the
        // host node but that wouldn't work for React Native and doesn't let us
        // do the portal feature.
      } while (inst && inst.tag !== HostComponent);

      if (inst) {
        return inst;
      }

      return null;
    }
    /**
     * Return the lowest common ancestor of A and B, or null if they are in
     * different trees.
     */


    function getLowestCommonAncestor(instA, instB) {
      var depthA = 0;

      for (var tempA = instA; tempA; tempA = getParent(tempA)) {
        depthA++;
      }

      var depthB = 0;

      for (var tempB = instB; tempB; tempB = getParent(tempB)) {
        depthB++;
      } // If A is deeper, crawl up.


      while (depthA - depthB > 0) {
        instA = getParent(instA);
        depthA--;
      } // If B is deeper, crawl up.


      while (depthB - depthA > 0) {
        instB = getParent(instB);
        depthB--;
      } // Walk in lockstep until we find a match.


      var depth = depthA;

      while (depth--) {
        if (instA === instB || instA === instB.alternate) {
          return instA;
        }

        instA = getParent(instA);
        instB = getParent(instB);
      }

      return null;
    }
    /**
     * Return if A is an ancestor of B.
     */

    /**
     * Return the parent instance of the passed-in instance.
     */

    /**
     * Simulates the traversal of a two-phase, capture/bubble event dispatch.
     */


    function traverseTwoPhase(inst, fn, arg) {
      var path = [];

      while (inst) {
        path.push(inst);
        inst = getParent(inst);
      }

      var i = void 0;

      for (i = path.length; i-- > 0;) {
        fn(path[i], 'captured', arg);
      }

      for (i = 0; i < path.length; i++) {
        fn(path[i], 'bubbled', arg);
      }
    }
    /**
     * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
     * should would receive a `mouseEnter` or `mouseLeave` event.
     *
     * Does not invoke the callback on the nearest common ancestor because nothing
     * "entered" or "left" that element.
     */


    function traverseEnterLeave(from, to, fn, argFrom, argTo) {
      var common = from && to ? getLowestCommonAncestor(from, to) : null;
      var pathFrom = [];

      while (true) {
        if (!from) {
          break;
        }

        if (from === common) {
          break;
        }

        var alternate = from.alternate;

        if (alternate !== null && alternate === common) {
          break;
        }

        pathFrom.push(from);
        from = getParent(from);
      }

      var pathTo = [];

      while (true) {
        if (!to) {
          break;
        }

        if (to === common) {
          break;
        }

        var _alternate = to.alternate;

        if (_alternate !== null && _alternate === common) {
          break;
        }

        pathTo.push(to);
        to = getParent(to);
      }

      for (var i = 0; i < pathFrom.length; i++) {
        fn(pathFrom[i], 'bubbled', argFrom);
      }

      for (var _i = pathTo.length; _i-- > 0;) {
        fn(pathTo[_i], 'captured', argTo);
      }
    }
    /**
     * Some event types have a notion of different registration names for different
     * "phases" of propagation. This finds listeners by a given phase.
     */


    function listenerAtPhase(inst, event, propagationPhase) {
      var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
      return getListener(inst, registrationName);
    }
    /**
     * A small set of propagation patterns, each of which will accept a small amount
     * of information, and generate a set of "dispatch ready event objects" - which
     * are sets of events that have already been annotated with a set of dispatched
     * listener functions/ids. The API is designed this way to discourage these
     * propagation strategies from actually executing the dispatches, since we
     * always want to collect the entire set of dispatches before executing even a
     * single one.
     */

    /**
     * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
     * here, allows us to not have to bind or create functions for each event.
     * Mutating the event's members allows us to not have to create a wrapping
     * "dispatch" object that pairs the event with the listener.
     */


    function accumulateDirectionalDispatches(inst, phase, event) {
      {
        !inst ? warningWithoutStack$1(false, 'Dispatching inst must not be null') : void 0;
      }
      var listener = listenerAtPhase(inst, event, phase);

      if (listener) {
        event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
        event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
      }
    }
    /**
     * Collect dispatches (must be entirely collected before dispatching - see unit
     * tests). Lazily allocate the array to conserve memory.  We must loop through
     * each event and perform the traversal for each one. We cannot perform a
     * single traversal for the entire collection of events because each event may
     * have a different target.
     */


    function accumulateTwoPhaseDispatchesSingle(event) {
      if (event && event.dispatchConfig.phasedRegistrationNames) {
        traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
      }
    }
    /**
     * Accumulates without regard to direction, does not look for phased
     * registration names. Same as `accumulateDirectDispatchesSingle` but without
     * requiring that the `dispatchMarker` be the same as the dispatched ID.
     */


    function accumulateDispatches(inst, ignoredDirection, event) {
      if (inst && event && event.dispatchConfig.registrationName) {
        var registrationName = event.dispatchConfig.registrationName;
        var listener = getListener(inst, registrationName);

        if (listener) {
          event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
          event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
        }
      }
    }
    /**
     * Accumulates dispatches on an `SyntheticEvent`, but only for the
     * `dispatchMarker`.
     * @param {SyntheticEvent} event
     */


    function accumulateDirectDispatchesSingle(event) {
      if (event && event.dispatchConfig.registrationName) {
        accumulateDispatches(event._targetInst, null, event);
      }
    }

    function accumulateTwoPhaseDispatches(events) {
      forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
    }

    function accumulateEnterLeaveDispatches(leave, enter, from, to) {
      traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
    }

    function accumulateDirectDispatches(events) {
      forEachAccumulated(events, accumulateDirectDispatchesSingle);
    }

    var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement); // Do not uses the below two methods directly!
    // Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
    // (It is the only module that is allowed to access these methods.)

    function unsafeCastStringToDOMTopLevelType(topLevelType) {
      return topLevelType;
    }

    function unsafeCastDOMTopLevelTypeToString(topLevelType) {
      return topLevelType;
    }
    /**
     * Generate a mapping of standard vendor prefixes using the defined style property and event name.
     *
     * @param {string} styleProp
     * @param {string} eventName
     * @returns {object}
     */


    function makePrefixMap(styleProp, eventName) {
      var prefixes = {};
      prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
      prefixes['Webkit' + styleProp] = 'webkit' + eventName;
      prefixes['Moz' + styleProp] = 'moz' + eventName;
      return prefixes;
    }
    /**
     * A list of event names to a configurable list of vendor prefixes.
     */


    var vendorPrefixes = {
      animationend: makePrefixMap('Animation', 'AnimationEnd'),
      animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
      animationstart: makePrefixMap('Animation', 'AnimationStart'),
      transitionend: makePrefixMap('Transition', 'TransitionEnd')
    };
    /**
     * Event names that have already been detected and prefixed (if applicable).
     */

    var prefixedEventNames = {};
    /**
     * Element to check for prefixes on.
     */

    var style = {};
    /**
     * Bootstrap if a DOM exists.
     */

    if (canUseDOM) {
      style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
      // the un-prefixed "animation" and "transition" properties are defined on the
      // style object but the events that fire will still be prefixed, so we need
      // to check if the un-prefixed events are usable, and if not remove them from the map.

      if (!('AnimationEvent' in window)) {
        delete vendorPrefixes.animationend.animation;
        delete vendorPrefixes.animationiteration.animation;
        delete vendorPrefixes.animationstart.animation;
      } // Same as above


      if (!('TransitionEvent' in window)) {
        delete vendorPrefixes.transitionend.transition;
      }
    }
    /**
     * Attempts to determine the correct vendor prefixed event name.
     *
     * @param {string} eventName
     * @returns {string}
     */


    function getVendorPrefixedEventName(eventName) {
      if (prefixedEventNames[eventName]) {
        return prefixedEventNames[eventName];
      } else if (!vendorPrefixes[eventName]) {
        return eventName;
      }

      var prefixMap = vendorPrefixes[eventName];

      for (var styleProp in prefixMap) {
        if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
          return prefixedEventNames[eventName] = prefixMap[styleProp];
        }
      }

      return eventName;
    }
    /**
     * To identify top level events in ReactDOM, we use constants defined by this
     * module. This is the only module that uses the unsafe* methods to express
     * that the constants actually correspond to the browser event names. This lets
     * us save some bundle size by avoiding a top level type -> event name map.
     * The rest of ReactDOM code should import top level types from this file.
     */


    var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
    var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));
    var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));
    var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));
    var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
    var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
    var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
    var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
    var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
    var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
    var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
    var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
    var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
    var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
    var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
    var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
    var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
    var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
    var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType('auxclick');
    var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
    var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
    var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
    var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
    var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
    var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
    var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
    var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
    var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
    var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
    var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
    var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
    var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
    var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
    var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
    var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
    var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
    var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
    var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
    var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
    var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
    var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
    var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
    var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
    var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
    var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
    var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
    var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
    var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
    var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
    var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
    var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
    var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
    var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
    var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
    var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');
    var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
    var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
    var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
    var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
    var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
    var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
    var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
    var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
    var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
    var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
    var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
    var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
    var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
    var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
    var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
    var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
    var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
    var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
    var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
    var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
    var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
    var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));
    var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
    var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
    var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel'); // List of events that need to be individually attached to media elements.
    // Note that events in this list will *not* be listened to at the top level
    // unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.

    var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];

    function getRawEventName(topLevelType) {
      return unsafeCastDOMTopLevelTypeToString(topLevelType);
    }
    /**
     * These variables store information about text content of a target node,
     * allowing comparison of content before and after a given event.
     *
     * Identify the node where selection currently begins, then observe
     * both its text content and its current position in the DOM. Since the
     * browser may natively replace the target node during composition, we can
     * use its position to find its replacement.
     *
     *
     */


    var root = null;
    var startText = null;
    var fallbackText = null;

    function initialize(nativeEventTarget) {
      root = nativeEventTarget;
      startText = getText();
      return true;
    }

    function reset() {
      root = null;
      startText = null;
      fallbackText = null;
    }

    function getData() {
      if (fallbackText) {
        return fallbackText;
      }

      var start = void 0;
      var startValue = startText;
      var startLength = startValue.length;
      var end = void 0;
      var endValue = getText();
      var endLength = endValue.length;

      for (start = 0; start < startLength; start++) {
        if (startValue[start] !== endValue[start]) {
          break;
        }
      }

      var minEnd = startLength - start;

      for (end = 1; end <= minEnd; end++) {
        if (startValue[startLength - end] !== endValue[endLength - end]) {
          break;
        }
      }

      var sliceTail = end > 1 ? 1 - end : undefined;
      fallbackText = endValue.slice(start, sliceTail);
      return fallbackText;
    }

    function getText() {
      if ('value' in root) {
        return root.value;
      }

      return root.textContent;
    }
    /* eslint valid-typeof: 0 */


    var EVENT_POOL_SIZE = 10;
    /**
     * @interface Event
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */

    var EventInterface = {
      type: null,
      target: null,
      // currentTarget is set when dispatching; no use in copying it here
      currentTarget: function () {
        return null;
      },
      eventPhase: null,
      bubbles: null,
      cancelable: null,
      timeStamp: function (event) {
        return event.timeStamp || Date.now();
      },
      defaultPrevented: null,
      isTrusted: null
    };

    function functionThatReturnsTrue() {
      return true;
    }

    function functionThatReturnsFalse() {
      return false;
    }
    /**
     * Synthetic events are dispatched by event plugins, typically in response to a
     * top-level event delegation handler.
     *
     * These systems should generally use pooling to reduce the frequency of garbage
     * collection. The system should check `isPersistent` to determine whether the
     * event should be released into the pool after being dispatched. Users that
     * need a persisted event should invoke `persist`.
     *
     * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
     * normalizing browser quirks. Subclasses do not necessarily have to implement a
     * DOM interface; custom application-specific events can also subclass this.
     *
     * @param {object} dispatchConfig Configuration used to dispatch this event.
     * @param {*} targetInst Marker identifying the event target.
     * @param {object} nativeEvent Native browser event.
     * @param {DOMEventTarget} nativeEventTarget Target node.
     */


    function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
      {
        // these have a getter/setter for warnings
        delete this.nativeEvent;
        delete this.preventDefault;
        delete this.stopPropagation;
        delete this.isDefaultPrevented;
        delete this.isPropagationStopped;
      }
      this.dispatchConfig = dispatchConfig;
      this._targetInst = targetInst;
      this.nativeEvent = nativeEvent;
      var Interface = this.constructor.Interface;

      for (var propName in Interface) {
        if (!Interface.hasOwnProperty(propName)) {
          continue;
        }

        {
          delete this[propName]; // this has a getter/setter for warnings
        }
        var normalize = Interface[propName];

        if (normalize) {
          this[propName] = normalize(nativeEvent);
        } else {
          if (propName === 'target') {
            this.target = nativeEventTarget;
          } else {
            this[propName] = nativeEvent[propName];
          }
        }
      }

      var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

      if (defaultPrevented) {
        this.isDefaultPrevented = functionThatReturnsTrue;
      } else {
        this.isDefaultPrevented = functionThatReturnsFalse;
      }

      this.isPropagationStopped = functionThatReturnsFalse;
      return this;
    }

    _assign(SyntheticEvent.prototype, {
      preventDefault: function () {
        this.defaultPrevented = true;
        var event = this.nativeEvent;

        if (!event) {
          return;
        }

        if (event.preventDefault) {
          event.preventDefault();
        } else if (typeof event.returnValue !== 'unknown') {
          event.returnValue = false;
        }

        this.isDefaultPrevented = functionThatReturnsTrue;
      },
      stopPropagation: function () {
        var event = this.nativeEvent;

        if (!event) {
          return;
        }

        if (event.stopPropagation) {
          event.stopPropagation();
        } else if (typeof event.cancelBubble !== 'unknown') {
          // The ChangeEventPlugin registers a "propertychange" event for
          // IE. This event does not support bubbling or cancelling, and
          // any references to cancelBubble throw "Member not found".  A
          // typeof check of "unknown" circumvents this issue (and is also
          // IE specific).
          event.cancelBubble = true;
        }

        this.isPropagationStopped = functionThatReturnsTrue;
      },

      /**
       * We release all dispatched `SyntheticEvent`s after each event loop, adding
       * them back into the pool. This allows a way to hold onto a reference that
       * won't be added back into the pool.
       */
      persist: function () {
        this.isPersistent = functionThatReturnsTrue;
      },

      /**
       * Checks if this event should be released back into the pool.
       *
       * @return {boolean} True if this should not be released, false otherwise.
       */
      isPersistent: functionThatReturnsFalse,

      /**
       * `PooledClass` looks for `destructor` on each instance it releases.
       */
      destructor: function () {
        var Interface = this.constructor.Interface;

        for (var propName in Interface) {
          {
            Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
          }
        }

        this.dispatchConfig = null;
        this._targetInst = null;
        this.nativeEvent = null;
        this.isDefaultPrevented = functionThatReturnsFalse;
        this.isPropagationStopped = functionThatReturnsFalse;
        this._dispatchListeners = null;
        this._dispatchInstances = null;
        {
          Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
          Object.defineProperty(this, 'isDefaultPrevented', getPooledWarningPropertyDefinition('isDefaultPrevented', functionThatReturnsFalse));
          Object.defineProperty(this, 'isPropagationStopped', getPooledWarningPropertyDefinition('isPropagationStopped', functionThatReturnsFalse));
          Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', function () {}));
          Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', function () {}));
        }
      }
    });

    SyntheticEvent.Interface = EventInterface;
    /**
     * Helper to reduce boilerplate when creating subclasses.
     */

    SyntheticEvent.extend = function (Interface) {
      var Super = this;

      var E = function () {};

      E.prototype = Super.prototype;
      var prototype = new E();

      function Class() {
        return Super.apply(this, arguments);
      }

      _assign(prototype, Class.prototype);

      Class.prototype = prototype;
      Class.prototype.constructor = Class;
      Class.Interface = _assign({}, Super.Interface, Interface);
      Class.extend = Super.extend;
      addEventPoolingTo(Class);
      return Class;
    };

    addEventPoolingTo(SyntheticEvent);
    /**
     * Helper to nullify syntheticEvent instance properties when destructing
     *
     * @param {String} propName
     * @param {?object} getVal
     * @return {object} defineProperty object
     */

    function getPooledWarningPropertyDefinition(propName, getVal) {
      var isFunction = typeof getVal === 'function';
      return {
        configurable: true,
        set: set,
        get: get
      };

      function set(val) {
        var action = isFunction ? 'setting the method' : 'setting the property';
        warn(action, 'This is effectively a no-op');
        return val;
      }

      function get() {
        var action = isFunction ? 'accessing the method' : 'accessing the property';
        var result = isFunction ? 'This is a no-op function' : 'This is set to null';
        warn(action, result);
        return getVal;
      }

      function warn(action, result) {
        var warningCondition = false;
        !warningCondition ? warningWithoutStack$1(false, "This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result) : void 0;
      }
    }

    function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
      var EventConstructor = this;

      if (EventConstructor.eventPool.length) {
        var instance = EventConstructor.eventPool.pop();
        EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
        return instance;
      }

      return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
    }

    function releasePooledEvent(event) {
      var EventConstructor = this;
      !(event instanceof EventConstructor) ? invariant(false, 'Trying to release an event instance into a pool of a different type.') : void 0;
      event.destructor();

      if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
        EventConstructor.eventPool.push(event);
      }
    }

    function addEventPoolingTo(EventConstructor) {
      EventConstructor.eventPool = [];
      EventConstructor.getPooled = getPooledEvent;
      EventConstructor.release = releasePooledEvent;
    }
    /**
     * @interface Event
     * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
     */


    var SyntheticCompositionEvent = SyntheticEvent.extend({
      data: null
    });
    /**
     * @interface Event
     * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
     *      /#events-inputevents
     */

    var SyntheticInputEvent = SyntheticEvent.extend({
      data: null
    });
    var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

    var START_KEYCODE = 229;
    var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
    var documentMode = null;

    if (canUseDOM && 'documentMode' in document) {
      documentMode = document.documentMode;
    } // Webkit offers a very useful `textInput` event that can be used to
    // directly represent `beforeInput`. The IE `textinput` event is not as
    // useful, so we don't use it.


    var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
    // by the native compositionend event may be incorrect. Japanese ideographic
    // spaces, for instance (\u3000) are not recorded correctly.

    var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
    var SPACEBAR_CODE = 32;
    var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE); // Events and their corresponding property names.

    var eventTypes = {
      beforeInput: {
        phasedRegistrationNames: {
          bubbled: 'onBeforeInput',
          captured: 'onBeforeInputCapture'
        },
        dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
      },
      compositionEnd: {
        phasedRegistrationNames: {
          bubbled: 'onCompositionEnd',
          captured: 'onCompositionEndCapture'
        },
        dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
      },
      compositionStart: {
        phasedRegistrationNames: {
          bubbled: 'onCompositionStart',
          captured: 'onCompositionStartCapture'
        },
        dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
      },
      compositionUpdate: {
        phasedRegistrationNames: {
          bubbled: 'onCompositionUpdate',
          captured: 'onCompositionUpdateCapture'
        },
        dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
      }
    }; // Track whether we've ever handled a keypress on the space key.

    var hasSpaceKeypress = false;
    /**
     * Return whether a native keypress event is assumed to be a command.
     * This is required because Firefox fires `keypress` events for key commands
     * (cut, copy, select-all, etc.) even though no character is inserted.
     */

    function isKeypressCommand(nativeEvent) {
      return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
      !(nativeEvent.ctrlKey && nativeEvent.altKey);
    }
    /**
     * Translate native top level events into event types.
     *
     * @param {string} topLevelType
     * @return {object}
     */


    function getCompositionEventType(topLevelType) {
      switch (topLevelType) {
        case TOP_COMPOSITION_START:
          return eventTypes.compositionStart;

        case TOP_COMPOSITION_END:
          return eventTypes.compositionEnd;

        case TOP_COMPOSITION_UPDATE:
          return eventTypes.compositionUpdate;
      }
    }
    /**
     * Does our fallback best-guess model think this event signifies that
     * composition has begun?
     *
     * @param {string} topLevelType
     * @param {object} nativeEvent
     * @return {boolean}
     */


    function isFallbackCompositionStart(topLevelType, nativeEvent) {
      return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
    }
    /**
     * Does our fallback mode think that this event is the end of composition?
     *
     * @param {string} topLevelType
     * @param {object} nativeEvent
     * @return {boolean}
     */


    function isFallbackCompositionEnd(topLevelType, nativeEvent) {
      switch (topLevelType) {
        case TOP_KEY_UP:
          // Command keys insert or clear IME input.
          return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

        case TOP_KEY_DOWN:
          // Expect IME keyCode on each keydown. If we get any other
          // code we must have exited earlier.
          return nativeEvent.keyCode !== START_KEYCODE;

        case TOP_KEY_PRESS:
        case TOP_MOUSE_DOWN:
        case TOP_BLUR:
          // Events are not possible without cancelling IME.
          return true;

        default:
          return false;
      }
    }
    /**
     * Google Input Tools provides composition data via a CustomEvent,
     * with the `data` property populated in the `detail` object. If this
     * is available on the event object, use it. If not, this is a plain
     * composition event and we have nothing special to extract.
     *
     * @param {object} nativeEvent
     * @return {?string}
     */


    function getDataFromCustomEvent(nativeEvent) {
      var detail = nativeEvent.detail;

      if (typeof detail === 'object' && 'data' in detail) {
        return detail.data;
      }

      return null;
    }
    /**
     * Check if a composition event was triggered by Korean IME.
     * Our fallback mode does not work well with IE's Korean IME,
     * so just use native composition events when Korean IME is used.
     * Although CompositionEvent.locale property is deprecated,
     * it is available in IE, where our fallback mode is enabled.
     *
     * @param {object} nativeEvent
     * @return {boolean}
     */


    function isUsingKoreanIME(nativeEvent) {
      return nativeEvent.locale === 'ko';
    } // Track the current IME composition status, if any.


    var isComposing = false;
    /**
     * @return {?object} A SyntheticCompositionEvent.
     */

    function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var eventType = void 0;
      var fallbackData = void 0;

      if (canUseCompositionEvent) {
        eventType = getCompositionEventType(topLevelType);
      } else if (!isComposing) {
        if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
          eventType = eventTypes.compositionStart;
        }
      } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
        eventType = eventTypes.compositionEnd;
      }

      if (!eventType) {
        return null;
      }

      if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
        // The current composition is stored statically and must not be
        // overwritten while composition continues.
        if (!isComposing && eventType === eventTypes.compositionStart) {
          isComposing = initialize(nativeEventTarget);
        } else if (eventType === eventTypes.compositionEnd) {
          if (isComposing) {
            fallbackData = getData();
          }
        }
      }

      var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

      if (fallbackData) {
        // Inject data generated from fallback path into the synthetic event.
        // This matches the property of native CompositionEventInterface.
        event.data = fallbackData;
      } else {
        var customData = getDataFromCustomEvent(nativeEvent);

        if (customData !== null) {
          event.data = customData;
        }
      }

      accumulateTwoPhaseDispatches(event);
      return event;
    }
    /**
     * @param {TopLevelType} topLevelType Number from `TopLevelType`.
     * @param {object} nativeEvent Native browser event.
     * @return {?string} The string corresponding to this `beforeInput` event.
     */


    function getNativeBeforeInputChars(topLevelType, nativeEvent) {
      switch (topLevelType) {
        case TOP_COMPOSITION_END:
          return getDataFromCustomEvent(nativeEvent);

        case TOP_KEY_PRESS:
          /**
           * If native `textInput` events are available, our goal is to make
           * use of them. However, there is a special case: the spacebar key.
           * In Webkit, preventing default on a spacebar `textInput` event
           * cancels character insertion, but it *also* causes the browser
           * to fall back to its default spacebar behavior of scrolling the
           * page.
           *
           * Tracking at:
           * https://code.google.com/p/chromium/issues/detail?id=355103
           *
           * To avoid this issue, use the keypress event as if no `textInput`
           * event is available.
           */
          var which = nativeEvent.which;

          if (which !== SPACEBAR_CODE) {
            return null;
          }

          hasSpaceKeypress = true;
          return SPACEBAR_CHAR;

        case TOP_TEXT_INPUT:
          // Record the characters to be added to the DOM.
          var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
          // it at the keypress level and bail immediately. Android Chrome
          // doesn't give us keycodes, so we need to ignore it.

          if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
            return null;
          }

          return chars;

        default:
          // For other native event types, do nothing.
          return null;
      }
    }
    /**
     * For browsers that do not provide the `textInput` event, extract the
     * appropriate string to use for SyntheticInputEvent.
     *
     * @param {number} topLevelType Number from `TopLevelEventTypes`.
     * @param {object} nativeEvent Native browser event.
     * @return {?string} The fallback string for this `beforeInput` event.
     */


    function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
      // If we are currently composing (IME) and using a fallback to do so,
      // try to extract the composed characters from the fallback object.
      // If composition event is available, we extract a string only at
      // compositionevent, otherwise extract it at fallback events.
      if (isComposing) {
        if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
          var chars = getData();
          reset();
          isComposing = false;
          return chars;
        }

        return null;
      }

      switch (topLevelType) {
        case TOP_PASTE:
          // If a paste event occurs after a keypress, throw out the input
          // chars. Paste events should not lead to BeforeInput events.
          return null;

        case TOP_KEY_PRESS:
          /**
           * As of v27, Firefox may fire keypress events even when no character
           * will be inserted. A few possibilities:
           *
           * - `which` is `0`. Arrow keys, Esc key, etc.
           *
           * - `which` is the pressed key code, but no char is available.
           *   Ex: 'AltGr + d` in Polish. There is no modified character for
           *   this key combination and no character is inserted into the
           *   document, but FF fires the keypress for char code `100` anyway.
           *   No `input` event will occur.
           *
           * - `which` is the pressed key code, but a command combination is
           *   being used. Ex: `Cmd+C`. No character is inserted, and no
           *   `input` event will occur.
           */
          if (!isKeypressCommand(nativeEvent)) {
            // IE fires the `keypress` event when a user types an emoji via
            // Touch keyboard of Windows.  In such a case, the `char` property
            // holds an emoji character like `\uD83D\uDE0A`.  Because its length
            // is 2, the property `which` does not represent an emoji correctly.
            // In such a case, we directly return the `char` property instead of
            // using `which`.
            if (nativeEvent.char && nativeEvent.char.length > 1) {
              return nativeEvent.char;
            } else if (nativeEvent.which) {
              return String.fromCharCode(nativeEvent.which);
            }
          }

          return null;

        case TOP_COMPOSITION_END:
          return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

        default:
          return null;
      }
    }
    /**
     * Extract a SyntheticInputEvent for `beforeInput`, based on either native
     * `textInput` or fallback behavior.
     *
     * @return {?object} A SyntheticInputEvent.
     */


    function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
      var chars = void 0;

      if (canUseTextInputEvent) {
        chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
      } else {
        chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
      } // If no characters are being inserted, no BeforeInput event should
      // be fired.


      if (!chars) {
        return null;
      }

      var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
      event.data = chars;
      accumulateTwoPhaseDispatches(event);
      return event;
    }
    /**
     * Create an `onBeforeInput` event to match
     * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
     *
     * This event plugin is based on the native `textInput` event
     * available in Chrome, Safari, Opera, and IE. This event fires after
     * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
     *
     * `beforeInput` is spec'd but not implemented in any browsers, and
     * the `input` event does not provide any useful information about what has
     * actually been added, contrary to the spec. Thus, `textInput` is the best
     * available event to identify the characters that have actually been inserted
     * into the target node.
     *
     * This plugin is also responsible for emitting `composition` events, thus
     * allowing us to share composition fallback code for both `beforeInput` and
     * `composition` event types.
     */


    var BeforeInputEventPlugin = {
      eventTypes: eventTypes,
      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

        if (composition === null) {
          return beforeInput;
        }

        if (beforeInput === null) {
          return composition;
        }

        return [composition, beforeInput];
      }
    }; // Use to restore controlled state after a change event has fired.

    var restoreImpl = null;
    var restoreTarget = null;
    var restoreQueue = null;

    function restoreStateOfTarget(target) {
      // We perform this translation at the end of the event loop so that we
      // always receive the correct fiber here
      var internalInstance = getInstanceFromNode(target);

      if (!internalInstance) {
        // Unmounted
        return;
      }

      !(typeof restoreImpl === 'function') ? invariant(false, 'setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      var props = getFiberCurrentPropsFromNode(internalInstance.stateNode);
      restoreImpl(internalInstance.stateNode, internalInstance.type, props);
    }

    function setRestoreImplementation(impl) {
      restoreImpl = impl;
    }

    function enqueueStateRestore(target) {
      if (restoreTarget) {
        if (restoreQueue) {
          restoreQueue.push(target);
        } else {
          restoreQueue = [target];
        }
      } else {
        restoreTarget = target;
      }
    }

    function needsStateRestore() {
      return restoreTarget !== null || restoreQueue !== null;
    }

    function restoreStateIfNeeded() {
      if (!restoreTarget) {
        return;
      }

      var target = restoreTarget;
      var queuedTargets = restoreQueue;
      restoreTarget = null;
      restoreQueue = null;
      restoreStateOfTarget(target);

      if (queuedTargets) {
        for (var i = 0; i < queuedTargets.length; i++) {
          restoreStateOfTarget(queuedTargets[i]);
        }
      }
    } // Used as a way to call batchedUpdates when we don't have a reference to
    // the renderer. Such as when we're dispatching events or if third party
    // libraries need to call batchedUpdates. Eventually, this API will go away when
    // everything is batched by default. We'll then have a similar API to opt-out of
    // scheduled work and instead do synchronous work.
    // Defaults


    var _batchedUpdatesImpl = function (fn, bookkeeping) {
      return fn(bookkeeping);
    };

    var _interactiveUpdatesImpl = function (fn, a, b) {
      return fn(a, b);
    };

    var _flushInteractiveUpdatesImpl = function () {};

    var isBatching = false;

    function batchedUpdates(fn, bookkeeping) {
      if (isBatching) {
        // If we are currently inside another batch, we need to wait until it
        // fully completes before restoring state.
        return fn(bookkeeping);
      }

      isBatching = true;

      try {
        return _batchedUpdatesImpl(fn, bookkeeping);
      } finally {
        // Here we wait until all updates have propagated, which is important
        // when using controlled components within layers:
        // https://github.com/facebook/react/issues/1698
        // Then we restore state of any controlled component.
        isBatching = false;
        var controlledComponentsHavePendingUpdates = needsStateRestore();

        if (controlledComponentsHavePendingUpdates) {
          // If a controlled event was fired, we may need to restore the state of
          // the DOM node back to the controlled value. This is necessary when React
          // bails out of the update without touching the DOM.
          _flushInteractiveUpdatesImpl();

          restoreStateIfNeeded();
        }
      }
    }

    function interactiveUpdates(fn, a, b) {
      return _interactiveUpdatesImpl(fn, a, b);
    }

    function setBatchingImplementation(batchedUpdatesImpl, interactiveUpdatesImpl, flushInteractiveUpdatesImpl) {
      _batchedUpdatesImpl = batchedUpdatesImpl;
      _interactiveUpdatesImpl = interactiveUpdatesImpl;
      _flushInteractiveUpdatesImpl = flushInteractiveUpdatesImpl;
    }
    /**
     * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
     */


    var supportedInputTypes = {
      color: true,
      date: true,
      datetime: true,
      'datetime-local': true,
      email: true,
      month: true,
      number: true,
      password: true,
      range: true,
      search: true,
      tel: true,
      text: true,
      time: true,
      url: true,
      week: true
    };

    function isTextInputElement(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

      if (nodeName === 'input') {
        return !!supportedInputTypes[elem.type];
      }

      if (nodeName === 'textarea') {
        return true;
      }

      return false;
    }
    /**
     * HTML nodeType values that represent the type of the node
     */


    var ELEMENT_NODE = 1;
    var TEXT_NODE = 3;
    var COMMENT_NODE = 8;
    var DOCUMENT_NODE = 9;
    var DOCUMENT_FRAGMENT_NODE = 11;
    /**
     * Gets the target node from a native browser event by accounting for
     * inconsistencies in browser DOM APIs.
     *
     * @param {object} nativeEvent Native browser event.
     * @return {DOMEventTarget} Target node.
     */

    function getEventTarget(nativeEvent) {
      // Fallback to nativeEvent.srcElement for IE9
      // https://github.com/facebook/react/issues/12506
      var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

      if (target.correspondingUseElement) {
        target = target.correspondingUseElement;
      } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
      // @see http://www.quirksmode.org/js/events_properties.html


      return target.nodeType === TEXT_NODE ? target.parentNode : target;
    }
    /**
     * Checks if an event is supported in the current execution environment.
     *
     * NOTE: This will not work correctly for non-generic events such as `change`,
     * `reset`, `load`, `error`, and `select`.
     *
     * Borrows from Modernizr.
     *
     * @param {string} eventNameSuffix Event name, e.g. "click".
     * @return {boolean} True if the event is supported.
     * @internal
     * @license Modernizr 3.0.0pre (Custom Build) | MIT
     */


    function isEventSupported(eventNameSuffix) {
      if (!canUseDOM) {
        return false;
      }

      var eventName = 'on' + eventNameSuffix;
      var isSupported = eventName in document;

      if (!isSupported) {
        var element = document.createElement('div');
        element.setAttribute(eventName, 'return;');
        isSupported = typeof element[eventName] === 'function';
      }

      return isSupported;
    }

    function isCheckable(elem) {
      var type = elem.type;
      var nodeName = elem.nodeName;
      return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
    }

    function getTracker(node) {
      return node._valueTracker;
    }

    function detachTracker(node) {
      node._valueTracker = null;
    }

    function getValueFromNode(node) {
      var value = '';

      if (!node) {
        return value;
      }

      if (isCheckable(node)) {
        value = node.checked ? 'true' : 'false';
      } else {
        value = node.value;
      }

      return value;
    }

    function trackValueOnNode(node) {
      var valueField = isCheckable(node) ? 'checked' : 'value';
      var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
      var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
      // and don't track value will cause over reporting of changes,
      // but it's better then a hard failure
      // (needed for certain tests that spyOn input values and Safari)

      if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
        return;
      }

      var get = descriptor.get,
          set = descriptor.set;
      Object.defineProperty(node, valueField, {
        configurable: true,
        get: function () {
          return get.call(this);
        },
        set: function (value) {
          currentValue = '' + value;
          set.call(this, value);
        }
      }); // We could've passed this the first time
      // but it triggers a bug in IE11 and Edge 14/15.
      // Calling defineProperty() again should be equivalent.
      // https://github.com/facebook/react/issues/11768

      Object.defineProperty(node, valueField, {
        enumerable: descriptor.enumerable
      });
      var tracker = {
        getValue: function () {
          return currentValue;
        },
        setValue: function (value) {
          currentValue = '' + value;
        },
        stopTracking: function () {
          detachTracker(node);
          delete node[valueField];
        }
      };
      return tracker;
    }

    function track(node) {
      if (getTracker(node)) {
        return;
      } // TODO: Once it's just Fiber we can move this to node._wrapperState


      node._valueTracker = trackValueOnNode(node);
    }

    function updateValueIfChanged(node) {
      if (!node) {
        return false;
      }

      var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
      // that trying again will succeed

      if (!tracker) {
        return true;
      }

      var lastValue = tracker.getValue();
      var nextValue = getValueFromNode(node);

      if (nextValue !== lastValue) {
        tracker.setValue(nextValue);
        return true;
      }

      return false;
    }

    var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED; // Prevent newer renderers from RTE when used with older react package versions.
    // Current owner and dispatcher used to share the same ref,
    // but PR #14548 split them out to better support the react-debug-tools package.

    if (!ReactSharedInternals.hasOwnProperty('ReactCurrentDispatcher')) {
      ReactSharedInternals.ReactCurrentDispatcher = {
        current: null
      };
    }

    var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

    var describeComponentFrame = function (name, source, ownerName) {
      var sourceInfo = '';

      if (source) {
        var path = source.fileName;
        var fileName = path.replace(BEFORE_SLASH_RE, '');
        {
          // In DEV, include code for a common special case:
          // prefer "folder/index.js" instead of just "index.js".
          if (/^index\./.test(fileName)) {
            var match = path.match(BEFORE_SLASH_RE);

            if (match) {
              var pathBeforeSlash = match[1];

              if (pathBeforeSlash) {
                var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
                fileName = folderName + '/' + fileName;
              }
            }
          }
        }
        sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
      } else if (ownerName) {
        sourceInfo = ' (created by ' + ownerName + ')';
      }

      return '\n    in ' + (name || 'Unknown') + sourceInfo;
    }; // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.


    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';

    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== 'object') {
        return null;
      }

      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

      if (typeof maybeIterator === 'function') {
        return maybeIterator;
      }

      return null;
    }

    var Pending = 0;
    var Resolved = 1;
    var Rejected = 2;

    function refineResolvedLazyComponent(lazyComponent) {
      return lazyComponent._status === Resolved ? lazyComponent._result : null;
    }

    function getWrappedName(outerType, innerType, wrapperName) {
      var functionName = innerType.displayName || innerType.name || '';
      return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);
    }

    function getComponentName(type) {
      if (type == null) {
        // Host root, text node or just invalid type.
        return null;
      }

      {
        if (typeof type.tag === 'number') {
          warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
        }
      }

      if (typeof type === 'function') {
        return type.displayName || type.name || null;
      }

      if (typeof type === 'string') {
        return type;
      }

      switch (type) {
        case REACT_CONCURRENT_MODE_TYPE:
          return 'ConcurrentMode';

        case REACT_FRAGMENT_TYPE:
          return 'Fragment';

        case REACT_PORTAL_TYPE:
          return 'Portal';

        case REACT_PROFILER_TYPE:
          return 'Profiler';

        case REACT_STRICT_MODE_TYPE:
          return 'StrictMode';

        case REACT_SUSPENSE_TYPE:
          return 'Suspense';
      }

      if (typeof type === 'object') {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            return 'Context.Consumer';

          case REACT_PROVIDER_TYPE:
            return 'Context.Provider';

          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, 'ForwardRef');

          case REACT_MEMO_TYPE:
            return getComponentName(type.type);

          case REACT_LAZY_TYPE:
            {
              var thenable = type;
              var resolvedThenable = refineResolvedLazyComponent(thenable);

              if (resolvedThenable) {
                return getComponentName(resolvedThenable);
              }
            }
        }
      }

      return null;
    }

    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

    function describeFiber(fiber) {
      switch (fiber.tag) {
        case HostRoot:
        case HostPortal:
        case HostText:
        case Fragment:
        case ContextProvider:
        case ContextConsumer:
          return '';

        default:
          var owner = fiber._debugOwner;
          var source = fiber._debugSource;
          var name = getComponentName(fiber.type);
          var ownerName = null;

          if (owner) {
            ownerName = getComponentName(owner.type);
          }

          return describeComponentFrame(name, source, ownerName);
      }
    }

    function getStackByFiberInDevAndProd(workInProgress) {
      var info = '';
      var node = workInProgress;

      do {
        info += describeFiber(node);
        node = node.return;
      } while (node);

      return info;
    }

    var current = null;
    var phase = null;

    function getCurrentFiberOwnerNameInDevOrNull() {
      {
        if (current === null) {
          return null;
        }

        var owner = current._debugOwner;

        if (owner !== null && typeof owner !== 'undefined') {
          return getComponentName(owner.type);
        }
      }
      return null;
    }

    function getCurrentFiberStackInDev() {
      {
        if (current === null) {
          return '';
        } // Safe because if current fiber exists, we are reconciling,
        // and it is guaranteed to be the work-in-progress version.


        return getStackByFiberInDevAndProd(current);
      }
      return '';
    }

    function resetCurrentFiber() {
      {
        ReactDebugCurrentFrame.getCurrentStack = null;
        current = null;
        phase = null;
      }
    }

    function setCurrentFiber(fiber) {
      {
        ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
        current = fiber;
        phase = null;
      }
    }

    function setCurrentPhase(lifeCyclePhase) {
      {
        phase = lifeCyclePhase;
      }
    }
    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */


    var warning = warningWithoutStack$1;
    {
      warning = function (condition, format) {
        if (condition) {
          return;
        }

        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum(); // eslint-disable-next-line react-internal/warning-and-invariant-args

        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));
      };
    }
    var warning$1 = warning; // A reserved attribute.
    // It is handled by React separately and shouldn't be written to the DOM.

    var RESERVED = 0; // A simple string attribute.
    // Attributes that aren't in the whitelist are presumed to have this type.

    var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
    // "enumerated" attributes with "true" and "false" as possible values.
    // When true, it should be set to a "true" string.
    // When false, it should be set to a "false" string.

    var BOOLEANISH_STRING = 2; // A real boolean attribute.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.

    var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
    // When true, it should be present (set either to an empty string or its name).
    // When false, it should be omitted.
    // For any other value, should be present with that value.

    var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
    // When falsy, it should be removed.

    var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
    // When falsy, it should be removed.

    var POSITIVE_NUMERIC = 6;
    /* eslint-disable max-len */

    var ATTRIBUTE_NAME_START_CHAR = ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD';
    /* eslint-enable max-len */

    var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040';
    var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
    var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var illegalAttributeNameCache = {};
    var validatedAttributeNameCache = {};

    function isAttributeNameSafe(attributeName) {
      if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
        return true;
      }

      if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
        return false;
      }

      if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
        validatedAttributeNameCache[attributeName] = true;
        return true;
      }

      illegalAttributeNameCache[attributeName] = true;
      {
        warning$1(false, 'Invalid attribute name: `%s`', attributeName);
      }
      return false;
    }

    function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
      if (propertyInfo !== null) {
        return propertyInfo.type === RESERVED;
      }

      if (isCustomComponentTag) {
        return false;
      }

      if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
        return true;
      }

      return false;
    }

    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
      if (propertyInfo !== null && propertyInfo.type === RESERVED) {
        return false;
      }

      switch (typeof value) {
        case 'function': // $FlowIssue symbol is perfectly valid here

        case 'symbol':
          // eslint-disable-line
          return true;

        case 'boolean':
          {
            if (isCustomComponentTag) {
              return false;
            }

            if (propertyInfo !== null) {
              return !propertyInfo.acceptsBooleans;
            } else {
              var prefix = name.toLowerCase().slice(0, 5);
              return prefix !== 'data-' && prefix !== 'aria-';
            }
          }

        default:
          return false;
      }
    }

    function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
      if (value === null || typeof value === 'undefined') {
        return true;
      }

      if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
        return true;
      }

      if (isCustomComponentTag) {
        return false;
      }

      if (propertyInfo !== null) {
        switch (propertyInfo.type) {
          case BOOLEAN:
            return !value;

          case OVERLOADED_BOOLEAN:
            return value === false;

          case NUMERIC:
            return isNaN(value);

          case POSITIVE_NUMERIC:
            return isNaN(value) || value < 1;
        }
      }

      return false;
    }

    function getPropertyInfo(name) {
      return properties.hasOwnProperty(name) ? properties[name] : null;
    }

    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace) {
      this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
      this.attributeName = attributeName;
      this.attributeNamespace = attributeNamespace;
      this.mustUseProperty = mustUseProperty;
      this.propertyName = name;
      this.type = type;
    } // When adding attributes to this list, be sure to also add them to
    // the `possibleStandardNames` module to ensure casing and incorrect
    // name warnings.


    var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

    ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
    // elements (not just inputs). Now that ReactDOMInput assigns to the
    // defaultValue property -- do we need this?
    'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
      name, // attributeName
      null);
    } // attributeNamespace
    ); // A few React string attributes have a different name.
    // This is a mapping from React prop names to the attribute names.

    [['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
      var name = _ref[0],
          attributeName = _ref[1];
      properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
      attributeName, // attributeName
      null);
    } // attributeNamespace
    ); // These are "enumerated" HTML attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).

    ['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
      name.toLowerCase(), // attributeName
      null);
    } // attributeNamespace
    ); // These are "enumerated" SVG attributes that accept "true" and "false".
    // In React, we let users pass `true` and `false` even though technically
    // these aren't boolean attributes (they are coerced to strings).
    // Since these are SVG attributes, their attribute names are case-sensitive.

    ['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
      name, // attributeName
      null);
    } // attributeNamespace
    ); // These are HTML boolean attributes.

    ['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
    // on the client side because the browsers are inconsistent. Instead we call focus().
    'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
    'itemScope'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
      name.toLowerCase(), // attributeName
      null);
    } // attributeNamespace
    ); // These are the few React props that we set as DOM properties
    // rather than attributes. These are all booleans.

    ['checked', // Note: `option.selected` is not updated if `select.multiple` is
    // disabled with `removeAttribute`. We have special logic for handling this.
    'multiple', 'muted', 'selected'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
      name, // attributeName
      null);
    } // attributeNamespace
    ); // These are HTML attributes that are "overloaded booleans": they behave like
    // booleans, but can also accept a string value.

    ['capture', 'download'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
      name, // attributeName
      null);
    } // attributeNamespace
    ); // These are HTML attributes that must be positive numbers.

    ['cols', 'rows', 'size', 'span'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
      name, // attributeName
      null);
    } // attributeNamespace
    ); // These are HTML attributes that must be numbers.

    ['rowSpan', 'start'].forEach(function (name) {
      properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
      name.toLowerCase(), // attributeName
      null);
    } // attributeNamespace
    );
    var CAMELIZE = /[\-\:]([a-z])/g;

    var capitalize = function (token) {
      return token[1].toUpperCase();
    }; // This is a list of all SVG attributes that need special casing, namespacing,
    // or boolean value assignment. Regular attributes that just accept strings
    // and have the same names are omitted, just like in the HTML whitelist.
    // Some of these attributes can be hard to find. This list was created by
    // scrapping the MDN documentation.


    ['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height'].forEach(function (attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
      attributeName, null);
    } // attributeNamespace
    ); // String SVG attributes with the xlink namespace.

    ['xlink:actuate', 'xlink:arcrole', 'xlink:href', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type'].forEach(function (attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
      attributeName, 'http://www.w3.org/1999/xlink');
    }); // String SVG attributes with the xml namespace.

    ['xml:base', 'xml:lang', 'xml:space'].forEach(function (attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
      attributeName, 'http://www.w3.org/XML/1998/namespace');
    }); // These attribute exists both in HTML and SVG.
    // The attribute name is case-sensitive in SVG so we can't just use
    // the React name like we do for attributes that exist only in HTML.

    ['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
      properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
      attributeName.toLowerCase(), // attributeName
      null);
    } // attributeNamespace
    );
    /**
     * Get the value for a property on a node. Only used in DEV for SSR validation.
     * The "expected" argument is used as a hint of what the expected value is.
     * Some properties have multiple equivalent values.
     */

    function getValueForProperty(node, name, expected, propertyInfo) {
      {
        if (propertyInfo.mustUseProperty) {
          var propertyName = propertyInfo.propertyName;
          return node[propertyName];
        } else {
          var attributeName = propertyInfo.attributeName;
          var stringValue = null;

          if (propertyInfo.type === OVERLOADED_BOOLEAN) {
            if (node.hasAttribute(attributeName)) {
              var value = node.getAttribute(attributeName);

              if (value === '') {
                return true;
              }

              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return value;
              }

              if (value === '' + expected) {
                return expected;
              }

              return value;
            }
          } else if (node.hasAttribute(attributeName)) {
            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
              // We had an attribute but shouldn't have had one, so read it
              // for the error message.
              return node.getAttribute(attributeName);
            }

            if (propertyInfo.type === BOOLEAN) {
              // If this was a boolean, it doesn't matter what the value is
              // the fact that we have it is the same as the expected.
              return expected;
            } // Even if this property uses a namespace we use getAttribute
            // because we assume its namespaced name is the same as our config.
            // To use getAttributeNS we need the local name which we don't have
            // in our config atm.


            stringValue = node.getAttribute(attributeName);
          }

          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
            return stringValue === null ? expected : stringValue;
          } else if (stringValue === '' + expected) {
            return expected;
          } else {
            return stringValue;
          }
        }
      }
    }
    /**
     * Get the value for a attribute on a node. Only used in DEV for SSR validation.
     * The third argument is used as a hint of what the expected value is. Some
     * attributes have multiple equivalent values.
     */


    function getValueForAttribute(node, name, expected) {
      {
        if (!isAttributeNameSafe(name)) {
          return;
        }

        if (!node.hasAttribute(name)) {
          return expected === undefined ? undefined : null;
        }

        var value = node.getAttribute(name);

        if (value === '' + expected) {
          return expected;
        }

        return value;
      }
    }
    /**
     * Sets the value for a property on a node.
     *
     * @param {DOMElement} node
     * @param {string} name
     * @param {*} value
     */


    function setValueForProperty(node, name, value, isCustomComponentTag) {
      var propertyInfo = getPropertyInfo(name);

      if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
        return;
      }

      if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
        value = null;
      } // If the prop isn't in the special list, treat it as a simple attribute.


      if (isCustomComponentTag || propertyInfo === null) {
        if (isAttributeNameSafe(name)) {
          var _attributeName = name;

          if (value === null) {
            node.removeAttribute(_attributeName);
          } else {
            node.setAttribute(_attributeName, '' + value);
          }
        }

        return;
      }

      var mustUseProperty = propertyInfo.mustUseProperty;

      if (mustUseProperty) {
        var propertyName = propertyInfo.propertyName;

        if (value === null) {
          var type = propertyInfo.type;
          node[propertyName] = type === BOOLEAN ? false : '';
        } else {
          // Contrary to `setAttribute`, object properties are properly
          // `toString`ed by IE8/9.
          node[propertyName] = value;
        }

        return;
      } // The rest are treated as attributes with special cases.


      var attributeName = propertyInfo.attributeName,
          attributeNamespace = propertyInfo.attributeNamespace;

      if (value === null) {
        node.removeAttribute(attributeName);
      } else {
        var _type = propertyInfo.type;
        var attributeValue = void 0;

        if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
          attributeValue = '';
        } else {
          // `setAttribute` with objects becomes only `[object]` in IE8/9,
          // ('' + value) makes it output the correct toString()-value.
          attributeValue = '' + value;
        }

        if (attributeNamespace) {
          node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
        } else {
          node.setAttribute(attributeName, attributeValue);
        }
      }
    } // Flow does not allow string concatenation of most non-string types. To work
    // around this limitation, we use an opaque type that can only be obtained by
    // passing the value through getToStringValue first.


    function toString(value) {
      return '' + value;
    }

    function getToStringValue(value) {
      switch (typeof value) {
        case 'boolean':
        case 'number':
        case 'object':
        case 'string':
        case 'undefined':
          return value;

        default:
          // function, symbol are assigned as empty strings
          return '';
      }
    }

    var ReactDebugCurrentFrame$1 = null;
    var ReactControlledValuePropTypes = {
      checkPropTypes: null
    };
    {
      ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
      var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true
      };
      var propTypes = {
        value: function (props, propName, componentName) {
          if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null) {
            return null;
          }

          return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
        },
        checked: function (props, propName, componentName) {
          if (props.onChange || props.readOnly || props.disabled || props[propName] == null) {
            return null;
          }

          return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
        }
      };
      /**
       * Provide a linked `value` attribute for controlled forms. You should not use
       * this outside of the ReactDOM controlled form components.
       */

      ReactControlledValuePropTypes.checkPropTypes = function (tagName, props) {
        checkPropTypes(propTypes, props, 'prop', tagName, ReactDebugCurrentFrame$1.getStackAddendum);
      };
    }
    var enableUserTimingAPI = true; // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:

    var debugRenderPhaseSideEffects = false; // In some cases, StrictMode should also double-render lifecycles.
    // This can be confusing for tests though,
    // And it can be bad for performance in production.
    // This feature flag can be used to control the behavior:

    var debugRenderPhaseSideEffectsForStrictMode = true; // To preserve the "Pause on caught exceptions" behavior of the debugger, we
    // replay the begin phase of a failed component inside invokeGuardedCallback.

    var replayFailedUnitOfWorkWithInvokeGuardedCallback = true; // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:

    var warnAboutDeprecatedLifecycles = false; // Gather advanced timing metrics for Profiler subtrees.

    var enableProfilerTimer = true; // Trace which interactions trigger each commit.

    var enableSchedulerTracing = true; // Only used in www builds.

    var enableSuspenseServerRenderer = false; // TODO: true? Here it might just be false.
    // Only used in www builds.
    // Only used in www builds.
    // React Fire: prevent the value and checked attributes from syncing
    // with their related DOM properties

    var disableInputAttributeSyncing = false; // These APIs will no longer be "unstable" in the upcoming 16.7 release,
    // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.

    var enableStableConcurrentModeAPIs = false;
    var warnAboutShorthandPropertyCollision = false; // TODO: direct imports like some-package/src/* are bad. Fix me.

    var didWarnValueDefaultValue = false;
    var didWarnCheckedDefaultChecked = false;
    var didWarnControlledToUncontrolled = false;
    var didWarnUncontrolledToControlled = false;

    function isControlled(props) {
      var usesChecked = props.type === 'checkbox' || props.type === 'radio';
      return usesChecked ? props.checked != null : props.value != null;
    }
    /**
     * Implements an <input> host component that allows setting these optional
     * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
     *
     * If `checked` or `value` are not supplied (or null/undefined), user actions
     * that affect the checked state or value will trigger updates to the element.
     *
     * If they are supplied (and not null/undefined), the rendered element will not
     * trigger updates to the element. Instead, the props must change in order for
     * the rendered element to be updated.
     *
     * The rendered element will be initialized as unchecked (or `defaultChecked`)
     * with an empty value (or `defaultValue`).
     *
     * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
     */


    function getHostProps(element, props) {
      var node = element;
      var checked = props.checked;

      var hostProps = _assign({}, props, {
        defaultChecked: undefined,
        defaultValue: undefined,
        value: undefined,
        checked: checked != null ? checked : node._wrapperState.initialChecked
      });

      return hostProps;
    }

    function initWrapperState(element, props) {
      {
        ReactControlledValuePropTypes.checkPropTypes('input', props);

        if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
          warning$1(false, '%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
          didWarnCheckedDefaultChecked = true;
        }

        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
          warning$1(false, '%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);
          didWarnValueDefaultValue = true;
        }
      }
      var node = element;
      var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
      node._wrapperState = {
        initialChecked: props.checked != null ? props.checked : props.defaultChecked,
        initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
        controlled: isControlled(props)
      };
    }

    function updateChecked(element, props) {
      var node = element;
      var checked = props.checked;

      if (checked != null) {
        setValueForProperty(node, 'checked', checked, false);
      }
    }

    function updateWrapper(element, props) {
      var node = element;
      {
        var _controlled = isControlled(props);

        if (!node._wrapperState.controlled && _controlled && !didWarnUncontrolledToControlled) {
          warning$1(false, 'A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
          didWarnUncontrolledToControlled = true;
        }

        if (node._wrapperState.controlled && !_controlled && !didWarnControlledToUncontrolled) {
          warning$1(false, 'A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);
          didWarnControlledToUncontrolled = true;
        }
      }
      updateChecked(element, props);
      var value = getToStringValue(props.value);
      var type = props.type;

      if (value != null) {
        if (type === 'number') {
          if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
          // eslint-disable-next-line
          node.value != value) {
            node.value = toString(value);
          }
        } else if (node.value !== toString(value)) {
          node.value = toString(value);
        }
      } else if (type === 'submit' || type === 'reset') {
        // Submit/reset inputs need the attribute removed completely to avoid
        // blank-text buttons.
        node.removeAttribute('value');
        return;
      }

      if (disableInputAttributeSyncing) {
        // When not syncing the value attribute, React only assigns a new value
        // whenever the defaultValue React prop has changed. When not present,
        // React does nothing
        if (props.hasOwnProperty('defaultValue')) {
          setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        }
      } else {
        // When syncing the value attribute, the value comes from a cascade of
        // properties:
        //  1. The value React property
        //  2. The defaultValue React property
        //  3. Otherwise there should be no change
        if (props.hasOwnProperty('value')) {
          setDefaultValue(node, props.type, value);
        } else if (props.hasOwnProperty('defaultValue')) {
          setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
        }
      }

      if (disableInputAttributeSyncing) {
        // When not syncing the checked attribute, the attribute is directly
        // controllable from the defaultValue React property. It needs to be
        // updated as new props come in.
        if (props.defaultChecked == null) {
          node.removeAttribute('checked');
        } else {
          node.defaultChecked = !!props.defaultChecked;
        }
      } else {
        // When syncing the checked attribute, it only changes when it needs
        // to be removed, such as transitioning from a checkbox into a text input
        if (props.checked == null && props.defaultChecked != null) {
          node.defaultChecked = !!props.defaultChecked;
        }
      }
    }

    function postMountWrapper(element, props, isHydrating) {
      var node = element; // Do not assign value if it is already set. This prevents user text input
      // from being lost during SSR hydration.

      if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
        var type = props.type;
        var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
        // default value provided by the browser. See: #12872

        if (isButton && (props.value === undefined || props.value === null)) {
          return;
        }

        var _initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
        // from being lost during SSR hydration.


        if (!isHydrating) {
          if (disableInputAttributeSyncing) {
            var value = getToStringValue(props.value); // When not syncing the value attribute, the value property points
            // directly to the React prop. Only assign it if it exists.

            if (value != null) {
              // Always assign on buttons so that it is possible to assign an
              // empty string to clear button text.
              //
              // Otherwise, do not re-assign the value property if is empty. This
              // potentially avoids a DOM write and prevents Firefox (~60.0.1) from
              // prematurely marking required inputs as invalid. Equality is compared
              // to the current value in case the browser provided value is not an
              // empty string.
              if (isButton || value !== node.value) {
                node.value = toString(value);
              }
            }
          } else {
            // When syncing the value attribute, the value property should use
            // the wrapperState._initialValue property. This uses:
            //
            //   1. The value React property when present
            //   2. The defaultValue React property when present
            //   3. An empty string
            if (_initialValue !== node.value) {
              node.value = _initialValue;
            }
          }
        }

        if (disableInputAttributeSyncing) {
          // When not syncing the value attribute, assign the value attribute
          // directly from the defaultValue React property (when present)
          var defaultValue = getToStringValue(props.defaultValue);

          if (defaultValue != null) {
            node.defaultValue = toString(defaultValue);
          }
        } else {
          // Otherwise, the value attribute is synchronized to the property,
          // so we assign defaultValue to the same thing as the value property
          // assignment step above.
          node.defaultValue = _initialValue;
        }
      } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
      // this is needed to work around a chrome bug where setting defaultChecked
      // will sometimes influence the value of checked (even after detachment).
      // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
      // We need to temporarily unset name to avoid disrupting radio button groups.


      var name = node.name;

      if (name !== '') {
        node.name = '';
      }

      if (disableInputAttributeSyncing) {
        // When not syncing the checked attribute, the checked property
        // never gets assigned. It must be manually set. We don't want
        // to do this when hydrating so that existing user input isn't
        // modified
        if (!isHydrating) {
          updateChecked(element, props);
        } // Only assign the checked attribute if it is defined. This saves
        // a DOM write when controlling the checked attribute isn't needed
        // (text inputs, submit/reset)


        if (props.hasOwnProperty('defaultChecked')) {
          node.defaultChecked = !node.defaultChecked;
          node.defaultChecked = !!props.defaultChecked;
        }
      } else {
        // When syncing the checked attribute, both the checked property and
        // attribute are assigned at the same time using defaultChecked. This uses:
        //
        //   1. The checked React property when present
        //   2. The defaultChecked React property when present
        //   3. Otherwise, false
        node.defaultChecked = !node.defaultChecked;
        node.defaultChecked = !!node._wrapperState.initialChecked;
      }

      if (name !== '') {
        node.name = name;
      }
    }

    function restoreControlledState(element, props) {
      var node = element;
      updateWrapper(node, props);
      updateNamedCousins(node, props);
    }

    function updateNamedCousins(rootNode, props) {
      var name = props.name;

      if (props.type === 'radio' && name != null) {
        var queryRoot = rootNode;

        while (queryRoot.parentNode) {
          queryRoot = queryRoot.parentNode;
        } // If `rootNode.form` was non-null, then we could try `form.elements`,
        // but that sometimes behaves strangely in IE8. We could also try using
        // `form.getElementsByName`, but that will only return direct children
        // and won't include inputs that use the HTML5 `form=` attribute. Since
        // the input might not even be in a form. It might not even be in the
        // document. Let's just use the local `querySelectorAll` to ensure we don't
        // miss anything.


        var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

        for (var i = 0; i < group.length; i++) {
          var otherNode = group[i];

          if (otherNode === rootNode || otherNode.form !== rootNode.form) {
            continue;
          } // This will throw if radio buttons rendered by different copies of React
          // and the same name are rendered into the same form (same as #1939).
          // That's probably okay; we don't support it just as we don't support
          // mixing React radio buttons with non-React ones.


          var otherProps = getFiberCurrentPropsFromNode$1(otherNode);
          !otherProps ? invariant(false, 'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.') : void 0; // We need update the tracked value on the named cousin since the value
          // was changed but the input saw no event or value set

          updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
          // was previously checked to update will cause it to be come re-checked
          // as appropriate.

          updateWrapper(otherNode, otherProps);
        }
      }
    } // In Chrome, assigning defaultValue to certain input types triggers input validation.
    // For number inputs, the display value loses trailing decimal points. For email inputs,
    // Chrome raises "The specified value <x> is not a valid email address".
    //
    // Here we check to see if the defaultValue has actually changed, avoiding these problems
    // when the user is inputting text
    //
    // https://github.com/facebook/react/issues/7253


    function setDefaultValue(node, type, value) {
      if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
      type !== 'number' || node.ownerDocument.activeElement !== node) {
        if (value == null) {
          node.defaultValue = toString(node._wrapperState.initialValue);
        } else if (node.defaultValue !== toString(value)) {
          node.defaultValue = toString(value);
        }
      }
    }

    var eventTypes$1 = {
      change: {
        phasedRegistrationNames: {
          bubbled: 'onChange',
          captured: 'onChangeCapture'
        },
        dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
      }
    };

    function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
      var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
      event.type = 'change'; // Flag this event loop as needing state restore.

      enqueueStateRestore(target);
      accumulateTwoPhaseDispatches(event);
      return event;
    }
    /**
     * For IE shims
     */


    var activeElement = null;
    var activeElementInst = null;
    /**
     * SECTION: handle `change` event
     */

    function shouldUseChangeEvent(elem) {
      var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
    }

    function manualDispatchChangeEvent(nativeEvent) {
      var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
      // other events and have it go through ReactBrowserEventEmitter. Since it
      // doesn't, we manually listen for the events and so we have to enqueue and
      // process the abstract event manually.
      //
      // Batching is necessary here in order to ensure that all event handlers run
      // before the next rerender (including event handlers attached to ancestor
      // elements instead of directly on the input). Without this, controlled
      // components don't work properly in conjunction with event bubbling because
      // the component is rerendered and the value reverted before all the event
      // handlers can run. See https://github.com/facebook/react/issues/708.

      batchedUpdates(runEventInBatch, event);
    }

    function runEventInBatch(event) {
      runEventsInBatch(event);
    }

    function getInstIfValueChanged(targetInst) {
      var targetNode = getNodeFromInstance$1(targetInst);

      if (updateValueIfChanged(targetNode)) {
        return targetInst;
      }
    }

    function getTargetInstForChangeEvent(topLevelType, targetInst) {
      if (topLevelType === TOP_CHANGE) {
        return targetInst;
      }
    }
    /**
     * SECTION: handle `input` event
     */


    var isInputEventSupported = false;

    if (canUseDOM) {
      // IE9 claims to support the input event but fails to trigger it when
      // deleting text, so we ignore its input events.
      isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
    }
    /**
     * (For IE <=9) Starts tracking propertychange events on the passed-in element
     * and override the value property so that we can distinguish user events from
     * value changes in JS.
     */


    function startWatchingForValueChange(target, targetInst) {
      activeElement = target;
      activeElementInst = targetInst;
      activeElement.attachEvent('onpropertychange', handlePropertyChange);
    }
    /**
     * (For IE <=9) Removes the event listeners from the currently-tracked element,
     * if any exists.
     */


    function stopWatchingForValueChange() {
      if (!activeElement) {
        return;
      }

      activeElement.detachEvent('onpropertychange', handlePropertyChange);
      activeElement = null;
      activeElementInst = null;
    }
    /**
     * (For IE <=9) Handles a propertychange event, sending a `change` event if
     * the value of the active element has changed.
     */


    function handlePropertyChange(nativeEvent) {
      if (nativeEvent.propertyName !== 'value') {
        return;
      }

      if (getInstIfValueChanged(activeElementInst)) {
        manualDispatchChangeEvent(nativeEvent);
      }
    }

    function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
      if (topLevelType === TOP_FOCUS) {
        // In IE9, propertychange fires for most input events but is buggy and
        // doesn't fire when text is deleted, but conveniently, selectionchange
        // appears to fire in all of the remaining cases so we catch those and
        // forward the event if the value has changed
        // In either case, we don't want to call the event handler if the value
        // is changed from JS so we redefine a setter for `.value` that updates
        // our activeElementValue variable, allowing us to ignore those changes
        //
        // stopWatching() should be a noop here but we call it just in case we
        // missed a blur event somehow.
        stopWatchingForValueChange();
        startWatchingForValueChange(target, targetInst);
      } else if (topLevelType === TOP_BLUR) {
        stopWatchingForValueChange();
      }
    } // For IE8 and IE9.


    function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
      if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
        // On the selectionchange event, the target is just document which isn't
        // helpful for us so just check activeElement instead.
        //
        // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
        // propertychange on the first input event after setting `value` from a
        // script and fires only keydown, keypress, keyup. Catching keyup usually
        // gets it and catching keydown lets us fire an event for the first
        // keystroke if user does a key repeat (it'll be a little delayed: right
        // before the second keystroke). Other input methods (e.g., paste) seem to
        // fire selectionchange normally.
        return getInstIfValueChanged(activeElementInst);
      }
    }
    /**
     * SECTION: handle `click` event
     */


    function shouldUseClickEvent(elem) {
      // Use the `click` event to detect changes to checkbox and radio inputs.
      // This approach works across all browsers, whereas `change` does not fire
      // until `blur` in IE8.
      var nodeName = elem.nodeName;
      return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
    }

    function getTargetInstForClickEvent(topLevelType, targetInst) {
      if (topLevelType === TOP_CLICK) {
        return getInstIfValueChanged(targetInst);
      }
    }

    function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
      if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
        return getInstIfValueChanged(targetInst);
      }
    }

    function handleControlledInputBlur(node) {
      var state = node._wrapperState;

      if (!state || !state.controlled || node.type !== 'number') {
        return;
      }

      if (!disableInputAttributeSyncing) {
        // If controlled, assign the value attribute to the current value on blur
        setDefaultValue(node, 'number', node.value);
      }
    }
    /**
     * This plugin creates an `onChange` event that normalizes change events
     * across form elements. This event fires at a time when it's possible to
     * change the element's value without seeing a flicker.
     *
     * Supported elements are:
     * - input (see `isTextInputElement`)
     * - textarea
     * - select
     */


    var ChangeEventPlugin = {
      eventTypes: eventTypes$1,
      _isInputEventSupported: isInputEventSupported,
      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
        var getTargetInstFunc = void 0,
            handleEventFunc = void 0;

        if (shouldUseChangeEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForChangeEvent;
        } else if (isTextInputElement(targetNode)) {
          if (isInputEventSupported) {
            getTargetInstFunc = getTargetInstForInputOrChangeEvent;
          } else {
            getTargetInstFunc = getTargetInstForInputEventPolyfill;
            handleEventFunc = handleEventsForInputEventPolyfill;
          }
        } else if (shouldUseClickEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForClickEvent;
        }

        if (getTargetInstFunc) {
          var inst = getTargetInstFunc(topLevelType, targetInst);

          if (inst) {
            var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
            return event;
          }
        }

        if (handleEventFunc) {
          handleEventFunc(topLevelType, targetNode, targetInst);
        } // When blurring, set the value attribute for number inputs


        if (topLevelType === TOP_BLUR) {
          handleControlledInputBlur(targetNode);
        }
      }
    };
    /**
     * Module that is injectable into `EventPluginHub`, that specifies a
     * deterministic ordering of `EventPlugin`s. A convenient way to reason about
     * plugins, without having to package every one of them. This is better than
     * having plugins be ordered in the same order that they are injected because
     * that ordering would be influenced by the packaging order.
     * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
     * preventing default on events is convenient in `SimpleEventPlugin` handlers.
     */

    var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];
    var SyntheticUIEvent = SyntheticEvent.extend({
      view: null,
      detail: null
    });
    var modifierKeyToProp = {
      Alt: 'altKey',
      Control: 'ctrlKey',
      Meta: 'metaKey',
      Shift: 'shiftKey'
    }; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
    // getModifierState. If getModifierState is not supported, we map it to a set of
    // modifier keys exposed by the event. In this case, Lock-keys are not supported.

    /**
     * Translation from modifier key to the associated property in the event.
     * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
     */

    function modifierStateGetter(keyArg) {
      var syntheticEvent = this;
      var nativeEvent = syntheticEvent.nativeEvent;

      if (nativeEvent.getModifierState) {
        return nativeEvent.getModifierState(keyArg);
      }

      var keyProp = modifierKeyToProp[keyArg];
      return keyProp ? !!nativeEvent[keyProp] : false;
    }

    function getEventModifierState(nativeEvent) {
      return modifierStateGetter;
    }

    var previousScreenX = 0;
    var previousScreenY = 0; // Use flags to signal movementX/Y has already been set

    var isMovementXSet = false;
    var isMovementYSet = false;
    /**
     * @interface MouseEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */

    var SyntheticMouseEvent = SyntheticUIEvent.extend({
      screenX: null,
      screenY: null,
      clientX: null,
      clientY: null,
      pageX: null,
      pageY: null,
      ctrlKey: null,
      shiftKey: null,
      altKey: null,
      metaKey: null,
      getModifierState: getEventModifierState,
      button: null,
      buttons: null,
      relatedTarget: function (event) {
        return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
      },
      movementX: function (event) {
        if ('movementX' in event) {
          return event.movementX;
        }

        var screenX = previousScreenX;
        previousScreenX = event.screenX;

        if (!isMovementXSet) {
          isMovementXSet = true;
          return 0;
        }

        return event.type === 'mousemove' ? event.screenX - screenX : 0;
      },
      movementY: function (event) {
        if ('movementY' in event) {
          return event.movementY;
        }

        var screenY = previousScreenY;
        previousScreenY = event.screenY;

        if (!isMovementYSet) {
          isMovementYSet = true;
          return 0;
        }

        return event.type === 'mousemove' ? event.screenY - screenY : 0;
      }
    });
    /**
     * @interface PointerEvent
     * @see http://www.w3.org/TR/pointerevents/
     */

    var SyntheticPointerEvent = SyntheticMouseEvent.extend({
      pointerId: null,
      width: null,
      height: null,
      pressure: null,
      tangentialPressure: null,
      tiltX: null,
      tiltY: null,
      twist: null,
      pointerType: null,
      isPrimary: null
    });
    var eventTypes$2 = {
      mouseEnter: {
        registrationName: 'onMouseEnter',
        dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
      },
      mouseLeave: {
        registrationName: 'onMouseLeave',
        dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
      },
      pointerEnter: {
        registrationName: 'onPointerEnter',
        dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
      },
      pointerLeave: {
        registrationName: 'onPointerLeave',
        dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
      }
    };
    var EnterLeaveEventPlugin = {
      eventTypes: eventTypes$2,

      /**
       * For almost every interaction we care about, there will be both a top-level
       * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
       * we do not extract duplicate events. However, moving the mouse into the
       * browser from outside will not fire a `mouseout` event. In this case, we use
       * the `mouseover` top-level event.
       */
      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
        var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;

        if (isOverEvent && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
          return null;
        }

        if (!isOutEvent && !isOverEvent) {
          // Must not be a mouse or pointer in or out - ignoring.
          return null;
        }

        var win = void 0;

        if (nativeEventTarget.window === nativeEventTarget) {
          // `nativeEventTarget` is probably a window object.
          win = nativeEventTarget;
        } else {
          // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
          var doc = nativeEventTarget.ownerDocument;

          if (doc) {
            win = doc.defaultView || doc.parentWindow;
          } else {
            win = window;
          }
        }

        var from = void 0;
        var to = void 0;

        if (isOutEvent) {
          from = targetInst;
          var related = nativeEvent.relatedTarget || nativeEvent.toElement;
          to = related ? getClosestInstanceFromNode(related) : null;
        } else {
          // Moving to a node from outside the window.
          from = null;
          to = targetInst;
        }

        if (from === to) {
          // Nothing pertains to our managed components.
          return null;
        }

        var eventInterface = void 0,
            leaveEventType = void 0,
            enterEventType = void 0,
            eventTypePrefix = void 0;

        if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
          eventInterface = SyntheticMouseEvent;
          leaveEventType = eventTypes$2.mouseLeave;
          enterEventType = eventTypes$2.mouseEnter;
          eventTypePrefix = 'mouse';
        } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
          eventInterface = SyntheticPointerEvent;
          leaveEventType = eventTypes$2.pointerLeave;
          enterEventType = eventTypes$2.pointerEnter;
          eventTypePrefix = 'pointer';
        }

        var fromNode = from == null ? win : getNodeFromInstance$1(from);
        var toNode = to == null ? win : getNodeFromInstance$1(to);
        var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
        leave.type = eventTypePrefix + 'leave';
        leave.target = fromNode;
        leave.relatedTarget = toNode;
        var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
        enter.type = eventTypePrefix + 'enter';
        enter.target = toNode;
        enter.relatedTarget = fromNode;
        accumulateEnterLeaveDispatches(leave, enter, from, to);
        return [leave, enter];
      }
    };
    /**
     * inlined Object.is polyfill to avoid requiring consumers ship their own
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
     */

    function is(x, y) {
      return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
      ;
    }

    var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
    /**
     * Performs equality by iterating through keys on an object and returning false
     * when any key has values which are not strictly equal between the arguments.
     * Returns true when the values of all keys are strictly equal.
     */

    function shallowEqual(objA, objB) {
      if (is(objA, objB)) {
        return true;
      }

      if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
        return false;
      }

      var keysA = Object.keys(objA);
      var keysB = Object.keys(objB);

      if (keysA.length !== keysB.length) {
        return false;
      } // Test for A's keys different from B.


      for (var i = 0; i < keysA.length; i++) {
        if (!hasOwnProperty$1.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
          return false;
        }
      }

      return true;
    }
    /**
     * `ReactInstanceMap` maintains a mapping from a public facing stateful
     * instance (key) and the internal representation (value). This allows public
     * methods to accept the user facing instance as an argument and map them back
     * to internal methods.
     *
     * Note that this module is currently shared and assumed to be stateless.
     * If this becomes an actual Map, that will break.
     */

    /**
     * This API should be called `delete` but we'd have to make sure to always
     * transform these to strings for IE support. When this transform is fully
     * supported we can rename it.
     */


    function get(key) {
      return key._reactInternalFiber;
    }

    function has(key) {
      return key._reactInternalFiber !== undefined;
    }

    function set(key, value) {
      key._reactInternalFiber = value;
    } // Don't change these two values. They're used by React Dev Tools.


    var NoEffect =
    /*              */
    0;
    var PerformedWork =
    /*         */
    1; // You can change the rest (and add more).

    var Placement =
    /*             */
    2;
    var Update =
    /*                */
    4;
    var PlacementAndUpdate =
    /*    */
    6;
    var Deletion =
    /*              */
    8;
    var ContentReset =
    /*          */
    16;
    var Callback =
    /*              */
    32;
    var DidCapture =
    /*            */
    64;
    var Ref =
    /*                   */
    128;
    var Snapshot =
    /*              */
    256;
    var Passive =
    /*               */
    512; // Passive & Update & Callback & Ref & Snapshot

    var LifecycleEffectMask =
    /*   */
    932; // Union of all host effects

    var HostEffectMask =
    /*        */
    1023;
    var Incomplete =
    /*            */
    1024;
    var ShouldCapture =
    /*         */
    2048;
    var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
    var MOUNTING = 1;
    var MOUNTED = 2;
    var UNMOUNTED = 3;

    function isFiberMountedImpl(fiber) {
      var node = fiber;

      if (!fiber.alternate) {
        // If there is no alternate, this might be a new tree that isn't inserted
        // yet. If it is, then it will have a pending insertion effect on it.
        if ((node.effectTag & Placement) !== NoEffect) {
          return MOUNTING;
        }

        while (node.return) {
          node = node.return;

          if ((node.effectTag & Placement) !== NoEffect) {
            return MOUNTING;
          }
        }
      } else {
        while (node.return) {
          node = node.return;
        }
      }

      if (node.tag === HostRoot) {
        // TODO: Check if this was a nested HostRoot when used with
        // renderContainerIntoSubtree.
        return MOUNTED;
      } // If we didn't hit the root, that means that we're in an disconnected tree
      // that has been unmounted.


      return UNMOUNTED;
    }

    function isFiberMounted(fiber) {
      return isFiberMountedImpl(fiber) === MOUNTED;
    }

    function isMounted(component) {
      {
        var owner = ReactCurrentOwner$1.current;

        if (owner !== null && owner.tag === ClassComponent) {
          var ownerFiber = owner;
          var instance = ownerFiber.stateNode;
          !instance._warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component') : void 0;
          instance._warnedAboutRefsInRender = true;
        }
      }
      var fiber = get(component);

      if (!fiber) {
        return false;
      }

      return isFiberMountedImpl(fiber) === MOUNTED;
    }

    function assertIsMounted(fiber) {
      !(isFiberMountedImpl(fiber) === MOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
    }

    function findCurrentFiberUsingSlowPath(fiber) {
      var alternate = fiber.alternate;

      if (!alternate) {
        // If there is no alternate, then we only need to check if it is mounted.
        var state = isFiberMountedImpl(fiber);
        !(state !== UNMOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;

        if (state === MOUNTING) {
          return null;
        }

        return fiber;
      } // If we have two possible branches, we'll walk backwards up to the root
      // to see what path the root points to. On the way we may hit one of the
      // special cases and we'll deal with them.


      var a = fiber;
      var b = alternate;

      while (true) {
        var parentA = a.return;
        var parentB = parentA ? parentA.alternate : null;

        if (!parentA || !parentB) {
          // We're at the root.
          break;
        } // If both copies of the parent fiber point to the same child, we can
        // assume that the child is current. This happens when we bailout on low
        // priority: the bailed out fiber's child reuses the current child.


        if (parentA.child === parentB.child) {
          var child = parentA.child;

          while (child) {
            if (child === a) {
              // We've determined that A is the current branch.
              assertIsMounted(parentA);
              return fiber;
            }

            if (child === b) {
              // We've determined that B is the current branch.
              assertIsMounted(parentA);
              return alternate;
            }

            child = child.sibling;
          } // We should never have an alternate for any mounting node. So the only
          // way this could possibly happen is if this was unmounted, if at all.


          invariant(false, 'Unable to find node on an unmounted component.');
        }

        if (a.return !== b.return) {
          // The return pointer of A and the return pointer of B point to different
          // fibers. We assume that return pointers never criss-cross, so A must
          // belong to the child set of A.return, and B must belong to the child
          // set of B.return.
          a = parentA;
          b = parentB;
        } else {
          // The return pointers point to the same fiber. We'll have to use the
          // default, slow path: scan the child sets of each parent alternate to see
          // which child belongs to which set.
          //
          // Search parent A's child set
          var didFindChild = false;
          var _child = parentA.child;

          while (_child) {
            if (_child === a) {
              didFindChild = true;
              a = parentA;
              b = parentB;
              break;
            }

            if (_child === b) {
              didFindChild = true;
              b = parentA;
              a = parentB;
              break;
            }

            _child = _child.sibling;
          }

          if (!didFindChild) {
            // Search parent B's child set
            _child = parentB.child;

            while (_child) {
              if (_child === a) {
                didFindChild = true;
                a = parentB;
                b = parentA;
                break;
              }

              if (_child === b) {
                didFindChild = true;
                b = parentB;
                a = parentA;
                break;
              }

              _child = _child.sibling;
            }

            !didFindChild ? invariant(false, 'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.') : void 0;
          }
        }

        !(a.alternate === b) ? invariant(false, 'Return fibers should always be each others\' alternates. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      } // If the root is not a host container, we're in a disconnected tree. I.e.
      // unmounted.


      !(a.tag === HostRoot) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;

      if (a.stateNode.current === a) {
        // We've determined that A is the current branch.
        return fiber;
      } // Otherwise B has to be current branch.


      return alternate;
    }

    function findCurrentHostFiber(parent) {
      var currentParent = findCurrentFiberUsingSlowPath(parent);

      if (!currentParent) {
        return null;
      } // Next we'll drill down this component to find the first HostComponent/Text.


      var node = currentParent;

      while (true) {
        if (node.tag === HostComponent || node.tag === HostText) {
          return node;
        } else if (node.child) {
          node.child.return = node;
          node = node.child;
          continue;
        }

        if (node === currentParent) {
          return null;
        }

        while (!node.sibling) {
          if (!node.return || node.return === currentParent) {
            return null;
          }

          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      } // Flow needs the return null here, but ESLint complains about it.
      // eslint-disable-next-line no-unreachable


      return null;
    }

    function findCurrentHostFiberWithNoPortals(parent) {
      var currentParent = findCurrentFiberUsingSlowPath(parent);

      if (!currentParent) {
        return null;
      } // Next we'll drill down this component to find the first HostComponent/Text.


      var node = currentParent;

      while (true) {
        if (node.tag === HostComponent || node.tag === HostText) {
          return node;
        } else if (node.child && node.tag !== HostPortal) {
          node.child.return = node;
          node = node.child;
          continue;
        }

        if (node === currentParent) {
          return null;
        }

        while (!node.sibling) {
          if (!node.return || node.return === currentParent) {
            return null;
          }

          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      } // Flow needs the return null here, but ESLint complains about it.
      // eslint-disable-next-line no-unreachable


      return null;
    }

    function addEventBubbleListener(element, eventType, listener) {
      element.addEventListener(eventType, listener, false);
    }

    function addEventCaptureListener(element, eventType, listener) {
      element.addEventListener(eventType, listener, true);
    }
    /**
     * @interface Event
     * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
     * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
     */


    var SyntheticAnimationEvent = SyntheticEvent.extend({
      animationName: null,
      elapsedTime: null,
      pseudoElement: null
    });
    /**
     * @interface Event
     * @see http://www.w3.org/TR/clipboard-apis/
     */

    var SyntheticClipboardEvent = SyntheticEvent.extend({
      clipboardData: function (event) {
        return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
      }
    });
    /**
     * @interface FocusEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */

    var SyntheticFocusEvent = SyntheticUIEvent.extend({
      relatedTarget: null
    });
    /**
     * `charCode` represents the actual "character code" and is safe to use with
     * `String.fromCharCode`. As such, only keys that correspond to printable
     * characters produce a valid `charCode`, the only exception to this is Enter.
     * The Tab-key is considered non-printable and does not have a `charCode`,
     * presumably because it does not produce a tab-character in browsers.
     *
     * @param {object} nativeEvent Native browser event.
     * @return {number} Normalized `charCode` property.
     */

    function getEventCharCode(nativeEvent) {
      var charCode = void 0;
      var keyCode = nativeEvent.keyCode;

      if ('charCode' in nativeEvent) {
        charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

        if (charCode === 0 && keyCode === 13) {
          charCode = 13;
        }
      } else {
        // IE8 does not implement `charCode`, but `keyCode` has the correct value.
        charCode = keyCode;
      } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
      // report Enter as charCode 10 when ctrl is pressed.


      if (charCode === 10) {
        charCode = 13;
      } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
      // Must not discard the (non-)printable Enter-key.


      if (charCode >= 32 || charCode === 13) {
        return charCode;
      }

      return 0;
    }
    /**
     * Normalization of deprecated HTML5 `key` values
     * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
     */


    var normalizeKey = {
      Esc: 'Escape',
      Spacebar: ' ',
      Left: 'ArrowLeft',
      Up: 'ArrowUp',
      Right: 'ArrowRight',
      Down: 'ArrowDown',
      Del: 'Delete',
      Win: 'OS',
      Menu: 'ContextMenu',
      Apps: 'ContextMenu',
      Scroll: 'ScrollLock',
      MozPrintableKey: 'Unidentified'
    };
    /**
     * Translation from legacy `keyCode` to HTML5 `key`
     * Only special keys supported, all others depend on keyboard layout or browser
     * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
     */

    var translateToKey = {
      '8': 'Backspace',
      '9': 'Tab',
      '12': 'Clear',
      '13': 'Enter',
      '16': 'Shift',
      '17': 'Control',
      '18': 'Alt',
      '19': 'Pause',
      '20': 'CapsLock',
      '27': 'Escape',
      '32': ' ',
      '33': 'PageUp',
      '34': 'PageDown',
      '35': 'End',
      '36': 'Home',
      '37': 'ArrowLeft',
      '38': 'ArrowUp',
      '39': 'ArrowRight',
      '40': 'ArrowDown',
      '45': 'Insert',
      '46': 'Delete',
      '112': 'F1',
      '113': 'F2',
      '114': 'F3',
      '115': 'F4',
      '116': 'F5',
      '117': 'F6',
      '118': 'F7',
      '119': 'F8',
      '120': 'F9',
      '121': 'F10',
      '122': 'F11',
      '123': 'F12',
      '144': 'NumLock',
      '145': 'ScrollLock',
      '224': 'Meta'
    };
    /**
     * @param {object} nativeEvent Native browser event.
     * @return {string} Normalized `key` property.
     */

    function getEventKey(nativeEvent) {
      if (nativeEvent.key) {
        // Normalize inconsistent values reported by browsers due to
        // implementations of a working draft specification.
        // FireFox implements `key` but returns `MozPrintableKey` for all
        // printable characters (normalized to `Unidentified`), ignore it.
        var key = normalizeKey[nativeEvent.key] || nativeEvent.key;

        if (key !== 'Unidentified') {
          return key;
        }
      } // Browser does not implement `key`, polyfill as much of it as we can.


      if (nativeEvent.type === 'keypress') {
        var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
        // thus be captured by `keypress`, no other non-printable key should.

        return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
      }

      if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
        // While user keyboard layout determines the actual meaning of each
        // `keyCode` value, almost all function keys have a universal value.
        return translateToKey[nativeEvent.keyCode] || 'Unidentified';
      }

      return '';
    }
    /**
     * @interface KeyboardEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */


    var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
      key: getEventKey,
      location: null,
      ctrlKey: null,
      shiftKey: null,
      altKey: null,
      metaKey: null,
      repeat: null,
      locale: null,
      getModifierState: getEventModifierState,
      // Legacy Interface
      charCode: function (event) {
        // `charCode` is the result of a KeyPress event and represents the value of
        // the actual printable character.
        // KeyPress is deprecated, but its replacement is not yet final and not
        // implemented in any major browser. Only KeyPress has charCode.
        if (event.type === 'keypress') {
          return getEventCharCode(event);
        }

        return 0;
      },
      keyCode: function (event) {
        // `keyCode` is the result of a KeyDown/Up event and represents the value of
        // physical keyboard key.
        // The actual meaning of the value depends on the users' keyboard layout
        // which cannot be detected. Assuming that it is a US keyboard layout
        // provides a surprisingly accurate mapping for US and European users.
        // Due to this, it is left to the user to implement at this time.
        if (event.type === 'keydown' || event.type === 'keyup') {
          return event.keyCode;
        }

        return 0;
      },
      which: function (event) {
        // `which` is an alias for either `keyCode` or `charCode` depending on the
        // type of the event.
        if (event.type === 'keypress') {
          return getEventCharCode(event);
        }

        if (event.type === 'keydown' || event.type === 'keyup') {
          return event.keyCode;
        }

        return 0;
      }
    });
    /**
     * @interface DragEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */

    var SyntheticDragEvent = SyntheticMouseEvent.extend({
      dataTransfer: null
    });
    /**
     * @interface TouchEvent
     * @see http://www.w3.org/TR/touch-events/
     */

    var SyntheticTouchEvent = SyntheticUIEvent.extend({
      touches: null,
      targetTouches: null,
      changedTouches: null,
      altKey: null,
      metaKey: null,
      ctrlKey: null,
      shiftKey: null,
      getModifierState: getEventModifierState
    });
    /**
     * @interface Event
     * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
     * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
     */

    var SyntheticTransitionEvent = SyntheticEvent.extend({
      propertyName: null,
      elapsedTime: null,
      pseudoElement: null
    });
    /**
     * @interface WheelEvent
     * @see http://www.w3.org/TR/DOM-Level-3-Events/
     */

    var SyntheticWheelEvent = SyntheticMouseEvent.extend({
      deltaX: function (event) {
        return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
        'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
      },
      deltaY: function (event) {
        return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
        'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
        'wheelDelta' in event ? -event.wheelDelta : 0;
      },
      deltaZ: null,
      // Browsers without "deltaMode" is reporting in raw wheel delta where one
      // notch on the scroll is always +/- 120, roughly equivalent to pixels.
      // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
      // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
      deltaMode: null
    });
    /**
     * Turns
     * ['abort', ...]
     * into
     * eventTypes = {
     *   'abort': {
     *     phasedRegistrationNames: {
     *       bubbled: 'onAbort',
     *       captured: 'onAbortCapture',
     *     },
     *     dependencies: [TOP_ABORT],
     *   },
     *   ...
     * };
     * topLevelEventsToDispatchConfig = new Map([
     *   [TOP_ABORT, { sameConfig }],
     * ]);
     */

    var interactiveEventTypeNames = [[TOP_BLUR, 'blur'], [TOP_CANCEL, 'cancel'], [TOP_CLICK, 'click'], [TOP_CLOSE, 'close'], [TOP_CONTEXT_MENU, 'contextMenu'], [TOP_COPY, 'copy'], [TOP_CUT, 'cut'], [TOP_AUX_CLICK, 'auxClick'], [TOP_DOUBLE_CLICK, 'doubleClick'], [TOP_DRAG_END, 'dragEnd'], [TOP_DRAG_START, 'dragStart'], [TOP_DROP, 'drop'], [TOP_FOCUS, 'focus'], [TOP_INPUT, 'input'], [TOP_INVALID, 'invalid'], [TOP_KEY_DOWN, 'keyDown'], [TOP_KEY_PRESS, 'keyPress'], [TOP_KEY_UP, 'keyUp'], [TOP_MOUSE_DOWN, 'mouseDown'], [TOP_MOUSE_UP, 'mouseUp'], [TOP_PASTE, 'paste'], [TOP_PAUSE, 'pause'], [TOP_PLAY, 'play'], [TOP_POINTER_CANCEL, 'pointerCancel'], [TOP_POINTER_DOWN, 'pointerDown'], [TOP_POINTER_UP, 'pointerUp'], [TOP_RATE_CHANGE, 'rateChange'], [TOP_RESET, 'reset'], [TOP_SEEKED, 'seeked'], [TOP_SUBMIT, 'submit'], [TOP_TOUCH_CANCEL, 'touchCancel'], [TOP_TOUCH_END, 'touchEnd'], [TOP_TOUCH_START, 'touchStart'], [TOP_VOLUME_CHANGE, 'volumeChange']];
    var nonInteractiveEventTypeNames = [[TOP_ABORT, 'abort'], [TOP_ANIMATION_END, 'animationEnd'], [TOP_ANIMATION_ITERATION, 'animationIteration'], [TOP_ANIMATION_START, 'animationStart'], [TOP_CAN_PLAY, 'canPlay'], [TOP_CAN_PLAY_THROUGH, 'canPlayThrough'], [TOP_DRAG, 'drag'], [TOP_DRAG_ENTER, 'dragEnter'], [TOP_DRAG_EXIT, 'dragExit'], [TOP_DRAG_LEAVE, 'dragLeave'], [TOP_DRAG_OVER, 'dragOver'], [TOP_DURATION_CHANGE, 'durationChange'], [TOP_EMPTIED, 'emptied'], [TOP_ENCRYPTED, 'encrypted'], [TOP_ENDED, 'ended'], [TOP_ERROR, 'error'], [TOP_GOT_POINTER_CAPTURE, 'gotPointerCapture'], [TOP_LOAD, 'load'], [TOP_LOADED_DATA, 'loadedData'], [TOP_LOADED_METADATA, 'loadedMetadata'], [TOP_LOAD_START, 'loadStart'], [TOP_LOST_POINTER_CAPTURE, 'lostPointerCapture'], [TOP_MOUSE_MOVE, 'mouseMove'], [TOP_MOUSE_OUT, 'mouseOut'], [TOP_MOUSE_OVER, 'mouseOver'], [TOP_PLAYING, 'playing'], [TOP_POINTER_MOVE, 'pointerMove'], [TOP_POINTER_OUT, 'pointerOut'], [TOP_POINTER_OVER, 'pointerOver'], [TOP_PROGRESS, 'progress'], [TOP_SCROLL, 'scroll'], [TOP_SEEKING, 'seeking'], [TOP_STALLED, 'stalled'], [TOP_SUSPEND, 'suspend'], [TOP_TIME_UPDATE, 'timeUpdate'], [TOP_TOGGLE, 'toggle'], [TOP_TOUCH_MOVE, 'touchMove'], [TOP_TRANSITION_END, 'transitionEnd'], [TOP_WAITING, 'waiting'], [TOP_WHEEL, 'wheel']];
    var eventTypes$4 = {};
    var topLevelEventsToDispatchConfig = {};

    function addEventTypeNameToConfig(_ref, isInteractive) {
      var topEvent = _ref[0],
          event = _ref[1];
      var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
      var onEvent = 'on' + capitalizedEvent;
      var type = {
        phasedRegistrationNames: {
          bubbled: onEvent,
          captured: onEvent + 'Capture'
        },
        dependencies: [topEvent],
        isInteractive: isInteractive
      };
      eventTypes$4[event] = type;
      topLevelEventsToDispatchConfig[topEvent] = type;
    }

    interactiveEventTypeNames.forEach(function (eventTuple) {
      addEventTypeNameToConfig(eventTuple, true);
    });
    nonInteractiveEventTypeNames.forEach(function (eventTuple) {
      addEventTypeNameToConfig(eventTuple, false);
    }); // Only used in DEV for exhaustiveness validation.

    var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];
    var SimpleEventPlugin = {
      eventTypes: eventTypes$4,
      isInteractiveTopLevelEventType: function (topLevelType) {
        var config = topLevelEventsToDispatchConfig[topLevelType];
        return config !== undefined && config.isInteractive === true;
      },
      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var dispatchConfig = topLevelEventsToDispatchConfig[topLevelType];

        if (!dispatchConfig) {
          return null;
        }

        var EventConstructor = void 0;

        switch (topLevelType) {
          case TOP_KEY_PRESS:
            // Firefox creates a keypress event for function keys too. This removes
            // the unwanted keypress events. Enter is however both printable and
            // non-printable. One would expect Tab to be as well (but it isn't).
            if (getEventCharCode(nativeEvent) === 0) {
              return null;
            }

          /* falls through */

          case TOP_KEY_DOWN:
          case TOP_KEY_UP:
            EventConstructor = SyntheticKeyboardEvent;
            break;

          case TOP_BLUR:
          case TOP_FOCUS:
            EventConstructor = SyntheticFocusEvent;
            break;

          case TOP_CLICK:
            // Firefox creates a click event on right mouse clicks. This removes the
            // unwanted click events.
            if (nativeEvent.button === 2) {
              return null;
            }

          /* falls through */

          case TOP_AUX_CLICK:
          case TOP_DOUBLE_CLICK:
          case TOP_MOUSE_DOWN:
          case TOP_MOUSE_MOVE:
          case TOP_MOUSE_UP: // TODO: Disabled elements should not respond to mouse events

          /* falls through */

          case TOP_MOUSE_OUT:
          case TOP_MOUSE_OVER:
          case TOP_CONTEXT_MENU:
            EventConstructor = SyntheticMouseEvent;
            break;

          case TOP_DRAG:
          case TOP_DRAG_END:
          case TOP_DRAG_ENTER:
          case TOP_DRAG_EXIT:
          case TOP_DRAG_LEAVE:
          case TOP_DRAG_OVER:
          case TOP_DRAG_START:
          case TOP_DROP:
            EventConstructor = SyntheticDragEvent;
            break;

          case TOP_TOUCH_CANCEL:
          case TOP_TOUCH_END:
          case TOP_TOUCH_MOVE:
          case TOP_TOUCH_START:
            EventConstructor = SyntheticTouchEvent;
            break;

          case TOP_ANIMATION_END:
          case TOP_ANIMATION_ITERATION:
          case TOP_ANIMATION_START:
            EventConstructor = SyntheticAnimationEvent;
            break;

          case TOP_TRANSITION_END:
            EventConstructor = SyntheticTransitionEvent;
            break;

          case TOP_SCROLL:
            EventConstructor = SyntheticUIEvent;
            break;

          case TOP_WHEEL:
            EventConstructor = SyntheticWheelEvent;
            break;

          case TOP_COPY:
          case TOP_CUT:
          case TOP_PASTE:
            EventConstructor = SyntheticClipboardEvent;
            break;

          case TOP_GOT_POINTER_CAPTURE:
          case TOP_LOST_POINTER_CAPTURE:
          case TOP_POINTER_CANCEL:
          case TOP_POINTER_DOWN:
          case TOP_POINTER_MOVE:
          case TOP_POINTER_OUT:
          case TOP_POINTER_OVER:
          case TOP_POINTER_UP:
            EventConstructor = SyntheticPointerEvent;
            break;

          default:
            {
              if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
                warningWithoutStack$1(false, 'SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
              }
            } // HTML Events
            // @see http://www.w3.org/TR/html5/index.html#events-0

            EventConstructor = SyntheticEvent;
            break;
        }

        var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
        accumulateTwoPhaseDispatches(event);
        return event;
      }
    };
    var isInteractiveTopLevelEventType = SimpleEventPlugin.isInteractiveTopLevelEventType;
    var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
    var callbackBookkeepingPool = [];
    /**
     * Find the deepest React component completely containing the root of the
     * passed-in instance (for use when entire React trees are nested within each
     * other). If React trees are not nested, returns null.
     */

    function findRootContainerNode(inst) {
      // TODO: It may be a good idea to cache this to prevent unnecessary DOM
      // traversal, but caching is difficult to do correctly without using a
      // mutation observer to listen for all DOM changes.
      while (inst.return) {
        inst = inst.return;
      }

      if (inst.tag !== HostRoot) {
        // This can happen if we're in a detached tree.
        return null;
      }

      return inst.stateNode.containerInfo;
    } // Used to store ancestor hierarchy in top level callback


    function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst) {
      if (callbackBookkeepingPool.length) {
        var instance = callbackBookkeepingPool.pop();
        instance.topLevelType = topLevelType;
        instance.nativeEvent = nativeEvent;
        instance.targetInst = targetInst;
        return instance;
      }

      return {
        topLevelType: topLevelType,
        nativeEvent: nativeEvent,
        targetInst: targetInst,
        ancestors: []
      };
    }

    function releaseTopLevelCallbackBookKeeping(instance) {
      instance.topLevelType = null;
      instance.nativeEvent = null;
      instance.targetInst = null;
      instance.ancestors.length = 0;

      if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
        callbackBookkeepingPool.push(instance);
      }
    }

    function handleTopLevel(bookKeeping) {
      var targetInst = bookKeeping.targetInst; // Loop through the hierarchy, in case there's any nested components.
      // It's important that we build the array of ancestors before calling any
      // event handlers, because event handlers can modify the DOM, leading to
      // inconsistencies with ReactMount's node cache. See #1105.

      var ancestor = targetInst;

      do {
        if (!ancestor) {
          bookKeeping.ancestors.push(ancestor);
          break;
        }

        var root = findRootContainerNode(ancestor);

        if (!root) {
          break;
        }

        bookKeeping.ancestors.push(ancestor);
        ancestor = getClosestInstanceFromNode(root);
      } while (ancestor);

      for (var i = 0; i < bookKeeping.ancestors.length; i++) {
        targetInst = bookKeeping.ancestors[i];
        runExtractedEventsInBatch(bookKeeping.topLevelType, targetInst, bookKeeping.nativeEvent, getEventTarget(bookKeeping.nativeEvent));
      }
    } // TODO: can we stop exporting these?


    var _enabled = true;

    function setEnabled(enabled) {
      _enabled = !!enabled;
    }

    function isEnabled() {
      return _enabled;
    }
    /**
     * Traps top-level events by using event bubbling.
     *
     * @param {number} topLevelType Number from `TopLevelEventTypes`.
     * @param {object} element Element on which to attach listener.
     * @return {?object} An object with a remove function which will forcefully
     *                  remove the listener.
     * @internal
     */


    function trapBubbledEvent(topLevelType, element) {
      if (!element) {
        return null;
      }

      var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;
      addEventBubbleListener(element, getRawEventName(topLevelType), // Check if interactive and wrap in interactiveUpdates
      dispatch.bind(null, topLevelType));
    }
    /**
     * Traps a top-level event by using event capturing.
     *
     * @param {number} topLevelType Number from `TopLevelEventTypes`.
     * @param {object} element Element on which to attach listener.
     * @return {?object} An object with a remove function which will forcefully
     *                  remove the listener.
     * @internal
     */


    function trapCapturedEvent(topLevelType, element) {
      if (!element) {
        return null;
      }

      var dispatch = isInteractiveTopLevelEventType(topLevelType) ? dispatchInteractiveEvent : dispatchEvent;
      addEventCaptureListener(element, getRawEventName(topLevelType), // Check if interactive and wrap in interactiveUpdates
      dispatch.bind(null, topLevelType));
    }

    function dispatchInteractiveEvent(topLevelType, nativeEvent) {
      interactiveUpdates(dispatchEvent, topLevelType, nativeEvent);
    }

    function dispatchEvent(topLevelType, nativeEvent) {
      if (!_enabled) {
        return;
      }

      var nativeEventTarget = getEventTarget(nativeEvent);
      var targetInst = getClosestInstanceFromNode(nativeEventTarget);

      if (targetInst !== null && typeof targetInst.tag === 'number' && !isFiberMounted(targetInst)) {
        // If we get an event (ex: img onload) before committing that
        // component's mount, ignore it for now (that is, treat it as if it was an
        // event on a non-React tree). We might also consider queueing events and
        // dispatching them after the mount.
        targetInst = null;
      }

      var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst);

      try {
        // Event queue being processed in the same cycle allows
        // `preventDefault`.
        batchedUpdates(handleTopLevel, bookKeeping);
      } finally {
        releaseTopLevelCallbackBookKeeping(bookKeeping);
      }
    }
    /**
     * Summary of `ReactBrowserEventEmitter` event handling:
     *
     *  - Top-level delegation is used to trap most native browser events. This
     *    may only occur in the main thread and is the responsibility of
     *    ReactDOMEventListener, which is injected and can therefore support
     *    pluggable event sources. This is the only work that occurs in the main
     *    thread.
     *
     *  - We normalize and de-duplicate events to account for browser quirks. This
     *    may be done in the worker thread.
     *
     *  - Forward these native events (with the associated top-level type used to
     *    trap it) to `EventPluginHub`, which in turn will ask plugins if they want
     *    to extract any synthetic events.
     *
     *  - The `EventPluginHub` will then process each event by annotating them with
     *    "dispatches", a sequence of listeners and IDs that care about that event.
     *
     *  - The `EventPluginHub` then dispatches the events.
     *
     * Overview of React and the event system:
     *
     * +------------+    .
     * |    DOM     |    .
     * +------------+    .
     *       |           .
     *       v           .
     * +------------+    .
     * | ReactEvent |    .
     * |  Listener  |    .
     * +------------+    .                         +-----------+
     *       |           .               +--------+|SimpleEvent|
     *       |           .               |         |Plugin     |
     * +-----|------+    .               v         +-----------+
     * |     |      |    .    +--------------+                    +------------+
     * |     +-----------.--->|EventPluginHub|                    |    Event   |
     * |            |    .    |              |     +-----------+  | Propagators|
     * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
     * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
     * |            |    .    |              |     +-----------+  |  utilities |
     * |     +-----------.--->|              |                    +------------+
     * |     |      |    .    +--------------+
     * +-----|------+    .                ^        +-----------+
     *       |           .                |        |Enter/Leave|
     *       +           .                +-------+|Plugin     |
     * +-------------+   .                         +-----------+
     * | application |   .
     * |-------------|   .
     * |             |   .
     * |             |   .
     * +-------------+   .
     *                   .
     *    React Core     .  General Purpose Event Plugin System
     */


    var alreadyListeningTo = {};
    var reactTopListenersCounter = 0;
    /**
     * To ensure no conflicts with other potential React instances on the page
     */

    var topListenersIDKey = '_reactListenersID' + ('' + Math.random()).slice(2);

    function getListeningForDocument(mountAt) {
      // In IE8, `mountAt` is a host object and doesn't have `hasOwnProperty`
      // directly.
      if (!Object.prototype.hasOwnProperty.call(mountAt, topListenersIDKey)) {
        mountAt[topListenersIDKey] = reactTopListenersCounter++;
        alreadyListeningTo[mountAt[topListenersIDKey]] = {};
      }

      return alreadyListeningTo[mountAt[topListenersIDKey]];
    }
    /**
     * We listen for bubbled touch events on the document object.
     *
     * Firefox v8.01 (and possibly others) exhibited strange behavior when
     * mounting `onmousemove` events at some node that was not the document
     * element. The symptoms were that if your mouse is not moving over something
     * contained within that mount point (for example on the background) the
     * top-level listeners for `onmousemove` won't be called. However, if you
     * register the `mousemove` on the document object, then it will of course
     * catch all `mousemove`s. This along with iOS quirks, justifies restricting
     * top-level listeners to the document object only, at least for these
     * movement types of events and possibly all events.
     *
     * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
     *
     * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
     * they bubble to document.
     *
     * @param {string} registrationName Name of listener (e.g. `onClick`).
     * @param {object} mountAt Container where to mount the listener
     */


    function listenTo(registrationName, mountAt) {
      var isListening = getListeningForDocument(mountAt);
      var dependencies = registrationNameDependencies[registrationName];

      for (var i = 0; i < dependencies.length; i++) {
        var dependency = dependencies[i];

        if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
          switch (dependency) {
            case TOP_SCROLL:
              trapCapturedEvent(TOP_SCROLL, mountAt);
              break;

            case TOP_FOCUS:
            case TOP_BLUR:
              trapCapturedEvent(TOP_FOCUS, mountAt);
              trapCapturedEvent(TOP_BLUR, mountAt); // We set the flag for a single dependency later in this function,
              // but this ensures we mark both as attached rather than just one.

              isListening[TOP_BLUR] = true;
              isListening[TOP_FOCUS] = true;
              break;

            case TOP_CANCEL:
            case TOP_CLOSE:
              if (isEventSupported(getRawEventName(dependency))) {
                trapCapturedEvent(dependency, mountAt);
              }

              break;

            case TOP_INVALID:
            case TOP_SUBMIT:
            case TOP_RESET:
              // We listen to them on the target DOM elements.
              // Some of them bubble so we don't want them to fire twice.
              break;

            default:
              // By default, listen on the top level to all non-media events.
              // Media events don't bubble so adding the listener wouldn't do anything.
              var isMediaEvent = mediaEventTypes.indexOf(dependency) !== -1;

              if (!isMediaEvent) {
                trapBubbledEvent(dependency, mountAt);
              }

              break;
          }

          isListening[dependency] = true;
        }
      }
    }

    function isListeningToAllDependencies(registrationName, mountAt) {
      var isListening = getListeningForDocument(mountAt);
      var dependencies = registrationNameDependencies[registrationName];

      for (var i = 0; i < dependencies.length; i++) {
        var dependency = dependencies[i];

        if (!(isListening.hasOwnProperty(dependency) && isListening[dependency])) {
          return false;
        }
      }

      return true;
    }

    function getActiveElement(doc) {
      doc = doc || (typeof document !== 'undefined' ? document : undefined);

      if (typeof doc === 'undefined') {
        return null;
      }

      try {
        return doc.activeElement || doc.body;
      } catch (e) {
        return doc.body;
      }
    }
    /**
     * Given any node return the first leaf node without children.
     *
     * @param {DOMElement|DOMTextNode} node
     * @return {DOMElement|DOMTextNode}
     */


    function getLeafNode(node) {
      while (node && node.firstChild) {
        node = node.firstChild;
      }

      return node;
    }
    /**
     * Get the next sibling within a container. This will walk up the
     * DOM if a node's siblings have been exhausted.
     *
     * @param {DOMElement|DOMTextNode} node
     * @return {?DOMElement|DOMTextNode}
     */


    function getSiblingNode(node) {
      while (node) {
        if (node.nextSibling) {
          return node.nextSibling;
        }

        node = node.parentNode;
      }
    }
    /**
     * Get object describing the nodes which contain characters at offset.
     *
     * @param {DOMElement|DOMTextNode} root
     * @param {number} offset
     * @return {?object}
     */


    function getNodeForCharacterOffset(root, offset) {
      var node = getLeafNode(root);
      var nodeStart = 0;
      var nodeEnd = 0;

      while (node) {
        if (node.nodeType === TEXT_NODE) {
          nodeEnd = nodeStart + node.textContent.length;

          if (nodeStart <= offset && nodeEnd >= offset) {
            return {
              node: node,
              offset: offset - nodeStart
            };
          }

          nodeStart = nodeEnd;
        }

        node = getLeafNode(getSiblingNode(node));
      }
    }
    /**
     * @param {DOMElement} outerNode
     * @return {?object}
     */


    function getOffsets(outerNode) {
      var ownerDocument = outerNode.ownerDocument;
      var win = ownerDocument && ownerDocument.defaultView || window;
      var selection = win.getSelection && win.getSelection();

      if (!selection || selection.rangeCount === 0) {
        return null;
      }

      var anchorNode = selection.anchorNode,
          anchorOffset = selection.anchorOffset,
          focusNode = selection.focusNode,
          focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
      // up/down buttons on an <input type="number">. Anonymous divs do not seem to
      // expose properties, triggering a "Permission denied error" if any of its
      // properties are accessed. The only seemingly possible way to avoid erroring
      // is to access a property that typically works for non-anonymous divs and
      // catch any error that may otherwise arise. See
      // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

      try {
        /* eslint-disable no-unused-expressions */
        anchorNode.nodeType;
        focusNode.nodeType;
        /* eslint-enable no-unused-expressions */
      } catch (e) {
        return null;
      }

      return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
    }
    /**
     * Returns {start, end} where `start` is the character/codepoint index of
     * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
     * `end` is the index of (focusNode, focusOffset).
     *
     * Returns null if you pass in garbage input but we should probably just crash.
     *
     * Exported only for testing.
     */


    function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
      var length = 0;
      var start = -1;
      var end = -1;
      var indexWithinAnchor = 0;
      var indexWithinFocus = 0;
      var node = outerNode;
      var parentNode = null;

      outer: while (true) {
        var next = null;

        while (true) {
          if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
            start = length + anchorOffset;
          }

          if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
            end = length + focusOffset;
          }

          if (node.nodeType === TEXT_NODE) {
            length += node.nodeValue.length;
          }

          if ((next = node.firstChild) === null) {
            break;
          } // Moving from `node` to its first child `next`.


          parentNode = node;
          node = next;
        }

        while (true) {
          if (node === outerNode) {
            // If `outerNode` has children, this is always the second time visiting
            // it. If it has no children, this is still the first loop, and the only
            // valid selection is anchorNode and focusNode both equal to this node
            // and both offsets 0, in which case we will have handled above.
            break outer;
          }

          if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
            start = length;
          }

          if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
            end = length;
          }

          if ((next = node.nextSibling) !== null) {
            break;
          }

          node = parentNode;
          parentNode = node.parentNode;
        } // Moving from `node` to its next sibling `next`.


        node = next;
      }

      if (start === -1 || end === -1) {
        // This should never happen. (Would happen if the anchor/focus nodes aren't
        // actually inside the passed-in node.)
        return null;
      }

      return {
        start: start,
        end: end
      };
    }
    /**
     * In modern non-IE browsers, we can support both forward and backward
     * selections.
     *
     * Note: IE10+ supports the Selection object, but it does not support
     * the `extend` method, which means that even in modern IE, it's not possible
     * to programmatically create a backward selection. Thus, for all IE
     * versions, we use the old IE API to create our selections.
     *
     * @param {DOMElement|DOMTextNode} node
     * @param {object} offsets
     */


    function setOffsets(node, offsets) {
      var doc = node.ownerDocument || document;
      var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
      // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
      // fails when pasting 100+ items)

      if (!win.getSelection) {
        return;
      }

      var selection = win.getSelection();
      var length = node.textContent.length;
      var start = Math.min(offsets.start, length);
      var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
      // Flip backward selections, so we can set with a single range.

      if (!selection.extend && start > end) {
        var temp = end;
        end = start;
        start = temp;
      }

      var startMarker = getNodeForCharacterOffset(node, start);
      var endMarker = getNodeForCharacterOffset(node, end);

      if (startMarker && endMarker) {
        if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
          return;
        }

        var range = doc.createRange();
        range.setStart(startMarker.node, startMarker.offset);
        selection.removeAllRanges();

        if (start > end) {
          selection.addRange(range);
          selection.extend(endMarker.node, endMarker.offset);
        } else {
          range.setEnd(endMarker.node, endMarker.offset);
          selection.addRange(range);
        }
      }
    }

    function isTextNode(node) {
      return node && node.nodeType === TEXT_NODE;
    }

    function containsNode(outerNode, innerNode) {
      if (!outerNode || !innerNode) {
        return false;
      } else if (outerNode === innerNode) {
        return true;
      } else if (isTextNode(outerNode)) {
        return false;
      } else if (isTextNode(innerNode)) {
        return containsNode(outerNode, innerNode.parentNode);
      } else if ('contains' in outerNode) {
        return outerNode.contains(innerNode);
      } else if (outerNode.compareDocumentPosition) {
        return !!(outerNode.compareDocumentPosition(innerNode) & 16);
      } else {
        return false;
      }
    }

    function isInDocument(node) {
      return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
    }

    function isSameOriginFrame(iframe) {
      try {
        // Accessing the contentDocument of a HTMLIframeElement can cause the browser
        // to throw, e.g. if it has a cross-origin src attribute.
        // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
        // iframe.contentDocument.defaultView;
        // A safety way is to access one of the cross origin properties: Window or Location
        // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
        // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
        return typeof iframe.contentWindow.location.href === 'string';
      } catch (err) {
        return false;
      }
    }

    function getActiveElementDeep() {
      var win = window;
      var element = getActiveElement();

      while (element instanceof win.HTMLIFrameElement) {
        if (isSameOriginFrame(element)) {
          win = element.contentWindow;
        } else {
          return element;
        }

        element = getActiveElement(win.document);
      }

      return element;
    }
    /**
     * @ReactInputSelection: React input selection module. Based on Selection.js,
     * but modified to be suitable for react and has a couple of bug fixes (doesn't
     * assume buttons have range selections allowed).
     * Input selection module for React.
     */

    /**
     * @hasSelectionCapabilities: we get the element types that support selection
     * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
     * and `selectionEnd` rows.
     */


    function hasSelectionCapabilities(elem) {
      var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
      return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
    }

    function getSelectionInformation() {
      var focusedElem = getActiveElementDeep();
      return {
        focusedElem: focusedElem,
        selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection$1(focusedElem) : null
      };
    }
    /**
     * @restoreSelection: If any selection information was potentially lost,
     * restore it. This is useful when performing operations that could remove dom
     * nodes and place them back in, resulting in focus being lost.
     */


    function restoreSelection(priorSelectionInformation) {
      var curFocusedElem = getActiveElementDeep();
      var priorFocusedElem = priorSelectionInformation.focusedElem;
      var priorSelectionRange = priorSelectionInformation.selectionRange;

      if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
        if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
          setSelection(priorFocusedElem, priorSelectionRange);
        } // Focusing a node can change the scroll position, which is undesirable


        var ancestors = [];
        var ancestor = priorFocusedElem;

        while (ancestor = ancestor.parentNode) {
          if (ancestor.nodeType === ELEMENT_NODE) {
            ancestors.push({
              element: ancestor,
              left: ancestor.scrollLeft,
              top: ancestor.scrollTop
            });
          }
        }

        if (typeof priorFocusedElem.focus === 'function') {
          priorFocusedElem.focus();
        }

        for (var i = 0; i < ancestors.length; i++) {
          var info = ancestors[i];
          info.element.scrollLeft = info.left;
          info.element.scrollTop = info.top;
        }
      }
    }
    /**
     * @getSelection: Gets the selection bounds of a focused textarea, input or
     * contentEditable node.
     * -@input: Look up selection bounds of this input
     * -@return {start: selectionStart, end: selectionEnd}
     */


    function getSelection$1(input) {
      var selection = void 0;

      if ('selectionStart' in input) {
        // Modern browser with input or textarea.
        selection = {
          start: input.selectionStart,
          end: input.selectionEnd
        };
      } else {
        // Content editable or old IE textarea.
        selection = getOffsets(input);
      }

      return selection || {
        start: 0,
        end: 0
      };
    }
    /**
     * @setSelection: Sets the selection bounds of a textarea or input and focuses
     * the input.
     * -@input     Set selection bounds of this input or textarea
     * -@offsets   Object of same form that is returned from get*
     */


    function setSelection(input, offsets) {
      var start = offsets.start,
          end = offsets.end;

      if (end === undefined) {
        end = start;
      }

      if ('selectionStart' in input) {
        input.selectionStart = start;
        input.selectionEnd = Math.min(end, input.value.length);
      } else {
        setOffsets(input, offsets);
      }
    }

    var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
    var eventTypes$3 = {
      select: {
        phasedRegistrationNames: {
          bubbled: 'onSelect',
          captured: 'onSelectCapture'
        },
        dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
      }
    };
    var activeElement$1 = null;
    var activeElementInst$1 = null;
    var lastSelection = null;
    var mouseDown = false;
    /**
     * Get an object which is a unique representation of the current selection.
     *
     * The return value will not be consistent across nodes or browsers, but
     * two identical selections on the same node will return identical objects.
     *
     * @param {DOMElement} node
     * @return {object}
     */

    function getSelection(node) {
      if ('selectionStart' in node && hasSelectionCapabilities(node)) {
        return {
          start: node.selectionStart,
          end: node.selectionEnd
        };
      } else {
        var win = node.ownerDocument && node.ownerDocument.defaultView || window;
        var selection = win.getSelection();
        return {
          anchorNode: selection.anchorNode,
          anchorOffset: selection.anchorOffset,
          focusNode: selection.focusNode,
          focusOffset: selection.focusOffset
        };
      }
    }
    /**
     * Get document associated with the event target.
     *
     * @param {object} nativeEventTarget
     * @return {Document}
     */


    function getEventTargetDocument(eventTarget) {
      return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
    }
    /**
     * Poll selection to see whether it's changed.
     *
     * @param {object} nativeEvent
     * @param {object} nativeEventTarget
     * @return {?SyntheticEvent}
     */


    function constructSelectEvent(nativeEvent, nativeEventTarget) {
      // Ensure we have the right element, and that the user is not dragging a
      // selection (this matches native `select` event behavior). In HTML5, select
      // fires only on input and textarea thus if there's no focused element we
      // won't dispatch.
      var doc = getEventTargetDocument(nativeEventTarget);

      if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
        return null;
      } // Only fire when selection has actually changed.


      var currentSelection = getSelection(activeElement$1);

      if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
        lastSelection = currentSelection;
        var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);
        syntheticEvent.type = 'select';
        syntheticEvent.target = activeElement$1;
        accumulateTwoPhaseDispatches(syntheticEvent);
        return syntheticEvent;
      }

      return null;
    }
    /**
     * This plugin creates an `onSelect` event that normalizes select events
     * across form elements.
     *
     * Supported elements are:
     * - input (see `isTextInputElement`)
     * - textarea
     * - contentEditable
     *
     * This differs from native browser implementations in the following ways:
     * - Fires on contentEditable fields as well as inputs.
     * - Fires for collapsed selection.
     * - Fires after user input.
     */


    var SelectEventPlugin = {
      eventTypes: eventTypes$3,
      extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget) {
        var doc = getEventTargetDocument(nativeEventTarget); // Track whether all listeners exists for this plugin. If none exist, we do
        // not extract events. See #3639.

        if (!doc || !isListeningToAllDependencies('onSelect', doc)) {
          return null;
        }

        var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

        switch (topLevelType) {
          // Track the input node that has focus.
          case TOP_FOCUS:
            if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
              activeElement$1 = targetNode;
              activeElementInst$1 = targetInst;
              lastSelection = null;
            }

            break;

          case TOP_BLUR:
            activeElement$1 = null;
            activeElementInst$1 = null;
            lastSelection = null;
            break;
          // Don't fire the event while the user is dragging. This matches the
          // semantics of the native select event.

          case TOP_MOUSE_DOWN:
            mouseDown = true;
            break;

          case TOP_CONTEXT_MENU:
          case TOP_MOUSE_UP:
          case TOP_DRAG_END:
            mouseDown = false;
            return constructSelectEvent(nativeEvent, nativeEventTarget);
          // Chrome and IE fire non-standard event when selection is changed (and
          // sometimes when it hasn't). IE's event fires out of order with respect
          // to key and input events on deletion, so we discard it.
          //
          // Firefox doesn't support selectionchange, so check selection status
          // after each key entry. The selection changes after keydown and before
          // keyup, but we check on keydown as well in the case of holding down a
          // key, when multiple keydown events are fired but only one keyup is.
          // This is also our approach for IE handling, for the reason above.

          case TOP_SELECTION_CHANGE:
            if (skipSelectionChangeEvent) {
              break;
            }

          // falls through

          case TOP_KEY_DOWN:
          case TOP_KEY_UP:
            return constructSelectEvent(nativeEvent, nativeEventTarget);
        }

        return null;
      }
    };
    /**
     * Inject modules for resolving DOM hierarchy and plugin ordering.
     */

    injection.injectEventPluginOrder(DOMEventPluginOrder);
    setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);
    /**
     * Some important event plugins included by default (without having to require
     * them).
     */

    injection.injectEventPluginsByName({
      SimpleEventPlugin: SimpleEventPlugin,
      EnterLeaveEventPlugin: EnterLeaveEventPlugin,
      ChangeEventPlugin: ChangeEventPlugin,
      SelectEventPlugin: SelectEventPlugin,
      BeforeInputEventPlugin: BeforeInputEventPlugin
    });
    var didWarnSelectedSetOnOption = false;
    var didWarnInvalidChild = false;

    function flattenChildren(children) {
      var content = ''; // Flatten children. We'll warn if they are invalid
      // during validateProps() which runs for hydration too.
      // Note that this would throw on non-element objects.
      // Elements are stringified (which is normally irrelevant
      // but matters for <fbt>).

      React.Children.forEach(children, function (child) {
        if (child == null) {
          return;
        }

        content += child; // Note: we don't warn about invalid children here.
        // Instead, this is done separately below so that
        // it happens during the hydration codepath too.
      });
      return content;
    }
    /**
     * Implements an <option> host component that warns when `selected` is set.
     */


    function validateProps(element, props) {
      {
        // This mirrors the codepath above, but runs for hydration too.
        // Warn about invalid children here so that client and hydration are consistent.
        // TODO: this seems like it could cause a DEV-only throw for hydration
        // if children contains a non-element object. We should try to avoid that.
        if (typeof props.children === 'object' && props.children !== null) {
          React.Children.forEach(props.children, function (child) {
            if (child == null) {
              return;
            }

            if (typeof child === 'string' || typeof child === 'number') {
              return;
            }

            if (typeof child.type !== 'string') {
              return;
            }

            if (!didWarnInvalidChild) {
              didWarnInvalidChild = true;
              warning$1(false, 'Only strings and numbers are supported as <option> children.');
            }
          });
        } // TODO: Remove support for `selected` in <option>.


        if (props.selected != null && !didWarnSelectedSetOnOption) {
          warning$1(false, 'Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');
          didWarnSelectedSetOnOption = true;
        }
      }
    }

    function postMountWrapper$1(element, props) {
      // value="" should make a value attribute (#6219)
      if (props.value != null) {
        element.setAttribute('value', toString(getToStringValue(props.value)));
      }
    }

    function getHostProps$1(element, props) {
      var hostProps = _assign({
        children: undefined
      }, props);

      var content = flattenChildren(props.children);

      if (content) {
        hostProps.children = content;
      }

      return hostProps;
    } // TODO: direct imports like some-package/src/* are bad. Fix me.


    var didWarnValueDefaultValue$1 = void 0;
    {
      didWarnValueDefaultValue$1 = false;
    }

    function getDeclarationErrorAddendum() {
      var ownerName = getCurrentFiberOwnerNameInDevOrNull();

      if (ownerName) {
        return '\n\nCheck the render method of `' + ownerName + '`.';
      }

      return '';
    }

    var valuePropNames = ['value', 'defaultValue'];
    /**
     * Validation function for `value` and `defaultValue`.
     */

    function checkSelectPropTypes(props) {
      ReactControlledValuePropTypes.checkPropTypes('select', props);

      for (var i = 0; i < valuePropNames.length; i++) {
        var propName = valuePropNames[i];

        if (props[propName] == null) {
          continue;
        }

        var isArray = Array.isArray(props[propName]);

        if (props.multiple && !isArray) {
          warning$1(false, 'The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
        } else if (!props.multiple && isArray) {
          warning$1(false, 'The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
        }
      }
    }

    function updateOptions(node, multiple, propValue, setDefaultSelected) {
      var options = node.options;

      if (multiple) {
        var selectedValues = propValue;
        var selectedValue = {};

        for (var i = 0; i < selectedValues.length; i++) {
          // Prefix to avoid chaos with special keys.
          selectedValue['$' + selectedValues[i]] = true;
        }

        for (var _i = 0; _i < options.length; _i++) {
          var selected = selectedValue.hasOwnProperty('$' + options[_i].value);

          if (options[_i].selected !== selected) {
            options[_i].selected = selected;
          }

          if (selected && setDefaultSelected) {
            options[_i].defaultSelected = true;
          }
        }
      } else {
        // Do not set `select.value` as exact behavior isn't consistent across all
        // browsers for all cases.
        var _selectedValue = toString(getToStringValue(propValue));

        var defaultSelected = null;

        for (var _i2 = 0; _i2 < options.length; _i2++) {
          if (options[_i2].value === _selectedValue) {
            options[_i2].selected = true;

            if (setDefaultSelected) {
              options[_i2].defaultSelected = true;
            }

            return;
          }

          if (defaultSelected === null && !options[_i2].disabled) {
            defaultSelected = options[_i2];
          }
        }

        if (defaultSelected !== null) {
          defaultSelected.selected = true;
        }
      }
    }
    /**
     * Implements a <select> host component that allows optionally setting the
     * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
     * stringable. If `multiple` is true, the prop must be an array of stringables.
     *
     * If `value` is not supplied (or null/undefined), user actions that change the
     * selected option will trigger updates to the rendered options.
     *
     * If it is supplied (and not null/undefined), the rendered options will not
     * update in response to user actions. Instead, the `value` prop must change in
     * order for the rendered options to update.
     *
     * If `defaultValue` is provided, any options with the supplied values will be
     * selected.
     */


    function getHostProps$2(element, props) {
      return _assign({}, props, {
        value: undefined
      });
    }

    function initWrapperState$1(element, props) {
      var node = element;
      {
        checkSelectPropTypes(props);
      }
      node._wrapperState = {
        wasMultiple: !!props.multiple
      };
      {
        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
          warning$1(false, 'Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');
          didWarnValueDefaultValue$1 = true;
        }
      }
    }

    function postMountWrapper$2(element, props) {
      var node = element;
      node.multiple = !!props.multiple;
      var value = props.value;

      if (value != null) {
        updateOptions(node, !!props.multiple, value, false);
      } else if (props.defaultValue != null) {
        updateOptions(node, !!props.multiple, props.defaultValue, true);
      }
    }

    function postUpdateWrapper(element, props) {
      var node = element;
      var wasMultiple = node._wrapperState.wasMultiple;
      node._wrapperState.wasMultiple = !!props.multiple;
      var value = props.value;

      if (value != null) {
        updateOptions(node, !!props.multiple, value, false);
      } else if (wasMultiple !== !!props.multiple) {
        // For simplicity, reapply `defaultValue` if `multiple` is toggled.
        if (props.defaultValue != null) {
          updateOptions(node, !!props.multiple, props.defaultValue, true);
        } else {
          // Revert the select back to its default unselected state.
          updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
        }
      }
    }

    function restoreControlledState$2(element, props) {
      var node = element;
      var value = props.value;

      if (value != null) {
        updateOptions(node, !!props.multiple, value, false);
      }
    }

    var didWarnValDefaultVal = false;
    /**
     * Implements a <textarea> host component that allows setting `value`, and
     * `defaultValue`. This differs from the traditional DOM API because value is
     * usually set as PCDATA children.
     *
     * If `value` is not supplied (or null/undefined), user actions that affect the
     * value will trigger updates to the element.
     *
     * If `value` is supplied (and not null/undefined), the rendered element will
     * not trigger updates to the element. Instead, the `value` prop must change in
     * order for the rendered element to be updated.
     *
     * The rendered element will be initialized with an empty value, the prop
     * `defaultValue` if specified, or the children content (deprecated).
     */

    function getHostProps$3(element, props) {
      var node = element;
      !(props.dangerouslySetInnerHTML == null) ? invariant(false, '`dangerouslySetInnerHTML` does not make sense on <textarea>.') : void 0; // Always set children to the same thing. In IE9, the selection range will
      // get reset if `textContent` is mutated.  We could add a check in setTextContent
      // to only set the value if/when the value differs from the node value (which would
      // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
      // solution. The value can be a boolean or object so that's why it's forced
      // to be a string.

      var hostProps = _assign({}, props, {
        value: undefined,
        defaultValue: undefined,
        children: toString(node._wrapperState.initialValue)
      });

      return hostProps;
    }

    function initWrapperState$2(element, props) {
      var node = element;
      {
        ReactControlledValuePropTypes.checkPropTypes('textarea', props);

        if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
          warning$1(false, '%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
          didWarnValDefaultVal = true;
        }
      }
      var initialValue = props.value; // Only bother fetching default value if we're going to use it

      if (initialValue == null) {
        var defaultValue = props.defaultValue; // TODO (yungsters): Remove support for children content in <textarea>.

        var children = props.children;

        if (children != null) {
          {
            warning$1(false, 'Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
          }
          !(defaultValue == null) ? invariant(false, 'If you supply `defaultValue` on a <textarea>, do not pass children.') : void 0;

          if (Array.isArray(children)) {
            !(children.length <= 1) ? invariant(false, '<textarea> can only have at most one child.') : void 0;
            children = children[0];
          }

          defaultValue = children;
        }

        if (defaultValue == null) {
          defaultValue = '';
        }

        initialValue = defaultValue;
      }

      node._wrapperState = {
        initialValue: getToStringValue(initialValue)
      };
    }

    function updateWrapper$1(element, props) {
      var node = element;
      var value = getToStringValue(props.value);
      var defaultValue = getToStringValue(props.defaultValue);

      if (value != null) {
        // Cast `value` to a string to ensure the value is set correctly. While
        // browsers typically do this as necessary, jsdom doesn't.
        var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

        if (newValue !== node.value) {
          node.value = newValue;
        }

        if (props.defaultValue == null && node.defaultValue !== newValue) {
          node.defaultValue = newValue;
        }
      }

      if (defaultValue != null) {
        node.defaultValue = toString(defaultValue);
      }
    }

    function postMountWrapper$3(element, props) {
      var node = element; // This is in postMount because we need access to the DOM node, which is not
      // available until after the component has mounted.

      var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
      // initial value. In IE10/IE11 there is a bug where the placeholder attribute
      // will populate textContent as well.
      // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

      if (textContent === node._wrapperState.initialValue) {
        node.value = textContent;
      }
    }

    function restoreControlledState$3(element, props) {
      // DOM component is still mounted; update
      updateWrapper$1(element, props);
    }

    var HTML_NAMESPACE$1 = 'http://www.w3.org/1999/xhtml';
    var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
    var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
    var Namespaces = {
      html: HTML_NAMESPACE$1,
      mathml: MATH_NAMESPACE,
      svg: SVG_NAMESPACE
    }; // Assumes there is no parent namespace.

    function getIntrinsicNamespace(type) {
      switch (type) {
        case 'svg':
          return SVG_NAMESPACE;

        case 'math':
          return MATH_NAMESPACE;

        default:
          return HTML_NAMESPACE$1;
      }
    }

    function getChildNamespace(parentNamespace, type) {
      if (parentNamespace == null || parentNamespace === HTML_NAMESPACE$1) {
        // No (or default) parent namespace: potential entry point.
        return getIntrinsicNamespace(type);
      }

      if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
        // We're leaving SVG.
        return HTML_NAMESPACE$1;
      } // By default, pass namespace below.


      return parentNamespace;
    }
    /* globals MSApp */

    /**
     * Create a function which has 'unsafe' privileges (required by windows8 apps)
     */


    var createMicrosoftUnsafeLocalFunction = function (func) {
      if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
        return function (arg0, arg1, arg2, arg3) {
          MSApp.execUnsafeLocalFunction(function () {
            return func(arg0, arg1, arg2, arg3);
          });
        };
      } else {
        return func;
      }
    }; // SVG temp container for IE lacking innerHTML


    var reusableSVGContainer = void 0;
    /**
     * Set the innerHTML property of a node
     *
     * @param {DOMElement} node
     * @param {string} html
     * @internal
     */

    var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
      // IE does not have innerHTML for SVG nodes, so instead we inject the
      // new markup in a temp node and then move the child nodes across into
      // the target node
      if (node.namespaceURI === Namespaces.svg && !('innerHTML' in node)) {
        reusableSVGContainer = reusableSVGContainer || document.createElement('div');
        reusableSVGContainer.innerHTML = '<svg>' + html + '</svg>';
        var svgNode = reusableSVGContainer.firstChild;

        while (node.firstChild) {
          node.removeChild(node.firstChild);
        }

        while (svgNode.firstChild) {
          node.appendChild(svgNode.firstChild);
        }
      } else {
        node.innerHTML = html;
      }
    });
    /**
     * Set the textContent property of a node. For text updates, it's faster
     * to set the `nodeValue` of the Text node directly instead of using
     * `.textContent` which will remove the existing node and create a new one.
     *
     * @param {DOMElement} node
     * @param {string} text
     * @internal
     */

    var setTextContent = function (node, text) {
      if (text) {
        var firstChild = node.firstChild;

        if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
          firstChild.nodeValue = text;
          return;
        }
      }

      node.textContent = text;
    }; // List derived from Gecko source code:
    // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js


    var shorthandToLonghand = {
      animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
      background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
      backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
      border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
      borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
      borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
      borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
      borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
      borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
      borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
      borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
      borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
      borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
      borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
      borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
      borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
      borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
      columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
      columns: ['columnCount', 'columnWidth'],
      flex: ['flexBasis', 'flexGrow', 'flexShrink'],
      flexFlow: ['flexDirection', 'flexWrap'],
      font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
      fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
      gap: ['columnGap', 'rowGap'],
      grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
      gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
      gridColumn: ['gridColumnEnd', 'gridColumnStart'],
      gridColumnGap: ['columnGap'],
      gridGap: ['columnGap', 'rowGap'],
      gridRow: ['gridRowEnd', 'gridRowStart'],
      gridRowGap: ['rowGap'],
      gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
      listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
      margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
      marker: ['markerEnd', 'markerMid', 'markerStart'],
      mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
      maskPosition: ['maskPositionX', 'maskPositionY'],
      outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
      overflow: ['overflowX', 'overflowY'],
      padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
      placeContent: ['alignContent', 'justifyContent'],
      placeItems: ['alignItems', 'justifyItems'],
      placeSelf: ['alignSelf', 'justifySelf'],
      textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
      textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
      transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
      wordWrap: ['overflowWrap']
    };
    /**
     * CSS properties which accept numbers but are not in units of "px".
     */

    var isUnitlessNumber = {
      animationIterationCount: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      boxFlex: true,
      boxFlexGroup: true,
      boxOrdinalGroup: true,
      columnCount: true,
      columns: true,
      flex: true,
      flexGrow: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      flexOrder: true,
      gridArea: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowSpan: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnSpan: true,
      gridColumnStart: true,
      fontWeight: true,
      lineClamp: true,
      lineHeight: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      // SVG-related properties
      fillOpacity: true,
      floodOpacity: true,
      stopOpacity: true,
      strokeDasharray: true,
      strokeDashoffset: true,
      strokeMiterlimit: true,
      strokeOpacity: true,
      strokeWidth: true
    };
    /**
     * @param {string} prefix vendor-specific prefix, eg: Webkit
     * @param {string} key style name, eg: transitionDuration
     * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
     * WebkitTransitionDuration
     */

    function prefixKey(prefix, key) {
      return prefix + key.charAt(0).toUpperCase() + key.substring(1);
    }
    /**
     * Support style names that may come passed in prefixed by adding permutations
     * of vendor prefixes.
     */


    var prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
    // infinite loop, because it iterates over the newly added props too.

    Object.keys(isUnitlessNumber).forEach(function (prop) {
      prefixes.forEach(function (prefix) {
        isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
      });
    });
    /**
     * Convert a value into the proper css writable value. The style name `name`
     * should be logical (no hyphens), as specified
     * in `CSSProperty.isUnitlessNumber`.
     *
     * @param {string} name CSS property name such as `topMargin`.
     * @param {*} value CSS property value such as `10px`.
     * @return {string} Normalized style value with dimensions applied.
     */

    function dangerousStyleValue(name, value, isCustomProperty) {
      // Note that we've removed escapeTextForBrowser() calls here since the
      // whole string will be escaped when the attribute is injected into
      // the markup. If you provide unsafe user data here they can inject
      // arbitrary CSS which may be problematic (I couldn't repro this):
      // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
      // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
      // This is not an XSS hole but instead a potential CSS injection issue
      // which has lead to a greater discussion about how we're going to
      // trust URLs moving forward. See #2115901
      var isEmpty = value == null || typeof value === 'boolean' || value === '';

      if (isEmpty) {
        return '';
      }

      if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
        return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
      }

      return ('' + value).trim();
    }

    var uppercasePattern = /([A-Z])/g;
    var msPattern = /^ms-/;
    /**
     * Hyphenates a camelcased CSS property name, for example:
     *
     *   > hyphenateStyleName('backgroundColor')
     *   < "background-color"
     *   > hyphenateStyleName('MozTransition')
     *   < "-moz-transition"
     *   > hyphenateStyleName('msTransition')
     *   < "-ms-transition"
     *
     * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
     * is converted to `-ms-`.
     */

    function hyphenateStyleName(name) {
      return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
    }

    var warnValidStyle = function () {};

    {
      // 'msTransform' is correct, but the other prefixes should be capitalized
      var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
      var msPattern$1 = /^-ms-/;
      var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

      var badStyleValueWithSemicolonPattern = /;\s*$/;
      var warnedStyleNames = {};
      var warnedStyleValues = {};
      var warnedForNaNValue = false;
      var warnedForInfinityValue = false;

      var camelize = function (string) {
        return string.replace(hyphenPattern, function (_, character) {
          return character.toUpperCase();
        });
      };

      var warnHyphenatedStyleName = function (name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }

        warnedStyleNames[name] = true;
        warning$1(false, 'Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
        // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
        // is converted to lowercase `ms`.
        camelize(name.replace(msPattern$1, 'ms-')));
      };

      var warnBadVendoredStyleName = function (name) {
        if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
          return;
        }

        warnedStyleNames[name] = true;
        warning$1(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
      };

      var warnStyleValueWithSemicolon = function (name, value) {
        if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
          return;
        }

        warnedStyleValues[value] = true;
        warning$1(false, "Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
      };

      var warnStyleValueIsNaN = function (name, value) {
        if (warnedForNaNValue) {
          return;
        }

        warnedForNaNValue = true;
        warning$1(false, '`NaN` is an invalid value for the `%s` css style property.', name);
      };

      var warnStyleValueIsInfinity = function (name, value) {
        if (warnedForInfinityValue) {
          return;
        }

        warnedForInfinityValue = true;
        warning$1(false, '`Infinity` is an invalid value for the `%s` css style property.', name);
      };

      warnValidStyle = function (name, value) {
        if (name.indexOf('-') > -1) {
          warnHyphenatedStyleName(name);
        } else if (badVendoredStyleNamePattern.test(name)) {
          warnBadVendoredStyleName(name);
        } else if (badStyleValueWithSemicolonPattern.test(value)) {
          warnStyleValueWithSemicolon(name, value);
        }

        if (typeof value === 'number') {
          if (isNaN(value)) {
            warnStyleValueIsNaN(name, value);
          } else if (!isFinite(value)) {
            warnStyleValueIsInfinity(name, value);
          }
        }
      };
    }
    var warnValidStyle$1 = warnValidStyle;
    /**
     * Operations for dealing with CSS properties.
     */

    /**
     * This creates a string that is expected to be equivalent to the style
     * attribute generated by server-side rendering. It by-passes warnings and
     * security checks so it's not safe to use this value for anything other than
     * comparison. It is only used in DEV for SSR validation.
     */

    function createDangerousStringForStyles(styles) {
      {
        var serialized = '';
        var delimiter = '';

        for (var styleName in styles) {
          if (!styles.hasOwnProperty(styleName)) {
            continue;
          }

          var styleValue = styles[styleName];

          if (styleValue != null) {
            var isCustomProperty = styleName.indexOf('--') === 0;
            serialized += delimiter + hyphenateStyleName(styleName) + ':';
            serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
            delimiter = ';';
          }
        }

        return serialized || null;
      }
    }
    /**
     * Sets the value for multiple styles on a node.  If a value is specified as
     * '' (empty string), the corresponding style property will be unset.
     *
     * @param {DOMElement} node
     * @param {object} styles
     */


    function setValueForStyles(node, styles) {
      var style = node.style;

      for (var styleName in styles) {
        if (!styles.hasOwnProperty(styleName)) {
          continue;
        }

        var isCustomProperty = styleName.indexOf('--') === 0;
        {
          if (!isCustomProperty) {
            warnValidStyle$1(styleName, styles[styleName]);
          }
        }
        var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);

        if (styleName === 'float') {
          styleName = 'cssFloat';
        }

        if (isCustomProperty) {
          style.setProperty(styleName, styleValue);
        } else {
          style[styleName] = styleValue;
        }
      }
    }

    function isValueEmpty(value) {
      return value == null || typeof value === 'boolean' || value === '';
    }
    /**
     * Given {color: 'red', overflow: 'hidden'} returns {
     *   color: 'color',
     *   overflowX: 'overflow',
     *   overflowY: 'overflow',
     * }. This can be read as "the overflowY property was set by the overflow
     * shorthand". That is, the values are the property that each was derived from.
     */


    function expandShorthandMap(styles) {
      var expanded = {};

      for (var key in styles) {
        var longhands = shorthandToLonghand[key] || [key];

        for (var i = 0; i < longhands.length; i++) {
          expanded[longhands[i]] = key;
        }
      }

      return expanded;
    }
    /**
     * When mixing shorthand and longhand property names, we warn during updates if
     * we expect an incorrect result to occur. In particular, we warn for:
     *
     * Updating a shorthand property (longhand gets overwritten):
     *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
     *   becomes .style.font = 'baz'
     * Removing a shorthand property (longhand gets lost too):
     *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
     *   becomes .style.font = ''
     * Removing a longhand property (should revert to shorthand; doesn't):
     *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
     *   becomes .style.fontVariant = ''
     */


    function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
      if (!warnAboutShorthandPropertyCollision) {
        return;
      }

      if (!nextStyles) {
        return;
      }

      var expandedUpdates = expandShorthandMap(styleUpdates);
      var expandedStyles = expandShorthandMap(nextStyles);
      var warnedAbout = {};

      for (var key in expandedUpdates) {
        var originalKey = expandedUpdates[key];
        var correctOriginalKey = expandedStyles[key];

        if (correctOriginalKey && originalKey !== correctOriginalKey) {
          var warningKey = originalKey + ',' + correctOriginalKey;

          if (warnedAbout[warningKey]) {
            continue;
          }

          warnedAbout[warningKey] = true;
          warning$1(false, '%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
        }
      }
    } // For HTML, certain tags should omit their close tag. We keep a whitelist for
    // those special-case tags.


    var omittedCloseTags = {
      area: true,
      base: true,
      br: true,
      col: true,
      embed: true,
      hr: true,
      img: true,
      input: true,
      keygen: true,
      link: true,
      meta: true,
      param: true,
      source: true,
      track: true,
      wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.

    }; // For HTML, certain tags cannot have children. This has the same purpose as
    // `omittedCloseTags` except that `menuitem` should still have its closing tag.

    var voidElementTags = _assign({
      menuitem: true
    }, omittedCloseTags); // TODO: We can remove this if we add invariantWithStack()
    // or add stack by default to invariants where possible.


    var HTML$1 = '__html';
    var ReactDebugCurrentFrame$2 = null;
    {
      ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
    }

    function assertValidProps(tag, props) {
      if (!props) {
        return;
      } // Note the use of `==` which checks for null or undefined.


      if (voidElementTags[tag]) {
        !(props.children == null && props.dangerouslySetInnerHTML == null) ? invariant(false, '%s is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.%s', tag, ReactDebugCurrentFrame$2.getStackAddendum()) : void 0;
      }

      if (props.dangerouslySetInnerHTML != null) {
        !(props.children == null) ? invariant(false, 'Can only set one of `children` or `props.dangerouslySetInnerHTML`.') : void 0;
        !(typeof props.dangerouslySetInnerHTML === 'object' && HTML$1 in props.dangerouslySetInnerHTML) ? invariant(false, '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information.') : void 0;
      }

      {
        !(props.suppressContentEditableWarning || !props.contentEditable || props.children == null) ? warning$1(false, 'A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.') : void 0;
      }
      !(props.style == null || typeof props.style === 'object') ? invariant(false, 'The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + \'em\'}} when using JSX.%s', ReactDebugCurrentFrame$2.getStackAddendum()) : void 0;
    }

    function isCustomComponent(tagName, props) {
      if (tagName.indexOf('-') === -1) {
        return typeof props.is === 'string';
      }

      switch (tagName) {
        // These are reserved SVG and MathML elements.
        // We don't mind this whitelist too much because we expect it to never grow.
        // The alternative is to track the namespace in a few places which is convoluted.
        // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
        case 'annotation-xml':
        case 'color-profile':
        case 'font-face':
        case 'font-face-src':
        case 'font-face-uri':
        case 'font-face-format':
        case 'font-face-name':
        case 'missing-glyph':
          return false;

        default:
          return true;
      }
    } // When adding attributes to the HTML or SVG whitelist, be sure to
    // also add them to this module to ensure casing and incorrect name
    // warnings.


    var possibleStandardNames = {
      // HTML
      accept: 'accept',
      acceptcharset: 'acceptCharset',
      'accept-charset': 'acceptCharset',
      accesskey: 'accessKey',
      action: 'action',
      allowfullscreen: 'allowFullScreen',
      alt: 'alt',
      as: 'as',
      async: 'async',
      autocapitalize: 'autoCapitalize',
      autocomplete: 'autoComplete',
      autocorrect: 'autoCorrect',
      autofocus: 'autoFocus',
      autoplay: 'autoPlay',
      autosave: 'autoSave',
      capture: 'capture',
      cellpadding: 'cellPadding',
      cellspacing: 'cellSpacing',
      challenge: 'challenge',
      charset: 'charSet',
      checked: 'checked',
      children: 'children',
      cite: 'cite',
      class: 'className',
      classid: 'classID',
      classname: 'className',
      cols: 'cols',
      colspan: 'colSpan',
      content: 'content',
      contenteditable: 'contentEditable',
      contextmenu: 'contextMenu',
      controls: 'controls',
      controlslist: 'controlsList',
      coords: 'coords',
      crossorigin: 'crossOrigin',
      dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
      data: 'data',
      datetime: 'dateTime',
      default: 'default',
      defaultchecked: 'defaultChecked',
      defaultvalue: 'defaultValue',
      defer: 'defer',
      dir: 'dir',
      disabled: 'disabled',
      download: 'download',
      draggable: 'draggable',
      enctype: 'encType',
      for: 'htmlFor',
      form: 'form',
      formmethod: 'formMethod',
      formaction: 'formAction',
      formenctype: 'formEncType',
      formnovalidate: 'formNoValidate',
      formtarget: 'formTarget',
      frameborder: 'frameBorder',
      headers: 'headers',
      height: 'height',
      hidden: 'hidden',
      high: 'high',
      href: 'href',
      hreflang: 'hrefLang',
      htmlfor: 'htmlFor',
      httpequiv: 'httpEquiv',
      'http-equiv': 'httpEquiv',
      icon: 'icon',
      id: 'id',
      innerhtml: 'innerHTML',
      inputmode: 'inputMode',
      integrity: 'integrity',
      is: 'is',
      itemid: 'itemID',
      itemprop: 'itemProp',
      itemref: 'itemRef',
      itemscope: 'itemScope',
      itemtype: 'itemType',
      keyparams: 'keyParams',
      keytype: 'keyType',
      kind: 'kind',
      label: 'label',
      lang: 'lang',
      list: 'list',
      loop: 'loop',
      low: 'low',
      manifest: 'manifest',
      marginwidth: 'marginWidth',
      marginheight: 'marginHeight',
      max: 'max',
      maxlength: 'maxLength',
      media: 'media',
      mediagroup: 'mediaGroup',
      method: 'method',
      min: 'min',
      minlength: 'minLength',
      multiple: 'multiple',
      muted: 'muted',
      name: 'name',
      nomodule: 'noModule',
      nonce: 'nonce',
      novalidate: 'noValidate',
      open: 'open',
      optimum: 'optimum',
      pattern: 'pattern',
      placeholder: 'placeholder',
      playsinline: 'playsInline',
      poster: 'poster',
      preload: 'preload',
      profile: 'profile',
      radiogroup: 'radioGroup',
      readonly: 'readOnly',
      referrerpolicy: 'referrerPolicy',
      rel: 'rel',
      required: 'required',
      reversed: 'reversed',
      role: 'role',
      rows: 'rows',
      rowspan: 'rowSpan',
      sandbox: 'sandbox',
      scope: 'scope',
      scoped: 'scoped',
      scrolling: 'scrolling',
      seamless: 'seamless',
      selected: 'selected',
      shape: 'shape',
      size: 'size',
      sizes: 'sizes',
      span: 'span',
      spellcheck: 'spellCheck',
      src: 'src',
      srcdoc: 'srcDoc',
      srclang: 'srcLang',
      srcset: 'srcSet',
      start: 'start',
      step: 'step',
      style: 'style',
      summary: 'summary',
      tabindex: 'tabIndex',
      target: 'target',
      title: 'title',
      type: 'type',
      usemap: 'useMap',
      value: 'value',
      width: 'width',
      wmode: 'wmode',
      wrap: 'wrap',
      // SVG
      about: 'about',
      accentheight: 'accentHeight',
      'accent-height': 'accentHeight',
      accumulate: 'accumulate',
      additive: 'additive',
      alignmentbaseline: 'alignmentBaseline',
      'alignment-baseline': 'alignmentBaseline',
      allowreorder: 'allowReorder',
      alphabetic: 'alphabetic',
      amplitude: 'amplitude',
      arabicform: 'arabicForm',
      'arabic-form': 'arabicForm',
      ascent: 'ascent',
      attributename: 'attributeName',
      attributetype: 'attributeType',
      autoreverse: 'autoReverse',
      azimuth: 'azimuth',
      basefrequency: 'baseFrequency',
      baselineshift: 'baselineShift',
      'baseline-shift': 'baselineShift',
      baseprofile: 'baseProfile',
      bbox: 'bbox',
      begin: 'begin',
      bias: 'bias',
      by: 'by',
      calcmode: 'calcMode',
      capheight: 'capHeight',
      'cap-height': 'capHeight',
      clip: 'clip',
      clippath: 'clipPath',
      'clip-path': 'clipPath',
      clippathunits: 'clipPathUnits',
      cliprule: 'clipRule',
      'clip-rule': 'clipRule',
      color: 'color',
      colorinterpolation: 'colorInterpolation',
      'color-interpolation': 'colorInterpolation',
      colorinterpolationfilters: 'colorInterpolationFilters',
      'color-interpolation-filters': 'colorInterpolationFilters',
      colorprofile: 'colorProfile',
      'color-profile': 'colorProfile',
      colorrendering: 'colorRendering',
      'color-rendering': 'colorRendering',
      contentscripttype: 'contentScriptType',
      contentstyletype: 'contentStyleType',
      cursor: 'cursor',
      cx: 'cx',
      cy: 'cy',
      d: 'd',
      datatype: 'datatype',
      decelerate: 'decelerate',
      descent: 'descent',
      diffuseconstant: 'diffuseConstant',
      direction: 'direction',
      display: 'display',
      divisor: 'divisor',
      dominantbaseline: 'dominantBaseline',
      'dominant-baseline': 'dominantBaseline',
      dur: 'dur',
      dx: 'dx',
      dy: 'dy',
      edgemode: 'edgeMode',
      elevation: 'elevation',
      enablebackground: 'enableBackground',
      'enable-background': 'enableBackground',
      end: 'end',
      exponent: 'exponent',
      externalresourcesrequired: 'externalResourcesRequired',
      fill: 'fill',
      fillopacity: 'fillOpacity',
      'fill-opacity': 'fillOpacity',
      fillrule: 'fillRule',
      'fill-rule': 'fillRule',
      filter: 'filter',
      filterres: 'filterRes',
      filterunits: 'filterUnits',
      floodopacity: 'floodOpacity',
      'flood-opacity': 'floodOpacity',
      floodcolor: 'floodColor',
      'flood-color': 'floodColor',
      focusable: 'focusable',
      fontfamily: 'fontFamily',
      'font-family': 'fontFamily',
      fontsize: 'fontSize',
      'font-size': 'fontSize',
      fontsizeadjust: 'fontSizeAdjust',
      'font-size-adjust': 'fontSizeAdjust',
      fontstretch: 'fontStretch',
      'font-stretch': 'fontStretch',
      fontstyle: 'fontStyle',
      'font-style': 'fontStyle',
      fontvariant: 'fontVariant',
      'font-variant': 'fontVariant',
      fontweight: 'fontWeight',
      'font-weight': 'fontWeight',
      format: 'format',
      from: 'from',
      fx: 'fx',
      fy: 'fy',
      g1: 'g1',
      g2: 'g2',
      glyphname: 'glyphName',
      'glyph-name': 'glyphName',
      glyphorientationhorizontal: 'glyphOrientationHorizontal',
      'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
      glyphorientationvertical: 'glyphOrientationVertical',
      'glyph-orientation-vertical': 'glyphOrientationVertical',
      glyphref: 'glyphRef',
      gradienttransform: 'gradientTransform',
      gradientunits: 'gradientUnits',
      hanging: 'hanging',
      horizadvx: 'horizAdvX',
      'horiz-adv-x': 'horizAdvX',
      horizoriginx: 'horizOriginX',
      'horiz-origin-x': 'horizOriginX',
      ideographic: 'ideographic',
      imagerendering: 'imageRendering',
      'image-rendering': 'imageRendering',
      in2: 'in2',
      in: 'in',
      inlist: 'inlist',
      intercept: 'intercept',
      k1: 'k1',
      k2: 'k2',
      k3: 'k3',
      k4: 'k4',
      k: 'k',
      kernelmatrix: 'kernelMatrix',
      kernelunitlength: 'kernelUnitLength',
      kerning: 'kerning',
      keypoints: 'keyPoints',
      keysplines: 'keySplines',
      keytimes: 'keyTimes',
      lengthadjust: 'lengthAdjust',
      letterspacing: 'letterSpacing',
      'letter-spacing': 'letterSpacing',
      lightingcolor: 'lightingColor',
      'lighting-color': 'lightingColor',
      limitingconeangle: 'limitingConeAngle',
      local: 'local',
      markerend: 'markerEnd',
      'marker-end': 'markerEnd',
      markerheight: 'markerHeight',
      markermid: 'markerMid',
      'marker-mid': 'markerMid',
      markerstart: 'markerStart',
      'marker-start': 'markerStart',
      markerunits: 'markerUnits',
      markerwidth: 'markerWidth',
      mask: 'mask',
      maskcontentunits: 'maskContentUnits',
      maskunits: 'maskUnits',
      mathematical: 'mathematical',
      mode: 'mode',
      numoctaves: 'numOctaves',
      offset: 'offset',
      opacity: 'opacity',
      operator: 'operator',
      order: 'order',
      orient: 'orient',
      orientation: 'orientation',
      origin: 'origin',
      overflow: 'overflow',
      overlineposition: 'overlinePosition',
      'overline-position': 'overlinePosition',
      overlinethickness: 'overlineThickness',
      'overline-thickness': 'overlineThickness',
      paintorder: 'paintOrder',
      'paint-order': 'paintOrder',
      panose1: 'panose1',
      'panose-1': 'panose1',
      pathlength: 'pathLength',
      patterncontentunits: 'patternContentUnits',
      patterntransform: 'patternTransform',
      patternunits: 'patternUnits',
      pointerevents: 'pointerEvents',
      'pointer-events': 'pointerEvents',
      points: 'points',
      pointsatx: 'pointsAtX',
      pointsaty: 'pointsAtY',
      pointsatz: 'pointsAtZ',
      prefix: 'prefix',
      preservealpha: 'preserveAlpha',
      preserveaspectratio: 'preserveAspectRatio',
      primitiveunits: 'primitiveUnits',
      property: 'property',
      r: 'r',
      radius: 'radius',
      refx: 'refX',
      refy: 'refY',
      renderingintent: 'renderingIntent',
      'rendering-intent': 'renderingIntent',
      repeatcount: 'repeatCount',
      repeatdur: 'repeatDur',
      requiredextensions: 'requiredExtensions',
      requiredfeatures: 'requiredFeatures',
      resource: 'resource',
      restart: 'restart',
      result: 'result',
      results: 'results',
      rotate: 'rotate',
      rx: 'rx',
      ry: 'ry',
      scale: 'scale',
      security: 'security',
      seed: 'seed',
      shaperendering: 'shapeRendering',
      'shape-rendering': 'shapeRendering',
      slope: 'slope',
      spacing: 'spacing',
      specularconstant: 'specularConstant',
      specularexponent: 'specularExponent',
      speed: 'speed',
      spreadmethod: 'spreadMethod',
      startoffset: 'startOffset',
      stddeviation: 'stdDeviation',
      stemh: 'stemh',
      stemv: 'stemv',
      stitchtiles: 'stitchTiles',
      stopcolor: 'stopColor',
      'stop-color': 'stopColor',
      stopopacity: 'stopOpacity',
      'stop-opacity': 'stopOpacity',
      strikethroughposition: 'strikethroughPosition',
      'strikethrough-position': 'strikethroughPosition',
      strikethroughthickness: 'strikethroughThickness',
      'strikethrough-thickness': 'strikethroughThickness',
      string: 'string',
      stroke: 'stroke',
      strokedasharray: 'strokeDasharray',
      'stroke-dasharray': 'strokeDasharray',
      strokedashoffset: 'strokeDashoffset',
      'stroke-dashoffset': 'strokeDashoffset',
      strokelinecap: 'strokeLinecap',
      'stroke-linecap': 'strokeLinecap',
      strokelinejoin: 'strokeLinejoin',
      'stroke-linejoin': 'strokeLinejoin',
      strokemiterlimit: 'strokeMiterlimit',
      'stroke-miterlimit': 'strokeMiterlimit',
      strokewidth: 'strokeWidth',
      'stroke-width': 'strokeWidth',
      strokeopacity: 'strokeOpacity',
      'stroke-opacity': 'strokeOpacity',
      suppresscontenteditablewarning: 'suppressContentEditableWarning',
      suppresshydrationwarning: 'suppressHydrationWarning',
      surfacescale: 'surfaceScale',
      systemlanguage: 'systemLanguage',
      tablevalues: 'tableValues',
      targetx: 'targetX',
      targety: 'targetY',
      textanchor: 'textAnchor',
      'text-anchor': 'textAnchor',
      textdecoration: 'textDecoration',
      'text-decoration': 'textDecoration',
      textlength: 'textLength',
      textrendering: 'textRendering',
      'text-rendering': 'textRendering',
      to: 'to',
      transform: 'transform',
      typeof: 'typeof',
      u1: 'u1',
      u2: 'u2',
      underlineposition: 'underlinePosition',
      'underline-position': 'underlinePosition',
      underlinethickness: 'underlineThickness',
      'underline-thickness': 'underlineThickness',
      unicode: 'unicode',
      unicodebidi: 'unicodeBidi',
      'unicode-bidi': 'unicodeBidi',
      unicoderange: 'unicodeRange',
      'unicode-range': 'unicodeRange',
      unitsperem: 'unitsPerEm',
      'units-per-em': 'unitsPerEm',
      unselectable: 'unselectable',
      valphabetic: 'vAlphabetic',
      'v-alphabetic': 'vAlphabetic',
      values: 'values',
      vectoreffect: 'vectorEffect',
      'vector-effect': 'vectorEffect',
      version: 'version',
      vertadvy: 'vertAdvY',
      'vert-adv-y': 'vertAdvY',
      vertoriginx: 'vertOriginX',
      'vert-origin-x': 'vertOriginX',
      vertoriginy: 'vertOriginY',
      'vert-origin-y': 'vertOriginY',
      vhanging: 'vHanging',
      'v-hanging': 'vHanging',
      videographic: 'vIdeographic',
      'v-ideographic': 'vIdeographic',
      viewbox: 'viewBox',
      viewtarget: 'viewTarget',
      visibility: 'visibility',
      vmathematical: 'vMathematical',
      'v-mathematical': 'vMathematical',
      vocab: 'vocab',
      widths: 'widths',
      wordspacing: 'wordSpacing',
      'word-spacing': 'wordSpacing',
      writingmode: 'writingMode',
      'writing-mode': 'writingMode',
      x1: 'x1',
      x2: 'x2',
      x: 'x',
      xchannelselector: 'xChannelSelector',
      xheight: 'xHeight',
      'x-height': 'xHeight',
      xlinkactuate: 'xlinkActuate',
      'xlink:actuate': 'xlinkActuate',
      xlinkarcrole: 'xlinkArcrole',
      'xlink:arcrole': 'xlinkArcrole',
      xlinkhref: 'xlinkHref',
      'xlink:href': 'xlinkHref',
      xlinkrole: 'xlinkRole',
      'xlink:role': 'xlinkRole',
      xlinkshow: 'xlinkShow',
      'xlink:show': 'xlinkShow',
      xlinktitle: 'xlinkTitle',
      'xlink:title': 'xlinkTitle',
      xlinktype: 'xlinkType',
      'xlink:type': 'xlinkType',
      xmlbase: 'xmlBase',
      'xml:base': 'xmlBase',
      xmllang: 'xmlLang',
      'xml:lang': 'xmlLang',
      xmlns: 'xmlns',
      'xml:space': 'xmlSpace',
      xmlnsxlink: 'xmlnsXlink',
      'xmlns:xlink': 'xmlnsXlink',
      xmlspace: 'xmlSpace',
      y1: 'y1',
      y2: 'y2',
      y: 'y',
      ychannelselector: 'yChannelSelector',
      z: 'z',
      zoomandpan: 'zoomAndPan'
    };
    var ariaProperties = {
      'aria-current': 0,
      // state
      'aria-details': 0,
      'aria-disabled': 0,
      // state
      'aria-hidden': 0,
      // state
      'aria-invalid': 0,
      // state
      'aria-keyshortcuts': 0,
      'aria-label': 0,
      'aria-roledescription': 0,
      // Widget Attributes
      'aria-autocomplete': 0,
      'aria-checked': 0,
      'aria-expanded': 0,
      'aria-haspopup': 0,
      'aria-level': 0,
      'aria-modal': 0,
      'aria-multiline': 0,
      'aria-multiselectable': 0,
      'aria-orientation': 0,
      'aria-placeholder': 0,
      'aria-pressed': 0,
      'aria-readonly': 0,
      'aria-required': 0,
      'aria-selected': 0,
      'aria-sort': 0,
      'aria-valuemax': 0,
      'aria-valuemin': 0,
      'aria-valuenow': 0,
      'aria-valuetext': 0,
      // Live Region Attributes
      'aria-atomic': 0,
      'aria-busy': 0,
      'aria-live': 0,
      'aria-relevant': 0,
      // Drag-and-Drop Attributes
      'aria-dropeffect': 0,
      'aria-grabbed': 0,
      // Relationship Attributes
      'aria-activedescendant': 0,
      'aria-colcount': 0,
      'aria-colindex': 0,
      'aria-colspan': 0,
      'aria-controls': 0,
      'aria-describedby': 0,
      'aria-errormessage': 0,
      'aria-flowto': 0,
      'aria-labelledby': 0,
      'aria-owns': 0,
      'aria-posinset': 0,
      'aria-rowcount': 0,
      'aria-rowindex': 0,
      'aria-rowspan': 0,
      'aria-setsize': 0
    };
    var warnedProperties = {};
    var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
    var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
    var hasOwnProperty$2 = Object.prototype.hasOwnProperty;

    function validateProperty(tagName, name) {
      if (hasOwnProperty$2.call(warnedProperties, name) && warnedProperties[name]) {
        return true;
      }

      if (rARIACamel.test(name)) {
        var ariaName = 'aria-' + name.slice(4).toLowerCase();
        var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
        // DOM properties, then it is an invalid aria-* attribute.

        if (correctName == null) {
          warning$1(false, 'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);
          warnedProperties[name] = true;
          return true;
        } // aria-* attributes should be lowercase; suggest the lowercase version.


        if (name !== correctName) {
          warning$1(false, 'Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);
          warnedProperties[name] = true;
          return true;
        }
      }

      if (rARIA.test(name)) {
        var lowerCasedName = name.toLowerCase();
        var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
        // DOM properties, then it is an invalid aria-* attribute.

        if (standardName == null) {
          warnedProperties[name] = true;
          return false;
        } // aria-* attributes should be lowercase; suggest the lowercase version.


        if (name !== standardName) {
          warning$1(false, 'Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);
          warnedProperties[name] = true;
          return true;
        }
      }

      return true;
    }

    function warnInvalidARIAProps(type, props) {
      var invalidProps = [];

      for (var key in props) {
        var isValid = validateProperty(type, key);

        if (!isValid) {
          invalidProps.push(key);
        }
      }

      var unknownPropString = invalidProps.map(function (prop) {
        return '`' + prop + '`';
      }).join(', ');

      if (invalidProps.length === 1) {
        warning$1(false, 'Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
      } else if (invalidProps.length > 1) {
        warning$1(false, 'Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
      }
    }

    function validateProperties(type, props) {
      if (isCustomComponent(type, props)) {
        return;
      }

      warnInvalidARIAProps(type, props);
    }

    var didWarnValueNull = false;

    function validateProperties$1(type, props) {
      if (type !== 'input' && type !== 'textarea' && type !== 'select') {
        return;
      }

      if (props != null && props.value === null && !didWarnValueNull) {
        didWarnValueNull = true;

        if (type === 'select' && props.multiple) {
          warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
        } else {
          warning$1(false, '`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
        }
      }
    }

    var validateProperty$1 = function () {};

    {
      var warnedProperties$1 = {};
      var _hasOwnProperty = Object.prototype.hasOwnProperty;
      var EVENT_NAME_REGEX = /^on./;
      var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
      var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
      var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

      validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
        if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
          return true;
        }

        var lowerCasedName = name.toLowerCase();

        if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
          warning$1(false, 'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');
          warnedProperties$1[name] = true;
          return true;
        } // We can't rely on the event system being injected on the server.


        if (canUseEventSystem) {
          if (registrationNameModules.hasOwnProperty(name)) {
            return true;
          }

          var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

          if (registrationName != null) {
            warning$1(false, 'Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);
            warnedProperties$1[name] = true;
            return true;
          }

          if (EVENT_NAME_REGEX.test(name)) {
            warning$1(false, 'Unknown event handler property `%s`. It will be ignored.', name);
            warnedProperties$1[name] = true;
            return true;
          }
        } else if (EVENT_NAME_REGEX.test(name)) {
          // If no event plugins have been injected, we are in a server environment.
          // So we can't tell if the event name is correct for sure, but we can filter
          // out known bad ones like `onclick`. We can't suggest a specific replacement though.
          if (INVALID_EVENT_NAME_REGEX.test(name)) {
            warning$1(false, 'Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
          }

          warnedProperties$1[name] = true;
          return true;
        } // Let the ARIA attribute hook validate ARIA attributes


        if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
          return true;
        }

        if (lowerCasedName === 'innerhtml') {
          warning$1(false, 'Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');
          warnedProperties$1[name] = true;
          return true;
        }

        if (lowerCasedName === 'aria') {
          warning$1(false, 'The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');
          warnedProperties$1[name] = true;
          return true;
        }

        if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
          warning$1(false, 'Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);
          warnedProperties$1[name] = true;
          return true;
        }

        if (typeof value === 'number' && isNaN(value)) {
          warning$1(false, 'Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);
          warnedProperties$1[name] = true;
          return true;
        }

        var propertyInfo = getPropertyInfo(name);
        var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

        if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
          var standardName = possibleStandardNames[lowerCasedName];

          if (standardName !== name) {
            warning$1(false, 'Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);
            warnedProperties$1[name] = true;
            return true;
          }
        } else if (!isReserved && name !== lowerCasedName) {
          // Unknown attributes should have lowercase casing since that's how they
          // will be cased anyway with server rendering.
          warning$1(false, 'React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);
          warnedProperties$1[name] = true;
          return true;
        }

        if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
          if (value) {
            warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
          } else {
            warning$1(false, 'Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
          }

          warnedProperties$1[name] = true;
          return true;
        } // Now that we've validated casing, do not validate
        // data types for reserved props


        if (isReserved) {
          return true;
        } // Warn when a known attribute is a bad type


        if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
          warnedProperties$1[name] = true;
          return false;
        } // Warn when passing the strings 'false' or 'true' into a boolean prop


        if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
          warning$1(false, 'Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
          warnedProperties$1[name] = true;
          return true;
        }

        return true;
      };
    }

    var warnUnknownProperties = function (type, props, canUseEventSystem) {
      var unknownProps = [];

      for (var key in props) {
        var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);

        if (!isValid) {
          unknownProps.push(key);
        }
      }

      var unknownPropString = unknownProps.map(function (prop) {
        return '`' + prop + '`';
      }).join(', ');

      if (unknownProps.length === 1) {
        warning$1(false, 'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
      } else if (unknownProps.length > 1) {
        warning$1(false, 'Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
      }
    };

    function validateProperties$2(type, props, canUseEventSystem) {
      if (isCustomComponent(type, props)) {
        return;
      }

      warnUnknownProperties(type, props, canUseEventSystem);
    } // TODO: direct imports like some-package/src/* are bad. Fix me.


    var didWarnInvalidHydration = false;
    var didWarnShadyDOM = false;
    var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
    var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
    var SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
    var AUTOFOCUS = 'autoFocus';
    var CHILDREN = 'children';
    var STYLE$1 = 'style';
    var HTML = '__html';
    var HTML_NAMESPACE = Namespaces.html;
    var warnedUnknownTags = void 0;
    var suppressHydrationWarning = void 0;
    var validatePropertiesInDevelopment = void 0;
    var warnForTextDifference = void 0;
    var warnForPropDifference = void 0;
    var warnForExtraAttributes = void 0;
    var warnForInvalidEventListener = void 0;
    var canDiffStyleForHydrationWarning = void 0;
    var normalizeMarkupForTextOrAttribute = void 0;
    var normalizeHTML = void 0;
    {
      warnedUnknownTags = {
        // Chrome is the only major browser not shipping <time>. But as of July
        // 2017 it intends to ship it due to widespread usage. We intentionally
        // *don't* warn for <time> even if it's unrecognized by Chrome because
        // it soon will be, and many apps have been using it anyway.
        time: true,
        // There are working polyfills for <dialog>. Let people use it.
        dialog: true,
        // Electron ships a custom <webview> tag to display external web content in
        // an isolated frame and process.
        // This tag is not present in non Electron environments such as JSDom which
        // is often used for testing purposes.
        // @see https://electronjs.org/docs/api/webview-tag
        webview: true
      };

      validatePropertiesInDevelopment = function (type, props) {
        validateProperties(type, props);
        validateProperties$1(type, props);
        validateProperties$2(type, props,
        /* canUseEventSystem */
        true);
      }; // IE 11 parses & normalizes the style attribute as opposed to other
      // browsers. It adds spaces and sorts the properties in some
      // non-alphabetical order. Handling that would require sorting CSS
      // properties in the client & server versions or applying
      // `expectedStyle` to a temporary DOM node to read its `style` attribute
      // normalized. Since it only affects IE, we're skipping style warnings
      // in that browser completely in favor of doing all that work.
      // See https://github.com/facebook/react/issues/11807


      canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
      // It also can turn \u0000 into \uFFFD inside attributes.
      // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
      // If we have a mismatch, it might be caused by that.
      // We will still patch up in this case but not fire the warning.

      var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
      var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

      normalizeMarkupForTextOrAttribute = function (markup) {
        var markupString = typeof markup === 'string' ? markup : '' + markup;
        return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
      };

      warnForTextDifference = function (serverText, clientText) {
        if (didWarnInvalidHydration) {
          return;
        }

        var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
        var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);

        if (normalizedServerText === normalizedClientText) {
          return;
        }

        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
      };

      warnForPropDifference = function (propName, serverValue, clientValue) {
        if (didWarnInvalidHydration) {
          return;
        }

        var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
        var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);

        if (normalizedServerValue === normalizedClientValue) {
          return;
        }

        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
      };

      warnForExtraAttributes = function (attributeNames) {
        if (didWarnInvalidHydration) {
          return;
        }

        didWarnInvalidHydration = true;
        var names = [];
        attributeNames.forEach(function (name) {
          names.push(name);
        });
        warningWithoutStack$1(false, 'Extra attributes from the server: %s', names);
      };

      warnForInvalidEventListener = function (registrationName, listener) {
        if (listener === false) {
          warning$1(false, 'Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
        } else {
          warning$1(false, 'Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
        }
      }; // Parse the HTML and read it back to normalize the HTML string so that it
      // can be used for comparison.


      normalizeHTML = function (parent, html) {
        // We could have created a separate document here to avoid
        // re-initializing custom elements if they exist. But this breaks
        // how <noscript> is being handled. So we use the same document.
        // See the discussion in https://github.com/facebook/react/pull/11157.
        var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
        testElement.innerHTML = html;
        return testElement.innerHTML;
      };
    }

    function ensureListeningTo(rootContainerElement, registrationName) {
      var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
      var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
      listenTo(registrationName, doc);
    }

    function getOwnerDocumentFromRootContainer(rootContainerElement) {
      return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
    }

    function noop() {}

    function trapClickOnNonInteractiveElement(node) {
      // Mobile Safari does not fire properly bubble click events on
      // non-interactive elements, which means delegated click listeners do not
      // fire. The workaround for this bug involves attaching an empty click
      // listener on the target node.
      // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
      // Just set it using the onclick property so that we don't have to manage any
      // bookkeeping for it. Not sure if we need to clear it when the listener is
      // removed.
      // TODO: Only do this for the relevant Safaris maybe?
      node.onclick = noop;
    }

    function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
      for (var propKey in nextProps) {
        if (!nextProps.hasOwnProperty(propKey)) {
          continue;
        }

        var nextProp = nextProps[propKey];

        if (propKey === STYLE$1) {
          {
            if (nextProp) {
              // Freeze the next style object so that we can assume it won't be
              // mutated. We have already warned for this in the past.
              Object.freeze(nextProp);
            }
          } // Relies on `updateStylesByID` not mutating `styleUpdates`.

          setValueForStyles(domElement, nextProp);
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          var nextHtml = nextProp ? nextProp[HTML] : undefined;

          if (nextHtml != null) {
            setInnerHTML(domElement, nextHtml);
          }
        } else if (propKey === CHILDREN) {
          if (typeof nextProp === 'string') {
            // Avoid setting initial textContent when the text is empty. In IE11 setting
            // textContent on a <textarea> will cause the placeholder to not
            // show within the <textarea> until it has been focused and blurred again.
            // https://github.com/facebook/react/issues/6731#issuecomment-254874553
            var canSetTextContent = tag !== 'textarea' || nextProp !== '';

            if (canSetTextContent) {
              setTextContent(domElement, nextProp);
            }
          } else if (typeof nextProp === 'number') {
            setTextContent(domElement, '' + nextProp);
          }
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {// Noop
        } else if (propKey === AUTOFOCUS) {// We polyfill it separately on the client during commit.
          // We could have excluded it in the property list instead of
          // adding a special case here, but then it wouldn't be emitted
          // on server rendering (but we *do* want to emit it in SSR).
        } else if (registrationNameModules.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if ( true && typeof nextProp !== 'function') {
              warnForInvalidEventListener(propKey, nextProp);
            }

            ensureListeningTo(rootContainerElement, propKey);
          }
        } else if (nextProp != null) {
          setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
        }
      }
    }

    function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
      // TODO: Handle wasCustomComponentTag
      for (var i = 0; i < updatePayload.length; i += 2) {
        var propKey = updatePayload[i];
        var propValue = updatePayload[i + 1];

        if (propKey === STYLE$1) {
          setValueForStyles(domElement, propValue);
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          setInnerHTML(domElement, propValue);
        } else if (propKey === CHILDREN) {
          setTextContent(domElement, propValue);
        } else {
          setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
        }
      }
    }

    function createElement(type, props, rootContainerElement, parentNamespace) {
      var isCustomComponentTag = void 0; // We create tags in the namespace of their parent container, except HTML
      // tags get no namespace.

      var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
      var domElement = void 0;
      var namespaceURI = parentNamespace;

      if (namespaceURI === HTML_NAMESPACE) {
        namespaceURI = getIntrinsicNamespace(type);
      }

      if (namespaceURI === HTML_NAMESPACE) {
        {
          isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
          // allow <SVG> or <mATH>.

          !(isCustomComponentTag || type === type.toLowerCase()) ? warning$1(false, '<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type) : void 0;
        }

        if (type === 'script') {
          // Create the script via .innerHTML so its "parser-inserted" flag is
          // set to true and it does not execute
          var div = ownerDocument.createElement('div');
          div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
          // This is guaranteed to yield a script element.

          var firstChild = div.firstChild;
          domElement = div.removeChild(firstChild);
        } else if (typeof props.is === 'string') {
          // $FlowIssue `createElement` should be updated for Web Components
          domElement = ownerDocument.createElement(type, {
            is: props.is
          });
        } else {
          // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
          // See discussion in https://github.com/facebook/react/pull/6896
          // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
          domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
          // attributes on `select`s needs to be added before `option`s are inserted.
          // This prevents:
          // - a bug where the `select` does not scroll to the correct option because singular
          //  `select` elements automatically pick the first item #13222
          // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
          // See https://github.com/facebook/react/issues/13222
          // and https://github.com/facebook/react/issues/14239

          if (type === 'select') {
            var node = domElement;

            if (props.multiple) {
              node.multiple = true;
            } else if (props.size) {
              // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
              // it is possible that no option is selected.
              //
              // This is only necessary when a select in "single selection mode".
              node.size = props.size;
            }
          }
        }
      } else {
        domElement = ownerDocument.createElementNS(namespaceURI, type);
      }

      {
        if (namespaceURI === HTML_NAMESPACE) {
          if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
            warnedUnknownTags[type] = true;
            warning$1(false, 'The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
          }
        }
      }
      return domElement;
    }

    function createTextNode(text, rootContainerElement) {
      return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
    }

    function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
      var isCustomComponentTag = isCustomComponent(tag, rawProps);
      {
        validatePropertiesInDevelopment(tag, rawProps);

        if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
          warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
          didWarnShadyDOM = true;
        }
      } // TODO: Make sure that we check isMounted before firing any of these events.

      var props = void 0;

      switch (tag) {
        case 'iframe':
        case 'object':
          trapBubbledEvent(TOP_LOAD, domElement);
          props = rawProps;
          break;

        case 'video':
        case 'audio':
          // Create listener for each media event
          for (var i = 0; i < mediaEventTypes.length; i++) {
            trapBubbledEvent(mediaEventTypes[i], domElement);
          }

          props = rawProps;
          break;

        case 'source':
          trapBubbledEvent(TOP_ERROR, domElement);
          props = rawProps;
          break;

        case 'img':
        case 'image':
        case 'link':
          trapBubbledEvent(TOP_ERROR, domElement);
          trapBubbledEvent(TOP_LOAD, domElement);
          props = rawProps;
          break;

        case 'form':
          trapBubbledEvent(TOP_RESET, domElement);
          trapBubbledEvent(TOP_SUBMIT, domElement);
          props = rawProps;
          break;

        case 'details':
          trapBubbledEvent(TOP_TOGGLE, domElement);
          props = rawProps;
          break;

        case 'input':
          initWrapperState(domElement, rawProps);
          props = getHostProps(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.

          ensureListeningTo(rootContainerElement, 'onChange');
          break;

        case 'option':
          validateProps(domElement, rawProps);
          props = getHostProps$1(domElement, rawProps);
          break;

        case 'select':
          initWrapperState$1(domElement, rawProps);
          props = getHostProps$2(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.

          ensureListeningTo(rootContainerElement, 'onChange');
          break;

        case 'textarea':
          initWrapperState$2(domElement, rawProps);
          props = getHostProps$3(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.

          ensureListeningTo(rootContainerElement, 'onChange');
          break;

        default:
          props = rawProps;
      }

      assertValidProps(tag, props);
      setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

      switch (tag) {
        case 'input':
          // TODO: Make sure we check if this is still unmounted or do any clean
          // up necessary since we never stop tracking anymore.
          track(domElement);
          postMountWrapper(domElement, rawProps, false);
          break;

        case 'textarea':
          // TODO: Make sure we check if this is still unmounted or do any clean
          // up necessary since we never stop tracking anymore.
          track(domElement);
          postMountWrapper$3(domElement, rawProps);
          break;

        case 'option':
          postMountWrapper$1(domElement, rawProps);
          break;

        case 'select':
          postMountWrapper$2(domElement, rawProps);
          break;

        default:
          if (typeof props.onClick === 'function') {
            // TODO: This cast may not be sound for SVG, MathML or custom elements.
            trapClickOnNonInteractiveElement(domElement);
          }

          break;
      }
    } // Calculate the diff between the two objects.


    function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
      {
        validatePropertiesInDevelopment(tag, nextRawProps);
      }
      var updatePayload = null;
      var lastProps = void 0;
      var nextProps = void 0;

      switch (tag) {
        case 'input':
          lastProps = getHostProps(domElement, lastRawProps);
          nextProps = getHostProps(domElement, nextRawProps);
          updatePayload = [];
          break;

        case 'option':
          lastProps = getHostProps$1(domElement, lastRawProps);
          nextProps = getHostProps$1(domElement, nextRawProps);
          updatePayload = [];
          break;

        case 'select':
          lastProps = getHostProps$2(domElement, lastRawProps);
          nextProps = getHostProps$2(domElement, nextRawProps);
          updatePayload = [];
          break;

        case 'textarea':
          lastProps = getHostProps$3(domElement, lastRawProps);
          nextProps = getHostProps$3(domElement, nextRawProps);
          updatePayload = [];
          break;

        default:
          lastProps = lastRawProps;
          nextProps = nextRawProps;

          if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
            // TODO: This cast may not be sound for SVG, MathML or custom elements.
            trapClickOnNonInteractiveElement(domElement);
          }

          break;
      }

      assertValidProps(tag, nextProps);
      var propKey = void 0;
      var styleName = void 0;
      var styleUpdates = null;

      for (propKey in lastProps) {
        if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
          continue;
        }

        if (propKey === STYLE$1) {
          var lastStyle = lastProps[propKey];

          for (styleName in lastStyle) {
            if (lastStyle.hasOwnProperty(styleName)) {
              if (!styleUpdates) {
                styleUpdates = {};
              }

              styleUpdates[styleName] = '';
            }
          }
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) {// Noop. This is handled by the clear text mechanism.
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {// Noop
        } else if (propKey === AUTOFOCUS) {// Noop. It doesn't work on updates anyway.
        } else if (registrationNameModules.hasOwnProperty(propKey)) {
          // This is a special case. If any listener updates we need to ensure
          // that the "current" fiber pointer gets updated so we need a commit
          // to update this element.
          if (!updatePayload) {
            updatePayload = [];
          }
        } else {
          // For all other deleted properties we add it to the queue. We use
          // the whitelist in the commit phase instead.
          (updatePayload = updatePayload || []).push(propKey, null);
        }
      }

      for (propKey in nextProps) {
        var nextProp = nextProps[propKey];
        var lastProp = lastProps != null ? lastProps[propKey] : undefined;

        if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
          continue;
        }

        if (propKey === STYLE$1) {
          {
            if (nextProp) {
              // Freeze the next style object so that we can assume it won't be
              // mutated. We have already warned for this in the past.
              Object.freeze(nextProp);
            }
          }

          if (lastProp) {
            // Unset styles on `lastProp` but not on `nextProp`.
            for (styleName in lastProp) {
              if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }

                styleUpdates[styleName] = '';
              }
            } // Update styles that changed since `lastProp`.


            for (styleName in nextProp) {
              if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                if (!styleUpdates) {
                  styleUpdates = {};
                }

                styleUpdates[styleName] = nextProp[styleName];
              }
            }
          } else {
            // Relies on `updateStylesByID` not mutating `styleUpdates`.
            if (!styleUpdates) {
              if (!updatePayload) {
                updatePayload = [];
              }

              updatePayload.push(propKey, styleUpdates);
            }

            styleUpdates = nextProp;
          }
        } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
          var nextHtml = nextProp ? nextProp[HTML] : undefined;
          var lastHtml = lastProp ? lastProp[HTML] : undefined;

          if (nextHtml != null) {
            if (lastHtml !== nextHtml) {
              (updatePayload = updatePayload || []).push(propKey, '' + nextHtml);
            }
          } else {// TODO: It might be too late to clear this if we have children
            // inserted already.
          }
        } else if (propKey === CHILDREN) {
          if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
            (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
          }
        } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1) {// Noop
        } else if (registrationNameModules.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            // We eagerly listen to this even though we haven't committed yet.
            if ( true && typeof nextProp !== 'function') {
              warnForInvalidEventListener(propKey, nextProp);
            }

            ensureListeningTo(rootContainerElement, propKey);
          }

          if (!updatePayload && lastProp !== nextProp) {
            // This is a special case. If any listener updates we need to ensure
            // that the "current" props pointer gets updated so we need a commit
            // to update this element.
            updatePayload = [];
          }
        } else {
          // For any other property we always add it to the queue and then we
          // filter it out using the whitelist during the commit.
          (updatePayload = updatePayload || []).push(propKey, nextProp);
        }
      }

      if (styleUpdates) {
        {
          validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE$1]);
        }
        (updatePayload = updatePayload || []).push(STYLE$1, styleUpdates);
      }

      return updatePayload;
    } // Apply the diff.


    function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
      // Update checked *before* name.
      // In the middle of an update, it is possible to have multiple checked.
      // When a checked radio tries to change name, browser makes another radio's checked false.
      if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
        updateChecked(domElement, nextRawProps);
      }

      var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
      var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

      updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
      // changed.

      switch (tag) {
        case 'input':
          // Update the wrapper around inputs *after* updating props. This has to
          // happen after `updateDOMProperties`. Otherwise HTML5 input validations
          // raise warnings and prevent the new value from being assigned.
          updateWrapper(domElement, nextRawProps);
          break;

        case 'textarea':
          updateWrapper$1(domElement, nextRawProps);
          break;

        case 'select':
          // <select> value update needs to occur after <option> children
          // reconciliation
          postUpdateWrapper(domElement, nextRawProps);
          break;
      }
    }

    function getPossibleStandardName(propName) {
      {
        var lowerCasedName = propName.toLowerCase();

        if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
          return null;
        }

        return possibleStandardNames[lowerCasedName] || null;
      }
      return null;
    }

    function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
      var isCustomComponentTag = void 0;
      var extraAttributeNames = void 0;
      {
        suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING$1] === true;
        isCustomComponentTag = isCustomComponent(tag, rawProps);
        validatePropertiesInDevelopment(tag, rawProps);

        if (isCustomComponentTag && !didWarnShadyDOM && domElement.shadyRoot) {
          warning$1(false, '%s is using shady DOM. Using shady DOM with React can ' + 'cause things to break subtly.', getCurrentFiberOwnerNameInDevOrNull() || 'A component');
          didWarnShadyDOM = true;
        }
      } // TODO: Make sure that we check isMounted before firing any of these events.

      switch (tag) {
        case 'iframe':
        case 'object':
          trapBubbledEvent(TOP_LOAD, domElement);
          break;

        case 'video':
        case 'audio':
          // Create listener for each media event
          for (var i = 0; i < mediaEventTypes.length; i++) {
            trapBubbledEvent(mediaEventTypes[i], domElement);
          }

          break;

        case 'source':
          trapBubbledEvent(TOP_ERROR, domElement);
          break;

        case 'img':
        case 'image':
        case 'link':
          trapBubbledEvent(TOP_ERROR, domElement);
          trapBubbledEvent(TOP_LOAD, domElement);
          break;

        case 'form':
          trapBubbledEvent(TOP_RESET, domElement);
          trapBubbledEvent(TOP_SUBMIT, domElement);
          break;

        case 'details':
          trapBubbledEvent(TOP_TOGGLE, domElement);
          break;

        case 'input':
          initWrapperState(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.

          ensureListeningTo(rootContainerElement, 'onChange');
          break;

        case 'option':
          validateProps(domElement, rawProps);
          break;

        case 'select':
          initWrapperState$1(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.

          ensureListeningTo(rootContainerElement, 'onChange');
          break;

        case 'textarea':
          initWrapperState$2(domElement, rawProps);
          trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
          // to onChange. Even if there is no listener.

          ensureListeningTo(rootContainerElement, 'onChange');
          break;
      }

      assertValidProps(tag, rawProps);
      {
        extraAttributeNames = new Set();
        var attributes = domElement.attributes;

        for (var _i = 0; _i < attributes.length; _i++) {
          var name = attributes[_i].name.toLowerCase();

          switch (name) {
            // Built-in SSR attribute is whitelisted
            case 'data-reactroot':
              break;
            // Controlled attributes are not validated
            // TODO: Only ignore them on controlled tags.

            case 'value':
              break;

            case 'checked':
              break;

            case 'selected':
              break;

            default:
              // Intentionally use the original name.
              // See discussion in https://github.com/facebook/react/pull/10676.
              extraAttributeNames.add(attributes[_i].name);
          }
        }
      }
      var updatePayload = null;

      for (var propKey in rawProps) {
        if (!rawProps.hasOwnProperty(propKey)) {
          continue;
        }

        var nextProp = rawProps[propKey];

        if (propKey === CHILDREN) {
          // For text content children we compare against textContent. This
          // might match additional HTML that is hidden when we read it using
          // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
          // satisfies our requirement. Our requirement is not to produce perfect
          // HTML and attributes. Ideally we should preserve structure but it's
          // ok not to if the visible content is still enough to indicate what
          // even listeners these nodes might be wired up to.
          // TODO: Warn if there is more than a single textNode as a child.
          // TODO: Should we use domElement.firstChild.nodeValue to compare?
          if (typeof nextProp === 'string') {
            if (domElement.textContent !== nextProp) {
              if ( true && !suppressHydrationWarning) {
                warnForTextDifference(domElement.textContent, nextProp);
              }

              updatePayload = [CHILDREN, nextProp];
            }
          } else if (typeof nextProp === 'number') {
            if (domElement.textContent !== '' + nextProp) {
              if ( true && !suppressHydrationWarning) {
                warnForTextDifference(domElement.textContent, nextProp);
              }

              updatePayload = [CHILDREN, '' + nextProp];
            }
          }
        } else if (registrationNameModules.hasOwnProperty(propKey)) {
          if (nextProp != null) {
            if ( true && typeof nextProp !== 'function') {
              warnForInvalidEventListener(propKey, nextProp);
            }

            ensureListeningTo(rootContainerElement, propKey);
          }
        } else if ( true && // Convince Flow we've calculated it (it's DEV-only in this method.)
        typeof isCustomComponentTag === 'boolean') {
          // Validate that the properties correspond to their expected values.
          var serverValue = void 0;
          var propertyInfo = getPropertyInfo(propKey);

          if (suppressHydrationWarning) {// Don't bother comparing. We're ignoring all these warnings.
          } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING$1 || // Controlled attributes are not validated
          // TODO: Only ignore them on controlled tags.
          propKey === 'value' || propKey === 'checked' || propKey === 'selected') {// Noop
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var serverHTML = domElement.innerHTML;
            var nextHtml = nextProp ? nextProp[HTML] : undefined;
            var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : '');

            if (expectedHTML !== serverHTML) {
              warnForPropDifference(propKey, serverHTML, expectedHTML);
            }
          } else if (propKey === STYLE$1) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey);

            if (canDiffStyleForHydrationWarning) {
              var expectedStyle = createDangerousStringForStyles(nextProp);
              serverValue = domElement.getAttribute('style');

              if (expectedStyle !== serverValue) {
                warnForPropDifference(propKey, serverValue, expectedStyle);
              }
            }
          } else if (isCustomComponentTag) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey.toLowerCase());
            serverValue = getValueForAttribute(domElement, propKey, nextProp);

            if (nextProp !== serverValue) {
              warnForPropDifference(propKey, serverValue, nextProp);
            }
          } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
            var isMismatchDueToBadCasing = false;

            if (propertyInfo !== null) {
              // $FlowFixMe - Should be inferred as not undefined.
              extraAttributeNames.delete(propertyInfo.attributeName);
              serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
            } else {
              var ownNamespace = parentNamespace;

              if (ownNamespace === HTML_NAMESPACE) {
                ownNamespace = getIntrinsicNamespace(tag);
              }

              if (ownNamespace === HTML_NAMESPACE) {
                // $FlowFixMe - Should be inferred as not undefined.
                extraAttributeNames.delete(propKey.toLowerCase());
              } else {
                var standardName = getPossibleStandardName(propKey);

                if (standardName !== null && standardName !== propKey) {
                  // If an SVG prop is supplied with bad casing, it will
                  // be successfully parsed from HTML, but will produce a mismatch
                  // (and would be incorrectly rendered on the client).
                  // However, we already warn about bad casing elsewhere.
                  // So we'll skip the misleading extra mismatch warning in this case.
                  isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

                  extraAttributeNames.delete(standardName);
                } // $FlowFixMe - Should be inferred as not undefined.


                extraAttributeNames.delete(propKey);
              }

              serverValue = getValueForAttribute(domElement, propKey, nextProp);
            }

            if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
              warnForPropDifference(propKey, serverValue, nextProp);
            }
          }
        }
      }

      {
        // $FlowFixMe - Should be inferred as not undefined.
        if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
          // $FlowFixMe - Should be inferred as not undefined.
          warnForExtraAttributes(extraAttributeNames);
        }
      }

      switch (tag) {
        case 'input':
          // TODO: Make sure we check if this is still unmounted or do any clean
          // up necessary since we never stop tracking anymore.
          track(domElement);
          postMountWrapper(domElement, rawProps, true);
          break;

        case 'textarea':
          // TODO: Make sure we check if this is still unmounted or do any clean
          // up necessary since we never stop tracking anymore.
          track(domElement);
          postMountWrapper$3(domElement, rawProps);
          break;

        case 'select':
        case 'option':
          // For input and textarea we current always set the value property at
          // post mount to force it to diverge from attributes. However, for
          // option and select we don't quite do the same thing and select
          // is not resilient to the DOM state changing so we don't do that here.
          // TODO: Consider not doing this for input and textarea.
          break;

        default:
          if (typeof rawProps.onClick === 'function') {
            // TODO: This cast may not be sound for SVG, MathML or custom elements.
            trapClickOnNonInteractiveElement(domElement);
          }

          break;
      }

      return updatePayload;
    }

    function diffHydratedText(textNode, text) {
      var isDifferent = textNode.nodeValue !== text;
      return isDifferent;
    }

    function warnForUnmatchedText(textNode, text) {
      {
        warnForTextDifference(textNode.nodeValue, text);
      }
    }

    function warnForDeletedHydratableElement(parentNode, child) {
      {
        if (didWarnInvalidHydration) {
          return;
        }

        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
      }
    }

    function warnForDeletedHydratableText(parentNode, child) {
      {
        if (didWarnInvalidHydration) {
          return;
        }

        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
      }
    }

    function warnForInsertedHydratedElement(parentNode, tag, props) {
      {
        if (didWarnInvalidHydration) {
          return;
        }

        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
      }
    }

    function warnForInsertedHydratedText(parentNode, text) {
      {
        if (text === '') {
          // We expect to insert empty text nodes since they're not represented in
          // the HTML.
          // TODO: Remove this special case if we can just avoid inserting empty
          // text nodes.
          return;
        }

        if (didWarnInvalidHydration) {
          return;
        }

        didWarnInvalidHydration = true;
        warningWithoutStack$1(false, 'Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
      }
    }

    function restoreControlledState$1(domElement, tag, props) {
      switch (tag) {
        case 'input':
          restoreControlledState(domElement, props);
          return;

        case 'textarea':
          restoreControlledState$3(domElement, props);
          return;

        case 'select':
          restoreControlledState$2(domElement, props);
          return;
      }
    } // TODO: direct imports like some-package/src/* are bad. Fix me.


    var validateDOMNesting = function () {};

    var updatedAncestorInfo = function () {};

    {
      // This validation code was written based on the HTML5 parsing spec:
      // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
      //
      // Note: this does not catch all invalid nesting, nor does it try to (as it's
      // not clear what practical benefit doing so provides); instead, we warn only
      // for cases where the parser will give a parse tree differing from what React
      // intended. For example, <b><div></div></b> is invalid but we don't warn
      // because it still parses correctly; we do warn for other cases like nested
      // <p> tags where the beginning of the second element implicitly closes the
      // first, causing a confusing mess.
      // https://html.spec.whatwg.org/multipage/syntax.html#special
      var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

      var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
      // TODO: Distinguish by namespace here -- for <title>, including it here
      // errs on the side of fewer warnings
      'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

      var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

      var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
      var emptyAncestorInfo = {
        current: null,
        formTag: null,
        aTagInScope: null,
        buttonTagInScope: null,
        nobrTagInScope: null,
        pTagInButtonScope: null,
        listItemTagAutoclosing: null,
        dlItemTagAutoclosing: null
      };

      updatedAncestorInfo = function (oldInfo, tag) {
        var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);

        var info = {
          tag: tag
        };

        if (inScopeTags.indexOf(tag) !== -1) {
          ancestorInfo.aTagInScope = null;
          ancestorInfo.buttonTagInScope = null;
          ancestorInfo.nobrTagInScope = null;
        }

        if (buttonScopeTags.indexOf(tag) !== -1) {
          ancestorInfo.pTagInButtonScope = null;
        } // See rules for 'li', 'dd', 'dt' start tags in
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


        if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
          ancestorInfo.listItemTagAutoclosing = null;
          ancestorInfo.dlItemTagAutoclosing = null;
        }

        ancestorInfo.current = info;

        if (tag === 'form') {
          ancestorInfo.formTag = info;
        }

        if (tag === 'a') {
          ancestorInfo.aTagInScope = info;
        }

        if (tag === 'button') {
          ancestorInfo.buttonTagInScope = info;
        }

        if (tag === 'nobr') {
          ancestorInfo.nobrTagInScope = info;
        }

        if (tag === 'p') {
          ancestorInfo.pTagInButtonScope = info;
        }

        if (tag === 'li') {
          ancestorInfo.listItemTagAutoclosing = info;
        }

        if (tag === 'dd' || tag === 'dt') {
          ancestorInfo.dlItemTagAutoclosing = info;
        }

        return ancestorInfo;
      };
      /**
       * Returns whether
       */


      var isTagValidWithParent = function (tag, parentTag) {
        // First, let's check if we're in an unusual parsing mode...
        switch (parentTag) {
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
          case 'select':
            return tag === 'option' || tag === 'optgroup' || tag === '#text';

          case 'optgroup':
            return tag === 'option' || tag === '#text';
          // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
          // but

          case 'option':
            return tag === '#text';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
          // No special behavior since these rules fall back to "in body" mode for
          // all except special table nodes which cause bad parsing behavior anyway.
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

          case 'tr':
            return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

          case 'tbody':
          case 'thead':
          case 'tfoot':
            return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

          case 'colgroup':
            return tag === 'col' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

          case 'table':
            return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

          case 'head':
            return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
          // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

          case 'html':
            return tag === 'head' || tag === 'body';

          case '#document':
            return tag === 'html';
        } // Probably in the "in body" parsing mode, so we outlaw only tag combos
        // where the parsing rules cause implicit opens or closes to be added.
        // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


        switch (tag) {
          case 'h1':
          case 'h2':
          case 'h3':
          case 'h4':
          case 'h5':
          case 'h6':
            return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

          case 'rp':
          case 'rt':
            return impliedEndTags.indexOf(parentTag) === -1;

          case 'body':
          case 'caption':
          case 'col':
          case 'colgroup':
          case 'frame':
          case 'head':
          case 'html':
          case 'tbody':
          case 'td':
          case 'tfoot':
          case 'th':
          case 'thead':
          case 'tr':
            // These tags are only valid with a few parents that have special child
            // parsing rules -- if we're down here, then none of those matched and
            // so we allow it only if we don't know what the parent is, as all other
            // cases are invalid.
            return parentTag == null;
        }

        return true;
      };
      /**
       * Returns whether
       */


      var findInvalidAncestorForTag = function (tag, ancestorInfo) {
        switch (tag) {
          case 'address':
          case 'article':
          case 'aside':
          case 'blockquote':
          case 'center':
          case 'details':
          case 'dialog':
          case 'dir':
          case 'div':
          case 'dl':
          case 'fieldset':
          case 'figcaption':
          case 'figure':
          case 'footer':
          case 'header':
          case 'hgroup':
          case 'main':
          case 'menu':
          case 'nav':
          case 'ol':
          case 'p':
          case 'section':
          case 'summary':
          case 'ul':
          case 'pre':
          case 'listing':
          case 'table':
          case 'hr':
          case 'xmp':
          case 'h1':
          case 'h2':
          case 'h3':
          case 'h4':
          case 'h5':
          case 'h6':
            return ancestorInfo.pTagInButtonScope;

          case 'form':
            return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

          case 'li':
            return ancestorInfo.listItemTagAutoclosing;

          case 'dd':
          case 'dt':
            return ancestorInfo.dlItemTagAutoclosing;

          case 'button':
            return ancestorInfo.buttonTagInScope;

          case 'a':
            // Spec says something about storing a list of markers, but it sounds
            // equivalent to this check.
            return ancestorInfo.aTagInScope;

          case 'nobr':
            return ancestorInfo.nobrTagInScope;
        }

        return null;
      };

      var didWarn = {};

      validateDOMNesting = function (childTag, childText, ancestorInfo) {
        ancestorInfo = ancestorInfo || emptyAncestorInfo;
        var parentInfo = ancestorInfo.current;
        var parentTag = parentInfo && parentInfo.tag;

        if (childText != null) {
          !(childTag == null) ? warningWithoutStack$1(false, 'validateDOMNesting: when childText is passed, childTag should be null') : void 0;
          childTag = '#text';
        }

        var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
        var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
        var invalidParentOrAncestor = invalidParent || invalidAncestor;

        if (!invalidParentOrAncestor) {
          return;
        }

        var ancestorTag = invalidParentOrAncestor.tag;
        var addendum = getCurrentFiberStackInDev();
        var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;

        if (didWarn[warnKey]) {
          return;
        }

        didWarn[warnKey] = true;
        var tagDisplayName = childTag;
        var whitespaceInfo = '';

        if (childTag === '#text') {
          if (/\S/.test(childText)) {
            tagDisplayName = 'Text nodes';
          } else {
            tagDisplayName = 'Whitespace text nodes';
            whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
          }
        } else {
          tagDisplayName = '<' + childTag + '>';
        }

        if (invalidParent) {
          var info = '';

          if (ancestorTag === 'table' && childTag === 'tr') {
            info += ' Add a <tbody> to your code to match the DOM tree generated by ' + 'the browser.';
          }

          warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info, addendum);
        } else {
          warningWithoutStack$1(false, 'validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.%s', tagDisplayName, ancestorTag, addendum);
        }
      };
    } // Renderers that don't support persistence
    // can re-export everything from this module.

    function shim() {
      invariant(false, 'The current renderer does not support persistence. This error is likely caused by a bug in React. Please file an issue.');
    } // Persistence (when unsupported)


    var supportsPersistence = false;
    var cloneInstance = shim;
    var createContainerChildSet = shim;
    var appendChildToContainerChildSet = shim;
    var finalizeContainerChildren = shim;
    var replaceContainerChildren = shim;
    var cloneHiddenInstance = shim;
    var cloneUnhiddenInstance = shim;
    var createHiddenTextInstance = shim;
    var SUPPRESS_HYDRATION_WARNING = void 0;
    {
      SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
    }
    var SUSPENSE_START_DATA = '$';
    var SUSPENSE_END_DATA = '/$';
    var STYLE = 'style';
    var eventsEnabled = null;
    var selectionInformation = null;

    function shouldAutoFocusHostComponent(type, props) {
      switch (type) {
        case 'button':
        case 'input':
        case 'select':
        case 'textarea':
          return !!props.autoFocus;
      }

      return false;
    }

    function getRootHostContext(rootContainerInstance) {
      var type = void 0;
      var namespace = void 0;
      var nodeType = rootContainerInstance.nodeType;

      switch (nodeType) {
        case DOCUMENT_NODE:
        case DOCUMENT_FRAGMENT_NODE:
          {
            type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
            var root = rootContainerInstance.documentElement;
            namespace = root ? root.namespaceURI : getChildNamespace(null, '');
            break;
          }

        default:
          {
            var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
            var ownNamespace = container.namespaceURI || null;
            type = container.tagName;
            namespace = getChildNamespace(ownNamespace, type);
            break;
          }
      }

      {
        var validatedTag = type.toLowerCase();

        var _ancestorInfo = updatedAncestorInfo(null, validatedTag);

        return {
          namespace: namespace,
          ancestorInfo: _ancestorInfo
        };
      }
      return namespace;
    }

    function getChildHostContext(parentHostContext, type, rootContainerInstance) {
      {
        var parentHostContextDev = parentHostContext;

        var _namespace = getChildNamespace(parentHostContextDev.namespace, type);

        var _ancestorInfo2 = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);

        return {
          namespace: _namespace,
          ancestorInfo: _ancestorInfo2
        };
      }
      var parentNamespace = parentHostContext;
      return getChildNamespace(parentNamespace, type);
    }

    function getPublicInstance(instance) {
      return instance;
    }

    function prepareForCommit(containerInfo) {
      eventsEnabled = isEnabled();
      selectionInformation = getSelectionInformation();
      setEnabled(false);
    }

    function resetAfterCommit(containerInfo) {
      restoreSelection(selectionInformation);
      selectionInformation = null;
      setEnabled(eventsEnabled);
      eventsEnabled = null;
    }

    function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
      var parentNamespace = void 0;
      {
        // TODO: take namespace into account when validating.
        var hostContextDev = hostContext;
        validateDOMNesting(type, null, hostContextDev.ancestorInfo);

        if (typeof props.children === 'string' || typeof props.children === 'number') {
          var string = '' + props.children;
          var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
          validateDOMNesting(null, string, ownAncestorInfo);
        }

        parentNamespace = hostContextDev.namespace;
      }
      var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
      precacheFiberNode(internalInstanceHandle, domElement);
      updateFiberProps(domElement, props);
      return domElement;
    }

    function appendInitialChild(parentInstance, child) {
      parentInstance.appendChild(child);
    }

    function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
      setInitialProperties(domElement, type, props, rootContainerInstance);
      return shouldAutoFocusHostComponent(type, props);
    }

    function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
      {
        var hostContextDev = hostContext;

        if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
          var string = '' + newProps.children;
          var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
          validateDOMNesting(null, string, ownAncestorInfo);
        }
      }
      return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
    }

    function shouldSetTextContent(type, props) {
      return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
    }

    function shouldDeprioritizeSubtree(type, props) {
      return !!props.hidden;
    }

    function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
      {
        var hostContextDev = hostContext;
        validateDOMNesting(null, text, hostContextDev.ancestorInfo);
      }
      var textNode = createTextNode(text, rootContainerInstance);
      precacheFiberNode(internalInstanceHandle, textNode);
      return textNode;
    }

    var isPrimaryRenderer = true; // This initialization code may run even on server environments
    // if a component just imports ReactDOM (e.g. for findDOMNode).
    // Some environments might not have setTimeout or clearTimeout.

    var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
    var noTimeout = -1;
    var schedulePassiveEffects = scheduler.unstable_scheduleCallback;
    var cancelPassiveEffects = scheduler.unstable_cancelCallback; // -------------------
    //     Mutation
    // -------------------

    var supportsMutation = true;

    function commitMount(domElement, type, newProps, internalInstanceHandle) {
      // Despite the naming that might imply otherwise, this method only
      // fires if there is an `Update` effect scheduled during mounting.
      // This happens if `finalizeInitialChildren` returns `true` (which it
      // does to implement the `autoFocus` attribute on the client). But
      // there are also other cases when this might happen (such as patching
      // up text content during hydration mismatch). So we'll check this again.
      if (shouldAutoFocusHostComponent(type, newProps)) {
        domElement.focus();
      }
    }

    function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
      // Update the props handle so that we know which props are the ones with
      // with current event handlers.
      updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.

      updateProperties(domElement, updatePayload, type, oldProps, newProps);
    }

    function resetTextContent(domElement) {
      setTextContent(domElement, '');
    }

    function commitTextUpdate(textInstance, oldText, newText) {
      textInstance.nodeValue = newText;
    }

    function appendChild(parentInstance, child) {
      parentInstance.appendChild(child);
    }

    function appendChildToContainer(container, child) {
      var parentNode = void 0;

      if (container.nodeType === COMMENT_NODE) {
        parentNode = container.parentNode;
        parentNode.insertBefore(child, container);
      } else {
        parentNode = container;
        parentNode.appendChild(child);
      } // This container might be used for a portal.
      // If something inside a portal is clicked, that click should bubble
      // through the React tree. However, on Mobile Safari the click would
      // never bubble through the *DOM* tree unless an ancestor with onclick
      // event exists. So we wouldn't see it and dispatch it.
      // This is why we ensure that non React root containers have inline onclick
      // defined.
      // https://github.com/facebook/react/issues/11918


      var reactRootContainer = container._reactRootContainer;

      if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(parentNode);
      }
    }

    function insertBefore(parentInstance, child, beforeChild) {
      parentInstance.insertBefore(child, beforeChild);
    }

    function insertInContainerBefore(container, child, beforeChild) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.insertBefore(child, beforeChild);
      } else {
        container.insertBefore(child, beforeChild);
      }
    }

    function removeChild(parentInstance, child) {
      parentInstance.removeChild(child);
    }

    function removeChildFromContainer(container, child) {
      if (container.nodeType === COMMENT_NODE) {
        container.parentNode.removeChild(child);
      } else {
        container.removeChild(child);
      }
    }

    function clearSuspenseBoundary(parentInstance, suspenseInstance) {
      var node = suspenseInstance; // Delete all nodes within this suspense boundary.
      // There might be nested nodes so we need to keep track of how
      // deep we are and only break out when we're back on top.

      var depth = 0;

      do {
        var nextNode = node.nextSibling;
        parentInstance.removeChild(node);

        if (nextNode && nextNode.nodeType === COMMENT_NODE) {
          var data = nextNode.data;

          if (data === SUSPENSE_END_DATA) {
            if (depth === 0) {
              parentInstance.removeChild(nextNode);
              return;
            } else {
              depth--;
            }
          } else if (data === SUSPENSE_START_DATA) {
            depth++;
          }
        }

        node = nextNode;
      } while (node); // TODO: Warn, we didn't find the end comment boundary.

    }

    function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
      if (container.nodeType === COMMENT_NODE) {
        clearSuspenseBoundary(container.parentNode, suspenseInstance);
      } else if (container.nodeType === ELEMENT_NODE) {
        clearSuspenseBoundary(container, suspenseInstance);
      } else {// Document nodes should never contain suspense boundaries.
      }
    }

    function hideInstance(instance) {
      // TODO: Does this work for all element types? What about MathML? Should we
      // pass host context to this method?
      instance = instance;
      instance.style.display = 'none';
    }

    function hideTextInstance(textInstance) {
      textInstance.nodeValue = '';
    }

    function unhideInstance(instance, props) {
      instance = instance;
      var styleProp = props[STYLE];
      var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
      instance.style.display = dangerousStyleValue('display', display);
    }

    function unhideTextInstance(textInstance, text) {
      textInstance.nodeValue = text;
    } // -------------------
    //     Hydration
    // -------------------


    var supportsHydration = true;

    function canHydrateInstance(instance, type, props) {
      if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
        return null;
      } // This has now been refined to an element node.


      return instance;
    }

    function canHydrateTextInstance(instance, text) {
      if (text === '' || instance.nodeType !== TEXT_NODE) {
        // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
      } // This has now been refined to a text node.


      return instance;
    }

    function canHydrateSuspenseInstance(instance) {
      if (instance.nodeType !== COMMENT_NODE) {
        // Empty strings are not parsed by HTML so there won't be a correct match here.
        return null;
      } // This has now been refined to a suspense node.


      return instance;
    }

    function getNextHydratableSibling(instance) {
      var node = instance.nextSibling; // Skip non-hydratable nodes.

      while (node && node.nodeType !== ELEMENT_NODE && node.nodeType !== TEXT_NODE && (!enableSuspenseServerRenderer || node.nodeType !== COMMENT_NODE || node.data !== SUSPENSE_START_DATA)) {
        node = node.nextSibling;
      }

      return node;
    }

    function getFirstHydratableChild(parentInstance) {
      var next = parentInstance.firstChild; // Skip non-hydratable nodes.

      while (next && next.nodeType !== ELEMENT_NODE && next.nodeType !== TEXT_NODE && (!enableSuspenseServerRenderer || next.nodeType !== COMMENT_NODE || next.data !== SUSPENSE_START_DATA)) {
        next = next.nextSibling;
      }

      return next;
    }

    function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
      precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
      // get attached.

      updateFiberProps(instance, props);
      var parentNamespace = void 0;
      {
        var hostContextDev = hostContext;
        parentNamespace = hostContextDev.namespace;
      }
      return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
    }

    function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
      precacheFiberNode(internalInstanceHandle, textInstance);
      return diffHydratedText(textInstance, text);
    }

    function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
      var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
      // There might be nested nodes so we need to keep track of how
      // deep we are and only break out when we're back on top.

      var depth = 0;

      while (node) {
        if (node.nodeType === COMMENT_NODE) {
          var data = node.data;

          if (data === SUSPENSE_END_DATA) {
            if (depth === 0) {
              return getNextHydratableSibling(node);
            } else {
              depth--;
            }
          } else if (data === SUSPENSE_START_DATA) {
            depth++;
          }
        }

        node = node.nextSibling;
      } // TODO: Warn, we didn't find the end comment boundary.


      return null;
    }

    function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
      {
        warnForUnmatchedText(textInstance, text);
      }
    }

    function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
      if ( true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        warnForUnmatchedText(textInstance, text);
      }
    }

    function didNotHydrateContainerInstance(parentContainer, instance) {
      {
        if (instance.nodeType === ELEMENT_NODE) {
          warnForDeletedHydratableElement(parentContainer, instance);
        } else if (instance.nodeType === COMMENT_NODE) {// TODO: warnForDeletedHydratableSuspenseBoundary
        } else {
          warnForDeletedHydratableText(parentContainer, instance);
        }
      }
    }

    function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
      if ( true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        if (instance.nodeType === ELEMENT_NODE) {
          warnForDeletedHydratableElement(parentInstance, instance);
        } else if (instance.nodeType === COMMENT_NODE) {// TODO: warnForDeletedHydratableSuspenseBoundary
        } else {
          warnForDeletedHydratableText(parentInstance, instance);
        }
      }
    }

    function didNotFindHydratableContainerInstance(parentContainer, type, props) {
      {
        warnForInsertedHydratedElement(parentContainer, type, props);
      }
    }

    function didNotFindHydratableContainerTextInstance(parentContainer, text) {
      {
        warnForInsertedHydratedText(parentContainer, text);
      }
    }

    function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
      if ( true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        warnForInsertedHydratedElement(parentInstance, type, props);
      }
    }

    function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
      if ( true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {
        warnForInsertedHydratedText(parentInstance, text);
      }
    }

    function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
      if ( true && parentProps[SUPPRESS_HYDRATION_WARNING] !== true) {// TODO: warnForInsertedHydratedSuspense(parentInstance);
      }
    } // Prefix measurements so that it's possible to filter them.
    // Longer prefixes are hard to read in DevTools.


    var reactEmoji = '\u269B';
    var warningEmoji = '\u26D4';
    var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function'; // Keep track of current fiber so that we know the path to unwind on pause.
    // TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?

    var currentFiber = null; // If we're in the middle of user code, which fiber and method is it?
    // Reusing `currentFiber` would be confusing for this because user code fiber
    // can change during commit phase too, but we don't need to unwind it (since
    // lifecycles in the commit phase don't resemble a tree).

    var currentPhase = null;
    var currentPhaseFiber = null; // Did lifecycle hook schedule an update? This is often a performance problem,
    // so we will keep track of it, and include it in the report.
    // Track commits caused by cascading updates.

    var isCommitting = false;
    var hasScheduledUpdateInCurrentCommit = false;
    var hasScheduledUpdateInCurrentPhase = false;
    var commitCountInCurrentWorkLoop = 0;
    var effectCountInCurrentCommit = 0;
    var isWaitingForCallback = false; // During commits, we only show a measurement once per method name
    // to avoid stretch the commit phase with measurement overhead.

    var labelsInCurrentCommit = new Set();

    var formatMarkName = function (markName) {
      return reactEmoji + ' ' + markName;
    };

    var formatLabel = function (label, warning) {
      var prefix = warning ? warningEmoji + ' ' : reactEmoji + ' ';
      var suffix = warning ? ' Warning: ' + warning : '';
      return '' + prefix + label + suffix;
    };

    var beginMark = function (markName) {
      performance.mark(formatMarkName(markName));
    };

    var clearMark = function (markName) {
      performance.clearMarks(formatMarkName(markName));
    };

    var endMark = function (label, markName, warning) {
      var formattedMarkName = formatMarkName(markName);
      var formattedLabel = formatLabel(label, warning);

      try {
        performance.measure(formattedLabel, formattedMarkName);
      } catch (err) {} // If previous mark was missing for some reason, this will throw.
      // This could only happen if React crashed in an unexpected place earlier.
      // Don't pile on with more errors.
      // Clear marks immediately to avoid growing buffer.


      performance.clearMarks(formattedMarkName);
      performance.clearMeasures(formattedLabel);
    };

    var getFiberMarkName = function (label, debugID) {
      return label + ' (#' + debugID + ')';
    };

    var getFiberLabel = function (componentName, isMounted, phase) {
      if (phase === null) {
        // These are composite component total time measurements.
        return componentName + ' [' + (isMounted ? 'update' : 'mount') + ']';
      } else {
        // Composite component methods.
        return componentName + '.' + phase;
      }
    };

    var beginFiberMark = function (fiber, phase) {
      var componentName = getComponentName(fiber.type) || 'Unknown';
      var debugID = fiber._debugID;
      var isMounted = fiber.alternate !== null;
      var label = getFiberLabel(componentName, isMounted, phase);

      if (isCommitting && labelsInCurrentCommit.has(label)) {
        // During the commit phase, we don't show duplicate labels because
        // there is a fixed overhead for every measurement, and we don't
        // want to stretch the commit phase beyond necessary.
        return false;
      }

      labelsInCurrentCommit.add(label);
      var markName = getFiberMarkName(label, debugID);
      beginMark(markName);
      return true;
    };

    var clearFiberMark = function (fiber, phase) {
      var componentName = getComponentName(fiber.type) || 'Unknown';
      var debugID = fiber._debugID;
      var isMounted = fiber.alternate !== null;
      var label = getFiberLabel(componentName, isMounted, phase);
      var markName = getFiberMarkName(label, debugID);
      clearMark(markName);
    };

    var endFiberMark = function (fiber, phase, warning) {
      var componentName = getComponentName(fiber.type) || 'Unknown';
      var debugID = fiber._debugID;
      var isMounted = fiber.alternate !== null;
      var label = getFiberLabel(componentName, isMounted, phase);
      var markName = getFiberMarkName(label, debugID);
      endMark(label, markName, warning);
    };

    var shouldIgnoreFiber = function (fiber) {
      // Host components should be skipped in the timeline.
      // We could check typeof fiber.type, but does this work with RN?
      switch (fiber.tag) {
        case HostRoot:
        case HostComponent:
        case HostText:
        case HostPortal:
        case Fragment:
        case ContextProvider:
        case ContextConsumer:
        case Mode:
          return true;

        default:
          return false;
      }
    };

    var clearPendingPhaseMeasurement = function () {
      if (currentPhase !== null && currentPhaseFiber !== null) {
        clearFiberMark(currentPhaseFiber, currentPhase);
      }

      currentPhaseFiber = null;
      currentPhase = null;
      hasScheduledUpdateInCurrentPhase = false;
    };

    var pauseTimers = function () {
      // Stops all currently active measurements so that they can be resumed
      // if we continue in a later deferred loop from the same unit of work.
      var fiber = currentFiber;

      while (fiber) {
        if (fiber._debugIsCurrentlyTiming) {
          endFiberMark(fiber, null, null);
        }

        fiber = fiber.return;
      }
    };

    var resumeTimersRecursively = function (fiber) {
      if (fiber.return !== null) {
        resumeTimersRecursively(fiber.return);
      }

      if (fiber._debugIsCurrentlyTiming) {
        beginFiberMark(fiber, null);
      }
    };

    var resumeTimers = function () {
      // Resumes all measurements that were active during the last deferred loop.
      if (currentFiber !== null) {
        resumeTimersRecursively(currentFiber);
      }
    };

    function recordEffect() {
      if (enableUserTimingAPI) {
        effectCountInCurrentCommit++;
      }
    }

    function recordScheduleUpdate() {
      if (enableUserTimingAPI) {
        if (isCommitting) {
          hasScheduledUpdateInCurrentCommit = true;
        }

        if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
          hasScheduledUpdateInCurrentPhase = true;
        }
      }
    }

    function startRequestCallbackTimer() {
      if (enableUserTimingAPI) {
        if (supportsUserTiming && !isWaitingForCallback) {
          isWaitingForCallback = true;
          beginMark('(Waiting for async callback...)');
        }
      }
    }

    function stopRequestCallbackTimer(didExpire, expirationTime) {
      if (enableUserTimingAPI) {
        if (supportsUserTiming) {
          isWaitingForCallback = false;
          var warning = didExpire ? 'React was blocked by main thread' : null;
          endMark('(Waiting for async callback... will force flush in ' + expirationTime + ' ms)', '(Waiting for async callback...)', warning);
        }
      }
    }

    function startWorkTimer(fiber) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
          return;
        } // If we pause, this is the fiber to unwind from.


        currentFiber = fiber;

        if (!beginFiberMark(fiber, null)) {
          return;
        }

        fiber._debugIsCurrentlyTiming = true;
      }
    }

    function cancelWorkTimer(fiber) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
          return;
        } // Remember we shouldn't complete measurement for this fiber.
        // Otherwise flamechart will be deep even for small updates.


        fiber._debugIsCurrentlyTiming = false;
        clearFiberMark(fiber, null);
      }
    }

    function stopWorkTimer(fiber) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
          return;
        } // If we pause, its parent is the fiber to unwind from.


        currentFiber = fiber.return;

        if (!fiber._debugIsCurrentlyTiming) {
          return;
        }

        fiber._debugIsCurrentlyTiming = false;
        endFiberMark(fiber, null, null);
      }
    }

    function stopFailedWorkTimer(fiber) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
          return;
        } // If we pause, its parent is the fiber to unwind from.


        currentFiber = fiber.return;

        if (!fiber._debugIsCurrentlyTiming) {
          return;
        }

        fiber._debugIsCurrentlyTiming = false;
        var warning = fiber.tag === SuspenseComponent || fiber.tag === DehydratedSuspenseComponent ? 'Rendering was suspended' : 'An error was thrown inside this error boundary';
        endFiberMark(fiber, null, warning);
      }
    }

    function startPhaseTimer(fiber, phase) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        clearPendingPhaseMeasurement();

        if (!beginFiberMark(fiber, phase)) {
          return;
        }

        currentPhaseFiber = fiber;
        currentPhase = phase;
      }
    }

    function stopPhaseTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        if (currentPhase !== null && currentPhaseFiber !== null) {
          var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
          endFiberMark(currentPhaseFiber, currentPhase, warning);
        }

        currentPhase = null;
        currentPhaseFiber = null;
      }
    }

    function startWorkLoopTimer(nextUnitOfWork) {
      if (enableUserTimingAPI) {
        currentFiber = nextUnitOfWork;

        if (!supportsUserTiming) {
          return;
        }

        commitCountInCurrentWorkLoop = 0; // This is top level call.
        // Any other measurements are performed within.

        beginMark('(React Tree Reconciliation)'); // Resume any measurements that were in progress during the last loop.

        resumeTimers();
      }
    }

    function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        var warning = null;

        if (interruptedBy !== null) {
          if (interruptedBy.tag === HostRoot) {
            warning = 'A top-level update interrupted the previous render';
          } else {
            var componentName = getComponentName(interruptedBy.type) || 'Unknown';
            warning = 'An update to ' + componentName + ' interrupted the previous render';
          }
        } else if (commitCountInCurrentWorkLoop > 1) {
          warning = 'There were cascading updates';
        }

        commitCountInCurrentWorkLoop = 0;
        var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)'; // Pause any measurements until the next loop.

        pauseTimers();
        endMark(label, '(React Tree Reconciliation)', warning);
      }
    }

    function startCommitTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        isCommitting = true;
        hasScheduledUpdateInCurrentCommit = false;
        labelsInCurrentCommit.clear();
        beginMark('(Committing Changes)');
      }
    }

    function stopCommitTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        var warning = null;

        if (hasScheduledUpdateInCurrentCommit) {
          warning = 'Lifecycle hook scheduled a cascading update';
        } else if (commitCountInCurrentWorkLoop > 0) {
          warning = 'Caused by a cascading update in earlier commit';
        }

        hasScheduledUpdateInCurrentCommit = false;
        commitCountInCurrentWorkLoop++;
        isCommitting = false;
        labelsInCurrentCommit.clear();
        endMark('(Committing Changes)', '(Committing Changes)', warning);
      }
    }

    function startCommitSnapshotEffectsTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        effectCountInCurrentCommit = 0;
        beginMark('(Committing Snapshot Effects)');
      }
    }

    function stopCommitSnapshotEffectsTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        var count = effectCountInCurrentCommit;
        effectCountInCurrentCommit = 0;
        endMark('(Committing Snapshot Effects: ' + count + ' Total)', '(Committing Snapshot Effects)', null);
      }
    }

    function startCommitHostEffectsTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        effectCountInCurrentCommit = 0;
        beginMark('(Committing Host Effects)');
      }
    }

    function stopCommitHostEffectsTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        var count = effectCountInCurrentCommit;
        effectCountInCurrentCommit = 0;
        endMark('(Committing Host Effects: ' + count + ' Total)', '(Committing Host Effects)', null);
      }
    }

    function startCommitLifeCyclesTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        effectCountInCurrentCommit = 0;
        beginMark('(Calling Lifecycle Methods)');
      }
    }

    function stopCommitLifeCyclesTimer() {
      if (enableUserTimingAPI) {
        if (!supportsUserTiming) {
          return;
        }

        var count = effectCountInCurrentCommit;
        effectCountInCurrentCommit = 0;
        endMark('(Calling Lifecycle Methods: ' + count + ' Total)', '(Calling Lifecycle Methods)', null);
      }
    }

    var valueStack = [];
    var fiberStack = void 0;
    {
      fiberStack = [];
    }
    var index = -1;

    function createCursor(defaultValue) {
      return {
        current: defaultValue
      };
    }

    function pop(cursor, fiber) {
      if (index < 0) {
        {
          warningWithoutStack$1(false, 'Unexpected pop.');
        }
        return;
      }

      {
        if (fiber !== fiberStack[index]) {
          warningWithoutStack$1(false, 'Unexpected Fiber popped.');
        }
      }
      cursor.current = valueStack[index];
      valueStack[index] = null;
      {
        fiberStack[index] = null;
      }
      index--;
    }

    function push(cursor, value, fiber) {
      index++;
      valueStack[index] = cursor.current;
      {
        fiberStack[index] = fiber;
      }
      cursor.current = value;
    }

    function checkThatStackIsEmpty() {
      {
        if (index !== -1) {
          warningWithoutStack$1(false, 'Expected an empty stack. Something was not reset properly.');
        }
      }
    }

    function resetStackAfterFatalErrorInDev() {
      {
        index = -1;
        valueStack.length = 0;
        fiberStack.length = 0;
      }
    }

    var warnedAboutMissingGetChildContext = void 0;
    {
      warnedAboutMissingGetChildContext = {};
    }
    var emptyContextObject = {};
    {
      Object.freeze(emptyContextObject);
    } // A cursor to the current merged context object on the stack.

    var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

    var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
    // We use this to get access to the parent context after we have already
    // pushed the next context provider, and now need to merge their contexts.

    var previousContext = emptyContextObject;

    function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
      if (didPushOwnContextIfProvider && isContextProvider(Component)) {
        // If the fiber is a context provider itself, when we read its context
        // we may have already pushed its own child context on the stack. A context
        // provider should not "see" its own child context. Therefore we read the
        // previous (parent) context instead for a context provider.
        return previousContext;
      }

      return contextStackCursor.current;
    }

    function cacheContext(workInProgress, unmaskedContext, maskedContext) {
      var instance = workInProgress.stateNode;
      instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
      instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
    }

    function getMaskedContext(workInProgress, unmaskedContext) {
      var type = workInProgress.type;
      var contextTypes = type.contextTypes;

      if (!contextTypes) {
        return emptyContextObject;
      } // Avoid recreating masked context unless unmasked context has changed.
      // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
      // This may trigger infinite loops if componentWillReceiveProps calls setState.


      var instance = workInProgress.stateNode;

      if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
        return instance.__reactInternalMemoizedMaskedChildContext;
      }

      var context = {};

      for (var key in contextTypes) {
        context[key] = unmaskedContext[key];
      }

      {
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
      } // Cache unmasked context so we can avoid recreating masked context unless necessary.
      // Context is created before the class component is instantiated so check for instance.

      if (instance) {
        cacheContext(workInProgress, unmaskedContext, context);
      }

      return context;
    }

    function hasContextChanged() {
      return didPerformWorkStackCursor.current;
    }

    function isContextProvider(type) {
      var childContextTypes = type.childContextTypes;
      return childContextTypes !== null && childContextTypes !== undefined;
    }

    function popContext(fiber) {
      pop(didPerformWorkStackCursor, fiber);
      pop(contextStackCursor, fiber);
    }

    function popTopLevelContextObject(fiber) {
      pop(didPerformWorkStackCursor, fiber);
      pop(contextStackCursor, fiber);
    }

    function pushTopLevelContextObject(fiber, context, didChange) {
      !(contextStackCursor.current === emptyContextObject) ? invariant(false, 'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      push(contextStackCursor, context, fiber);
      push(didPerformWorkStackCursor, didChange, fiber);
    }

    function processChildContext(fiber, type, parentContext) {
      var instance = fiber.stateNode;
      var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
      // It has only been added in Fiber to match the (unintentional) behavior in Stack.

      if (typeof instance.getChildContext !== 'function') {
        {
          var componentName = getComponentName(type) || 'Unknown';

          if (!warnedAboutMissingGetChildContext[componentName]) {
            warnedAboutMissingGetChildContext[componentName] = true;
            warningWithoutStack$1(false, '%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
          }
        }
        return parentContext;
      }

      var childContext = void 0;
      {
        setCurrentPhase('getChildContext');
      }
      startPhaseTimer(fiber, 'getChildContext');
      childContext = instance.getChildContext();
      stopPhaseTimer();
      {
        setCurrentPhase(null);
      }

      for (var contextKey in childContext) {
        !(contextKey in childContextTypes) ? invariant(false, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', getComponentName(type) || 'Unknown', contextKey) : void 0;
      }

      {
        var name = getComponentName(type) || 'Unknown';
        checkPropTypes(childContextTypes, childContext, 'child context', name, // In practice, there is one case in which we won't get a stack. It's when
        // somebody calls unstable_renderSubtreeIntoContainer() and we process
        // context from the parent component instance. The stack will be missing
        // because it's outside of the reconciliation, and so the pointer has not
        // been set. This is rare and doesn't matter. We'll also remove that API.
        getCurrentFiberStackInDev);
      }
      return _assign({}, parentContext, childContext);
    }

    function pushContextProvider(workInProgress) {
      var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
      // If the instance does not exist yet, we will push null at first,
      // and replace it on the stack later when invalidating the context.

      var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
      // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

      previousContext = contextStackCursor.current;
      push(contextStackCursor, memoizedMergedChildContext, workInProgress);
      push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
      return true;
    }

    function invalidateContextProvider(workInProgress, type, didChange) {
      var instance = workInProgress.stateNode;
      !instance ? invariant(false, 'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.') : void 0;

      if (didChange) {
        // Merge parent and own context.
        // Skip this if we're not updating due to sCU.
        // This avoids unnecessarily recomputing memoized values.
        var mergedContext = processChildContext(workInProgress, type, previousContext);
        instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
        // It is important to unwind the context in the reverse order.

        pop(didPerformWorkStackCursor, workInProgress);
        pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

        push(contextStackCursor, mergedContext, workInProgress);
        push(didPerformWorkStackCursor, didChange, workInProgress);
      } else {
        pop(didPerformWorkStackCursor, workInProgress);
        push(didPerformWorkStackCursor, didChange, workInProgress);
      }
    }

    function findCurrentUnmaskedContext(fiber) {
      // Currently this is only used with renderSubtreeIntoContainer; not sure if it
      // makes sense elsewhere
      !(isFiberMounted(fiber) && fiber.tag === ClassComponent) ? invariant(false, 'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      var node = fiber;

      do {
        switch (node.tag) {
          case HostRoot:
            return node.stateNode.context;

          case ClassComponent:
            {
              var Component = node.type;

              if (isContextProvider(Component)) {
                return node.stateNode.__reactInternalMemoizedMergedChildContext;
              }

              break;
            }
        }

        node = node.return;
      } while (node !== null);

      invariant(false, 'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.');
    }

    var onCommitFiberRoot = null;
    var onCommitFiberUnmount = null;
    var hasLoggedError = false;

    function catchErrors(fn) {
      return function (arg) {
        try {
          return fn(arg);
        } catch (err) {
          if ( true && !hasLoggedError) {
            hasLoggedError = true;
            warningWithoutStack$1(false, 'React DevTools encountered an error: %s', err);
          }
        }
      };
    }

    var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';

    function injectInternals(internals) {
      if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
        // No DevTools
        return false;
      }

      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

      if (hook.isDisabled) {
        // This isn't a real property on the hook, but it can be set to opt out
        // of DevTools integration and associated warnings and logs.
        // https://github.com/facebook/react/issues/3877
        return true;
      }

      if (!hook.supportsFiber) {
        {
          warningWithoutStack$1(false, 'The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
        } // DevTools exists, even though it doesn't support Fiber.

        return true;
      }

      try {
        var rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

        onCommitFiberRoot = catchErrors(function (root) {
          return hook.onCommitFiberRoot(rendererID, root);
        });
        onCommitFiberUnmount = catchErrors(function (fiber) {
          return hook.onCommitFiberUnmount(rendererID, fiber);
        });
      } catch (err) {
        // Catch all errors because it is unsafe to throw during initialization.
        {
          warningWithoutStack$1(false, 'React DevTools encountered an error: %s.', err);
        }
      } // DevTools exists


      return true;
    }

    function onCommitRoot(root) {
      if (typeof onCommitFiberRoot === 'function') {
        onCommitFiberRoot(root);
      }
    }

    function onCommitUnmount(fiber) {
      if (typeof onCommitFiberUnmount === 'function') {
        onCommitFiberUnmount(fiber);
      }
    } // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111


    var maxSigned31BitInt = 1073741823;
    var NoWork = 0;
    var Never = 1;
    var Sync = maxSigned31BitInt;
    var UNIT_SIZE = 10;
    var MAGIC_NUMBER_OFFSET = maxSigned31BitInt - 1; // 1 unit of expiration time represents 10ms.

    function msToExpirationTime(ms) {
      // Always add an offset so that we don't clash with the magic number for NoWork.
      return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
    }

    function expirationTimeToMs(expirationTime) {
      return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
    }

    function ceiling(num, precision) {
      return ((num / precision | 0) + 1) * precision;
    }

    function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
      return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
    }

    var LOW_PRIORITY_EXPIRATION = 5000;
    var LOW_PRIORITY_BATCH_SIZE = 250;

    function computeAsyncExpiration(currentTime) {
      return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
    } // We intentionally set a higher expiration time for interactive updates in
    // dev than in production.
    //
    // If the main thread is being blocked so long that you hit the expiration,
    // it's a problem that could be solved with better scheduling.
    //
    // People will be more likely to notice this and fix it with the long
    // expiration time in development.
    //
    // In production we opt for better UX at the risk of masking scheduling
    // problems, by expiring fast.


    var HIGH_PRIORITY_EXPIRATION = 500;
    var HIGH_PRIORITY_BATCH_SIZE = 100;

    function computeInteractiveExpiration(currentTime) {
      return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
    }

    var NoContext = 0;
    var ConcurrentMode = 1;
    var StrictMode = 2;
    var ProfileMode = 4;
    var hasBadMapPolyfill = void 0;
    {
      hasBadMapPolyfill = false;

      try {
        var nonExtensibleObject = Object.preventExtensions({});
        var testMap = new Map([[nonExtensibleObject, null]]);
        var testSet = new Set([nonExtensibleObject]); // This is necessary for Rollup to not consider these unused.
        // https://github.com/rollup/rollup/issues/1771
        // TODO: we can remove these if Rollup fixes the bug.

        testMap.set(0, 0);
        testSet.add(0);
      } catch (e) {
        // TODO: Consider warning about bad polyfills
        hasBadMapPolyfill = true;
      }
    } // A Fiber is work on a Component that needs to be done or was done. There can
    // be more than one per component.

    var debugCounter = void 0;
    {
      debugCounter = 1;
    }

    function FiberNode(tag, pendingProps, key, mode) {
      // Instance
      this.tag = tag;
      this.key = key;
      this.elementType = null;
      this.type = null;
      this.stateNode = null; // Fiber

      this.return = null;
      this.child = null;
      this.sibling = null;
      this.index = 0;
      this.ref = null;
      this.pendingProps = pendingProps;
      this.memoizedProps = null;
      this.updateQueue = null;
      this.memoizedState = null;
      this.contextDependencies = null;
      this.mode = mode; // Effects

      this.effectTag = NoEffect;
      this.nextEffect = null;
      this.firstEffect = null;
      this.lastEffect = null;
      this.expirationTime = NoWork;
      this.childExpirationTime = NoWork;
      this.alternate = null;

      if (enableProfilerTimer) {
        // Note: The following is done to avoid a v8 performance cliff.
        //
        // Initializing the fields below to smis and later updating them with
        // double values will cause Fibers to end up having separate shapes.
        // This behavior/bug has something to do with Object.preventExtension().
        // Fortunately this only impacts DEV builds.
        // Unfortunately it makes React unusably slow for some applications.
        // To work around this, initialize the fields below with doubles.
        //
        // Learn more about this here:
        // https://github.com/facebook/react/issues/14365
        // https://bugs.chromium.org/p/v8/issues/detail?id=8538
        this.actualDuration = Number.NaN;
        this.actualStartTime = Number.NaN;
        this.selfBaseDuration = Number.NaN;
        this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
        // This won't trigger the performance cliff mentioned above,
        // and it simplifies other profiler code (including DevTools).

        this.actualDuration = 0;
        this.actualStartTime = -1;
        this.selfBaseDuration = 0;
        this.treeBaseDuration = 0;
      }

      {
        this._debugID = debugCounter++;
        this._debugSource = null;
        this._debugOwner = null;
        this._debugIsCurrentlyTiming = false;
        this._debugHookTypes = null;

        if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
          Object.preventExtensions(this);
        }
      }
    } // This is a constructor function, rather than a POJO constructor, still
    // please ensure we do the following:
    // 1) Nobody should add any instance methods on this. Instance methods can be
    //    more difficult to predict when they get optimized and they are almost
    //    never inlined properly in static compilers.
    // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
    //    always know when it is a fiber.
    // 3) We might want to experiment with using numeric keys since they are easier
    //    to optimize in a non-JIT environment.
    // 4) We can easily go from a constructor to a createFiber object literal if that
    //    is faster.
    // 5) It should be easy to port this to a C struct and keep a C implementation
    //    compatible.


    var createFiber = function (tag, pendingProps, key, mode) {
      // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
      return new FiberNode(tag, pendingProps, key, mode);
    };

    function shouldConstruct(Component) {
      var prototype = Component.prototype;
      return !!(prototype && prototype.isReactComponent);
    }

    function isSimpleFunctionComponent(type) {
      return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;
    }

    function resolveLazyComponentTag(Component) {
      if (typeof Component === 'function') {
        return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
      } else if (Component !== undefined && Component !== null) {
        var $$typeof = Component.$$typeof;

        if ($$typeof === REACT_FORWARD_REF_TYPE) {
          return ForwardRef;
        }

        if ($$typeof === REACT_MEMO_TYPE) {
          return MemoComponent;
        }
      }

      return IndeterminateComponent;
    } // This is used to create an alternate fiber to do work on.


    function createWorkInProgress(current, pendingProps, expirationTime) {
      var workInProgress = current.alternate;

      if (workInProgress === null) {
        // We use a double buffering pooling technique because we know that we'll
        // only ever need at most two versions of a tree. We pool the "other" unused
        // node that we're free to reuse. This is lazily created to avoid allocating
        // extra objects for things that are never updated. It also allow us to
        // reclaim the extra memory if needed.
        workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
        workInProgress.elementType = current.elementType;
        workInProgress.type = current.type;
        workInProgress.stateNode = current.stateNode;
        {
          // DEV-only fields
          workInProgress._debugID = current._debugID;
          workInProgress._debugSource = current._debugSource;
          workInProgress._debugOwner = current._debugOwner;
          workInProgress._debugHookTypes = current._debugHookTypes;
        }
        workInProgress.alternate = current;
        current.alternate = workInProgress;
      } else {
        workInProgress.pendingProps = pendingProps; // We already have an alternate.
        // Reset the effect tag.

        workInProgress.effectTag = NoEffect; // The effect list is no longer valid.

        workInProgress.nextEffect = null;
        workInProgress.firstEffect = null;
        workInProgress.lastEffect = null;

        if (enableProfilerTimer) {
          // We intentionally reset, rather than copy, actualDuration & actualStartTime.
          // This prevents time from endlessly accumulating in new commits.
          // This has the downside of resetting values for different priority renders,
          // But works for yielding (the common case) and should support resuming.
          workInProgress.actualDuration = 0;
          workInProgress.actualStartTime = -1;
        }
      }

      workInProgress.childExpirationTime = current.childExpirationTime;
      workInProgress.expirationTime = current.expirationTime;
      workInProgress.child = current.child;
      workInProgress.memoizedProps = current.memoizedProps;
      workInProgress.memoizedState = current.memoizedState;
      workInProgress.updateQueue = current.updateQueue;
      workInProgress.contextDependencies = current.contextDependencies; // These will be overridden during the parent's reconciliation

      workInProgress.sibling = current.sibling;
      workInProgress.index = current.index;
      workInProgress.ref = current.ref;

      if (enableProfilerTimer) {
        workInProgress.selfBaseDuration = current.selfBaseDuration;
        workInProgress.treeBaseDuration = current.treeBaseDuration;
      }

      return workInProgress;
    }

    function createHostRootFiber(isConcurrent) {
      var mode = isConcurrent ? ConcurrentMode | StrictMode : NoContext;

      if (enableProfilerTimer && isDevToolsPresent) {
        // Always collect profile timings when DevTools are present.
        // This enables DevTools to start capturing timing at any point–
        // Without some nodes in the tree having empty base times.
        mode |= ProfileMode;
      }

      return createFiber(HostRoot, null, null, mode);
    }

    function createFiberFromTypeAndProps(type, // React$ElementType
    key, pendingProps, owner, mode, expirationTime) {
      var fiber = void 0;
      var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

      var resolvedType = type;

      if (typeof type === 'function') {
        if (shouldConstruct(type)) {
          fiberTag = ClassComponent;
        }
      } else if (typeof type === 'string') {
        fiberTag = HostComponent;
      } else {
        getTag: switch (type) {
          case REACT_FRAGMENT_TYPE:
            return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

          case REACT_CONCURRENT_MODE_TYPE:
            return createFiberFromMode(pendingProps, mode | ConcurrentMode | StrictMode, expirationTime, key);

          case REACT_STRICT_MODE_TYPE:
            return createFiberFromMode(pendingProps, mode | StrictMode, expirationTime, key);

          case REACT_PROFILER_TYPE:
            return createFiberFromProfiler(pendingProps, mode, expirationTime, key);

          case REACT_SUSPENSE_TYPE:
            return createFiberFromSuspense(pendingProps, mode, expirationTime, key);

          default:
            {
              if (typeof type === 'object' && type !== null) {
                switch (type.$$typeof) {
                  case REACT_PROVIDER_TYPE:
                    fiberTag = ContextProvider;
                    break getTag;

                  case REACT_CONTEXT_TYPE:
                    // This is a consumer
                    fiberTag = ContextConsumer;
                    break getTag;

                  case REACT_FORWARD_REF_TYPE:
                    fiberTag = ForwardRef;
                    break getTag;

                  case REACT_MEMO_TYPE:
                    fiberTag = MemoComponent;
                    break getTag;

                  case REACT_LAZY_TYPE:
                    fiberTag = LazyComponent;
                    resolvedType = null;
                    break getTag;
                }
              }

              var info = '';
              {
                if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
                  info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
                }

                var ownerName = owner ? getComponentName(owner.type) : null;

                if (ownerName) {
                  info += '\n\nCheck the render method of `' + ownerName + '`.';
                }
              }
              invariant(false, 'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s', type == null ? type : typeof type, info);
            }
        }
      }

      fiber = createFiber(fiberTag, pendingProps, key, mode);
      fiber.elementType = type;
      fiber.type = resolvedType;
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromElement(element, mode, expirationTime) {
      var owner = null;
      {
        owner = element._owner;
      }
      var type = element.type;
      var key = element.key;
      var pendingProps = element.props;
      var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);
      {
        fiber._debugSource = element._source;
        fiber._debugOwner = element._owner;
      }
      return fiber;
    }

    function createFiberFromFragment(elements, mode, expirationTime, key) {
      var fiber = createFiber(Fragment, elements, key, mode);
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
      {
        if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {
          warningWithoutStack$1(false, 'Profiler must specify an "id" string and "onRender" function as props');
        }
      }
      var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.

      fiber.elementType = REACT_PROFILER_TYPE;
      fiber.type = REACT_PROFILER_TYPE;
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromMode(pendingProps, mode, expirationTime, key) {
      var fiber = createFiber(Mode, pendingProps, key, mode); // TODO: The Mode fiber shouldn't have a type. It has a tag.

      var type = (mode & ConcurrentMode) === NoContext ? REACT_STRICT_MODE_TYPE : REACT_CONCURRENT_MODE_TYPE;
      fiber.elementType = type;
      fiber.type = type;
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
      var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.

      var type = REACT_SUSPENSE_TYPE;
      fiber.elementType = type;
      fiber.type = type;
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromText(content, mode, expirationTime) {
      var fiber = createFiber(HostText, content, null, mode);
      fiber.expirationTime = expirationTime;
      return fiber;
    }

    function createFiberFromHostInstanceForDeletion() {
      var fiber = createFiber(HostComponent, null, null, NoContext); // TODO: These should not need a type.

      fiber.elementType = 'DELETED';
      fiber.type = 'DELETED';
      return fiber;
    }

    function createFiberFromPortal(portal, mode, expirationTime) {
      var pendingProps = portal.children !== null ? portal.children : [];
      var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
      fiber.expirationTime = expirationTime;
      fiber.stateNode = {
        containerInfo: portal.containerInfo,
        pendingChildren: null,
        // Used by persistent updates
        implementation: portal.implementation
      };
      return fiber;
    } // Used for stashing WIP properties to replay failed work in DEV.


    function assignFiberPropertiesInDEV(target, source) {
      if (target === null) {
        // This Fiber's initial properties will always be overwritten.
        // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
        target = createFiber(IndeterminateComponent, null, null, NoContext);
      } // This is intentionally written as a list of all properties.
      // We tried to use Object.assign() instead but this is called in
      // the hottest path, and Object.assign() was too slow:
      // https://github.com/facebook/react/issues/12502
      // This code is DEV-only so size is not a concern.


      target.tag = source.tag;
      target.key = source.key;
      target.elementType = source.elementType;
      target.type = source.type;
      target.stateNode = source.stateNode;
      target.return = source.return;
      target.child = source.child;
      target.sibling = source.sibling;
      target.index = source.index;
      target.ref = source.ref;
      target.pendingProps = source.pendingProps;
      target.memoizedProps = source.memoizedProps;
      target.updateQueue = source.updateQueue;
      target.memoizedState = source.memoizedState;
      target.contextDependencies = source.contextDependencies;
      target.mode = source.mode;
      target.effectTag = source.effectTag;
      target.nextEffect = source.nextEffect;
      target.firstEffect = source.firstEffect;
      target.lastEffect = source.lastEffect;
      target.expirationTime = source.expirationTime;
      target.childExpirationTime = source.childExpirationTime;
      target.alternate = source.alternate;

      if (enableProfilerTimer) {
        target.actualDuration = source.actualDuration;
        target.actualStartTime = source.actualStartTime;
        target.selfBaseDuration = source.selfBaseDuration;
        target.treeBaseDuration = source.treeBaseDuration;
      }

      target._debugID = source._debugID;
      target._debugSource = source._debugSource;
      target._debugOwner = source._debugOwner;
      target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
      target._debugHookTypes = source._debugHookTypes;
      return target;
    } // TODO: This should be lifted into the renderer.
    // The following attributes are only used by interaction tracing builds.
    // They enable interactions to be associated with their async work,
    // And expose interaction metadata to the React DevTools Profiler plugin.
    // Note that these attributes are only defined when the enableSchedulerTracing flag is enabled.
    // Exported FiberRoot type includes all properties,
    // To avoid requiring potentially error-prone :any casts throughout the project.
    // Profiling properties are only safe to access in profiling builds (when enableSchedulerTracing is true).
    // The types are defined separately within this file to ensure they stay in sync.
    // (We don't have to use an inline :any cast when enableSchedulerTracing is disabled.)


    function createFiberRoot(containerInfo, isConcurrent, hydrate) {
      // Cyclic construction. This cheats the type system right now because
      // stateNode is any.
      var uninitializedFiber = createHostRootFiber(isConcurrent);
      var root = void 0;

      if (enableSchedulerTracing) {
        root = {
          current: uninitializedFiber,
          containerInfo: containerInfo,
          pendingChildren: null,
          earliestPendingTime: NoWork,
          latestPendingTime: NoWork,
          earliestSuspendedTime: NoWork,
          latestSuspendedTime: NoWork,
          latestPingedTime: NoWork,
          pingCache: null,
          didError: false,
          pendingCommitExpirationTime: NoWork,
          finishedWork: null,
          timeoutHandle: noTimeout,
          context: null,
          pendingContext: null,
          hydrate: hydrate,
          nextExpirationTimeToWorkOn: NoWork,
          expirationTime: NoWork,
          firstBatch: null,
          nextScheduledRoot: null,
          interactionThreadID: tracing.unstable_getThreadID(),
          memoizedInteractions: new Set(),
          pendingInteractionMap: new Map()
        };
      } else {
        root = {
          current: uninitializedFiber,
          containerInfo: containerInfo,
          pendingChildren: null,
          pingCache: null,
          earliestPendingTime: NoWork,
          latestPendingTime: NoWork,
          earliestSuspendedTime: NoWork,
          latestSuspendedTime: NoWork,
          latestPingedTime: NoWork,
          didError: false,
          pendingCommitExpirationTime: NoWork,
          finishedWork: null,
          timeoutHandle: noTimeout,
          context: null,
          pendingContext: null,
          hydrate: hydrate,
          nextExpirationTimeToWorkOn: NoWork,
          expirationTime: NoWork,
          firstBatch: null,
          nextScheduledRoot: null
        };
      }

      uninitializedFiber.stateNode = root; // The reason for the way the Flow types are structured in this file,
      // Is to avoid needing :any casts everywhere interaction tracing fields are used.
      // Unfortunately that requires an :any cast for non-interaction tracing capable builds.
      // $FlowFixMe Remove this :any cast and replace it with something better.

      return root;
    }
    /**
     * Forked from fbjs/warning:
     * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
     *
     * Only change is we use console.warn instead of console.error,
     * and do nothing when 'console' is not supported.
     * This really simplifies the code.
     * ---
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */


    var lowPriorityWarning = function () {};

    {
      var printWarning = function (format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });

        if (typeof console !== 'undefined') {
          console.warn(message);
        }

        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };

      lowPriorityWarning = function (condition, format) {
        if (format === undefined) {
          throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
        }

        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }

          printWarning.apply(undefined, [format].concat(args));
        }
      };
    }
    var lowPriorityWarning$1 = lowPriorityWarning;
    var ReactStrictModeWarnings = {
      discardPendingWarnings: function () {},
      flushPendingDeprecationWarnings: function () {},
      flushPendingUnsafeLifecycleWarnings: function () {},
      recordDeprecationWarnings: function (fiber, instance) {},
      recordUnsafeLifecycleWarnings: function (fiber, instance) {},
      recordLegacyContextWarning: function (fiber, instance) {},
      flushLegacyContextWarning: function () {}
    };
    {
      var LIFECYCLE_SUGGESTIONS = {
        UNSAFE_componentWillMount: 'componentDidMount',
        UNSAFE_componentWillReceiveProps: 'static getDerivedStateFromProps',
        UNSAFE_componentWillUpdate: 'componentDidUpdate'
      };
      var pendingComponentWillMountWarnings = [];
      var pendingComponentWillReceivePropsWarnings = [];
      var pendingComponentWillUpdateWarnings = [];
      var pendingUnsafeLifecycleWarnings = new Map();
      var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

      var didWarnAboutDeprecatedLifecycles = new Set();
      var didWarnAboutUnsafeLifecycles = new Set();
      var didWarnAboutLegacyContext = new Set();

      var setToSortedString = function (set) {
        var array = [];
        set.forEach(function (value) {
          array.push(value);
        });
        return array.sort().join(', ');
      };

      ReactStrictModeWarnings.discardPendingWarnings = function () {
        pendingComponentWillMountWarnings = [];
        pendingComponentWillReceivePropsWarnings = [];
        pendingComponentWillUpdateWarnings = [];
        pendingUnsafeLifecycleWarnings = new Map();
        pendingLegacyContextWarning = new Map();
      };

      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
        pendingUnsafeLifecycleWarnings.forEach(function (lifecycleWarningsMap, strictRoot) {
          var lifecyclesWarningMessages = [];
          Object.keys(lifecycleWarningsMap).forEach(function (lifecycle) {
            var lifecycleWarnings = lifecycleWarningsMap[lifecycle];

            if (lifecycleWarnings.length > 0) {
              var componentNames = new Set();
              lifecycleWarnings.forEach(function (fiber) {
                componentNames.add(getComponentName(fiber.type) || 'Component');
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              var formatted = lifecycle.replace('UNSAFE_', '');
              var suggestion = LIFECYCLE_SUGGESTIONS[lifecycle];
              var sortedComponentNames = setToSortedString(componentNames);
              lifecyclesWarningMessages.push(formatted + ': Please update the following components to use ' + (suggestion + ' instead: ' + sortedComponentNames));
            }
          });

          if (lifecyclesWarningMessages.length > 0) {
            var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);
            warningWithoutStack$1(false, 'Unsafe lifecycle methods were found within a strict-mode tree:%s' + '\n\n%s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, lifecyclesWarningMessages.join('\n\n'));
          }
        });
        pendingUnsafeLifecycleWarnings = new Map();
      };

      var findStrictRoot = function (fiber) {
        var maybeStrictRoot = null;
        var node = fiber;

        while (node !== null) {
          if (node.mode & StrictMode) {
            maybeStrictRoot = node;
          }

          node = node.return;
        }

        return maybeStrictRoot;
      };

      ReactStrictModeWarnings.flushPendingDeprecationWarnings = function () {
        if (pendingComponentWillMountWarnings.length > 0) {
          var uniqueNames = new Set();
          pendingComponentWillMountWarnings.forEach(function (fiber) {
            uniqueNames.add(getComponentName(fiber.type) || 'Component');
            didWarnAboutDeprecatedLifecycles.add(fiber.type);
          });
          var sortedNames = setToSortedString(uniqueNames);
          lowPriorityWarning$1(false, 'componentWillMount is deprecated and will be removed in the next major version. ' + 'Use componentDidMount instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillMount.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', sortedNames);
          pendingComponentWillMountWarnings = [];
        }

        if (pendingComponentWillReceivePropsWarnings.length > 0) {
          var _uniqueNames = new Set();

          pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
            _uniqueNames.add(getComponentName(fiber.type) || 'Component');

            didWarnAboutDeprecatedLifecycles.add(fiber.type);
          });

          var _sortedNames = setToSortedString(_uniqueNames);

          lowPriorityWarning$1(false, 'componentWillReceiveProps is deprecated and will be removed in the next major version. ' + 'Use static getDerivedStateFromProps instead.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames);
          pendingComponentWillReceivePropsWarnings = [];
        }

        if (pendingComponentWillUpdateWarnings.length > 0) {
          var _uniqueNames2 = new Set();

          pendingComponentWillUpdateWarnings.forEach(function (fiber) {
            _uniqueNames2.add(getComponentName(fiber.type) || 'Component');

            didWarnAboutDeprecatedLifecycles.add(fiber.type);
          });

          var _sortedNames2 = setToSortedString(_uniqueNames2);

          lowPriorityWarning$1(false, 'componentWillUpdate is deprecated and will be removed in the next major version. ' + 'Use componentDidUpdate instead. As a temporary workaround, ' + 'you can rename to UNSAFE_componentWillUpdate.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-async-component-lifecycle-hooks', _sortedNames2);
          pendingComponentWillUpdateWarnings = [];
        }
      };

      ReactStrictModeWarnings.recordDeprecationWarnings = function (fiber, instance) {
        // Dedup strategy: Warn once per component.
        if (didWarnAboutDeprecatedLifecycles.has(fiber.type)) {
          return;
        } // Don't warn about react-lifecycles-compat polyfilled components.


        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
          pendingComponentWillMountWarnings.push(fiber);
        }

        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
          pendingComponentWillReceivePropsWarnings.push(fiber);
        }

        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
          pendingComponentWillUpdateWarnings.push(fiber);
        }
      };

      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
        var strictRoot = findStrictRoot(fiber);

        if (strictRoot === null) {
          warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
          return;
        } // Dedup strategy: Warn once per component.
        // This is difficult to track any other way since component names
        // are often vague and are likely to collide between 3rd party libraries.
        // An expand property is probably okay to use here since it's DEV-only,
        // and will only be set in the event of serious warnings.


        if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
          return;
        }

        var warningsForRoot = void 0;

        if (!pendingUnsafeLifecycleWarnings.has(strictRoot)) {
          warningsForRoot = {
            UNSAFE_componentWillMount: [],
            UNSAFE_componentWillReceiveProps: [],
            UNSAFE_componentWillUpdate: []
          };
          pendingUnsafeLifecycleWarnings.set(strictRoot, warningsForRoot);
        } else {
          warningsForRoot = pendingUnsafeLifecycleWarnings.get(strictRoot);
        }

        var unsafeLifecycles = [];

        if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillMount === 'function') {
          unsafeLifecycles.push('UNSAFE_componentWillMount');
        }

        if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
          unsafeLifecycles.push('UNSAFE_componentWillReceiveProps');
        }

        if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true || typeof instance.UNSAFE_componentWillUpdate === 'function') {
          unsafeLifecycles.push('UNSAFE_componentWillUpdate');
        }

        if (unsafeLifecycles.length > 0) {
          unsafeLifecycles.forEach(function (lifecycle) {
            warningsForRoot[lifecycle].push(fiber);
          });
        }
      };

      ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
        var strictRoot = findStrictRoot(fiber);

        if (strictRoot === null) {
          warningWithoutStack$1(false, 'Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');
          return;
        } // Dedup strategy: Warn once per component.


        if (didWarnAboutLegacyContext.has(fiber.type)) {
          return;
        }

        var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

        if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
          if (warningsForRoot === undefined) {
            warningsForRoot = [];
            pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
          }

          warningsForRoot.push(fiber);
        }
      };

      ReactStrictModeWarnings.flushLegacyContextWarning = function () {
        pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
          var uniqueNames = new Set();
          fiberArray.forEach(function (fiber) {
            uniqueNames.add(getComponentName(fiber.type) || 'Component');
            didWarnAboutLegacyContext.add(fiber.type);
          });
          var sortedNames = setToSortedString(uniqueNames);
          var strictRootComponentStack = getStackByFiberInDevAndProd(strictRoot);
          warningWithoutStack$1(false, 'Legacy context API has been detected within a strict-mode tree: %s' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here:' + '\nhttps://fb.me/react-strict-mode-warnings', strictRootComponentStack, sortedNames);
        });
      };
    } // This lets us hook into Fiber to debug what it's doing.
    // See https://github.com/facebook/react/pull/8033.
    // This is not part of the public API, not even for React DevTools.
    // You may only inject a debugTool if you work on React Fiber itself.

    var ReactFiberInstrumentation = {
      debugTool: null
    };
    var ReactFiberInstrumentation_1 = ReactFiberInstrumentation; // TODO: Offscreen updates should never suspend. However, a promise that
    // suspended inside an offscreen subtree should be able to ping at the priority
    // of the outer render.

    function markPendingPriorityLevel(root, expirationTime) {
      // If there's a gap between completing a failed root and retrying it,
      // additional updates may be scheduled. Clear `didError`, in case the update
      // is sufficient to fix the error.
      root.didError = false; // Update the latest and earliest pending times

      var earliestPendingTime = root.earliestPendingTime;

      if (earliestPendingTime === NoWork) {
        // No other pending updates.
        root.earliestPendingTime = root.latestPendingTime = expirationTime;
      } else {
        if (earliestPendingTime < expirationTime) {
          // This is the earliest pending update.
          root.earliestPendingTime = expirationTime;
        } else {
          var latestPendingTime = root.latestPendingTime;

          if (latestPendingTime > expirationTime) {
            // This is the latest pending update
            root.latestPendingTime = expirationTime;
          }
        }
      }

      findNextExpirationTimeToWorkOn(expirationTime, root);
    }

    function markCommittedPriorityLevels(root, earliestRemainingTime) {
      root.didError = false;

      if (earliestRemainingTime === NoWork) {
        // Fast path. There's no remaining work. Clear everything.
        root.earliestPendingTime = NoWork;
        root.latestPendingTime = NoWork;
        root.earliestSuspendedTime = NoWork;
        root.latestSuspendedTime = NoWork;
        root.latestPingedTime = NoWork;
        findNextExpirationTimeToWorkOn(NoWork, root);
        return;
      }

      if (earliestRemainingTime < root.latestPingedTime) {
        root.latestPingedTime = NoWork;
      } // Let's see if the previous latest known pending level was just flushed.


      var latestPendingTime = root.latestPendingTime;

      if (latestPendingTime !== NoWork) {
        if (latestPendingTime > earliestRemainingTime) {
          // We've flushed all the known pending levels.
          root.earliestPendingTime = root.latestPendingTime = NoWork;
        } else {
          var earliestPendingTime = root.earliestPendingTime;

          if (earliestPendingTime > earliestRemainingTime) {
            // We've flushed the earliest known pending level. Set this to the
            // latest pending time.
            root.earliestPendingTime = root.latestPendingTime;
          }
        }
      } // Now let's handle the earliest remaining level in the whole tree. We need to
      // decide whether to treat it as a pending level or as suspended. Check
      // it falls within the range of known suspended levels.


      var earliestSuspendedTime = root.earliestSuspendedTime;

      if (earliestSuspendedTime === NoWork) {
        // There's no suspended work. Treat the earliest remaining level as a
        // pending level.
        markPendingPriorityLevel(root, earliestRemainingTime);
        findNextExpirationTimeToWorkOn(NoWork, root);
        return;
      }

      var latestSuspendedTime = root.latestSuspendedTime;

      if (earliestRemainingTime < latestSuspendedTime) {
        // The earliest remaining level is later than all the suspended work. That
        // means we've flushed all the suspended work.
        root.earliestSuspendedTime = NoWork;
        root.latestSuspendedTime = NoWork;
        root.latestPingedTime = NoWork; // There's no suspended work. Treat the earliest remaining level as a
        // pending level.

        markPendingPriorityLevel(root, earliestRemainingTime);
        findNextExpirationTimeToWorkOn(NoWork, root);
        return;
      }

      if (earliestRemainingTime > earliestSuspendedTime) {
        // The earliest remaining time is earlier than all the suspended work.
        // Treat it as a pending update.
        markPendingPriorityLevel(root, earliestRemainingTime);
        findNextExpirationTimeToWorkOn(NoWork, root);
        return;
      } // The earliest remaining time falls within the range of known suspended
      // levels. We should treat this as suspended work.


      findNextExpirationTimeToWorkOn(NoWork, root);
    }

    function hasLowerPriorityWork(root, erroredExpirationTime) {
      var latestPendingTime = root.latestPendingTime;
      var latestSuspendedTime = root.latestSuspendedTime;
      var latestPingedTime = root.latestPingedTime;
      return latestPendingTime !== NoWork && latestPendingTime < erroredExpirationTime || latestSuspendedTime !== NoWork && latestSuspendedTime < erroredExpirationTime || latestPingedTime !== NoWork && latestPingedTime < erroredExpirationTime;
    }

    function isPriorityLevelSuspended(root, expirationTime) {
      var earliestSuspendedTime = root.earliestSuspendedTime;
      var latestSuspendedTime = root.latestSuspendedTime;
      return earliestSuspendedTime !== NoWork && expirationTime <= earliestSuspendedTime && expirationTime >= latestSuspendedTime;
    }

    function markSuspendedPriorityLevel(root, suspendedTime) {
      root.didError = false;
      clearPing(root, suspendedTime); // First, check the known pending levels and update them if needed.

      var earliestPendingTime = root.earliestPendingTime;
      var latestPendingTime = root.latestPendingTime;

      if (earliestPendingTime === suspendedTime) {
        if (latestPendingTime === suspendedTime) {
          // Both known pending levels were suspended. Clear them.
          root.earliestPendingTime = root.latestPendingTime = NoWork;
        } else {
          // The earliest pending level was suspended. Clear by setting it to the
          // latest pending level.
          root.earliestPendingTime = latestPendingTime;
        }
      } else if (latestPendingTime === suspendedTime) {
        // The latest pending level was suspended. Clear by setting it to the
        // latest pending level.
        root.latestPendingTime = earliestPendingTime;
      } // Finally, update the known suspended levels.


      var earliestSuspendedTime = root.earliestSuspendedTime;
      var latestSuspendedTime = root.latestSuspendedTime;

      if (earliestSuspendedTime === NoWork) {
        // No other suspended levels.
        root.earliestSuspendedTime = root.latestSuspendedTime = suspendedTime;
      } else {
        if (earliestSuspendedTime < suspendedTime) {
          // This is the earliest suspended level.
          root.earliestSuspendedTime = suspendedTime;
        } else if (latestSuspendedTime > suspendedTime) {
          // This is the latest suspended level
          root.latestSuspendedTime = suspendedTime;
        }
      }

      findNextExpirationTimeToWorkOn(suspendedTime, root);
    }

    function markPingedPriorityLevel(root, pingedTime) {
      root.didError = false; // TODO: When we add back resuming, we need to ensure the progressed work
      // is thrown out and not reused during the restarted render. One way to
      // invalidate the progressed work is to restart at expirationTime + 1.

      var latestPingedTime = root.latestPingedTime;

      if (latestPingedTime === NoWork || latestPingedTime > pingedTime) {
        root.latestPingedTime = pingedTime;
      }

      findNextExpirationTimeToWorkOn(pingedTime, root);
    }

    function clearPing(root, completedTime) {
      var latestPingedTime = root.latestPingedTime;

      if (latestPingedTime >= completedTime) {
        root.latestPingedTime = NoWork;
      }
    }

    function findEarliestOutstandingPriorityLevel(root, renderExpirationTime) {
      var earliestExpirationTime = renderExpirationTime;
      var earliestPendingTime = root.earliestPendingTime;
      var earliestSuspendedTime = root.earliestSuspendedTime;

      if (earliestPendingTime > earliestExpirationTime) {
        earliestExpirationTime = earliestPendingTime;
      }

      if (earliestSuspendedTime > earliestExpirationTime) {
        earliestExpirationTime = earliestSuspendedTime;
      }

      return earliestExpirationTime;
    }

    function didExpireAtExpirationTime(root, currentTime) {
      var expirationTime = root.expirationTime;

      if (expirationTime !== NoWork && currentTime <= expirationTime) {
        // The root has expired. Flush all work up to the current time.
        root.nextExpirationTimeToWorkOn = currentTime;
      }
    }

    function findNextExpirationTimeToWorkOn(completedExpirationTime, root) {
      var earliestSuspendedTime = root.earliestSuspendedTime;
      var latestSuspendedTime = root.latestSuspendedTime;
      var earliestPendingTime = root.earliestPendingTime;
      var latestPingedTime = root.latestPingedTime; // Work on the earliest pending time. Failing that, work on the latest
      // pinged time.

      var nextExpirationTimeToWorkOn = earliestPendingTime !== NoWork ? earliestPendingTime : latestPingedTime; // If there is no pending or pinged work, check if there's suspended work
      // that's lower priority than what we just completed.

      if (nextExpirationTimeToWorkOn === NoWork && (completedExpirationTime === NoWork || latestSuspendedTime < completedExpirationTime)) {
        // The lowest priority suspended work is the work most likely to be
        // committed next. Let's start rendering it again, so that if it times out,
        // it's ready to commit.
        nextExpirationTimeToWorkOn = latestSuspendedTime;
      }

      var expirationTime = nextExpirationTimeToWorkOn;

      if (expirationTime !== NoWork && earliestSuspendedTime > expirationTime) {
        // Expire using the earliest known expiration time.
        expirationTime = earliestSuspendedTime;
      }

      root.nextExpirationTimeToWorkOn = nextExpirationTimeToWorkOn;
      root.expirationTime = expirationTime;
    }

    function resolveDefaultProps(Component, baseProps) {
      if (Component && Component.defaultProps) {
        // Resolve default props. Taken from ReactElement
        var props = _assign({}, baseProps);

        var defaultProps = Component.defaultProps;

        for (var propName in defaultProps) {
          if (props[propName] === undefined) {
            props[propName] = defaultProps[propName];
          }
        }

        return props;
      }

      return baseProps;
    }

    function readLazyComponentType(lazyComponent) {
      var status = lazyComponent._status;
      var result = lazyComponent._result;

      switch (status) {
        case Resolved:
          {
            var Component = result;
            return Component;
          }

        case Rejected:
          {
            var error = result;
            throw error;
          }

        case Pending:
          {
            var thenable = result;
            throw thenable;
          }

        default:
          {
            lazyComponent._status = Pending;
            var ctor = lazyComponent._ctor;

            var _thenable = ctor();

            _thenable.then(function (moduleObject) {
              if (lazyComponent._status === Pending) {
                var defaultExport = moduleObject.default;
                {
                  if (defaultExport === undefined) {
                    warning$1(false, 'lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + "const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                  }
                }
                lazyComponent._status = Resolved;
                lazyComponent._result = defaultExport;
              }
            }, function (error) {
              if (lazyComponent._status === Pending) {
                lazyComponent._status = Rejected;
                lazyComponent._result = error;
              }
            }); // Handle synchronous thenables.


            switch (lazyComponent._status) {
              case Resolved:
                return lazyComponent._result;

              case Rejected:
                throw lazyComponent._result;
            }

            lazyComponent._result = _thenable;
            throw _thenable;
          }
      }
    }

    var fakeInternalInstance = {};
    var isArray$1 = Array.isArray; // React.Component uses a shared frozen object by default.
    // We'll use it to determine whether we need to initialize legacy refs.

    var emptyRefsObject = new React.Component().refs;
    var didWarnAboutStateAssignmentForComponent = void 0;
    var didWarnAboutUninitializedState = void 0;
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = void 0;
    var didWarnAboutLegacyLifecyclesAndDerivedState = void 0;
    var didWarnAboutUndefinedDerivedState = void 0;
    var warnOnUndefinedDerivedState = void 0;
    var warnOnInvalidCallback$1 = void 0;
    var didWarnAboutDirectlyAssigningPropsToState = void 0;
    var didWarnAboutContextTypeAndContextTypes = void 0;
    var didWarnAboutInvalidateContextType = void 0;
    {
      didWarnAboutStateAssignmentForComponent = new Set();
      didWarnAboutUninitializedState = new Set();
      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
      didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
      didWarnAboutDirectlyAssigningPropsToState = new Set();
      didWarnAboutUndefinedDerivedState = new Set();
      didWarnAboutContextTypeAndContextTypes = new Set();
      didWarnAboutInvalidateContextType = new Set();
      var didWarnOnInvalidCallback = new Set();

      warnOnInvalidCallback$1 = function (callback, callerName) {
        if (callback === null || typeof callback === 'function') {
          return;
        }

        var key = callerName + '_' + callback;

        if (!didWarnOnInvalidCallback.has(key)) {
          didWarnOnInvalidCallback.add(key);
          warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
        }
      };

      warnOnUndefinedDerivedState = function (type, partialState) {
        if (partialState === undefined) {
          var componentName = getComponentName(type) || 'Component';

          if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
            didWarnAboutUndefinedDerivedState.add(componentName);
            warningWithoutStack$1(false, '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
          }
        }
      }; // This is so gross but it's at least non-critical and can be removed if
      // it causes problems. This is meant to give a nicer error message for
      // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
      // ...)) which otherwise throws a "_processChildContext is not a function"
      // exception.


      Object.defineProperty(fakeInternalInstance, '_processChildContext', {
        enumerable: false,
        value: function () {
          invariant(false, '_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn\'t supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).');
        }
      });
      Object.freeze(fakeInternalInstance);
    }

    function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
      var prevState = workInProgress.memoizedState;
      {
        if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
          // Invoke the function an extra time to help detect side-effects.
          getDerivedStateFromProps(nextProps, prevState);
        }
      }
      var partialState = getDerivedStateFromProps(nextProps, prevState);
      {
        warnOnUndefinedDerivedState(ctor, partialState);
      } // Merge the partial state and the previous state.

      var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
      workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
      // base state.

      var updateQueue = workInProgress.updateQueue;

      if (updateQueue !== null && workInProgress.expirationTime === NoWork) {
        updateQueue.baseState = memoizedState;
      }
    }

    var classComponentUpdater = {
      isMounted: isMounted,
      enqueueSetState: function (inst, payload, callback) {
        var fiber = get(inst);
        var currentTime = requestCurrentTime();
        var expirationTime = computeExpirationForFiber(currentTime, fiber);
        var update = createUpdate(expirationTime);
        update.payload = payload;

        if (callback !== undefined && callback !== null) {
          {
            warnOnInvalidCallback$1(callback, 'setState');
          }
          update.callback = callback;
        }

        flushPassiveEffects();
        enqueueUpdate(fiber, update);
        scheduleWork(fiber, expirationTime);
      },
      enqueueReplaceState: function (inst, payload, callback) {
        var fiber = get(inst);
        var currentTime = requestCurrentTime();
        var expirationTime = computeExpirationForFiber(currentTime, fiber);
        var update = createUpdate(expirationTime);
        update.tag = ReplaceState;
        update.payload = payload;

        if (callback !== undefined && callback !== null) {
          {
            warnOnInvalidCallback$1(callback, 'replaceState');
          }
          update.callback = callback;
        }

        flushPassiveEffects();
        enqueueUpdate(fiber, update);
        scheduleWork(fiber, expirationTime);
      },
      enqueueForceUpdate: function (inst, callback) {
        var fiber = get(inst);
        var currentTime = requestCurrentTime();
        var expirationTime = computeExpirationForFiber(currentTime, fiber);
        var update = createUpdate(expirationTime);
        update.tag = ForceUpdate;

        if (callback !== undefined && callback !== null) {
          {
            warnOnInvalidCallback$1(callback, 'forceUpdate');
          }
          update.callback = callback;
        }

        flushPassiveEffects();
        enqueueUpdate(fiber, update);
        scheduleWork(fiber, expirationTime);
      }
    };

    function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
      var instance = workInProgress.stateNode;

      if (typeof instance.shouldComponentUpdate === 'function') {
        startPhaseTimer(workInProgress, 'shouldComponentUpdate');
        var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
        stopPhaseTimer();
        {
          !(shouldUpdate !== undefined) ? warningWithoutStack$1(false, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component') : void 0;
        }
        return shouldUpdate;
      }

      if (ctor.prototype && ctor.prototype.isPureReactComponent) {
        return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
      }

      return true;
    }

    function checkClassInstance(workInProgress, ctor, newProps) {
      var instance = workInProgress.stateNode;
      {
        var name = getComponentName(ctor) || 'Component';
        var renderPresent = instance.render;

        if (!renderPresent) {
          if (ctor.prototype && typeof ctor.prototype.render === 'function') {
            warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
          } else {
            warningWithoutStack$1(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
          }
        }

        var noGetInitialStateOnES6 = !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state;
        !noGetInitialStateOnES6 ? warningWithoutStack$1(false, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name) : void 0;
        var noGetDefaultPropsOnES6 = !instance.getDefaultProps || instance.getDefaultProps.isReactClassApproved;
        !noGetDefaultPropsOnES6 ? warningWithoutStack$1(false, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name) : void 0;
        var noInstancePropTypes = !instance.propTypes;
        !noInstancePropTypes ? warningWithoutStack$1(false, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name) : void 0;
        var noInstanceContextType = !instance.contextType;
        !noInstanceContextType ? warningWithoutStack$1(false, 'contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name) : void 0;
        var noInstanceContextTypes = !instance.contextTypes;
        !noInstanceContextTypes ? warningWithoutStack$1(false, 'contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name) : void 0;

        if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
          didWarnAboutContextTypeAndContextTypes.add(ctor);
          warningWithoutStack$1(false, '%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
        }

        var noComponentShouldUpdate = typeof instance.componentShouldUpdate !== 'function';
        !noComponentShouldUpdate ? warningWithoutStack$1(false, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name) : void 0;

        if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
          warningWithoutStack$1(false, '%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
        }

        var noComponentDidUnmount = typeof instance.componentDidUnmount !== 'function';
        !noComponentDidUnmount ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name) : void 0;
        var noComponentDidReceiveProps = typeof instance.componentDidReceiveProps !== 'function';
        !noComponentDidReceiveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name) : void 0;
        var noComponentWillRecieveProps = typeof instance.componentWillRecieveProps !== 'function';
        !noComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name) : void 0;
        var noUnsafeComponentWillRecieveProps = typeof instance.UNSAFE_componentWillRecieveProps !== 'function';
        !noUnsafeComponentWillRecieveProps ? warningWithoutStack$1(false, '%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name) : void 0;
        var hasMutatedProps = instance.props !== newProps;
        !(instance.props === undefined || !hasMutatedProps) ? warningWithoutStack$1(false, '%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name) : void 0;
        var noInstanceDefaultProps = !instance.defaultProps;
        !noInstanceDefaultProps ? warningWithoutStack$1(false, 'Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name) : void 0;

        if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
          warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
        }

        var noInstanceGetDerivedStateFromProps = typeof instance.getDerivedStateFromProps !== 'function';
        !noInstanceGetDerivedStateFromProps ? warningWithoutStack$1(false, '%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
        var noInstanceGetDerivedStateFromCatch = typeof instance.getDerivedStateFromError !== 'function';
        !noInstanceGetDerivedStateFromCatch ? warningWithoutStack$1(false, '%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name) : void 0;
        var noStaticGetSnapshotBeforeUpdate = typeof ctor.getSnapshotBeforeUpdate !== 'function';
        !noStaticGetSnapshotBeforeUpdate ? warningWithoutStack$1(false, '%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name) : void 0;
        var _state = instance.state;

        if (_state && (typeof _state !== 'object' || isArray$1(_state))) {
          warningWithoutStack$1(false, '%s.state: must be set to an object or null', name);
        }

        if (typeof instance.getChildContext === 'function') {
          !(typeof ctor.childContextTypes === 'object') ? warningWithoutStack$1(false, '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name) : void 0;
        }
      }
    }

    function adoptClassInstance(workInProgress, instance) {
      instance.updater = classComponentUpdater;
      workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

      set(instance, workInProgress);
      {
        instance._reactInternalInstance = fakeInternalInstance;
      }
    }

    function constructClassInstance(workInProgress, ctor, props, renderExpirationTime) {
      var isLegacyContextConsumer = false;
      var unmaskedContext = emptyContextObject;
      var context = null;
      var contextType = ctor.contextType;
      {
        if ('contextType' in ctor) {
          var isValid = // Allow null for conditional declaration
          contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

          if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
            didWarnAboutInvalidateContextType.add(ctor);
            var addendum = '';

            if (contextType === undefined) {
              addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
            } else if (typeof contextType !== 'object') {
              addendum = ' However, it is set to a ' + typeof contextType + '.';
            } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
              addendum = ' Did you accidentally pass the Context.Provider instead?';
            } else if (contextType._context !== undefined) {
              // <Context.Consumer>
              addendum = ' Did you accidentally pass the Context.Consumer instead?';
            } else {
              addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
            }

            warningWithoutStack$1(false, '%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
          }
        }
      }

      if (typeof contextType === 'object' && contextType !== null) {
        context = readContext(contextType);
      } else {
        unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
        var contextTypes = ctor.contextTypes;
        isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
        context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
      } // Instantiate twice to help detect side-effects.


      {
        if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
          new ctor(props, context); // eslint-disable-line no-new
        }
      }
      var instance = new ctor(props, context);
      var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
      adoptClassInstance(workInProgress, instance);
      {
        if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
          var componentName = getComponentName(ctor) || 'Component';

          if (!didWarnAboutUninitializedState.has(componentName)) {
            didWarnAboutUninitializedState.add(componentName);
            warningWithoutStack$1(false, '`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
          }
        } // If new component APIs are defined, "unsafe" lifecycles won't be called.
        // Warn about these lifecycles if they are present.
        // Don't warn about react-lifecycles-compat polyfilled methods though.


        if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
          var foundWillMountName = null;
          var foundWillReceivePropsName = null;
          var foundWillUpdateName = null;

          if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
            foundWillMountName = 'componentWillMount';
          } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
            foundWillMountName = 'UNSAFE_componentWillMount';
          }

          if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
            foundWillReceivePropsName = 'componentWillReceiveProps';
          } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
            foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
          }

          if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
            foundWillUpdateName = 'componentWillUpdate';
          } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
            foundWillUpdateName = 'UNSAFE_componentWillUpdate';
          }

          if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
            var _componentName = getComponentName(ctor) || 'Component';

            var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

            if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
              didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
              warningWithoutStack$1(false, 'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-async-component-lifecycle-hooks', _componentName, newApiName, foundWillMountName !== null ? '\n  ' + foundWillMountName : '', foundWillReceivePropsName !== null ? '\n  ' + foundWillReceivePropsName : '', foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '');
            }
          }
        }
      } // Cache unmasked context so we can avoid recreating masked context unless necessary.
      // ReactFiberContext usually updates this cache but can't for newly-created instances.

      if (isLegacyContextConsumer) {
        cacheContext(workInProgress, unmaskedContext, context);
      }

      return instance;
    }

    function callComponentWillMount(workInProgress, instance) {
      startPhaseTimer(workInProgress, 'componentWillMount');
      var oldState = instance.state;

      if (typeof instance.componentWillMount === 'function') {
        instance.componentWillMount();
      }

      if (typeof instance.UNSAFE_componentWillMount === 'function') {
        instance.UNSAFE_componentWillMount();
      }

      stopPhaseTimer();

      if (oldState !== instance.state) {
        {
          warningWithoutStack$1(false, '%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
        }
        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
      }
    }

    function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
      var oldState = instance.state;
      startPhaseTimer(workInProgress, 'componentWillReceiveProps');

      if (typeof instance.componentWillReceiveProps === 'function') {
        instance.componentWillReceiveProps(newProps, nextContext);
      }

      if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
        instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
      }

      stopPhaseTimer();

      if (instance.state !== oldState) {
        {
          var componentName = getComponentName(workInProgress.type) || 'Component';

          if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
            didWarnAboutStateAssignmentForComponent.add(componentName);
            warningWithoutStack$1(false, '%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
          }
        }
        classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
      }
    } // Invokes the mount life-cycles on a previously never rendered instance.


    function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
      {
        checkClassInstance(workInProgress, ctor, newProps);
      }
      var instance = workInProgress.stateNode;
      instance.props = newProps;
      instance.state = workInProgress.memoizedState;
      instance.refs = emptyRefsObject;
      var contextType = ctor.contextType;

      if (typeof contextType === 'object' && contextType !== null) {
        instance.context = readContext(contextType);
      } else {
        var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
        instance.context = getMaskedContext(workInProgress, unmaskedContext);
      }

      {
        if (instance.state === newProps) {
          var componentName = getComponentName(ctor) || 'Component';

          if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
            didWarnAboutDirectlyAssigningPropsToState.add(componentName);
            warningWithoutStack$1(false, '%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
          }
        }

        if (workInProgress.mode & StrictMode) {
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
        }

        if (warnAboutDeprecatedLifecycles) {
          ReactStrictModeWarnings.recordDeprecationWarnings(workInProgress, instance);
        }
      }
      var updateQueue = workInProgress.updateQueue;

      if (updateQueue !== null) {
        processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
        instance.state = workInProgress.memoizedState;
      }

      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

      if (typeof getDerivedStateFromProps === 'function') {
        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
        instance.state = workInProgress.memoizedState;
      } // In order to support react-lifecycles-compat polyfilled components,
      // Unsafe lifecycles should not be invoked for components using the new APIs.


      if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
        callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
        // process them now.

        updateQueue = workInProgress.updateQueue;

        if (updateQueue !== null) {
          processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
          instance.state = workInProgress.memoizedState;
        }
      }

      if (typeof instance.componentDidMount === 'function') {
        workInProgress.effectTag |= Update;
      }
    }

    function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
      var instance = workInProgress.stateNode;
      var oldProps = workInProgress.memoizedProps;
      instance.props = oldProps;
      var oldContext = instance.context;
      var contextType = ctor.contextType;
      var nextContext = void 0;

      if (typeof contextType === 'object' && contextType !== null) {
        nextContext = readContext(contextType);
      } else {
        var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
        nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
      }

      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
      // ever the previously attempted to render - not the "current". However,
      // during componentDidUpdate we pass the "current" props.
      // In order to support react-lifecycles-compat polyfilled components,
      // Unsafe lifecycles should not be invoked for components using the new APIs.

      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
        if (oldProps !== newProps || oldContext !== nextContext) {
          callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
      }

      resetHasForceUpdateBeforeProcessing();
      var oldState = workInProgress.memoizedState;
      var newState = instance.state = oldState;
      var updateQueue = workInProgress.updateQueue;

      if (updateQueue !== null) {
        processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
        newState = workInProgress.memoizedState;
      }

      if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
        // If an update was already in progress, we should schedule an Update
        // effect even though we're bailing out, so that cWU/cDU are called.
        if (typeof instance.componentDidMount === 'function') {
          workInProgress.effectTag |= Update;
        }

        return false;
      }

      if (typeof getDerivedStateFromProps === 'function') {
        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
        newState = workInProgress.memoizedState;
      }

      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

      if (shouldUpdate) {
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
          startPhaseTimer(workInProgress, 'componentWillMount');

          if (typeof instance.componentWillMount === 'function') {
            instance.componentWillMount();
          }

          if (typeof instance.UNSAFE_componentWillMount === 'function') {
            instance.UNSAFE_componentWillMount();
          }

          stopPhaseTimer();
        }

        if (typeof instance.componentDidMount === 'function') {
          workInProgress.effectTag |= Update;
        }
      } else {
        // If an update was already in progress, we should schedule an Update
        // effect even though we're bailing out, so that cWU/cDU are called.
        if (typeof instance.componentDidMount === 'function') {
          workInProgress.effectTag |= Update;
        } // If shouldComponentUpdate returned false, we should still update the
        // memoized state to indicate that this work can be reused.


        workInProgress.memoizedProps = newProps;
        workInProgress.memoizedState = newState;
      } // Update the existing instance's state, props, and context pointers even
      // if shouldComponentUpdate returns false.


      instance.props = newProps;
      instance.state = newState;
      instance.context = nextContext;
      return shouldUpdate;
    } // Invokes the update life-cycles and returns false if it shouldn't rerender.


    function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
      var instance = workInProgress.stateNode;
      var oldProps = workInProgress.memoizedProps;
      instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);
      var oldContext = instance.context;
      var contextType = ctor.contextType;
      var nextContext = void 0;

      if (typeof contextType === 'object' && contextType !== null) {
        nextContext = readContext(contextType);
      } else {
        var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
        nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
      }

      var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
      var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
      // ever the previously attempted to render - not the "current". However,
      // during componentDidUpdate we pass the "current" props.
      // In order to support react-lifecycles-compat polyfilled components,
      // Unsafe lifecycles should not be invoked for components using the new APIs.

      if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
        if (oldProps !== newProps || oldContext !== nextContext) {
          callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
        }
      }

      resetHasForceUpdateBeforeProcessing();
      var oldState = workInProgress.memoizedState;
      var newState = instance.state = oldState;
      var updateQueue = workInProgress.updateQueue;

      if (updateQueue !== null) {
        processUpdateQueue(workInProgress, updateQueue, newProps, instance, renderExpirationTime);
        newState = workInProgress.memoizedState;
      }

      if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
        // If an update was already in progress, we should schedule an Update
        // effect even though we're bailing out, so that cWU/cDU are called.
        if (typeof instance.componentDidUpdate === 'function') {
          if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.effectTag |= Update;
          }
        }

        if (typeof instance.getSnapshotBeforeUpdate === 'function') {
          if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.effectTag |= Snapshot;
          }
        }

        return false;
      }

      if (typeof getDerivedStateFromProps === 'function') {
        applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
        newState = workInProgress.memoizedState;
      }

      var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

      if (shouldUpdate) {
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.
        if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
          startPhaseTimer(workInProgress, 'componentWillUpdate');

          if (typeof instance.componentWillUpdate === 'function') {
            instance.componentWillUpdate(newProps, newState, nextContext);
          }

          if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
            instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
          }

          stopPhaseTimer();
        }

        if (typeof instance.componentDidUpdate === 'function') {
          workInProgress.effectTag |= Update;
        }

        if (typeof instance.getSnapshotBeforeUpdate === 'function') {
          workInProgress.effectTag |= Snapshot;
        }
      } else {
        // If an update was already in progress, we should schedule an Update
        // effect even though we're bailing out, so that cWU/cDU are called.
        if (typeof instance.componentDidUpdate === 'function') {
          if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.effectTag |= Update;
          }
        }

        if (typeof instance.getSnapshotBeforeUpdate === 'function') {
          if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
            workInProgress.effectTag |= Snapshot;
          }
        } // If shouldComponentUpdate returned false, we should still update the
        // memoized props/state to indicate that this work can be reused.


        workInProgress.memoizedProps = newProps;
        workInProgress.memoizedState = newState;
      } // Update the existing instance's state, props, and context pointers even
      // if shouldComponentUpdate returns false.


      instance.props = newProps;
      instance.state = newState;
      instance.context = nextContext;
      return shouldUpdate;
    }

    var didWarnAboutMaps = void 0;
    var didWarnAboutGenerators = void 0;
    var didWarnAboutStringRefInStrictMode = void 0;
    var ownerHasKeyUseWarning = void 0;
    var ownerHasFunctionTypeWarning = void 0;

    var warnForMissingKey = function (child) {};

    {
      didWarnAboutMaps = false;
      didWarnAboutGenerators = false;
      didWarnAboutStringRefInStrictMode = {};
      /**
       * Warn if there's no key explicitly set on dynamic arrays of children or
       * object keys are not valid. This allows us to keep track of children between
       * updates.
       */

      ownerHasKeyUseWarning = {};
      ownerHasFunctionTypeWarning = {};

      warnForMissingKey = function (child) {
        if (child === null || typeof child !== 'object') {
          return;
        }

        if (!child._store || child._store.validated || child.key != null) {
          return;
        }

        !(typeof child._store === 'object') ? invariant(false, 'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        child._store.validated = true;
        var currentComponentErrorInfo = 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + getCurrentFiberStackInDev();

        if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
          return;
        }

        ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
        warning$1(false, 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.');
      };
    }
    var isArray = Array.isArray;

    function coerceRef(returnFiber, current$$1, element) {
      var mixedRef = element.ref;

      if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
        {
          if (returnFiber.mode & StrictMode) {
            var componentName = getComponentName(returnFiber.type) || 'Component';

            if (!didWarnAboutStringRefInStrictMode[componentName]) {
              warningWithoutStack$1(false, 'A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using createRef() instead.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-string-ref', mixedRef, getStackByFiberInDevAndProd(returnFiber));
              didWarnAboutStringRefInStrictMode[componentName] = true;
            }
          }
        }

        if (element._owner) {
          var owner = element._owner;
          var inst = void 0;

          if (owner) {
            var ownerFiber = owner;
            !(ownerFiber.tag === ClassComponent) ? invariant(false, 'Function components cannot have refs. Did you mean to use React.forwardRef()?') : void 0;
            inst = ownerFiber.stateNode;
          }

          !inst ? invariant(false, 'Missing owner for string ref %s. This error is likely caused by a bug in React. Please file an issue.', mixedRef) : void 0;
          var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

          if (current$$1 !== null && current$$1.ref !== null && typeof current$$1.ref === 'function' && current$$1.ref._stringRef === stringRef) {
            return current$$1.ref;
          }

          var ref = function (value) {
            var refs = inst.refs;

            if (refs === emptyRefsObject) {
              // This is a lazy pooled frozen object, so we need to initialize.
              refs = inst.refs = {};
            }

            if (value === null) {
              delete refs[stringRef];
            } else {
              refs[stringRef] = value;
            }
          };

          ref._stringRef = stringRef;
          return ref;
        } else {
          !(typeof mixedRef === 'string') ? invariant(false, 'Expected ref to be a function, a string, an object returned by React.createRef(), or null.') : void 0;
          !element._owner ? invariant(false, 'Element ref was specified as a string (%s) but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component\'s render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information.', mixedRef) : void 0;
        }
      }

      return mixedRef;
    }

    function throwOnInvalidObjectType(returnFiber, newChild) {
      if (returnFiber.type !== 'textarea') {
        var addendum = '';
        {
          addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getCurrentFiberStackInDev();
        }
        invariant(false, 'Objects are not valid as a React child (found: %s).%s', Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild, addendum);
      }
    }

    function warnOnFunctionType() {
      var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + getCurrentFiberStackInDev();

      if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
        return;
      }

      ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;
      warning$1(false, 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
    } // This wrapper function exists because I expect to clone the code in each path
    // to be able to optimize each path individually by branching early. This needs
    // a compiler or we can do it manually. Helpers that don't need this branching
    // live outside of this function.


    function ChildReconciler(shouldTrackSideEffects) {
      function deleteChild(returnFiber, childToDelete) {
        if (!shouldTrackSideEffects) {
          // Noop.
          return;
        } // Deletions are added in reversed order so we add it to the front.
        // At this point, the return fiber's effect list is empty except for
        // deletions, so we can just append the deletion to the list. The remaining
        // effects aren't added until the complete phase. Once we implement
        // resuming, this may not be true.


        var last = returnFiber.lastEffect;

        if (last !== null) {
          last.nextEffect = childToDelete;
          returnFiber.lastEffect = childToDelete;
        } else {
          returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
        }

        childToDelete.nextEffect = null;
        childToDelete.effectTag = Deletion;
      }

      function deleteRemainingChildren(returnFiber, currentFirstChild) {
        if (!shouldTrackSideEffects) {
          // Noop.
          return null;
        } // TODO: For the shouldClone case, this could be micro-optimized a bit by
        // assuming that after the first child we've already added everything.


        var childToDelete = currentFirstChild;

        while (childToDelete !== null) {
          deleteChild(returnFiber, childToDelete);
          childToDelete = childToDelete.sibling;
        }

        return null;
      }

      function mapRemainingChildren(returnFiber, currentFirstChild) {
        // Add the remaining children to a temporary map so that we can find them by
        // keys quickly. Implicit (null) keys get added to this set with their index
        var existingChildren = new Map();
        var existingChild = currentFirstChild;

        while (existingChild !== null) {
          if (existingChild.key !== null) {
            existingChildren.set(existingChild.key, existingChild);
          } else {
            existingChildren.set(existingChild.index, existingChild);
          }

          existingChild = existingChild.sibling;
        }

        return existingChildren;
      }

      function useFiber(fiber, pendingProps, expirationTime) {
        // We currently set sibling to null and index to 0 here because it is easy
        // to forget to do before returning it. E.g. for the single child case.
        var clone = createWorkInProgress(fiber, pendingProps, expirationTime);
        clone.index = 0;
        clone.sibling = null;
        return clone;
      }

      function placeChild(newFiber, lastPlacedIndex, newIndex) {
        newFiber.index = newIndex;

        if (!shouldTrackSideEffects) {
          // Noop.
          return lastPlacedIndex;
        }

        var current$$1 = newFiber.alternate;

        if (current$$1 !== null) {
          var oldIndex = current$$1.index;

          if (oldIndex < lastPlacedIndex) {
            // This is a move.
            newFiber.effectTag = Placement;
            return lastPlacedIndex;
          } else {
            // This item can stay in place.
            return oldIndex;
          }
        } else {
          // This is an insertion.
          newFiber.effectTag = Placement;
          return lastPlacedIndex;
        }
      }

      function placeSingleChild(newFiber) {
        // This is simpler for the single child case. We only need to do a
        // placement for inserting new children.
        if (shouldTrackSideEffects && newFiber.alternate === null) {
          newFiber.effectTag = Placement;
        }

        return newFiber;
      }

      function updateTextNode(returnFiber, current$$1, textContent, expirationTime) {
        if (current$$1 === null || current$$1.tag !== HostText) {
          // Insert
          var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
          created.return = returnFiber;
          return created;
        } else {
          // Update
          var existing = useFiber(current$$1, textContent, expirationTime);
          existing.return = returnFiber;
          return existing;
        }
      }

      function updateElement(returnFiber, current$$1, element, expirationTime) {
        if (current$$1 !== null && current$$1.elementType === element.type) {
          // Move based on index
          var existing = useFiber(current$$1, element.props, expirationTime);
          existing.ref = coerceRef(returnFiber, current$$1, element);
          existing.return = returnFiber;
          {
            existing._debugSource = element._source;
            existing._debugOwner = element._owner;
          }
          return existing;
        } else {
          // Insert
          var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
          created.ref = coerceRef(returnFiber, current$$1, element);
          created.return = returnFiber;
          return created;
        }
      }

      function updatePortal(returnFiber, current$$1, portal, expirationTime) {
        if (current$$1 === null || current$$1.tag !== HostPortal || current$$1.stateNode.containerInfo !== portal.containerInfo || current$$1.stateNode.implementation !== portal.implementation) {
          // Insert
          var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
          created.return = returnFiber;
          return created;
        } else {
          // Update
          var existing = useFiber(current$$1, portal.children || [], expirationTime);
          existing.return = returnFiber;
          return existing;
        }
      }

      function updateFragment(returnFiber, current$$1, fragment, expirationTime, key) {
        if (current$$1 === null || current$$1.tag !== Fragment) {
          // Insert
          var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
          created.return = returnFiber;
          return created;
        } else {
          // Update
          var existing = useFiber(current$$1, fragment, expirationTime);
          existing.return = returnFiber;
          return existing;
        }
      }

      function createChild(returnFiber, newChild, expirationTime) {
        if (typeof newChild === 'string' || typeof newChild === 'number') {
          // Text nodes don't have keys. If the previous node is implicitly keyed
          // we can continue to replace it without aborting even if it is not a text
          // node.
          var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
          created.return = returnFiber;
          return created;
        }

        if (typeof newChild === 'object' && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);

                _created.ref = coerceRef(returnFiber, null, newChild);
                _created.return = returnFiber;
                return _created;
              }

            case REACT_PORTAL_TYPE:
              {
                var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);

                _created2.return = returnFiber;
                return _created2;
              }
          }

          if (isArray(newChild) || getIteratorFn(newChild)) {
            var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);

            _created3.return = returnFiber;
            return _created3;
          }

          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === 'function') {
            warnOnFunctionType();
          }
        }
        return null;
      }

      function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
        // Update the fiber if the keys match, otherwise return null.
        var key = oldFiber !== null ? oldFiber.key : null;

        if (typeof newChild === 'string' || typeof newChild === 'number') {
          // Text nodes don't have keys. If the previous node is implicitly keyed
          // we can continue to replace it without aborting even if it is not a text
          // node.
          if (key !== null) {
            return null;
          }

          return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
        }

        if (typeof newChild === 'object' && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                if (newChild.key === key) {
                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
                  }

                  return updateElement(returnFiber, oldFiber, newChild, expirationTime);
                } else {
                  return null;
                }
              }

            case REACT_PORTAL_TYPE:
              {
                if (newChild.key === key) {
                  return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
                } else {
                  return null;
                }
              }
          }

          if (isArray(newChild) || getIteratorFn(newChild)) {
            if (key !== null) {
              return null;
            }

            return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
          }

          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === 'function') {
            warnOnFunctionType();
          }
        }
        return null;
      }

      function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
        if (typeof newChild === 'string' || typeof newChild === 'number') {
          // Text nodes don't have keys, so we neither have to check the old nor
          // new node for the key. If both are text nodes, they match.
          var matchedFiber = existingChildren.get(newIdx) || null;
          return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
        }

        if (typeof newChild === 'object' && newChild !== null) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              {
                var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                if (newChild.type === REACT_FRAGMENT_TYPE) {
                  return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
                }

                return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
              }

            case REACT_PORTAL_TYPE:
              {
                var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

                return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
              }
          }

          if (isArray(newChild) || getIteratorFn(newChild)) {
            var _matchedFiber3 = existingChildren.get(newIdx) || null;

            return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
          }

          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === 'function') {
            warnOnFunctionType();
          }
        }
        return null;
      }
      /**
       * Warns if there is a duplicate or missing key
       */


      function warnOnInvalidKey(child, knownKeys) {
        {
          if (typeof child !== 'object' || child === null) {
            return knownKeys;
          }

          switch (child.$$typeof) {
            case REACT_ELEMENT_TYPE:
            case REACT_PORTAL_TYPE:
              warnForMissingKey(child);
              var key = child.key;

              if (typeof key !== 'string') {
                break;
              }

              if (knownKeys === null) {
                knownKeys = new Set();
                knownKeys.add(key);
                break;
              }

              if (!knownKeys.has(key)) {
                knownKeys.add(key);
                break;
              }

              warning$1(false, 'Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);
              break;

            default:
              break;
          }
        }
        return knownKeys;
      }

      function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
        // This algorithm can't optimize by searching from both ends since we
        // don't have backpointers on fibers. I'm trying to see how far we can get
        // with that model. If it ends up not being worth the tradeoffs, we can
        // add it later.
        // Even with a two ended optimization, we'd want to optimize for the case
        // where there are few changes and brute force the comparison instead of
        // going for the Map. It'd like to explore hitting that path first in
        // forward-only mode and only go for the Map once we notice that we need
        // lots of look ahead. This doesn't handle reversal as well as two ended
        // search but that's unusual. Besides, for the two ended optimization to
        // work on Iterables, we'd need to copy the whole set.
        // In this first iteration, we'll just live with hitting the bad case
        // (adding everything to a Map) in for every insert/move.
        // If you change this code, also update reconcileChildrenIterator() which
        // uses the same algorithm.
        {
          // First, validate keys.
          var knownKeys = null;

          for (var i = 0; i < newChildren.length; i++) {
            var child = newChildren[i];
            knownKeys = warnOnInvalidKey(child, knownKeys);
          }
        }
        var resultingFirstChild = null;
        var previousNewFiber = null;
        var oldFiber = currentFirstChild;
        var lastPlacedIndex = 0;
        var newIdx = 0;
        var nextOldFiber = null;

        for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
          if (oldFiber.index > newIdx) {
            nextOldFiber = oldFiber;
            oldFiber = null;
          } else {
            nextOldFiber = oldFiber.sibling;
          }

          var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

          if (newFiber === null) {
            // TODO: This breaks on empty slots like null children. That's
            // unfortunate because it triggers the slow path all the time. We need
            // a better way to communicate whether this was a miss or null,
            // boolean, undefined, etc.
            if (oldFiber === null) {
              oldFiber = nextOldFiber;
            }

            break;
          }

          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null) {
              // We matched the slot, but we didn't reuse the existing fiber, so we
              // need to delete the existing child.
              deleteChild(returnFiber, oldFiber);
            }
          }

          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

          if (previousNewFiber === null) {
            // TODO: Move out of the loop. This only happens for the first run.
            resultingFirstChild = newFiber;
          } else {
            // TODO: Defer siblings if we're not at the right index for this slot.
            // I.e. if we had null values before, then we want to defer this
            // for each null value. However, we also don't want to call updateSlot
            // with the previous one.
            previousNewFiber.sibling = newFiber;
          }

          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }

        if (newIdx === newChildren.length) {
          // We've reached the end of the new children. We can delete the rest.
          deleteRemainingChildren(returnFiber, oldFiber);
          return resultingFirstChild;
        }

        if (oldFiber === null) {
          // If we don't have any more existing children we can choose a fast path
          // since the rest will all be insertions.
          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);

            if (!_newFiber) {
              continue;
            }

            lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              // TODO: Move out of the loop. This only happens for the first run.
              resultingFirstChild = _newFiber;
            } else {
              previousNewFiber.sibling = _newFiber;
            }

            previousNewFiber = _newFiber;
          }

          return resultingFirstChild;
        } // Add all children to a key map for quick lookups.


        var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

        for (; newIdx < newChildren.length; newIdx++) {
          var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);

          if (_newFiber2) {
            if (shouldTrackSideEffects) {
              if (_newFiber2.alternate !== null) {
                // The new fiber is a work in progress, but if there exists a
                // current, that means that we reused the fiber. We need to delete
                // it from the child list so that we don't add it to the deletion
                // list.
                existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
              }
            }

            lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber2;
            } else {
              previousNewFiber.sibling = _newFiber2;
            }

            previousNewFiber = _newFiber2;
          }
        }

        if (shouldTrackSideEffects) {
          // Any existing children that weren't consumed above were deleted. We need
          // to add them to the deletion list.
          existingChildren.forEach(function (child) {
            return deleteChild(returnFiber, child);
          });
        }

        return resultingFirstChild;
      }

      function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
        // This is the same implementation as reconcileChildrenArray(),
        // but using the iterator instead.
        var iteratorFn = getIteratorFn(newChildrenIterable);
        !(typeof iteratorFn === 'function') ? invariant(false, 'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.') : void 0;
        {
          // We don't support rendering Generators because it's a mutation.
          // See https://github.com/facebook/react/issues/12995
          if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
          newChildrenIterable[Symbol.toStringTag] === 'Generator') {
            !didWarnAboutGenerators ? warning$1(false, 'Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.') : void 0;
            didWarnAboutGenerators = true;
          } // Warn about using Maps as children


          if (newChildrenIterable.entries === iteratorFn) {
            !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
            didWarnAboutMaps = true;
          } // First, validate keys.
          // We'll get a different iterator later for the main pass.


          var _newChildren = iteratorFn.call(newChildrenIterable);

          if (_newChildren) {
            var knownKeys = null;

            var _step = _newChildren.next();

            for (; !_step.done; _step = _newChildren.next()) {
              var child = _step.value;
              knownKeys = warnOnInvalidKey(child, knownKeys);
            }
          }
        }
        var newChildren = iteratorFn.call(newChildrenIterable);
        !(newChildren != null) ? invariant(false, 'An iterable object provided no iterator.') : void 0;
        var resultingFirstChild = null;
        var previousNewFiber = null;
        var oldFiber = currentFirstChild;
        var lastPlacedIndex = 0;
        var newIdx = 0;
        var nextOldFiber = null;
        var step = newChildren.next();

        for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
          if (oldFiber.index > newIdx) {
            nextOldFiber = oldFiber;
            oldFiber = null;
          } else {
            nextOldFiber = oldFiber.sibling;
          }

          var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

          if (newFiber === null) {
            // TODO: This breaks on empty slots like null children. That's
            // unfortunate because it triggers the slow path all the time. We need
            // a better way to communicate whether this was a miss or null,
            // boolean, undefined, etc.
            if (!oldFiber) {
              oldFiber = nextOldFiber;
            }

            break;
          }

          if (shouldTrackSideEffects) {
            if (oldFiber && newFiber.alternate === null) {
              // We matched the slot, but we didn't reuse the existing fiber, so we
              // need to delete the existing child.
              deleteChild(returnFiber, oldFiber);
            }
          }

          lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

          if (previousNewFiber === null) {
            // TODO: Move out of the loop. This only happens for the first run.
            resultingFirstChild = newFiber;
          } else {
            // TODO: Defer siblings if we're not at the right index for this slot.
            // I.e. if we had null values before, then we want to defer this
            // for each null value. However, we also don't want to call updateSlot
            // with the previous one.
            previousNewFiber.sibling = newFiber;
          }

          previousNewFiber = newFiber;
          oldFiber = nextOldFiber;
        }

        if (step.done) {
          // We've reached the end of the new children. We can delete the rest.
          deleteRemainingChildren(returnFiber, oldFiber);
          return resultingFirstChild;
        }

        if (oldFiber === null) {
          // If we don't have any more existing children we can choose a fast path
          // since the rest will all be insertions.
          for (; !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber3 = createChild(returnFiber, step.value, expirationTime);

            if (_newFiber3 === null) {
              continue;
            }

            lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              // TODO: Move out of the loop. This only happens for the first run.
              resultingFirstChild = _newFiber3;
            } else {
              previousNewFiber.sibling = _newFiber3;
            }

            previousNewFiber = _newFiber3;
          }

          return resultingFirstChild;
        } // Add all children to a key map for quick lookups.


        var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

        for (; !step.done; newIdx++, step = newChildren.next()) {
          var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);

          if (_newFiber4 !== null) {
            if (shouldTrackSideEffects) {
              if (_newFiber4.alternate !== null) {
                // The new fiber is a work in progress, but if there exists a
                // current, that means that we reused the fiber. We need to delete
                // it from the child list so that we don't add it to the deletion
                // list.
                existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
              }
            }

            lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

            if (previousNewFiber === null) {
              resultingFirstChild = _newFiber4;
            } else {
              previousNewFiber.sibling = _newFiber4;
            }

            previousNewFiber = _newFiber4;
          }
        }

        if (shouldTrackSideEffects) {
          // Any existing children that weren't consumed above were deleted. We need
          // to add them to the deletion list.
          existingChildren.forEach(function (child) {
            return deleteChild(returnFiber, child);
          });
        }

        return resultingFirstChild;
      }

      function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
        // There's no need to check for keys on text nodes since we don't have a
        // way to define them.
        if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
          // We already have an existing node so let's just update it and delete
          // the rest.
          deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
          var existing = useFiber(currentFirstChild, textContent, expirationTime);
          existing.return = returnFiber;
          return existing;
        } // The existing first child is not a text node so we need to create one
        // and delete the existing ones.


        deleteRemainingChildren(returnFiber, currentFirstChild);
        var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
        created.return = returnFiber;
        return created;
      }

      function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
        var key = element.key;
        var child = currentFirstChild;

        while (child !== null) {
          // TODO: If key === null and child.key === null, then this only applies to
          // the first item in the list.
          if (child.key === key) {
            if (child.tag === Fragment ? element.type === REACT_FRAGMENT_TYPE : child.elementType === element.type) {
              deleteRemainingChildren(returnFiber, child.sibling);
              var existing = useFiber(child, element.type === REACT_FRAGMENT_TYPE ? element.props.children : element.props, expirationTime);
              existing.ref = coerceRef(returnFiber, child, element);
              existing.return = returnFiber;
              {
                existing._debugSource = element._source;
                existing._debugOwner = element._owner;
              }
              return existing;
            } else {
              deleteRemainingChildren(returnFiber, child);
              break;
            }
          } else {
            deleteChild(returnFiber, child);
          }

          child = child.sibling;
        }

        if (element.type === REACT_FRAGMENT_TYPE) {
          var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
          created.return = returnFiber;
          return created;
        } else {
          var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);

          _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
          _created4.return = returnFiber;
          return _created4;
        }
      }

      function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
        var key = portal.key;
        var child = currentFirstChild;

        while (child !== null) {
          // TODO: If key === null and child.key === null, then this only applies to
          // the first item in the list.
          if (child.key === key) {
            if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
              deleteRemainingChildren(returnFiber, child.sibling);
              var existing = useFiber(child, portal.children || [], expirationTime);
              existing.return = returnFiber;
              return existing;
            } else {
              deleteRemainingChildren(returnFiber, child);
              break;
            }
          } else {
            deleteChild(returnFiber, child);
          }

          child = child.sibling;
        }

        var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
        created.return = returnFiber;
        return created;
      } // This API will tag the children with the side-effect of the reconciliation
      // itself. They will be added to the side-effect list as we pass through the
      // children and the parent.


      function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
        // This function is not recursive.
        // If the top level item is an array, we treat it as a set of children,
        // not as a fragment. Nested arrays on the other hand will be treated as
        // fragment nodes. Recursion happens at the normal flow.
        // Handle top level unkeyed fragments as if they were arrays.
        // This leads to an ambiguity between <>{[...]}</> and <>...</>.
        // We treat the ambiguous cases above the same.
        var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

        if (isUnkeyedTopLevelFragment) {
          newChild = newChild.props.children;
        } // Handle object types


        var isObject = typeof newChild === 'object' && newChild !== null;

        if (isObject) {
          switch (newChild.$$typeof) {
            case REACT_ELEMENT_TYPE:
              return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));

            case REACT_PORTAL_TYPE:
              return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
          }
        }

        if (typeof newChild === 'string' || typeof newChild === 'number') {
          return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
        }

        if (isArray(newChild)) {
          return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
        }

        if (getIteratorFn(newChild)) {
          return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
        }

        if (isObject) {
          throwOnInvalidObjectType(returnFiber, newChild);
        }

        {
          if (typeof newChild === 'function') {
            warnOnFunctionType();
          }
        }

        if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
          // If the new child is undefined, and the return fiber is a composite
          // component, throw an error. If Fiber return types are disabled,
          // we already threw above.
          switch (returnFiber.tag) {
            case ClassComponent:
              {
                {
                  var instance = returnFiber.stateNode;

                  if (instance.render._isMockFunction) {
                    // We allow auto-mocks to proceed as if they're returning null.
                    break;
                  }
                }
              }
            // Intentionally fall through to the next case, which handles both
            // functions and classes
            // eslint-disable-next-lined no-fallthrough

            case FunctionComponent:
              {
                var Component = returnFiber.type;
                invariant(false, '%s(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.', Component.displayName || Component.name || 'Component');
              }
          }
        } // Remaining cases are all treated as empty.


        return deleteRemainingChildren(returnFiber, currentFirstChild);
      }

      return reconcileChildFibers;
    }

    var reconcileChildFibers = ChildReconciler(true);
    var mountChildFibers = ChildReconciler(false);

    function cloneChildFibers(current$$1, workInProgress) {
      !(current$$1 === null || workInProgress.child === current$$1.child) ? invariant(false, 'Resuming work not yet implemented.') : void 0;

      if (workInProgress.child === null) {
        return;
      }

      var currentChild = workInProgress.child;
      var newChild = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
      workInProgress.child = newChild;
      newChild.return = workInProgress;

      while (currentChild.sibling !== null) {
        currentChild = currentChild.sibling;
        newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps, currentChild.expirationTime);
        newChild.return = workInProgress;
      }

      newChild.sibling = null;
    }

    var NO_CONTEXT = {};
    var contextStackCursor$1 = createCursor(NO_CONTEXT);
    var contextFiberStackCursor = createCursor(NO_CONTEXT);
    var rootInstanceStackCursor = createCursor(NO_CONTEXT);

    function requiredContext(c) {
      !(c !== NO_CONTEXT) ? invariant(false, 'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      return c;
    }

    function getRootHostContainer() {
      var rootInstance = requiredContext(rootInstanceStackCursor.current);
      return rootInstance;
    }

    function pushHostContainer(fiber, nextRootInstance) {
      // Push current root instance onto the stack;
      // This allows us to reset root when portals are popped.
      push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
      // This enables us to pop only Fibers that provide unique contexts.

      push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
      // However, we can't just call getRootHostContext() and push it because
      // we'd have a different number of entries on the stack depending on
      // whether getRootHostContext() throws somewhere in renderer code or not.
      // So we push an empty value first. This lets us safely unwind on errors.

      push(contextStackCursor$1, NO_CONTEXT, fiber);
      var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

      pop(contextStackCursor$1, fiber);
      push(contextStackCursor$1, nextRootContext, fiber);
    }

    function popHostContainer(fiber) {
      pop(contextStackCursor$1, fiber);
      pop(contextFiberStackCursor, fiber);
      pop(rootInstanceStackCursor, fiber);
    }

    function getHostContext() {
      var context = requiredContext(contextStackCursor$1.current);
      return context;
    }

    function pushHostContext(fiber) {
      var rootInstance = requiredContext(rootInstanceStackCursor.current);
      var context = requiredContext(contextStackCursor$1.current);
      var nextContext = getChildHostContext(context, fiber.type, rootInstance); // Don't push this Fiber's context unless it's unique.

      if (context === nextContext) {
        return;
      } // Track the context and the Fiber that provided it.
      // This enables us to pop only Fibers that provide unique contexts.


      push(contextFiberStackCursor, fiber, fiber);
      push(contextStackCursor$1, nextContext, fiber);
    }

    function popHostContext(fiber) {
      // Do not pop unless this Fiber provided the current context.
      // pushHostContext() only pushes Fibers that provide unique contexts.
      if (contextFiberStackCursor.current !== fiber) {
        return;
      }

      pop(contextStackCursor$1, fiber);
      pop(contextFiberStackCursor, fiber);
    }

    var NoEffect$1 =
    /*             */
    0;
    var UnmountSnapshot =
    /*      */
    2;
    var UnmountMutation =
    /*      */
    4;
    var MountMutation =
    /*        */
    8;
    var UnmountLayout =
    /*        */
    16;
    var MountLayout =
    /*          */
    32;
    var MountPassive =
    /*         */
    64;
    var UnmountPassive =
    /*       */
    128;
    var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
    var didWarnAboutMismatchedHooksForComponent = void 0;
    {
      didWarnAboutMismatchedHooksForComponent = new Set();
    } // These are set right before calling the component.

    var renderExpirationTime = NoWork; // The work-in-progress fiber. I've named it differently to distinguish it from
    // the work-in-progress hook.

    var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
    // current hook list is the list that belongs to the current fiber. The
    // work-in-progress hook list is a new list that will be added to the
    // work-in-progress fiber.

    var currentHook = null;
    var nextCurrentHook = null;
    var firstWorkInProgressHook = null;
    var workInProgressHook = null;
    var nextWorkInProgressHook = null;
    var remainingExpirationTime = NoWork;
    var componentUpdateQueue = null;
    var sideEffectTag = 0; // Updates scheduled during render will trigger an immediate re-render at the
    // end of the current pass. We can't store these updates on the normal queue,
    // because if the work is aborted, they should be discarded. Because this is
    // a relatively rare case, we also don't want to add an additional field to
    // either the hook or queue object types. So we store them in a lazily create
    // map of queue -> render-phase updates, which are discarded once the component
    // completes without re-rendering.
    // Whether an update was scheduled during the currently executing render pass.

    var didScheduleRenderPhaseUpdate = false; // Lazily created map of render-phase updates

    var renderPhaseUpdates = null; // Counter to prevent infinite loops.

    var numberOfReRenders = 0;
    var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

    var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
    // The list stores the order of hooks used during the initial render (mount).
    // Subsequent renders (updates) reference this list.

    var hookTypesDev = null;
    var hookTypesUpdateIndexDev = -1;

    function mountHookTypesDev() {
      {
        var hookName = currentHookNameInDev;

        if (hookTypesDev === null) {
          hookTypesDev = [hookName];
        } else {
          hookTypesDev.push(hookName);
        }
      }
    }

    function updateHookTypesDev() {
      {
        var hookName = currentHookNameInDev;

        if (hookTypesDev !== null) {
          hookTypesUpdateIndexDev++;

          if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
            warnOnHookMismatchInDev(hookName);
          }
        }
      }
    }

    function warnOnHookMismatchInDev(currentHookName) {
      {
        var componentName = getComponentName(currentlyRenderingFiber$1.type);

        if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
          didWarnAboutMismatchedHooksForComponent.add(componentName);

          if (hookTypesDev !== null) {
            var table = '';
            var secondColumnStart = 30;

            for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
              var oldHookName = hookTypesDev[i];
              var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
              var row = i + 1 + '. ' + oldHookName; // Extra space so second column lines up
              // lol @ IE not supporting String#repeat

              while (row.length < secondColumnStart) {
                row += ' ';
              }

              row += newHookName + '\n';
              table += row;
            }

            warning$1(false, 'React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
          }
        }
      }
    }

    function throwInvalidHookError() {
      invariant(false, 'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.');
    }

    function areHookInputsEqual(nextDeps, prevDeps) {
      if (prevDeps === null) {
        {
          warning$1(false, '%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
        }
        return false;
      }

      {
        // Don't bother comparing lengths in prod because these arrays should be
        // passed inline.
        if (nextDeps.length !== prevDeps.length) {
          warning$1(false, 'The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, '[' + nextDeps.join(', ') + ']', '[' + prevDeps.join(', ') + ']');
        }
      }

      for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
        if (is(nextDeps[i], prevDeps[i])) {
          continue;
        }

        return false;
      }

      return true;
    }

    function renderWithHooks(current, workInProgress, Component, props, refOrContext, nextRenderExpirationTime) {
      renderExpirationTime = nextRenderExpirationTime;
      currentlyRenderingFiber$1 = workInProgress;
      nextCurrentHook = current !== null ? current.memoizedState : null;
      {
        hookTypesDev = current !== null ? current._debugHookTypes : null;
        hookTypesUpdateIndexDev = -1;
      } // The following should have already been reset
      // currentHook = null;
      // workInProgressHook = null;
      // remainingExpirationTime = NoWork;
      // componentUpdateQueue = null;
      // didScheduleRenderPhaseUpdate = false;
      // renderPhaseUpdates = null;
      // numberOfReRenders = 0;
      // sideEffectTag = 0;
      // TODO Warn if no hooks are used at all during mount, then some are used during update.
      // Currently we will identify the update render as a mount because nextCurrentHook === null.
      // This is tricky because it's valid for certain types of components (e.g. React.lazy)
      // Using nextCurrentHook to differentiate between mount/update only works if at least one stateful hook is used.
      // Non-stateful hooks (e.g. context) don't get added to memoizedState,
      // so nextCurrentHook would be null during updates and mounts.

      {
        if (nextCurrentHook !== null) {
          ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
        } else if (hookTypesDev !== null) {
          // This dispatcher handles an edge case where a component is updating,
          // but no stateful hooks have been used.
          // We want to match the production code behavior (which will use HooksDispatcherOnMount),
          // but with the extra DEV validation to ensure hooks ordering hasn't changed.
          // This dispatcher does that.
          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
        } else {
          ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
        }
      }
      var children = Component(props, refOrContext);

      if (didScheduleRenderPhaseUpdate) {
        do {
          didScheduleRenderPhaseUpdate = false;
          numberOfReRenders += 1; // Start over from the beginning of the list

          nextCurrentHook = current !== null ? current.memoizedState : null;
          nextWorkInProgressHook = firstWorkInProgressHook;
          currentHook = null;
          workInProgressHook = null;
          componentUpdateQueue = null;
          {
            // Also validate hook order for cascading updates.
            hookTypesUpdateIndexDev = -1;
          }
          ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
          children = Component(props, refOrContext);
        } while (didScheduleRenderPhaseUpdate);

        renderPhaseUpdates = null;
        numberOfReRenders = 0;
      } // We can assume the previous dispatcher is always this one, since we set it
      // at the beginning of the render phase and there's no re-entrancy.


      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
      var renderedWork = currentlyRenderingFiber$1;
      renderedWork.memoizedState = firstWorkInProgressHook;
      renderedWork.expirationTime = remainingExpirationTime;
      renderedWork.updateQueue = componentUpdateQueue;
      renderedWork.effectTag |= sideEffectTag;
      {
        renderedWork._debugHookTypes = hookTypesDev;
      } // This check uses currentHook so that it works the same in DEV and prod bundles.
      // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.

      var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
      renderExpirationTime = NoWork;
      currentlyRenderingFiber$1 = null;
      currentHook = null;
      nextCurrentHook = null;
      firstWorkInProgressHook = null;
      workInProgressHook = null;
      nextWorkInProgressHook = null;
      {
        currentHookNameInDev = null;
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
      }
      remainingExpirationTime = NoWork;
      componentUpdateQueue = null;
      sideEffectTag = 0; // These were reset above
      // didScheduleRenderPhaseUpdate = false;
      // renderPhaseUpdates = null;
      // numberOfReRenders = 0;

      !!didRenderTooFewHooks ? invariant(false, 'Rendered fewer hooks than expected. This may be caused by an accidental early return statement.') : void 0;
      return children;
    }

    function bailoutHooks(current, workInProgress, expirationTime) {
      workInProgress.updateQueue = current.updateQueue;
      workInProgress.effectTag &= ~(Passive | Update);

      if (current.expirationTime <= expirationTime) {
        current.expirationTime = NoWork;
      }
    }

    function resetHooks() {
      // We can assume the previous dispatcher is always this one, since we set it
      // at the beginning of the render phase and there's no re-entrancy.
      ReactCurrentDispatcher$1.current = ContextOnlyDispatcher; // This is used to reset the state of this module when a component throws.
      // It's also called inside mountIndeterminateComponent if we determine the
      // component is a module-style component.

      renderExpirationTime = NoWork;
      currentlyRenderingFiber$1 = null;
      currentHook = null;
      nextCurrentHook = null;
      firstWorkInProgressHook = null;
      workInProgressHook = null;
      nextWorkInProgressHook = null;
      {
        hookTypesDev = null;
        hookTypesUpdateIndexDev = -1;
        currentHookNameInDev = null;
      }
      remainingExpirationTime = NoWork;
      componentUpdateQueue = null;
      sideEffectTag = 0;
      didScheduleRenderPhaseUpdate = false;
      renderPhaseUpdates = null;
      numberOfReRenders = 0;
    }

    function mountWorkInProgressHook() {
      var hook = {
        memoizedState: null,
        baseState: null,
        queue: null,
        baseUpdate: null,
        next: null
      };

      if (workInProgressHook === null) {
        // This is the first hook in the list
        firstWorkInProgressHook = workInProgressHook = hook;
      } else {
        // Append to the end of the list
        workInProgressHook = workInProgressHook.next = hook;
      }

      return workInProgressHook;
    }

    function updateWorkInProgressHook() {
      // This function is used both for updates and for re-renders triggered by a
      // render phase update. It assumes there is either a current hook we can
      // clone, or a work-in-progress hook from a previous render pass that we can
      // use as a base. When we reach the end of the base list, we must switch to
      // the dispatcher used for mounts.
      if (nextWorkInProgressHook !== null) {
        // There's already a work-in-progress. Reuse it.
        workInProgressHook = nextWorkInProgressHook;
        nextWorkInProgressHook = workInProgressHook.next;
        currentHook = nextCurrentHook;
        nextCurrentHook = currentHook !== null ? currentHook.next : null;
      } else {
        // Clone from the current hook.
        !(nextCurrentHook !== null) ? invariant(false, 'Rendered more hooks than during the previous render.') : void 0;
        currentHook = nextCurrentHook;
        var newHook = {
          memoizedState: currentHook.memoizedState,
          baseState: currentHook.baseState,
          queue: currentHook.queue,
          baseUpdate: currentHook.baseUpdate,
          next: null
        };

        if (workInProgressHook === null) {
          // This is the first hook in the list.
          workInProgressHook = firstWorkInProgressHook = newHook;
        } else {
          // Append to the end of the list.
          workInProgressHook = workInProgressHook.next = newHook;
        }

        nextCurrentHook = currentHook.next;
      }

      return workInProgressHook;
    }

    function createFunctionComponentUpdateQueue() {
      return {
        lastEffect: null
      };
    }

    function basicStateReducer(state, action) {
      return typeof action === 'function' ? action(state) : action;
    }

    function mountReducer(reducer, initialArg, init) {
      var hook = mountWorkInProgressHook();
      var initialState = void 0;

      if (init !== undefined) {
        initialState = init(initialArg);
      } else {
        initialState = initialArg;
      }

      hook.memoizedState = hook.baseState = initialState;
      var queue = hook.queue = {
        last: null,
        dispatch: null,
        lastRenderedReducer: reducer,
        lastRenderedState: initialState
      };
      var dispatch = queue.dispatch = dispatchAction.bind(null, // Flow doesn't know this is non-null, but we do.
      currentlyRenderingFiber$1, queue);
      return [hook.memoizedState, dispatch];
    }

    function updateReducer(reducer, initialArg, init) {
      var hook = updateWorkInProgressHook();
      var queue = hook.queue;
      !(queue !== null) ? invariant(false, 'Should have a queue. This is likely a bug in React. Please file an issue.') : void 0;
      queue.lastRenderedReducer = reducer;

      if (numberOfReRenders > 0) {
        // This is a re-render. Apply the new render phase updates to the previous
        var _dispatch = queue.dispatch;

        if (renderPhaseUpdates !== null) {
          // Render phase updates are stored in a map of queue -> linked list
          var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);

          if (firstRenderPhaseUpdate !== undefined) {
            renderPhaseUpdates.delete(queue);
            var newState = hook.memoizedState;
            var update = firstRenderPhaseUpdate;

            do {
              // Process this render phase update. We don't have to check the
              // priority because it will always be the same as the current
              // render's.
              var _action = update.action;
              newState = reducer(newState, _action);
              update = update.next;
            } while (update !== null); // Mark that the fiber performed work, but only if the new state is
            // different from the current state.


            if (!is(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }

            hook.memoizedState = newState; // Don't persist the state accumlated from the render phase updates to
            // the base state unless the queue is empty.
            // TODO: Not sure if this is the desired semantics, but it's what we
            // do for gDSFP. I can't remember why.

            if (hook.baseUpdate === queue.last) {
              hook.baseState = newState;
            }

            queue.lastRenderedState = newState;
            return [newState, _dispatch];
          }
        }

        return [hook.memoizedState, _dispatch];
      } // The last update in the entire queue


      var last = queue.last; // The last update that is part of the base state.

      var baseUpdate = hook.baseUpdate;
      var baseState = hook.baseState; // Find the first unprocessed update.

      var first = void 0;

      if (baseUpdate !== null) {
        if (last !== null) {
          // For the first update, the queue is a circular linked list where
          // `queue.last.next = queue.first`. Once the first update commits, and
          // the `baseUpdate` is no longer empty, we can unravel the list.
          last.next = null;
        }

        first = baseUpdate.next;
      } else {
        first = last !== null ? last.next : null;
      }

      if (first !== null) {
        var _newState = baseState;
        var newBaseState = null;
        var newBaseUpdate = null;
        var prevUpdate = baseUpdate;
        var _update = first;
        var didSkip = false;

        do {
          var updateExpirationTime = _update.expirationTime;

          if (updateExpirationTime < renderExpirationTime) {
            // Priority is insufficient. Skip this update. If this is the first
            // skipped update, the previous update/state is the new base
            // update/state.
            if (!didSkip) {
              didSkip = true;
              newBaseUpdate = prevUpdate;
              newBaseState = _newState;
            } // Update the remaining priority in the queue.


            if (updateExpirationTime > remainingExpirationTime) {
              remainingExpirationTime = updateExpirationTime;
            }
          } else {
            // Process this update.
            if (_update.eagerReducer === reducer) {
              // If this update was processed eagerly, and its reducer matches the
              // current reducer, we can use the eagerly computed state.
              _newState = _update.eagerState;
            } else {
              var _action2 = _update.action;
              _newState = reducer(_newState, _action2);
            }
          }

          prevUpdate = _update;
          _update = _update.next;
        } while (_update !== null && _update !== first);

        if (!didSkip) {
          newBaseUpdate = prevUpdate;
          newBaseState = _newState;
        } // Mark that the fiber performed work, but only if the new state is
        // different from the current state.


        if (!is(_newState, hook.memoizedState)) {
          markWorkInProgressReceivedUpdate();
        }

        hook.memoizedState = _newState;
        hook.baseUpdate = newBaseUpdate;
        hook.baseState = newBaseState;
        queue.lastRenderedState = _newState;
      }

      var dispatch = queue.dispatch;
      return [hook.memoizedState, dispatch];
    }

    function mountState(initialState) {
      var hook = mountWorkInProgressHook();

      if (typeof initialState === 'function') {
        initialState = initialState();
      }

      hook.memoizedState = hook.baseState = initialState;
      var queue = hook.queue = {
        last: null,
        dispatch: null,
        lastRenderedReducer: basicStateReducer,
        lastRenderedState: initialState
      };
      var dispatch = queue.dispatch = dispatchAction.bind(null, // Flow doesn't know this is non-null, but we do.
      currentlyRenderingFiber$1, queue);
      return [hook.memoizedState, dispatch];
    }

    function updateState(initialState) {
      return updateReducer(basicStateReducer, initialState);
    }

    function pushEffect(tag, create, destroy, deps) {
      var effect = {
        tag: tag,
        create: create,
        destroy: destroy,
        deps: deps,
        // Circular
        next: null
      };

      if (componentUpdateQueue === null) {
        componentUpdateQueue = createFunctionComponentUpdateQueue();
        componentUpdateQueue.lastEffect = effect.next = effect;
      } else {
        var _lastEffect = componentUpdateQueue.lastEffect;

        if (_lastEffect === null) {
          componentUpdateQueue.lastEffect = effect.next = effect;
        } else {
          var firstEffect = _lastEffect.next;
          _lastEffect.next = effect;
          effect.next = firstEffect;
          componentUpdateQueue.lastEffect = effect;
        }
      }

      return effect;
    }

    function mountRef(initialValue) {
      var hook = mountWorkInProgressHook();
      var ref = {
        current: initialValue
      };
      {
        Object.seal(ref);
      }
      hook.memoizedState = ref;
      return ref;
    }

    function updateRef(initialValue) {
      var hook = updateWorkInProgressHook();
      return hook.memoizedState;
    }

    function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      sideEffectTag |= fiberEffectTag;
      hook.memoizedState = pushEffect(hookEffectTag, create, undefined, nextDeps);
    }

    function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      var destroy = undefined;

      if (currentHook !== null) {
        var prevEffect = currentHook.memoizedState;
        destroy = prevEffect.destroy;

        if (nextDeps !== null) {
          var prevDeps = prevEffect.deps;

          if (areHookInputsEqual(nextDeps, prevDeps)) {
            pushEffect(NoEffect$1, create, destroy, nextDeps);
            return;
          }
        }
      }

      sideEffectTag |= fiberEffectTag;
      hook.memoizedState = pushEffect(hookEffectTag, create, destroy, nextDeps);
    }

    function mountEffect(create, deps) {
      return mountEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
    }

    function updateEffect(create, deps) {
      return updateEffectImpl(Update | Passive, UnmountPassive | MountPassive, create, deps);
    }

    function mountLayoutEffect(create, deps) {
      return mountEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
    }

    function updateLayoutEffect(create, deps) {
      return updateEffectImpl(Update, UnmountMutation | MountLayout, create, deps);
    }

    function imperativeHandleEffect(create, ref) {
      if (typeof ref === 'function') {
        var refCallback = ref;

        var _inst = create();

        refCallback(_inst);
        return function () {
          refCallback(null);
        };
      } else if (ref !== null && ref !== undefined) {
        var refObject = ref;
        {
          !refObject.hasOwnProperty('current') ? warning$1(false, 'Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}') : void 0;
        }

        var _inst2 = create();

        refObject.current = _inst2;
        return function () {
          refObject.current = null;
        };
      }
    }

    function mountImperativeHandle(ref, create, deps) {
      {
        !(typeof create === 'function') ? warning$1(false, 'Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null') : void 0;
      } // TODO: If deps are provided, should we skip comparing the ref itself?

      var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
      return mountEffectImpl(Update, UnmountMutation | MountLayout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }

    function updateImperativeHandle(ref, create, deps) {
      {
        !(typeof create === 'function') ? warning$1(false, 'Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null') : void 0;
      } // TODO: If deps are provided, should we skip comparing the ref itself?

      var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
      return updateEffectImpl(Update, UnmountMutation | MountLayout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
    }

    function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
      // The react-debug-hooks package injects its own implementation
      // so that e.g. DevTools can display custom hook values.
    }

    var updateDebugValue = mountDebugValue;

    function mountCallback(callback, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      hook.memoizedState = [callback, nextDeps];
      return callback;
    }

    function updateCallback(callback, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      var prevState = hook.memoizedState;

      if (prevState !== null) {
        if (nextDeps !== null) {
          var prevDeps = prevState[1];

          if (areHookInputsEqual(nextDeps, prevDeps)) {
            return prevState[0];
          }
        }
      }

      hook.memoizedState = [callback, nextDeps];
      return callback;
    }

    function mountMemo(nextCreate, deps) {
      var hook = mountWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      var nextValue = nextCreate();
      hook.memoizedState = [nextValue, nextDeps];
      return nextValue;
    }

    function updateMemo(nextCreate, deps) {
      var hook = updateWorkInProgressHook();
      var nextDeps = deps === undefined ? null : deps;
      var prevState = hook.memoizedState;

      if (prevState !== null) {
        // Assume these are defined. If they're not, areHookInputsEqual will warn.
        if (nextDeps !== null) {
          var prevDeps = prevState[1];

          if (areHookInputsEqual(nextDeps, prevDeps)) {
            return prevState[0];
          }
        }
      }

      var nextValue = nextCreate();
      hook.memoizedState = [nextValue, nextDeps];
      return nextValue;
    } // in a test-like environment, we want to warn if dispatchAction()
    // is called outside of a batchedUpdates/TestUtils.act(...) call.


    var shouldWarnForUnbatchedSetState = false;
    {
      // jest isn't a 'global', it's just exposed to tests via a wrapped function
      // further, this isn't a test file, so flow doesn't recognize the symbol. So...
      // $FlowExpectedError - because requirements don't give a damn about your type sigs.
      if ('undefined' !== typeof jest) {
        shouldWarnForUnbatchedSetState = true;
      }
    }

    function dispatchAction(fiber, queue, action) {
      !(numberOfReRenders < RE_RENDER_LIMIT) ? invariant(false, 'Too many re-renders. React limits the number of renders to prevent an infinite loop.') : void 0;
      {
        !(arguments.length <= 3) ? warning$1(false, "State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().') : void 0;
      }
      var alternate = fiber.alternate;

      if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
        // This is a render phase update. Stash it in a lazily-created map of
        // queue -> linked list of updates. After this render pass, we'll restart
        // and apply the stashed updates on top of the work-in-progress hook.
        didScheduleRenderPhaseUpdate = true;
        var update = {
          expirationTime: renderExpirationTime,
          action: action,
          eagerReducer: null,
          eagerState: null,
          next: null
        };

        if (renderPhaseUpdates === null) {
          renderPhaseUpdates = new Map();
        }

        var firstRenderPhaseUpdate = renderPhaseUpdates.get(queue);

        if (firstRenderPhaseUpdate === undefined) {
          renderPhaseUpdates.set(queue, update);
        } else {
          // Append the update to the end of the list.
          var lastRenderPhaseUpdate = firstRenderPhaseUpdate;

          while (lastRenderPhaseUpdate.next !== null) {
            lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
          }

          lastRenderPhaseUpdate.next = update;
        }
      } else {
        flushPassiveEffects();
        var currentTime = requestCurrentTime();

        var _expirationTime = computeExpirationForFiber(currentTime, fiber);

        var _update2 = {
          expirationTime: _expirationTime,
          action: action,
          eagerReducer: null,
          eagerState: null,
          next: null
        }; // Append the update to the end of the list.

        var _last = queue.last;

        if (_last === null) {
          // This is the first update. Create a circular list.
          _update2.next = _update2;
        } else {
          var first = _last.next;

          if (first !== null) {
            // Still circular.
            _update2.next = first;
          }

          _last.next = _update2;
        }

        queue.last = _update2;

        if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
          // The queue is currently empty, which means we can eagerly compute the
          // next state before entering the render phase. If the new state is the
          // same as the current state, we may be able to bail out entirely.
          var _lastRenderedReducer = queue.lastRenderedReducer;

          if (_lastRenderedReducer !== null) {
            var prevDispatcher = void 0;
            {
              prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
            }

            try {
              var currentState = queue.lastRenderedState;

              var _eagerState = _lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
              // it, on the update object. If the reducer hasn't changed by the
              // time we enter the render phase, then the eager state can be used
              // without calling the reducer again.


              _update2.eagerReducer = _lastRenderedReducer;
              _update2.eagerState = _eagerState;

              if (is(_eagerState, currentState)) {
                // Fast path. We can bail out without scheduling React to re-render.
                // It's still possible that we'll need to rebase this update later,
                // if the component re-renders for a different reason and by that
                // time the reducer has changed.
                return;
              }
            } catch (error) {// Suppress the error. It will throw again in the render phase.
            } finally {
              {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            }
          }
        }

        {
          if (shouldWarnForUnbatchedSetState === true) {
            warnIfNotCurrentlyBatchingInDev(fiber);
          }
        }
        scheduleWork(fiber, _expirationTime);
      }
    }

    var ContextOnlyDispatcher = {
      readContext: readContext,
      useCallback: throwInvalidHookError,
      useContext: throwInvalidHookError,
      useEffect: throwInvalidHookError,
      useImperativeHandle: throwInvalidHookError,
      useLayoutEffect: throwInvalidHookError,
      useMemo: throwInvalidHookError,
      useReducer: throwInvalidHookError,
      useRef: throwInvalidHookError,
      useState: throwInvalidHookError,
      useDebugValue: throwInvalidHookError
    };
    var HooksDispatcherOnMountInDEV = null;
    var HooksDispatcherOnMountWithHookTypesInDEV = null;
    var HooksDispatcherOnUpdateInDEV = null;
    var InvalidNestedHooksDispatcherOnMountInDEV = null;
    var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
    {
      var warnInvalidContextAccess = function () {
        warning$1(false, 'Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
      };

      var warnInvalidHookAccess = function () {
        warning$1(false, 'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://fb.me/rules-of-hooks');
      };

      HooksDispatcherOnMountInDEV = {
        readContext: function (context, observedBits) {
          return readContext(context, observedBits);
        },
        useCallback: function (callback, deps) {
          currentHookNameInDev = 'useCallback';
          mountHookTypesDev();
          return mountCallback(callback, deps);
        },
        useContext: function (context, observedBits) {
          currentHookNameInDev = 'useContext';
          mountHookTypesDev();
          return readContext(context, observedBits);
        },
        useEffect: function (create, deps) {
          currentHookNameInDev = 'useEffect';
          mountHookTypesDev();
          return mountEffect(create, deps);
        },
        useImperativeHandle: function (ref, create, deps) {
          currentHookNameInDev = 'useImperativeHandle';
          mountHookTypesDev();
          return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function (create, deps) {
          currentHookNameInDev = 'useLayoutEffect';
          mountHookTypesDev();
          return mountLayoutEffect(create, deps);
        },
        useMemo: function (create, deps) {
          currentHookNameInDev = 'useMemo';
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function (reducer, initialArg, init) {
          currentHookNameInDev = 'useReducer';
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function (initialValue) {
          currentHookNameInDev = 'useRef';
          mountHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function (initialState) {
          currentHookNameInDev = 'useState';
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function (value, formatterFn) {
          currentHookNameInDev = 'useDebugValue';
          mountHookTypesDev();
          return mountDebugValue(value, formatterFn);
        }
      };
      HooksDispatcherOnMountWithHookTypesInDEV = {
        readContext: function (context, observedBits) {
          return readContext(context, observedBits);
        },
        useCallback: function (callback, deps) {
          currentHookNameInDev = 'useCallback';
          updateHookTypesDev();
          return mountCallback(callback, deps);
        },
        useContext: function (context, observedBits) {
          currentHookNameInDev = 'useContext';
          updateHookTypesDev();
          return readContext(context, observedBits);
        },
        useEffect: function (create, deps) {
          currentHookNameInDev = 'useEffect';
          updateHookTypesDev();
          return mountEffect(create, deps);
        },
        useImperativeHandle: function (ref, create, deps) {
          currentHookNameInDev = 'useImperativeHandle';
          updateHookTypesDev();
          return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function (create, deps) {
          currentHookNameInDev = 'useLayoutEffect';
          updateHookTypesDev();
          return mountLayoutEffect(create, deps);
        },
        useMemo: function (create, deps) {
          currentHookNameInDev = 'useMemo';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function (reducer, initialArg, init) {
          currentHookNameInDev = 'useReducer';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function (initialValue) {
          currentHookNameInDev = 'useRef';
          updateHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function (initialState) {
          currentHookNameInDev = 'useState';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function (value, formatterFn) {
          currentHookNameInDev = 'useDebugValue';
          updateHookTypesDev();
          return mountDebugValue(value, formatterFn);
        }
      };
      HooksDispatcherOnUpdateInDEV = {
        readContext: function (context, observedBits) {
          return readContext(context, observedBits);
        },
        useCallback: function (callback, deps) {
          currentHookNameInDev = 'useCallback';
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function (context, observedBits) {
          currentHookNameInDev = 'useContext';
          updateHookTypesDev();
          return readContext(context, observedBits);
        },
        useEffect: function (create, deps) {
          currentHookNameInDev = 'useEffect';
          updateHookTypesDev();
          return updateEffect(create, deps);
        },
        useImperativeHandle: function (ref, create, deps) {
          currentHookNameInDev = 'useImperativeHandle';
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function (create, deps) {
          currentHookNameInDev = 'useLayoutEffect';
          updateHookTypesDev();
          return updateLayoutEffect(create, deps);
        },
        useMemo: function (create, deps) {
          currentHookNameInDev = 'useMemo';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

          try {
            return updateMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function (reducer, initialArg, init) {
          currentHookNameInDev = 'useReducer';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

          try {
            return updateReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function (initialValue) {
          currentHookNameInDev = 'useRef';
          updateHookTypesDev();
          return updateRef(initialValue);
        },
        useState: function (initialState) {
          currentHookNameInDev = 'useState';
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

          try {
            return updateState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function (value, formatterFn) {
          currentHookNameInDev = 'useDebugValue';
          updateHookTypesDev();
          return updateDebugValue(value, formatterFn);
        }
      };
      InvalidNestedHooksDispatcherOnMountInDEV = {
        readContext: function (context, observedBits) {
          warnInvalidContextAccess();
          return readContext(context, observedBits);
        },
        useCallback: function (callback, deps) {
          currentHookNameInDev = 'useCallback';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountCallback(callback, deps);
        },
        useContext: function (context, observedBits) {
          currentHookNameInDev = 'useContext';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return readContext(context, observedBits);
        },
        useEffect: function (create, deps) {
          currentHookNameInDev = 'useEffect';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountEffect(create, deps);
        },
        useImperativeHandle: function (ref, create, deps) {
          currentHookNameInDev = 'useImperativeHandle';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function (create, deps) {
          currentHookNameInDev = 'useLayoutEffect';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountLayoutEffect(create, deps);
        },
        useMemo: function (create, deps) {
          currentHookNameInDev = 'useMemo';
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function (reducer, initialArg, init) {
          currentHookNameInDev = 'useReducer';
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function (initialValue) {
          currentHookNameInDev = 'useRef';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountRef(initialValue);
        },
        useState: function (initialState) {
          currentHookNameInDev = 'useState';
          warnInvalidHookAccess();
          mountHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

          try {
            return mountState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function (value, formatterFn) {
          currentHookNameInDev = 'useDebugValue';
          warnInvalidHookAccess();
          mountHookTypesDev();
          return mountDebugValue(value, formatterFn);
        }
      };
      InvalidNestedHooksDispatcherOnUpdateInDEV = {
        readContext: function (context, observedBits) {
          warnInvalidContextAccess();
          return readContext(context, observedBits);
        },
        useCallback: function (callback, deps) {
          currentHookNameInDev = 'useCallback';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateCallback(callback, deps);
        },
        useContext: function (context, observedBits) {
          currentHookNameInDev = 'useContext';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return readContext(context, observedBits);
        },
        useEffect: function (create, deps) {
          currentHookNameInDev = 'useEffect';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateEffect(create, deps);
        },
        useImperativeHandle: function (ref, create, deps) {
          currentHookNameInDev = 'useImperativeHandle';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateImperativeHandle(ref, create, deps);
        },
        useLayoutEffect: function (create, deps) {
          currentHookNameInDev = 'useLayoutEffect';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateLayoutEffect(create, deps);
        },
        useMemo: function (create, deps) {
          currentHookNameInDev = 'useMemo';
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

          try {
            return updateMemo(create, deps);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useReducer: function (reducer, initialArg, init) {
          currentHookNameInDev = 'useReducer';
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

          try {
            return updateReducer(reducer, initialArg, init);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useRef: function (initialValue) {
          currentHookNameInDev = 'useRef';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateRef(initialValue);
        },
        useState: function (initialState) {
          currentHookNameInDev = 'useState';
          warnInvalidHookAccess();
          updateHookTypesDev();
          var prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

          try {
            return updateState(initialState);
          } finally {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        },
        useDebugValue: function (value, formatterFn) {
          currentHookNameInDev = 'useDebugValue';
          warnInvalidHookAccess();
          updateHookTypesDev();
          return updateDebugValue(value, formatterFn);
        }
      };
    }
    var commitTime = 0;
    var profilerStartTime = -1;

    function getCommitTime() {
      return commitTime;
    }

    function recordCommitTime() {
      if (!enableProfilerTimer) {
        return;
      }

      commitTime = scheduler.unstable_now();
    }

    function startProfilerTimer(fiber) {
      if (!enableProfilerTimer) {
        return;
      }

      profilerStartTime = scheduler.unstable_now();

      if (fiber.actualStartTime < 0) {
        fiber.actualStartTime = scheduler.unstable_now();
      }
    }

    function stopProfilerTimerIfRunning(fiber) {
      if (!enableProfilerTimer) {
        return;
      }

      profilerStartTime = -1;
    }

    function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
      if (!enableProfilerTimer) {
        return;
      }

      if (profilerStartTime >= 0) {
        var elapsedTime = scheduler.unstable_now() - profilerStartTime;
        fiber.actualDuration += elapsedTime;

        if (overrideBaseTime) {
          fiber.selfBaseDuration = elapsedTime;
        }

        profilerStartTime = -1;
      }
    } // The deepest Fiber on the stack involved in a hydration context.
    // This may have been an insertion or a hydration.


    var hydrationParentFiber = null;
    var nextHydratableInstance = null;
    var isHydrating = false;

    function enterHydrationState(fiber) {
      if (!supportsHydration) {
        return false;
      }

      var parentInstance = fiber.stateNode.containerInfo;
      nextHydratableInstance = getFirstHydratableChild(parentInstance);
      hydrationParentFiber = fiber;
      isHydrating = true;
      return true;
    }

    function reenterHydrationStateFromDehydratedSuspenseInstance(fiber) {
      if (!supportsHydration) {
        return false;
      }

      var suspenseInstance = fiber.stateNode;
      nextHydratableInstance = getNextHydratableSibling(suspenseInstance);
      popToNextHostParent(fiber);
      isHydrating = true;
      return true;
    }

    function deleteHydratableInstance(returnFiber, instance) {
      {
        switch (returnFiber.tag) {
          case HostRoot:
            didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
            break;

          case HostComponent:
            didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
            break;
        }
      }
      var childToDelete = createFiberFromHostInstanceForDeletion();
      childToDelete.stateNode = instance;
      childToDelete.return = returnFiber;
      childToDelete.effectTag = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
      // these children are not part of the reconciliation list of children.
      // Even if we abort and rereconcile the children, that will try to hydrate
      // again and the nodes are still in the host tree so these will be
      // recreated.

      if (returnFiber.lastEffect !== null) {
        returnFiber.lastEffect.nextEffect = childToDelete;
        returnFiber.lastEffect = childToDelete;
      } else {
        returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
      }
    }

    function insertNonHydratedInstance(returnFiber, fiber) {
      fiber.effectTag |= Placement;
      {
        switch (returnFiber.tag) {
          case HostRoot:
            {
              var parentContainer = returnFiber.stateNode.containerInfo;

              switch (fiber.tag) {
                case HostComponent:
                  var type = fiber.type;
                  var props = fiber.pendingProps;
                  didNotFindHydratableContainerInstance(parentContainer, type, props);
                  break;

                case HostText:
                  var text = fiber.pendingProps;
                  didNotFindHydratableContainerTextInstance(parentContainer, text);
                  break;

                case SuspenseComponent:
                  break;
              }

              break;
            }

          case HostComponent:
            {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;

              switch (fiber.tag) {
                case HostComponent:
                  var _type = fiber.type;
                  var _props = fiber.pendingProps;
                  didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props);
                  break;

                case HostText:
                  var _text = fiber.pendingProps;
                  didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
                  break;

                case SuspenseComponent:
                  didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance);
                  break;
              }

              break;
            }

          default:
            return;
        }
      }
    }

    function tryHydrate(fiber, nextInstance) {
      switch (fiber.tag) {
        case HostComponent:
          {
            var type = fiber.type;
            var props = fiber.pendingProps;
            var instance = canHydrateInstance(nextInstance, type, props);

            if (instance !== null) {
              fiber.stateNode = instance;
              return true;
            }

            return false;
          }

        case HostText:
          {
            var text = fiber.pendingProps;
            var textInstance = canHydrateTextInstance(nextInstance, text);

            if (textInstance !== null) {
              fiber.stateNode = textInstance;
              return true;
            }

            return false;
          }

        case SuspenseComponent:
          {
            if (enableSuspenseServerRenderer) {
              var suspenseInstance = canHydrateSuspenseInstance(nextInstance);

              if (suspenseInstance !== null) {
                // Downgrade the tag to a dehydrated component until we've hydrated it.
                fiber.tag = DehydratedSuspenseComponent;
                fiber.stateNode = suspenseInstance;
                return true;
              }
            }

            return false;
          }

        default:
          return false;
      }
    }

    function tryToClaimNextHydratableInstance(fiber) {
      if (!isHydrating) {
        return;
      }

      var nextInstance = nextHydratableInstance;

      if (!nextInstance) {
        // Nothing to hydrate. Make it an insertion.
        insertNonHydratedInstance(hydrationParentFiber, fiber);
        isHydrating = false;
        hydrationParentFiber = fiber;
        return;
      }

      var firstAttemptedInstance = nextInstance;

      if (!tryHydrate(fiber, nextInstance)) {
        // If we can't hydrate this instance let's try the next one.
        // We use this as a heuristic. It's based on intuition and not data so it
        // might be flawed or unnecessary.
        nextInstance = getNextHydratableSibling(firstAttemptedInstance);

        if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
          // Nothing to hydrate. Make it an insertion.
          insertNonHydratedInstance(hydrationParentFiber, fiber);
          isHydrating = false;
          hydrationParentFiber = fiber;
          return;
        } // We matched the next one, we'll now assume that the first one was
        // superfluous and we'll delete it. Since we can't eagerly delete it
        // we'll have to schedule a deletion. To do that, this node needs a dummy
        // fiber associated with it.


        deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
      }

      hydrationParentFiber = fiber;
      nextHydratableInstance = getFirstHydratableChild(nextInstance);
    }

    function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
      if (!supportsHydration) {
        invariant(false, 'Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
      }

      var instance = fiber.stateNode;
      var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.

      fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
      // is a new ref we mark this as an update.

      if (updatePayload !== null) {
        return true;
      }

      return false;
    }

    function prepareToHydrateHostTextInstance(fiber) {
      if (!supportsHydration) {
        invariant(false, 'Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
      }

      var textInstance = fiber.stateNode;
      var textContent = fiber.memoizedProps;
      var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
      {
        if (shouldUpdate) {
          // We assume that prepareToHydrateHostTextInstance is called in a context where the
          // hydration parent is the parent host component of this host text.
          var returnFiber = hydrationParentFiber;

          if (returnFiber !== null) {
            switch (returnFiber.tag) {
              case HostRoot:
                {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
                  break;
                }

              case HostComponent:
                {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
                  break;
                }
            }
          }
        }
      }
      return shouldUpdate;
    }

    function skipPastDehydratedSuspenseInstance(fiber) {
      if (!supportsHydration) {
        invariant(false, 'Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue.');
      }

      var suspenseInstance = fiber.stateNode;
      !suspenseInstance ? invariant(false, 'Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      nextHydratableInstance = getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
    }

    function popToNextHostParent(fiber) {
      var parent = fiber.return;

      while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== DehydratedSuspenseComponent) {
        parent = parent.return;
      }

      hydrationParentFiber = parent;
    }

    function popHydrationState(fiber) {
      if (!supportsHydration) {
        return false;
      }

      if (fiber !== hydrationParentFiber) {
        // We're deeper than the current hydration context, inside an inserted
        // tree.
        return false;
      }

      if (!isHydrating) {
        // If we're not currently hydrating but we're in a hydration context, then
        // we were an insertion and now need to pop up reenter hydration of our
        // siblings.
        popToNextHostParent(fiber);
        isHydrating = true;
        return false;
      }

      var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
      // We only do this deeper than head and body since they tend to have random
      // other nodes in them. We also ignore components with pure text content in
      // side of them.
      // TODO: Better heuristic.

      if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
        var nextInstance = nextHydratableInstance;

        while (nextInstance) {
          deleteHydratableInstance(fiber, nextInstance);
          nextInstance = getNextHydratableSibling(nextInstance);
        }
      }

      popToNextHostParent(fiber);
      nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
      return true;
    }

    function resetHydrationState() {
      if (!supportsHydration) {
        return;
      }

      hydrationParentFiber = null;
      nextHydratableInstance = null;
      isHydrating = false;
    }

    var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
    var didReceiveUpdate = false;
    var didWarnAboutBadClass = void 0;
    var didWarnAboutContextTypeOnFunctionComponent = void 0;
    var didWarnAboutGetDerivedStateOnFunctionComponent = void 0;
    var didWarnAboutFunctionRefs = void 0;
    var didWarnAboutReassigningProps = void 0;
    {
      didWarnAboutBadClass = {};
      didWarnAboutContextTypeOnFunctionComponent = {};
      didWarnAboutGetDerivedStateOnFunctionComponent = {};
      didWarnAboutFunctionRefs = {};
      didWarnAboutReassigningProps = false;
    }

    function reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime) {
      if (current$$1 === null) {
        // If this is a fresh new component that hasn't been rendered yet, we
        // won't update its child set by applying minimal side-effects. Instead,
        // we will add them all to the child before it gets rendered. That means
        // we can optimize this reconciliation pass by not tracking side-effects.
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
      } else {
        // If the current child is the same as the work in progress, it means that
        // we haven't yet started any work on these children. Therefore, we use
        // the clone algorithm to create a copy of all the current children.
        // If we had any progressed work already, that is invalid at this point so
        // let's throw it out.
        workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, nextChildren, renderExpirationTime);
      }
    }

    function forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime) {
      // This function is fork of reconcileChildren. It's used in cases where we
      // want to reconcile without matching against the existing set. This has the
      // effect of all current children being unmounted; even if the type and key
      // are the same, the old child is unmounted and a new child is created.
      //
      // To do this, we're going to go through the reconcile algorithm twice. In
      // the first pass, we schedule a deletion for all the current children by
      // passing null.
      workInProgress.child = reconcileChildFibers(workInProgress, current$$1.child, null, renderExpirationTime); // In the second pass, we mount the new children. The trick here is that we
      // pass null in place of where we usually pass the current child set. This has
      // the effect of remounting all children regardless of whether their their
      // identity matches.

      workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
    }

    function updateForwardRef(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
      // TODO: current can be non-null here even if the component
      // hasn't yet mounted. This happens after the first render suspends.
      // We'll need to figure out if this is fine or can cause issues.
      {
        if (workInProgress.type !== workInProgress.elementType) {
          // Lazy component props can't be validated in createElement
          // because they're only guaranteed to be resolved here.
          var innerPropTypes = Component.propTypes;

          if (innerPropTypes) {
            checkPropTypes(innerPropTypes, nextProps, // Resolved props
            'prop', getComponentName(Component), getCurrentFiberStackInDev);
          }
        }
      }
      var render = Component.render;
      var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

      var nextChildren = void 0;
      prepareToReadContext(workInProgress, renderExpirationTime);
      {
        ReactCurrentOwner$3.current = workInProgress;
        setCurrentPhase('render');
        nextChildren = renderWithHooks(current$$1, workInProgress, render, nextProps, ref, renderExpirationTime);

        if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
          // Only double-render components with Hooks
          if (workInProgress.memoizedState !== null) {
            nextChildren = renderWithHooks(current$$1, workInProgress, render, nextProps, ref, renderExpirationTime);
          }
        }

        setCurrentPhase(null);
      }

      if (current$$1 !== null && !didReceiveUpdate) {
        bailoutHooks(current$$1, workInProgress, renderExpirationTime);
        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      } // React DevTools reads this flag.


      workInProgress.effectTag |= PerformedWork;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function updateMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
      if (current$$1 === null) {
        var type = Component.type;

        if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
        Component.defaultProps === undefined) {
          // If this is a plain function component without default props,
          // and with only the default shallow comparison, we upgrade it
          // to a SimpleMemoComponent to allow fast path updates.
          workInProgress.tag = SimpleMemoComponent;
          workInProgress.type = type;
          {
            validateFunctionComponentInDev(workInProgress, type);
          }
          return updateSimpleMemoComponent(current$$1, workInProgress, type, nextProps, updateExpirationTime, renderExpirationTime);
        }

        {
          var innerPropTypes = type.propTypes;

          if (innerPropTypes) {
            // Inner memo component props aren't currently validated in createElement.
            // We could move it there, but we'd still need this for lazy code path.
            checkPropTypes(innerPropTypes, nextProps, // Resolved props
            'prop', getComponentName(type), getCurrentFiberStackInDev);
          }
        }
        var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
        child.ref = workInProgress.ref;
        child.return = workInProgress;
        workInProgress.child = child;
        return child;
      }

      {
        var _type = Component.type;
        var _innerPropTypes = _type.propTypes;

        if (_innerPropTypes) {
          // Inner memo component props aren't currently validated in createElement.
          // We could move it there, but we'd still need this for lazy code path.
          checkPropTypes(_innerPropTypes, nextProps, // Resolved props
          'prop', getComponentName(_type), getCurrentFiberStackInDev);
        }
      }
      var currentChild = current$$1.child; // This is always exactly one child

      if (updateExpirationTime < renderExpirationTime) {
        // This will be the props with resolved defaultProps,
        // unlike current.memoizedProps which will be the unresolved ones.
        var prevProps = currentChild.memoizedProps; // Default to shallow comparison

        var compare = Component.compare;
        compare = compare !== null ? compare : shallowEqual;

        if (compare(prevProps, nextProps) && current$$1.ref === workInProgress.ref) {
          return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
        }
      } // React DevTools reads this flag.


      workInProgress.effectTag |= PerformedWork;
      var newChild = createWorkInProgress(currentChild, nextProps, renderExpirationTime);
      newChild.ref = workInProgress.ref;
      newChild.return = workInProgress;
      workInProgress.child = newChild;
      return newChild;
    }

    function updateSimpleMemoComponent(current$$1, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
      // TODO: current can be non-null here even if the component
      // hasn't yet mounted. This happens when the inner render suspends.
      // We'll need to figure out if this is fine or can cause issues.
      {
        if (workInProgress.type !== workInProgress.elementType) {
          // Lazy component props can't be validated in createElement
          // because they're only guaranteed to be resolved here.
          var outerMemoType = workInProgress.elementType;

          if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
            // We warn when you define propTypes on lazy()
            // so let's just skip over it to find memo() outer wrapper.
            // Inner props for memo are validated later.
            outerMemoType = refineResolvedLazyComponent(outerMemoType);
          }

          var outerPropTypes = outerMemoType && outerMemoType.propTypes;

          if (outerPropTypes) {
            checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
            'prop', getComponentName(outerMemoType), getCurrentFiberStackInDev);
          } // Inner propTypes will be validated in the function component path.

        }
      }

      if (current$$1 !== null) {
        var prevProps = current$$1.memoizedProps;

        if (shallowEqual(prevProps, nextProps) && current$$1.ref === workInProgress.ref) {
          didReceiveUpdate = false;

          if (updateExpirationTime < renderExpirationTime) {
            return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
          }
        }
      }

      return updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
    }

    function updateFragment(current$$1, workInProgress, renderExpirationTime) {
      var nextChildren = workInProgress.pendingProps;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function updateMode(current$$1, workInProgress, renderExpirationTime) {
      var nextChildren = workInProgress.pendingProps.children;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function updateProfiler(current$$1, workInProgress, renderExpirationTime) {
      if (enableProfilerTimer) {
        workInProgress.effectTag |= Update;
      }

      var nextProps = workInProgress.pendingProps;
      var nextChildren = nextProps.children;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function markRef(current$$1, workInProgress) {
      var ref = workInProgress.ref;

      if (current$$1 === null && ref !== null || current$$1 !== null && current$$1.ref !== ref) {
        // Schedule a Ref effect
        workInProgress.effectTag |= Ref;
      }
    }

    function updateFunctionComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
      {
        if (workInProgress.type !== workInProgress.elementType) {
          // Lazy component props can't be validated in createElement
          // because they're only guaranteed to be resolved here.
          var innerPropTypes = Component.propTypes;

          if (innerPropTypes) {
            checkPropTypes(innerPropTypes, nextProps, // Resolved props
            'prop', getComponentName(Component), getCurrentFiberStackInDev);
          }
        }
      }
      var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
      var context = getMaskedContext(workInProgress, unmaskedContext);
      var nextChildren = void 0;
      prepareToReadContext(workInProgress, renderExpirationTime);
      {
        ReactCurrentOwner$3.current = workInProgress;
        setCurrentPhase('render');
        nextChildren = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime);

        if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
          // Only double-render components with Hooks
          if (workInProgress.memoizedState !== null) {
            nextChildren = renderWithHooks(current$$1, workInProgress, Component, nextProps, context, renderExpirationTime);
          }
        }

        setCurrentPhase(null);
      }

      if (current$$1 !== null && !didReceiveUpdate) {
        bailoutHooks(current$$1, workInProgress, renderExpirationTime);
        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      } // React DevTools reads this flag.


      workInProgress.effectTag |= PerformedWork;
      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function updateClassComponent(current$$1, workInProgress, Component, nextProps, renderExpirationTime) {
      {
        if (workInProgress.type !== workInProgress.elementType) {
          // Lazy component props can't be validated in createElement
          // because they're only guaranteed to be resolved here.
          var innerPropTypes = Component.propTypes;

          if (innerPropTypes) {
            checkPropTypes(innerPropTypes, nextProps, // Resolved props
            'prop', getComponentName(Component), getCurrentFiberStackInDev);
          }
        }
      } // Push context providers early to prevent context stack mismatches.
      // During mounting we don't know the child context yet as the instance doesn't exist.
      // We will invalidate the child context in finishClassComponent() right after rendering.

      var hasContext = void 0;

      if (isContextProvider(Component)) {
        hasContext = true;
        pushContextProvider(workInProgress);
      } else {
        hasContext = false;
      }

      prepareToReadContext(workInProgress, renderExpirationTime);
      var instance = workInProgress.stateNode;
      var shouldUpdate = void 0;

      if (instance === null) {
        if (current$$1 !== null) {
          // An class component without an instance only mounts if it suspended
          // inside a non- concurrent tree, in an inconsistent state. We want to
          // tree it like a new mount, even though an empty version of it already
          // committed. Disconnect the alternate pointers.
          current$$1.alternate = null;
          workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

          workInProgress.effectTag |= Placement;
        } // In the initial pass we might need to construct the instance.


        constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
        mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
        shouldUpdate = true;
      } else if (current$$1 === null) {
        // In a resume, we'll already have an instance we can reuse.
        shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
      } else {
        shouldUpdate = updateClassInstance(current$$1, workInProgress, Component, nextProps, renderExpirationTime);
      }

      var nextUnitOfWork = finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);
      {
        var inst = workInProgress.stateNode;

        if (inst.props !== nextProps) {
          !didWarnAboutReassigningProps ? warning$1(false, 'It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component') : void 0;
          didWarnAboutReassigningProps = true;
        }
      }
      return nextUnitOfWork;
    }

    function finishClassComponent(current$$1, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
      // Refs should update even if shouldComponentUpdate returns false
      markRef(current$$1, workInProgress);
      var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;

      if (!shouldUpdate && !didCaptureError) {
        // Context providers should defer to sCU for rendering
        if (hasContext) {
          invalidateContextProvider(workInProgress, Component, false);
        }

        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      }

      var instance = workInProgress.stateNode; // Rerender

      ReactCurrentOwner$3.current = workInProgress;
      var nextChildren = void 0;

      if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
        // If we captured an error, but getDerivedStateFrom catch is not defined,
        // unmount all the children. componentDidCatch will schedule an update to
        // re-render a fallback. This is temporary until we migrate everyone to
        // the new API.
        // TODO: Warn in a future release.
        nextChildren = null;

        if (enableProfilerTimer) {
          stopProfilerTimerIfRunning(workInProgress);
        }
      } else {
        {
          setCurrentPhase('render');
          nextChildren = instance.render();

          if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
            instance.render();
          }

          setCurrentPhase(null);
        }
      } // React DevTools reads this flag.


      workInProgress.effectTag |= PerformedWork;

      if (current$$1 !== null && didCaptureError) {
        // If we're recovering from an error, reconcile without reusing any of
        // the existing children. Conceptually, the normal children and the children
        // that are shown on error are two different sets, so we shouldn't reuse
        // normal children even if their identities match.
        forceUnmountCurrentAndReconcile(current$$1, workInProgress, nextChildren, renderExpirationTime);
      } else {
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      } // Memoize state using the values we just used to render.
      // TODO: Restructure so we never read values from the instance.


      workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

      if (hasContext) {
        invalidateContextProvider(workInProgress, Component, true);
      }

      return workInProgress.child;
    }

    function pushHostRootContext(workInProgress) {
      var root = workInProgress.stateNode;

      if (root.pendingContext) {
        pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
      } else if (root.context) {
        // Should always be set
        pushTopLevelContextObject(workInProgress, root.context, false);
      }

      pushHostContainer(workInProgress, root.containerInfo);
    }

    function updateHostRoot(current$$1, workInProgress, renderExpirationTime) {
      pushHostRootContext(workInProgress);
      var updateQueue = workInProgress.updateQueue;
      !(updateQueue !== null) ? invariant(false, 'If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      var nextProps = workInProgress.pendingProps;
      var prevState = workInProgress.memoizedState;
      var prevChildren = prevState !== null ? prevState.element : null;
      processUpdateQueue(workInProgress, updateQueue, nextProps, null, renderExpirationTime);
      var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
      // being called "element".

      var nextChildren = nextState.element;

      if (nextChildren === prevChildren) {
        // If the state is the same as before, that's a bailout because we had
        // no work that expires at this time.
        resetHydrationState();
        return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
      }

      var root = workInProgress.stateNode;

      if ((current$$1 === null || current$$1.child === null) && root.hydrate && enterHydrationState(workInProgress)) {
        // If we don't have any current children this might be the first pass.
        // We always try to hydrate. If this isn't a hydration pass there won't
        // be any children to hydrate which is effectively the same thing as
        // not hydrating.
        // This is a bit of a hack. We track the host root as a placement to
        // know that we're currently in a mounting state. That way isMounted
        // works as expected. We must reset this before committing.
        // TODO: Delete this when we delete isMounted and findDOMNode.
        workInProgress.effectTag |= Placement; // Ensure that children mount into this root without tracking
        // side-effects. This ensures that we don't store Placement effects on
        // nodes that will be hydrated.

        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
      } else {
        // Otherwise reset hydration state in case we aborted and resumed another
        // root.
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
        resetHydrationState();
      }

      return workInProgress.child;
    }

    function updateHostComponent(current$$1, workInProgress, renderExpirationTime) {
      pushHostContext(workInProgress);

      if (current$$1 === null) {
        tryToClaimNextHydratableInstance(workInProgress);
      }

      var type = workInProgress.type;
      var nextProps = workInProgress.pendingProps;
      var prevProps = current$$1 !== null ? current$$1.memoizedProps : null;
      var nextChildren = nextProps.children;
      var isDirectTextChild = shouldSetTextContent(type, nextProps);

      if (isDirectTextChild) {
        // We special case a direct text child of a host node. This is a common
        // case. We won't handle it as a reified child. We will instead handle
        // this in the host environment that also have access to this prop. That
        // avoids allocating another HostText fiber and traversing it.
        nextChildren = null;
      } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
        // If we're switching from a direct text child to a normal child, or to
        // empty, we need to schedule the text content to be reset.
        workInProgress.effectTag |= ContentReset;
      }

      markRef(current$$1, workInProgress); // Check the host config to see if the children are offscreen/hidden.

      if (renderExpirationTime !== Never && workInProgress.mode & ConcurrentMode && shouldDeprioritizeSubtree(type, nextProps)) {
        // Schedule this fiber to re-render at offscreen priority. Then bailout.
        workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
        return null;
      }

      reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function updateHostText(current$$1, workInProgress) {
      if (current$$1 === null) {
        tryToClaimNextHydratableInstance(workInProgress);
      } // Nothing to do here. This is terminal. We'll do the completion step
      // immediately after.


      return null;
    }

    function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime) {
      if (_current !== null) {
        // An lazy component only mounts if it suspended inside a non-
        // concurrent tree, in an inconsistent state. We want to treat it like
        // a new mount, even though an empty version of it already committed.
        // Disconnect the alternate pointers.
        _current.alternate = null;
        workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

        workInProgress.effectTag |= Placement;
      }

      var props = workInProgress.pendingProps; // We can't start a User Timing measurement with correct label yet.
      // Cancel and resume right after we know the tag.

      cancelWorkTimer(workInProgress);
      var Component = readLazyComponentType(elementType); // Store the unwrapped component in the type.

      workInProgress.type = Component;
      var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
      startWorkTimer(workInProgress);
      var resolvedProps = resolveDefaultProps(Component, props);
      var child = void 0;

      switch (resolvedTag) {
        case FunctionComponent:
          {
            {
              validateFunctionComponentInDev(workInProgress, Component);
            }
            child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
            break;
          }

        case ClassComponent:
          {
            child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
            break;
          }

        case ForwardRef:
          {
            child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime);
            break;
          }

        case MemoComponent:
          {
            {
              if (workInProgress.type !== workInProgress.elementType) {
                var outerPropTypes = Component.propTypes;

                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
                  'prop', getComponentName(Component), getCurrentFiberStackInDev);
                }
              }
            }
            child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
            updateExpirationTime, renderExpirationTime);
            break;
          }

        default:
          {
            var hint = '';
            {
              if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
                hint = ' Did you wrap a component in React.lazy() more than once?';
              }
            } // This message intentionally doesn't mention ForwardRef or MemoComponent
            // because the fact that it's a separate type of work is an
            // implementation detail.

            invariant(false, 'Element type is invalid. Received a promise that resolves to: %s. Lazy element type must resolve to a class or function.%s', Component, hint);
          }
      }

      return child;
    }

    function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime) {
      if (_current !== null) {
        // An incomplete component only mounts if it suspended inside a non-
        // concurrent tree, in an inconsistent state. We want to treat it like
        // a new mount, even though an empty version of it already committed.
        // Disconnect the alternate pointers.
        _current.alternate = null;
        workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

        workInProgress.effectTag |= Placement;
      } // Promote the fiber to a class and try rendering again.


      workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
      // Push context providers early to prevent context stack mismatches.
      // During mounting we don't know the child context yet as the instance doesn't exist.
      // We will invalidate the child context in finishClassComponent() right after rendering.

      var hasContext = void 0;

      if (isContextProvider(Component)) {
        hasContext = true;
        pushContextProvider(workInProgress);
      } else {
        hasContext = false;
      }

      prepareToReadContext(workInProgress, renderExpirationTime);
      constructClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
      mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
      return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
    }

    function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime) {
      if (_current !== null) {
        // An indeterminate component only mounts if it suspended inside a non-
        // concurrent tree, in an inconsistent state. We want to treat it like
        // a new mount, even though an empty version of it already committed.
        // Disconnect the alternate pointers.
        _current.alternate = null;
        workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

        workInProgress.effectTag |= Placement;
      }

      var props = workInProgress.pendingProps;
      var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
      var context = getMaskedContext(workInProgress, unmaskedContext);
      prepareToReadContext(workInProgress, renderExpirationTime);
      var value = void 0;
      {
        if (Component.prototype && typeof Component.prototype.render === 'function') {
          var componentName = getComponentName(Component) || 'Unknown';

          if (!didWarnAboutBadClass[componentName]) {
            warningWithoutStack$1(false, "The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);
            didWarnAboutBadClass[componentName] = true;
          }
        }

        if (workInProgress.mode & StrictMode) {
          ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
        }

        ReactCurrentOwner$3.current = workInProgress;
        value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
      } // React DevTools reads this flag.

      workInProgress.effectTag |= PerformedWork;

      if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
        // Proceed under the assumption that this is a class instance
        workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

        resetHooks(); // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.

        var hasContext = false;

        if (isContextProvider(Component)) {
          hasContext = true;
          pushContextProvider(workInProgress);
        } else {
          hasContext = false;
        }

        workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
        var getDerivedStateFromProps = Component.getDerivedStateFromProps;

        if (typeof getDerivedStateFromProps === 'function') {
          applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
        }

        adoptClassInstance(workInProgress, value);
        mountClassInstance(workInProgress, Component, props, renderExpirationTime);
        return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
      } else {
        // Proceed under the assumption that this is a function component
        workInProgress.tag = FunctionComponent;
        {
          if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
            // Only double-render components with Hooks
            if (workInProgress.memoizedState !== null) {
              value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
            }
          }
        }
        reconcileChildren(null, workInProgress, value, renderExpirationTime);
        {
          validateFunctionComponentInDev(workInProgress, Component);
        }
        return workInProgress.child;
      }
    }

    function validateFunctionComponentInDev(workInProgress, Component) {
      if (Component) {
        !!Component.childContextTypes ? warningWithoutStack$1(false, '%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component') : void 0;
      }

      if (workInProgress.ref !== null) {
        var info = '';
        var ownerName = getCurrentFiberOwnerNameInDevOrNull();

        if (ownerName) {
          info += '\n\nCheck the render method of `' + ownerName + '`.';
        }

        var warningKey = ownerName || workInProgress._debugID || '';
        var debugSource = workInProgress._debugSource;

        if (debugSource) {
          warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
        }

        if (!didWarnAboutFunctionRefs[warningKey]) {
          didWarnAboutFunctionRefs[warningKey] = true;
          warning$1(false, 'Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
        }
      }

      if (typeof Component.getDerivedStateFromProps === 'function') {
        var componentName = getComponentName(Component) || 'Unknown';

        if (!didWarnAboutGetDerivedStateOnFunctionComponent[componentName]) {
          warningWithoutStack$1(false, '%s: Function components do not support getDerivedStateFromProps.', componentName);
          didWarnAboutGetDerivedStateOnFunctionComponent[componentName] = true;
        }
      }

      if (typeof Component.contextType === 'object' && Component.contextType !== null) {
        var _componentName = getComponentName(Component) || 'Unknown';

        if (!didWarnAboutContextTypeOnFunctionComponent[_componentName]) {
          warningWithoutStack$1(false, '%s: Function components do not support contextType.', _componentName);
          didWarnAboutContextTypeOnFunctionComponent[_componentName] = true;
        }
      }
    }

    function updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
      var mode = workInProgress.mode;
      var nextProps = workInProgress.pendingProps; // We should attempt to render the primary children unless this boundary
      // already suspended during this render (`alreadyCaptured` is true).

      var nextState = workInProgress.memoizedState;
      var nextDidTimeout = void 0;

      if ((workInProgress.effectTag & DidCapture) === NoEffect) {
        // This is the first attempt.
        nextState = null;
        nextDidTimeout = false;
      } else {
        // Something in this boundary's subtree already suspended. Switch to
        // rendering the fallback children.
        nextState = {
          timedOutAt: nextState !== null ? nextState.timedOutAt : NoWork
        };
        nextDidTimeout = true;
        workInProgress.effectTag &= ~DidCapture;
      } // This next part is a bit confusing. If the children timeout, we switch to
      // showing the fallback children in place of the "primary" children.
      // However, we don't want to delete the primary children because then their
      // state will be lost (both the React state and the host state, e.g.
      // uncontrolled form inputs). Instead we keep them mounted and hide them.
      // Both the fallback children AND the primary children are rendered at the
      // same time. Once the primary children are un-suspended, we can delete
      // the fallback children — don't need to preserve their state.
      //
      // The two sets of children are siblings in the host environment, but
      // semantically, for purposes of reconciliation, they are two separate sets.
      // So we store them using two fragment fibers.
      //
      // However, we want to avoid allocating extra fibers for every placeholder.
      // They're only necessary when the children time out, because that's the
      // only time when both sets are mounted.
      //
      // So, the extra fragment fibers are only used if the children time out.
      // Otherwise, we render the primary children directly. This requires some
      // custom reconciliation logic to preserve the state of the primary
      // children. It's essentially a very basic form of re-parenting.
      // `child` points to the child fiber. In the normal case, this is the first
      // fiber of the primary children set. In the timed-out case, it's a
      // a fragment fiber containing the primary children.


      var child = void 0; // `next` points to the next fiber React should render. In the normal case,
      // it's the same as `child`: the first fiber of the primary children set.
      // In the timed-out case, it's a fragment fiber containing the *fallback*
      // children -- we skip over the primary children entirely.

      var next = void 0;

      if (current$$1 === null) {
        if (enableSuspenseServerRenderer) {
          // If we're currently hydrating, try to hydrate this boundary.
          // But only if this has a fallback.
          if (nextProps.fallback !== undefined) {
            tryToClaimNextHydratableInstance(workInProgress); // This could've changed the tag if this was a dehydrated suspense component.

            if (workInProgress.tag === DehydratedSuspenseComponent) {
              return updateDehydratedSuspenseComponent(null, workInProgress, renderExpirationTime);
            }
          }
        } // This is the initial mount. This branch is pretty simple because there's
        // no previous state that needs to be preserved.


        if (nextDidTimeout) {
          // Mount separate fragments for primary and fallback children.
          var nextFallbackChildren = nextProps.fallback;
          var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);

          if ((workInProgress.mode & ConcurrentMode) === NoContext) {
            // Outside of concurrent mode, we commit the effects from the
            var progressedState = workInProgress.memoizedState;
            var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;
            primaryChildFragment.child = progressedPrimaryChild;
          }

          var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime, null);
          primaryChildFragment.sibling = fallbackChildFragment;
          child = primaryChildFragment; // Skip the primary children, and continue working on the
          // fallback children.

          next = fallbackChildFragment;
          child.return = next.return = workInProgress;
        } else {
          // Mount the primary children without an intermediate fragment fiber.
          var nextPrimaryChildren = nextProps.children;
          child = next = mountChildFibers(workInProgress, null, nextPrimaryChildren, renderExpirationTime);
        }
      } else {
        // This is an update. This branch is more complicated because we need to
        // ensure the state of the primary children is preserved.
        var prevState = current$$1.memoizedState;
        var prevDidTimeout = prevState !== null;

        if (prevDidTimeout) {
          // The current tree already timed out. That means each child set is
          var currentPrimaryChildFragment = current$$1.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;

          if (nextDidTimeout) {
            // Still timed out. Reuse the current primary children by cloning
            // its fragment. We're going to skip over these entirely.
            var _nextFallbackChildren = nextProps.fallback;

            var _primaryChildFragment = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps, NoWork);

            if ((workInProgress.mode & ConcurrentMode) === NoContext) {
              // Outside of concurrent mode, we commit the effects from the
              var _progressedState = workInProgress.memoizedState;

              var _progressedPrimaryChild = _progressedState !== null ? workInProgress.child.child : workInProgress.child;

              if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
                _primaryChildFragment.child = _progressedPrimaryChild;
              }
            } // Because primaryChildFragment is a new fiber that we're inserting as the
            // parent of a new tree, we need to set its treeBaseDuration.


            if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
              // treeBaseDuration is the sum of all the child tree base durations.
              var treeBaseDuration = 0;
              var hiddenChild = _primaryChildFragment.child;

              while (hiddenChild !== null) {
                treeBaseDuration += hiddenChild.treeBaseDuration;
                hiddenChild = hiddenChild.sibling;
              }

              _primaryChildFragment.treeBaseDuration = treeBaseDuration;
            } // Clone the fallback child fragment, too. These we'll continue
            // working on.


            var _fallbackChildFragment = _primaryChildFragment.sibling = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren, currentFallbackChildFragment.expirationTime);

            child = _primaryChildFragment;
            _primaryChildFragment.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
            // fallback children.

            next = _fallbackChildFragment;
            child.return = next.return = workInProgress;
          } else {
            // No longer suspended. Switch back to showing the primary children,
            // and remove the intermediate fragment fiber.
            var _nextPrimaryChildren = nextProps.children;
            var currentPrimaryChild = currentPrimaryChildFragment.child;
            var primaryChild = reconcileChildFibers(workInProgress, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime); // If this render doesn't suspend, we need to delete the fallback
            // children. Wait until the complete phase, after we've confirmed the
            // fallback is no longer needed.
            // TODO: Would it be better to store the fallback fragment on
            // the stateNode?
            // Continue rendering the children, like we normally do.

            child = next = primaryChild;
          }
        } else {
          // The current tree has not already timed out. That means the primary
          // children are not wrapped in a fragment fiber.
          var _currentPrimaryChild = current$$1.child;

          if (nextDidTimeout) {
            // Timed out. Wrap the children in a fragment fiber to keep them
            // separate from the fallback children.
            var _nextFallbackChildren2 = nextProps.fallback;

            var _primaryChildFragment2 = createFiberFromFragment( // It shouldn't matter what the pending props are because we aren't
            // going to render this fragment.
            null, mode, NoWork, null);

            _primaryChildFragment2.child = _currentPrimaryChild; // Even though we're creating a new fiber, there are no new children,
            // because we're reusing an already mounted tree. So we don't need to
            // schedule a placement.
            // primaryChildFragment.effectTag |= Placement;

            if ((workInProgress.mode & ConcurrentMode) === NoContext) {
              // Outside of concurrent mode, we commit the effects from the
              var _progressedState2 = workInProgress.memoizedState;

              var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;

              _primaryChildFragment2.child = _progressedPrimaryChild2;
            } // Because primaryChildFragment is a new fiber that we're inserting as the
            // parent of a new tree, we need to set its treeBaseDuration.


            if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
              // treeBaseDuration is the sum of all the child tree base durations.
              var _treeBaseDuration = 0;
              var _hiddenChild = _primaryChildFragment2.child;

              while (_hiddenChild !== null) {
                _treeBaseDuration += _hiddenChild.treeBaseDuration;
                _hiddenChild = _hiddenChild.sibling;
              }

              _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
            } // Create a fragment from the fallback children, too.


            var _fallbackChildFragment2 = _primaryChildFragment2.sibling = createFiberFromFragment(_nextFallbackChildren2, mode, renderExpirationTime, null);

            _fallbackChildFragment2.effectTag |= Placement;
            child = _primaryChildFragment2;
            _primaryChildFragment2.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
            // fallback children.

            next = _fallbackChildFragment2;
            child.return = next.return = workInProgress;
          } else {
            // Still haven't timed out.  Continue rendering the children, like we
            // normally do.
            var _nextPrimaryChildren2 = nextProps.children;
            next = child = reconcileChildFibers(workInProgress, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime);
          }
        }

        workInProgress.stateNode = current$$1.stateNode;
      }

      workInProgress.memoizedState = nextState;
      workInProgress.child = child;
      return next;
    }

    function updateDehydratedSuspenseComponent(current$$1, workInProgress, renderExpirationTime) {
      if (current$$1 === null) {
        // During the first pass, we'll bail out and not drill into the children.
        // Instead, we'll leave the content in place and try to hydrate it later.
        workInProgress.expirationTime = Never;
        return null;
      } // We use childExpirationTime to indicate that a child might depend on context, so if
      // any context has changed, we need to treat is as if the input might have changed.


      var hasContextChanged$$1 = current$$1.childExpirationTime >= renderExpirationTime;

      if (didReceiveUpdate || hasContextChanged$$1) {
        // This boundary has changed since the first render. This means that we are now unable to
        // hydrate it. We might still be able to hydrate it using an earlier expiration time but
        // during this render we can't. Instead, we're going to delete the whole subtree and
        // instead inject a new real Suspense boundary to take its place, which may render content
        // or fallback. The real Suspense boundary will suspend for a while so we have some time
        // to ensure it can produce real content, but all state and pending events will be lost.
        // Detach from the current dehydrated boundary.
        current$$1.alternate = null;
        workInProgress.alternate = null; // Insert a deletion in the effect list.

        var returnFiber = workInProgress.return;
        !(returnFiber !== null) ? invariant(false, 'Suspense boundaries are never on the root. This is probably a bug in React.') : void 0;
        var last = returnFiber.lastEffect;

        if (last !== null) {
          last.nextEffect = current$$1;
          returnFiber.lastEffect = current$$1;
        } else {
          returnFiber.firstEffect = returnFiber.lastEffect = current$$1;
        }

        current$$1.nextEffect = null;
        current$$1.effectTag = Deletion; // Upgrade this work in progress to a real Suspense component.

        workInProgress.tag = SuspenseComponent;
        workInProgress.stateNode = null;
        workInProgress.memoizedState = null; // This is now an insertion.

        workInProgress.effectTag |= Placement; // Retry as a real Suspense component.

        return updateSuspenseComponent(null, workInProgress, renderExpirationTime);
      }

      if ((workInProgress.effectTag & DidCapture) === NoEffect) {
        // This is the first attempt.
        reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress);
        var nextProps = workInProgress.pendingProps;
        var nextChildren = nextProps.children;
        workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
        return workInProgress.child;
      } else {
        // Something suspended. Leave the existing children in place.
        // TODO: In non-concurrent mode, should we commit the nodes we have hydrated so far?
        workInProgress.child = null;
        return null;
      }
    }

    function updatePortalComponent(current$$1, workInProgress, renderExpirationTime) {
      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
      var nextChildren = workInProgress.pendingProps;

      if (current$$1 === null) {
        // Portals are special because we don't append the children during mount
        // but at commit. Therefore we need to track insertions which the normal
        // flow doesn't do during mount. This doesn't happen at the root because
        // the root always starts with a "current" with a null child.
        // TODO: Consider unifying this with how the root works.
        workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
      } else {
        reconcileChildren(current$$1, workInProgress, nextChildren, renderExpirationTime);
      }

      return workInProgress.child;
    }

    function updateContextProvider(current$$1, workInProgress, renderExpirationTime) {
      var providerType = workInProgress.type;
      var context = providerType._context;
      var newProps = workInProgress.pendingProps;
      var oldProps = workInProgress.memoizedProps;
      var newValue = newProps.value;
      {
        var providerPropTypes = workInProgress.type.propTypes;

        if (providerPropTypes) {
          checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);
        }
      }
      pushProvider(workInProgress, newValue);

      if (oldProps !== null) {
        var oldValue = oldProps.value;
        var changedBits = calculateChangedBits(context, newValue, oldValue);

        if (changedBits === 0) {
          // No change. Bailout early if children are the same.
          if (oldProps.children === newProps.children && !hasContextChanged()) {
            return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
          }
        } else {
          // The context value changed. Search for matching consumers and schedule
          // them to update.
          propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
        }
      }

      var newChildren = newProps.children;
      reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
      return workInProgress.child;
    }

    var hasWarnedAboutUsingContextAsConsumer = false;

    function updateContextConsumer(current$$1, workInProgress, renderExpirationTime) {
      var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
      // DEV mode, we create a separate object for Context.Consumer that acts
      // like a proxy to Context. This proxy object adds unnecessary code in PROD
      // so we use the old behaviour (Context.Consumer references Context) to
      // reduce size and overhead. The separate object references context via
      // a property called "_context", which also gives us the ability to check
      // in DEV mode if this property exists or not and warn if it does not.

      {
        if (context._context === undefined) {
          // This may be because it's a Context (rather than a Consumer).
          // Or it may be because it's older React where they're the same thing.
          // We only want to warn if we're sure it's a new React.
          if (context !== context.Consumer) {
            if (!hasWarnedAboutUsingContextAsConsumer) {
              hasWarnedAboutUsingContextAsConsumer = true;
              warning$1(false, 'Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
            }
          }
        } else {
          context = context._context;
        }
      }
      var newProps = workInProgress.pendingProps;
      var render = newProps.children;
      {
        !(typeof render === 'function') ? warningWithoutStack$1(false, 'A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.') : void 0;
      }
      prepareToReadContext(workInProgress, renderExpirationTime);
      var newValue = readContext(context, newProps.unstable_observedBits);
      var newChildren = void 0;
      {
        ReactCurrentOwner$3.current = workInProgress;
        setCurrentPhase('render');
        newChildren = render(newValue);
        setCurrentPhase(null);
      } // React DevTools reads this flag.

      workInProgress.effectTag |= PerformedWork;
      reconcileChildren(current$$1, workInProgress, newChildren, renderExpirationTime);
      return workInProgress.child;
    }

    function markWorkInProgressReceivedUpdate() {
      didReceiveUpdate = true;
    }

    function bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime) {
      cancelWorkTimer(workInProgress);

      if (current$$1 !== null) {
        // Reuse previous context list
        workInProgress.contextDependencies = current$$1.contextDependencies;
      }

      if (enableProfilerTimer) {
        // Don't update "base" render times for bailouts.
        stopProfilerTimerIfRunning(workInProgress);
      } // Check if the children have any pending work.


      var childExpirationTime = workInProgress.childExpirationTime;

      if (childExpirationTime < renderExpirationTime) {
        // The children don't have any work either. We can skip them.
        // TODO: Once we add back resuming, we should check if the children are
        // a work-in-progress set. If so, we need to transfer their effects.
        return null;
      } else {
        // This fiber doesn't have work, but its subtree does. Clone the child
        // fibers and continue.
        cloneChildFibers(current$$1, workInProgress);
        return workInProgress.child;
      }
    }

    function beginWork(current$$1, workInProgress, renderExpirationTime) {
      var updateExpirationTime = workInProgress.expirationTime;

      if (current$$1 !== null) {
        var oldProps = current$$1.memoizedProps;
        var newProps = workInProgress.pendingProps;

        if (oldProps !== newProps || hasContextChanged()) {
          // If props or context changed, mark the fiber as having performed work.
          // This may be unset if the props are determined to be equal later (memo).
          didReceiveUpdate = true;
        } else if (updateExpirationTime < renderExpirationTime) {
          didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
          // the begin phase. There's still some bookkeeping we that needs to be done
          // in this optimized path, mostly pushing stuff onto the stack.

          switch (workInProgress.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress);
              resetHydrationState();
              break;

            case HostComponent:
              pushHostContext(workInProgress);
              break;

            case ClassComponent:
              {
                var Component = workInProgress.type;

                if (isContextProvider(Component)) {
                  pushContextProvider(workInProgress);
                }

                break;
              }

            case HostPortal:
              pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
              break;

            case ContextProvider:
              {
                var newValue = workInProgress.memoizedProps.value;
                pushProvider(workInProgress, newValue);
                break;
              }

            case Profiler:
              if (enableProfilerTimer) {
                workInProgress.effectTag |= Update;
              }

              break;

            case SuspenseComponent:
              {
                var state = workInProgress.memoizedState;
                var didTimeout = state !== null;

                if (didTimeout) {
                  // If this boundary is currently timed out, we need to decide
                  // whether to retry the primary children, or to skip over it and
                  // go straight to the fallback. Check the priority of the primary
                  var primaryChildFragment = workInProgress.child;
                  var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;

                  if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime) {
                    // The primary children have pending work. Use the normal path
                    // to attempt to render the primary children again.
                    return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
                  } else {
                    // The primary children do not have pending work with sufficient
                    // priority. Bailout.
                    var child = bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);

                    if (child !== null) {
                      // The fallback children have pending work. Skip over the
                      // primary children and work on the fallback.
                      return child.sibling;
                    } else {
                      return null;
                    }
                  }
                }

                break;
              }

            case DehydratedSuspenseComponent:
              {
                if (enableSuspenseServerRenderer) {
                  // We know that this component will suspend again because if it has
                  // been unsuspended it has committed as a regular Suspense component.
                  // If it needs to be retried, it should have work scheduled on it.
                  workInProgress.effectTag |= DidCapture;
                  break;
                }
              }
          }

          return bailoutOnAlreadyFinishedWork(current$$1, workInProgress, renderExpirationTime);
        }
      } else {
        didReceiveUpdate = false;
      } // Before entering the begin phase, clear the expiration time.


      workInProgress.expirationTime = NoWork;

      switch (workInProgress.tag) {
        case IndeterminateComponent:
          {
            var elementType = workInProgress.elementType;
            return mountIndeterminateComponent(current$$1, workInProgress, elementType, renderExpirationTime);
          }

        case LazyComponent:
          {
            var _elementType = workInProgress.elementType;
            return mountLazyComponent(current$$1, workInProgress, _elementType, updateExpirationTime, renderExpirationTime);
          }

        case FunctionComponent:
          {
            var _Component = workInProgress.type;
            var unresolvedProps = workInProgress.pendingProps;
            var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
            return updateFunctionComponent(current$$1, workInProgress, _Component, resolvedProps, renderExpirationTime);
          }

        case ClassComponent:
          {
            var _Component2 = workInProgress.type;
            var _unresolvedProps = workInProgress.pendingProps;

            var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);

            return updateClassComponent(current$$1, workInProgress, _Component2, _resolvedProps, renderExpirationTime);
          }

        case HostRoot:
          return updateHostRoot(current$$1, workInProgress, renderExpirationTime);

        case HostComponent:
          return updateHostComponent(current$$1, workInProgress, renderExpirationTime);

        case HostText:
          return updateHostText(current$$1, workInProgress);

        case SuspenseComponent:
          return updateSuspenseComponent(current$$1, workInProgress, renderExpirationTime);

        case HostPortal:
          return updatePortalComponent(current$$1, workInProgress, renderExpirationTime);

        case ForwardRef:
          {
            var type = workInProgress.type;
            var _unresolvedProps2 = workInProgress.pendingProps;

            var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

            return updateForwardRef(current$$1, workInProgress, type, _resolvedProps2, renderExpirationTime);
          }

        case Fragment:
          return updateFragment(current$$1, workInProgress, renderExpirationTime);

        case Mode:
          return updateMode(current$$1, workInProgress, renderExpirationTime);

        case Profiler:
          return updateProfiler(current$$1, workInProgress, renderExpirationTime);

        case ContextProvider:
          return updateContextProvider(current$$1, workInProgress, renderExpirationTime);

        case ContextConsumer:
          return updateContextConsumer(current$$1, workInProgress, renderExpirationTime);

        case MemoComponent:
          {
            var _type2 = workInProgress.type;
            var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

            var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

            {
              if (workInProgress.type !== workInProgress.elementType) {
                var outerPropTypes = _type2.propTypes;

                if (outerPropTypes) {
                  checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
                  'prop', getComponentName(_type2), getCurrentFiberStackInDev);
                }
              }
            }
            _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
            return updateMemoComponent(current$$1, workInProgress, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime);
          }

        case SimpleMemoComponent:
          {
            return updateSimpleMemoComponent(current$$1, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);
          }

        case IncompleteClassComponent:
          {
            var _Component3 = workInProgress.type;
            var _unresolvedProps4 = workInProgress.pendingProps;

            var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);

            return mountIncompleteClassComponent(current$$1, workInProgress, _Component3, _resolvedProps4, renderExpirationTime);
          }

        case DehydratedSuspenseComponent:
          {
            if (enableSuspenseServerRenderer) {
              return updateDehydratedSuspenseComponent(current$$1, workInProgress, renderExpirationTime);
            }

            break;
          }
      }

      invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
    }

    var valueCursor = createCursor(null);
    var rendererSigil = void 0;
    {
      // Use this to detect multiple renderers using the same context
      rendererSigil = {};
    }
    var currentlyRenderingFiber = null;
    var lastContextDependency = null;
    var lastContextWithAllBitsObserved = null;
    var isDisallowedContextReadInDEV = false;

    function resetContextDependences() {
      // This is called right before React yields execution, to ensure `readContext`
      // cannot be called outside the render phase.
      currentlyRenderingFiber = null;
      lastContextDependency = null;
      lastContextWithAllBitsObserved = null;
      {
        isDisallowedContextReadInDEV = false;
      }
    }

    function enterDisallowedContextReadInDEV() {
      {
        isDisallowedContextReadInDEV = true;
      }
    }

    function exitDisallowedContextReadInDEV() {
      {
        isDisallowedContextReadInDEV = false;
      }
    }

    function pushProvider(providerFiber, nextValue) {
      var context = providerFiber.type._context;

      if (isPrimaryRenderer) {
        push(valueCursor, context._currentValue, providerFiber);
        context._currentValue = nextValue;
        {
          !(context._currentRenderer === undefined || context._currentRenderer === null || context._currentRenderer === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
          context._currentRenderer = rendererSigil;
        }
      } else {
        push(valueCursor, context._currentValue2, providerFiber);
        context._currentValue2 = nextValue;
        {
          !(context._currentRenderer2 === undefined || context._currentRenderer2 === null || context._currentRenderer2 === rendererSigil) ? warningWithoutStack$1(false, 'Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.') : void 0;
          context._currentRenderer2 = rendererSigil;
        }
      }
    }

    function popProvider(providerFiber) {
      var currentValue = valueCursor.current;
      pop(valueCursor, providerFiber);
      var context = providerFiber.type._context;

      if (isPrimaryRenderer) {
        context._currentValue = currentValue;
      } else {
        context._currentValue2 = currentValue;
      }
    }

    function calculateChangedBits(context, newValue, oldValue) {
      if (is(oldValue, newValue)) {
        // No change
        return 0;
      } else {
        var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : maxSigned31BitInt;
        {
          !((changedBits & maxSigned31BitInt) === changedBits) ? warning$1(false, 'calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits) : void 0;
        }
        return changedBits | 0;
      }
    }

    function scheduleWorkOnParentPath(parent, renderExpirationTime) {
      // Update the child expiration time of all the ancestors, including
      // the alternates.
      var node = parent;

      while (node !== null) {
        var alternate = node.alternate;

        if (node.childExpirationTime < renderExpirationTime) {
          node.childExpirationTime = renderExpirationTime;

          if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
            alternate.childExpirationTime = renderExpirationTime;
          }
        } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
          alternate.childExpirationTime = renderExpirationTime;
        } else {
          // Neither alternate was updated, which means the rest of the
          // ancestor path already has sufficient priority.
          break;
        }

        node = node.return;
      }
    }

    function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
      var fiber = workInProgress.child;

      if (fiber !== null) {
        // Set the return pointer of the child to the work-in-progress fiber.
        fiber.return = workInProgress;
      }

      while (fiber !== null) {
        var nextFiber = void 0; // Visit this fiber.

        var list = fiber.contextDependencies;

        if (list !== null) {
          nextFiber = fiber.child;
          var dependency = list.first;

          while (dependency !== null) {
            // Check if the context matches.
            if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
              // Match! Schedule an update on this fiber.
              if (fiber.tag === ClassComponent) {
                // Schedule a force update on the work-in-progress.
                var update = createUpdate(renderExpirationTime);
                update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
                // update to the current fiber, too, which means it will persist even if
                // this render is thrown away. Since it's a race condition, not sure it's
                // worth fixing.

                enqueueUpdate(fiber, update);
              }

              if (fiber.expirationTime < renderExpirationTime) {
                fiber.expirationTime = renderExpirationTime;
              }

              var alternate = fiber.alternate;

              if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
                alternate.expirationTime = renderExpirationTime;
              }

              scheduleWorkOnParentPath(fiber.return, renderExpirationTime); // Mark the expiration time on the list, too.

              if (list.expirationTime < renderExpirationTime) {
                list.expirationTime = renderExpirationTime;
              } // Since we already found a match, we can stop traversing the
              // dependency list.


              break;
            }

            dependency = dependency.next;
          }
        } else if (fiber.tag === ContextProvider) {
          // Don't scan deeper if this is a matching provider
          nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
        } else if (enableSuspenseServerRenderer && fiber.tag === DehydratedSuspenseComponent) {
          // If a dehydrated suspense component is in this subtree, we don't know
          // if it will have any context consumers in it. The best we can do is
          // mark it as having updates on its children.
          if (fiber.expirationTime < renderExpirationTime) {
            fiber.expirationTime = renderExpirationTime;
          }

          var _alternate = fiber.alternate;

          if (_alternate !== null && _alternate.expirationTime < renderExpirationTime) {
            _alternate.expirationTime = renderExpirationTime;
          } // This is intentionally passing this fiber as the parent
          // because we want to schedule this fiber as having work
          // on its children. We'll use the childExpirationTime on
          // this fiber to indicate that a context has changed.


          scheduleWorkOnParentPath(fiber, renderExpirationTime);
          nextFiber = fiber.sibling;
        } else {
          // Traverse down.
          nextFiber = fiber.child;
        }

        if (nextFiber !== null) {
          // Set the return pointer of the child to the work-in-progress fiber.
          nextFiber.return = fiber;
        } else {
          // No child. Traverse to next sibling.
          nextFiber = fiber;

          while (nextFiber !== null) {
            if (nextFiber === workInProgress) {
              // We're back to the root of this subtree. Exit.
              nextFiber = null;
              break;
            }

            var sibling = nextFiber.sibling;

            if (sibling !== null) {
              // Set the return pointer of the sibling to the work-in-progress fiber.
              sibling.return = nextFiber.return;
              nextFiber = sibling;
              break;
            } // No more siblings. Traverse up.


            nextFiber = nextFiber.return;
          }
        }

        fiber = nextFiber;
      }
    }

    function prepareToReadContext(workInProgress, renderExpirationTime) {
      currentlyRenderingFiber = workInProgress;
      lastContextDependency = null;
      lastContextWithAllBitsObserved = null;
      var currentDependencies = workInProgress.contextDependencies;

      if (currentDependencies !== null && currentDependencies.expirationTime >= renderExpirationTime) {
        // Context list has a pending update. Mark that this fiber performed work.
        markWorkInProgressReceivedUpdate();
      } // Reset the work-in-progress list


      workInProgress.contextDependencies = null;
    }

    function readContext(context, observedBits) {
      {
        // This warning would fire if you read context inside a Hook like useMemo.
        // Unlike the class check below, it's not enforced in production for perf.
        !!isDisallowedContextReadInDEV ? warning$1(false, 'Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().') : void 0;
      }

      if (lastContextWithAllBitsObserved === context) {// Nothing to do. We already observe everything in this context.
      } else if (observedBits === false || observedBits === 0) {// Do not observe any updates.
      } else {
        var resolvedObservedBits = void 0; // Avoid deopting on observable arguments or heterogeneous types.

        if (typeof observedBits !== 'number' || observedBits === maxSigned31BitInt) {
          // Observe all updates.
          lastContextWithAllBitsObserved = context;
          resolvedObservedBits = maxSigned31BitInt;
        } else {
          resolvedObservedBits = observedBits;
        }

        var contextItem = {
          context: context,
          observedBits: resolvedObservedBits,
          next: null
        };

        if (lastContextDependency === null) {
          !(currentlyRenderingFiber !== null) ? invariant(false, 'Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().') : void 0; // This is the first dependency for this component. Create a new list.

          lastContextDependency = contextItem;
          currentlyRenderingFiber.contextDependencies = {
            first: contextItem,
            expirationTime: NoWork
          };
        } else {
          // Append a new context item.
          lastContextDependency = lastContextDependency.next = contextItem;
        }
      }

      return isPrimaryRenderer ? context._currentValue : context._currentValue2;
    } // UpdateQueue is a linked list of prioritized updates.
    //
    // Like fibers, update queues come in pairs: a current queue, which represents
    // the visible state of the screen, and a work-in-progress queue, which can be
    // mutated and processed asynchronously before it is committed — a form of
    // double buffering. If a work-in-progress render is discarded before finishing,
    // we create a new work-in-progress by cloning the current queue.
    //
    // Both queues share a persistent, singly-linked list structure. To schedule an
    // update, we append it to the end of both queues. Each queue maintains a
    // pointer to first update in the persistent list that hasn't been processed.
    // The work-in-progress pointer always has a position equal to or greater than
    // the current queue, since we always work on that one. The current queue's
    // pointer is only updated during the commit phase, when we swap in the
    // work-in-progress.
    //
    // For example:
    //
    //   Current pointer:           A - B - C - D - E - F
    //   Work-in-progress pointer:              D - E - F
    //                                          ^
    //                                          The work-in-progress queue has
    //                                          processed more updates than current.
    //
    // The reason we append to both queues is because otherwise we might drop
    // updates without ever processing them. For example, if we only add updates to
    // the work-in-progress queue, some updates could be lost whenever a work-in
    // -progress render restarts by cloning from current. Similarly, if we only add
    // updates to the current queue, the updates will be lost whenever an already
    // in-progress queue commits and swaps with the current queue. However, by
    // adding to both queues, we guarantee that the update will be part of the next
    // work-in-progress. (And because the work-in-progress queue becomes the
    // current queue once it commits, there's no danger of applying the same
    // update twice.)
    //
    // Prioritization
    // --------------
    //
    // Updates are not sorted by priority, but by insertion; new updates are always
    // appended to the end of the list.
    //
    // The priority is still important, though. When processing the update queue
    // during the render phase, only the updates with sufficient priority are
    // included in the result. If we skip an update because it has insufficient
    // priority, it remains in the queue to be processed later, during a lower
    // priority render. Crucially, all updates subsequent to a skipped update also
    // remain in the queue *regardless of their priority*. That means high priority
    // updates are sometimes processed twice, at two separate priorities. We also
    // keep track of a base state, that represents the state before the first
    // update in the queue is applied.
    //
    // For example:
    //
    //   Given a base state of '', and the following queue of updates
    //
    //     A1 - B2 - C1 - D2
    //
    //   where the number indicates the priority, and the update is applied to the
    //   previous state by appending a letter, React will process these updates as
    //   two separate renders, one per distinct priority level:
    //
    //   First render, at priority 1:
    //     Base state: ''
    //     Updates: [A1, C1]
    //     Result state: 'AC'
    //
    //   Second render, at priority 2:
    //     Base state: 'A'            <-  The base state does not include C1,
    //                                    because B2 was skipped.
    //     Updates: [B2, C1, D2]      <-  C1 was rebased on top of B2
    //     Result state: 'ABCD'
    //
    // Because we process updates in insertion order, and rebase high priority
    // updates when preceding updates are skipped, the final result is deterministic
    // regardless of priority. Intermediate state may vary according to system
    // resources, but the final state is always the same.


    var UpdateState = 0;
    var ReplaceState = 1;
    var ForceUpdate = 2;
    var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
    // It should only be read right after calling `processUpdateQueue`, via
    // `checkHasForceUpdateAfterProcessing`.

    var hasForceUpdate = false;
    var didWarnUpdateInsideUpdate = void 0;
    var currentlyProcessingQueue = void 0;
    var resetCurrentlyProcessingQueue = void 0;
    {
      didWarnUpdateInsideUpdate = false;
      currentlyProcessingQueue = null;

      resetCurrentlyProcessingQueue = function () {
        currentlyProcessingQueue = null;
      };
    }

    function createUpdateQueue(baseState) {
      var queue = {
        baseState: baseState,
        firstUpdate: null,
        lastUpdate: null,
        firstCapturedUpdate: null,
        lastCapturedUpdate: null,
        firstEffect: null,
        lastEffect: null,
        firstCapturedEffect: null,
        lastCapturedEffect: null
      };
      return queue;
    }

    function cloneUpdateQueue(currentQueue) {
      var queue = {
        baseState: currentQueue.baseState,
        firstUpdate: currentQueue.firstUpdate,
        lastUpdate: currentQueue.lastUpdate,
        // TODO: With resuming, if we bail out and resuse the child tree, we should
        // keep these effects.
        firstCapturedUpdate: null,
        lastCapturedUpdate: null,
        firstEffect: null,
        lastEffect: null,
        firstCapturedEffect: null,
        lastCapturedEffect: null
      };
      return queue;
    }

    function createUpdate(expirationTime) {
      return {
        expirationTime: expirationTime,
        tag: UpdateState,
        payload: null,
        callback: null,
        next: null,
        nextEffect: null
      };
    }

    function appendUpdateToQueue(queue, update) {
      // Append the update to the end of the list.
      if (queue.lastUpdate === null) {
        // Queue is empty
        queue.firstUpdate = queue.lastUpdate = update;
      } else {
        queue.lastUpdate.next = update;
        queue.lastUpdate = update;
      }
    }

    function enqueueUpdate(fiber, update) {
      // Update queues are created lazily.
      var alternate = fiber.alternate;
      var queue1 = void 0;
      var queue2 = void 0;

      if (alternate === null) {
        // There's only one fiber.
        queue1 = fiber.updateQueue;
        queue2 = null;

        if (queue1 === null) {
          queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
        }
      } else {
        // There are two owners.
        queue1 = fiber.updateQueue;
        queue2 = alternate.updateQueue;

        if (queue1 === null) {
          if (queue2 === null) {
            // Neither fiber has an update queue. Create new ones.
            queue1 = fiber.updateQueue = createUpdateQueue(fiber.memoizedState);
            queue2 = alternate.updateQueue = createUpdateQueue(alternate.memoizedState);
          } else {
            // Only one fiber has an update queue. Clone to create a new one.
            queue1 = fiber.updateQueue = cloneUpdateQueue(queue2);
          }
        } else {
          if (queue2 === null) {
            // Only one fiber has an update queue. Clone to create a new one.
            queue2 = alternate.updateQueue = cloneUpdateQueue(queue1);
          } else {// Both owners have an update queue.
          }
        }
      }

      if (queue2 === null || queue1 === queue2) {
        // There's only a single queue.
        appendUpdateToQueue(queue1, update);
      } else {
        // There are two queues. We need to append the update to both queues,
        // while accounting for the persistent structure of the list — we don't
        // want the same update to be added multiple times.
        if (queue1.lastUpdate === null || queue2.lastUpdate === null) {
          // One of the queues is not empty. We must add the update to both queues.
          appendUpdateToQueue(queue1, update);
          appendUpdateToQueue(queue2, update);
        } else {
          // Both queues are non-empty. The last update is the same in both lists,
          // because of structural sharing. So, only append to one of the lists.
          appendUpdateToQueue(queue1, update); // But we still need to update the `lastUpdate` pointer of queue2.

          queue2.lastUpdate = update;
        }
      }

      {
        if (fiber.tag === ClassComponent && (currentlyProcessingQueue === queue1 || queue2 !== null && currentlyProcessingQueue === queue2) && !didWarnUpdateInsideUpdate) {
          warningWithoutStack$1(false, 'An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');
          didWarnUpdateInsideUpdate = true;
        }
      }
    }

    function enqueueCapturedUpdate(workInProgress, update) {
      // Captured updates go into a separate list, and only on the work-in-
      // progress queue.
      var workInProgressQueue = workInProgress.updateQueue;

      if (workInProgressQueue === null) {
        workInProgressQueue = workInProgress.updateQueue = createUpdateQueue(workInProgress.memoizedState);
      } else {
        // TODO: I put this here rather than createWorkInProgress so that we don't
        // clone the queue unnecessarily. There's probably a better way to
        // structure this.
        workInProgressQueue = ensureWorkInProgressQueueIsAClone(workInProgress, workInProgressQueue);
      } // Append the update to the end of the list.


      if (workInProgressQueue.lastCapturedUpdate === null) {
        // This is the first render phase update
        workInProgressQueue.firstCapturedUpdate = workInProgressQueue.lastCapturedUpdate = update;
      } else {
        workInProgressQueue.lastCapturedUpdate.next = update;
        workInProgressQueue.lastCapturedUpdate = update;
      }
    }

    function ensureWorkInProgressQueueIsAClone(workInProgress, queue) {
      var current = workInProgress.alternate;

      if (current !== null) {
        // If the work-in-progress queue is equal to the current queue,
        // we need to clone it first.
        if (queue === current.updateQueue) {
          queue = workInProgress.updateQueue = cloneUpdateQueue(queue);
        }
      }

      return queue;
    }

    function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
      switch (update.tag) {
        case ReplaceState:
          {
            var _payload = update.payload;

            if (typeof _payload === 'function') {
              // Updater function
              {
                enterDisallowedContextReadInDEV();

                if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
                  _payload.call(instance, prevState, nextProps);
                }
              }

              var nextState = _payload.call(instance, prevState, nextProps);

              {
                exitDisallowedContextReadInDEV();
              }
              return nextState;
            } // State object


            return _payload;
          }

        case CaptureUpdate:
          {
            workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
          }
        // Intentional fallthrough

        case UpdateState:
          {
            var _payload2 = update.payload;
            var partialState = void 0;

            if (typeof _payload2 === 'function') {
              // Updater function
              {
                enterDisallowedContextReadInDEV();

                if (debugRenderPhaseSideEffects || debugRenderPhaseSideEffectsForStrictMode && workInProgress.mode & StrictMode) {
                  _payload2.call(instance, prevState, nextProps);
                }
              }
              partialState = _payload2.call(instance, prevState, nextProps);
              {
                exitDisallowedContextReadInDEV();
              }
            } else {
              // Partial state object
              partialState = _payload2;
            }

            if (partialState === null || partialState === undefined) {
              // Null and undefined are treated as no-ops.
              return prevState;
            } // Merge the partial state and the previous state.


            return _assign({}, prevState, partialState);
          }

        case ForceUpdate:
          {
            hasForceUpdate = true;
            return prevState;
          }
      }

      return prevState;
    }

    function processUpdateQueue(workInProgress, queue, props, instance, renderExpirationTime) {
      hasForceUpdate = false;
      queue = ensureWorkInProgressQueueIsAClone(workInProgress, queue);
      {
        currentlyProcessingQueue = queue;
      } // These values may change as we process the queue.

      var newBaseState = queue.baseState;
      var newFirstUpdate = null;
      var newExpirationTime = NoWork; // Iterate through the list of updates to compute the result.

      var update = queue.firstUpdate;
      var resultState = newBaseState;

      while (update !== null) {
        var updateExpirationTime = update.expirationTime;

        if (updateExpirationTime < renderExpirationTime) {
          // This update does not have sufficient priority. Skip it.
          if (newFirstUpdate === null) {
            // This is the first skipped update. It will be the first update in
            // the new list.
            newFirstUpdate = update; // Since this is the first update that was skipped, the current result
            // is the new base state.

            newBaseState = resultState;
          } // Since this update will remain in the list, update the remaining
          // expiration time.


          if (newExpirationTime < updateExpirationTime) {
            newExpirationTime = updateExpirationTime;
          }
        } else {
          // This update does have sufficient priority. Process it and compute
          // a new result.
          resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
          var _callback = update.callback;

          if (_callback !== null) {
            workInProgress.effectTag |= Callback; // Set this to null, in case it was mutated during an aborted render.

            update.nextEffect = null;

            if (queue.lastEffect === null) {
              queue.firstEffect = queue.lastEffect = update;
            } else {
              queue.lastEffect.nextEffect = update;
              queue.lastEffect = update;
            }
          }
        } // Continue to the next update.


        update = update.next;
      } // Separately, iterate though the list of captured updates.


      var newFirstCapturedUpdate = null;
      update = queue.firstCapturedUpdate;

      while (update !== null) {
        var _updateExpirationTime = update.expirationTime;

        if (_updateExpirationTime < renderExpirationTime) {
          // This update does not have sufficient priority. Skip it.
          if (newFirstCapturedUpdate === null) {
            // This is the first skipped captured update. It will be the first
            // update in the new list.
            newFirstCapturedUpdate = update; // If this is the first update that was skipped, the current result is
            // the new base state.

            if (newFirstUpdate === null) {
              newBaseState = resultState;
            }
          } // Since this update will remain in the list, update the remaining
          // expiration time.


          if (newExpirationTime < _updateExpirationTime) {
            newExpirationTime = _updateExpirationTime;
          }
        } else {
          // This update does have sufficient priority. Process it and compute
          // a new result.
          resultState = getStateFromUpdate(workInProgress, queue, update, resultState, props, instance);
          var _callback2 = update.callback;

          if (_callback2 !== null) {
            workInProgress.effectTag |= Callback; // Set this to null, in case it was mutated during an aborted render.

            update.nextEffect = null;

            if (queue.lastCapturedEffect === null) {
              queue.firstCapturedEffect = queue.lastCapturedEffect = update;
            } else {
              queue.lastCapturedEffect.nextEffect = update;
              queue.lastCapturedEffect = update;
            }
          }
        }

        update = update.next;
      }

      if (newFirstUpdate === null) {
        queue.lastUpdate = null;
      }

      if (newFirstCapturedUpdate === null) {
        queue.lastCapturedUpdate = null;
      } else {
        workInProgress.effectTag |= Callback;
      }

      if (newFirstUpdate === null && newFirstCapturedUpdate === null) {
        // We processed every update, without skipping. That means the new base
        // state is the same as the result state.
        newBaseState = resultState;
      }

      queue.baseState = newBaseState;
      queue.firstUpdate = newFirstUpdate;
      queue.firstCapturedUpdate = newFirstCapturedUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.
      // This should be fine because the only two other things that contribute to
      // expiration time are props and context. We're already in the middle of the
      // begin phase by the time we start processing the queue, so we've already
      // dealt with the props. Context in components that specify
      // shouldComponentUpdate is tricky; but we'll have to account for
      // that regardless.

      workInProgress.expirationTime = newExpirationTime;
      workInProgress.memoizedState = resultState;
      {
        currentlyProcessingQueue = null;
      }
    }

    function callCallback(callback, context) {
      !(typeof callback === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', callback) : void 0;
      callback.call(context);
    }

    function resetHasForceUpdateBeforeProcessing() {
      hasForceUpdate = false;
    }

    function checkHasForceUpdateAfterProcessing() {
      return hasForceUpdate;
    }

    function commitUpdateQueue(finishedWork, finishedQueue, instance, renderExpirationTime) {
      // If the finished render included captured updates, and there are still
      // lower priority updates left over, we need to keep the captured updates
      // in the queue so that they are rebased and not dropped once we process the
      // queue again at the lower priority.
      if (finishedQueue.firstCapturedUpdate !== null) {
        // Join the captured update list to the end of the normal list.
        if (finishedQueue.lastUpdate !== null) {
          finishedQueue.lastUpdate.next = finishedQueue.firstCapturedUpdate;
          finishedQueue.lastUpdate = finishedQueue.lastCapturedUpdate;
        } // Clear the list of captured updates.


        finishedQueue.firstCapturedUpdate = finishedQueue.lastCapturedUpdate = null;
      } // Commit the effects


      commitUpdateEffects(finishedQueue.firstEffect, instance);
      finishedQueue.firstEffect = finishedQueue.lastEffect = null;
      commitUpdateEffects(finishedQueue.firstCapturedEffect, instance);
      finishedQueue.firstCapturedEffect = finishedQueue.lastCapturedEffect = null;
    }

    function commitUpdateEffects(effect, instance) {
      while (effect !== null) {
        var _callback3 = effect.callback;

        if (_callback3 !== null) {
          effect.callback = null;
          callCallback(_callback3, instance);
        }

        effect = effect.nextEffect;
      }
    }

    function createCapturedValue(value, source) {
      // If the value is an error, call this function immediately after it is thrown
      // so the stack is accurate.
      return {
        value: value,
        source: source,
        stack: getStackByFiberInDevAndProd(source)
      };
    }

    function markUpdate(workInProgress) {
      // Tag the fiber with an update effect. This turns a Placement into
      // a PlacementAndUpdate.
      workInProgress.effectTag |= Update;
    }

    function markRef$1(workInProgress) {
      workInProgress.effectTag |= Ref;
    }

    var appendAllChildren = void 0;
    var updateHostContainer = void 0;
    var updateHostComponent$1 = void 0;
    var updateHostText$1 = void 0;

    if (supportsMutation) {
      // Mutation mode
      appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;

        while (node !== null) {
          if (node.tag === HostComponent || node.tag === HostText) {
            appendInitialChild(parent, node.stateNode);
          } else if (node.tag === HostPortal) {// If we have a portal child, then we don't want to traverse
            // down its children. Instead, we'll get insertions from each child in
            // the portal directly.
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }

          if (node === workInProgress) {
            return;
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === workInProgress) {
              return;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }
      };

      updateHostContainer = function (workInProgress) {// Noop
      };

      updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
        // If we have an alternate, that means this is an update and we need to
        // schedule a side-effect to do the updates.
        var oldProps = current.memoizedProps;

        if (oldProps === newProps) {
          // In mutation mode, this is sufficient for a bailout because
          // we won't touch this node even if children changed.
          return;
        } // If we get updated because one of our children updated, we don't
        // have newProps so we'll have to reuse them.
        // TODO: Split the update API as separate for the props vs. children.
        // Even better would be if children weren't special cased at all tho.


        var instance = workInProgress.stateNode;
        var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
        // component is hitting the resume path. Figure out why. Possibly
        // related to `hidden`.

        var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

        workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update. All the work is done in commitWork.

        if (updatePayload) {
          markUpdate(workInProgress);
        }
      };

      updateHostText$1 = function (current, workInProgress, oldText, newText) {
        // If the text differs, mark it as an update. All the work in done in commitWork.
        if (oldText !== newText) {
          markUpdate(workInProgress);
        }
      };
    } else if (supportsPersistence) {
      // Persistent host tree mode
      appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;

        while (node !== null) {
          // eslint-disable-next-line no-labels
          branches: if (node.tag === HostComponent) {
            var instance = node.stateNode;

            if (needsVisibilityToggle) {
              var props = node.memoizedProps;
              var type = node.type;

              if (isHidden) {
                // This child is inside a timed out tree. Hide it.
                instance = cloneHiddenInstance(instance, type, props, node);
              } else {
                // This child was previously inside a timed out tree. If it was not
                // updated during this render, it may need to be unhidden. Clone
                // again to be sure.
                instance = cloneUnhiddenInstance(instance, type, props, node);
              }

              node.stateNode = instance;
            }

            appendInitialChild(parent, instance);
          } else if (node.tag === HostText) {
            var _instance = node.stateNode;

            if (needsVisibilityToggle) {
              var text = node.memoizedProps;
              var rootContainerInstance = getRootHostContainer();
              var currentHostContext = getHostContext();

              if (isHidden) {
                _instance = createHiddenTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
              } else {
                _instance = createTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
              }

              node.stateNode = _instance;
            }

            appendInitialChild(parent, _instance);
          } else if (node.tag === HostPortal) {// If we have a portal child, then we don't want to traverse
            // down its children. Instead, we'll get insertions from each child in
            // the portal directly.
          } else if (node.tag === SuspenseComponent) {
            var current = node.alternate;

            if (current !== null) {
              var oldState = current.memoizedState;
              var newState = node.memoizedState;
              var oldIsHidden = oldState !== null;
              var newIsHidden = newState !== null;

              if (oldIsHidden !== newIsHidden) {
                // The placeholder either just timed out or switched back to the normal
                // children after having previously timed out. Toggle the visibility of
                // the direct host children.
                var primaryChildParent = newIsHidden ? node.child : node;

                if (primaryChildParent !== null) {
                  appendAllChildren(parent, primaryChildParent, true, newIsHidden);
                } // eslint-disable-next-line no-labels


                break branches;
              }
            }

            if (node.child !== null) {
              // Continue traversing like normal
              node.child.return = node;
              node = node.child;
              continue;
            }
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          } // $FlowFixMe This is correct but Flow is confused by the labeled break.


          node = node;

          if (node === workInProgress) {
            return;
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === workInProgress) {
              return;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }
      }; // An unfortunate fork of appendAllChildren because we have two different parent types.


      var appendAllChildrenToContainer = function (containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {
        // We only have the top Fiber that was created but we need recurse down its
        // children to find all the terminal nodes.
        var node = workInProgress.child;

        while (node !== null) {
          // eslint-disable-next-line no-labels
          branches: if (node.tag === HostComponent) {
            var instance = node.stateNode;

            if (needsVisibilityToggle) {
              var props = node.memoizedProps;
              var type = node.type;

              if (isHidden) {
                // This child is inside a timed out tree. Hide it.
                instance = cloneHiddenInstance(instance, type, props, node);
              } else {
                // This child was previously inside a timed out tree. If it was not
                // updated during this render, it may need to be unhidden. Clone
                // again to be sure.
                instance = cloneUnhiddenInstance(instance, type, props, node);
              }

              node.stateNode = instance;
            }

            appendChildToContainerChildSet(containerChildSet, instance);
          } else if (node.tag === HostText) {
            var _instance2 = node.stateNode;

            if (needsVisibilityToggle) {
              var text = node.memoizedProps;
              var rootContainerInstance = getRootHostContainer();
              var currentHostContext = getHostContext();

              if (isHidden) {
                _instance2 = createHiddenTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
              } else {
                _instance2 = createTextInstance(text, rootContainerInstance, currentHostContext, workInProgress);
              }

              node.stateNode = _instance2;
            }

            appendChildToContainerChildSet(containerChildSet, _instance2);
          } else if (node.tag === HostPortal) {// If we have a portal child, then we don't want to traverse
            // down its children. Instead, we'll get insertions from each child in
            // the portal directly.
          } else if (node.tag === SuspenseComponent) {
            var current = node.alternate;

            if (current !== null) {
              var oldState = current.memoizedState;
              var newState = node.memoizedState;
              var oldIsHidden = oldState !== null;
              var newIsHidden = newState !== null;

              if (oldIsHidden !== newIsHidden) {
                // The placeholder either just timed out or switched back to the normal
                // children after having previously timed out. Toggle the visibility of
                // the direct host children.
                var primaryChildParent = newIsHidden ? node.child : node;

                if (primaryChildParent !== null) {
                  appendAllChildrenToContainer(containerChildSet, primaryChildParent, true, newIsHidden);
                } // eslint-disable-next-line no-labels


                break branches;
              }
            }

            if (node.child !== null) {
              // Continue traversing like normal
              node.child.return = node;
              node = node.child;
              continue;
            }
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          } // $FlowFixMe This is correct but Flow is confused by the labeled break.


          node = node;

          if (node === workInProgress) {
            return;
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === workInProgress) {
              return;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }
      };

      updateHostContainer = function (workInProgress) {
        var portalOrRoot = workInProgress.stateNode;
        var childrenUnchanged = workInProgress.firstEffect === null;

        if (childrenUnchanged) {// No changes, just reuse the existing instance.
        } else {
          var container = portalOrRoot.containerInfo;
          var newChildSet = createContainerChildSet(container); // If children might have changed, we have to add them all to the set.

          appendAllChildrenToContainer(newChildSet, workInProgress, false, false);
          portalOrRoot.pendingChildren = newChildSet; // Schedule an update on the container to swap out the container.

          markUpdate(workInProgress);
          finalizeContainerChildren(container, newChildSet);
        }
      };

      updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
        var currentInstance = current.stateNode;
        var oldProps = current.memoizedProps; // If there are no effects associated with this node, then none of our children had any updates.
        // This guarantees that we can reuse all of them.

        var childrenUnchanged = workInProgress.firstEffect === null;

        if (childrenUnchanged && oldProps === newProps) {
          // No changes, just reuse the existing instance.
          // Note that this might release a previous clone.
          workInProgress.stateNode = currentInstance;
          return;
        }

        var recyclableInstance = workInProgress.stateNode;
        var currentHostContext = getHostContext();
        var updatePayload = null;

        if (oldProps !== newProps) {
          updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
        }

        if (childrenUnchanged && updatePayload === null) {
          // No changes, just reuse the existing instance.
          // Note that this might release a previous clone.
          workInProgress.stateNode = currentInstance;
          return;
        }

        var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);

        if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {
          markUpdate(workInProgress);
        }

        workInProgress.stateNode = newInstance;

        if (childrenUnchanged) {
          // If there are no other effects in this tree, we need to flag this node as having one.
          // Even though we're not going to use it for anything.
          // Otherwise parents won't know that there are new children to propagate upwards.
          markUpdate(workInProgress);
        } else {
          // If children might have changed, we have to add them all to the set.
          appendAllChildren(newInstance, workInProgress, false, false);
        }
      };

      updateHostText$1 = function (current, workInProgress, oldText, newText) {
        if (oldText !== newText) {
          // If the text content differs, we'll create a new text instance for it.
          var rootContainerInstance = getRootHostContainer();
          var currentHostContext = getHostContext();
          workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress); // We'll have to mark it as having an effect, even though we won't use the effect for anything.
          // This lets the parents know that at least one of their children has changed.

          markUpdate(workInProgress);
        }
      };
    } else {
      // No host operations
      updateHostContainer = function (workInProgress) {// Noop
      };

      updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {// Noop
      };

      updateHostText$1 = function (current, workInProgress, oldText, newText) {// Noop
      };
    }

    function completeWork(current, workInProgress, renderExpirationTime) {
      var newProps = workInProgress.pendingProps;

      switch (workInProgress.tag) {
        case IndeterminateComponent:
          break;

        case LazyComponent:
          break;

        case SimpleMemoComponent:
        case FunctionComponent:
          break;

        case ClassComponent:
          {
            var Component = workInProgress.type;

            if (isContextProvider(Component)) {
              popContext(workInProgress);
            }

            break;
          }

        case HostRoot:
          {
            popHostContainer(workInProgress);
            popTopLevelContextObject(workInProgress);
            var fiberRoot = workInProgress.stateNode;

            if (fiberRoot.pendingContext) {
              fiberRoot.context = fiberRoot.pendingContext;
              fiberRoot.pendingContext = null;
            }

            if (current === null || current.child === null) {
              // If we hydrated, pop so that we can delete any remaining children
              // that weren't hydrated.
              popHydrationState(workInProgress); // This resets the hacky state to fix isMounted before committing.
              // TODO: Delete this when we delete isMounted and findDOMNode.

              workInProgress.effectTag &= ~Placement;
            }

            updateHostContainer(workInProgress);
            break;
          }

        case HostComponent:
          {
            popHostContext(workInProgress);
            var rootContainerInstance = getRootHostContainer();
            var type = workInProgress.type;

            if (current !== null && workInProgress.stateNode != null) {
              updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

              if (current.ref !== workInProgress.ref) {
                markRef$1(workInProgress);
              }
            } else {
              if (!newProps) {
                !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0; // This can happen when we abort work.

                break;
              }

              var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
              // "stack" as the parent. Then append children as we go in beginWork
              // or completeWork depending on we want to add then top->down or
              // bottom->up. Top->down is faster in IE11.

              var wasHydrated = popHydrationState(workInProgress);

              if (wasHydrated) {
                // TODO: Move this and createInstance step into the beginPhase
                // to consolidate.
                if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
                  // If changes to the hydrated node needs to be applied at the
                  // commit-phase we mark this as such.
                  markUpdate(workInProgress);
                }
              } else {
                var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
                appendAllChildren(instance, workInProgress, false, false); // Certain renderers require commit-time effects for initial mount.
                // (eg DOM renderer supports auto-focus for certain elements).
                // Make sure such renderers get scheduled for later work.

                if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {
                  markUpdate(workInProgress);
                }

                workInProgress.stateNode = instance;
              }

              if (workInProgress.ref !== null) {
                // If there is a ref on a host node we need to schedule a callback
                markRef$1(workInProgress);
              }
            }

            break;
          }

        case HostText:
          {
            var newText = newProps;

            if (current && workInProgress.stateNode != null) {
              var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
              // to schedule a side-effect to do the updates.

              updateHostText$1(current, workInProgress, oldText, newText);
            } else {
              if (typeof newText !== 'string') {
                !(workInProgress.stateNode !== null) ? invariant(false, 'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.') : void 0; // This can happen when we abort work.
              }

              var _rootContainerInstance = getRootHostContainer();

              var _currentHostContext = getHostContext();

              var _wasHydrated = popHydrationState(workInProgress);

              if (_wasHydrated) {
                if (prepareToHydrateHostTextInstance(workInProgress)) {
                  markUpdate(workInProgress);
                }
              } else {
                workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
              }
            }

            break;
          }

        case ForwardRef:
          break;

        case SuspenseComponent:
          {
            var nextState = workInProgress.memoizedState;

            if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
              // Something suspended. Re-render with the fallback children.
              workInProgress.expirationTime = renderExpirationTime; // Do not reset the effect list.

              return workInProgress;
            }

            var nextDidTimeout = nextState !== null;
            var prevDidTimeout = current !== null && current.memoizedState !== null;

            if (current !== null && !nextDidTimeout && prevDidTimeout) {
              // We just switched from the fallback to the normal children. Delete
              // the fallback.
              // TODO: Would it be better to store the fallback fragment on
              var currentFallbackChild = current.child.sibling;

              if (currentFallbackChild !== null) {
                // Deletions go at the beginning of the return fiber's effect list
                var first = workInProgress.firstEffect;

                if (first !== null) {
                  workInProgress.firstEffect = currentFallbackChild;
                  currentFallbackChild.nextEffect = first;
                } else {
                  workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
                  currentFallbackChild.nextEffect = null;
                }

                currentFallbackChild.effectTag = Deletion;
              }
            }

            if (nextDidTimeout || prevDidTimeout) {
              // If the children are hidden, or if they were previous hidden, schedule
              // an effect to toggle their visibility. This is also used to attach a
              // retry listener to the promise.
              workInProgress.effectTag |= Update;
            }

            break;
          }

        case Fragment:
          break;

        case Mode:
          break;

        case Profiler:
          break;

        case HostPortal:
          popHostContainer(workInProgress);
          updateHostContainer(workInProgress);
          break;

        case ContextProvider:
          // Pop provider fiber
          popProvider(workInProgress);
          break;

        case ContextConsumer:
          break;

        case MemoComponent:
          break;

        case IncompleteClassComponent:
          {
            // Same as class component case. I put it down here so that the tags are
            // sequential to ensure this switch is compiled to a jump table.
            var _Component = workInProgress.type;

            if (isContextProvider(_Component)) {
              popContext(workInProgress);
            }

            break;
          }

        case DehydratedSuspenseComponent:
          {
            if (enableSuspenseServerRenderer) {
              if (current === null) {
                var _wasHydrated2 = popHydrationState(workInProgress);

                !_wasHydrated2 ? invariant(false, 'A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.') : void 0;
                skipPastDehydratedSuspenseInstance(workInProgress);
              } else if ((workInProgress.effectTag & DidCapture) === NoEffect) {
                // This boundary did not suspend so it's now hydrated.
                // To handle any future suspense cases, we're going to now upgrade it
                // to a Suspense component. We detach it from the existing current fiber.
                current.alternate = null;
                workInProgress.alternate = null;
                workInProgress.tag = SuspenseComponent;
                workInProgress.memoizedState = null;
                workInProgress.stateNode = null;
              }
            }

            break;
          }

        default:
          invariant(false, 'Unknown unit of work tag. This error is likely caused by a bug in React. Please file an issue.');
      }

      return null;
    }

    function shouldCaptureSuspense(workInProgress) {
      // In order to capture, the Suspense component must have a fallback prop.
      if (workInProgress.memoizedProps.fallback === undefined) {
        return false;
      } // If it was the primary children that just suspended, capture and render the
      // fallback. Otherwise, don't capture and bubble to the next boundary.


      var nextState = workInProgress.memoizedState;
      return nextState === null;
    } // This module is forked in different environments.
    // By default, return `true` to log errors to the console.
    // Forks can return `false` if this isn't desirable.


    function showErrorDialog(capturedError) {
      return true;
    }

    function logCapturedError(capturedError) {
      var logError = showErrorDialog(capturedError); // Allow injected showErrorDialog() to prevent default console.error logging.
      // This enables renderers like ReactNative to better manage redbox behavior.

      if (logError === false) {
        return;
      }

      var error = capturedError.error;
      {
        var componentName = capturedError.componentName,
            componentStack = capturedError.componentStack,
            errorBoundaryName = capturedError.errorBoundaryName,
            errorBoundaryFound = capturedError.errorBoundaryFound,
            willRetry = capturedError.willRetry; // Browsers support silencing uncaught errors by calling
        // `preventDefault()` in window `error` handler.
        // We record this information as an expando on the error.

        if (error != null && error._suppressLogging) {
          if (errorBoundaryFound && willRetry) {
            // The error is recoverable and was silenced.
            // Ignore it and don't print the stack addendum.
            // This is handy for testing error boundaries without noise.
            return;
          } // The error is fatal. Since the silencing might have
          // been accidental, we'll surface it anyway.
          // However, the browser would have silenced the original error
          // so we'll print it first, and then print the stack addendum.


          console.error(error); // For a more detailed description of this block, see:
          // https://github.com/facebook/react/pull/13384
        }

        var componentNameMessage = componentName ? 'The above error occurred in the <' + componentName + '> component:' : 'The above error occurred in one of your React components:';
        var errorBoundaryMessage = void 0; // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.

        if (errorBoundaryFound && errorBoundaryName) {
          if (willRetry) {
            errorBoundaryMessage = 'React will try to recreate this component tree from scratch ' + ('using the error boundary you provided, ' + errorBoundaryName + '.');
          } else {
            errorBoundaryMessage = 'This error was initially handled by the error boundary ' + errorBoundaryName + '.\n' + 'Recreating the tree from scratch failed so React will unmount the tree.';
          }
        } else {
          errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
        }

        var combinedMessage = '' + componentNameMessage + componentStack + '\n\n' + ('' + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
        // We don't include the original error message and JS stack because the browser
        // has already printed it. Even if the application swallows the error, it is still
        // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

        console.error(combinedMessage);
      }
    }

    var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
    {
      didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
    }
    var PossiblyWeakSet$1 = typeof WeakSet === 'function' ? WeakSet : Set;

    function logError(boundary, errorInfo) {
      var source = errorInfo.source;
      var stack = errorInfo.stack;

      if (stack === null && source !== null) {
        stack = getStackByFiberInDevAndProd(source);
      }

      var capturedError = {
        componentName: source !== null ? getComponentName(source.type) : null,
        componentStack: stack !== null ? stack : '',
        error: errorInfo.value,
        errorBoundary: null,
        errorBoundaryName: null,
        errorBoundaryFound: false,
        willRetry: false
      };

      if (boundary !== null && boundary.tag === ClassComponent) {
        capturedError.errorBoundary = boundary.stateNode;
        capturedError.errorBoundaryName = getComponentName(boundary.type);
        capturedError.errorBoundaryFound = true;
        capturedError.willRetry = true;
      }

      try {
        logCapturedError(capturedError);
      } catch (e) {
        // This method must not throw, or React internal state will get messed up.
        // If console.error is overridden, or logCapturedError() shows a dialog that throws,
        // we want to report this error outside of the normal stack as a last resort.
        // https://github.com/facebook/react/issues/13188
        setTimeout(function () {
          throw e;
        });
      }
    }

    var callComponentWillUnmountWithTimer = function (current$$1, instance) {
      startPhaseTimer(current$$1, 'componentWillUnmount');
      instance.props = current$$1.memoizedProps;
      instance.state = current$$1.memoizedState;
      instance.componentWillUnmount();
      stopPhaseTimer();
    }; // Capture errors so they don't interrupt unmounting.


    function safelyCallComponentWillUnmount(current$$1, instance) {
      {
        invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current$$1, instance);

        if (hasCaughtError()) {
          var unmountError = clearCaughtError();
          captureCommitPhaseError(current$$1, unmountError);
        }
      }
    }

    function safelyDetachRef(current$$1) {
      var ref = current$$1.ref;

      if (ref !== null) {
        if (typeof ref === 'function') {
          {
            invokeGuardedCallback(null, ref, null, null);

            if (hasCaughtError()) {
              var refError = clearCaughtError();
              captureCommitPhaseError(current$$1, refError);
            }
          }
        } else {
          ref.current = null;
        }
      }
    }

    function safelyCallDestroy(current$$1, destroy) {
      {
        invokeGuardedCallback(null, destroy, null);

        if (hasCaughtError()) {
          var error = clearCaughtError();
          captureCommitPhaseError(current$$1, error);
        }
      }
    }

    function commitBeforeMutationLifeCycles(current$$1, finishedWork) {
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent:
          {
            commitHookEffectList(UnmountSnapshot, NoEffect$1, finishedWork);
            return;
          }

        case ClassComponent:
          {
            if (finishedWork.effectTag & Snapshot) {
              if (current$$1 !== null) {
                var prevProps = current$$1.memoizedProps;
                var prevState = current$$1.memoizedState;
                startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
                var instance = finishedWork.stateNode; // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.

                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                    !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                  }
                }
                var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                {
                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

                  if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                    didWarnSet.add(finishedWork.type);
                    warningWithoutStack$1(false, '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
                  }
                }
                instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                stopPhaseTimer();
              }
            }

            return;
          }

        case HostRoot:
        case HostComponent:
        case HostText:
        case HostPortal:
        case IncompleteClassComponent:
          // Nothing to do for these component types
          return;

        default:
          {
            invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
          }
      }
    }

    function commitHookEffectList(unmountTag, mountTag, finishedWork) {
      var updateQueue = finishedWork.updateQueue;
      var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

      if (lastEffect !== null) {
        var firstEffect = lastEffect.next;
        var effect = firstEffect;

        do {
          if ((effect.tag & unmountTag) !== NoEffect$1) {
            // Unmount
            var destroy = effect.destroy;
            effect.destroy = undefined;

            if (destroy !== undefined) {
              destroy();
            }
          }

          if ((effect.tag & mountTag) !== NoEffect$1) {
            // Mount
            var create = effect.create;
            effect.destroy = create();
            {
              var _destroy = effect.destroy;

              if (_destroy !== undefined && typeof _destroy !== 'function') {
                var addendum = void 0;

                if (_destroy === null) {
                  addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
                } else if (typeof _destroy.then === 'function') {
                  addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + '}, [someId]); // Or [] if effect doesn\'t need props or state\n\n' + 'Learn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching';
                } else {
                  addendum = ' You returned: ' + _destroy;
                }

                warningWithoutStack$1(false, 'An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s%s', addendum, getStackByFiberInDevAndProd(finishedWork));
              }
            }
          }

          effect = effect.next;
        } while (effect !== firstEffect);
      }
    }

    function commitPassiveHookEffects(finishedWork) {
      commitHookEffectList(UnmountPassive, NoEffect$1, finishedWork);
      commitHookEffectList(NoEffect$1, MountPassive, finishedWork);
    }

    function commitLifeCycles(finishedRoot, current$$1, finishedWork, committedExpirationTime) {
      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent:
          {
            commitHookEffectList(UnmountLayout, MountLayout, finishedWork);
            break;
          }

        case ClassComponent:
          {
            var instance = finishedWork.stateNode;

            if (finishedWork.effectTag & Update) {
              if (current$$1 === null) {
                startPhaseTimer(finishedWork, 'componentDidMount'); // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.

                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                    !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                  }
                }
                instance.componentDidMount();
                stopPhaseTimer();
              } else {
                var prevProps = finishedWork.elementType === finishedWork.type ? current$$1.memoizedProps : resolveDefaultProps(finishedWork.type, current$$1.memoizedProps);
                var prevState = current$$1.memoizedState;
                startPhaseTimer(finishedWork, 'componentDidUpdate'); // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.

                {
                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                    !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                    !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                  }
                }
                instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                stopPhaseTimer();
              }
            }

            var updateQueue = finishedWork.updateQueue;

            if (updateQueue !== null) {
              {
                if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                  !(instance.props === finishedWork.memoizedProps) ? warning$1(false, 'Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                  !(instance.state === finishedWork.memoizedState) ? warning$1(false, 'Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance') : void 0;
                }
              } // We could update instance props and state here,
              // but instead we rely on them being set during last render.
              // TODO: revisit this when we implement resuming.

              commitUpdateQueue(finishedWork, updateQueue, instance, committedExpirationTime);
            }

            return;
          }

        case HostRoot:
          {
            var _updateQueue = finishedWork.updateQueue;

            if (_updateQueue !== null) {
              var _instance = null;

              if (finishedWork.child !== null) {
                switch (finishedWork.child.tag) {
                  case HostComponent:
                    _instance = getPublicInstance(finishedWork.child.stateNode);
                    break;

                  case ClassComponent:
                    _instance = finishedWork.child.stateNode;
                    break;
                }
              }

              commitUpdateQueue(finishedWork, _updateQueue, _instance, committedExpirationTime);
            }

            return;
          }

        case HostComponent:
          {
            var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
            // (eg DOM renderer may schedule auto-focus for inputs and form controls).
            // These effects should only be committed when components are first mounted,
            // aka when there is no current/alternate.

            if (current$$1 === null && finishedWork.effectTag & Update) {
              var type = finishedWork.type;
              var props = finishedWork.memoizedProps;
              commitMount(_instance2, type, props, finishedWork);
            }

            return;
          }

        case HostText:
          {
            // We have no life-cycles associated with text.
            return;
          }

        case HostPortal:
          {
            // We have no life-cycles associated with portals.
            return;
          }

        case Profiler:
          {
            if (enableProfilerTimer) {
              var onRender = finishedWork.memoizedProps.onRender;

              if (enableSchedulerTracing) {
                onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
              } else {
                onRender(finishedWork.memoizedProps.id, current$$1 === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime());
              }
            }

            return;
          }

        case SuspenseComponent:
          break;

        case IncompleteClassComponent:
          break;

        default:
          {
            invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
          }
      }
    }

    function hideOrUnhideAllChildren(finishedWork, isHidden) {
      if (supportsMutation) {
        // We only have the top Fiber that was inserted but we need to recurse down its
        var node = finishedWork;

        while (true) {
          if (node.tag === HostComponent) {
            var instance = node.stateNode;

            if (isHidden) {
              hideInstance(instance);
            } else {
              unhideInstance(node.stateNode, node.memoizedProps);
            }
          } else if (node.tag === HostText) {
            var _instance3 = node.stateNode;

            if (isHidden) {
              hideTextInstance(_instance3);
            } else {
              unhideTextInstance(_instance3, node.memoizedProps);
            }
          } else if (node.tag === SuspenseComponent && node.memoizedState !== null) {
            // Found a nested Suspense component that timed out. Skip over the
            var fallbackChildFragment = node.child.sibling;
            fallbackChildFragment.return = node;
            node = fallbackChildFragment;
            continue;
          } else if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }

          if (node === finishedWork) {
            return;
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === finishedWork) {
              return;
            }

            node = node.return;
          }

          node.sibling.return = node.return;
          node = node.sibling;
        }
      }
    }

    function commitAttachRef(finishedWork) {
      var ref = finishedWork.ref;

      if (ref !== null) {
        var instance = finishedWork.stateNode;
        var instanceToUse = void 0;

        switch (finishedWork.tag) {
          case HostComponent:
            instanceToUse = getPublicInstance(instance);
            break;

          default:
            instanceToUse = instance;
        }

        if (typeof ref === 'function') {
          ref(instanceToUse);
        } else {
          {
            if (!ref.hasOwnProperty('current')) {
              warningWithoutStack$1(false, 'Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
            }
          }
          ref.current = instanceToUse;
        }
      }
    }

    function commitDetachRef(current$$1) {
      var currentRef = current$$1.ref;

      if (currentRef !== null) {
        if (typeof currentRef === 'function') {
          currentRef(null);
        } else {
          currentRef.current = null;
        }
      }
    } // User-originating errors (lifecycles and refs) should not interrupt
    // deletion, so don't let them throw. Host-originating errors should
    // interrupt deletion, so it's okay


    function commitUnmount(current$$1) {
      onCommitUnmount(current$$1);

      switch (current$$1.tag) {
        case FunctionComponent:
        case ForwardRef:
        case MemoComponent:
        case SimpleMemoComponent:
          {
            var updateQueue = current$$1.updateQueue;

            if (updateQueue !== null) {
              var lastEffect = updateQueue.lastEffect;

              if (lastEffect !== null) {
                var firstEffect = lastEffect.next;
                var effect = firstEffect;

                do {
                  var destroy = effect.destroy;

                  if (destroy !== undefined) {
                    safelyCallDestroy(current$$1, destroy);
                  }

                  effect = effect.next;
                } while (effect !== firstEffect);
              }
            }

            break;
          }

        case ClassComponent:
          {
            safelyDetachRef(current$$1);
            var instance = current$$1.stateNode;

            if (typeof instance.componentWillUnmount === 'function') {
              safelyCallComponentWillUnmount(current$$1, instance);
            }

            return;
          }

        case HostComponent:
          {
            safelyDetachRef(current$$1);
            return;
          }

        case HostPortal:
          {
            // TODO: this is recursive.
            // We are also not using this parent because
            // the portal will get pushed immediately.
            if (supportsMutation) {
              unmountHostComponents(current$$1);
            } else if (supportsPersistence) {
              emptyPortalContainer(current$$1);
            }

            return;
          }
      }
    }

    function commitNestedUnmounts(root) {
      // While we're inside a removed host node we don't want to call
      // removeChild on the inner nodes because they're removed by the top
      // call anyway. We also want to call componentWillUnmount on all
      // composites before this host node is removed from the tree. Therefore
      var node = root;

      while (true) {
        commitUnmount(node); // Visit children because they may contain more composite or host nodes.
        // Skip portals because commitUnmount() currently visits them recursively.

        if (node.child !== null && ( // If we use mutation we drill down into portals using commitUnmount above.
        // If we don't use mutation we drill down into portals here instead.
        !supportsMutation || node.tag !== HostPortal)) {
          node.child.return = node;
          node = node.child;
          continue;
        }

        if (node === root) {
          return;
        }

        while (node.sibling === null) {
          if (node.return === null || node.return === root) {
            return;
          }

          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    function detachFiber(current$$1) {
      // Cut off the return pointers to disconnect it from the tree. Ideally, we
      // should clear the child pointer of the parent alternate to let this
      // get GC:ed but we don't know which for sure which parent is the current
      // one so we'll settle for GC:ing the subtree of this child. This child
      // itself will be GC:ed when the parent updates the next time.
      current$$1.return = null;
      current$$1.child = null;
      current$$1.memoizedState = null;
      current$$1.updateQueue = null;
      var alternate = current$$1.alternate;

      if (alternate !== null) {
        alternate.return = null;
        alternate.child = null;
        alternate.memoizedState = null;
        alternate.updateQueue = null;
      }
    }

    function emptyPortalContainer(current$$1) {
      if (!supportsPersistence) {
        return;
      }

      var portal = current$$1.stateNode;
      var containerInfo = portal.containerInfo;
      var emptyChildSet = createContainerChildSet(containerInfo);
      replaceContainerChildren(containerInfo, emptyChildSet);
    }

    function commitContainer(finishedWork) {
      if (!supportsPersistence) {
        return;
      }

      switch (finishedWork.tag) {
        case ClassComponent:
          {
            return;
          }

        case HostComponent:
          {
            return;
          }

        case HostText:
          {
            return;
          }

        case HostRoot:
        case HostPortal:
          {
            var portalOrRoot = finishedWork.stateNode;
            var containerInfo = portalOrRoot.containerInfo,
                _pendingChildren = portalOrRoot.pendingChildren;
            replaceContainerChildren(containerInfo, _pendingChildren);
            return;
          }

        default:
          {
            invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
          }
      }
    }

    function getHostParentFiber(fiber) {
      var parent = fiber.return;

      while (parent !== null) {
        if (isHostParent(parent)) {
          return parent;
        }

        parent = parent.return;
      }

      invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.');
    }

    function isHostParent(fiber) {
      return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
    }

    function getHostSibling(fiber) {
      // We're going to search forward into the tree until we find a sibling host
      // node. Unfortunately, if multiple insertions are done in a row we have to
      // search past them. This leads to exponential search for the next sibling.
      var node = fiber;

      siblings: while (true) {
        // If we didn't find anything, let's try the next sibling.
        while (node.sibling === null) {
          if (node.return === null || isHostParent(node.return)) {
            // If we pop out of the root or hit the parent the fiber we are the
            // last sibling.
            return null;
          }

          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;

        while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedSuspenseComponent) {
          // If it is not host node and, we might have a host node inside it.
          // Try to search down until we find one.
          if (node.effectTag & Placement) {
            // If we don't have a child, try the siblings instead.
            continue siblings;
          } // If we don't have a child, try the siblings instead.
          // We also skip portals because they are not part of this host tree.


          if (node.child === null || node.tag === HostPortal) {
            continue siblings;
          } else {
            node.child.return = node;
            node = node.child;
          }
        } // Check if this host node is stable or about to be placed.


        if (!(node.effectTag & Placement)) {
          // Found it!
          return node.stateNode;
        }
      }
    }

    function commitPlacement(finishedWork) {
      if (!supportsMutation) {
        return;
      } // Recursively insert all host nodes into the parent.


      var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

      var parent = void 0;
      var isContainer = void 0;

      switch (parentFiber.tag) {
        case HostComponent:
          parent = parentFiber.stateNode;
          isContainer = false;
          break;

        case HostRoot:
          parent = parentFiber.stateNode.containerInfo;
          isContainer = true;
          break;

        case HostPortal:
          parent = parentFiber.stateNode.containerInfo;
          isContainer = true;
          break;

        default:
          invariant(false, 'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.');
      }

      if (parentFiber.effectTag & ContentReset) {
        // Reset the text content of the parent before doing any insertions
        resetTextContent(parent); // Clear ContentReset from the effect tag

        parentFiber.effectTag &= ~ContentReset;
      }

      var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
      // children to find all the terminal nodes.

      var node = finishedWork;

      while (true) {
        if (node.tag === HostComponent || node.tag === HostText) {
          if (before) {
            if (isContainer) {
              insertInContainerBefore(parent, node.stateNode, before);
            } else {
              insertBefore(parent, node.stateNode, before);
            }
          } else {
            if (isContainer) {
              appendChildToContainer(parent, node.stateNode);
            } else {
              appendChild(parent, node.stateNode);
            }
          }
        } else if (node.tag === HostPortal) {// If the insertion itself is a portal, then we don't want to traverse
          // down its children. Instead, we'll get insertions from each child in
          // the portal directly.
        } else if (node.child !== null) {
          node.child.return = node;
          node = node.child;
          continue;
        }

        if (node === finishedWork) {
          return;
        }

        while (node.sibling === null) {
          if (node.return === null || node.return === finishedWork) {
            return;
          }

          node = node.return;
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    function unmountHostComponents(current$$1) {
      // We only have the top Fiber that was deleted but we need to recurse down its
      var node = current$$1; // Each iteration, currentParent is populated with node's host parent if not
      // currentParentIsValid.

      var currentParentIsValid = false; // Note: these two variables *must* always be updated together.

      var currentParent = void 0;
      var currentParentIsContainer = void 0;

      while (true) {
        if (!currentParentIsValid) {
          var parent = node.return;

          findParent: while (true) {
            !(parent !== null) ? invariant(false, 'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.') : void 0;

            switch (parent.tag) {
              case HostComponent:
                currentParent = parent.stateNode;
                currentParentIsContainer = false;
                break findParent;

              case HostRoot:
                currentParent = parent.stateNode.containerInfo;
                currentParentIsContainer = true;
                break findParent;

              case HostPortal:
                currentParent = parent.stateNode.containerInfo;
                currentParentIsContainer = true;
                break findParent;
            }

            parent = parent.return;
          }

          currentParentIsValid = true;
        }

        if (node.tag === HostComponent || node.tag === HostText) {
          commitNestedUnmounts(node); // After all the children have unmounted, it is now safe to remove the
          // node from the tree.

          if (currentParentIsContainer) {
            removeChildFromContainer(currentParent, node.stateNode);
          } else {
            removeChild(currentParent, node.stateNode);
          } // Don't visit children because we already visited them.

        } else if (enableSuspenseServerRenderer && node.tag === DehydratedSuspenseComponent) {
          // Delete the dehydrated suspense boundary and all of its content.
          if (currentParentIsContainer) {
            clearSuspenseBoundaryFromContainer(currentParent, node.stateNode);
          } else {
            clearSuspenseBoundary(currentParent, node.stateNode);
          }
        } else if (node.tag === HostPortal) {
          if (node.child !== null) {
            // When we go into a portal, it becomes the parent to remove from.
            // We will reassign it back when we pop the portal on the way up.
            currentParent = node.stateNode.containerInfo;
            currentParentIsContainer = true; // Visit children because portals might contain host components.

            node.child.return = node;
            node = node.child;
            continue;
          }
        } else {
          commitUnmount(node); // Visit children because we may find more host components below.

          if (node.child !== null) {
            node.child.return = node;
            node = node.child;
            continue;
          }
        }

        if (node === current$$1) {
          return;
        }

        while (node.sibling === null) {
          if (node.return === null || node.return === current$$1) {
            return;
          }

          node = node.return;

          if (node.tag === HostPortal) {
            // When we go out of the portal, we need to restore the parent.
            // Since we don't keep a stack of them, we will search for it.
            currentParentIsValid = false;
          }
        }

        node.sibling.return = node.return;
        node = node.sibling;
      }
    }

    function commitDeletion(current$$1) {
      if (supportsMutation) {
        // Recursively delete all host nodes from the parent.
        // Detach refs and call componentWillUnmount() on the whole subtree.
        unmountHostComponents(current$$1);
      } else {
        // Detach refs and call componentWillUnmount() on the whole subtree.
        commitNestedUnmounts(current$$1);
      }

      detachFiber(current$$1);
    }

    function commitWork(current$$1, finishedWork) {
      if (!supportsMutation) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent:
            {
              // Note: We currently never use MountMutation, but useLayout uses
              // UnmountMutation.
              commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
              return;
            }
        }

        commitContainer(finishedWork);
        return;
      }

      switch (finishedWork.tag) {
        case FunctionComponent:
        case ForwardRef:
        case MemoComponent:
        case SimpleMemoComponent:
          {
            // Note: We currently never use MountMutation, but useLayout uses
            // UnmountMutation.
            commitHookEffectList(UnmountMutation, MountMutation, finishedWork);
            return;
          }

        case ClassComponent:
          {
            return;
          }

        case HostComponent:
          {
            var instance = finishedWork.stateNode;

            if (instance != null) {
              // Commit the work prepared earlier.
              var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
              // as the newProps. The updatePayload will contain the real change in
              // this case.

              var oldProps = current$$1 !== null ? current$$1.memoizedProps : newProps;
              var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

              var updatePayload = finishedWork.updateQueue;
              finishedWork.updateQueue = null;

              if (updatePayload !== null) {
                commitUpdate(instance, updatePayload, type, oldProps, newProps, finishedWork);
              }
            }

            return;
          }

        case HostText:
          {
            !(finishedWork.stateNode !== null) ? invariant(false, 'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.') : void 0;
            var textInstance = finishedWork.stateNode;
            var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
            // as the newProps. The updatePayload will contain the real change in
            // this case.

            var oldText = current$$1 !== null ? current$$1.memoizedProps : newText;
            commitTextUpdate(textInstance, oldText, newText);
            return;
          }

        case HostRoot:
          {
            return;
          }

        case Profiler:
          {
            return;
          }

        case SuspenseComponent:
          {
            var newState = finishedWork.memoizedState;
            var newDidTimeout = void 0;
            var primaryChildParent = finishedWork;

            if (newState === null) {
              newDidTimeout = false;
            } else {
              newDidTimeout = true;
              primaryChildParent = finishedWork.child;

              if (newState.timedOutAt === NoWork) {
                // If the children had not already timed out, record the time.
                // This is used to compute the elapsed time during subsequent
                // attempts to render the children.
                newState.timedOutAt = requestCurrentTime();
              }
            }

            if (primaryChildParent !== null) {
              hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
            } // If this boundary just timed out, then it will have a set of thenables.
            // For each thenable, attach a listener so that when it resolves, React
            // attempts to re-render the boundary in the primary (pre-timeout) state.


            var thenables = finishedWork.updateQueue;

            if (thenables !== null) {
              finishedWork.updateQueue = null;
              var retryCache = finishedWork.stateNode;

              if (retryCache === null) {
                retryCache = finishedWork.stateNode = new PossiblyWeakSet$1();
              }

              thenables.forEach(function (thenable) {
                // Memoize using the boundary fiber to prevent redundant listeners.
                var retry = retryTimedOutBoundary.bind(null, finishedWork, thenable);

                if (enableSchedulerTracing) {
                  retry = tracing.unstable_wrap(retry);
                }

                if (!retryCache.has(thenable)) {
                  retryCache.add(thenable);
                  thenable.then(retry, retry);
                }
              });
            }

            return;
          }

        case IncompleteClassComponent:
          {
            return;
          }

        default:
          {
            invariant(false, 'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.');
          }
      }
    }

    function commitResetTextContent(current$$1) {
      if (!supportsMutation) {
        return;
      }

      resetTextContent(current$$1.stateNode);
    }

    var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;

    function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
      var update = createUpdate(expirationTime); // Unmount the root by rendering null.

      update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
      // being called "element".

      update.payload = {
        element: null
      };
      var error = errorInfo.value;

      update.callback = function () {
        onUncaughtError(error);
        logError(fiber, errorInfo);
      };

      return update;
    }

    function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
      var update = createUpdate(expirationTime);
      update.tag = CaptureUpdate;
      var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

      if (typeof getDerivedStateFromError === 'function') {
        var error = errorInfo.value;

        update.payload = function () {
          return getDerivedStateFromError(error);
        };
      }

      var inst = fiber.stateNode;

      if (inst !== null && typeof inst.componentDidCatch === 'function') {
        update.callback = function callback() {
          if (typeof getDerivedStateFromError !== 'function') {
            // To preserve the preexisting retry behavior of error boundaries,
            // we keep track of which ones already failed during this batch.
            // This gets reset before we yield back to the browser.
            // TODO: Warn in strict mode if getDerivedStateFromError is
            // not defined.
            markLegacyErrorBoundaryAsFailed(this);
          }

          var error = errorInfo.value;
          var stack = errorInfo.stack;
          logError(fiber, errorInfo);
          this.componentDidCatch(error, {
            componentStack: stack !== null ? stack : ''
          });
          {
            if (typeof getDerivedStateFromError !== 'function') {
              // If componentDidCatch is the only error boundary method defined,
              // then it needs to call setState to recover from errors.
              // If no state update is scheduled then the boundary will swallow the error.
              !(fiber.expirationTime === Sync) ? warningWithoutStack$1(false, '%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown') : void 0;
            }
          }
        };
      }

      return update;
    }

    function attachPingListener(root, renderExpirationTime, thenable) {
      // Attach a listener to the promise to "ping" the root and retry. But
      // only if one does not already exist for the current render expiration
      // time (which acts like a "thread ID" here).
      var pingCache = root.pingCache;
      var threadIDs = void 0;

      if (pingCache === null) {
        pingCache = root.pingCache = new PossiblyWeakMap();
        threadIDs = new Set();
        pingCache.set(thenable, threadIDs);
      } else {
        threadIDs = pingCache.get(thenable);

        if (threadIDs === undefined) {
          threadIDs = new Set();
          pingCache.set(thenable, threadIDs);
        }
      }

      if (!threadIDs.has(renderExpirationTime)) {
        // Memoize using the thread ID to prevent redundant listeners.
        threadIDs.add(renderExpirationTime);
        var ping = pingSuspendedRoot.bind(null, root, thenable, renderExpirationTime);

        if (enableSchedulerTracing) {
          ping = tracing.unstable_wrap(ping);
        }

        thenable.then(ping, ping);
      }
    }

    function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
      // The source fiber did not complete.
      sourceFiber.effectTag |= Incomplete; // Its effect list is no longer valid.

      sourceFiber.firstEffect = sourceFiber.lastEffect = null;

      if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
        // This is a thenable.
        var thenable = value; // Find the earliest timeout threshold of all the placeholders in the
        // ancestor path. We could avoid this traversal by storing the thresholds on
        // the stack, but we choose not to because we only hit this path if we're
        // IO-bound (i.e. if something suspends). Whereas the stack is used even in
        // the non-IO- bound case.

        var _workInProgress = returnFiber;
        var earliestTimeoutMs = -1;
        var startTimeMs = -1;

        do {
          if (_workInProgress.tag === SuspenseComponent) {
            var current$$1 = _workInProgress.alternate;

            if (current$$1 !== null) {
              var currentState = current$$1.memoizedState;

              if (currentState !== null) {
                // Reached a boundary that already timed out. Do not search
                // any further.
                var timedOutAt = currentState.timedOutAt;
                startTimeMs = expirationTimeToMs(timedOutAt); // Do not search any further.

                break;
              }
            }

            var timeoutPropMs = _workInProgress.pendingProps.maxDuration;

            if (typeof timeoutPropMs === 'number') {
              if (timeoutPropMs <= 0) {
                earliestTimeoutMs = 0;
              } else if (earliestTimeoutMs === -1 || timeoutPropMs < earliestTimeoutMs) {
                earliestTimeoutMs = timeoutPropMs;
              }
            }
          } // If there is a DehydratedSuspenseComponent we don't have to do anything because
          // if something suspends inside it, we will simply leave that as dehydrated. It
          // will never timeout.


          _workInProgress = _workInProgress.return;
        } while (_workInProgress !== null); // Schedule the nearest Suspense to re-render the timed out view.


        _workInProgress = returnFiber;

        do {
          if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress)) {
            // Found the nearest boundary.
            // Stash the promise on the boundary fiber. If the boundary times out, we'll
            var thenables = _workInProgress.updateQueue;

            if (thenables === null) {
              var updateQueue = new Set();
              updateQueue.add(thenable);
              _workInProgress.updateQueue = updateQueue;
            } else {
              thenables.add(thenable);
            } // If the boundary is outside of concurrent mode, we should *not*
            // suspend the commit. Pretend as if the suspended component rendered
            // null and keep rendering. In the commit phase, we'll schedule a
            // subsequent synchronous update to re-render the Suspense.
            //
            // Note: It doesn't matter whether the component that suspended was
            // inside a concurrent mode tree. If the Suspense is outside of it, we
            // should *not* suspend the commit.


            if ((_workInProgress.mode & ConcurrentMode) === NoEffect) {
              _workInProgress.effectTag |= DidCapture; // We're going to commit this fiber even though it didn't complete.
              // But we shouldn't call any lifecycle methods or callbacks. Remove
              // all lifecycle effect tags.

              sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);

              if (sourceFiber.tag === ClassComponent) {
                var currentSourceFiber = sourceFiber.alternate;

                if (currentSourceFiber === null) {
                  // This is a new mount. Change the tag so it's not mistaken for a
                  // completed class component. For example, we should not call
                  // componentWillUnmount if it is deleted.
                  sourceFiber.tag = IncompleteClassComponent;
                } else {
                  // When we try rendering again, we should not reuse the current fiber,
                  // since it's known to be in an inconsistent state. Use a force updte to
                  // prevent a bail out.
                  var update = createUpdate(Sync);
                  update.tag = ForceUpdate;
                  enqueueUpdate(sourceFiber, update);
                }
              } // The source fiber did not complete. Mark it with Sync priority to
              // indicate that it still has pending work.


              sourceFiber.expirationTime = Sync; // Exit without suspending.

              return;
            } // Confirmed that the boundary is in a concurrent mode tree. Continue
            // with the normal suspend path.


            attachPingListener(root, renderExpirationTime, thenable);
            var absoluteTimeoutMs = void 0;

            if (earliestTimeoutMs === -1) {
              // If no explicit threshold is given, default to an arbitrarily large
              // value. The actual size doesn't matter because the threshold for the
              // whole tree will be clamped to the expiration time.
              absoluteTimeoutMs = maxSigned31BitInt;
            } else {
              if (startTimeMs === -1) {
                // This suspend happened outside of any already timed-out
                // placeholders. We don't know exactly when the update was
                // scheduled, but we can infer an approximate start time from the
                // expiration time. First, find the earliest uncommitted expiration
                // time in the tree, including work that is suspended. Then subtract
                // the offset used to compute an async update's expiration time.
                // This will cause high priority (interactive) work to expire
                // earlier than necessary, but we can account for this by adjusting
                // for the Just Noticeable Difference.
                var earliestExpirationTime = findEarliestOutstandingPriorityLevel(root, renderExpirationTime);
                var earliestExpirationTimeMs = expirationTimeToMs(earliestExpirationTime);
                startTimeMs = earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
              }

              absoluteTimeoutMs = startTimeMs + earliestTimeoutMs;
            } // Mark the earliest timeout in the suspended fiber's ancestor path.
            // After completing the root, we'll take the largest of all the
            // suspended fiber's timeouts and use it to compute a timeout for the
            // whole tree.


            renderDidSuspend(root, absoluteTimeoutMs, renderExpirationTime);
            _workInProgress.effectTag |= ShouldCapture;
            _workInProgress.expirationTime = renderExpirationTime;
            return;
          } else if (enableSuspenseServerRenderer && _workInProgress.tag === DehydratedSuspenseComponent) {
            attachPingListener(root, renderExpirationTime, thenable); // Since we already have a current fiber, we can eagerly add a retry listener.

            var retryCache = _workInProgress.memoizedState;

            if (retryCache === null) {
              retryCache = _workInProgress.memoizedState = new PossiblyWeakSet();
              var _current = _workInProgress.alternate;
              !_current ? invariant(false, 'A dehydrated suspense boundary must commit before trying to render. This is probably a bug in React.') : void 0;
              _current.memoizedState = retryCache;
            } // Memoize using the boundary fiber to prevent redundant listeners.


            if (!retryCache.has(thenable)) {
              retryCache.add(thenable);
              var retry = retryTimedOutBoundary.bind(null, _workInProgress, thenable);

              if (enableSchedulerTracing) {
                retry = tracing.unstable_wrap(retry);
              }

              thenable.then(retry, retry);
            }

            _workInProgress.effectTag |= ShouldCapture;
            _workInProgress.expirationTime = renderExpirationTime;
            return;
          } // This boundary already captured during this render. Continue to the next
          // boundary.


          _workInProgress = _workInProgress.return;
        } while (_workInProgress !== null); // No boundary was found. Fallthrough to error mode.
        // TODO: Use invariant so the message is stripped in prod?


        value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.' + getStackByFiberInDevAndProd(sourceFiber));
      } // We didn't find a boundary that could handle this type of exception. Start
      // over and traverse parent path again, this time treating the exception
      // as an error.


      renderDidError();
      value = createCapturedValue(value, sourceFiber);
      var workInProgress = returnFiber;

      do {
        switch (workInProgress.tag) {
          case HostRoot:
            {
              var _errorInfo = value;
              workInProgress.effectTag |= ShouldCapture;
              workInProgress.expirationTime = renderExpirationTime;

              var _update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);

              enqueueCapturedUpdate(workInProgress, _update);
              return;
            }

          case ClassComponent:
            // Capture and retry
            var errorInfo = value;
            var ctor = workInProgress.type;
            var instance = workInProgress.stateNode;

            if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
              workInProgress.effectTag |= ShouldCapture;
              workInProgress.expirationTime = renderExpirationTime; // Schedule the error boundary to re-render using updated state

              var _update2 = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);

              enqueueCapturedUpdate(workInProgress, _update2);
              return;
            }

            break;

          default:
            break;
        }

        workInProgress = workInProgress.return;
      } while (workInProgress !== null);
    }

    function unwindWork(workInProgress, renderExpirationTime) {
      switch (workInProgress.tag) {
        case ClassComponent:
          {
            var Component = workInProgress.type;

            if (isContextProvider(Component)) {
              popContext(workInProgress);
            }

            var effectTag = workInProgress.effectTag;

            if (effectTag & ShouldCapture) {
              workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
              return workInProgress;
            }

            return null;
          }

        case HostRoot:
          {
            popHostContainer(workInProgress);
            popTopLevelContextObject(workInProgress);
            var _effectTag = workInProgress.effectTag;
            !((_effectTag & DidCapture) === NoEffect) ? invariant(false, 'The root failed to unmount after an error. This is likely a bug in React. Please file an issue.') : void 0;
            workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
            return workInProgress;
          }

        case HostComponent:
          {
            // TODO: popHydrationState
            popHostContext(workInProgress);
            return null;
          }

        case SuspenseComponent:
          {
            var _effectTag2 = workInProgress.effectTag;

            if (_effectTag2 & ShouldCapture) {
              workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

              return workInProgress;
            }

            return null;
          }

        case DehydratedSuspenseComponent:
          {
            if (enableSuspenseServerRenderer) {
              // TODO: popHydrationState
              var _effectTag3 = workInProgress.effectTag;

              if (_effectTag3 & ShouldCapture) {
                workInProgress.effectTag = _effectTag3 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

                return workInProgress;
              }
            }

            return null;
          }

        case HostPortal:
          popHostContainer(workInProgress);
          return null;

        case ContextProvider:
          popProvider(workInProgress);
          return null;

        default:
          return null;
      }
    }

    function unwindInterruptedWork(interruptedWork) {
      switch (interruptedWork.tag) {
        case ClassComponent:
          {
            var childContextTypes = interruptedWork.type.childContextTypes;

            if (childContextTypes !== null && childContextTypes !== undefined) {
              popContext(interruptedWork);
            }

            break;
          }

        case HostRoot:
          {
            popHostContainer(interruptedWork);
            popTopLevelContextObject(interruptedWork);
            break;
          }

        case HostComponent:
          {
            popHostContext(interruptedWork);
            break;
          }

        case HostPortal:
          popHostContainer(interruptedWork);
          break;

        case ContextProvider:
          popProvider(interruptedWork);
          break;

        default:
          break;
      }
    }

    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
    var ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner;
    var didWarnAboutStateTransition = void 0;
    var didWarnSetStateChildContext = void 0;
    var warnAboutUpdateOnUnmounted = void 0;
    var warnAboutInvalidUpdates = void 0;

    if (enableSchedulerTracing) {
      // Provide explicit error message when production+profiling bundle of e.g. react-dom
      // is used with production (non-profiling) bundle of scheduler/tracing
      !(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null) ? invariant(false, 'It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling') : void 0;
    }

    {
      didWarnAboutStateTransition = false;
      didWarnSetStateChildContext = false;
      var didWarnStateUpdateForUnmountedComponent = {};

      warnAboutUpdateOnUnmounted = function (fiber, isClass) {
        // We show the whole stack but dedupe on the top component's name because
        // the problematic code almost always lies inside that component.
        var componentName = getComponentName(fiber.type) || 'ReactComponent';

        if (didWarnStateUpdateForUnmountedComponent[componentName]) {
          return;
        }

        warningWithoutStack$1(false, "Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.%s', isClass ? 'the componentWillUnmount method' : 'a useEffect cleanup function', getStackByFiberInDevAndProd(fiber));
        didWarnStateUpdateForUnmountedComponent[componentName] = true;
      };

      warnAboutInvalidUpdates = function (instance) {
        switch (phase) {
          case 'getChildContext':
            if (didWarnSetStateChildContext) {
              return;
            }

            warningWithoutStack$1(false, 'setState(...): Cannot call setState() inside getChildContext()');
            didWarnSetStateChildContext = true;
            break;

          case 'render':
            if (didWarnAboutStateTransition) {
              return;
            }

            warningWithoutStack$1(false, 'Cannot update during an existing state transition (such as within ' + '`render`). Render methods should be a pure function of props and state.');
            didWarnAboutStateTransition = true;
            break;
        }
      };
    } // Used to ensure computeUniqueAsyncExpiration is monotonically decreasing.

    var lastUniqueAsyncExpiration = Sync - 1;
    var isWorking = false; // The next work in progress fiber that we're currently working on.

    var nextUnitOfWork = null;
    var nextRoot = null; // The time at which we're currently rendering work.

    var nextRenderExpirationTime = NoWork;
    var nextLatestAbsoluteTimeoutMs = -1;
    var nextRenderDidError = false; // The next fiber with an effect that we're currently committing.

    var nextEffect = null;
    var isCommitting$1 = false;
    var rootWithPendingPassiveEffects = null;
    var passiveEffectCallbackHandle = null;
    var passiveEffectCallback = null;
    var legacyErrorBoundariesThatAlreadyFailed = null; // Used for performance tracking.

    var interruptedBy = null;
    var stashedWorkInProgressProperties = void 0;
    var replayUnitOfWork = void 0;
    var mayReplayFailedUnitOfWork = void 0;
    var isReplayingFailedUnitOfWork = void 0;
    var originalReplayError = void 0;
    var rethrowOriginalError = void 0;

    if ( true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
      stashedWorkInProgressProperties = null;
      mayReplayFailedUnitOfWork = true;
      isReplayingFailedUnitOfWork = false;
      originalReplayError = null;

      replayUnitOfWork = function (failedUnitOfWork, thrownValue, isYieldy) {
        if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {
          // Don't replay promises. Treat everything else like an error.
          // TODO: Need to figure out a different strategy if/when we add
          // support for catching other types.
          return;
        } // Restore the original state of the work-in-progress


        if (stashedWorkInProgressProperties === null) {
          // This should never happen. Don't throw because this code is DEV-only.
          warningWithoutStack$1(false, 'Could not replay rendering after an error. This is likely a bug in React. ' + 'Please file an issue.');
          return;
        }

        assignFiberPropertiesInDEV(failedUnitOfWork, stashedWorkInProgressProperties);

        switch (failedUnitOfWork.tag) {
          case HostRoot:
            popHostContainer(failedUnitOfWork);
            popTopLevelContextObject(failedUnitOfWork);
            break;

          case HostComponent:
            popHostContext(failedUnitOfWork);
            break;

          case ClassComponent:
            {
              var Component = failedUnitOfWork.type;

              if (isContextProvider(Component)) {
                popContext(failedUnitOfWork);
              }

              break;
            }

          case HostPortal:
            popHostContainer(failedUnitOfWork);
            break;

          case ContextProvider:
            popProvider(failedUnitOfWork);
            break;
        } // Replay the begin phase.


        isReplayingFailedUnitOfWork = true;
        originalReplayError = thrownValue;
        invokeGuardedCallback(null, workLoop, null, isYieldy);
        isReplayingFailedUnitOfWork = false;
        originalReplayError = null;

        if (hasCaughtError()) {
          var replayError = clearCaughtError();

          if (replayError != null && thrownValue != null) {
            try {
              // Reading the expando property is intentionally
              // inside `try` because it might be a getter or Proxy.
              if (replayError._suppressLogging) {
                // Also suppress logging for the original error.
                thrownValue._suppressLogging = true;
              }
            } catch (inner) {// Ignore.
            }
          }
        } else {
          // If the begin phase did not fail the second time, set this pointer
          // back to the original value.
          nextUnitOfWork = failedUnitOfWork;
        }
      };

      rethrowOriginalError = function () {
        throw originalReplayError;
      };
    }

    function resetStack() {
      if (nextUnitOfWork !== null) {
        var interruptedWork = nextUnitOfWork.return;

        while (interruptedWork !== null) {
          unwindInterruptedWork(interruptedWork);
          interruptedWork = interruptedWork.return;
        }
      }

      {
        ReactStrictModeWarnings.discardPendingWarnings();
        checkThatStackIsEmpty();
      }
      nextRoot = null;
      nextRenderExpirationTime = NoWork;
      nextLatestAbsoluteTimeoutMs = -1;
      nextRenderDidError = false;
      nextUnitOfWork = null;
    }

    function commitAllHostEffects() {
      while (nextEffect !== null) {
        {
          setCurrentFiber(nextEffect);
        }
        recordEffect();
        var effectTag = nextEffect.effectTag;

        if (effectTag & ContentReset) {
          commitResetTextContent(nextEffect);
        }

        if (effectTag & Ref) {
          var current$$1 = nextEffect.alternate;

          if (current$$1 !== null) {
            commitDetachRef(current$$1);
          }
        } // The following switch statement is only concerned about placement,
        // updates, and deletions. To avoid needing to add a case for every
        // possible bitmap value, we remove the secondary effects from the
        // effect tag and switch on that value.


        var primaryEffectTag = effectTag & (Placement | Update | Deletion);

        switch (primaryEffectTag) {
          case Placement:
            {
              commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is inserted, before
              // any life-cycles like componentDidMount gets called.
              // TODO: findDOMNode doesn't rely on this any more but isMounted
              // does and isMounted is deprecated anyway so we should be able
              // to kill this.

              nextEffect.effectTag &= ~Placement;
              break;
            }

          case PlacementAndUpdate:
            {
              // Placement
              commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is inserted, before
              // any life-cycles like componentDidMount gets called.

              nextEffect.effectTag &= ~Placement; // Update

              var _current = nextEffect.alternate;
              commitWork(_current, nextEffect);
              break;
            }

          case Update:
            {
              var _current2 = nextEffect.alternate;
              commitWork(_current2, nextEffect);
              break;
            }

          case Deletion:
            {
              commitDeletion(nextEffect);
              break;
            }
        }

        nextEffect = nextEffect.nextEffect;
      }

      {
        resetCurrentFiber();
      }
    }

    function commitBeforeMutationLifecycles() {
      while (nextEffect !== null) {
        {
          setCurrentFiber(nextEffect);
        }
        var effectTag = nextEffect.effectTag;

        if (effectTag & Snapshot) {
          recordEffect();
          var current$$1 = nextEffect.alternate;
          commitBeforeMutationLifeCycles(current$$1, nextEffect);
        }

        nextEffect = nextEffect.nextEffect;
      }

      {
        resetCurrentFiber();
      }
    }

    function commitAllLifeCycles(finishedRoot, committedExpirationTime) {
      {
        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
        ReactStrictModeWarnings.flushLegacyContextWarning();

        if (warnAboutDeprecatedLifecycles) {
          ReactStrictModeWarnings.flushPendingDeprecationWarnings();
        }
      }

      while (nextEffect !== null) {
        {
          setCurrentFiber(nextEffect);
        }
        var effectTag = nextEffect.effectTag;

        if (effectTag & (Update | Callback)) {
          recordEffect();
          var current$$1 = nextEffect.alternate;
          commitLifeCycles(finishedRoot, current$$1, nextEffect, committedExpirationTime);
        }

        if (effectTag & Ref) {
          recordEffect();
          commitAttachRef(nextEffect);
        }

        if (effectTag & Passive) {
          rootWithPendingPassiveEffects = finishedRoot;
        }

        nextEffect = nextEffect.nextEffect;
      }

      {
        resetCurrentFiber();
      }
    }

    function commitPassiveEffects(root, firstEffect) {
      rootWithPendingPassiveEffects = null;
      passiveEffectCallbackHandle = null;
      passiveEffectCallback = null; // Set this to true to prevent re-entrancy

      var previousIsRendering = isRendering;
      isRendering = true;
      var effect = firstEffect;

      do {
        {
          setCurrentFiber(effect);
        }

        if (effect.effectTag & Passive) {
          var didError = false;
          var error = void 0;
          {
            invokeGuardedCallback(null, commitPassiveHookEffects, null, effect);

            if (hasCaughtError()) {
              didError = true;
              error = clearCaughtError();
            }
          }

          if (didError) {
            captureCommitPhaseError(effect, error);
          }
        }

        effect = effect.nextEffect;
      } while (effect !== null);

      {
        resetCurrentFiber();
      }
      isRendering = previousIsRendering; // Check if work was scheduled by one of the effects

      var rootExpirationTime = root.expirationTime;

      if (rootExpirationTime !== NoWork) {
        requestWork(root, rootExpirationTime);
      } // Flush any sync work that was scheduled by effects


      if (!isBatchingUpdates && !isRendering) {
        performSyncWork();
      }
    }

    function isAlreadyFailedLegacyErrorBoundary(instance) {
      return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
    }

    function markLegacyErrorBoundaryAsFailed(instance) {
      if (legacyErrorBoundariesThatAlreadyFailed === null) {
        legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
      } else {
        legacyErrorBoundariesThatAlreadyFailed.add(instance);
      }
    }

    function flushPassiveEffects() {
      if (passiveEffectCallbackHandle !== null) {
        cancelPassiveEffects(passiveEffectCallbackHandle);
      }

      if (passiveEffectCallback !== null) {
        // We call the scheduled callback instead of commitPassiveEffects directly
        // to ensure tracing works correctly.
        passiveEffectCallback();
      }
    }

    function commitRoot(root, finishedWork) {
      isWorking = true;
      isCommitting$1 = true;
      startCommitTimer();
      !(root.current !== finishedWork) ? invariant(false, 'Cannot commit the same tree as before. This is probably a bug related to the return field. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      var committedExpirationTime = root.pendingCommitExpirationTime;
      !(committedExpirationTime !== NoWork) ? invariant(false, 'Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      root.pendingCommitExpirationTime = NoWork; // Update the pending priority levels to account for the work that we are
      // about to commit. This needs to happen before calling the lifecycles, since
      // they may schedule additional updates.

      var updateExpirationTimeBeforeCommit = finishedWork.expirationTime;
      var childExpirationTimeBeforeCommit = finishedWork.childExpirationTime;
      var earliestRemainingTimeBeforeCommit = childExpirationTimeBeforeCommit > updateExpirationTimeBeforeCommit ? childExpirationTimeBeforeCommit : updateExpirationTimeBeforeCommit;
      markCommittedPriorityLevels(root, earliestRemainingTimeBeforeCommit);
      var prevInteractions = null;

      if (enableSchedulerTracing) {
        // Restore any pending interactions at this point,
        // So that cascading work triggered during the render phase will be accounted for.
        prevInteractions = tracing.__interactionsRef.current;
        tracing.__interactionsRef.current = root.memoizedInteractions;
      } // Reset this to null before calling lifecycles


      ReactCurrentOwner$2.current = null;
      var firstEffect = void 0;

      if (finishedWork.effectTag > PerformedWork) {
        // A fiber's effect list consists only of its children, not itself. So if
        // the root has an effect, we need to add it to the end of the list. The
        // resulting list is the set that would belong to the root's parent, if
        // it had one; that is, all the effects in the tree including the root.
        if (finishedWork.lastEffect !== null) {
          finishedWork.lastEffect.nextEffect = finishedWork;
          firstEffect = finishedWork.firstEffect;
        } else {
          firstEffect = finishedWork;
        }
      } else {
        // There is no effect on the root.
        firstEffect = finishedWork.firstEffect;
      }

      prepareForCommit(root.containerInfo); // Invoke instances of getSnapshotBeforeUpdate before mutation.

      nextEffect = firstEffect;
      startCommitSnapshotEffectsTimer();

      while (nextEffect !== null) {
        var didError = false;
        var error = void 0;
        {
          invokeGuardedCallback(null, commitBeforeMutationLifecycles, null);

          if (hasCaughtError()) {
            didError = true;
            error = clearCaughtError();
          }
        }

        if (didError) {
          !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          captureCommitPhaseError(nextEffect, error); // Clean-up

          if (nextEffect !== null) {
            nextEffect = nextEffect.nextEffect;
          }
        }
      }

      stopCommitSnapshotEffectsTimer();

      if (enableProfilerTimer) {
        // Mark the current commit time to be shared by all Profilers in this batch.
        // This enables them to be grouped later.
        recordCommitTime();
      } // Commit all the side-effects within a tree. We'll do this in two passes.
      // The first pass performs all the host insertions, updates, deletions and
      // ref unmounts.


      nextEffect = firstEffect;
      startCommitHostEffectsTimer();

      while (nextEffect !== null) {
        var _didError = false;

        var _error = void 0;

        {
          invokeGuardedCallback(null, commitAllHostEffects, null);

          if (hasCaughtError()) {
            _didError = true;
            _error = clearCaughtError();
          }
        }

        if (_didError) {
          !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          captureCommitPhaseError(nextEffect, _error); // Clean-up

          if (nextEffect !== null) {
            nextEffect = nextEffect.nextEffect;
          }
        }
      }

      stopCommitHostEffectsTimer();
      resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
      // the first pass of the commit phase, so that the previous tree is still
      // current during componentWillUnmount, but before the second pass, so that
      // the finished work is current during componentDidMount/Update.

      root.current = finishedWork; // In the second pass we'll perform all life-cycles and ref callbacks.
      // Life-cycles happen as a separate pass so that all placements, updates,
      // and deletions in the entire tree have already been invoked.
      // This pass also triggers any renderer-specific initial effects.

      nextEffect = firstEffect;
      startCommitLifeCyclesTimer();

      while (nextEffect !== null) {
        var _didError2 = false;

        var _error2 = void 0;

        {
          invokeGuardedCallback(null, commitAllLifeCycles, null, root, committedExpirationTime);

          if (hasCaughtError()) {
            _didError2 = true;
            _error2 = clearCaughtError();
          }
        }

        if (_didError2) {
          !(nextEffect !== null) ? invariant(false, 'Should have next effect. This error is likely caused by a bug in React. Please file an issue.') : void 0;
          captureCommitPhaseError(nextEffect, _error2);

          if (nextEffect !== null) {
            nextEffect = nextEffect.nextEffect;
          }
        }
      }

      if (firstEffect !== null && rootWithPendingPassiveEffects !== null) {
        // This commit included a passive effect. These do not need to fire until
        // after the next paint. Schedule an callback to fire them in an async
        // event. To ensure serial execution, the callback will be flushed early if
        // we enter rootWithPendingPassiveEffects commit phase before then.
        var callback = commitPassiveEffects.bind(null, root, firstEffect);

        if (enableSchedulerTracing) {
          // TODO: Avoid this extra callback by mutating the tracing ref directly,
          // like we do at the beginning of commitRoot. I've opted not to do that
          // here because that code is still in flux.
          callback = tracing.unstable_wrap(callback);
        }

        passiveEffectCallbackHandle = scheduler.unstable_runWithPriority(scheduler.unstable_NormalPriority, function () {
          return schedulePassiveEffects(callback);
        });
        passiveEffectCallback = callback;
      }

      isCommitting$1 = false;
      isWorking = false;
      stopCommitLifeCyclesTimer();
      stopCommitTimer();
      onCommitRoot(finishedWork.stateNode);

      if ( true && ReactFiberInstrumentation_1.debugTool) {
        ReactFiberInstrumentation_1.debugTool.onCommitWork(finishedWork);
      }

      var updateExpirationTimeAfterCommit = finishedWork.expirationTime;
      var childExpirationTimeAfterCommit = finishedWork.childExpirationTime;
      var earliestRemainingTimeAfterCommit = childExpirationTimeAfterCommit > updateExpirationTimeAfterCommit ? childExpirationTimeAfterCommit : updateExpirationTimeAfterCommit;

      if (earliestRemainingTimeAfterCommit === NoWork) {
        // If there's no remaining work, we can clear the set of already failed
        // error boundaries.
        legacyErrorBoundariesThatAlreadyFailed = null;
      }

      onCommit(root, earliestRemainingTimeAfterCommit);

      if (enableSchedulerTracing) {
        tracing.__interactionsRef.current = prevInteractions;
        var subscriber = void 0;

        try {
          subscriber = tracing.__subscriberRef.current;

          if (subscriber !== null && root.memoizedInteractions.size > 0) {
            var threadID = computeThreadID(committedExpirationTime, root.interactionThreadID);
            subscriber.onWorkStopped(root.memoizedInteractions, threadID);
          }
        } catch (error) {
          // It's not safe for commitRoot() to throw.
          // Store the error for now and we'll re-throw in finishRendering().
          if (!hasUnhandledError) {
            hasUnhandledError = true;
            unhandledError = error;
          }
        } finally {
          // Clear completed interactions from the pending Map.
          // Unless the render was suspended or cascading work was scheduled,
          // In which case– leave pending interactions until the subsequent render.
          var pendingInteractionMap = root.pendingInteractionMap;
          pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
            // Only decrement the pending interaction count if we're done.
            // If there's still work at the current priority,
            // That indicates that we are waiting for suspense data.
            if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
              pendingInteractionMap.delete(scheduledExpirationTime);
              scheduledInteractions.forEach(function (interaction) {
                interaction.__count--;

                if (subscriber !== null && interaction.__count === 0) {
                  try {
                    subscriber.onInteractionScheduledWorkCompleted(interaction);
                  } catch (error) {
                    // It's not safe for commitRoot() to throw.
                    // Store the error for now and we'll re-throw in finishRendering().
                    if (!hasUnhandledError) {
                      hasUnhandledError = true;
                      unhandledError = error;
                    }
                  }
                }
              });
            }
          });
        }
      }
    }

    function resetChildExpirationTime(workInProgress, renderTime) {
      if (renderTime !== Never && workInProgress.childExpirationTime === Never) {
        // The children of this component are hidden. Don't bubble their
        // expiration times.
        return;
      }

      var newChildExpirationTime = NoWork; // Bubble up the earliest expiration time.

      if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
        // We're in profiling mode.
        // Let's use this same traversal to update the render durations.
        var actualDuration = workInProgress.actualDuration;
        var treeBaseDuration = workInProgress.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0.
        // This value will only be updated if work is done on the fiber (i.e. it doesn't bailout).
        // When work is done, it should bubble to the parent's actualDuration.
        // If the fiber has not been cloned though, (meaning no work was done),
        // Then this value will reflect the amount of time spent working on a previous render.
        // In that case it should not bubble.
        // We determine whether it was cloned by comparing the child pointer.

        var shouldBubbleActualDurations = workInProgress.alternate === null || workInProgress.child !== workInProgress.alternate.child;
        var child = workInProgress.child;

        while (child !== null) {
          var childUpdateExpirationTime = child.expirationTime;
          var childChildExpirationTime = child.childExpirationTime;

          if (childUpdateExpirationTime > newChildExpirationTime) {
            newChildExpirationTime = childUpdateExpirationTime;
          }

          if (childChildExpirationTime > newChildExpirationTime) {
            newChildExpirationTime = childChildExpirationTime;
          }

          if (shouldBubbleActualDurations) {
            actualDuration += child.actualDuration;
          }

          treeBaseDuration += child.treeBaseDuration;
          child = child.sibling;
        }

        workInProgress.actualDuration = actualDuration;
        workInProgress.treeBaseDuration = treeBaseDuration;
      } else {
        var _child = workInProgress.child;

        while (_child !== null) {
          var _childUpdateExpirationTime = _child.expirationTime;
          var _childChildExpirationTime = _child.childExpirationTime;

          if (_childUpdateExpirationTime > newChildExpirationTime) {
            newChildExpirationTime = _childUpdateExpirationTime;
          }

          if (_childChildExpirationTime > newChildExpirationTime) {
            newChildExpirationTime = _childChildExpirationTime;
          }

          _child = _child.sibling;
        }
      }

      workInProgress.childExpirationTime = newChildExpirationTime;
    }

    function completeUnitOfWork(workInProgress) {
      // Attempt to complete the current unit of work, then move to the
      // next sibling. If there are no more siblings, return to the
      // parent fiber.
      while (true) {
        // The current, flushed, state of this fiber is the alternate.
        // Ideally nothing should rely on this, but relying on it here
        // means that we don't need an additional field on the work in
        // progress.
        var current$$1 = workInProgress.alternate;
        {
          setCurrentFiber(workInProgress);
        }
        var returnFiber = workInProgress.return;
        var siblingFiber = workInProgress.sibling;

        if ((workInProgress.effectTag & Incomplete) === NoEffect) {
          if ( true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
            // Don't replay if it fails during completion phase.
            mayReplayFailedUnitOfWork = false;
          } // This fiber completed.
          // Remember we're completing this unit so we can find a boundary if it fails.


          nextUnitOfWork = workInProgress;

          if (enableProfilerTimer) {
            if (workInProgress.mode & ProfileMode) {
              startProfilerTimer(workInProgress);
            }

            nextUnitOfWork = completeWork(current$$1, workInProgress, nextRenderExpirationTime);

            if (workInProgress.mode & ProfileMode) {
              // Update render duration assuming we didn't error.
              stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
            }
          } else {
            nextUnitOfWork = completeWork(current$$1, workInProgress, nextRenderExpirationTime);
          }

          if ( true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
            // We're out of completion phase so replaying is fine now.
            mayReplayFailedUnitOfWork = true;
          }

          stopWorkTimer(workInProgress);
          resetChildExpirationTime(workInProgress, nextRenderExpirationTime);
          {
            resetCurrentFiber();
          }

          if (nextUnitOfWork !== null) {
            // Completing this fiber spawned new work. Work on that next.
            return nextUnitOfWork;
          }

          if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
          (returnFiber.effectTag & Incomplete) === NoEffect) {
            // Append all the effects of the subtree and this fiber onto the effect
            // list of the parent. The completion order of the children affects the
            // side-effect order.
            if (returnFiber.firstEffect === null) {
              returnFiber.firstEffect = workInProgress.firstEffect;
            }

            if (workInProgress.lastEffect !== null) {
              if (returnFiber.lastEffect !== null) {
                returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
              }

              returnFiber.lastEffect = workInProgress.lastEffect;
            } // If this fiber had side-effects, we append it AFTER the children's
            // side-effects. We can perform certain side-effects earlier if
            // needed, by doing multiple passes over the effect list. We don't want
            // to schedule our own side-effect on our own list because if end up
            // reusing children we'll schedule this effect onto itself since we're
            // at the end.


            var effectTag = workInProgress.effectTag; // Skip both NoWork and PerformedWork tags when creating the effect list.
            // PerformedWork effect is read by React DevTools but shouldn't be committed.

            if (effectTag > PerformedWork) {
              if (returnFiber.lastEffect !== null) {
                returnFiber.lastEffect.nextEffect = workInProgress;
              } else {
                returnFiber.firstEffect = workInProgress;
              }

              returnFiber.lastEffect = workInProgress;
            }
          }

          if ( true && ReactFiberInstrumentation_1.debugTool) {
            ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
          }

          if (siblingFiber !== null) {
            // If there is more work to do in this returnFiber, do that next.
            return siblingFiber;
          } else if (returnFiber !== null) {
            // If there's no more work in this returnFiber. Complete the returnFiber.
            workInProgress = returnFiber;
            continue;
          } else {
            // We've reached the root.
            return null;
          }
        } else {
          if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
            // Record the render duration for the fiber that errored.
            stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false); // Include the time spent working on failed children before continuing.

            var actualDuration = workInProgress.actualDuration;
            var child = workInProgress.child;

            while (child !== null) {
              actualDuration += child.actualDuration;
              child = child.sibling;
            }

            workInProgress.actualDuration = actualDuration;
          } // This fiber did not complete because something threw. Pop values off
          // the stack without entering the complete phase. If this is a boundary,
          // capture values if possible.


          var next = unwindWork(workInProgress, nextRenderExpirationTime); // Because this fiber did not complete, don't reset its expiration time.

          if (workInProgress.effectTag & DidCapture) {
            // Restarting an error boundary
            stopFailedWorkTimer(workInProgress);
          } else {
            stopWorkTimer(workInProgress);
          }

          {
            resetCurrentFiber();
          }

          if (next !== null) {
            stopWorkTimer(workInProgress);

            if ( true && ReactFiberInstrumentation_1.debugTool) {
              ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
            } // If completing this work spawned new work, do that next. We'll come
            // back here again.
            // Since we're restarting, remove anything that is not a host effect
            // from the effect tag.


            next.effectTag &= HostEffectMask;
            return next;
          }

          if (returnFiber !== null) {
            // Mark the parent fiber as incomplete and clear its effect list.
            returnFiber.firstEffect = returnFiber.lastEffect = null;
            returnFiber.effectTag |= Incomplete;
          }

          if ( true && ReactFiberInstrumentation_1.debugTool) {
            ReactFiberInstrumentation_1.debugTool.onCompleteWork(workInProgress);
          }

          if (siblingFiber !== null) {
            // If there is more work to do in this returnFiber, do that next.
            return siblingFiber;
          } else if (returnFiber !== null) {
            // If there's no more work in this returnFiber. Complete the returnFiber.
            workInProgress = returnFiber;
            continue;
          } else {
            return null;
          }
        }
      } // Without this explicit null return Flow complains of invalid return type
      // TODO Remove the above while(true) loop
      // eslint-disable-next-line no-unreachable


      return null;
    }

    function performUnitOfWork(workInProgress) {
      // The current, flushed, state of this fiber is the alternate.
      // Ideally nothing should rely on this, but relying on it here
      // means that we don't need an additional field on the work in
      // progress.
      var current$$1 = workInProgress.alternate; // See if beginning this work spawns more work.

      startWorkTimer(workInProgress);
      {
        setCurrentFiber(workInProgress);
      }

      if ( true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
        stashedWorkInProgressProperties = assignFiberPropertiesInDEV(stashedWorkInProgressProperties, workInProgress);
      }

      var next = void 0;

      if (enableProfilerTimer) {
        if (workInProgress.mode & ProfileMode) {
          startProfilerTimer(workInProgress);
        }

        next = beginWork(current$$1, workInProgress, nextRenderExpirationTime);
        workInProgress.memoizedProps = workInProgress.pendingProps;

        if (workInProgress.mode & ProfileMode) {
          // Record the render duration assuming we didn't bailout (or error).
          stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
        }
      } else {
        next = beginWork(current$$1, workInProgress, nextRenderExpirationTime);
        workInProgress.memoizedProps = workInProgress.pendingProps;
      }

      {
        resetCurrentFiber();

        if (isReplayingFailedUnitOfWork) {
          // Currently replaying a failed unit of work. This should be unreachable,
          // because the render phase is meant to be idempotent, and it should
          // have thrown again. Since it didn't, rethrow the original error, so
          // React's internal stack is not misaligned.
          rethrowOriginalError();
        }
      }

      if ( true && ReactFiberInstrumentation_1.debugTool) {
        ReactFiberInstrumentation_1.debugTool.onBeginWork(workInProgress);
      }

      if (next === null) {
        // If this doesn't spawn new work, complete the current work.
        next = completeUnitOfWork(workInProgress);
      }

      ReactCurrentOwner$2.current = null;
      return next;
    }

    function workLoop(isYieldy) {
      if (!isYieldy) {
        // Flush work without yielding
        while (nextUnitOfWork !== null) {
          nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
        }
      } else {
        // Flush asynchronous work until there's a higher priority event
        while (nextUnitOfWork !== null && !shouldYieldToRenderer()) {
          nextUnitOfWork = performUnitOfWork(nextUnitOfWork);
        }
      }
    }

    function renderRoot(root, isYieldy) {
      !!isWorking ? invariant(false, 'renderRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      flushPassiveEffects();
      isWorking = true;
      var previousDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = ContextOnlyDispatcher;
      var expirationTime = root.nextExpirationTimeToWorkOn; // Check if we're starting from a fresh stack, or if we're resuming from
      // previously yielded work.

      if (expirationTime !== nextRenderExpirationTime || root !== nextRoot || nextUnitOfWork === null) {
        // Reset the stack and start working from the root.
        resetStack();
        nextRoot = root;
        nextRenderExpirationTime = expirationTime;
        nextUnitOfWork = createWorkInProgress(nextRoot.current, null, nextRenderExpirationTime);
        root.pendingCommitExpirationTime = NoWork;

        if (enableSchedulerTracing) {
          // Determine which interactions this batch of work currently includes,
          // So that we can accurately attribute time spent working on it,
          var interactions = new Set();
          root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
            if (scheduledExpirationTime >= expirationTime) {
              scheduledInteractions.forEach(function (interaction) {
                return interactions.add(interaction);
              });
            }
          }); // Store the current set of interactions on the FiberRoot for a few reasons:
          // We can re-use it in hot functions like renderRoot() without having to recalculate it.
          // We will also use it in commitWork() to pass to any Profiler onRender() hooks.
          // This also provides DevTools with a way to access it when the onCommitRoot() hook is called.

          root.memoizedInteractions = interactions;

          if (interactions.size > 0) {
            var subscriber = tracing.__subscriberRef.current;

            if (subscriber !== null) {
              var threadID = computeThreadID(expirationTime, root.interactionThreadID);

              try {
                subscriber.onWorkStarted(interactions, threadID);
              } catch (error) {
                // Work thrown by an interaction tracing subscriber should be rethrown,
                // But only once it's safe (to avoid leaving the scheduler in an invalid state).
                // Store the error for now and we'll re-throw in finishRendering().
                if (!hasUnhandledError) {
                  hasUnhandledError = true;
                  unhandledError = error;
                }
              }
            }
          }
        }
      }

      var prevInteractions = null;

      if (enableSchedulerTracing) {
        // We're about to start new traced work.
        // Restore pending interactions so cascading work triggered during the render phase will be accounted for.
        prevInteractions = tracing.__interactionsRef.current;
        tracing.__interactionsRef.current = root.memoizedInteractions;
      }

      var didFatal = false;
      startWorkLoopTimer(nextUnitOfWork);

      do {
        try {
          workLoop(isYieldy);
        } catch (thrownValue) {
          resetContextDependences();
          resetHooks(); // Reset in case completion throws.
          // This is only used in DEV and when replaying is on.

          var mayReplay = void 0;

          if ( true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
            mayReplay = mayReplayFailedUnitOfWork;
            mayReplayFailedUnitOfWork = true;
          }

          if (nextUnitOfWork === null) {
            // This is a fatal error.
            didFatal = true;
            onUncaughtError(thrownValue);
          } else {
            if (enableProfilerTimer && nextUnitOfWork.mode & ProfileMode) {
              // Record the time spent rendering before an error was thrown.
              // This avoids inaccurate Profiler durations in the case of a suspended render.
              stopProfilerTimerIfRunningAndRecordDelta(nextUnitOfWork, true);
            }

            {
              // Reset global debug state
              // We assume this is defined in DEV
              resetCurrentlyProcessingQueue();
            }

            if ( true && replayFailedUnitOfWorkWithInvokeGuardedCallback) {
              if (mayReplay) {
                var failedUnitOfWork = nextUnitOfWork;
                replayUnitOfWork(failedUnitOfWork, thrownValue, isYieldy);
              }
            } // TODO: we already know this isn't true in some cases.
            // At least this shows a nicer error message until we figure out the cause.
            // https://github.com/facebook/react/issues/12449#issuecomment-386727431


            !(nextUnitOfWork !== null) ? invariant(false, 'Failed to replay rendering after an error. This is likely caused by a bug in React. Please file an issue with a reproducing case to help us find it.') : void 0;
            var sourceFiber = nextUnitOfWork;
            var returnFiber = sourceFiber.return;

            if (returnFiber === null) {
              // This is the root. The root could capture its own errors. However,
              // we don't know if it errors before or after we pushed the host
              // context. This information is needed to avoid a stack mismatch.
              // Because we're not sure, treat this as a fatal error. We could track
              // which phase it fails in, but doesn't seem worth it. At least
              // for now.
              didFatal = true;
              onUncaughtError(thrownValue);
            } else {
              throwException(root, returnFiber, sourceFiber, thrownValue, nextRenderExpirationTime);
              nextUnitOfWork = completeUnitOfWork(sourceFiber);
              continue;
            }
          }
        }

        break;
      } while (true);

      if (enableSchedulerTracing) {
        // Traced work is done for now; restore the previous interactions.
        tracing.__interactionsRef.current = prevInteractions;
      } // We're done performing work. Time to clean up.


      isWorking = false;
      ReactCurrentDispatcher.current = previousDispatcher;
      resetContextDependences();
      resetHooks(); // Yield back to main thread.

      if (didFatal) {
        var _didCompleteRoot = false;
        stopWorkLoopTimer(interruptedBy, _didCompleteRoot);
        interruptedBy = null; // There was a fatal error.

        {
          resetStackAfterFatalErrorInDev();
        } // `nextRoot` points to the in-progress root. A non-null value indicates
        // that we're in the middle of an async render. Set it to null to indicate
        // there's no more work to be done in the current batch.

        nextRoot = null;
        onFatal(root);
        return;
      }

      if (nextUnitOfWork !== null) {
        // There's still remaining async work in this tree, but we ran out of time
        // in the current frame. Yield back to the renderer. Unless we're
        // interrupted by a higher priority update, we'll continue later from where
        // we left off.
        var _didCompleteRoot2 = false;
        stopWorkLoopTimer(interruptedBy, _didCompleteRoot2);
        interruptedBy = null;
        onYield(root);
        return;
      } // We completed the whole tree.


      var didCompleteRoot = true;
      stopWorkLoopTimer(interruptedBy, didCompleteRoot);
      var rootWorkInProgress = root.current.alternate;
      !(rootWorkInProgress !== null) ? invariant(false, 'Finished root should have a work-in-progress. This error is likely caused by a bug in React. Please file an issue.') : void 0; // `nextRoot` points to the in-progress root. A non-null value indicates
      // that we're in the middle of an async render. Set it to null to indicate
      // there's no more work to be done in the current batch.

      nextRoot = null;
      interruptedBy = null;

      if (nextRenderDidError) {
        // There was an error
        if (hasLowerPriorityWork(root, expirationTime)) {
          // There's lower priority work. If so, it may have the effect of fixing
          // the exception that was just thrown. Exit without committing. This is
          // similar to a suspend, but without a timeout because we're not waiting
          // for a promise to resolve. React will restart at the lower
          // priority level.
          markSuspendedPriorityLevel(root, expirationTime);
          var suspendedExpirationTime = expirationTime;
          var rootExpirationTime = root.expirationTime;
          onSuspend(root, rootWorkInProgress, suspendedExpirationTime, rootExpirationTime, -1 // Indicates no timeout
          );
          return;
        } else if ( // There's no lower priority work, but we're rendering asynchronously.
        // Synchronously attempt to render the same level one more time. This is
        // similar to a suspend, but without a timeout because we're not waiting
        // for a promise to resolve.
        !root.didError && isYieldy) {
          root.didError = true;

          var _suspendedExpirationTime = root.nextExpirationTimeToWorkOn = expirationTime;

          var _rootExpirationTime = root.expirationTime = Sync;

          onSuspend(root, rootWorkInProgress, _suspendedExpirationTime, _rootExpirationTime, -1 // Indicates no timeout
          );
          return;
        }
      }

      if (isYieldy && nextLatestAbsoluteTimeoutMs !== -1) {
        // The tree was suspended.
        var _suspendedExpirationTime2 = expirationTime;
        markSuspendedPriorityLevel(root, _suspendedExpirationTime2); // Find the earliest uncommitted expiration time in the tree, including
        // work that is suspended. The timeout threshold cannot be longer than
        // the overall expiration.

        var earliestExpirationTime = findEarliestOutstandingPriorityLevel(root, expirationTime);
        var earliestExpirationTimeMs = expirationTimeToMs(earliestExpirationTime);

        if (earliestExpirationTimeMs < nextLatestAbsoluteTimeoutMs) {
          nextLatestAbsoluteTimeoutMs = earliestExpirationTimeMs;
        } // Subtract the current time from the absolute timeout to get the number
        // of milliseconds until the timeout. In other words, convert an absolute
        // timestamp to a relative time. This is the value that is passed
        // to `setTimeout`.


        var currentTimeMs = expirationTimeToMs(requestCurrentTime());
        var msUntilTimeout = nextLatestAbsoluteTimeoutMs - currentTimeMs;
        msUntilTimeout = msUntilTimeout < 0 ? 0 : msUntilTimeout; // TODO: Account for the Just Noticeable Difference

        var _rootExpirationTime2 = root.expirationTime;
        onSuspend(root, rootWorkInProgress, _suspendedExpirationTime2, _rootExpirationTime2, msUntilTimeout);
        return;
      } // Ready to commit.


      onComplete(root, rootWorkInProgress, expirationTime);
    }

    function captureCommitPhaseError(sourceFiber, value) {
      var expirationTime = Sync;
      var fiber = sourceFiber.return;

      while (fiber !== null) {
        switch (fiber.tag) {
          case ClassComponent:
            var ctor = fiber.type;
            var instance = fiber.stateNode;

            if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
              var errorInfo = createCapturedValue(value, sourceFiber);
              var update = createClassErrorUpdate(fiber, errorInfo, expirationTime);
              enqueueUpdate(fiber, update);
              scheduleWork(fiber, expirationTime);
              return;
            }

            break;

          case HostRoot:
            {
              var _errorInfo = createCapturedValue(value, sourceFiber);

              var _update = createRootErrorUpdate(fiber, _errorInfo, expirationTime);

              enqueueUpdate(fiber, _update);
              scheduleWork(fiber, expirationTime);
              return;
            }
        }

        fiber = fiber.return;
      }

      if (sourceFiber.tag === HostRoot) {
        // Error was thrown at the root. There is no parent, so the root
        // itself should capture it.
        var rootFiber = sourceFiber;

        var _errorInfo2 = createCapturedValue(value, rootFiber);

        var _update2 = createRootErrorUpdate(rootFiber, _errorInfo2, expirationTime);

        enqueueUpdate(rootFiber, _update2);
        scheduleWork(rootFiber, expirationTime);
      }
    }

    function computeThreadID(expirationTime, interactionThreadID) {
      // Interaction threads are unique per root and expiration time.
      return expirationTime * 1000 + interactionThreadID;
    } // Creates a unique async expiration time.


    function computeUniqueAsyncExpiration() {
      var currentTime = requestCurrentTime();
      var result = computeAsyncExpiration(currentTime);

      if (result >= lastUniqueAsyncExpiration) {
        // Since we assume the current time monotonically increases, we only hit
        // this branch when computeUniqueAsyncExpiration is fired multiple times
        // within a 200ms window (or whatever the async bucket size is).
        result = lastUniqueAsyncExpiration - 1;
      }

      lastUniqueAsyncExpiration = result;
      return lastUniqueAsyncExpiration;
    }

    function computeExpirationForFiber(currentTime, fiber) {
      var priorityLevel = scheduler.unstable_getCurrentPriorityLevel();
      var expirationTime = void 0;

      if ((fiber.mode & ConcurrentMode) === NoContext) {
        // Outside of concurrent mode, updates are always synchronous.
        expirationTime = Sync;
      } else if (isWorking && !isCommitting$1) {
        // During render phase, updates expire during as the current render.
        expirationTime = nextRenderExpirationTime;
      } else {
        switch (priorityLevel) {
          case scheduler.unstable_ImmediatePriority:
            expirationTime = Sync;
            break;

          case scheduler.unstable_UserBlockingPriority:
            expirationTime = computeInteractiveExpiration(currentTime);
            break;

          case scheduler.unstable_NormalPriority:
            // This is a normal, concurrent update
            expirationTime = computeAsyncExpiration(currentTime);
            break;

          case scheduler.unstable_LowPriority:
          case scheduler.unstable_IdlePriority:
            expirationTime = Never;
            break;

          default:
            invariant(false, 'Unknown priority level. This error is likely caused by a bug in React. Please file an issue.');
        } // If we're in the middle of rendering a tree, do not update at the same
        // expiration time that is already rendering.


        if (nextRoot !== null && expirationTime === nextRenderExpirationTime) {
          expirationTime -= 1;
        }
      } // Keep track of the lowest pending interactive expiration time. This
      // allows us to synchronously flush all interactive updates
      // when needed.
      // TODO: Move this to renderer?


      if (priorityLevel === scheduler.unstable_UserBlockingPriority && (lowestPriorityPendingInteractiveExpirationTime === NoWork || expirationTime < lowestPriorityPendingInteractiveExpirationTime)) {
        lowestPriorityPendingInteractiveExpirationTime = expirationTime;
      }

      return expirationTime;
    }

    function renderDidSuspend(root, absoluteTimeoutMs, suspendedTime) {
      // Schedule the timeout.
      if (absoluteTimeoutMs >= 0 && nextLatestAbsoluteTimeoutMs < absoluteTimeoutMs) {
        nextLatestAbsoluteTimeoutMs = absoluteTimeoutMs;
      }
    }

    function renderDidError() {
      nextRenderDidError = true;
    }

    function pingSuspendedRoot(root, thenable, pingTime) {
      // A promise that previously suspended React from committing has resolved.
      // If React is still suspended, try again at the previous level (pingTime).
      var pingCache = root.pingCache;

      if (pingCache !== null) {
        // The thenable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        pingCache.delete(thenable);
      }

      if (nextRoot !== null && nextRenderExpirationTime === pingTime) {
        // Received a ping at the same priority level at which we're currently
        // rendering. Restart from the root.
        nextRoot = null;
      } else {
        // Confirm that the root is still suspended at this level. Otherwise exit.
        if (isPriorityLevelSuspended(root, pingTime)) {
          // Ping at the original level
          markPingedPriorityLevel(root, pingTime);
          var rootExpirationTime = root.expirationTime;

          if (rootExpirationTime !== NoWork) {
            requestWork(root, rootExpirationTime);
          }
        }
      }
    }

    function retryTimedOutBoundary(boundaryFiber, thenable) {
      // The boundary fiber (a Suspense component) previously timed out and was
      // rendered in its fallback state. One of the promises that suspended it has
      // resolved, which means at least part of the tree was likely unblocked. Try
      var retryCache = void 0;

      if (enableSuspenseServerRenderer) {
        switch (boundaryFiber.tag) {
          case SuspenseComponent:
            retryCache = boundaryFiber.stateNode;
            break;

          case DehydratedSuspenseComponent:
            retryCache = boundaryFiber.memoizedState;
            break;

          default:
            invariant(false, 'Pinged unknown suspense boundary type. This is probably a bug in React.');
        }
      } else {
        retryCache = boundaryFiber.stateNode;
      }

      if (retryCache !== null) {
        // The thenable resolved, so we no longer need to memoize, because it will
        // never be thrown again.
        retryCache.delete(thenable);
      }

      var currentTime = requestCurrentTime();
      var retryTime = computeExpirationForFiber(currentTime, boundaryFiber);
      var root = scheduleWorkToRoot(boundaryFiber, retryTime);

      if (root !== null) {
        markPendingPriorityLevel(root, retryTime);
        var rootExpirationTime = root.expirationTime;

        if (rootExpirationTime !== NoWork) {
          requestWork(root, rootExpirationTime);
        }
      }
    }

    function scheduleWorkToRoot(fiber, expirationTime) {
      recordScheduleUpdate();
      {
        if (fiber.tag === ClassComponent) {
          var instance = fiber.stateNode;
          warnAboutInvalidUpdates(instance);
        }
      } // Update the source fiber's expiration time

      if (fiber.expirationTime < expirationTime) {
        fiber.expirationTime = expirationTime;
      }

      var alternate = fiber.alternate;

      if (alternate !== null && alternate.expirationTime < expirationTime) {
        alternate.expirationTime = expirationTime;
      } // Walk the parent path to the root and update the child expiration time.


      var node = fiber.return;
      var root = null;

      if (node === null && fiber.tag === HostRoot) {
        root = fiber.stateNode;
      } else {
        while (node !== null) {
          alternate = node.alternate;

          if (node.childExpirationTime < expirationTime) {
            node.childExpirationTime = expirationTime;

            if (alternate !== null && alternate.childExpirationTime < expirationTime) {
              alternate.childExpirationTime = expirationTime;
            }
          } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
            alternate.childExpirationTime = expirationTime;
          }

          if (node.return === null && node.tag === HostRoot) {
            root = node.stateNode;
            break;
          }

          node = node.return;
        }
      }

      if (enableSchedulerTracing) {
        if (root !== null) {
          var interactions = tracing.__interactionsRef.current;

          if (interactions.size > 0) {
            var pendingInteractionMap = root.pendingInteractionMap;
            var pendingInteractions = pendingInteractionMap.get(expirationTime);

            if (pendingInteractions != null) {
              interactions.forEach(function (interaction) {
                if (!pendingInteractions.has(interaction)) {
                  // Update the pending async work count for previously unscheduled interaction.
                  interaction.__count++;
                }

                pendingInteractions.add(interaction);
              });
            } else {
              pendingInteractionMap.set(expirationTime, new Set(interactions)); // Update the pending async work count for the current interactions.

              interactions.forEach(function (interaction) {
                interaction.__count++;
              });
            }

            var subscriber = tracing.__subscriberRef.current;

            if (subscriber !== null) {
              var threadID = computeThreadID(expirationTime, root.interactionThreadID);
              subscriber.onWorkScheduled(interactions, threadID);
            }
          }
        }
      }

      return root;
    }

    function warnIfNotCurrentlyBatchingInDev(fiber) {
      {
        if (isRendering === false && isBatchingUpdates === false) {
          warningWithoutStack$1(false, 'An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see in the browser." + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
        }
      }
    }

    function scheduleWork(fiber, expirationTime) {
      var root = scheduleWorkToRoot(fiber, expirationTime);

      if (root === null) {
        {
          switch (fiber.tag) {
            case ClassComponent:
              warnAboutUpdateOnUnmounted(fiber, true);
              break;

            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent:
              warnAboutUpdateOnUnmounted(fiber, false);
              break;
          }
        }
        return;
      }

      if (!isWorking && nextRenderExpirationTime !== NoWork && expirationTime > nextRenderExpirationTime) {
        // This is an interruption. (Used for performance tracking.)
        interruptedBy = fiber;
        resetStack();
      }

      markPendingPriorityLevel(root, expirationTime);

      if ( // If we're in the render phase, we don't need to schedule this root
      // for an update, because we'll do it before we exit...
      !isWorking || isCommitting$1 || // ...unless this is a different root than the one we're rendering.
      nextRoot !== root) {
        var rootExpirationTime = root.expirationTime;
        requestWork(root, rootExpirationTime);
      }

      if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
        // Reset this back to zero so subsequent updates don't throw.
        nestedUpdateCount = 0;
        invariant(false, 'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.');
      }
    }

    function syncUpdates(fn, a, b, c, d) {
      return scheduler.unstable_runWithPriority(scheduler.unstable_ImmediatePriority, function () {
        return fn(a, b, c, d);
      });
    } // TODO: Everything below this is written as if it has been lifted to the
    // renderers. I'll do this in a follow-up.
    // Linked-list of roots


    var firstScheduledRoot = null;
    var lastScheduledRoot = null;
    var callbackExpirationTime = NoWork;
    var callbackID = void 0;
    var isRendering = false;
    var nextFlushedRoot = null;
    var nextFlushedExpirationTime = NoWork;
    var lowestPriorityPendingInteractiveExpirationTime = NoWork;
    var hasUnhandledError = false;
    var unhandledError = null;
    var isBatchingUpdates = false;
    var isUnbatchingUpdates = false;
    var completedBatches = null;
    var originalStartTimeMs = scheduler.unstable_now();
    var currentRendererTime = msToExpirationTime(originalStartTimeMs);
    var currentSchedulerTime = currentRendererTime; // Use these to prevent an infinite loop of nested updates

    var NESTED_UPDATE_LIMIT = 50;
    var nestedUpdateCount = 0;
    var lastCommittedRootDuringThisBatch = null;

    function recomputeCurrentRendererTime() {
      var currentTimeMs = scheduler.unstable_now() - originalStartTimeMs;
      currentRendererTime = msToExpirationTime(currentTimeMs);
    }

    function scheduleCallbackWithExpirationTime(root, expirationTime) {
      if (callbackExpirationTime !== NoWork) {
        // A callback is already scheduled. Check its expiration time (timeout).
        if (expirationTime < callbackExpirationTime) {
          // Existing callback has sufficient timeout. Exit.
          return;
        } else {
          if (callbackID !== null) {
            // Existing callback has insufficient timeout. Cancel and schedule a
            // new one.
            scheduler.unstable_cancelCallback(callbackID);
          }
        } // The request callback timer is already running. Don't start a new one.

      } else {
        startRequestCallbackTimer();
      }

      callbackExpirationTime = expirationTime;
      var currentMs = scheduler.unstable_now() - originalStartTimeMs;
      var expirationTimeMs = expirationTimeToMs(expirationTime);
      var timeout = expirationTimeMs - currentMs;
      callbackID = scheduler.unstable_scheduleCallback(performAsyncWork, {
        timeout: timeout
      });
    } // For every call to renderRoot, one of onFatal, onComplete, onSuspend, and
    // onYield is called upon exiting. We use these in lieu of returning a tuple.
    // I've also chosen not to inline them into renderRoot because these will
    // eventually be lifted into the renderer.


    function onFatal(root) {
      root.finishedWork = null;
    }

    function onComplete(root, finishedWork, expirationTime) {
      root.pendingCommitExpirationTime = expirationTime;
      root.finishedWork = finishedWork;
    }

    function onSuspend(root, finishedWork, suspendedExpirationTime, rootExpirationTime, msUntilTimeout) {
      root.expirationTime = rootExpirationTime;

      if (msUntilTimeout === 0 && !shouldYieldToRenderer()) {
        // Don't wait an additional tick. Commit the tree immediately.
        root.pendingCommitExpirationTime = suspendedExpirationTime;
        root.finishedWork = finishedWork;
      } else if (msUntilTimeout > 0) {
        // Wait `msUntilTimeout` milliseconds before committing.
        root.timeoutHandle = scheduleTimeout(onTimeout.bind(null, root, finishedWork, suspendedExpirationTime), msUntilTimeout);
      }
    }

    function onYield(root) {
      root.finishedWork = null;
    }

    function onTimeout(root, finishedWork, suspendedExpirationTime) {
      // The root timed out. Commit it.
      root.pendingCommitExpirationTime = suspendedExpirationTime;
      root.finishedWork = finishedWork; // Read the current time before entering the commit phase. We can be
      // certain this won't cause tearing related to batching of event updates
      // because we're at the top of a timer event.

      recomputeCurrentRendererTime();
      currentSchedulerTime = currentRendererTime;
      flushRoot(root, suspendedExpirationTime);
    }

    function onCommit(root, expirationTime) {
      root.expirationTime = expirationTime;
      root.finishedWork = null;
    }

    function requestCurrentTime() {
      // requestCurrentTime is called by the scheduler to compute an expiration
      // time.
      //
      // Expiration times are computed by adding to the current time (the start
      // time). However, if two updates are scheduled within the same event, we
      // should treat their start times as simultaneous, even if the actual clock
      // time has advanced between the first and second call.
      // In other words, because expiration times determine how updates are batched,
      // we want all updates of like priority that occur within the same event to
      // receive the same expiration time. Otherwise we get tearing.
      //
      // We keep track of two separate times: the current "renderer" time and the
      // current "scheduler" time. The renderer time can be updated whenever; it
      // only exists to minimize the calls performance.now.
      //
      // But the scheduler time can only be updated if there's no pending work, or
      // if we know for certain that we're not in the middle of an event.
      if (isRendering) {
        // We're already rendering. Return the most recently read time.
        return currentSchedulerTime;
      } // Check if there's pending work.


      findHighestPriorityRoot();

      if (nextFlushedExpirationTime === NoWork || nextFlushedExpirationTime === Never) {
        // If there's no pending work, or if the pending work is offscreen, we can
        // read the current time without risk of tearing.
        recomputeCurrentRendererTime();
        currentSchedulerTime = currentRendererTime;
        return currentSchedulerTime;
      } // There's already pending work. We might be in the middle of a browser
      // event. If we were to read the current time, it could cause multiple updates
      // within the same event to receive different expiration times, leading to
      // tearing. Return the last read time. During the next idle callback, the
      // time will be updated.


      return currentSchedulerTime;
    } // requestWork is called by the scheduler whenever a root receives an update.
    // It's up to the renderer to call renderRoot at some point in the future.


    function requestWork(root, expirationTime) {
      addRootToSchedule(root, expirationTime);

      if (isRendering) {
        // Prevent reentrancy. Remaining work will be scheduled at the end of
        // the currently rendering batch.
        return;
      }

      if (isBatchingUpdates) {
        // Flush work at the end of the batch.
        if (isUnbatchingUpdates) {
          // ...unless we're inside unbatchedUpdates, in which case we should
          // flush it now.
          nextFlushedRoot = root;
          nextFlushedExpirationTime = Sync;
          performWorkOnRoot(root, Sync, false);
        }

        return;
      } // TODO: Get rid of Sync and use current time?


      if (expirationTime === Sync) {
        performSyncWork();
      } else {
        scheduleCallbackWithExpirationTime(root, expirationTime);
      }
    }

    function addRootToSchedule(root, expirationTime) {
      // Add the root to the schedule.
      // Check if this root is already part of the schedule.
      if (root.nextScheduledRoot === null) {
        // This root is not already scheduled. Add it.
        root.expirationTime = expirationTime;

        if (lastScheduledRoot === null) {
          firstScheduledRoot = lastScheduledRoot = root;
          root.nextScheduledRoot = root;
        } else {
          lastScheduledRoot.nextScheduledRoot = root;
          lastScheduledRoot = root;
          lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
        }
      } else {
        // This root is already scheduled, but its priority may have increased.
        var remainingExpirationTime = root.expirationTime;

        if (expirationTime > remainingExpirationTime) {
          // Update the priority.
          root.expirationTime = expirationTime;
        }
      }
    }

    function findHighestPriorityRoot() {
      var highestPriorityWork = NoWork;
      var highestPriorityRoot = null;

      if (lastScheduledRoot !== null) {
        var previousScheduledRoot = lastScheduledRoot;
        var root = firstScheduledRoot;

        while (root !== null) {
          var remainingExpirationTime = root.expirationTime;

          if (remainingExpirationTime === NoWork) {
            // This root no longer has work. Remove it from the scheduler.
            // TODO: This check is redudant, but Flow is confused by the branch
            // below where we set lastScheduledRoot to null, even though we break
            // from the loop right after.
            !(previousScheduledRoot !== null && lastScheduledRoot !== null) ? invariant(false, 'Should have a previous and last root. This error is likely caused by a bug in React. Please file an issue.') : void 0;

            if (root === root.nextScheduledRoot) {
              // This is the only root in the list.
              root.nextScheduledRoot = null;
              firstScheduledRoot = lastScheduledRoot = null;
              break;
            } else if (root === firstScheduledRoot) {
              // This is the first root in the list.
              var next = root.nextScheduledRoot;
              firstScheduledRoot = next;
              lastScheduledRoot.nextScheduledRoot = next;
              root.nextScheduledRoot = null;
            } else if (root === lastScheduledRoot) {
              // This is the last root in the list.
              lastScheduledRoot = previousScheduledRoot;
              lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;
              root.nextScheduledRoot = null;
              break;
            } else {
              previousScheduledRoot.nextScheduledRoot = root.nextScheduledRoot;
              root.nextScheduledRoot = null;
            }

            root = previousScheduledRoot.nextScheduledRoot;
          } else {
            if (remainingExpirationTime > highestPriorityWork) {
              // Update the priority, if it's higher
              highestPriorityWork = remainingExpirationTime;
              highestPriorityRoot = root;
            }

            if (root === lastScheduledRoot) {
              break;
            }

            if (highestPriorityWork === Sync) {
              // Sync is highest priority by definition so
              // we can stop searching.
              break;
            }

            previousScheduledRoot = root;
            root = root.nextScheduledRoot;
          }
        }
      }

      nextFlushedRoot = highestPriorityRoot;
      nextFlushedExpirationTime = highestPriorityWork;
    } // TODO: This wrapper exists because many of the older tests (the ones that use
    // flushDeferredPri) rely on the number of times `shouldYield` is called. We
    // should get rid of it.


    var didYield = false;

    function shouldYieldToRenderer() {
      if (didYield) {
        return true;
      }

      if (scheduler.unstable_shouldYield()) {
        didYield = true;
        return true;
      }

      return false;
    }

    function performAsyncWork() {
      try {
        if (!shouldYieldToRenderer()) {
          // The callback timed out. That means at least one update has expired.
          // Iterate through the root schedule. If they contain expired work, set
          // the next render expiration time to the current time. This has the effect
          // of flushing all expired work in a single batch, instead of flushing each
          // level one at a time.
          if (firstScheduledRoot !== null) {
            recomputeCurrentRendererTime();
            var root = firstScheduledRoot;

            do {
              didExpireAtExpirationTime(root, currentRendererTime); // The root schedule is circular, so this is never null.

              root = root.nextScheduledRoot;
            } while (root !== firstScheduledRoot);
          }
        }

        performWork(NoWork, true);
      } finally {
        didYield = false;
      }
    }

    function performSyncWork() {
      performWork(Sync, false);
    }

    function performWork(minExpirationTime, isYieldy) {
      // Keep working on roots until there's no more work, or until there's a higher
      // priority event.
      findHighestPriorityRoot();

      if (isYieldy) {
        recomputeCurrentRendererTime();
        currentSchedulerTime = currentRendererTime;

        if (enableUserTimingAPI) {
          var didExpire = nextFlushedExpirationTime > currentRendererTime;
          var timeout = expirationTimeToMs(nextFlushedExpirationTime);
          stopRequestCallbackTimer(didExpire, timeout);
        }

        while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && minExpirationTime <= nextFlushedExpirationTime && !(didYield && currentRendererTime > nextFlushedExpirationTime)) {
          performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, currentRendererTime > nextFlushedExpirationTime);
          findHighestPriorityRoot();
          recomputeCurrentRendererTime();
          currentSchedulerTime = currentRendererTime;
        }
      } else {
        while (nextFlushedRoot !== null && nextFlushedExpirationTime !== NoWork && minExpirationTime <= nextFlushedExpirationTime) {
          performWorkOnRoot(nextFlushedRoot, nextFlushedExpirationTime, false);
          findHighestPriorityRoot();
        }
      } // We're done flushing work. Either we ran out of time in this callback,
      // or there's no more work left with sufficient priority.
      // If we're inside a callback, set this to false since we just completed it.


      if (isYieldy) {
        callbackExpirationTime = NoWork;
        callbackID = null;
      } // If there's work left over, schedule a new callback.


      if (nextFlushedExpirationTime !== NoWork) {
        scheduleCallbackWithExpirationTime(nextFlushedRoot, nextFlushedExpirationTime);
      } // Clean-up.


      finishRendering();
    }

    function flushRoot(root, expirationTime) {
      !!isRendering ? invariant(false, 'work.commit(): Cannot commit while already rendering. This likely means you attempted to commit from inside a lifecycle method.') : void 0; // Perform work on root as if the given expiration time is the current time.
      // This has the effect of synchronously flushing all work up to and
      // including the given time.

      nextFlushedRoot = root;
      nextFlushedExpirationTime = expirationTime;
      performWorkOnRoot(root, expirationTime, false); // Flush any sync work that was scheduled by lifecycles

      performSyncWork();
    }

    function finishRendering() {
      nestedUpdateCount = 0;
      lastCommittedRootDuringThisBatch = null;

      if (completedBatches !== null) {
        var batches = completedBatches;
        completedBatches = null;

        for (var i = 0; i < batches.length; i++) {
          var batch = batches[i];

          try {
            batch._onComplete();
          } catch (error) {
            if (!hasUnhandledError) {
              hasUnhandledError = true;
              unhandledError = error;
            }
          }
        }
      }

      if (hasUnhandledError) {
        var error = unhandledError;
        unhandledError = null;
        hasUnhandledError = false;
        throw error;
      }
    }

    function performWorkOnRoot(root, expirationTime, isYieldy) {
      !!isRendering ? invariant(false, 'performWorkOnRoot was called recursively. This error is likely caused by a bug in React. Please file an issue.') : void 0;
      isRendering = true; // Check if this is async work or sync/expired work.

      if (!isYieldy) {
        // Flush work without yielding.
        // TODO: Non-yieldy work does not necessarily imply expired work. A renderer
        // may want to perform some work without yielding, but also without
        // requiring the root to complete (by triggering placeholders).
        var finishedWork = root.finishedWork;

        if (finishedWork !== null) {
          // This root is already complete. We can commit it.
          completeRoot(root, finishedWork, expirationTime);
        } else {
          root.finishedWork = null; // If this root previously suspended, clear its existing timeout, since
          // we're about to try rendering again.

          var timeoutHandle = root.timeoutHandle;

          if (timeoutHandle !== noTimeout) {
            root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

            cancelTimeout(timeoutHandle);
          }

          renderRoot(root, isYieldy);
          finishedWork = root.finishedWork;

          if (finishedWork !== null) {
            // We've completed the root. Commit it.
            completeRoot(root, finishedWork, expirationTime);
          }
        }
      } else {
        // Flush async work.
        var _finishedWork = root.finishedWork;

        if (_finishedWork !== null) {
          // This root is already complete. We can commit it.
          completeRoot(root, _finishedWork, expirationTime);
        } else {
          root.finishedWork = null; // If this root previously suspended, clear its existing timeout, since
          // we're about to try rendering again.

          var _timeoutHandle = root.timeoutHandle;

          if (_timeoutHandle !== noTimeout) {
            root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

            cancelTimeout(_timeoutHandle);
          }

          renderRoot(root, isYieldy);
          _finishedWork = root.finishedWork;

          if (_finishedWork !== null) {
            // We've completed the root. Check the if we should yield one more time
            // before committing.
            if (!shouldYieldToRenderer()) {
              // Still time left. Commit the root.
              completeRoot(root, _finishedWork, expirationTime);
            } else {
              // There's no time left. Mark this root as complete. We'll come
              // back and commit it later.
              root.finishedWork = _finishedWork;
            }
          }
        }
      }

      isRendering = false;
    }

    function completeRoot(root, finishedWork, expirationTime) {
      // Check if there's a batch that matches this expiration time.
      var firstBatch = root.firstBatch;

      if (firstBatch !== null && firstBatch._expirationTime >= expirationTime) {
        if (completedBatches === null) {
          completedBatches = [firstBatch];
        } else {
          completedBatches.push(firstBatch);
        }

        if (firstBatch._defer) {
          // This root is blocked from committing by a batch. Unschedule it until
          // we receive another update.
          root.finishedWork = finishedWork;
          root.expirationTime = NoWork;
          return;
        }
      } // Commit the root.


      root.finishedWork = null; // Check if this is a nested update (a sync update scheduled during the
      // commit phase).

      if (root === lastCommittedRootDuringThisBatch) {
        // If the next root is the same as the previous root, this is a nested
        // update. To prevent an infinite loop, increment the nested update count.
        nestedUpdateCount++;
      } else {
        // Reset whenever we switch roots.
        lastCommittedRootDuringThisBatch = root;
        nestedUpdateCount = 0;
      }

      scheduler.unstable_runWithPriority(scheduler.unstable_ImmediatePriority, function () {
        commitRoot(root, finishedWork);
      });
    }

    function onUncaughtError(error) {
      !(nextFlushedRoot !== null) ? invariant(false, 'Should be working on a root. This error is likely caused by a bug in React. Please file an issue.') : void 0; // Unschedule this root so we don't work on it again until there's
      // another update.

      nextFlushedRoot.expirationTime = NoWork;

      if (!hasUnhandledError) {
        hasUnhandledError = true;
        unhandledError = error;
      }
    } // TODO: Batching should be implemented at the renderer level, not inside
    // the reconciler.


    function batchedUpdates$1(fn, a) {
      var previousIsBatchingUpdates = isBatchingUpdates;
      isBatchingUpdates = true;

      try {
        return fn(a);
      } finally {
        isBatchingUpdates = previousIsBatchingUpdates;

        if (!isBatchingUpdates && !isRendering) {
          performSyncWork();
        }
      }
    } // TODO: Batching should be implemented at the renderer level, not inside
    // the reconciler.


    function unbatchedUpdates(fn, a) {
      if (isBatchingUpdates && !isUnbatchingUpdates) {
        isUnbatchingUpdates = true;

        try {
          return fn(a);
        } finally {
          isUnbatchingUpdates = false;
        }
      }

      return fn(a);
    } // TODO: Batching should be implemented at the renderer level, not within
    // the reconciler.


    function flushSync(fn, a) {
      !!isRendering ? invariant(false, 'flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering.') : void 0;
      var previousIsBatchingUpdates = isBatchingUpdates;
      isBatchingUpdates = true;

      try {
        return syncUpdates(fn, a);
      } finally {
        isBatchingUpdates = previousIsBatchingUpdates;
        performSyncWork();
      }
    }

    function interactiveUpdates$1(fn, a, b) {
      // If there are any pending interactive updates, synchronously flush them.
      // This needs to happen before we read any handlers, because the effect of
      // the previous event may influence which handlers are called during
      // this event.
      if (!isBatchingUpdates && !isRendering && lowestPriorityPendingInteractiveExpirationTime !== NoWork) {
        // Synchronously flush pending interactive updates.
        performWork(lowestPriorityPendingInteractiveExpirationTime, false);
        lowestPriorityPendingInteractiveExpirationTime = NoWork;
      }

      var previousIsBatchingUpdates = isBatchingUpdates;
      isBatchingUpdates = true;

      try {
        return scheduler.unstable_runWithPriority(scheduler.unstable_UserBlockingPriority, function () {
          return fn(a, b);
        });
      } finally {
        isBatchingUpdates = previousIsBatchingUpdates;

        if (!isBatchingUpdates && !isRendering) {
          performSyncWork();
        }
      }
    }

    function flushInteractiveUpdates$1() {
      if (!isRendering && lowestPriorityPendingInteractiveExpirationTime !== NoWork) {
        // Synchronously flush pending interactive updates.
        performWork(lowestPriorityPendingInteractiveExpirationTime, false);
        lowestPriorityPendingInteractiveExpirationTime = NoWork;
      }
    }

    function flushControlled(fn) {
      var previousIsBatchingUpdates = isBatchingUpdates;
      isBatchingUpdates = true;

      try {
        syncUpdates(fn);
      } finally {
        isBatchingUpdates = previousIsBatchingUpdates;

        if (!isBatchingUpdates && !isRendering) {
          performSyncWork();
        }
      }
    } // 0 is PROD, 1 is DEV.
    // Might add PROFILE later.


    var didWarnAboutNestedUpdates = void 0;
    var didWarnAboutFindNodeInStrictMode = void 0;
    {
      didWarnAboutNestedUpdates = false;
      didWarnAboutFindNodeInStrictMode = {};
    }

    function getContextForSubtree(parentComponent) {
      if (!parentComponent) {
        return emptyContextObject;
      }

      var fiber = get(parentComponent);
      var parentContext = findCurrentUnmaskedContext(fiber);

      if (fiber.tag === ClassComponent) {
        var Component = fiber.type;

        if (isContextProvider(Component)) {
          return processChildContext(fiber, Component, parentContext);
        }
      }

      return parentContext;
    }

    function scheduleRootUpdate(current$$1, element, expirationTime, callback) {
      {
        if (phase === 'render' && current !== null && !didWarnAboutNestedUpdates) {
          didWarnAboutNestedUpdates = true;
          warningWithoutStack$1(false, 'Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
        }
      }
      var update = createUpdate(expirationTime); // Caution: React DevTools currently depends on this property
      // being called "element".

      update.payload = {
        element: element
      };
      callback = callback === undefined ? null : callback;

      if (callback !== null) {
        !(typeof callback === 'function') ? warningWithoutStack$1(false, 'render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback) : void 0;
        update.callback = callback;
      }

      flushPassiveEffects();
      enqueueUpdate(current$$1, update);
      scheduleWork(current$$1, expirationTime);
      return expirationTime;
    }

    function updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback) {
      // TODO: If this is a nested container, this won't be the root.
      var current$$1 = container.current;
      {
        if (ReactFiberInstrumentation_1.debugTool) {
          if (current$$1.alternate === null) {
            ReactFiberInstrumentation_1.debugTool.onMountContainer(container);
          } else if (element === null) {
            ReactFiberInstrumentation_1.debugTool.onUnmountContainer(container);
          } else {
            ReactFiberInstrumentation_1.debugTool.onUpdateContainer(container);
          }
        }
      }
      var context = getContextForSubtree(parentComponent);

      if (container.context === null) {
        container.context = context;
      } else {
        container.pendingContext = context;
      }

      return scheduleRootUpdate(current$$1, element, expirationTime, callback);
    }

    function findHostInstance(component) {
      var fiber = get(component);

      if (fiber === undefined) {
        if (typeof component.render === 'function') {
          invariant(false, 'Unable to find node on an unmounted component.');
        } else {
          invariant(false, 'Argument appears to not be a ReactComponent. Keys: %s', Object.keys(component));
        }
      }

      var hostFiber = findCurrentHostFiber(fiber);

      if (hostFiber === null) {
        return null;
      }

      return hostFiber.stateNode;
    }

    function findHostInstanceWithWarning(component, methodName) {
      {
        var fiber = get(component);

        if (fiber === undefined) {
          if (typeof component.render === 'function') {
            invariant(false, 'Unable to find node on an unmounted component.');
          } else {
            invariant(false, 'Argument appears to not be a ReactComponent. Keys: %s', Object.keys(component));
          }
        }

        var hostFiber = findCurrentHostFiber(fiber);

        if (hostFiber === null) {
          return null;
        }

        if (hostFiber.mode & StrictMode) {
          var componentName = getComponentName(fiber.type) || 'Component';

          if (!didWarnAboutFindNodeInStrictMode[componentName]) {
            didWarnAboutFindNodeInStrictMode[componentName] = true;

            if (fiber.mode & StrictMode) {
              warningWithoutStack$1(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-find-node', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
            } else {
              warningWithoutStack$1(false, '%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference.' + '\n%s' + '\n\nLearn more about using refs safely here:' + '\nhttps://fb.me/react-strict-mode-find-node', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
            }
          }
        }

        return hostFiber.stateNode;
      }
      return findHostInstance(component);
    }

    function createContainer(containerInfo, isConcurrent, hydrate) {
      return createFiberRoot(containerInfo, isConcurrent, hydrate);
    }

    function updateContainer(element, container, parentComponent, callback) {
      var current$$1 = container.current;
      var currentTime = requestCurrentTime();
      var expirationTime = computeExpirationForFiber(currentTime, current$$1);
      return updateContainerAtExpirationTime(element, container, parentComponent, expirationTime, callback);
    }

    function getPublicRootInstance(container) {
      var containerFiber = container.current;

      if (!containerFiber.child) {
        return null;
      }

      switch (containerFiber.child.tag) {
        case HostComponent:
          return getPublicInstance(containerFiber.child.stateNode);

        default:
          return containerFiber.child.stateNode;
      }
    }

    function findHostInstanceWithNoPortals(fiber) {
      var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

      if (hostFiber === null) {
        return null;
      }

      return hostFiber.stateNode;
    }

    var overrideProps = null;
    {
      var copyWithSetImpl = function (obj, path, idx, value) {
        if (idx >= path.length) {
          return value;
        }

        var key = path[idx];
        var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj); // $FlowFixMe number or string is fine here

        updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
        return updated;
      };

      var copyWithSet = function (obj, path, value) {
        return copyWithSetImpl(obj, path, 0, value);
      }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


      overrideProps = function (fiber, path, value) {
        flushPassiveEffects();
        fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

        if (fiber.alternate) {
          fiber.alternate.pendingProps = fiber.pendingProps;
        }

        scheduleWork(fiber, Sync);
      };
    }

    function injectIntoDevTools(devToolsConfig) {
      var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
      return injectInternals(_assign({}, devToolsConfig, {
        overrideProps: overrideProps,
        currentDispatcherRef: ReactCurrentDispatcher,
        findHostInstanceByFiber: function (fiber) {
          var hostFiber = findCurrentHostFiber(fiber);

          if (hostFiber === null) {
            return null;
          }

          return hostFiber.stateNode;
        },
        findFiberByHostInstance: function (instance) {
          if (!findFiberByHostInstance) {
            // Might not be implemented by the renderer.
            return null;
          }

          return findFiberByHostInstance(instance);
        }
      }));
    } // This file intentionally does *not* have the Flow annotation.
    // Don't add it. See `./inline-typed.js` for an explanation.


    function createPortal$1(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
    implementation) {
      var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
      return {
        // This tag allow us to uniquely identify this as a React Portal
        $$typeof: REACT_PORTAL_TYPE,
        key: key == null ? null : '' + key,
        children: children,
        containerInfo: containerInfo,
        implementation: implementation
      };
    } // TODO: this is special because it gets imported during build.


    var ReactVersion = '16.8.6'; // TODO: This type is shared between the reconciler and ReactDOM, but will
    // eventually be lifted out to the renderer.

    var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
    var topLevelUpdateWarnings = void 0;
    var warnOnInvalidCallback = void 0;
    var didWarnAboutUnstableCreatePortal = false;
    {
      if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
      Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
      Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
        warningWithoutStack$1(false, 'React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
      }

      topLevelUpdateWarnings = function (container) {
        if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
          var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);

          if (hostInstance) {
            !(hostInstance.parentNode === container) ? warningWithoutStack$1(false, 'render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.') : void 0;
          }
        }

        var isRootRenderedBySomeReact = !!container._reactRootContainer;
        var rootEl = getReactRootElementInContainer(container);
        var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));
        !(!hasNonRootReactChild || isRootRenderedBySomeReact) ? warningWithoutStack$1(false, 'render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.') : void 0;
        !(container.nodeType !== ELEMENT_NODE || !container.tagName || container.tagName.toUpperCase() !== 'BODY') ? warningWithoutStack$1(false, 'render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.') : void 0;
      };

      warnOnInvalidCallback = function (callback, callerName) {
        !(callback === null || typeof callback === 'function') ? warningWithoutStack$1(false, '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback) : void 0;
      };
    }
    setRestoreImplementation(restoreControlledState$1);

    function ReactBatch(root) {
      var expirationTime = computeUniqueAsyncExpiration();
      this._expirationTime = expirationTime;
      this._root = root;
      this._next = null;
      this._callbacks = null;
      this._didComplete = false;
      this._hasChildren = false;
      this._children = null;
      this._defer = true;
    }

    ReactBatch.prototype.render = function (children) {
      !this._defer ? invariant(false, 'batch.render: Cannot render a batch that already committed.') : void 0;
      this._hasChildren = true;
      this._children = children;
      var internalRoot = this._root._internalRoot;
      var expirationTime = this._expirationTime;
      var work = new ReactWork();
      updateContainerAtExpirationTime(children, internalRoot, null, expirationTime, work._onCommit);
      return work;
    };

    ReactBatch.prototype.then = function (onComplete) {
      if (this._didComplete) {
        onComplete();
        return;
      }

      var callbacks = this._callbacks;

      if (callbacks === null) {
        callbacks = this._callbacks = [];
      }

      callbacks.push(onComplete);
    };

    ReactBatch.prototype.commit = function () {
      var internalRoot = this._root._internalRoot;
      var firstBatch = internalRoot.firstBatch;
      !(this._defer && firstBatch !== null) ? invariant(false, 'batch.commit: Cannot commit a batch multiple times.') : void 0;

      if (!this._hasChildren) {
        // This batch is empty. Return.
        this._next = null;
        this._defer = false;
        return;
      }

      var expirationTime = this._expirationTime; // Ensure this is the first batch in the list.

      if (firstBatch !== this) {
        // This batch is not the earliest batch. We need to move it to the front.
        // Update its expiration time to be the expiration time of the earliest
        // batch, so that we can flush it without flushing the other batches.
        if (this._hasChildren) {
          expirationTime = this._expirationTime = firstBatch._expirationTime; // Rendering this batch again ensures its children will be the final state
          // when we flush (updates are processed in insertion order: last
          // update wins).
          // TODO: This forces a restart. Should we print a warning?

          this.render(this._children);
        } // Remove the batch from the list.


        var previous = null;
        var batch = firstBatch;

        while (batch !== this) {
          previous = batch;
          batch = batch._next;
        }

        !(previous !== null) ? invariant(false, 'batch.commit: Cannot commit a batch multiple times.') : void 0;
        previous._next = batch._next; // Add it to the front.

        this._next = firstBatch;
        firstBatch = internalRoot.firstBatch = this;
      } // Synchronously flush all the work up to this batch's expiration time.


      this._defer = false;
      flushRoot(internalRoot, expirationTime); // Pop the batch from the list.

      var next = this._next;
      this._next = null;
      firstBatch = internalRoot.firstBatch = next; // Append the next earliest batch's children to the update queue.

      if (firstBatch !== null && firstBatch._hasChildren) {
        firstBatch.render(firstBatch._children);
      }
    };

    ReactBatch.prototype._onComplete = function () {
      if (this._didComplete) {
        return;
      }

      this._didComplete = true;
      var callbacks = this._callbacks;

      if (callbacks === null) {
        return;
      } // TODO: Error handling.


      for (var i = 0; i < callbacks.length; i++) {
        var _callback = callbacks[i];

        _callback();
      }
    };

    function ReactWork() {
      this._callbacks = null;
      this._didCommit = false; // TODO: Avoid need to bind by replacing callbacks in the update queue with
      // list of Work objects.

      this._onCommit = this._onCommit.bind(this);
    }

    ReactWork.prototype.then = function (onCommit) {
      if (this._didCommit) {
        onCommit();
        return;
      }

      var callbacks = this._callbacks;

      if (callbacks === null) {
        callbacks = this._callbacks = [];
      }

      callbacks.push(onCommit);
    };

    ReactWork.prototype._onCommit = function () {
      if (this._didCommit) {
        return;
      }

      this._didCommit = true;
      var callbacks = this._callbacks;

      if (callbacks === null) {
        return;
      } // TODO: Error handling.


      for (var i = 0; i < callbacks.length; i++) {
        var _callback2 = callbacks[i];
        !(typeof _callback2 === 'function') ? invariant(false, 'Invalid argument passed as callback. Expected a function. Instead received: %s', _callback2) : void 0;

        _callback2();
      }
    };

    function ReactRoot(container, isConcurrent, hydrate) {
      var root = createContainer(container, isConcurrent, hydrate);
      this._internalRoot = root;
    }

    ReactRoot.prototype.render = function (children, callback) {
      var root = this._internalRoot;
      var work = new ReactWork();
      callback = callback === undefined ? null : callback;
      {
        warnOnInvalidCallback(callback, 'render');
      }

      if (callback !== null) {
        work.then(callback);
      }

      updateContainer(children, root, null, work._onCommit);
      return work;
    };

    ReactRoot.prototype.unmount = function (callback) {
      var root = this._internalRoot;
      var work = new ReactWork();
      callback = callback === undefined ? null : callback;
      {
        warnOnInvalidCallback(callback, 'render');
      }

      if (callback !== null) {
        work.then(callback);
      }

      updateContainer(null, root, null, work._onCommit);
      return work;
    };

    ReactRoot.prototype.legacy_renderSubtreeIntoContainer = function (parentComponent, children, callback) {
      var root = this._internalRoot;
      var work = new ReactWork();
      callback = callback === undefined ? null : callback;
      {
        warnOnInvalidCallback(callback, 'render');
      }

      if (callback !== null) {
        work.then(callback);
      }

      updateContainer(children, root, parentComponent, work._onCommit);
      return work;
    };

    ReactRoot.prototype.createBatch = function () {
      var batch = new ReactBatch(this);
      var expirationTime = batch._expirationTime;
      var internalRoot = this._internalRoot;
      var firstBatch = internalRoot.firstBatch;

      if (firstBatch === null) {
        internalRoot.firstBatch = batch;
        batch._next = null;
      } else {
        // Insert sorted by expiration time then insertion order
        var insertAfter = null;
        var insertBefore = firstBatch;

        while (insertBefore !== null && insertBefore._expirationTime >= expirationTime) {
          insertAfter = insertBefore;
          insertBefore = insertBefore._next;
        }

        batch._next = insertBefore;

        if (insertAfter !== null) {
          insertAfter._next = batch;
        }
      }

      return batch;
    };
    /**
     * True if the supplied DOM node is a valid node element.
     *
     * @param {?DOMElement} node The candidate DOM node.
     * @return {boolean} True if the DOM is a valid DOM node.
     * @internal
     */


    function isValidContainer(node) {
      return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
    }

    function getReactRootElementInContainer(container) {
      if (!container) {
        return null;
      }

      if (container.nodeType === DOCUMENT_NODE) {
        return container.documentElement;
      } else {
        return container.firstChild;
      }
    }

    function shouldHydrateDueToLegacyHeuristic(container) {
      var rootElement = getReactRootElementInContainer(container);
      return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
    }

    setBatchingImplementation(batchedUpdates$1, interactiveUpdates$1, flushInteractiveUpdates$1);
    var warnedAboutHydrateAPI = false;

    function legacyCreateRootFromDOMContainer(container, forceHydrate) {
      var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.

      if (!shouldHydrate) {
        var warned = false;
        var rootSibling = void 0;

        while (rootSibling = container.lastChild) {
          {
            if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
              warned = true;
              warningWithoutStack$1(false, 'render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
            }
          }
          container.removeChild(rootSibling);
        }
      }

      {
        if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
          warnedAboutHydrateAPI = true;
          lowPriorityWarning$1(false, 'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
        }
      } // Legacy roots are not async by default.

      var isConcurrent = false;
      return new ReactRoot(container, isConcurrent, shouldHydrate);
    }

    function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
      {
        topLevelUpdateWarnings(container);
      } // TODO: Without `any` type, Flow says "Property cannot be accessed on any
      // member of intersection type." Whyyyyyy.

      var root = container._reactRootContainer;

      if (!root) {
        // Initial mount
        root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);

        if (typeof callback === 'function') {
          var originalCallback = callback;

          callback = function () {
            var instance = getPublicRootInstance(root._internalRoot);
            originalCallback.call(instance);
          };
        } // Initial mount should not be batched.


        unbatchedUpdates(function () {
          if (parentComponent != null) {
            root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
          } else {
            root.render(children, callback);
          }
        });
      } else {
        if (typeof callback === 'function') {
          var _originalCallback = callback;

          callback = function () {
            var instance = getPublicRootInstance(root._internalRoot);

            _originalCallback.call(instance);
          };
        } // Update


        if (parentComponent != null) {
          root.legacy_renderSubtreeIntoContainer(parentComponent, children, callback);
        } else {
          root.render(children, callback);
        }
      }

      return getPublicRootInstance(root._internalRoot);
    }

    function createPortal$$1(children, container) {
      var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0; // TODO: pass ReactDOM portal implementation as third argument

      return createPortal$1(children, container, null, key);
    }

    var ReactDOM = {
      createPortal: createPortal$$1,
      findDOMNode: function (componentOrElement) {
        {
          var owner = ReactCurrentOwner.current;

          if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
            !warnedAboutRefsInRender ? warningWithoutStack$1(false, '%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component') : void 0;
            owner.stateNode._warnedAboutRefsInRender = true;
          }
        }

        if (componentOrElement == null) {
          return null;
        }

        if (componentOrElement.nodeType === ELEMENT_NODE) {
          return componentOrElement;
        }

        {
          return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
        }
        return findHostInstance(componentOrElement);
      },
      hydrate: function (element, container, callback) {
        !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
        {
          !!container._reactHasBeenPassedToCreateRootDEV ? warningWithoutStack$1(false, 'You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOM.%s(). This is not supported. ' + 'Did you mean to call createRoot(container, {hydrate: true}).render(element)?', enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot') : void 0;
        } // TODO: throw or warn if we couldn't hydrate?

        return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
      },
      render: function (element, container, callback) {
        !isValidContainer(container) ? invariant(false, 'Target container is not a DOM element.') : void 0;
        {
          !!container._reactHasBeenPassedToCreateRootDEV ? warningWithoutStack$1(false, 'You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOM.%s(). This is not supported. ' + 'Did you mean to call root.render(element)?', enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot') : void 0;
        }
        return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
      },
      unstable_renderSubtreeIntoContainer: function (parentComponent, element, containerNode, callback) {
        !isValidContainer(containerNode) ? invariant(false, 'Target container is not a DOM element.') : void 0;
        !(parentComponent != null && has(parentComponent)) ? invariant(false, 'parentComponent must be a valid React Component') : void 0;
        return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
      },
      unmountComponentAtNode: function (container) {
        !isValidContainer(container) ? invariant(false, 'unmountComponentAtNode(...): Target container is not a DOM element.') : void 0;
        {
          !!container._reactHasBeenPassedToCreateRootDEV ? warningWithoutStack$1(false, 'You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOM.%s(). This is not supported. Did you mean to call root.unmount()?', enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot') : void 0;
        }

        if (container._reactRootContainer) {
          {
            var rootEl = getReactRootElementInContainer(container);
            var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);
            !!renderedByDifferentReact ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.') : void 0;
          } // Unmount should not be batched.

          unbatchedUpdates(function () {
            legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
              container._reactRootContainer = null;
            });
          }); // If you call unmountComponentAtNode twice in quick succession, you'll
          // get `true` twice. That's probably fine?

          return true;
        } else {
          {
            var _rootEl = getReactRootElementInContainer(container);

            var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl)); // Check if the container itself is a React root node.

            var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;
            !!hasNonRootReactChild ? warningWithoutStack$1(false, "unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.') : void 0;
          }
          return false;
        }
      },
      // Temporary alias since we already shipped React 16 RC with it.
      // TODO: remove in React 17.
      unstable_createPortal: function () {
        if (!didWarnAboutUnstableCreatePortal) {
          didWarnAboutUnstableCreatePortal = true;
          lowPriorityWarning$1(false, 'The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
        }

        return createPortal$$1.apply(undefined, arguments);
      },
      unstable_batchedUpdates: batchedUpdates$1,
      unstable_interactiveUpdates: interactiveUpdates$1,
      flushSync: flushSync,
      unstable_createRoot: createRoot,
      unstable_flushControlled: flushControlled,
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: {
        // Keep in sync with ReactDOMUnstableNativeDependencies.js
        // and ReactTestUtils.js. This is an array for better minification.
        Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injection.injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch]
      }
    };

    function createRoot(container, options) {
      var functionName = enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot';
      !isValidContainer(container) ? invariant(false, '%s(...): Target container is not a DOM element.', functionName) : void 0;
      {
        !!container._reactRootContainer ? warningWithoutStack$1(false, 'You are calling ReactDOM.%s() on a container that was previously ' + 'passed to ReactDOM.render(). This is not supported.', enableStableConcurrentModeAPIs ? 'createRoot' : 'unstable_createRoot') : void 0;
        container._reactHasBeenPassedToCreateRootDEV = true;
      }
      var hydrate = options != null && options.hydrate === true;
      return new ReactRoot(container, true, hydrate);
    }

    if (enableStableConcurrentModeAPIs) {
      ReactDOM.createRoot = createRoot;
      ReactDOM.unstable_createRoot = undefined;
    }

    var foundDevTools = injectIntoDevTools({
      findFiberByHostInstance: getClosestInstanceFromNode,
      bundleType: 1,
      version: ReactVersion,
      rendererPackageName: 'react-dom'
    });
    {
      if (!foundDevTools && canUseDOM && window.top === window.self) {
        // If we're in Chrome or Firefox, provide a download link if not installed.
        if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
          var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.

          if (/^(https?|file):$/.test(protocol)) {
            console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
          }
        }
      }
    }
    var ReactDOM$2 = Object.freeze({
      default: ReactDOM
    });
    var ReactDOM$3 = ReactDOM$2 && ReactDOM || ReactDOM$2; // TODO: decide on the top-level export form.
    // This is hacky but makes it work with both Rollup and Jest.

    var reactDom = ReactDOM$3.default || ReactDOM$3;
    module.exports = reactDom;
  })();
}

/***/ }),

/***/ "./node_modules/react-dom/index.js":
/*!*****************************************!*\
  !*** ./node_modules/react-dom/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function') {
    return;
  }

  if (true) {
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
  }

  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react-dom.development.js */ "./node_modules/react-dom/cjs/react-dom.development.js");
}

/***/ }),

/***/ "./node_modules/react-error-overlay/lib/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-error-overlay/lib/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {!function (e, t) {
   true ? module.exports = t() : undefined;
}(window, function () {
  return function (e) {
    var t = {};

    function n(r) {
      if (t[r]) return t[r].exports;
      var u = t[r] = {
        i: r,
        l: !1,
        exports: {}
      };
      return e[r].call(u.exports, u, u.exports, n), u.l = !0, u.exports;
    }

    return n.m = e, n.c = t, n.d = function (e, t, r) {
      n.o(e, t) || Object.defineProperty(e, t, {
        enumerable: !0,
        get: r
      });
    }, n.r = function (e) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
        value: "Module"
      }), Object.defineProperty(e, "__esModule", {
        value: !0
      });
    }, n.t = function (e, t) {
      if (1 & t && (e = n(e)), 8 & t) return e;
      if (4 & t && "object" == typeof e && e && e.__esModule) return e;
      var r = Object.create(null);
      if (n.r(r), Object.defineProperty(r, "default", {
        enumerable: !0,
        value: e
      }), 2 & t && "string" != typeof e) for (var u in e) n.d(r, u, function (t) {
        return e[t];
      }.bind(null, u));
      return r;
    }, n.n = function (e) {
      var t = e && e.__esModule ? function () {
        return e.default;
      } : function () {
        return e;
      };
      return n.d(t, "a", t), t;
    }, n.o = function (e, t) {
      return Object.prototype.hasOwnProperty.call(e, t);
    }, n.p = "", n(n.s = 16);
  }([function (e, t, n) {
    e.exports = n(9);
  }, function (e, t) {
    t.getArg = function (e, t, n) {
      if (t in e) return e[t];
      if (3 === arguments.length) return n;
      throw new Error('"' + t + '" is a required argument.');
    };

    var n = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/,
        r = /^data:.+\,.+$/;

    function u(e) {
      var t = e.match(n);
      return t ? {
        scheme: t[1],
        auth: t[2],
        host: t[3],
        port: t[4],
        path: t[5]
      } : null;
    }

    function o(e) {
      var t = "";
      return e.scheme && (t += e.scheme + ":"), t += "//", e.auth && (t += e.auth + "@"), e.host && (t += e.host), e.port && (t += ":" + e.port), e.path && (t += e.path), t;
    }

    function i(e) {
      var n = e,
          r = u(e);

      if (r) {
        if (!r.path) return e;
        n = r.path;
      }

      for (var i, a = t.isAbsolute(n), l = n.split(/\/+/), s = 0, c = l.length - 1; c >= 0; c--) "." === (i = l[c]) ? l.splice(c, 1) : ".." === i ? s++ : s > 0 && ("" === i ? (l.splice(c + 1, s), s = 0) : (l.splice(c, 2), s--));

      return "" === (n = l.join("/")) && (n = a ? "/" : "."), r ? (r.path = n, o(r)) : n;
    }

    t.urlParse = u, t.urlGenerate = o, t.normalize = i, t.join = function (e, t) {
      "" === e && (e = "."), "" === t && (t = ".");
      var n = u(t),
          a = u(e);
      if (a && (e = a.path || "/"), n && !n.scheme) return a && (n.scheme = a.scheme), o(n);
      if (n || t.match(r)) return t;
      if (a && !a.host && !a.path) return a.host = t, o(a);
      var l = "/" === t.charAt(0) ? t : i(e.replace(/\/+$/, "") + "/" + t);
      return a ? (a.path = l, o(a)) : l;
    }, t.isAbsolute = function (e) {
      return "/" === e.charAt(0) || !!e.match(n);
    }, t.relative = function (e, t) {
      "" === e && (e = "."), e = e.replace(/\/$/, "");

      for (var n = 0; 0 !== t.indexOf(e + "/");) {
        var r = e.lastIndexOf("/");
        if (r < 0) return t;
        if ((e = e.slice(0, r)).match(/^([^\/]+:\/)?\/*$/)) return t;
        ++n;
      }

      return Array(n + 1).join("../") + t.substr(e.length + 1);
    };
    var a = !("__proto__" in Object.create(null));

    function l(e) {
      return e;
    }

    function s(e) {
      if (!e) return !1;
      var t = e.length;
      if (t < 9) return !1;
      if (95 !== e.charCodeAt(t - 1) || 95 !== e.charCodeAt(t - 2) || 111 !== e.charCodeAt(t - 3) || 116 !== e.charCodeAt(t - 4) || 111 !== e.charCodeAt(t - 5) || 114 !== e.charCodeAt(t - 6) || 112 !== e.charCodeAt(t - 7) || 95 !== e.charCodeAt(t - 8) || 95 !== e.charCodeAt(t - 9)) return !1;

      for (var n = t - 10; n >= 0; n--) if (36 !== e.charCodeAt(n)) return !1;

      return !0;
    }

    function c(e, t) {
      return e === t ? 0 : e > t ? 1 : -1;
    }

    t.toSetString = a ? l : function (e) {
      return s(e) ? "$" + e : e;
    }, t.fromSetString = a ? l : function (e) {
      return s(e) ? e.slice(1) : e;
    }, t.compareByOriginalPositions = function (e, t, n) {
      var r = e.source - t.source;
      return 0 !== r ? r : 0 != (r = e.originalLine - t.originalLine) ? r : 0 != (r = e.originalColumn - t.originalColumn) || n ? r : 0 != (r = e.generatedColumn - t.generatedColumn) ? r : 0 != (r = e.generatedLine - t.generatedLine) ? r : e.name - t.name;
    }, t.compareByGeneratedPositionsDeflated = function (e, t, n) {
      var r = e.generatedLine - t.generatedLine;
      return 0 !== r ? r : 0 != (r = e.generatedColumn - t.generatedColumn) || n ? r : 0 != (r = e.source - t.source) ? r : 0 != (r = e.originalLine - t.originalLine) ? r : 0 != (r = e.originalColumn - t.originalColumn) ? r : e.name - t.name;
    }, t.compareByGeneratedPositionsInflated = function (e, t) {
      var n = e.generatedLine - t.generatedLine;
      return 0 !== n ? n : 0 != (n = e.generatedColumn - t.generatedColumn) ? n : 0 !== (n = c(e.source, t.source)) ? n : 0 != (n = e.originalLine - t.originalLine) ? n : 0 != (n = e.originalColumn - t.originalColumn) ? n : c(e.name, t.name);
    };
  }, function (e, t) {
    function n(e, t) {
      for (var n = 0, r = e.length - 1; r >= 0; r--) {
        var u = e[r];
        "." === u ? e.splice(r, 1) : ".." === u ? (e.splice(r, 1), n++) : n && (e.splice(r, 1), n--);
      }

      if (t) for (; n--; n) e.unshift("..");
      return e;
    }

    var r = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,
        u = function (e) {
      return r.exec(e).slice(1);
    };

    function o(e, t) {
      if (e.filter) return e.filter(t);

      for (var n = [], r = 0; r < e.length; r++) t(e[r], r, e) && n.push(e[r]);

      return n;
    }

    t.resolve = function () {
      for (var e = "", t = !1, r = arguments.length - 1; r >= -1 && !t; r--) {
        var u = r >= 0 ? arguments[r] : process.cwd();
        if ("string" != typeof u) throw new TypeError("Arguments to path.resolve must be strings");
        u && (e = u + "/" + e, t = "/" === u.charAt(0));
      }

      return (t ? "/" : "") + (e = n(o(e.split("/"), function (e) {
        return !!e;
      }), !t).join("/")) || ".";
    }, t.normalize = function (e) {
      var r = t.isAbsolute(e),
          u = "/" === i(e, -1);
      return (e = n(o(e.split("/"), function (e) {
        return !!e;
      }), !r).join("/")) || r || (e = "."), e && u && (e += "/"), (r ? "/" : "") + e;
    }, t.isAbsolute = function (e) {
      return "/" === e.charAt(0);
    }, t.join = function () {
      var e = Array.prototype.slice.call(arguments, 0);
      return t.normalize(o(e, function (e, t) {
        if ("string" != typeof e) throw new TypeError("Arguments to path.join must be strings");
        return e;
      }).join("/"));
    }, t.relative = function (e, n) {
      function r(e) {
        for (var t = 0; t < e.length && "" === e[t]; t++);

        for (var n = e.length - 1; n >= 0 && "" === e[n]; n--);

        return t > n ? [] : e.slice(t, n - t + 1);
      }

      e = t.resolve(e).substr(1), n = t.resolve(n).substr(1);

      for (var u = r(e.split("/")), o = r(n.split("/")), i = Math.min(u.length, o.length), a = i, l = 0; l < i; l++) if (u[l] !== o[l]) {
        a = l;
        break;
      }

      var s = [];

      for (l = a; l < u.length; l++) s.push("..");

      return (s = s.concat(o.slice(a))).join("/");
    }, t.sep = "/", t.delimiter = ":", t.dirname = function (e) {
      var t = u(e),
          n = t[0],
          r = t[1];
      return n || r ? (r && (r = r.substr(0, r.length - 1)), n + r) : ".";
    }, t.basename = function (e, t) {
      var n = u(e)[2];
      return t && n.substr(-1 * t.length) === t && (n = n.substr(0, n.length - t.length)), n;
    }, t.extname = function (e) {
      return u(e)[3];
    };
    var i = "b" === "ab".substr(-1) ? function (e, t, n) {
      return e.substr(t, n);
    } : function (e, t, n) {
      return t < 0 && (t = e.length + t), e.substr(t, n);
    };
  }, function (e, t, n) {
    t.SourceMapGenerator = n(4).SourceMapGenerator, t.SourceMapConsumer = n(12).SourceMapConsumer, t.SourceNode = n(15).SourceNode;
  }, function (e, t, n) {
    var r = n(5),
        u = n(1),
        o = n(6).ArraySet,
        i = n(11).MappingList;

    function a(e) {
      e || (e = {}), this._file = u.getArg(e, "file", null), this._sourceRoot = u.getArg(e, "sourceRoot", null), this._skipValidation = u.getArg(e, "skipValidation", !1), this._sources = new o(), this._names = new o(), this._mappings = new i(), this._sourcesContents = null;
    }

    a.prototype._version = 3, a.fromSourceMap = function (e) {
      var t = e.sourceRoot,
          n = new a({
        file: e.file,
        sourceRoot: t
      });
      return e.eachMapping(function (e) {
        var r = {
          generated: {
            line: e.generatedLine,
            column: e.generatedColumn
          }
        };
        null != e.source && (r.source = e.source, null != t && (r.source = u.relative(t, r.source)), r.original = {
          line: e.originalLine,
          column: e.originalColumn
        }, null != e.name && (r.name = e.name)), n.addMapping(r);
      }), e.sources.forEach(function (t) {
        var r = e.sourceContentFor(t);
        null != r && n.setSourceContent(t, r);
      }), n;
    }, a.prototype.addMapping = function (e) {
      var t = u.getArg(e, "generated"),
          n = u.getArg(e, "original", null),
          r = u.getArg(e, "source", null),
          o = u.getArg(e, "name", null);
      this._skipValidation || this._validateMapping(t, n, r, o), null != r && (r = String(r), this._sources.has(r) || this._sources.add(r)), null != o && (o = String(o), this._names.has(o) || this._names.add(o)), this._mappings.add({
        generatedLine: t.line,
        generatedColumn: t.column,
        originalLine: null != n && n.line,
        originalColumn: null != n && n.column,
        source: r,
        name: o
      });
    }, a.prototype.setSourceContent = function (e, t) {
      var n = e;
      null != this._sourceRoot && (n = u.relative(this._sourceRoot, n)), null != t ? (this._sourcesContents || (this._sourcesContents = Object.create(null)), this._sourcesContents[u.toSetString(n)] = t) : this._sourcesContents && (delete this._sourcesContents[u.toSetString(n)], 0 === Object.keys(this._sourcesContents).length && (this._sourcesContents = null));
    }, a.prototype.applySourceMap = function (e, t, n) {
      var r = t;

      if (null == t) {
        if (null == e.file) throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.');
        r = e.file;
      }

      var i = this._sourceRoot;
      null != i && (r = u.relative(i, r));
      var a = new o(),
          l = new o();
      this._mappings.unsortedForEach(function (t) {
        if (t.source === r && null != t.originalLine) {
          var o = e.originalPositionFor({
            line: t.originalLine,
            column: t.originalColumn
          });
          null != o.source && (t.source = o.source, null != n && (t.source = u.join(n, t.source)), null != i && (t.source = u.relative(i, t.source)), t.originalLine = o.line, t.originalColumn = o.column, null != o.name && (t.name = o.name));
        }

        var s = t.source;
        null == s || a.has(s) || a.add(s);
        var c = t.name;
        null == c || l.has(c) || l.add(c);
      }, this), this._sources = a, this._names = l, e.sources.forEach(function (t) {
        var r = e.sourceContentFor(t);
        null != r && (null != n && (t = u.join(n, t)), null != i && (t = u.relative(i, t)), this.setSourceContent(t, r));
      }, this);
    }, a.prototype._validateMapping = function (e, t, n, r) {
      if ((!(e && "line" in e && "column" in e && e.line > 0 && e.column >= 0) || t || n || r) && !(e && "line" in e && "column" in e && t && "line" in t && "column" in t && e.line > 0 && e.column >= 0 && t.line > 0 && t.column >= 0 && n)) throw new Error("Invalid mapping: " + JSON.stringify({
        generated: e,
        source: n,
        original: t,
        name: r
      }));
    }, a.prototype._serializeMappings = function () {
      for (var e, t, n, o, i = 0, a = 1, l = 0, s = 0, c = 0, f = 0, p = "", d = this._mappings.toArray(), h = 0, m = d.length; h < m; h++) {
        if (e = "", (t = d[h]).generatedLine !== a) for (i = 0; t.generatedLine !== a;) e += ";", a++;else if (h > 0) {
          if (!u.compareByGeneratedPositionsInflated(t, d[h - 1])) continue;
          e += ",";
        }
        e += r.encode(t.generatedColumn - i), i = t.generatedColumn, null != t.source && (o = this._sources.indexOf(t.source), e += r.encode(o - f), f = o, e += r.encode(t.originalLine - 1 - s), s = t.originalLine - 1, e += r.encode(t.originalColumn - l), l = t.originalColumn, null != t.name && (n = this._names.indexOf(t.name), e += r.encode(n - c), c = n)), p += e;
      }

      return p;
    }, a.prototype._generateSourcesContent = function (e, t) {
      return e.map(function (e) {
        if (!this._sourcesContents) return null;
        null != t && (e = u.relative(t, e));
        var n = u.toSetString(e);
        return Object.prototype.hasOwnProperty.call(this._sourcesContents, n) ? this._sourcesContents[n] : null;
      }, this);
    }, a.prototype.toJSON = function () {
      var e = {
        version: this._version,
        sources: this._sources.toArray(),
        names: this._names.toArray(),
        mappings: this._serializeMappings()
      };
      return null != this._file && (e.file = this._file), null != this._sourceRoot && (e.sourceRoot = this._sourceRoot), this._sourcesContents && (e.sourcesContent = this._generateSourcesContent(e.sources, e.sourceRoot)), e;
    }, a.prototype.toString = function () {
      return JSON.stringify(this.toJSON());
    }, t.SourceMapGenerator = a;
  }, function (e, t, n) {
    var r = n(10);
    t.encode = function (e) {
      var t,
          n = "",
          u = function (e) {
        return e < 0 ? 1 + (-e << 1) : 0 + (e << 1);
      }(e);

      do {
        t = 31 & u, (u >>>= 5) > 0 && (t |= 32), n += r.encode(t);
      } while (u > 0);

      return n;
    }, t.decode = function (e, t, n) {
      var u,
          o,
          i,
          a,
          l = e.length,
          s = 0,
          c = 0;

      do {
        if (t >= l) throw new Error("Expected more digits in base 64 VLQ value.");
        if (-1 === (o = r.decode(e.charCodeAt(t++)))) throw new Error("Invalid base64 digit: " + e.charAt(t - 1));
        u = !!(32 & o), s += (o &= 31) << c, c += 5;
      } while (u);

      n.value = (a = (i = s) >> 1, 1 == (1 & i) ? -a : a), n.rest = t;
    };
  }, function (e, t, n) {
    var r = n(1),
        u = Object.prototype.hasOwnProperty;

    function o() {
      this._array = [], this._set = Object.create(null);
    }

    o.fromArray = function (e, t) {
      for (var n = new o(), r = 0, u = e.length; r < u; r++) n.add(e[r], t);

      return n;
    }, o.prototype.size = function () {
      return Object.getOwnPropertyNames(this._set).length;
    }, o.prototype.add = function (e, t) {
      var n = r.toSetString(e),
          o = u.call(this._set, n),
          i = this._array.length;
      o && !t || this._array.push(e), o || (this._set[n] = i);
    }, o.prototype.has = function (e) {
      var t = r.toSetString(e);
      return u.call(this._set, t);
    }, o.prototype.indexOf = function (e) {
      var t = r.toSetString(e);
      if (u.call(this._set, t)) return this._set[t];
      throw new Error('"' + e + '" is not in the set.');
    }, o.prototype.at = function (e) {
      if (e >= 0 && e < this._array.length) return this._array[e];
      throw new Error("No element indexed by " + e);
    }, o.prototype.toArray = function () {
      return this._array.slice();
    }, t.ArraySet = o;
  }, function (e, t, n) {
    "use strict";

    function r(e) {
      return Array.isArray(e) || (e = [e]), Promise.all(e.map(function (e) {
        return e.then(function (e) {
          return {
            isFulfilled: !0,
            isRejected: !1,
            value: e
          };
        }).catch(function (e) {
          return {
            isFulfilled: !1,
            isRejected: !0,
            reason: e
          };
        });
      }));
    }

    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.settle = r, t.default = r;
  }, function (e, t) {
    e.exports = '!function(e){var t={};function n(r){if(t[r])return t[r].exports;var u=t[r]={i:r,l:!1,exports:{}};return e[r].call(u.exports,u,u.exports,n),u.l=!0,u.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"===typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var u in e)n.d(r,u,function(t){return e[t]}.bind(null,u));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=202)}([function(e,t,n){"use strict";e.exports=n(178)},function(e,t,n){var r=n(5),u=n(34).f,o=n(17),i=n(21),a=n(38),l=n(58),c=n(54);e.exports=function(e,t){var n,s,f,d,p,h=e.target,m=e.global,g=e.stat;if(n=m?r:g?r[h]||a(h,{}):(r[h]||{}).prototype)for(s in t){if(d=t[s],f=e.noTargetGet?(p=u(n,s))&&p.value:n[s],!c(m?s:h+(g?".":"#")+s,e.forced)&&void 0!==f){if(typeof d===typeof f)continue;l(d,f)}(e.sham||f&&f.sham)&&o(d,"sham",!0),i(n,s,d,e)}}},function(e,t,n){var r=n(10);e.exports=function(e){if(!r(e))throw TypeError(String(e)+" is not an object");return e}},function(e,t){e.exports=!1},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(String(e)+" is not a function");return e}},function(e,t){e.exports="object"==typeof window&&window&&window.Math==Math?window:"object"==typeof self&&self&&self.Math==Math?self:Function("return this")()},function(e,t,n){var r=n(24)("wks"),u=n(30),o=n(5).Symbol,i=n(62);e.exports=function(e){return r[e]||(r[e]=i&&o[e]||(i?o:u)("Symbol."+e))}},function(e,t,n){var r=n(4);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 0:return function(){return e.call(t)};case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,u){return e.call(t,n,r,u)}}return function(){return e.apply(t,arguments)}}},function(e,t,n){var r=n(71),u=n(11),o=n(77),i=n(13).f;e.exports=function(e){var t=r.Symbol||(r.Symbol={});u(t,e)||i(t,e,{value:o.f(e)})}},function(e,t,n){var r=n(2),u=n(61),o=n(31),i=n(7),a=n(43),l=n(64),c={};(e.exports=function(e,t,n,s,f){var d,p,h,m,g,v=i(t,n,s?2:1);if(f)d=e;else{if("function"!=typeof(p=a(e)))throw TypeError("Target is not iterable");if(u(p)){for(h=0,m=o(e.length);m>h;h++)if((s?v(r(g=e[h])[0],g[1]):v(e[h]))===c)return c;return}d=p.call(e)}for(;!(g=d.next()).done;)if(l(d,v,g.value,s)===c)return c}).BREAK=c},function(e,t){e.exports=function(e){return"object"===typeof e?null!==e:"function"===typeof e}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){var r=n(16),u=n(55),o=n(2),i=n(28),a=Object.defineProperty;t.f=r?a:function(e,t,n){if(o(e),t=i(t,!0),o(n),u)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(71),u=n(5),o=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?o(r[e])||o(u[e]):r[e]&&r[e][t]||u[e]&&u[e][t]}},function(e,t,n){var r=n(3),u=n(47);e.exports=r?u:function(e){return Map.prototype.entries.call(e)}},function(e,t,n){e.exports=!n(12)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(13),u=n(23);e.exports=n(16)?function(e,t,n){return r.f(e,t,u(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(2),u=n(4),o=n(6)("species");e.exports=function(e,t){var n,i=r(e).constructor;return void 0===i||void 0==(n=r(i)[o])?t:u(n)}},function(e,t,n){var r=n(3),u=n(47);e.exports=r?u:function(e){return Set.prototype.values.call(e)}},function(e,t,n){var r=n(87),u=n(37);e.exports=function(e){return r(u(e))}},function(e,t,n){var r=n(5),u=n(17),o=n(11),i=n(38),a=n(57),l=n(25),c=l.get,s=l.enforce,f=String(a).split("toString");n(24)("inspectSource",function(e){return a.call(e)}),(e.exports=function(e,t,n,a){var l=!!a&&!!a.unsafe,c=!!a&&!!a.enumerable,d=!!a&&!!a.noTargetGet;"function"==typeof n&&("string"!=typeof t||o(n,"name")||u(n,"name",t),s(n).source=f.join("string"==typeof t?t:"")),e!==r?(l?!d&&e[t]&&(c=!0):delete e[t],c?e[t]=n:u(e,t,n)):c?e[t]=n:i(t,n)})(Function.prototype,"toString",function(){return"function"==typeof this&&c(this).source||a.call(this)})},function(e,t,n){var r=n(13).f,u=n(11),o=n(6)("toStringTag");e.exports=function(e,t,n){e&&!u(e=n?e:e.prototype,o)&&r(e,o,{configurable:!0,value:t})}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t,n){var r=n(5),u=n(38),o=r["__core-js_shared__"]||u("__core-js_shared__",{});(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.0.1",mode:n(3)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t,n){var r,u,o,i=n(88),a=n(10),l=n(17),c=n(11),s=n(29),f=n(26),d=n(5).WeakMap;if(i){var p=new d,h=p.get,m=p.has,g=p.set;r=function(e,t){return g.call(p,e,t),t},u=function(e){return h.call(p,e)||{}},o=function(e){return m.call(p,e)}}else{var v=s("state");f[v]=!0,r=function(e,t){return l(e,v,t),t},u=function(e){return c(e,v)?e[v]:{}},o=function(e){return c(e,v)}}e.exports={set:r,get:u,has:o,enforce:function(e){return o(e)?u(e):r(e,{})},getterFor:function(e){return function(t){var n;if(!a(t)||(n=u(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return n}}}},function(e,t){e.exports={}},function(e,t){e.exports={}},function(e,t,n){var r=n(10);e.exports=function(e,t){if(!r(e))return e;var n,u;if(t&&"function"==typeof(n=e.toString)&&!r(u=n.call(e)))return u;if("function"==typeof(n=e.valueOf)&&!r(u=n.call(e)))return u;if(!t&&"function"==typeof(n=e.toString)&&!r(u=n.call(e)))return u;throw TypeError("Can\'t convert object to primitive value")}},function(e,t,n){var r=n(24)("keys"),u=n(30);e.exports=function(e){return r[e]||(r[e]=u(e))}},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t,n){var r=n(40),u=Math.min;e.exports=function(e){return e>0?u(r(e),9007199254740991):0}},function(e,t,n){var r=n(2),u=n(95),o=n(41),i=n(96),a=n(56),l=n(29)("IE_PROTO"),c=function(){},s=function(){var e,t=a("iframe"),n=o.length;for(t.style.display="none",i.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\\/script>"),e.close(),s=e.F;n--;)delete s.prototype[o[n]];return s()};e.exports=Object.create||function(e,t){var n;return null!==e?(c.prototype=r(e),n=new c,c.prototype=null,n[l]=e):n=s(),void 0===t?n:u(n,t)},n(26)[l]=!0},function(e,t,n){"use strict";var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var u=[[{color:"0, 0, 0",class:"ansi-black"},{color:"187, 0, 0",class:"ansi-red"},{color:"0, 187, 0",class:"ansi-green"},{color:"187, 187, 0",class:"ansi-yellow"},{color:"0, 0, 187",class:"ansi-blue"},{color:"187, 0, 187",class:"ansi-magenta"},{color:"0, 187, 187",class:"ansi-cyan"},{color:"255,255,255",class:"ansi-white"}],[{color:"85, 85, 85",class:"ansi-bright-black"},{color:"255, 85, 85",class:"ansi-bright-red"},{color:"0, 255, 0",class:"ansi-bright-green"},{color:"255, 255, 85",class:"ansi-bright-yellow"},{color:"85, 85, 255",class:"ansi-bright-blue"},{color:"255, 85, 255",class:"ansi-bright-magenta"},{color:"85, 255, 255",class:"ansi-bright-cyan"},{color:"255, 255, 255",class:"ansi-bright-white"}]],o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.fg=this.bg=this.fg_truecolor=this.bg_truecolor=null,this.bright=0}return r(e,null,[{key:"escapeForHtml",value:function(t){return(new e).escapeForHtml(t)}},{key:"linkify",value:function(t){return(new e).linkify(t)}},{key:"ansiToHtml",value:function(t,n){return(new e).ansiToHtml(t,n)}},{key:"ansiToJson",value:function(t,n){return(new e).ansiToJson(t,n)}},{key:"ansiToText",value:function(t){return(new e).ansiToText(t)}}]),r(e,[{key:"setupPalette",value:function(){this.PALETTE_COLORS=[];for(var e=0;e<2;++e)for(var t=0;t<8;++t)this.PALETTE_COLORS.push(u[e][t].color);for(var n=[0,95,135,175,215,255],r=function(e,t,r){return n[e]+", "+n[t]+", "+n[r]},o=0;o<6;++o)for(var i=0;i<6;++i)for(var a=0;a<6;++a)this.PALETTE_COLORS.push(r(o,i,a));for(var l=8,c=0;c<24;++c,l+=10)this.PALETTE_COLORS.push(r(l,l,l))}},{key:"escapeForHtml",value:function(e){return e.replace(/[&<>]/gm,function(e){return"&"==e?"&amp;":"<"==e?"&lt;":">"==e?"&gt;":""})}},{key:"linkify",value:function(e){return e.replace(/(https?:\\/\\/[^\\s]+)/gm,function(e){return\'<a href="\'+e+\'">\'+e+"</a>"})}},{key:"ansiToHtml",value:function(e,t){return this.process(e,t,!0)}},{key:"ansiToJson",value:function(e,t){return(t=t||{}).json=!0,t.clearLine=!1,this.process(e,t,!0)}},{key:"ansiToText",value:function(e){return this.process(e,{},!1)}},{key:"process",value:function(e,t,n){var r=this,u=e.split(/\\033\\[/),o=u.shift();void 0!==t&&null!==t||(t={}),t.clearLine=/\\r/.test(e);var i=u.map(function(e){return r.processChunk(e,t,n)});if(t&&t.json){var a=this.processChunkJson("");return a.content=o,a.clearLine=t.clearLine,i.unshift(a),t.remove_empty&&(i=i.filter(function(e){return!e.isEmpty()})),i}return i.unshift(o),i.join("")}},{key:"processChunkJson",value:function(e,t,n){var r=(t="undefined"==typeof t?{}:t).use_classes="undefined"!=typeof t.use_classes&&t.use_classes,o=t.key=r?"class":"color",i={content:e,fg:null,bg:null,fg_truecolor:null,bg_truecolor:null,clearLine:t.clearLine,decoration:null,was_processed:!1,isEmpty:function(){return!i.content}},a=e.match(/^([!\\x3c-\\x3f]*)([\\d;]*)([\\x20-\\x2c]*[\\x40-\\x7e])([\\s\\S]*)/m);if(!a)return i;i.content=a[4];var l=a[2].split(";");if(""!==a[1]||"m"!==a[3])return i;if(!n)return i;for(this.decoration=null;l.length>0;){var c=l.shift(),s=parseInt(c);if(isNaN(s)||0===s)this.fg=this.bg=this.decoration=null;else if(1===s)this.decoration="bold";else if(2===s)this.decoration="dim";else if(3==s)this.decoration="italic";else if(4==s)this.decoration="underline";else if(5==s)this.decoration="blink";else if(7===s)this.decoration="reverse";else if(8===s)this.decoration="hidden";else if(9===s)this.decoration="strikethrough";else if(39==s)this.fg=null;else if(49==s)this.bg=null;else if(s>=30&&s<38)this.fg=u[0][s%10][o];else if(s>=90&&s<98)this.fg=u[1][s%10][o];else if(s>=40&&s<48)this.bg=u[0][s%10][o];else if(s>=100&&s<108)this.bg=u[1][s%10][o];else if(38===s||48===s){var f=38===s;if(l.length>=1){var d=l.shift();if("5"===d&&l.length>=1){var p=parseInt(l.shift());if(p>=0&&p<=255)if(r){var h=p>=16?"ansi-palette-"+p:u[p>7?1:0][p%8].class;f?this.fg=h:this.bg=h}else this.PALETTE_COLORS||this.setupPalette(),f?this.fg=this.PALETTE_COLORS[p]:this.bg=this.PALETTE_COLORS[p]}else if("2"===d&&l.length>=3){var m=parseInt(l.shift()),g=parseInt(l.shift()),v=parseInt(l.shift());if(m>=0&&m<=255&&g>=0&&g<=255&&v>=0&&v<=255){var y=m+", "+g+", "+v;r?f?(this.fg="ansi-truecolor",this.fg_truecolor=y):(this.bg="ansi-truecolor",this.bg_truecolor=y):f?this.fg=y:this.bg=y}}}}}if(null===this.fg&&null===this.bg&&null===this.decoration)return i;return i.fg=this.fg,i.bg=this.bg,i.fg_truecolor=this.fg_truecolor,i.bg_truecolor=this.bg_truecolor,i.decoration=this.decoration,i.was_processed=!0,i}},{key:"processChunk",value:function(e,t,n){var r=this;t=t||{};var u=this.processChunkJson(e,t,n);if(t.json)return u;if(u.isEmpty())return"";if(!u.was_processed)return u.content;var o=t.use_classes,i=[],a=[],l={},c=function(e){var t=[],n=void 0;for(n in e)e.hasOwnProperty(n)&&t.push("data-"+n+\'="\'+r.escapeForHtml(e[n])+\'"\');return t.length>0?" "+t.join(" "):""};return u.fg&&(o?(a.push(u.fg+"-fg"),null!==u.fg_truecolor&&(l["ansi-truecolor-fg"]=u.fg_truecolor,u.fg_truecolor=null)):i.push("color:rgb("+u.fg+")")),u.bg&&(o?(a.push(u.bg+"-bg"),null!==u.bg_truecolor&&(l["ansi-truecolor-bg"]=u.bg_truecolor,u.bg_truecolor=null)):i.push("background-color:rgb("+u.bg+")")),u.decoration&&(o?a.push("ansi-"+u.decoration):"bold"===u.decoration?i.push("font-weight:bold"):"dim"===u.decoration?i.push("opacity:0.5"):"italic"===u.decoration?i.push("font-style:italic"):"reverse"===u.decoration?i.push("filter:invert(100%)"):"hidden"===u.decoration?i.push("visibility:hidden"):"strikethrough"===u.decoration?i.push("text-decoration:line-through"):i.push("text-decoration:"+u.decoration)),o?\'<span class="\'+a.join(" ")+\'"\'+c(l)+">"+u.content+"</span>":\'<span style="\'+i.join(";")+\'"\'+c(l)+">"+u.content+"</span>"}}]),e}();e.exports=o},function(e,t,n){var r=n(16),u=n(35),o=n(23),i=n(20),a=n(28),l=n(11),c=n(55),s=Object.getOwnPropertyDescriptor;t.f=r?s:function(e,t){if(e=i(e),t=a(t,!0),c)try{return s(e,t)}catch(e){}if(l(e,t))return o(!u.f.call(e,t),e[t])}},function(e,t,n){"use strict";var r={}.propertyIsEnumerable,u=Object.getOwnPropertyDescriptor,o=u&&!r.call({1:2},1);t.f=o?function(e){var t=u(this,e);return!!t&&t.enumerable}:r},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){e.exports=function(e){if(void 0==e)throw TypeError("Can\'t call method on "+e);return e}},function(e,t,n){var r=n(5),u=n(17);e.exports=function(e,t){try{u(r,e,t)}catch(n){r[e]=t}return t}},function(e,t,n){var r=n(59),u=n(41).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,u)}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(63),u=n(6)("iterator"),o=n(27);e.exports=function(e){if(void 0!=e)return e[u]||e["@@iterator"]||o[r(e)]}},function(e,t,n){var r=n(59),u=n(41);e.exports=Object.keys||function(e){return r(e,u)}},function(e,t,n){"use strict";var r=n(1),u=n(98),o=n(70),i=n(67),a=n(22),l=n(17),c=n(21),s=n(3),f=n(6)("iterator"),d=n(27),p=n(69),h=p.IteratorPrototype,m=p.BUGGY_SAFARI_ITERATORS,g=function(){return this};e.exports=function(e,t,n,p,v,y,D){u(n,t,p);var b,A,C,E=function(e){if(e===v&&k)return k;if(!m&&e in x)return x[e];switch(e){case"keys":case"values":case"entries":return function(){return new n(this,e)}}return function(){return new n(this)}},F=t+" Iterator",w=!1,x=e.prototype,B=x[f]||x["@@iterator"]||v&&x[v],k=!m&&B||E(v),S="Array"==t&&x.entries||B;if(S&&(b=o(S.call(new e)),h!==Object.prototype&&b.next&&(s||o(b)===h||(i?i(b,h):"function"!=typeof b[f]&&l(b,f,g)),a(b,F,!0,!0),s&&(d[F]=g))),"values"==v&&B&&"values"!==B.name&&(w=!0,k=function(){return B.call(this)}),s&&!D||x[f]===k||l(x,f,k),d[t]=k,v)if(A={values:E("values"),keys:y?k:E("keys"),entries:E("entries")},D)for(C in A)!m&&!w&&C in x||c(x,C,A[C]);else r({target:t,proto:!0,forced:m||w},A);return A}},function(e,t,n){var r=n(37);e.exports=function(e){return Object(r(e))}},function(e,t,n){var r=n(2),u=n(43);e.exports=function(e){var t=u(e);if("function"!=typeof t)throw TypeError(String(e)+" is not iterable");return r(t.call(e))}},function(e,t,n){var r=n(36);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"===typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var r=Object.getOwnPropertySymbols,u=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,i,a=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var c in n=Object(arguments[l]))u.call(n,c)&&(a[c]=n[c]);if(r){i=r(n);for(var s=0;s<i.length;s++)o.call(n,i[s])&&(a[i[s]]=n[i[s]])}}return a}},function(e,t){var n,r,u=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"===typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"===typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var l,c=[],s=!1,f=-1;function d(){s&&l&&(s=!1,l.length?c=l.concat(c):f=-1,c.length&&p())}function p(){if(!s){var e=a(d);s=!0;for(var t=c.length;t;){for(l=c,c=[];++f<t;)l&&l[f].run();f=-1,t=c.length}l=null,s=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}u.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new h(e,t)),1!==c.length||s||a(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},u.title="browser",u.browser=!0,u.env={},u.argv=[],u.version="",u.versions={},u.on=m,u.addListener=m,u.once=m,u.off=m,u.removeListener=m,u.removeAllListeners=m,u.emit=m,u.prependListener=m,u.prependOnceListener=m,u.listeners=function(e){return[]},u.binding=function(e){throw new Error("process.binding is not supported")},u.cwd=function(){return"/"},u.chdir=function(e){throw new Error("process.chdir is not supported")},u.umask=function(){return 0}},function(e,t,n){"use strict";!function e(){if("undefined"!==typeof{}&&"function"===typeof{}.checkDCE)try{({}).checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(179)},function(e,t,n){"use strict";var r=n(5),u=n(54),o=n(1),i=n(21),a=n(60),l=n(9),c=n(65),s=n(10),f=n(12),d=n(66),p=n(22),h=n(93);e.exports=function(e,t,n,m,g){var v=r[e],y=v&&v.prototype,D=v,b=m?"set":"add",A={},C=function(e){var t=y[e];i(y,e,"add"==e?function(e){return t.call(this,0===e?0:e),this}:"delete"==e?function(e){return!(g&&!s(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return g&&!s(e)?void 0:t.call(this,0===e?0:e)}:"has"==e?function(e){return!(g&&!s(e))&&t.call(this,0===e?0:e)}:function(e,n){return t.call(this,0===e?0:e,n),this})};if(u(e,"function"!=typeof v||!(g||y.forEach&&!f(function(){(new v).entries().next()}))))D=n.getConstructor(t,e,m,b),a.REQUIRED=!0;else if(u(e,!0)){var E=new D,F=E[b](g?{}:-0,1)!=E,w=f(function(){E.has(1)}),x=d(function(e){new v(e)}),B=!g&&f(function(){for(var e=new v,t=5;t--;)e[b](t,t);return!e.has(-0)});x||((D=t(function(t,n){c(t,D,e);var r=h(new v,t,D);return void 0!=n&&l(n,r[b],r,m),r})).prototype=y,y.constructor=D),(w||B)&&(C("delete"),C("has"),m&&C("get")),(B||F)&&C(b),g&&y.clear&&delete y.clear}return A[e]=D,o({global:!0,forced:D!=v},A),p(D,e),g||n.setStrong(D,e,m),D}},function(e,t,n){var r=n(12),u=/#|\\.prototype\\./,o=function(e,t){var n=a[i(e)];return n==c||n!=l&&("function"==typeof t?r(t):!!t)},i=o.normalize=function(e){return String(e).replace(u,".").toLowerCase()},a=o.data={},l=o.NATIVE="N",c=o.POLYFILL="P";e.exports=o},function(e,t,n){e.exports=!n(16)&&!n(12)(function(){return 7!=Object.defineProperty(n(56)("div"),"a",{get:function(){return 7}}).a})},function(e,t,n){var r=n(10),u=n(5).document,o=r(u)&&r(u.createElement);e.exports=function(e){return o?u.createElement(e):{}}},function(e,t,n){e.exports=n(24)("native-function-to-string",Function.toString)},function(e,t,n){var r=n(11),u=n(89),o=n(34),i=n(13);e.exports=function(e,t){for(var n=u(t),a=i.f,l=o.f,c=0;c<n.length;c++){var s=n[c];r(e,s)||a(e,s,l(t,s))}}},function(e,t,n){var r=n(11),u=n(20),o=n(90)(!1),i=n(26);e.exports=function(e,t){var n,a=u(e),l=0,c=[];for(n in a)!r(i,n)&&r(a,n)&&c.push(n);for(;t.length>l;)r(a,n=t[l++])&&(~o(c,n)||c.push(n));return c}},function(e,t,n){var r=n(30)("meta"),u=n(92),o=n(10),i=n(11),a=n(13).f,l=0,c=Object.isExtensible||function(){return!0},s=function(e){a(e,r,{value:{objectID:"O"+ ++l,weakData:{}}})},f=e.exports={REQUIRED:!1,fastKey:function(e,t){if(!o(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!i(e,r)){if(!c(e))return"F";if(!t)return"E";s(e)}return e[r].objectID},getWeakData:function(e,t){if(!i(e,r)){if(!c(e))return!0;if(!t)return!1;s(e)}return e[r].weakData},onFreeze:function(e){return u&&f.REQUIRED&&c(e)&&!i(e,r)&&s(e),e}};n(26)[r]=!0},function(e,t,n){var r=n(27),u=n(6)("iterator"),o=Array.prototype;e.exports=function(e){return void 0!==e&&(r.Array===e||o[u]===e)}},function(e,t,n){e.exports=!n(12)(function(){return!String(Symbol())})},function(e,t,n){var r=n(36),u=n(6)("toStringTag"),o="Arguments"==r(function(){return arguments}());e.exports=function(e){var t,n,i;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),u))?n:o?r(t):"Object"==(i=r(t))&&"function"==typeof t.callee?"Arguments":i}},function(e,t,n){var r=n(2);e.exports=function(e,t,n,u){try{return u?t(r(n)[0],n[1]):t(n)}catch(t){var o=e.return;throw void 0!==o&&r(o.call(e)),t}}},function(e,t){e.exports=function(e,t,n){if(!(e instanceof t))throw TypeError("Incorrect "+(n?n+" ":"")+"invocation");return e}},function(e,t,n){var r=n(6)("iterator"),u=!1;try{var o=0,i={next:function(){return{done:!!o++}},return:function(){u=!0}};i[r]=function(){return this},Array.from(i,function(){throw 2})}catch(e){}e.exports=function(e,t){if(!t&&!u)return!1;var n=!1;try{var o={};o[r]=function(){return{next:function(){return{done:n=!0}}}},e(o)}catch(e){}return n}},function(e,t,n){var r=n(94);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),t=n instanceof Array}catch(e){}return function(n,u){return r(n,u),t?e.call(n,u):n.__proto__=u,n}}():void 0)},function(e,t,n){"use strict";var r=n(13).f,u=n(32),o=n(97),i=n(7),a=n(65),l=n(9),c=n(45),s=n(100),f=n(16),d=n(60).fastKey,p=n(25),h=p.set,m=p.getterFor;e.exports={getConstructor:function(e,t,n,c){var s=e(function(e,r){a(e,s,t),h(e,{type:t,index:u(null),first:void 0,last:void 0,size:0}),f||(e.size=0),void 0!=r&&l(r,e[c],e,n)}),p=m(t),g=function(e,t,n){var r,u,o=p(e),i=v(e,t);return i?i.value=n:(o.last=i={index:u=d(t,!0),key:t,value:n,previous:r=o.last,next:void 0,removed:!1},o.first||(o.first=i),r&&(r.next=i),f?o.size++:e.size++,"F"!==u&&(o.index[u]=i)),e},v=function(e,t){var n,r=p(e),u=d(t);if("F"!==u)return r.index[u];for(n=r.first;n;n=n.next)if(n.key==t)return n};return o(s.prototype,{clear:function(){for(var e=p(this),t=e.index,n=e.first;n;)n.removed=!0,n.previous&&(n.previous=n.previous.next=void 0),delete t[n.index],n=n.next;e.first=e.last=void 0,f?e.size=0:this.size=0},delete:function(e){var t=p(this),n=v(this,e);if(n){var r=n.next,u=n.previous;delete t.index[n.index],n.removed=!0,u&&(u.next=r),r&&(r.previous=u),t.first==n&&(t.first=r),t.last==n&&(t.last=u),f?t.size--:this.size--}return!!n},forEach:function(e){for(var t,n=p(this),r=i(e,arguments.length>1?arguments[1]:void 0,3);t=t?t.next:n.first;)for(r(t.value,t.key,this);t&&t.removed;)t=t.previous},has:function(e){return!!v(this,e)}}),o(s.prototype,n?{get:function(e){var t=v(this,e);return t&&t.value},set:function(e,t){return g(this,0===e?0:e,t)}}:{add:function(e){return g(this,e=0===e?0:e,e)}}),f&&r(s.prototype,"size",{get:function(){return p(this).size}}),s},setStrong:function(e,t,n){var r=t+" Iterator",u=m(t),o=m(r);c(e,t,function(e,t){h(this,{type:r,target:e,state:u(e),kind:t,last:void 0})},function(){for(var e=o(this),t=e.kind,n=e.last;n&&n.removed;)n=n.previous;return e.target&&(e.last=n=n?n.next:e.state.first)?"keys"==t?{value:n.key,done:!1}:"values"==t?{value:n.value,done:!1}:{value:[n.key,n.value],done:!1}:(e.target=void 0,{value:void 0,done:!0})},n?"entries":"values",!n,!0),s(t)}}},function(e,t,n){"use strict";var r,u,o,i=n(70),a=n(17),l=n(11),c=n(3),s=n(6)("iterator"),f=!1;[].keys&&("next"in(o=[].keys())?(u=i(i(o)))!==Object.prototype&&(r=u):f=!0),void 0==r&&(r={}),c||l(r,s)||a(r,s,function(){return this}),e.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:f}},function(e,t,n){var r=n(11),u=n(46),o=n(29)("IE_PROTO"),i=n(99),a=Object.prototype;e.exports=i?Object.getPrototypeOf:function(e){return e=u(e),r(e,o)?e[o]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},function(e,t,n){e.exports=n(5)},function(e,t,n){var r=n(101),u=Object.prototype;r!==u.toString&&n(21)(u,"toString",r,{unsafe:!0})},function(e,t,n){"use strict";var r=n(103),u=n(25),o=n(45),i=u.set,a=u.getterFor("String Iterator");o(String,"String",function(e){i(this,{type:"String Iterator",string:String(e),index:0})},function(){var e,t=a(this),n=t.string,u=t.index;return u>=n.length?{value:void 0,done:!0}:(e=r(n,u,!0),t.index+=e.length,{value:e,done:!1})})},function(e,t,n){"use strict";var r=n(2),u=n(4);e.exports=function(){for(var e=r(this),t=u(e.delete),n=!0,o=0,i=arguments.length;o<i;o++)n=n&&t.call(e,arguments[o]);return!!n}},function(e,t,n){"use strict";var r=n(4),u=n(7),o=n(9);e.exports=function(e){var t,n,i,a,l=arguments[1];return r(this),(t=void 0!==l)&&r(l),void 0==e?new this:(n=[],t?(i=0,a=u(l,arguments[2],2),o(e,function(e){n.push(a(e,i++))})):o(e,n.push,n),new this(n))}},function(e,t,n){"use strict";e.exports=function(){for(var e=arguments.length,t=new Array(e);e--;)t[e]=arguments[e];return new this(t)}},function(e,t,n){t.f=n(6)},function(e,t,n){"use strict";var r=n(28),u=n(13),o=n(23);e.exports=function(e,t,n){var i=r(t);i in e?u.f(e,i,o(0,n)):e[i]=n}},function(e,t,n){"use strict";var r=n(173);function u(){}var o=null,i={};function a(e){if("object"!==typeof this)throw new TypeError("Promises must be constructed via new");if("function"!==typeof e)throw new TypeError("Promise constructor\'s argument is not a function");this._h=0,this._i=0,this._j=null,this._k=null,e!==u&&p(e,this)}function l(e,t){for(;3===e._i;)e=e._j;if(a._l&&a._l(e),0===e._i)return 0===e._h?(e._h=1,void(e._k=t)):1===e._h?(e._h=2,void(e._k=[e._k,t])):void e._k.push(t);!function(e,t){r(function(){var n=1===e._i?t.onFulfilled:t.onRejected;if(null!==n){var r=function(e,t){try{return e(t)}catch(e){return o=e,i}}(n,e._j);r===i?s(t.promise,o):c(t.promise,r)}else 1===e._i?c(t.promise,e._j):s(t.promise,e._j)})}(e,t)}function c(e,t){if(t===e)return s(e,new TypeError("A promise cannot be resolved with itself."));if(t&&("object"===typeof t||"function"===typeof t)){var n=function(e){try{return e.then}catch(e){return o=e,i}}(t);if(n===i)return s(e,o);if(n===e.then&&t instanceof a)return e._i=3,e._j=t,void f(e);if("function"===typeof n)return void p(n.bind(t),e)}e._i=1,e._j=t,f(e)}function s(e,t){e._i=2,e._j=t,a._m&&a._m(e,t),f(e)}function f(e){if(1===e._h&&(l(e,e._k),e._k=null),2===e._h){for(var t=0;t<e._k.length;t++)l(e,e._k[t]);e._k=null}}function d(e,t,n){this.onFulfilled="function"===typeof e?e:null,this.onRejected="function"===typeof t?t:null,this.promise=n}function p(e,t){var n=!1,r=function(e,t,n){try{e(t,n)}catch(e){return o=e,i}}(e,function(e){n||(n=!0,c(t,e))},function(e){n||(n=!0,s(t,e))});n||r!==i||(n=!0,s(t,o))}e.exports=a,a._l=null,a._m=null,a._n=u,a.prototype.then=function(e,t){if(this.constructor!==a)return function(e,t,n){return new e.constructor(function(r,o){var i=new a(u);i.then(r,o),l(e,new d(t,n,i))})}(this,e,t);var n=new a(u);return l(this,new d(e,t,n)),n}},function(e,t){var n=[["Aacute",[193]],["aacute",[225]],["Abreve",[258]],["abreve",[259]],["ac",[8766]],["acd",[8767]],["acE",[8766,819]],["Acirc",[194]],["acirc",[226]],["acute",[180]],["Acy",[1040]],["acy",[1072]],["AElig",[198]],["aelig",[230]],["af",[8289]],["Afr",[120068]],["afr",[120094]],["Agrave",[192]],["agrave",[224]],["alefsym",[8501]],["aleph",[8501]],["Alpha",[913]],["alpha",[945]],["Amacr",[256]],["amacr",[257]],["amalg",[10815]],["amp",[38]],["AMP",[38]],["andand",[10837]],["And",[10835]],["and",[8743]],["andd",[10844]],["andslope",[10840]],["andv",[10842]],["ang",[8736]],["ange",[10660]],["angle",[8736]],["angmsdaa",[10664]],["angmsdab",[10665]],["angmsdac",[10666]],["angmsdad",[10667]],["angmsdae",[10668]],["angmsdaf",[10669]],["angmsdag",[10670]],["angmsdah",[10671]],["angmsd",[8737]],["angrt",[8735]],["angrtvb",[8894]],["angrtvbd",[10653]],["angsph",[8738]],["angst",[197]],["angzarr",[9084]],["Aogon",[260]],["aogon",[261]],["Aopf",[120120]],["aopf",[120146]],["apacir",[10863]],["ap",[8776]],["apE",[10864]],["ape",[8778]],["apid",[8779]],["apos",[39]],["ApplyFunction",[8289]],["approx",[8776]],["approxeq",[8778]],["Aring",[197]],["aring",[229]],["Ascr",[119964]],["ascr",[119990]],["Assign",[8788]],["ast",[42]],["asymp",[8776]],["asympeq",[8781]],["Atilde",[195]],["atilde",[227]],["Auml",[196]],["auml",[228]],["awconint",[8755]],["awint",[10769]],["backcong",[8780]],["backepsilon",[1014]],["backprime",[8245]],["backsim",[8765]],["backsimeq",[8909]],["Backslash",[8726]],["Barv",[10983]],["barvee",[8893]],["barwed",[8965]],["Barwed",[8966]],["barwedge",[8965]],["bbrk",[9141]],["bbrktbrk",[9142]],["bcong",[8780]],["Bcy",[1041]],["bcy",[1073]],["bdquo",[8222]],["becaus",[8757]],["because",[8757]],["Because",[8757]],["bemptyv",[10672]],["bepsi",[1014]],["bernou",[8492]],["Bernoullis",[8492]],["Beta",[914]],["beta",[946]],["beth",[8502]],["between",[8812]],["Bfr",[120069]],["bfr",[120095]],["bigcap",[8898]],["bigcirc",[9711]],["bigcup",[8899]],["bigodot",[10752]],["bigoplus",[10753]],["bigotimes",[10754]],["bigsqcup",[10758]],["bigstar",[9733]],["bigtriangledown",[9661]],["bigtriangleup",[9651]],["biguplus",[10756]],["bigvee",[8897]],["bigwedge",[8896]],["bkarow",[10509]],["blacklozenge",[10731]],["blacksquare",[9642]],["blacktriangle",[9652]],["blacktriangledown",[9662]],["blacktriangleleft",[9666]],["blacktriangleright",[9656]],["blank",[9251]],["blk12",[9618]],["blk14",[9617]],["blk34",[9619]],["block",[9608]],["bne",[61,8421]],["bnequiv",[8801,8421]],["bNot",[10989]],["bnot",[8976]],["Bopf",[120121]],["bopf",[120147]],["bot",[8869]],["bottom",[8869]],["bowtie",[8904]],["boxbox",[10697]],["boxdl",[9488]],["boxdL",[9557]],["boxDl",[9558]],["boxDL",[9559]],["boxdr",[9484]],["boxdR",[9554]],["boxDr",[9555]],["boxDR",[9556]],["boxh",[9472]],["boxH",[9552]],["boxhd",[9516]],["boxHd",[9572]],["boxhD",[9573]],["boxHD",[9574]],["boxhu",[9524]],["boxHu",[9575]],["boxhU",[9576]],["boxHU",[9577]],["boxminus",[8863]],["boxplus",[8862]],["boxtimes",[8864]],["boxul",[9496]],["boxuL",[9563]],["boxUl",[9564]],["boxUL",[9565]],["boxur",[9492]],["boxuR",[9560]],["boxUr",[9561]],["boxUR",[9562]],["boxv",[9474]],["boxV",[9553]],["boxvh",[9532]],["boxvH",[9578]],["boxVh",[9579]],["boxVH",[9580]],["boxvl",[9508]],["boxvL",[9569]],["boxVl",[9570]],["boxVL",[9571]],["boxvr",[9500]],["boxvR",[9566]],["boxVr",[9567]],["boxVR",[9568]],["bprime",[8245]],["breve",[728]],["Breve",[728]],["brvbar",[166]],["bscr",[119991]],["Bscr",[8492]],["bsemi",[8271]],["bsim",[8765]],["bsime",[8909]],["bsolb",[10693]],["bsol",[92]],["bsolhsub",[10184]],["bull",[8226]],["bullet",[8226]],["bump",[8782]],["bumpE",[10926]],["bumpe",[8783]],["Bumpeq",[8782]],["bumpeq",[8783]],["Cacute",[262]],["cacute",[263]],["capand",[10820]],["capbrcup",[10825]],["capcap",[10827]],["cap",[8745]],["Cap",[8914]],["capcup",[10823]],["capdot",[10816]],["CapitalDifferentialD",[8517]],["caps",[8745,65024]],["caret",[8257]],["caron",[711]],["Cayleys",[8493]],["ccaps",[10829]],["Ccaron",[268]],["ccaron",[269]],["Ccedil",[199]],["ccedil",[231]],["Ccirc",[264]],["ccirc",[265]],["Cconint",[8752]],["ccups",[10828]],["ccupssm",[10832]],["Cdot",[266]],["cdot",[267]],["cedil",[184]],["Cedilla",[184]],["cemptyv",[10674]],["cent",[162]],["centerdot",[183]],["CenterDot",[183]],["cfr",[120096]],["Cfr",[8493]],["CHcy",[1063]],["chcy",[1095]],["check",[10003]],["checkmark",[10003]],["Chi",[935]],["chi",[967]],["circ",[710]],["circeq",[8791]],["circlearrowleft",[8634]],["circlearrowright",[8635]],["circledast",[8859]],["circledcirc",[8858]],["circleddash",[8861]],["CircleDot",[8857]],["circledR",[174]],["circledS",[9416]],["CircleMinus",[8854]],["CirclePlus",[8853]],["CircleTimes",[8855]],["cir",[9675]],["cirE",[10691]],["cire",[8791]],["cirfnint",[10768]],["cirmid",[10991]],["cirscir",[10690]],["ClockwiseContourIntegral",[8754]],["clubs",[9827]],["clubsuit",[9827]],["colon",[58]],["Colon",[8759]],["Colone",[10868]],["colone",[8788]],["coloneq",[8788]],["comma",[44]],["commat",[64]],["comp",[8705]],["compfn",[8728]],["complement",[8705]],["complexes",[8450]],["cong",[8773]],["congdot",[10861]],["Congruent",[8801]],["conint",[8750]],["Conint",[8751]],["ContourIntegral",[8750]],["copf",[120148]],["Copf",[8450]],["coprod",[8720]],["Coproduct",[8720]],["copy",[169]],["COPY",[169]],["copysr",[8471]],["CounterClockwiseContourIntegral",[8755]],["crarr",[8629]],["cross",[10007]],["Cross",[10799]],["Cscr",[119966]],["cscr",[119992]],["csub",[10959]],["csube",[10961]],["csup",[10960]],["csupe",[10962]],["ctdot",[8943]],["cudarrl",[10552]],["cudarrr",[10549]],["cuepr",[8926]],["cuesc",[8927]],["cularr",[8630]],["cularrp",[10557]],["cupbrcap",[10824]],["cupcap",[10822]],["CupCap",[8781]],["cup",[8746]],["Cup",[8915]],["cupcup",[10826]],["cupdot",[8845]],["cupor",[10821]],["cups",[8746,65024]],["curarr",[8631]],["curarrm",[10556]],["curlyeqprec",[8926]],["curlyeqsucc",[8927]],["curlyvee",[8910]],["curlywedge",[8911]],["curren",[164]],["curvearrowleft",[8630]],["curvearrowright",[8631]],["cuvee",[8910]],["cuwed",[8911]],["cwconint",[8754]],["cwint",[8753]],["cylcty",[9005]],["dagger",[8224]],["Dagger",[8225]],["daleth",[8504]],["darr",[8595]],["Darr",[8609]],["dArr",[8659]],["dash",[8208]],["Dashv",[10980]],["dashv",[8867]],["dbkarow",[10511]],["dblac",[733]],["Dcaron",[270]],["dcaron",[271]],["Dcy",[1044]],["dcy",[1076]],["ddagger",[8225]],["ddarr",[8650]],["DD",[8517]],["dd",[8518]],["DDotrahd",[10513]],["ddotseq",[10871]],["deg",[176]],["Del",[8711]],["Delta",[916]],["delta",[948]],["demptyv",[10673]],["dfisht",[10623]],["Dfr",[120071]],["dfr",[120097]],["dHar",[10597]],["dharl",[8643]],["dharr",[8642]],["DiacriticalAcute",[180]],["DiacriticalDot",[729]],["DiacriticalDoubleAcute",[733]],["DiacriticalGrave",[96]],["DiacriticalTilde",[732]],["diam",[8900]],["diamond",[8900]],["Diamond",[8900]],["diamondsuit",[9830]],["diams",[9830]],["die",[168]],["DifferentialD",[8518]],["digamma",[989]],["disin",[8946]],["div",[247]],["divide",[247]],["divideontimes",[8903]],["divonx",[8903]],["DJcy",[1026]],["djcy",[1106]],["dlcorn",[8990]],["dlcrop",[8973]],["dollar",[36]],["Dopf",[120123]],["dopf",[120149]],["Dot",[168]],["dot",[729]],["DotDot",[8412]],["doteq",[8784]],["doteqdot",[8785]],["DotEqual",[8784]],["dotminus",[8760]],["dotplus",[8724]],["dotsquare",[8865]],["doublebarwedge",[8966]],["DoubleContourIntegral",[8751]],["DoubleDot",[168]],["DoubleDownArrow",[8659]],["DoubleLeftArrow",[8656]],["DoubleLeftRightArrow",[8660]],["DoubleLeftTee",[10980]],["DoubleLongLeftArrow",[10232]],["DoubleLongLeftRightArrow",[10234]],["DoubleLongRightArrow",[10233]],["DoubleRightArrow",[8658]],["DoubleRightTee",[8872]],["DoubleUpArrow",[8657]],["DoubleUpDownArrow",[8661]],["DoubleVerticalBar",[8741]],["DownArrowBar",[10515]],["downarrow",[8595]],["DownArrow",[8595]],["Downarrow",[8659]],["DownArrowUpArrow",[8693]],["DownBreve",[785]],["downdownarrows",[8650]],["downharpoonleft",[8643]],["downharpoonright",[8642]],["DownLeftRightVector",[10576]],["DownLeftTeeVector",[10590]],["DownLeftVectorBar",[10582]],["DownLeftVector",[8637]],["DownRightTeeVector",[10591]],["DownRightVectorBar",[10583]],["DownRightVector",[8641]],["DownTeeArrow",[8615]],["DownTee",[8868]],["drbkarow",[10512]],["drcorn",[8991]],["drcrop",[8972]],["Dscr",[119967]],["dscr",[119993]],["DScy",[1029]],["dscy",[1109]],["dsol",[10742]],["Dstrok",[272]],["dstrok",[273]],["dtdot",[8945]],["dtri",[9663]],["dtrif",[9662]],["duarr",[8693]],["duhar",[10607]],["dwangle",[10662]],["DZcy",[1039]],["dzcy",[1119]],["dzigrarr",[10239]],["Eacute",[201]],["eacute",[233]],["easter",[10862]],["Ecaron",[282]],["ecaron",[283]],["Ecirc",[202]],["ecirc",[234]],["ecir",[8790]],["ecolon",[8789]],["Ecy",[1069]],["ecy",[1101]],["eDDot",[10871]],["Edot",[278]],["edot",[279]],["eDot",[8785]],["ee",[8519]],["efDot",[8786]],["Efr",[120072]],["efr",[120098]],["eg",[10906]],["Egrave",[200]],["egrave",[232]],["egs",[10902]],["egsdot",[10904]],["el",[10905]],["Element",[8712]],["elinters",[9191]],["ell",[8467]],["els",[10901]],["elsdot",[10903]],["Emacr",[274]],["emacr",[275]],["empty",[8709]],["emptyset",[8709]],["EmptySmallSquare",[9723]],["emptyv",[8709]],["EmptyVerySmallSquare",[9643]],["emsp13",[8196]],["emsp14",[8197]],["emsp",[8195]],["ENG",[330]],["eng",[331]],["ensp",[8194]],["Eogon",[280]],["eogon",[281]],["Eopf",[120124]],["eopf",[120150]],["epar",[8917]],["eparsl",[10723]],["eplus",[10865]],["epsi",[949]],["Epsilon",[917]],["epsilon",[949]],["epsiv",[1013]],["eqcirc",[8790]],["eqcolon",[8789]],["eqsim",[8770]],["eqslantgtr",[10902]],["eqslantless",[10901]],["Equal",[10869]],["equals",[61]],["EqualTilde",[8770]],["equest",[8799]],["Equilibrium",[8652]],["equiv",[8801]],["equivDD",[10872]],["eqvparsl",[10725]],["erarr",[10609]],["erDot",[8787]],["escr",[8495]],["Escr",[8496]],["esdot",[8784]],["Esim",[10867]],["esim",[8770]],["Eta",[919]],["eta",[951]],["ETH",[208]],["eth",[240]],["Euml",[203]],["euml",[235]],["euro",[8364]],["excl",[33]],["exist",[8707]],["Exists",[8707]],["expectation",[8496]],["exponentiale",[8519]],["ExponentialE",[8519]],["fallingdotseq",[8786]],["Fcy",[1060]],["fcy",[1092]],["female",[9792]],["ffilig",[64259]],["fflig",[64256]],["ffllig",[64260]],["Ffr",[120073]],["ffr",[120099]],["filig",[64257]],["FilledSmallSquare",[9724]],["FilledVerySmallSquare",[9642]],["fjlig",[102,106]],["flat",[9837]],["fllig",[64258]],["fltns",[9649]],["fnof",[402]],["Fopf",[120125]],["fopf",[120151]],["forall",[8704]],["ForAll",[8704]],["fork",[8916]],["forkv",[10969]],["Fouriertrf",[8497]],["fpartint",[10765]],["frac12",[189]],["frac13",[8531]],["frac14",[188]],["frac15",[8533]],["frac16",[8537]],["frac18",[8539]],["frac23",[8532]],["frac25",[8534]],["frac34",[190]],["frac35",[8535]],["frac38",[8540]],["frac45",[8536]],["frac56",[8538]],["frac58",[8541]],["frac78",[8542]],["frasl",[8260]],["frown",[8994]],["fscr",[119995]],["Fscr",[8497]],["gacute",[501]],["Gamma",[915]],["gamma",[947]],["Gammad",[988]],["gammad",[989]],["gap",[10886]],["Gbreve",[286]],["gbreve",[287]],["Gcedil",[290]],["Gcirc",[284]],["gcirc",[285]],["Gcy",[1043]],["gcy",[1075]],["Gdot",[288]],["gdot",[289]],["ge",[8805]],["gE",[8807]],["gEl",[10892]],["gel",[8923]],["geq",[8805]],["geqq",[8807]],["geqslant",[10878]],["gescc",[10921]],["ges",[10878]],["gesdot",[10880]],["gesdoto",[10882]],["gesdotol",[10884]],["gesl",[8923,65024]],["gesles",[10900]],["Gfr",[120074]],["gfr",[120100]],["gg",[8811]],["Gg",[8921]],["ggg",[8921]],["gimel",[8503]],["GJcy",[1027]],["gjcy",[1107]],["gla",[10917]],["gl",[8823]],["glE",[10898]],["glj",[10916]],["gnap",[10890]],["gnapprox",[10890]],["gne",[10888]],["gnE",[8809]],["gneq",[10888]],["gneqq",[8809]],["gnsim",[8935]],["Gopf",[120126]],["gopf",[120152]],["grave",[96]],["GreaterEqual",[8805]],["GreaterEqualLess",[8923]],["GreaterFullEqual",[8807]],["GreaterGreater",[10914]],["GreaterLess",[8823]],["GreaterSlantEqual",[10878]],["GreaterTilde",[8819]],["Gscr",[119970]],["gscr",[8458]],["gsim",[8819]],["gsime",[10894]],["gsiml",[10896]],["gtcc",[10919]],["gtcir",[10874]],["gt",[62]],["GT",[62]],["Gt",[8811]],["gtdot",[8919]],["gtlPar",[10645]],["gtquest",[10876]],["gtrapprox",[10886]],["gtrarr",[10616]],["gtrdot",[8919]],["gtreqless",[8923]],["gtreqqless",[10892]],["gtrless",[8823]],["gtrsim",[8819]],["gvertneqq",[8809,65024]],["gvnE",[8809,65024]],["Hacek",[711]],["hairsp",[8202]],["half",[189]],["hamilt",[8459]],["HARDcy",[1066]],["hardcy",[1098]],["harrcir",[10568]],["harr",[8596]],["hArr",[8660]],["harrw",[8621]],["Hat",[94]],["hbar",[8463]],["Hcirc",[292]],["hcirc",[293]],["hearts",[9829]],["heartsuit",[9829]],["hellip",[8230]],["hercon",[8889]],["hfr",[120101]],["Hfr",[8460]],["HilbertSpace",[8459]],["hksearow",[10533]],["hkswarow",[10534]],["hoarr",[8703]],["homtht",[8763]],["hookleftarrow",[8617]],["hookrightarrow",[8618]],["hopf",[120153]],["Hopf",[8461]],["horbar",[8213]],["HorizontalLine",[9472]],["hscr",[119997]],["Hscr",[8459]],["hslash",[8463]],["Hstrok",[294]],["hstrok",[295]],["HumpDownHump",[8782]],["HumpEqual",[8783]],["hybull",[8259]],["hyphen",[8208]],["Iacute",[205]],["iacute",[237]],["ic",[8291]],["Icirc",[206]],["icirc",[238]],["Icy",[1048]],["icy",[1080]],["Idot",[304]],["IEcy",[1045]],["iecy",[1077]],["iexcl",[161]],["iff",[8660]],["ifr",[120102]],["Ifr",[8465]],["Igrave",[204]],["igrave",[236]],["ii",[8520]],["iiiint",[10764]],["iiint",[8749]],["iinfin",[10716]],["iiota",[8489]],["IJlig",[306]],["ijlig",[307]],["Imacr",[298]],["imacr",[299]],["image",[8465]],["ImaginaryI",[8520]],["imagline",[8464]],["imagpart",[8465]],["imath",[305]],["Im",[8465]],["imof",[8887]],["imped",[437]],["Implies",[8658]],["incare",[8453]],["in",[8712]],["infin",[8734]],["infintie",[10717]],["inodot",[305]],["intcal",[8890]],["int",[8747]],["Int",[8748]],["integers",[8484]],["Integral",[8747]],["intercal",[8890]],["Intersection",[8898]],["intlarhk",[10775]],["intprod",[10812]],["InvisibleComma",[8291]],["InvisibleTimes",[8290]],["IOcy",[1025]],["iocy",[1105]],["Iogon",[302]],["iogon",[303]],["Iopf",[120128]],["iopf",[120154]],["Iota",[921]],["iota",[953]],["iprod",[10812]],["iquest",[191]],["iscr",[119998]],["Iscr",[8464]],["isin",[8712]],["isindot",[8949]],["isinE",[8953]],["isins",[8948]],["isinsv",[8947]],["isinv",[8712]],["it",[8290]],["Itilde",[296]],["itilde",[297]],["Iukcy",[1030]],["iukcy",[1110]],["Iuml",[207]],["iuml",[239]],["Jcirc",[308]],["jcirc",[309]],["Jcy",[1049]],["jcy",[1081]],["Jfr",[120077]],["jfr",[120103]],["jmath",[567]],["Jopf",[120129]],["jopf",[120155]],["Jscr",[119973]],["jscr",[119999]],["Jsercy",[1032]],["jsercy",[1112]],["Jukcy",[1028]],["jukcy",[1108]],["Kappa",[922]],["kappa",[954]],["kappav",[1008]],["Kcedil",[310]],["kcedil",[311]],["Kcy",[1050]],["kcy",[1082]],["Kfr",[120078]],["kfr",[120104]],["kgreen",[312]],["KHcy",[1061]],["khcy",[1093]],["KJcy",[1036]],["kjcy",[1116]],["Kopf",[120130]],["kopf",[120156]],["Kscr",[119974]],["kscr",[12e4]],["lAarr",[8666]],["Lacute",[313]],["lacute",[314]],["laemptyv",[10676]],["lagran",[8466]],["Lambda",[923]],["lambda",[955]],["lang",[10216]],["Lang",[10218]],["langd",[10641]],["langle",[10216]],["lap",[10885]],["Laplacetrf",[8466]],["laquo",[171]],["larrb",[8676]],["larrbfs",[10527]],["larr",[8592]],["Larr",[8606]],["lArr",[8656]],["larrfs",[10525]],["larrhk",[8617]],["larrlp",[8619]],["larrpl",[10553]],["larrsim",[10611]],["larrtl",[8610]],["latail",[10521]],["lAtail",[10523]],["lat",[10923]],["late",[10925]],["lates",[10925,65024]],["lbarr",[10508]],["lBarr",[10510]],["lbbrk",[10098]],["lbrace",[123]],["lbrack",[91]],["lbrke",[10635]],["lbrksld",[10639]],["lbrkslu",[10637]],["Lcaron",[317]],["lcaron",[318]],["Lcedil",[315]],["lcedil",[316]],["lceil",[8968]],["lcub",[123]],["Lcy",[1051]],["lcy",[1083]],["ldca",[10550]],["ldquo",[8220]],["ldquor",[8222]],["ldrdhar",[10599]],["ldrushar",[10571]],["ldsh",[8626]],["le",[8804]],["lE",[8806]],["LeftAngleBracket",[10216]],["LeftArrowBar",[8676]],["leftarrow",[8592]],["LeftArrow",[8592]],["Leftarrow",[8656]],["LeftArrowRightArrow",[8646]],["leftarrowtail",[8610]],["LeftCeiling",[8968]],["LeftDoubleBracket",[10214]],["LeftDownTeeVector",[10593]],["LeftDownVectorBar",[10585]],["LeftDownVector",[8643]],["LeftFloor",[8970]],["leftharpoondown",[8637]],["leftharpoonup",[8636]],["leftleftarrows",[8647]],["leftrightarrow",[8596]],["LeftRightArrow",[8596]],["Leftrightarrow",[8660]],["leftrightarrows",[8646]],["leftrightharpoons",[8651]],["leftrightsquigarrow",[8621]],["LeftRightVector",[10574]],["LeftTeeArrow",[8612]],["LeftTee",[8867]],["LeftTeeVector",[10586]],["leftthreetimes",[8907]],["LeftTriangleBar",[10703]],["LeftTriangle",[8882]],["LeftTriangleEqual",[8884]],["LeftUpDownVector",[10577]],["LeftUpTeeVector",[10592]],["LeftUpVectorBar",[10584]],["LeftUpVector",[8639]],["LeftVectorBar",[10578]],["LeftVector",[8636]],["lEg",[10891]],["leg",[8922]],["leq",[8804]],["leqq",[8806]],["leqslant",[10877]],["lescc",[10920]],["les",[10877]],["lesdot",[10879]],["lesdoto",[10881]],["lesdotor",[10883]],["lesg",[8922,65024]],["lesges",[10899]],["lessapprox",[10885]],["lessdot",[8918]],["lesseqgtr",[8922]],["lesseqqgtr",[10891]],["LessEqualGreater",[8922]],["LessFullEqual",[8806]],["LessGreater",[8822]],["lessgtr",[8822]],["LessLess",[10913]],["lesssim",[8818]],["LessSlantEqual",[10877]],["LessTilde",[8818]],["lfisht",[10620]],["lfloor",[8970]],["Lfr",[120079]],["lfr",[120105]],["lg",[8822]],["lgE",[10897]],["lHar",[10594]],["lhard",[8637]],["lharu",[8636]],["lharul",[10602]],["lhblk",[9604]],["LJcy",[1033]],["ljcy",[1113]],["llarr",[8647]],["ll",[8810]],["Ll",[8920]],["llcorner",[8990]],["Lleftarrow",[8666]],["llhard",[10603]],["lltri",[9722]],["Lmidot",[319]],["lmidot",[320]],["lmoustache",[9136]],["lmoust",[9136]],["lnap",[10889]],["lnapprox",[10889]],["lne",[10887]],["lnE",[8808]],["lneq",[10887]],["lneqq",[8808]],["lnsim",[8934]],["loang",[10220]],["loarr",[8701]],["lobrk",[10214]],["longleftarrow",[10229]],["LongLeftArrow",[10229]],["Longleftarrow",[10232]],["longleftrightarrow",[10231]],["LongLeftRightArrow",[10231]],["Longleftrightarrow",[10234]],["longmapsto",[10236]],["longrightarrow",[10230]],["LongRightArrow",[10230]],["Longrightarrow",[10233]],["looparrowleft",[8619]],["looparrowright",[8620]],["lopar",[10629]],["Lopf",[120131]],["lopf",[120157]],["loplus",[10797]],["lotimes",[10804]],["lowast",[8727]],["lowbar",[95]],["LowerLeftArrow",[8601]],["LowerRightArrow",[8600]],["loz",[9674]],["lozenge",[9674]],["lozf",[10731]],["lpar",[40]],["lparlt",[10643]],["lrarr",[8646]],["lrcorner",[8991]],["lrhar",[8651]],["lrhard",[10605]],["lrm",[8206]],["lrtri",[8895]],["lsaquo",[8249]],["lscr",[120001]],["Lscr",[8466]],["lsh",[8624]],["Lsh",[8624]],["lsim",[8818]],["lsime",[10893]],["lsimg",[10895]],["lsqb",[91]],["lsquo",[8216]],["lsquor",[8218]],["Lstrok",[321]],["lstrok",[322]],["ltcc",[10918]],["ltcir",[10873]],["lt",[60]],["LT",[60]],["Lt",[8810]],["ltdot",[8918]],["lthree",[8907]],["ltimes",[8905]],["ltlarr",[10614]],["ltquest",[10875]],["ltri",[9667]],["ltrie",[8884]],["ltrif",[9666]],["ltrPar",[10646]],["lurdshar",[10570]],["luruhar",[10598]],["lvertneqq",[8808,65024]],["lvnE",[8808,65024]],["macr",[175]],["male",[9794]],["malt",[10016]],["maltese",[10016]],["Map",[10501]],["map",[8614]],["mapsto",[8614]],["mapstodown",[8615]],["mapstoleft",[8612]],["mapstoup",[8613]],["marker",[9646]],["mcomma",[10793]],["Mcy",[1052]],["mcy",[1084]],["mdash",[8212]],["mDDot",[8762]],["measuredangle",[8737]],["MediumSpace",[8287]],["Mellintrf",[8499]],["Mfr",[120080]],["mfr",[120106]],["mho",[8487]],["micro",[181]],["midast",[42]],["midcir",[10992]],["mid",[8739]],["middot",[183]],["minusb",[8863]],["minus",[8722]],["minusd",[8760]],["minusdu",[10794]],["MinusPlus",[8723]],["mlcp",[10971]],["mldr",[8230]],["mnplus",[8723]],["models",[8871]],["Mopf",[120132]],["mopf",[120158]],["mp",[8723]],["mscr",[120002]],["Mscr",[8499]],["mstpos",[8766]],["Mu",[924]],["mu",[956]],["multimap",[8888]],["mumap",[8888]],["nabla",[8711]],["Nacute",[323]],["nacute",[324]],["nang",[8736,8402]],["nap",[8777]],["napE",[10864,824]],["napid",[8779,824]],["napos",[329]],["napprox",[8777]],["natural",[9838]],["naturals",[8469]],["natur",[9838]],["nbsp",[160]],["nbump",[8782,824]],["nbumpe",[8783,824]],["ncap",[10819]],["Ncaron",[327]],["ncaron",[328]],["Ncedil",[325]],["ncedil",[326]],["ncong",[8775]],["ncongdot",[10861,824]],["ncup",[10818]],["Ncy",[1053]],["ncy",[1085]],["ndash",[8211]],["nearhk",[10532]],["nearr",[8599]],["neArr",[8663]],["nearrow",[8599]],["ne",[8800]],["nedot",[8784,824]],["NegativeMediumSpace",[8203]],["NegativeThickSpace",[8203]],["NegativeThinSpace",[8203]],["NegativeVeryThinSpace",[8203]],["nequiv",[8802]],["nesear",[10536]],["nesim",[8770,824]],["NestedGreaterGreater",[8811]],["NestedLessLess",[8810]],["nexist",[8708]],["nexists",[8708]],["Nfr",[120081]],["nfr",[120107]],["ngE",[8807,824]],["nge",[8817]],["ngeq",[8817]],["ngeqq",[8807,824]],["ngeqslant",[10878,824]],["nges",[10878,824]],["nGg",[8921,824]],["ngsim",[8821]],["nGt",[8811,8402]],["ngt",[8815]],["ngtr",[8815]],["nGtv",[8811,824]],["nharr",[8622]],["nhArr",[8654]],["nhpar",[10994]],["ni",[8715]],["nis",[8956]],["nisd",[8954]],["niv",[8715]],["NJcy",[1034]],["njcy",[1114]],["nlarr",[8602]],["nlArr",[8653]],["nldr",[8229]],["nlE",[8806,824]],["nle",[8816]],["nleftarrow",[8602]],["nLeftarrow",[8653]],["nleftrightarrow",[8622]],["nLeftrightarrow",[8654]],["nleq",[8816]],["nleqq",[8806,824]],["nleqslant",[10877,824]],["nles",[10877,824]],["nless",[8814]],["nLl",[8920,824]],["nlsim",[8820]],["nLt",[8810,8402]],["nlt",[8814]],["nltri",[8938]],["nltrie",[8940]],["nLtv",[8810,824]],["nmid",[8740]],["NoBreak",[8288]],["NonBreakingSpace",[160]],["nopf",[120159]],["Nopf",[8469]],["Not",[10988]],["not",[172]],["NotCongruent",[8802]],["NotCupCap",[8813]],["NotDoubleVerticalBar",[8742]],["NotElement",[8713]],["NotEqual",[8800]],["NotEqualTilde",[8770,824]],["NotExists",[8708]],["NotGreater",[8815]],["NotGreaterEqual",[8817]],["NotGreaterFullEqual",[8807,824]],["NotGreaterGreater",[8811,824]],["NotGreaterLess",[8825]],["NotGreaterSlantEqual",[10878,824]],["NotGreaterTilde",[8821]],["NotHumpDownHump",[8782,824]],["NotHumpEqual",[8783,824]],["notin",[8713]],["notindot",[8949,824]],["notinE",[8953,824]],["notinva",[8713]],["notinvb",[8951]],["notinvc",[8950]],["NotLeftTriangleBar",[10703,824]],["NotLeftTriangle",[8938]],["NotLeftTriangleEqual",[8940]],["NotLess",[8814]],["NotLessEqual",[8816]],["NotLessGreater",[8824]],["NotLessLess",[8810,824]],["NotLessSlantEqual",[10877,824]],["NotLessTilde",[8820]],["NotNestedGreaterGreater",[10914,824]],["NotNestedLessLess",[10913,824]],["notni",[8716]],["notniva",[8716]],["notnivb",[8958]],["notnivc",[8957]],["NotPrecedes",[8832]],["NotPrecedesEqual",[10927,824]],["NotPrecedesSlantEqual",[8928]],["NotReverseElement",[8716]],["NotRightTriangleBar",[10704,824]],["NotRightTriangle",[8939]],["NotRightTriangleEqual",[8941]],["NotSquareSubset",[8847,824]],["NotSquareSubsetEqual",[8930]],["NotSquareSuperset",[8848,824]],["NotSquareSupersetEqual",[8931]],["NotSubset",[8834,8402]],["NotSubsetEqual",[8840]],["NotSucceeds",[8833]],["NotSucceedsEqual",[10928,824]],["NotSucceedsSlantEqual",[8929]],["NotSucceedsTilde",[8831,824]],["NotSuperset",[8835,8402]],["NotSupersetEqual",[8841]],["NotTilde",[8769]],["NotTildeEqual",[8772]],["NotTildeFullEqual",[8775]],["NotTildeTilde",[8777]],["NotVerticalBar",[8740]],["nparallel",[8742]],["npar",[8742]],["nparsl",[11005,8421]],["npart",[8706,824]],["npolint",[10772]],["npr",[8832]],["nprcue",[8928]],["nprec",[8832]],["npreceq",[10927,824]],["npre",[10927,824]],["nrarrc",[10547,824]],["nrarr",[8603]],["nrArr",[8655]],["nrarrw",[8605,824]],["nrightarrow",[8603]],["nRightarrow",[8655]],["nrtri",[8939]],["nrtrie",[8941]],["nsc",[8833]],["nsccue",[8929]],["nsce",[10928,824]],["Nscr",[119977]],["nscr",[120003]],["nshortmid",[8740]],["nshortparallel",[8742]],["nsim",[8769]],["nsime",[8772]],["nsimeq",[8772]],["nsmid",[8740]],["nspar",[8742]],["nsqsube",[8930]],["nsqsupe",[8931]],["nsub",[8836]],["nsubE",[10949,824]],["nsube",[8840]],["nsubset",[8834,8402]],["nsubseteq",[8840]],["nsubseteqq",[10949,824]],["nsucc",[8833]],["nsucceq",[10928,824]],["nsup",[8837]],["nsupE",[10950,824]],["nsupe",[8841]],["nsupset",[8835,8402]],["nsupseteq",[8841]],["nsupseteqq",[10950,824]],["ntgl",[8825]],["Ntilde",[209]],["ntilde",[241]],["ntlg",[8824]],["ntriangleleft",[8938]],["ntrianglelefteq",[8940]],["ntriangleright",[8939]],["ntrianglerighteq",[8941]],["Nu",[925]],["nu",[957]],["num",[35]],["numero",[8470]],["numsp",[8199]],["nvap",[8781,8402]],["nvdash",[8876]],["nvDash",[8877]],["nVdash",[8878]],["nVDash",[8879]],["nvge",[8805,8402]],["nvgt",[62,8402]],["nvHarr",[10500]],["nvinfin",[10718]],["nvlArr",[10498]],["nvle",[8804,8402]],["nvlt",[60,8402]],["nvltrie",[8884,8402]],["nvrArr",[10499]],["nvrtrie",[8885,8402]],["nvsim",[8764,8402]],["nwarhk",[10531]],["nwarr",[8598]],["nwArr",[8662]],["nwarrow",[8598]],["nwnear",[10535]],["Oacute",[211]],["oacute",[243]],["oast",[8859]],["Ocirc",[212]],["ocirc",[244]],["ocir",[8858]],["Ocy",[1054]],["ocy",[1086]],["odash",[8861]],["Odblac",[336]],["odblac",[337]],["odiv",[10808]],["odot",[8857]],["odsold",[10684]],["OElig",[338]],["oelig",[339]],["ofcir",[10687]],["Ofr",[120082]],["ofr",[120108]],["ogon",[731]],["Ograve",[210]],["ograve",[242]],["ogt",[10689]],["ohbar",[10677]],["ohm",[937]],["oint",[8750]],["olarr",[8634]],["olcir",[10686]],["olcross",[10683]],["oline",[8254]],["olt",[10688]],["Omacr",[332]],["omacr",[333]],["Omega",[937]],["omega",[969]],["Omicron",[927]],["omicron",[959]],["omid",[10678]],["ominus",[8854]],["Oopf",[120134]],["oopf",[120160]],["opar",[10679]],["OpenCurlyDoubleQuote",[8220]],["OpenCurlyQuote",[8216]],["operp",[10681]],["oplus",[8853]],["orarr",[8635]],["Or",[10836]],["or",[8744]],["ord",[10845]],["order",[8500]],["orderof",[8500]],["ordf",[170]],["ordm",[186]],["origof",[8886]],["oror",[10838]],["orslope",[10839]],["orv",[10843]],["oS",[9416]],["Oscr",[119978]],["oscr",[8500]],["Oslash",[216]],["oslash",[248]],["osol",[8856]],["Otilde",[213]],["otilde",[245]],["otimesas",[10806]],["Otimes",[10807]],["otimes",[8855]],["Ouml",[214]],["ouml",[246]],["ovbar",[9021]],["OverBar",[8254]],["OverBrace",[9182]],["OverBracket",[9140]],["OverParenthesis",[9180]],["para",[182]],["parallel",[8741]],["par",[8741]],["parsim",[10995]],["parsl",[11005]],["part",[8706]],["PartialD",[8706]],["Pcy",[1055]],["pcy",[1087]],["percnt",[37]],["period",[46]],["permil",[8240]],["perp",[8869]],["pertenk",[8241]],["Pfr",[120083]],["pfr",[120109]],["Phi",[934]],["phi",[966]],["phiv",[981]],["phmmat",[8499]],["phone",[9742]],["Pi",[928]],["pi",[960]],["pitchfork",[8916]],["piv",[982]],["planck",[8463]],["planckh",[8462]],["plankv",[8463]],["plusacir",[10787]],["plusb",[8862]],["pluscir",[10786]],["plus",[43]],["plusdo",[8724]],["plusdu",[10789]],["pluse",[10866]],["PlusMinus",[177]],["plusmn",[177]],["plussim",[10790]],["plustwo",[10791]],["pm",[177]],["Poincareplane",[8460]],["pointint",[10773]],["popf",[120161]],["Popf",[8473]],["pound",[163]],["prap",[10935]],["Pr",[10939]],["pr",[8826]],["prcue",[8828]],["precapprox",[10935]],["prec",[8826]],["preccurlyeq",[8828]],["Precedes",[8826]],["PrecedesEqual",[10927]],["PrecedesSlantEqual",[8828]],["PrecedesTilde",[8830]],["preceq",[10927]],["precnapprox",[10937]],["precneqq",[10933]],["precnsim",[8936]],["pre",[10927]],["prE",[10931]],["precsim",[8830]],["prime",[8242]],["Prime",[8243]],["primes",[8473]],["prnap",[10937]],["prnE",[10933]],["prnsim",[8936]],["prod",[8719]],["Product",[8719]],["profalar",[9006]],["profline",[8978]],["profsurf",[8979]],["prop",[8733]],["Proportional",[8733]],["Proportion",[8759]],["propto",[8733]],["prsim",[8830]],["prurel",[8880]],["Pscr",[119979]],["pscr",[120005]],["Psi",[936]],["psi",[968]],["puncsp",[8200]],["Qfr",[120084]],["qfr",[120110]],["qint",[10764]],["qopf",[120162]],["Qopf",[8474]],["qprime",[8279]],["Qscr",[119980]],["qscr",[120006]],["quaternions",[8461]],["quatint",[10774]],["quest",[63]],["questeq",[8799]],["quot",[34]],["QUOT",[34]],["rAarr",[8667]],["race",[8765,817]],["Racute",[340]],["racute",[341]],["radic",[8730]],["raemptyv",[10675]],["rang",[10217]],["Rang",[10219]],["rangd",[10642]],["range",[10661]],["rangle",[10217]],["raquo",[187]],["rarrap",[10613]],["rarrb",[8677]],["rarrbfs",[10528]],["rarrc",[10547]],["rarr",[8594]],["Rarr",[8608]],["rArr",[8658]],["rarrfs",[10526]],["rarrhk",[8618]],["rarrlp",[8620]],["rarrpl",[10565]],["rarrsim",[10612]],["Rarrtl",[10518]],["rarrtl",[8611]],["rarrw",[8605]],["ratail",[10522]],["rAtail",[10524]],["ratio",[8758]],["rationals",[8474]],["rbarr",[10509]],["rBarr",[10511]],["RBarr",[10512]],["rbbrk",[10099]],["rbrace",[125]],["rbrack",[93]],["rbrke",[10636]],["rbrksld",[10638]],["rbrkslu",[10640]],["Rcaron",[344]],["rcaron",[345]],["Rcedil",[342]],["rcedil",[343]],["rceil",[8969]],["rcub",[125]],["Rcy",[1056]],["rcy",[1088]],["rdca",[10551]],["rdldhar",[10601]],["rdquo",[8221]],["rdquor",[8221]],["CloseCurlyDoubleQuote",[8221]],["rdsh",[8627]],["real",[8476]],["realine",[8475]],["realpart",[8476]],["reals",[8477]],["Re",[8476]],["rect",[9645]],["reg",[174]],["REG",[174]],["ReverseElement",[8715]],["ReverseEquilibrium",[8651]],["ReverseUpEquilibrium",[10607]],["rfisht",[10621]],["rfloor",[8971]],["rfr",[120111]],["Rfr",[8476]],["rHar",[10596]],["rhard",[8641]],["rharu",[8640]],["rharul",[10604]],["Rho",[929]],["rho",[961]],["rhov",[1009]],["RightAngleBracket",[10217]],["RightArrowBar",[8677]],["rightarrow",[8594]],["RightArrow",[8594]],["Rightarrow",[8658]],["RightArrowLeftArrow",[8644]],["rightarrowtail",[8611]],["RightCeiling",[8969]],["RightDoubleBracket",[10215]],["RightDownTeeVector",[10589]],["RightDownVectorBar",[10581]],["RightDownVector",[8642]],["RightFloor",[8971]],["rightharpoondown",[8641]],["rightharpoonup",[8640]],["rightleftarrows",[8644]],["rightleftharpoons",[8652]],["rightrightarrows",[8649]],["rightsquigarrow",[8605]],["RightTeeArrow",[8614]],["RightTee",[8866]],["RightTeeVector",[10587]],["rightthreetimes",[8908]],["RightTriangleBar",[10704]],["RightTriangle",[8883]],["RightTriangleEqual",[8885]],["RightUpDownVector",[10575]],["RightUpTeeVector",[10588]],["RightUpVectorBar",[10580]],["RightUpVector",[8638]],["RightVectorBar",[10579]],["RightVector",[8640]],["ring",[730]],["risingdotseq",[8787]],["rlarr",[8644]],["rlhar",[8652]],["rlm",[8207]],["rmoustache",[9137]],["rmoust",[9137]],["rnmid",[10990]],["roang",[10221]],["roarr",[8702]],["robrk",[10215]],["ropar",[10630]],["ropf",[120163]],["Ropf",[8477]],["roplus",[10798]],["rotimes",[10805]],["RoundImplies",[10608]],["rpar",[41]],["rpargt",[10644]],["rppolint",[10770]],["rrarr",[8649]],["Rrightarrow",[8667]],["rsaquo",[8250]],["rscr",[120007]],["Rscr",[8475]],["rsh",[8625]],["Rsh",[8625]],["rsqb",[93]],["rsquo",[8217]],["rsquor",[8217]],["CloseCurlyQuote",[8217]],["rthree",[8908]],["rtimes",[8906]],["rtri",[9657]],["rtrie",[8885]],["rtrif",[9656]],["rtriltri",[10702]],["RuleDelayed",[10740]],["ruluhar",[10600]],["rx",[8478]],["Sacute",[346]],["sacute",[347]],["sbquo",[8218]],["scap",[10936]],["Scaron",[352]],["scaron",[353]],["Sc",[10940]],["sc",[8827]],["sccue",[8829]],["sce",[10928]],["scE",[10932]],["Scedil",[350]],["scedil",[351]],["Scirc",[348]],["scirc",[349]],["scnap",[10938]],["scnE",[10934]],["scnsim",[8937]],["scpolint",[10771]],["scsim",[8831]],["Scy",[1057]],["scy",[1089]],["sdotb",[8865]],["sdot",[8901]],["sdote",[10854]],["searhk",[10533]],["searr",[8600]],["seArr",[8664]],["searrow",[8600]],["sect",[167]],["semi",[59]],["seswar",[10537]],["setminus",[8726]],["setmn",[8726]],["sext",[10038]],["Sfr",[120086]],["sfr",[120112]],["sfrown",[8994]],["sharp",[9839]],["SHCHcy",[1065]],["shchcy",[1097]],["SHcy",[1064]],["shcy",[1096]],["ShortDownArrow",[8595]],["ShortLeftArrow",[8592]],["shortmid",[8739]],["shortparallel",[8741]],["ShortRightArrow",[8594]],["ShortUpArrow",[8593]],["shy",[173]],["Sigma",[931]],["sigma",[963]],["sigmaf",[962]],["sigmav",[962]],["sim",[8764]],["simdot",[10858]],["sime",[8771]],["simeq",[8771]],["simg",[10910]],["simgE",[10912]],["siml",[10909]],["simlE",[10911]],["simne",[8774]],["simplus",[10788]],["simrarr",[10610]],["slarr",[8592]],["SmallCircle",[8728]],["smallsetminus",[8726]],["smashp",[10803]],["smeparsl",[10724]],["smid",[8739]],["smile",[8995]],["smt",[10922]],["smte",[10924]],["smtes",[10924,65024]],["SOFTcy",[1068]],["softcy",[1100]],["solbar",[9023]],["solb",[10692]],["sol",[47]],["Sopf",[120138]],["sopf",[120164]],["spades",[9824]],["spadesuit",[9824]],["spar",[8741]],["sqcap",[8851]],["sqcaps",[8851,65024]],["sqcup",[8852]],["sqcups",[8852,65024]],["Sqrt",[8730]],["sqsub",[8847]],["sqsube",[8849]],["sqsubset",[8847]],["sqsubseteq",[8849]],["sqsup",[8848]],["sqsupe",[8850]],["sqsupset",[8848]],["sqsupseteq",[8850]],["square",[9633]],["Square",[9633]],["SquareIntersection",[8851]],["SquareSubset",[8847]],["SquareSubsetEqual",[8849]],["SquareSuperset",[8848]],["SquareSupersetEqual",[8850]],["SquareUnion",[8852]],["squarf",[9642]],["squ",[9633]],["squf",[9642]],["srarr",[8594]],["Sscr",[119982]],["sscr",[120008]],["ssetmn",[8726]],["ssmile",[8995]],["sstarf",[8902]],["Star",[8902]],["star",[9734]],["starf",[9733]],["straightepsilon",[1013]],["straightphi",[981]],["strns",[175]],["sub",[8834]],["Sub",[8912]],["subdot",[10941]],["subE",[10949]],["sube",[8838]],["subedot",[10947]],["submult",[10945]],["subnE",[10955]],["subne",[8842]],["subplus",[10943]],["subrarr",[10617]],["subset",[8834]],["Subset",[8912]],["subseteq",[8838]],["subseteqq",[10949]],["SubsetEqual",[8838]],["subsetneq",[8842]],["subsetneqq",[10955]],["subsim",[10951]],["subsub",[10965]],["subsup",[10963]],["succapprox",[10936]],["succ",[8827]],["succcurlyeq",[8829]],["Succeeds",[8827]],["SucceedsEqual",[10928]],["SucceedsSlantEqual",[8829]],["SucceedsTilde",[8831]],["succeq",[10928]],["succnapprox",[10938]],["succneqq",[10934]],["succnsim",[8937]],["succsim",[8831]],["SuchThat",[8715]],["sum",[8721]],["Sum",[8721]],["sung",[9834]],["sup1",[185]],["sup2",[178]],["sup3",[179]],["sup",[8835]],["Sup",[8913]],["supdot",[10942]],["supdsub",[10968]],["supE",[10950]],["supe",[8839]],["supedot",[10948]],["Superset",[8835]],["SupersetEqual",[8839]],["suphsol",[10185]],["suphsub",[10967]],["suplarr",[10619]],["supmult",[10946]],["supnE",[10956]],["supne",[8843]],["supplus",[10944]],["supset",[8835]],["Supset",[8913]],["supseteq",[8839]],["supseteqq",[10950]],["supsetneq",[8843]],["supsetneqq",[10956]],["supsim",[10952]],["supsub",[10964]],["supsup",[10966]],["swarhk",[10534]],["swarr",[8601]],["swArr",[8665]],["swarrow",[8601]],["swnwar",[10538]],["szlig",[223]],["Tab",[9]],["target",[8982]],["Tau",[932]],["tau",[964]],["tbrk",[9140]],["Tcaron",[356]],["tcaron",[357]],["Tcedil",[354]],["tcedil",[355]],["Tcy",[1058]],["tcy",[1090]],["tdot",[8411]],["telrec",[8981]],["Tfr",[120087]],["tfr",[120113]],["there4",[8756]],["therefore",[8756]],["Therefore",[8756]],["Theta",[920]],["theta",[952]],["thetasym",[977]],["thetav",[977]],["thickapprox",[8776]],["thicksim",[8764]],["ThickSpace",[8287,8202]],["ThinSpace",[8201]],["thinsp",[8201]],["thkap",[8776]],["thksim",[8764]],["THORN",[222]],["thorn",[254]],["tilde",[732]],["Tilde",[8764]],["TildeEqual",[8771]],["TildeFullEqual",[8773]],["TildeTilde",[8776]],["timesbar",[10801]],["timesb",[8864]],["times",[215]],["timesd",[10800]],["tint",[8749]],["toea",[10536]],["topbot",[9014]],["topcir",[10993]],["top",[8868]],["Topf",[120139]],["topf",[120165]],["topfork",[10970]],["tosa",[10537]],["tprime",[8244]],["trade",[8482]],["TRADE",[8482]],["triangle",[9653]],["triangledown",[9663]],["triangleleft",[9667]],["trianglelefteq",[8884]],["triangleq",[8796]],["triangleright",[9657]],["trianglerighteq",[8885]],["tridot",[9708]],["trie",[8796]],["triminus",[10810]],["TripleDot",[8411]],["triplus",[10809]],["trisb",[10701]],["tritime",[10811]],["trpezium",[9186]],["Tscr",[119983]],["tscr",[120009]],["TScy",[1062]],["tscy",[1094]],["TSHcy",[1035]],["tshcy",[1115]],["Tstrok",[358]],["tstrok",[359]],["twixt",[8812]],["twoheadleftarrow",[8606]],["twoheadrightarrow",[8608]],["Uacute",[218]],["uacute",[250]],["uarr",[8593]],["Uarr",[8607]],["uArr",[8657]],["Uarrocir",[10569]],["Ubrcy",[1038]],["ubrcy",[1118]],["Ubreve",[364]],["ubreve",[365]],["Ucirc",[219]],["ucirc",[251]],["Ucy",[1059]],["ucy",[1091]],["udarr",[8645]],["Udblac",[368]],["udblac",[369]],["udhar",[10606]],["ufisht",[10622]],["Ufr",[120088]],["ufr",[120114]],["Ugrave",[217]],["ugrave",[249]],["uHar",[10595]],["uharl",[8639]],["uharr",[8638]],["uhblk",[9600]],["ulcorn",[8988]],["ulcorner",[8988]],["ulcrop",[8975]],["ultri",[9720]],["Umacr",[362]],["umacr",[363]],["uml",[168]],["UnderBar",[95]],["UnderBrace",[9183]],["UnderBracket",[9141]],["UnderParenthesis",[9181]],["Union",[8899]],["UnionPlus",[8846]],["Uogon",[370]],["uogon",[371]],["Uopf",[120140]],["uopf",[120166]],["UpArrowBar",[10514]],["uparrow",[8593]],["UpArrow",[8593]],["Uparrow",[8657]],["UpArrowDownArrow",[8645]],["updownarrow",[8597]],["UpDownArrow",[8597]],["Updownarrow",[8661]],["UpEquilibrium",[10606]],["upharpoonleft",[8639]],["upharpoonright",[8638]],["uplus",[8846]],["UpperLeftArrow",[8598]],["UpperRightArrow",[8599]],["upsi",[965]],["Upsi",[978]],["upsih",[978]],["Upsilon",[933]],["upsilon",[965]],["UpTeeArrow",[8613]],["UpTee",[8869]],["upuparrows",[8648]],["urcorn",[8989]],["urcorner",[8989]],["urcrop",[8974]],["Uring",[366]],["uring",[367]],["urtri",[9721]],["Uscr",[119984]],["uscr",[120010]],["utdot",[8944]],["Utilde",[360]],["utilde",[361]],["utri",[9653]],["utrif",[9652]],["uuarr",[8648]],["Uuml",[220]],["uuml",[252]],["uwangle",[10663]],["vangrt",[10652]],["varepsilon",[1013]],["varkappa",[1008]],["varnothing",[8709]],["varphi",[981]],["varpi",[982]],["varpropto",[8733]],["varr",[8597]],["vArr",[8661]],["varrho",[1009]],["varsigma",[962]],["varsubsetneq",[8842,65024]],["varsubsetneqq",[10955,65024]],["varsupsetneq",[8843,65024]],["varsupsetneqq",[10956,65024]],["vartheta",[977]],["vartriangleleft",[8882]],["vartriangleright",[8883]],["vBar",[10984]],["Vbar",[10987]],["vBarv",[10985]],["Vcy",[1042]],["vcy",[1074]],["vdash",[8866]],["vDash",[8872]],["Vdash",[8873]],["VDash",[8875]],["Vdashl",[10982]],["veebar",[8891]],["vee",[8744]],["Vee",[8897]],["veeeq",[8794]],["vellip",[8942]],["verbar",[124]],["Verbar",[8214]],["vert",[124]],["Vert",[8214]],["VerticalBar",[8739]],["VerticalLine",[124]],["VerticalSeparator",[10072]],["VerticalTilde",[8768]],["VeryThinSpace",[8202]],["Vfr",[120089]],["vfr",[120115]],["vltri",[8882]],["vnsub",[8834,8402]],["vnsup",[8835,8402]],["Vopf",[120141]],["vopf",[120167]],["vprop",[8733]],["vrtri",[8883]],["Vscr",[119985]],["vscr",[120011]],["vsubnE",[10955,65024]],["vsubne",[8842,65024]],["vsupnE",[10956,65024]],["vsupne",[8843,65024]],["Vvdash",[8874]],["vzigzag",[10650]],["Wcirc",[372]],["wcirc",[373]],["wedbar",[10847]],["wedge",[8743]],["Wedge",[8896]],["wedgeq",[8793]],["weierp",[8472]],["Wfr",[120090]],["wfr",[120116]],["Wopf",[120142]],["wopf",[120168]],["wp",[8472]],["wr",[8768]],["wreath",[8768]],["Wscr",[119986]],["wscr",[120012]],["xcap",[8898]],["xcirc",[9711]],["xcup",[8899]],["xdtri",[9661]],["Xfr",[120091]],["xfr",[120117]],["xharr",[10231]],["xhArr",[10234]],["Xi",[926]],["xi",[958]],["xlarr",[10229]],["xlArr",[10232]],["xmap",[10236]],["xnis",[8955]],["xodot",[10752]],["Xopf",[120143]],["xopf",[120169]],["xoplus",[10753]],["xotime",[10754]],["xrarr",[10230]],["xrArr",[10233]],["Xscr",[119987]],["xscr",[120013]],["xsqcup",[10758]],["xuplus",[10756]],["xutri",[9651]],["xvee",[8897]],["xwedge",[8896]],["Yacute",[221]],["yacute",[253]],["YAcy",[1071]],["yacy",[1103]],["Ycirc",[374]],["ycirc",[375]],["Ycy",[1067]],["ycy",[1099]],["yen",[165]],["Yfr",[120092]],["yfr",[120118]],["YIcy",[1031]],["yicy",[1111]],["Yopf",[120144]],["yopf",[120170]],["Yscr",[119988]],["yscr",[120014]],["YUcy",[1070]],["yucy",[1102]],["yuml",[255]],["Yuml",[376]],["Zacute",[377]],["zacute",[378]],["Zcaron",[381]],["zcaron",[382]],["Zcy",[1047]],["zcy",[1079]],["Zdot",[379]],["zdot",[380]],["zeetrf",[8488]],["ZeroWidthSpace",[8203]],["Zeta",[918]],["zeta",[950]],["zfr",[120119]],["Zfr",[8488]],["ZHcy",[1046]],["zhcy",[1078]],["zigrarr",[8669]],["zopf",[120171]],["Zopf",[8484]],["Zscr",[119989]],["zscr",[120015]],["zwj",[8205]],["zwnj",[8204]]],r={},u={};function o(){}!function(e,t){var r=n.length,u=[];for(;r--;){var o,i=n[r],a=i[0],l=i[1],c=l[0],s=c<32||c>126||62===c||60===c||38===c||34===c||39===c;if(s&&(o=t[c]=t[c]||{}),l[1]){var f=l[1];e[a]=String.fromCharCode(c)+String.fromCharCode(f),u.push(s&&(o[f]=a))}else e[a]=String.fromCharCode(c),u.push(s&&(o[""]=a))}}(r,u),o.prototype.decode=function(e){return e&&e.length?e.replace(/&(#?[\\w\\d]+);?/g,function(e,t){var n;if("#"===t.charAt(0)){var u="x"===t.charAt(1)?parseInt(t.substr(2).toLowerCase(),16):parseInt(t.substr(1));isNaN(u)||u<-32768||u>65535||(n=String.fromCharCode(u))}else n=r[t];return n||e}):""},o.decode=function(e){return(new o).decode(e)},o.prototype.encode=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",r=0;r<t;){var o=u[e.charCodeAt(r)];if(o){var i=o[e.charCodeAt(r+1)];if(i?r++:i=o[""],i){n+="&"+i+";",r++;continue}}n+=e.charAt(r),r++}return n},o.encode=function(e){return(new o).encode(e)},o.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",r=0;r<t;){var o=e.charCodeAt(r),i=u[o];if(i){var a=i[e.charCodeAt(r+1)];if(a?r++:a=i[""],a){n+="&"+a+";",r++;continue}}n+=o<32||o>126?"&#"+o+";":e.charAt(r),r++}return n},o.encodeNonUTF=function(e){return(new o).encodeNonUTF(e)},o.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",r=0;r<t;){var u=e.charCodeAt(r);u<=255?n+=e[r++]:(n+="&#"+u+";",r++)}return n},o.encodeNonASCII=function(e){return(new o).encodeNonASCII(e)},e.exports=o},function(e,t){!function(){"use strict";var t,n,r,u,o,i;function a(e){return e<=65535?String.fromCharCode(e):String.fromCharCode(Math.floor((e-65536)/1024)+55296)+String.fromCharCode((e-65536)%1024+56320)}for(n={NonAsciiIdentifierStart:/[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/,NonAsciiIdentifierPart:/[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19D9\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u2E2F\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099\\u309A\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]/},t={NonAsciiIdentifierStart:/[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B2\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF98]|\\uD809[\\uDC00-\\uDC6E]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D]|\\uD87E[\\uDC00-\\uDE1D]/,NonAsciiIdentifierPart:/[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B2\\u08E4-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58\\u0C59\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D60-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA69D\\uA69F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA7AD\\uA7B0\\uA7B1\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB5F\\uAB64\\uAB65\\uABC0-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2D\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDD0-\\uDDDA\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF01-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF98]|\\uD809[\\uDC00-\\uDC6E]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/},r=[5760,6158,8192,8193,8194,8195,8196,8197,8198,8199,8200,8201,8202,8239,8287,12288,65279],u=new Array(128),i=0;i<128;++i)u[i]=i>=97&&i<=122||i>=65&&i<=90||36===i||95===i;for(o=new Array(128),i=0;i<128;++i)o[i]=i>=97&&i<=122||i>=65&&i<=90||i>=48&&i<=57||36===i||95===i;e.exports={isDecimalDigit:function(e){return 48<=e&&e<=57},isHexDigit:function(e){return 48<=e&&e<=57||97<=e&&e<=102||65<=e&&e<=70},isOctalDigit:function(e){return e>=48&&e<=55},isWhiteSpace:function(e){return 32===e||9===e||11===e||12===e||160===e||e>=5760&&r.indexOf(e)>=0},isLineTerminator:function(e){return 10===e||13===e||8232===e||8233===e},isIdentifierStartES5:function(e){return e<128?u[e]:n.NonAsciiIdentifierStart.test(a(e))},isIdentifierPartES5:function(e){return e<128?o[e]:n.NonAsciiIdentifierPart.test(a(e))},isIdentifierStartES6:function(e){return e<128?u[e]:t.NonAsciiIdentifierStart.test(a(e))},isIdentifierPartES6:function(e){return e<128?o[e]:t.NonAsciiIdentifierPart.test(a(e))}}}()},function(e,t,n){var r=n(198),u={};for(var o in r)r.hasOwnProperty(o)&&(u[r[o]]=o);var i=e.exports={rgb:{channels:3,labels:"rgb"},hsl:{channels:3,labels:"hsl"},hsv:{channels:3,labels:"hsv"},hwb:{channels:3,labels:"hwb"},cmyk:{channels:4,labels:"cmyk"},xyz:{channels:3,labels:"xyz"},lab:{channels:3,labels:"lab"},lch:{channels:3,labels:"lch"},hex:{channels:1,labels:["hex"]},keyword:{channels:1,labels:["keyword"]},ansi16:{channels:1,labels:["ansi16"]},ansi256:{channels:1,labels:["ansi256"]},hcg:{channels:3,labels:["h","c","g"]},apple:{channels:3,labels:["r16","g16","b16"]},gray:{channels:1,labels:["gray"]}};for(var a in i)if(i.hasOwnProperty(a)){if(!("channels"in i[a]))throw new Error("missing channels property: "+a);if(!("labels"in i[a]))throw new Error("missing channel labels property: "+a);if(i[a].labels.length!==i[a].channels)throw new Error("channel and label counts mismatch: "+a);var l=i[a].channels,c=i[a].labels;delete i[a].channels,delete i[a].labels,Object.defineProperty(i[a],"channels",{value:l}),Object.defineProperty(i[a],"labels",{value:c})}i.rgb.hsl=function(e){var t,n,r=e[0]/255,u=e[1]/255,o=e[2]/255,i=Math.min(r,u,o),a=Math.max(r,u,o),l=a-i;return a===i?t=0:r===a?t=(u-o)/l:u===a?t=2+(o-r)/l:o===a&&(t=4+(r-u)/l),(t=Math.min(60*t,360))<0&&(t+=360),n=(i+a)/2,[t,100*(a===i?0:n<=.5?l/(a+i):l/(2-a-i)),100*n]},i.rgb.hsv=function(e){var t,n,r,u,o,i=e[0]/255,a=e[1]/255,l=e[2]/255,c=Math.max(i,a,l),s=c-Math.min(i,a,l),f=function(e){return(c-e)/6/s+.5};return 0===s?u=o=0:(o=s/c,t=f(i),n=f(a),r=f(l),i===c?u=r-n:a===c?u=1/3+t-r:l===c&&(u=2/3+n-t),u<0?u+=1:u>1&&(u-=1)),[360*u,100*o,100*c]},i.rgb.hwb=function(e){var t=e[0],n=e[1],r=e[2];return[i.rgb.hsl(e)[0],100*(1/255*Math.min(t,Math.min(n,r))),100*(r=1-1/255*Math.max(t,Math.max(n,r)))]},i.rgb.cmyk=function(e){var t,n=e[0]/255,r=e[1]/255,u=e[2]/255;return[100*((1-n-(t=Math.min(1-n,1-r,1-u)))/(1-t)||0),100*((1-r-t)/(1-t)||0),100*((1-u-t)/(1-t)||0),100*t]},i.rgb.keyword=function(e){var t=u[e];if(t)return t;var n,o,i,a=1/0;for(var l in r)if(r.hasOwnProperty(l)){var c=r[l],s=(o=e,i=c,Math.pow(o[0]-i[0],2)+Math.pow(o[1]-i[1],2)+Math.pow(o[2]-i[2],2));s<a&&(a=s,n=l)}return n},i.keyword.rgb=function(e){return r[e]},i.rgb.xyz=function(e){var t=e[0]/255,n=e[1]/255,r=e[2]/255;return[100*(.4124*(t=t>.04045?Math.pow((t+.055)/1.055,2.4):t/12.92)+.3576*(n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92)+.1805*(r=r>.04045?Math.pow((r+.055)/1.055,2.4):r/12.92)),100*(.2126*t+.7152*n+.0722*r),100*(.0193*t+.1192*n+.9505*r)]},i.rgb.lab=function(e){var t=i.rgb.xyz(e),n=t[0],r=t[1],u=t[2];return r/=100,u/=108.883,n=(n/=95.047)>.008856?Math.pow(n,1/3):7.787*n+16/116,[116*(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116)-16,500*(n-r),200*(r-(u=u>.008856?Math.pow(u,1/3):7.787*u+16/116))]},i.hsl.rgb=function(e){var t,n,r,u,o,i=e[0]/360,a=e[1]/100,l=e[2]/100;if(0===a)return[o=255*l,o,o];t=2*l-(n=l<.5?l*(1+a):l+a-l*a),u=[0,0,0];for(var c=0;c<3;c++)(r=i+1/3*-(c-1))<0&&r++,r>1&&r--,o=6*r<1?t+6*(n-t)*r:2*r<1?n:3*r<2?t+(n-t)*(2/3-r)*6:t,u[c]=255*o;return u},i.hsl.hsv=function(e){var t=e[0],n=e[1]/100,r=e[2]/100,u=n,o=Math.max(r,.01);return n*=(r*=2)<=1?r:2-r,u*=o<=1?o:2-o,[t,100*(0===r?2*u/(o+u):2*n/(r+n)),100*((r+n)/2)]},i.hsv.rgb=function(e){var t=e[0]/60,n=e[1]/100,r=e[2]/100,u=Math.floor(t)%6,o=t-Math.floor(t),i=255*r*(1-n),a=255*r*(1-n*o),l=255*r*(1-n*(1-o));switch(r*=255,u){case 0:return[r,l,i];case 1:return[a,r,i];case 2:return[i,r,l];case 3:return[i,a,r];case 4:return[l,i,r];case 5:return[r,i,a]}},i.hsv.hsl=function(e){var t,n,r,u=e[0],o=e[1]/100,i=e[2]/100,a=Math.max(i,.01);return r=(2-o)*i,n=o*a,[u,100*(n=(n/=(t=(2-o)*a)<=1?t:2-t)||0),100*(r/=2)]},i.hwb.rgb=function(e){var t,n,r,u,o,i,a,l=e[0]/360,c=e[1]/100,s=e[2]/100,f=c+s;switch(f>1&&(c/=f,s/=f),r=6*l-(t=Math.floor(6*l)),0!==(1&t)&&(r=1-r),u=c+r*((n=1-s)-c),t){default:case 6:case 0:o=n,i=u,a=c;break;case 1:o=u,i=n,a=c;break;case 2:o=c,i=n,a=u;break;case 3:o=c,i=u,a=n;break;case 4:o=u,i=c,a=n;break;case 5:o=n,i=c,a=u}return[255*o,255*i,255*a]},i.cmyk.rgb=function(e){var t=e[0]/100,n=e[1]/100,r=e[2]/100,u=e[3]/100;return[255*(1-Math.min(1,t*(1-u)+u)),255*(1-Math.min(1,n*(1-u)+u)),255*(1-Math.min(1,r*(1-u)+u))]},i.xyz.rgb=function(e){var t,n,r,u=e[0]/100,o=e[1]/100,i=e[2]/100;return n=-.9689*u+1.8758*o+.0415*i,r=.0557*u+-.204*o+1.057*i,t=(t=3.2406*u+-1.5372*o+-.4986*i)>.0031308?1.055*Math.pow(t,1/2.4)-.055:12.92*t,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:12.92*n,r=r>.0031308?1.055*Math.pow(r,1/2.4)-.055:12.92*r,[255*(t=Math.min(Math.max(0,t),1)),255*(n=Math.min(Math.max(0,n),1)),255*(r=Math.min(Math.max(0,r),1))]},i.xyz.lab=function(e){var t=e[0],n=e[1],r=e[2];return n/=100,r/=108.883,t=(t/=95.047)>.008856?Math.pow(t,1/3):7.787*t+16/116,[116*(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116)-16,500*(t-n),200*(n-(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116))]},i.lab.xyz=function(e){var t,n,r,u=e[0];t=e[1]/500+(n=(u+16)/116),r=n-e[2]/200;var o=Math.pow(n,3),i=Math.pow(t,3),a=Math.pow(r,3);return n=o>.008856?o:(n-16/116)/7.787,t=i>.008856?i:(t-16/116)/7.787,r=a>.008856?a:(r-16/116)/7.787,[t*=95.047,n*=100,r*=108.883]},i.lab.lch=function(e){var t,n=e[0],r=e[1],u=e[2];return(t=360*Math.atan2(u,r)/2/Math.PI)<0&&(t+=360),[n,Math.sqrt(r*r+u*u),t]},i.lch.lab=function(e){var t,n=e[0],r=e[1];return t=e[2]/360*2*Math.PI,[n,r*Math.cos(t),r*Math.sin(t)]},i.rgb.ansi16=function(e){var t=e[0],n=e[1],r=e[2],u=1 in arguments?arguments[1]:i.rgb.hsv(e)[2];if(0===(u=Math.round(u/50)))return 30;var o=30+(Math.round(r/255)<<2|Math.round(n/255)<<1|Math.round(t/255));return 2===u&&(o+=60),o},i.hsv.ansi16=function(e){return i.rgb.ansi16(i.hsv.rgb(e),e[2])},i.rgb.ansi256=function(e){var t=e[0],n=e[1],r=e[2];return t===n&&n===r?t<8?16:t>248?231:Math.round((t-8)/247*24)+232:16+36*Math.round(t/255*5)+6*Math.round(n/255*5)+Math.round(r/255*5)},i.ansi16.rgb=function(e){var t=e%10;if(0===t||7===t)return e>50&&(t+=3.5),[t=t/10.5*255,t,t];var n=.5*(1+~~(e>50));return[(1&t)*n*255,(t>>1&1)*n*255,(t>>2&1)*n*255]},i.ansi256.rgb=function(e){if(e>=232){var t=10*(e-232)+8;return[t,t,t]}var n;return e-=16,[Math.floor(e/36)/5*255,Math.floor((n=e%36)/6)/5*255,n%6/5*255]},i.rgb.hex=function(e){var t=(((255&Math.round(e[0]))<<16)+((255&Math.round(e[1]))<<8)+(255&Math.round(e[2]))).toString(16).toUpperCase();return"000000".substring(t.length)+t},i.hex.rgb=function(e){var t=e.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);if(!t)return[0,0,0];var n=t[0];3===t[0].length&&(n=n.split("").map(function(e){return e+e}).join(""));var r=parseInt(n,16);return[r>>16&255,r>>8&255,255&r]},i.rgb.hcg=function(e){var t,n=e[0]/255,r=e[1]/255,u=e[2]/255,o=Math.max(Math.max(n,r),u),i=Math.min(Math.min(n,r),u),a=o-i;return t=a<=0?0:o===n?(r-u)/a%6:o===r?2+(u-n)/a:4+(n-r)/a+4,t/=6,[360*(t%=1),100*a,100*(a<1?i/(1-a):0)]},i.hsl.hcg=function(e){var t=e[1]/100,n=e[2]/100,r=1,u=0;return(r=n<.5?2*t*n:2*t*(1-n))<1&&(u=(n-.5*r)/(1-r)),[e[0],100*r,100*u]},i.hsv.hcg=function(e){var t=e[1]/100,n=e[2]/100,r=t*n,u=0;return r<1&&(u=(n-r)/(1-r)),[e[0],100*r,100*u]},i.hcg.rgb=function(e){var t=e[0]/360,n=e[1]/100,r=e[2]/100;if(0===n)return[255*r,255*r,255*r];var u,o=[0,0,0],i=t%1*6,a=i%1,l=1-a;switch(Math.floor(i)){case 0:o[0]=1,o[1]=a,o[2]=0;break;case 1:o[0]=l,o[1]=1,o[2]=0;break;case 2:o[0]=0,o[1]=1,o[2]=a;break;case 3:o[0]=0,o[1]=l,o[2]=1;break;case 4:o[0]=a,o[1]=0,o[2]=1;break;default:o[0]=1,o[1]=0,o[2]=l}return u=(1-n)*r,[255*(n*o[0]+u),255*(n*o[1]+u),255*(n*o[2]+u)]},i.hcg.hsv=function(e){var t=e[1]/100,n=t+e[2]/100*(1-t),r=0;return n>0&&(r=t/n),[e[0],100*r,100*n]},i.hcg.hsl=function(e){var t=e[1]/100,n=e[2]/100*(1-t)+.5*t,r=0;return n>0&&n<.5?r=t/(2*n):n>=.5&&n<1&&(r=t/(2*(1-n))),[e[0],100*r,100*n]},i.hcg.hwb=function(e){var t=e[1]/100,n=t+e[2]/100*(1-t);return[e[0],100*(n-t),100*(1-n)]},i.hwb.hcg=function(e){var t=e[1]/100,n=1-e[2]/100,r=n-t,u=0;return r<1&&(u=(n-r)/(1-r)),[e[0],100*r,100*u]},i.apple.rgb=function(e){return[e[0]/65535*255,e[1]/65535*255,e[2]/65535*255]},i.rgb.apple=function(e){return[e[0]/255*65535,e[1]/255*65535,e[2]/255*65535]},i.gray.rgb=function(e){return[e[0]/100*255,e[0]/100*255,e[0]/100*255]},i.gray.hsl=i.gray.hsv=function(e){return[0,0,e[0]]},i.gray.hwb=function(e){return[0,100,e[0]]},i.gray.cmyk=function(e){return[0,0,0,e[0]]},i.gray.lab=function(e){return[e[0],0,0]},i.gray.hex=function(e){var t=255&Math.round(e[0]/100*255),n=((t<<16)+(t<<8)+t).toString(16).toUpperCase();return"000000".substring(n.length)+n},i.rgb.gray=function(e){return[(e[0]+e[1]+e[2])/3/255*100]}},function(e,t,n){e.exports={XmlEntities:n(182),Html4Entities:n(183),Html5Entities:n(80),AllHtmlEntities:n(80)}},function(e,t,n){"use strict";(function(e){function r(){var e=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(184));return r=function(){return e},e}Object.defineProperty(t,"__esModule",{value:!0}),t.codeFrameColumns=i,t.default=function(t,n,r){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};if(!u){u=!0;var a="Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";if(e.emitWarning)e.emitWarning(a,"DeprecationWarning");else{var l=new Error(a);l.name="DeprecationWarning",console.warn(new Error(a))}}return r=Math.max(r,0),i(t,{start:{column:r,line:n}},o)};var u=!1;var o=/\\r\\n|[\\n\\r\\u2028\\u2029]/;function i(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},u=(n.highlightCode||n.forceColor)&&(0,r().shouldHighlight)(n),i=(0,r().getChalk)(n),a=function(e){return{gutter:e.grey,marker:e.red.bold,message:e.red.bold}}(i),l=function(e,t){return u?e(t):t};u&&(e=(0,r().default)(e,n));var c=e.split(o),s=function(e,t,n){var r=Object.assign({column:0,line:-1},e.start),u=Object.assign({},r,e.end),o=n||{},i=o.linesAbove,a=void 0===i?2:i,l=o.linesBelow,c=void 0===l?3:l,s=r.line,f=r.column,d=u.line,p=u.column,h=Math.max(s-(a+1),0),m=Math.min(t.length,d+c);-1===s&&(h=0),-1===d&&(m=t.length);var g=d-s,v={};if(g)for(var y=0;y<=g;y++){var D=y+s;if(f)if(0===y){var b=t[D-1].length;v[D]=[f,b-f]}else if(y===g)v[D]=[0,p];else{var A=t[D-y].length;v[D]=[0,A]}else v[D]=!0}else v[s]=f===p?!f||[f,0]:[f,p-f];return{start:h,end:m,markerLines:v}}(t,c,n),f=s.start,d=s.end,p=s.markerLines,h=t.start&&"number"===typeof t.start.column,m=String(d).length,g=c.slice(f,d).map(function(e,t){var r=f+1+t,u=" ".concat(r).slice(-m),o=" ".concat(u," | "),i=p[r],c=!p[r+1];if(i){var s="";if(Array.isArray(i)){var d=e.slice(0,Math.max(i[0]-1,0)).replace(/[^\\t]/g," "),h=i[1]||1;s=["\\n ",l(a.gutter,o.replace(/\\d/g," ")),d,l(a.marker,"^").repeat(h)].join(""),c&&n.message&&(s+=" "+l(a.message,n.message))}return[l(a.marker,">"),l(a.gutter,o),e,s].join("")}return" ".concat(l(a.gutter,o)).concat(e)}).join("\\n");return n.message&&!h&&(g="".concat(" ".repeat(m+1)).concat(n.message,"\\n").concat(g)),u?i.reset(g):g}}).call(this,n(51))},function(e,t,n){"use strict";n(86),n(72),n(102),n(73),n(104),n(105),n(106),n(107),n(108),n(109),n(110),n(111),n(113),n(114),n(115),n(116),n(117),n(118),n(119),n(120),n(121),n(122),n(124),n(125),n(126),n(127),n(128),n(129),n(130),n(131),n(132),n(133),n(134),n(135),n(136),n(137),n(138),n(139),n(140),n(141),n(145),n(176).polyfill(window)},function(e,t,n){"use strict";e.exports=n(53)("Map",function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},n(68),!0)},function(e,t,n){var r=n(12),u=n(36),o="".split;e.exports=r(function(){return!Object("z").propertyIsEnumerable(0)})?function(e){return"String"==u(e)?o.call(e,""):Object(e)}:Object},function(e,t,n){var r=n(57),u=n(5).WeakMap;e.exports="function"===typeof u&&/native code/.test(r.call(u))},function(e,t,n){var r=n(39),u=n(42),o=n(2),i=n(5).Reflect;e.exports=i&&i.ownKeys||function(e){var t=r.f(o(e)),n=u.f;return n?t.concat(n(e)):t}},function(e,t,n){var r=n(20),u=n(31),o=n(91);e.exports=function(e){return function(t,n,i){var a,l=r(t),c=u(l.length),s=o(i,c);if(e&&n!=n){for(;c>s;)if((a=l[s++])!=a)return!0}else for(;c>s;s++)if((e||s in l)&&l[s]===n)return e||s||0;return!e&&-1}}},function(e,t,n){var r=n(40),u=Math.max,o=Math.min;e.exports=function(e,t){var n=r(e);return n<0?u(n+t,0):o(n,t)}},function(e,t,n){e.exports=!n(12)(function(){return Object.isExtensible(Object.preventExtensions({}))})},function(e,t,n){var r=n(10),u=n(67);e.exports=function(e,t,n){var o,i=t.constructor;return i!==n&&"function"==typeof i&&(o=i.prototype)!==n.prototype&&r(o)&&u&&u(e,o),e}},function(e,t,n){var r=n(10),u=n(2);e.exports=function(e,t){if(u(e),!r(t)&&null!==t)throw TypeError("Can\'t set "+String(t)+" as a prototype")}},function(e,t,n){var r=n(16),u=n(13),o=n(2),i=n(44);e.exports=r?Object.defineProperties:function(e,t){o(e);for(var n,r=i(t),a=r.length,l=0;a>l;)u.f(e,n=r[l++],t[n]);return e}},function(e,t,n){var r=n(5).document;e.exports=r&&r.documentElement},function(e,t,n){var r=n(21);e.exports=function(e,t,n){for(var u in t)r(e,u,t[u],n);return e}},function(e,t,n){"use strict";var r=n(69).IteratorPrototype,u=n(32),o=n(23),i=n(22),a=n(27),l=function(){return this};e.exports=function(e,t,n){var c=t+" Iterator";return e.prototype=u(r,{next:o(1,n)}),i(e,c,!1,!0),a[c]=l,e}},function(e,t,n){e.exports=!n(12)(function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype})},function(e,t,n){"use strict";var r=n(14),u=n(13),o=n(16),i=n(6)("species");e.exports=function(e){var t=r(e),n=u.f;o&&t&&!t[i]&&n(t,i,{configurable:!0,get:function(){return this}})}},function(e,t,n){"use strict";var r=n(63),u={};u[n(6)("toStringTag")]="z",e.exports="[object z]"!==String(u)?function(){return"[object "+r(this)+"]"}:u.toString},function(e,t,n){"use strict";e.exports=n(53)("Set",function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},n(68))},function(e,t,n){var r=n(40),u=n(37);e.exports=function(e,t,n){var o,i,a=String(u(e)),l=r(t),c=a.length;return l<0||l>=c?n?"":void 0:(o=a.charCodeAt(l))<55296||o>56319||l+1===c||(i=a.charCodeAt(l+1))<56320||i>57343?n?a.charAt(l):o:n?a.slice(l,l+2):i-56320+(o-55296<<10)+65536}},function(e,t,n){"use strict";var r=n(74);n(1)({target:"Map",proto:!0,real:!0,forced:n(3)},{deleteAll:function(){return r.apply(this,arguments)}})},function(e,t,n){"use strict";var r=n(2),u=n(7),o=n(15);n(1)({target:"Map",proto:!0,real:!0,forced:n(3)},{every:function(e){for(var t,n,i=r(this),a=o(i),l=u(e,arguments.length>1?arguments[1]:void 0,3);!(t=a.next()).done;)if(!l((n=t.value)[1],n[0],i))return!1;return!0}})},function(e,t,n){"use strict";var r=n(14),u=n(2),o=n(4),i=n(7),a=n(18),l=n(15);n(1)({target:"Map",proto:!0,real:!0,forced:n(3)},{filter:function(e){for(var t,n,c,s,f=u(this),d=l(f),p=i(e,arguments.length>1?arguments[1]:void 0,3),h=new(a(f,r("Map"))),m=o(h.set);!(t=d.next()).done;)p(s=(n=t.value)[1],c=n[0],f)&&m.call(h,c,s);return h}})},function(e,t,n){"use strict";var r=n(2),u=n(7),o=n(15);n(1)({target:"Map",proto:!0,real:!0,forced:n(3)},{find:function(e){for(var t,n,i,a=r(this),l=o(a),c=u(e,arguments.length>1?arguments[1]:void 0,3);!(t=l.next()).done;)if(c(i=(n=t.value)[1],n[0],a))return i}})},function(e,t,n){"use strict";var r=n(2),u=n(7),o=n(15);n(1)({target:"Map",proto:!0,real:!0,forced:n(3)},{findKey:function(e){for(var t,n,i,a=r(this),l=o(a),c=u(e,arguments.length>1?arguments[1]:void 0,3);!(t=l.next()).done;)if(c((n=t.value)[1],i=n[0],a))return i}})},function(e,t,n){n(1)({target:"Map",stat:!0},{from:n(75)})},function(e,t,n){"use strict";var r=n(9),u=n(4);n(1)({target:"Map",stat:!0,forced:n(3)},{groupBy:function(e,t){var n=new this;u(t);var o=u(n.has),i=u(n.get),a=u(n.set);return r(e,function(e){var r=t(e);o.call(n,r)?i.call(n,r).push(e):a.call(n,r,[e])}),n}})},function(e,t,n){"use strict";var r=n(2),u=n(15),o=n(112);n(1)({target:"Map",proto:!0,real:!0,forced:n(3)},{includes:function(e){for(var t,n=r(this),i=u(n);!(t=i.next()).done;)if(o(t.value[1],e))return!0;return!1}})},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,n){"use strict";var r=n(9),u=n(4);n(1)({target:"Map",stat:!0,forced:n(3)},{keyBy:function(e,t){var n=new this;u(t);var o=u(n.set);return r(e,function(e){o.call(n,t(e),e)}),n}})},function(e,t,n){"use strict";var r=n(2),u=n(15);n(1)({target:"Map",proto:!0,real:!0,forced:n(3)},{keyOf:function(e){for(var t,n,o=r(this),i=u(o);!(t=i.next()).done;)if((n=t.value)[1]===e)return n[0]}})},function(e,t,n){"use strict";var r=n(14),u=n(2),o=n(4),i=n(7),a=n(18),l=n(15);n(1)({target:"Map",proto:!0,real:!0,forced:n(3)},{mapKeys:function(e){for(var t,n,c,s=u(this),f=l(s),d=i(e,arguments.length>1?arguments[1]:void 0,3),p=new(a(s,r("Map"))),h=o(p.set);!(t=f.next()).done;)n=t.value,h.call(p,d(c=n[1],n[0],s),c);return p}})},function(e,t,n){"use strict";var r=n(14),u=n(2),o=n(4),i=n(7),a=n(18),l=n(15);n(1)({target:"Map",proto:!0,real:!0,forced:n(3)},{mapValues:function(e){for(var t,n,c,s=u(this),f=l(s),d=i(e,arguments.length>1?arguments[1]:void 0,3),p=new(a(s,r("Map"))),h=o(p.set);!(t=f.next()).done;)n=t.value,h.call(p,c=n[0],d(n[1],c,s));return p}})},function(e,t,n){"use strict";var r=n(2),u=n(4),o=n(9);n(1)({target:"Map",proto:!0,real:!0,forced:n(3)},{merge:function(e){for(var t=r(this),n=u(t.set),i=0;i<arguments.length;)o(arguments[i++],n,t,!0);return t}})},function(e,t,n){n(1)({target:"Map",stat:!0},{of:n(76)})},function(e,t,n){"use strict";var r=n(2),u=n(4),o=n(15);n(1)({target:"Map",proto:!0,real:!0,forced:n(3)},{reduce:function(e){var t,n,i,a=r(this),l=o(a);if(u(e),arguments.length>1)t=arguments[1];else{if((n=l.next()).done)throw TypeError("Reduce of empty map with no initial value");t=n.value[1]}for(;!(n=l.next()).done;)t=e(t,(i=n.value)[1],i[0],a);return t}})},function(e,t,n){"use strict";var r=n(2),u=n(7),o=n(15);n(1)({target:"Map",proto:!0,real:!0,forced:n(3)},{some:function(e){for(var t,n,i=r(this),a=o(i),l=u(e,arguments.length>1?arguments[1]:void 0,3);!(t=a.next()).done;)if(l((n=t.value)[1],n[0],i))return!0;return!1}})},function(e,t,n){"use strict";var r=n(2),u=n(4);n(1)({target:"Map",proto:!0,real:!0,forced:n(3)},{update:function(e,t){var n=r(this);u(t);var o=n.has(e);if(!o&&arguments.length<3)throw TypeError("Updating absent value");var i=o?n.get(e):u(arguments[2])(e,n);return n.set(e,t(i,e,n)),n}})},function(e,t,n){"use strict";var r=n(123);n(1)({target:"Set",proto:!0,real:!0,forced:n(3)},{addAll:function(){return r.apply(this,arguments)}})},function(e,t,n){"use strict";var r=n(2),u=n(4);e.exports=function(){for(var e=r(this),t=u(e.add),n=0,o=arguments.length;n<o;n++)t.call(e,arguments[n]);return e}},function(e,t,n){"use strict";var r=n(74);n(1)({target:"Set",proto:!0,real:!0,forced:n(3)},{deleteAll:function(){return r.apply(this,arguments)}})},function(e,t,n){"use strict";var r=n(14),u=n(2),o=n(4),i=n(18),a=n(9);n(1)({target:"Set",proto:!0,real:!0,forced:n(3)},{difference:function(e){var t=u(this),n=new(i(t,r("Set")))(t),l=o(n.delete);return a(e,function(e){l.call(n,e)}),n}})},function(e,t,n){"use strict";var r=n(2),u=n(7),o=n(19);n(1)({target:"Set",proto:!0,real:!0,forced:n(3)},{every:function(e){for(var t,n,i=r(this),a=o(i),l=u(e,arguments.length>1?arguments[1]:void 0,3);!(t=a.next()).done;)if(!l(n=t.value,n,i))return!1;return!0}})},function(e,t,n){"use strict";var r=n(14),u=n(2),o=n(4),i=n(7),a=n(18),l=n(19);n(1)({target:"Set",proto:!0,real:!0,forced:n(3)},{filter:function(e){for(var t,n,c=u(this),s=l(c),f=i(e,arguments.length>1?arguments[1]:void 0,3),d=new(a(c,r("Set"))),p=o(d.add);!(t=s.next()).done;)f(n=t.value,n,c)&&p.call(d,n);return d}})},function(e,t,n){"use strict";var r=n(2),u=n(7),o=n(19);n(1)({target:"Set",proto:!0,real:!0,forced:n(3)},{find:function(e){for(var t,n,i=r(this),a=o(i),l=u(e,arguments.length>1?arguments[1]:void 0,3);!(t=a.next()).done;)if(l(n=t.value,n,i))return n}})},function(e,t,n){n(1)({target:"Set",stat:!0},{from:n(75)})},function(e,t,n){"use strict";var r=n(14),u=n(2),o=n(4),i=n(18),a=n(9);n(1)({target:"Set",proto:!0,real:!0,forced:n(3)},{intersection:function(e){var t=u(this),n=new(i(t,r("Set"))),l=o(t.has),c=o(n.add);return a(e,function(e){l.call(t,e)&&c.call(n,e)}),n}})},function(e,t,n){"use strict";var r=n(2),u=n(4),o=n(9),i=o.BREAK;n(1)({target:"Set",proto:!0,real:!0,forced:n(3)},{isDisjointFrom:function(e){var t=r(this),n=u(t.has);return o(e,function(e){if(!0===n.call(t,e))return i})!==i}})},function(e,t,n){"use strict";var r=n(14),u=n(2),o=n(4),i=n(47),a=n(9),l=a.BREAK;n(1)({target:"Set",proto:!0,real:!0,forced:n(3)},{isSubsetOf:function(e){var t=i(this),n=u(e),c=n.has;return"function"!=typeof c&&(n=new(r("Set"))(e),c=o(n.has)),a(t,function(e){if(!1===c.call(n,e))return l},void 0,!1,!0)!==l}})},function(e,t,n){"use strict";var r=n(2),u=n(4),o=n(9),i=o.BREAK;n(1)({target:"Set",proto:!0,real:!0,forced:n(3)},{isSupersetOf:function(e){var t=r(this),n=u(t.has);return o(e,function(e){if(!1===n.call(t,e))return i})!==i}})},function(e,t,n){"use strict";var r=n(2),u=n(19);n(1)({target:"Set",proto:!0,real:!0,forced:n(3)},{join:function(e){for(var t,n=r(this),o=u(n),i=void 0===e?",":String(e),a=[];!(t=o.next()).done;)a.push(t.value);return a.join(i)}})},function(e,t,n){"use strict";var r=n(14),u=n(2),o=n(4),i=n(7),a=n(18),l=n(19);n(1)({target:"Set",proto:!0,real:!0,forced:n(3)},{map:function(e){for(var t,n,c=u(this),s=l(c),f=i(e,arguments.length>1?arguments[1]:void 0,3),d=new(a(c,r("Set"))),p=o(d.add);!(t=s.next()).done;)p.call(d,f(n=t.value,n,c));return d}})},function(e,t,n){n(1)({target:"Set",stat:!0},{of:n(76)})},function(e,t,n){"use strict";var r=n(2),u=n(4),o=n(19);n(1)({target:"Set",proto:!0,real:!0,forced:n(3)},{reduce:function(e){var t,n,i,a=r(this),l=o(a);if(u(e),arguments.length>1)t=arguments[1];else{if((n=l.next()).done)throw TypeError("Reduce of empty set with no initial value");t=n.value}for(;!(n=l.next()).done;)t=e(t,i=n.value,i,a);return t}})},function(e,t,n){"use strict";var r=n(2),u=n(7),o=n(19);n(1)({target:"Set",proto:!0,real:!0,forced:n(3)},{some:function(e){for(var t,n,i=r(this),a=o(i),l=u(e,arguments.length>1?arguments[1]:void 0,3);!(t=a.next()).done;)if(l(n=t.value,n,i))return!0;return!1}})},function(e,t,n){"use strict";var r=n(14),u=n(2),o=n(4),i=n(18),a=n(9);n(1)({target:"Set",proto:!0,real:!0,forced:n(3)},{symmetricDifference:function(e){var t=u(this),n=new(i(t,r("Set")))(t),l=o(n.delete),c=o(n.add);return a(e,function(e){l.call(n,e)||c.call(n,e)}),n}})},function(e,t,n){"use strict";var r=n(14),u=n(2),o=n(4),i=n(18),a=n(9);n(1)({target:"Set",proto:!0,real:!0,forced:n(3)},{union:function(e){var t=u(this),n=new(i(t,r("Set")))(t);return a(e,o(n.add),n),n}})},function(e,t,n){var r=n(142),u=n(143),o=n(5),i=n(17),a=n(6),l=a("iterator"),c=a("toStringTag"),s=u.values;for(var f in r){var d=o[f],p=d&&d.prototype;if(p){if(p[l]!==s)try{i(p,l,s)}catch(e){p[l]=s}if(p[c]||i(p,c,f),r[f])for(var h in u)if(p[h]!==u[h])try{i(p,h,u[h])}catch(e){p[h]=u[h]}}}},function(e,t){e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(e,t,n){"use strict";var r=n(20),u=n(144),o=n(27),i=n(25),a=n(45),l=i.set,c=i.getterFor("Array Iterator");e.exports=a(Array,"Array",function(e,t){l(this,{type:"Array Iterator",target:r(e),index:0,kind:t})},function(){var e=c(this),t=e.target,n=e.kind,r=e.index++;return!t||r>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:t[r],done:!1}:{value:[r,t[r]],done:!1}},"values"),o.Arguments=o.Array,u("keys"),u("values"),u("entries")},function(e,t,n){var r=n(6)("unscopables"),u=n(32),o=n(17),i=Array.prototype;void 0==i[r]&&o(i,r,u(null)),e.exports=function(e){i[r][e]=!0}},function(e,t,n){"use strict";n(146),n(149),n(150),n(151),n(152),n(153),n(154),n(155),n(156),n(157),n(158),n(159),n(160),n(161),n(162),n(165),n(167),n(168),n(72),n(73),n(169),n(170),n(171),"undefined"===typeof Promise&&(n(172).enable(),window.Promise=n(174)),"undefined"!==typeof window&&n(175),Object.assign=n(50)},function(e,t,n){"use strict";var r=n(5),u=n(11),o=n(16),i=n(3),a=n(1),l=n(21),c=n(26),s=n(12),f=n(24),d=n(22),p=n(30),h=n(6),m=n(77),g=n(8),v=n(147),y=n(48),D=n(2),b=n(10),A=n(20),C=n(28),E=n(23),F=n(32),w=n(148),x=n(34),B=n(13),k=n(35),S=n(17),T=n(44),_=n(29)("hidden"),P=n(25),O=P.set,N=P.getterFor("Symbol"),R=x.f,I=B.f,L=w.f,M=r.Symbol,j=r.JSON,q=j&&j.stringify,U=h("toPrimitive"),z=k.f,H=f("symbol-registry"),V=f("symbols"),W=f("op-symbols"),G=f("wks"),$=Object.prototype,K=r.QObject,Q=n(62),Y=!K||!K.prototype||!K.prototype.findChild,J=o&&s(function(){return 7!=F(I({},"a",{get:function(){return I(this,"a",{value:7}).a}})).a})?function(e,t,n){var r=R($,t);r&&delete $[t],I(e,t,n),r&&e!==$&&I($,t,r)}:I,X=function(e,t){var n=V[e]=F(M.prototype);return O(n,{type:"Symbol",tag:e,description:t}),o||(n.description=t),n},Z=Q&&"symbol"==typeof M.iterator?function(e){return"symbol"==typeof e}:function(e){return Object(e)instanceof M},ee=function(e,t,n){return e===$&&ee(W,t,n),D(e),t=C(t,!0),D(n),u(V,t)?(n.enumerable?(u(e,_)&&e[_][t]&&(e[_][t]=!1),n=F(n,{enumerable:E(0,!1)})):(u(e,_)||I(e,_,E(1,{})),e[_][t]=!0),J(e,t,n)):I(e,t,n)},te=function(e,t){D(e);for(var n,r=v(t=A(t)),u=0,o=r.length;o>u;)ee(e,n=r[u++],t[n]);return e},ne=function(e){var t=z.call(this,e=C(e,!0));return!(this===$&&u(V,e)&&!u(W,e))&&(!(t||!u(this,e)||!u(V,e)||u(this,_)&&this[_][e])||t)},re=function(e,t){if(e=A(e),t=C(t,!0),e!==$||!u(V,t)||u(W,t)){var n=R(e,t);return!n||!u(V,t)||u(e,_)&&e[_][t]||(n.enumerable=!0),n}},ue=function(e){for(var t,n=L(A(e)),r=[],o=0;n.length>o;)u(V,t=n[o++])||u(c,t)||r.push(t);return r},oe=function(e){for(var t,n=e===$,r=L(n?W:A(e)),o=[],i=0;r.length>i;)!u(V,t=r[i++])||n&&!u($,t)||o.push(V[t]);return o};Q||(l((M=function(){if(this instanceof M)throw TypeError("Symbol is not a constructor");var e=void 0===arguments[0]?void 0:String(arguments[0]),t=p(e);return o&&Y&&J($,t,{configurable:!0,set:function e(n){this===$&&e.call(W,n),u(this,_)&&u(this[_],t)&&(this[_][t]=!1),J(this,t,E(1,n))}}),X(t,e)}).prototype,"toString",function(){return N(this).tag}),k.f=ne,B.f=ee,x.f=re,n(39).f=w.f=ue,n(42).f=oe,o&&(I(M.prototype,"description",{configurable:!0,get:function(){return N(this).description}}),i||l($,"propertyIsEnumerable",ne,{unsafe:!0})),m.f=function(e){return X(h(e),e)}),a({global:!0,wrap:!0,forced:!Q,sham:!Q},{Symbol:M});for(var ie=T(G),ae=0;ie.length>ae;)g(ie[ae++]);a({target:"Symbol",stat:!0,forced:!Q},{for:function(e){return u(H,e+="")?H[e]:H[e]=M(e)},keyFor:function(e){if(!Z(e))throw TypeError(e+" is not a symbol");for(var t in H)if(H[t]===e)return t},useSetter:function(){Y=!0},useSimple:function(){Y=!1}}),a({target:"Object",stat:!0,forced:!Q,sham:!o},{create:function(e,t){return void 0===t?F(e):te(F(e),t)},defineProperty:ee,defineProperties:te,getOwnPropertyDescriptor:re}),a({target:"Object",stat:!0,forced:!Q},{getOwnPropertyNames:ue,getOwnPropertySymbols:oe}),j&&a({target:"JSON",stat:!0,forced:!Q||s(function(){var e=M();return"[null]"!=q([e])||"{}"!=q({a:e})||"{}"!=q(Object(e))})},{stringify:function(e){for(var t,n,r=[e],u=1;arguments.length>u;)r.push(arguments[u++]);if(n=t=r[1],(b(t)||void 0!==e)&&!Z(e))return y(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!Z(t))return t}),r[1]=t,q.apply(j,r)}}),M.prototype[U]||S(M.prototype,U,M.prototype.valueOf),d(M,"Symbol"),c[_]=!0},function(e,t,n){var r=n(44),u=n(42),o=n(35);e.exports=function(e){var t=r(e),n=u.f;if(n)for(var i,a=n(e),l=o.f,c=0;a.length>c;)l.call(e,i=a[c++])&&t.push(i);return t}},function(e,t,n){var r=n(20),u=n(39).f,o={}.toString,i="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return i&&"[object Window]"==o.call(e)?function(e){try{return u(e)}catch(e){return i.slice()}}(e):u(r(e))}},function(e,t,n){"use strict";var r=n(16),u=n(11),o=n(10),i=n(13).f,a=n(58),l=n(5).Symbol;if(r&&"function"==typeof l&&(!("description"in l.prototype)||void 0!==l().description)){var c={},s=function(){var e=arguments.length<1||void 0===arguments[0]?void 0:String(arguments[0]),t=this instanceof s?new l(e):void 0===e?l():l(e);return""===e&&(c[t]=!0),t};a(s,l);var f=s.prototype=l.prototype;f.constructor=s;var d=f.toString,p="Symbol(test)"==String(l("test")),h=/^Symbol\\((.*)\\)[^)]+$/;i(f,"description",{configurable:!0,get:function(){var e=o(this)?this.valueOf():this,t=d.call(e);if(u(c,e))return"";var n=p?t.slice(7,-1):t.replace(h,"$1");return""===n?void 0:n}}),n(1)({global:!0,forced:!0},{Symbol:s})}},function(e,t,n){n(8)("asyncIterator")},function(e,t,n){n(8)("hasInstance")},function(e,t,n){n(8)("isConcatSpreadable")},function(e,t,n){n(8)("iterator")},function(e,t,n){n(8)("match")},function(e,t,n){n(8)("replace")},function(e,t,n){n(8)("search")},function(e,t,n){n(8)("species")},function(e,t,n){n(8)("split")},function(e,t,n){n(8)("toPrimitive")},function(e,t,n){n(8)("toStringTag")},function(e,t,n){n(8)("unscopables")},function(e,t,n){"use strict";var r=n(48),u=n(10),o=n(46),i=n(31),a=n(78),l=n(163),c=n(6)("isConcatSpreadable"),s=!n(12)(function(){var e=[];return e[c]=!1,e.concat()[0]!==e}),f=n(164)("concat"),d=function(e){if(!u(e))return!1;var t=e[c];return void 0!==t?!!t:r(e)},p=!s||!f;n(1)({target:"Array",proto:!0,forced:p},{concat:function(e){var t,n,r,u,c,s=o(this),f=l(s,0),p=0;for(t=-1,r=arguments.length;t<r;t++)if(c=-1===t?s:arguments[t],d(c)){if(p+(u=i(c.length))>9007199254740991)throw TypeError("Maximum allowed index exceeded");for(n=0;n<u;n++,p++)n in c&&a(f,p,c[n])}else{if(p>=9007199254740991)throw TypeError("Maximum allowed index exceeded");a(f,p++,c)}return f.length=p,f}})},function(e,t,n){var r=n(10),u=n(48),o=n(6)("species");e.exports=function(e,t){var n;return u(e)&&("function"!=typeof(n=e.constructor)||n!==Array&&!u(n.prototype)?r(n)&&null===(n=n[o])&&(n=void 0):n=void 0),new(void 0===n?Array:n)(0===t?0:t)}},function(e,t,n){var r=n(12),u=n(6)("species");e.exports=function(e){return!r(function(){var t=[];return(t.constructor={})[u]=function(){return{foo:1}},1!==t[e](Boolean).foo})}},function(e,t,n){var r=!n(66)(function(e){Array.from(e)});n(1)({target:"Array",stat:!0,forced:r},{from:n(166)})},function(e,t,n){"use strict";var r=n(7),u=n(46),o=n(64),i=n(61),a=n(31),l=n(78),c=n(43);e.exports=function(e){var t,n,s,f,d=u(e),p="function"==typeof this?this:Array,h=arguments.length,m=h>1?arguments[1]:void 0,g=void 0!==m,v=0,y=c(d);if(g&&(m=r(m,h>2?arguments[2]:void 0,2)),void 0==y||p==Array&&i(y))for(n=new p(t=a(d.length));t>v;v++)l(n,v,g?m(d[v],v):d[v]);else for(f=y.call(d),n=new p;!(s=f.next()).done;v++)l(n,v,g?o(f,m,[s.value,v],!0):s.value);return n.length=v,n}},function(e,t,n){n(22)(n(5).JSON,"JSON",!0)},function(e,t,n){n(22)(Math,"Math",!0)},function(e,t,n){n(8)("dispose")},function(e,t,n){n(8)("observable")},function(e,t,n){n(8)("patternMatch")},function(e,t,n){"use strict";var r=n(79),u=[ReferenceError,TypeError,RangeError],o=!1;function i(){o=!1,r._l=null,r._m=null}function a(e,t){return t.some(function(t){return e instanceof t})}t.disable=i,t.enable=function(e){e=e||{},o&&i();o=!0;var t=0,n=0,l={};function c(t){(e.allRejections||a(l[t].error,e.whitelist||u))&&(l[t].displayId=n++,e.onUnhandled?(l[t].logged=!0,e.onUnhandled(l[t].displayId,l[t].error)):(l[t].logged=!0,function(e,t){console.warn("Possible Unhandled Promise Rejection (id: "+e+"):"),((t&&(t.stack||t))+"").split("\\n").forEach(function(e){console.warn("  "+e)})}(l[t].displayId,l[t].error)))}r._l=function(t){var n;2===t._i&&l[t._o]&&(l[t._o].logged?(n=t._o,l[n].logged&&(e.onHandled?e.onHandled(l[n].displayId,l[n].error):l[n].onUnhandled||(console.warn("Promise Rejection Handled (id: "+l[n].displayId+"):"),console.warn(\'  This means you can ignore any previous messages of the form "Possible Unhandled Promise Rejection" with id \'+l[n].displayId+".")))):clearTimeout(l[t._o].timeout),delete l[t._o])},r._m=function(e,n){0===e._h&&(e._o=t++,l[e._o]={displayId:null,error:n,timeout:setTimeout(c.bind(null,e._o),a(n,u)?100:2e3),logged:!1})}}},function(e,t,n){"use strict";(function(t){function n(e){u.length||(r(),!0),u[u.length]=e}e.exports=n;var r,u=[],o=0,i=1024;function a(){for(;o<u.length;){var e=o;if(o+=1,u[e].call(),o>i){for(var t=0,n=u.length-o;t<n;t++)u[t]=u[t+o];u.length-=o,o=0}}u.length=0,o=0,!1}var l,c,s,f="undefined"!==typeof t?t:self,d=f.MutationObserver||f.WebKitMutationObserver;function p(e){return function(){var t=setTimeout(r,0),n=setInterval(r,50);function r(){clearTimeout(t),clearInterval(n),e()}}}"function"===typeof d?(l=1,c=new d(a),s=document.createTextNode(""),c.observe(s,{characterData:!0}),r=function(){l=-l,s.data=l}):r=p(a),n.requestFlush=r,n.makeRequestCallFromTimer=p}).call(this,n(49))},function(e,t,n){"use strict";var r=n(79);e.exports=r;var u=s(!0),o=s(!1),i=s(null),a=s(void 0),l=s(0),c=s("");function s(e){var t=new r(r._n);return t._i=1,t._j=e,t}r.resolve=function(e){if(e instanceof r)return e;if(null===e)return i;if(void 0===e)return a;if(!0===e)return u;if(!1===e)return o;if(0===e)return l;if(""===e)return c;if("object"===typeof e||"function"===typeof e)try{var t=e.then;if("function"===typeof t)return new r(t.bind(e))}catch(e){return new r(function(t,n){n(e)})}return s(e)},r.all=function(e){var t=Array.prototype.slice.call(e);return new r(function(e,n){if(0===t.length)return e([]);var u=t.length;function o(i,a){if(a&&("object"===typeof a||"function"===typeof a)){if(a instanceof r&&a.then===r.prototype.then){for(;3===a._i;)a=a._j;return 1===a._i?o(i,a._j):(2===a._i&&n(a._j),void a.then(function(e){o(i,e)},n))}var l=a.then;if("function"===typeof l)return void new r(l.bind(a)).then(function(e){o(i,e)},n)}t[i]=a,0===--u&&e(t)}for(var i=0;i<t.length;i++)o(i,t[i])})},r.reject=function(e){return new r(function(t,n){n(e)})},r.race=function(e){return new r(function(t,n){e.forEach(function(e){r.resolve(e).then(t,n)})})},r.prototype.catch=function(e){return this.then(null,e)}},function(e,t,n){"use strict";n.r(t),n.d(t,"Headers",function(){return c}),n.d(t,"Request",function(){return g}),n.d(t,"Response",function(){return y}),n.d(t,"DOMException",function(){return b}),n.d(t,"fetch",function(){return A});var r={searchParams:"URLSearchParams"in self,iterable:"Symbol"in self&&"iterator"in Symbol,blob:"FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(e){return!1}}(),formData:"FormData"in self,arrayBuffer:"ArrayBuffer"in self};if(r.arrayBuffer)var u=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],o=ArrayBuffer.isView||function(e){return e&&u.indexOf(Object.prototype.toString.call(e))>-1};function i(e){if("string"!==typeof e&&(e=String(e)),/[^a-z0-9\\-#$%&\'*+.^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function a(e){return"string"!==typeof e&&(e=String(e)),e}function l(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return r.iterable&&(t[Symbol.iterator]=function(){return t}),t}function c(e){this.map={},e instanceof c?e.forEach(function(e,t){this.append(t,e)},this):Array.isArray(e)?e.forEach(function(e){this.append(e[0],e[1])},this):e&&Object.getOwnPropertyNames(e).forEach(function(t){this.append(t,e[t])},this)}function s(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function f(e){return new Promise(function(t,n){e.onload=function(){t(e.result)},e.onerror=function(){n(e.error)}})}function d(e){var t=new FileReader,n=f(t);return t.readAsArrayBuffer(e),n}function p(e){if(e.slice)return e.slice(0);var t=new Uint8Array(e.byteLength);return t.set(new Uint8Array(e)),t.buffer}function h(){return this.bodyUsed=!1,this._initBody=function(e){var t;this._bodyInit=e,e?"string"===typeof e?this._bodyText=e:r.blob&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:r.formData&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:r.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():r.arrayBuffer&&r.blob&&((t=e)&&DataView.prototype.isPrototypeOf(t))?(this._bodyArrayBuffer=p(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):r.arrayBuffer&&(ArrayBuffer.prototype.isPrototypeOf(e)||o(e))?this._bodyArrayBuffer=p(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"===typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):r.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},r.blob&&(this.blob=function(){var e=s(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?s(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(d)}),this.text=function(){var e,t,n,r=s(this);if(r)return r;if(this._bodyBlob)return e=this._bodyBlob,t=new FileReader,n=f(t),t.readAsText(e),n;if(this._bodyArrayBuffer)return Promise.resolve(function(e){for(var t=new Uint8Array(e),n=new Array(t.length),r=0;r<t.length;r++)n[r]=String.fromCharCode(t[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},r.formData&&(this.formData=function(){return this.text().then(v)}),this.json=function(){return this.text().then(JSON.parse)},this}c.prototype.append=function(e,t){e=i(e),t=a(t);var n=this.map[e];this.map[e]=n?n+", "+t:t},c.prototype.delete=function(e){delete this.map[i(e)]},c.prototype.get=function(e){return e=i(e),this.has(e)?this.map[e]:null},c.prototype.has=function(e){return this.map.hasOwnProperty(i(e))},c.prototype.set=function(e,t){this.map[i(e)]=a(t)},c.prototype.forEach=function(e,t){for(var n in this.map)this.map.hasOwnProperty(n)&&e.call(t,this.map[n],n,this)},c.prototype.keys=function(){var e=[];return this.forEach(function(t,n){e.push(n)}),l(e)},c.prototype.values=function(){var e=[];return this.forEach(function(t){e.push(t)}),l(e)},c.prototype.entries=function(){var e=[];return this.forEach(function(t,n){e.push([n,t])}),l(e)},r.iterable&&(c.prototype[Symbol.iterator]=c.prototype.entries);var m=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function g(e,t){var n,r,u=(t=t||{}).body;if(e instanceof g){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new c(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,u||null==e._bodyInit||(u=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new c(t.headers)),this.method=(n=t.method||this.method||"GET",r=n.toUpperCase(),m.indexOf(r)>-1?r:n),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&u)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(u)}function v(e){var t=new FormData;return e.trim().split("&").forEach(function(e){if(e){var n=e.split("="),r=n.shift().replace(/\\+/g," "),u=n.join("=").replace(/\\+/g," ");t.append(decodeURIComponent(r),decodeURIComponent(u))}}),t}function y(e,t){t||(t={}),this.type="default",this.status=void 0===t.status?200:t.status,this.ok=this.status>=200&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new c(t.headers),this.url=t.url||"",this._initBody(e)}g.prototype.clone=function(){return new g(this,{body:this._bodyInit})},h.call(g.prototype),h.call(y.prototype),y.prototype.clone=function(){return new y(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new c(this.headers),url:this.url})},y.error=function(){var e=new y(null,{status:0,statusText:""});return e.type="error",e};var D=[301,302,303,307,308];y.redirect=function(e,t){if(-1===D.indexOf(t))throw new RangeError("Invalid status code");return new y(null,{status:t,headers:{location:e}})};var b=self.DOMException;try{new b}catch(e){(b=function(e,t){this.message=e,this.name=t;var n=Error(e);this.stack=n.stack}).prototype=Object.create(Error.prototype),b.prototype.constructor=b}function A(e,t){return new Promise(function(n,u){var o=new g(e,t);if(o.signal&&o.signal.aborted)return u(new b("Aborted","AbortError"));var i=new XMLHttpRequest;function a(){i.abort()}i.onload=function(){var e,t,r={status:i.status,statusText:i.statusText,headers:(e=i.getAllResponseHeaders()||"",t=new c,e.replace(/\\r?\\n[\\t ]+/g," ").split(/\\r?\\n/).forEach(function(e){var n=e.split(":"),r=n.shift().trim();if(r){var u=n.join(":").trim();t.append(r,u)}}),t)};r.url="responseURL"in i?i.responseURL:r.headers.get("X-Request-URL");var u="response"in i?i.response:i.responseText;n(new y(u,r))},i.onerror=function(){u(new TypeError("Network request failed"))},i.ontimeout=function(){u(new TypeError("Network request failed"))},i.onabort=function(){u(new b("Aborted","AbortError"))},i.open(o.method,o.url,!0),"include"===o.credentials?i.withCredentials=!0:"omit"===o.credentials&&(i.withCredentials=!1),"responseType"in i&&r.blob&&(i.responseType="blob"),o.headers.forEach(function(e,t){i.setRequestHeader(t,e)}),o.signal&&(o.signal.addEventListener("abort",a),i.onreadystatechange=function(){4===i.readyState&&o.signal.removeEventListener("abort",a)}),i.send("undefined"===typeof o._bodyInit?null:o._bodyInit)})}A.polyfill=!0,self.fetch||(self.fetch=A,self.Headers=c,self.Request=g,self.Response=y)},function(e,t,n){(function(t){for(var r=n(177),u="undefined"===typeof window?t:window,o=["moz","webkit"],i="AnimationFrame",a=u["request"+i],l=u["cancel"+i]||u["cancelRequest"+i],c=0;!a&&c<o.length;c++)a=u[o[c]+"Request"+i],l=u[o[c]+"Cancel"+i]||u[o[c]+"CancelRequest"+i];if(!a||!l){var s=0,f=0,d=[];a=function(e){if(0===d.length){var t=r(),n=Math.max(0,1e3/60-(t-s));s=n+t,setTimeout(function(){var e=d.slice(0);d.length=0;for(var t=0;t<e.length;t++)if(!e[t].cancelled)try{e[t].callback(s)}catch(e){setTimeout(function(){throw e},0)}},Math.round(n))}return d.push({handle:++f,callback:e,cancelled:!1}),f},l=function(e){for(var t=0;t<d.length;t++)d[t].handle===e&&(d[t].cancelled=!0)}}e.exports=function(e){return a.call(u,e)},e.exports.cancel=function(){l.apply(u,arguments)},e.exports.polyfill=function(e){e||(e=u),e.requestAnimationFrame=a,e.cancelAnimationFrame=l}}).call(this,n(49))},function(e,t,n){(function(t){(function(){var n,r,u,o,i,a;"undefined"!==typeof performance&&null!==performance&&performance.now?e.exports=function(){return performance.now()}:"undefined"!==typeof t&&null!==t&&t.hrtime?(e.exports=function(){return(n()-i)/1e6},r=t.hrtime,o=(n=function(){var e;return 1e9*(e=r())[0]+e[1]})(),a=1e9*t.uptime(),i=o-a):Date.now?(e.exports=function(){return Date.now()-u},u=Date.now()):(e.exports=function(){return(new Date).getTime()-u},u=(new Date).getTime())}).call(this)}).call(this,n(51))},function(e,t,n){"use strict";var r=n(50),u="function"===typeof Symbol&&Symbol.for,o=u?Symbol.for("react.element"):60103,i=u?Symbol.for("react.portal"):60106,a=u?Symbol.for("react.fragment"):60107,l=u?Symbol.for("react.strict_mode"):60108,c=u?Symbol.for("react.profiler"):60114,s=u?Symbol.for("react.provider"):60109,f=u?Symbol.for("react.context"):60110,d=u?Symbol.for("react.concurrent_mode"):60111,p=u?Symbol.for("react.forward_ref"):60112,h=u?Symbol.for("react.suspense"):60113,m=u?Symbol.for("react.memo"):60115,g=u?Symbol.for("react.lazy"):60116,v="function"===typeof Symbol&&Symbol.iterator;function y(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,u,o,i,a){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,u,o,i,a],c=0;(e=Error(t.replace(/%s/g,function(){return l[c++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var D={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function A(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||D}function C(){}function E(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||D}A.prototype.isReactComponent={},A.prototype.setState=function(e,t){"object"!==typeof e&&"function"!==typeof e&&null!=e&&y("85"),this.updater.enqueueSetState(this,e,t,"setState")},A.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},C.prototype=A.prototype;var F=E.prototype=new C;F.constructor=E,r(F,A.prototype),F.isPureReactComponent=!0;var w={current:null},x={current:null},B=Object.prototype.hasOwnProperty,k={key:!0,ref:!0,__self:!0,__source:!0};function S(e,t,n){var r=void 0,u={},i=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),t)B.call(t,r)&&!k.hasOwnProperty(r)&&(u[r]=t[r]);var l=arguments.length-2;if(1===l)u.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];u.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===u[r]&&(u[r]=l[r]);return{$$typeof:o,type:e,key:i,ref:a,props:u,_owner:x.current}}function T(e){return"object"===typeof e&&null!==e&&e.$$typeof===o}var _=/\\/+/g,P=[];function O(e,t,n,r){if(P.length){var u=P.pop();return u.result=e,u.keyPrefix=t,u.func=n,u.context=r,u.count=0,u}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function N(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>P.length&&P.push(e)}function R(e,t,n){return null==e?0:function e(t,n,r,u){var a=typeof t;"undefined"!==a&&"boolean"!==a||(t=null);var l=!1;if(null===t)l=!0;else switch(a){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case o:case i:l=!0}}if(l)return r(u,t,""===n?"."+I(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+I(a=t[c],c);l+=e(a,s,r,u)}else if(s=null===t||"object"!==typeof t?null:"function"===typeof(s=v&&t[v]||t["@@iterator"])?s:null,"function"===typeof s)for(t=s.call(t),c=0;!(a=t.next()).done;)l+=e(a=a.value,s=n+I(a,c++),r,u);else"object"===a&&y("31","[object Object]"===(r=""+t)?"object with keys {"+Object.keys(t).join(", ")+"}":r,"");return l}(e,"",t,n)}function I(e,t){return"object"===typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function L(e,t){e.func.call(e.context,t,e.count++)}function M(e,t,n){var r=e.result,u=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?j(e,r,n,function(e){return e}):null!=e&&(T(e)&&(e=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,u+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(_,"$&/")+"/")+n)),r.push(e))}function j(e,t,n,r,u){var o="";null!=n&&(o=(""+n).replace(_,"$&/")+"/"),R(e,M,t=O(t,o,r,u)),N(t)}function q(){var e=w.current;return null===e&&y("321"),e}var U={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return j(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;R(e,L,t=O(null,null,t,n)),N(t)},count:function(e){return R(e,function(){return null},null)},toArray:function(e){var t=[];return j(e,t,null,function(e){return e}),t},only:function(e){return T(e)||y("143"),e}},createRef:function(){return{current:null}},Component:A,PureComponent:E,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:p,render:e}},lazy:function(e){return{$$typeof:g,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:m,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return q().useCallback(e,t)},useContext:function(e,t){return q().useContext(e,t)},useEffect:function(e,t){return q().useEffect(e,t)},useImperativeHandle:function(e,t,n){return q().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return q().useLayoutEffect(e,t)},useMemo:function(e,t){return q().useMemo(e,t)},useReducer:function(e,t,n){return q().useReducer(e,t,n)},useRef:function(e){return q().useRef(e)},useState:function(e){return q().useState(e)},Fragment:a,StrictMode:l,Suspense:h,createElement:S,cloneElement:function(e,t,n){(null===e||void 0===e)&&y("267",e);var u=void 0,i=r({},e.props),a=e.key,l=e.ref,c=e._owner;if(null!=t){void 0!==t.ref&&(l=t.ref,c=x.current),void 0!==t.key&&(a=""+t.key);var s=void 0;for(u in e.type&&e.type.defaultProps&&(s=e.type.defaultProps),t)B.call(t,u)&&!k.hasOwnProperty(u)&&(i[u]=void 0===t[u]&&void 0!==s?s[u]:t[u])}if(1===(u=arguments.length-2))i.children=n;else if(1<u){s=Array(u);for(var f=0;f<u;f++)s[f]=arguments[f+2];i.children=s}return{$$typeof:o,type:e.type,key:a,ref:l,props:i,_owner:c}},createFactory:function(e){var t=S.bind(null,e);return t.type=e,t},isValidElement:T,version:"16.8.6",unstable_ConcurrentMode:d,unstable_Profiler:c,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:w,ReactCurrentOwner:x,assign:r}},z={default:U},H=z&&U||z;e.exports=H.default||H},function(e,t,n){"use strict";var r=n(0),u=n(50),o=n(180);function i(e){for(var t=arguments.length-1,n="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);!function(e,t,n,r,u,o,i,a){if(!e){if(e=void 0,void 0===t)e=Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var l=[n,r,u,o,i,a],c=0;(e=Error(t.replace(/%s/g,function(){return l[c++]}))).name="Invariant Violation"}throw e.framesToPop=1,e}}(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}r||i("227");var a=!1,l=null,c=!1,s=null,f={onError:function(e){a=!0,l=e}};function d(e,t,n,r,u,o,i,c,s){a=!1,l=null,function(e,t,n,r,u,o,i,a,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}.apply(f,arguments)}var p=null,h={};function m(){if(p)for(var e in h){var t=h[e],n=p.indexOf(e);if(-1<n||i("96",e),!v[n])for(var r in t.extractEvents||i("97",e),v[n]=t,n=t.eventTypes){var u=void 0,o=n[r],a=t,l=r;y.hasOwnProperty(l)&&i("99",l),y[l]=o;var c=o.phasedRegistrationNames;if(c){for(u in c)c.hasOwnProperty(u)&&g(c[u],a,l);u=!0}else o.registrationName?(g(o.registrationName,a,l),u=!0):u=!1;u||i("98",r,e)}}}function g(e,t,n){D[e]&&i("100",e),D[e]=t,b[e]=t.eventTypes[n].dependencies}var v=[],y={},D={},b={},A=null,C=null,E=null;function F(e,t,n){var r=e.type||"unknown-event";e.currentTarget=E(n),function(e,t,n,r,u,o,f,p,h){if(d.apply(this,arguments),a){if(a){var m=l;a=!1,l=null}else i("198"),m=void 0;c||(c=!0,s=m)}}(r,t,void 0,e),e.currentTarget=null}function w(e,t){return null==t&&i("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function x(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var B=null;function k(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)F(e,t[r],n[r]);else t&&F(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}var S={injectEventPluginOrder:function(e){p&&i("101"),p=Array.prototype.slice.call(e),m()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];h.hasOwnProperty(t)&&h[t]===r||(h[t]&&i("102",t),h[t]=r,n=!0)}n&&m()}};function T(e,t){var n=e.stateNode;if(!n)return null;var r=A(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!==typeof n&&i("231",t,typeof n),n)}function _(e){if(null!==e&&(B=w(B,e)),e=B,B=null,e&&(x(e,k),B&&i("95"),c))throw e=s,c=!1,s=null,e}var P=Math.random().toString(36).slice(2),O="__reactInternalInstance$"+P,N="__reactEventHandlers$"+P;function R(e){if(e[O])return e[O];for(;!e[O];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[O]).tag||6===e.tag?e:null}function I(e){return!(e=e[O])||5!==e.tag&&6!==e.tag?null:e}function L(e){if(5===e.tag||6===e.tag)return e.stateNode;i("33")}function M(e){return e[N]||null}function j(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function q(e,t,n){(t=T(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=w(n._dispatchListeners,t),n._dispatchInstances=w(n._dispatchInstances,e))}function U(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=j(t);for(t=n.length;0<t--;)q(n[t],"captured",e);for(t=0;t<n.length;t++)q(n[t],"bubbled",e)}}function z(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=T(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=w(n._dispatchListeners,t),n._dispatchInstances=w(n._dispatchInstances,e))}function H(e){e&&e.dispatchConfig.registrationName&&z(e._targetInst,null,e)}function V(e){x(e,U)}var W=!("undefined"===typeof window||!window.document||!window.document.createElement);function G(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var $={animationend:G("Animation","AnimationEnd"),animationiteration:G("Animation","AnimationIteration"),animationstart:G("Animation","AnimationStart"),transitionend:G("Transition","TransitionEnd")},K={},Q={};function Y(e){if(K[e])return K[e];if(!$[e])return e;var t,n=$[e];for(t in n)if(n.hasOwnProperty(t)&&t in Q)return K[e]=n[t];return e}W&&(Q=document.createElement("div").style,"AnimationEvent"in window||(delete $.animationend.animation,delete $.animationiteration.animation,delete $.animationstart.animation),"TransitionEvent"in window||delete $.transitionend.transition);var J=Y("animationend"),X=Y("animationiteration"),Z=Y("animationstart"),ee=Y("transitionend"),te="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),ne=null,re=null,ue=null;function oe(){if(ue)return ue;var e,t,n=re,r=n.length,u="value"in ne?ne.value:ne.textContent,o=u.length;for(e=0;e<r&&n[e]===u[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===u[o-t];t++);return ue=u.slice(e,1<t?1-t:void 0)}function ie(){return!0}function ae(){return!1}function le(e,t,n,r){for(var u in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(u)&&((t=e[u])?this[u]=t(n):"target"===u?this.target=r:this[u]=n[u]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?ie:ae,this.isPropagationStopped=ae,this}function ce(e,t,n,r){if(this.eventPool.length){var u=this.eventPool.pop();return this.call(u,e,t,n,r),u}return new this(e,t,n,r)}function se(e){e instanceof this||i("279"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function fe(e){e.eventPool=[],e.getPooled=ce,e.release=se}u(le.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!==typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=ie)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!==typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=ie)},persist:function(){this.isPersistent=ie},isPersistent:ae,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=ae,this._dispatchInstances=this._dispatchListeners=null}}),le.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},le.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return u(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=u({},r.Interface,e),n.extend=r.extend,fe(n),n},fe(le);var de=le.extend({data:null}),pe=le.extend({data:null}),he=[9,13,27,32],me=W&&"CompositionEvent"in window,ge=null;W&&"documentMode"in document&&(ge=document.documentMode);var ve=W&&"TextEvent"in window&&!ge,ye=W&&(!me||ge&&8<ge&&11>=ge),De=String.fromCharCode(32),be={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Ae=!1;function Ce(e,t){switch(e){case"keyup":return-1!==he.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function Ee(e){return"object"===typeof(e=e.detail)&&"data"in e?e.data:null}var Fe=!1;var we={eventTypes:be,extractEvents:function(e,t,n,r){var u=void 0,o=void 0;if(me)e:{switch(e){case"compositionstart":u=be.compositionStart;break e;case"compositionend":u=be.compositionEnd;break e;case"compositionupdate":u=be.compositionUpdate;break e}u=void 0}else Fe?Ce(e,n)&&(u=be.compositionEnd):"keydown"===e&&229===n.keyCode&&(u=be.compositionStart);return u?(ye&&"ko"!==n.locale&&(Fe||u!==be.compositionStart?u===be.compositionEnd&&Fe&&(o=oe()):(re="value"in(ne=r)?ne.value:ne.textContent,Fe=!0)),u=de.getPooled(u,t,n,r),o?u.data=o:null!==(o=Ee(n))&&(u.data=o),V(u),o=u):o=null,(e=ve?function(e,t){switch(e){case"compositionend":return Ee(t);case"keypress":return 32!==t.which?null:(Ae=!0,De);case"textInput":return(e=t.data)===De&&Ae?null:e;default:return null}}(e,n):function(e,t){if(Fe)return"compositionend"===e||!me&&Ce(e,t)?(e=oe(),ue=re=ne=null,Fe=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return ye&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=pe.getPooled(be.beforeInput,t,n,r)).data=e,V(t)):t=null,null===o?t:null===t?o:[o,t]}},xe=null,Be=null,ke=null;function Se(e){if(e=C(e)){"function"!==typeof xe&&i("280");var t=A(e.stateNode);xe(e.stateNode,e.type,t)}}function Te(e){Be?ke?ke.push(e):ke=[e]:Be=e}function _e(){if(Be){var e=Be,t=ke;if(ke=Be=null,Se(e),t)for(e=0;e<t.length;e++)Se(t[e])}}function Pe(e,t){return e(t)}function Oe(e,t,n){return e(t,n)}function Ne(){}var Re=!1;function Ie(e,t){if(Re)return e(t);Re=!0;try{return Pe(e,t)}finally{Re=!1,(null!==Be||null!==ke)&&(Ne(),_e())}}var Le={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Me(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Le[e.type]:"textarea"===t}function je(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function qe(e){if(!W)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"===typeof t[e]),t}function Ue(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function ze(e){e._valueTracker||(e._valueTracker=function(e){var t=Ue(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"undefined"!==typeof n&&"function"===typeof n.get&&"function"===typeof n.set){var u=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return u.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function He(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Ue(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Ve=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;Ve.hasOwnProperty("ReactCurrentDispatcher")||(Ve.ReactCurrentDispatcher={current:null});var We=/^(.*)[\\\\\\/]/,Ge="function"===typeof Symbol&&Symbol.for,$e=Ge?Symbol.for("react.element"):60103,Ke=Ge?Symbol.for("react.portal"):60106,Qe=Ge?Symbol.for("react.fragment"):60107,Ye=Ge?Symbol.for("react.strict_mode"):60108,Je=Ge?Symbol.for("react.profiler"):60114,Xe=Ge?Symbol.for("react.provider"):60109,Ze=Ge?Symbol.for("react.context"):60110,et=Ge?Symbol.for("react.concurrent_mode"):60111,tt=Ge?Symbol.for("react.forward_ref"):60112,nt=Ge?Symbol.for("react.suspense"):60113,rt=Ge?Symbol.for("react.memo"):60115,ut=Ge?Symbol.for("react.lazy"):60116,ot="function"===typeof Symbol&&Symbol.iterator;function it(e){return null===e||"object"!==typeof e?null:"function"===typeof(e=ot&&e[ot]||e["@@iterator"])?e:null}function at(e){if(null==e)return null;if("function"===typeof e)return e.displayName||e.name||null;if("string"===typeof e)return e;switch(e){case et:return"ConcurrentMode";case Qe:return"Fragment";case Ke:return"Portal";case Je:return"Profiler";case Ye:return"StrictMode";case nt:return"Suspense"}if("object"===typeof e)switch(e.$$typeof){case Ze:return"Context.Consumer";case Xe:return"Context.Provider";case tt:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case rt:return at(e.type);case ut:if(e=1===e._status?e._result:null)return at(e)}return null}function lt(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,u=e._debugSource,o=at(e.type);n=null,r&&(n=at(r.type)),r=o,o="",u?o=" (at "+u.fileName.replace(We,"")+":"+u.lineNumber+")":n&&(o=" (created by "+n+")"),n="\\n    in "+(r||"Unknown")+o}t+=n,e=e.return}while(e);return t}var ct=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,st=Object.prototype.hasOwnProperty,ft={},dt={};function pt(e,t,n,r,u){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=u,this.mustUseProperty=n,this.propertyName=e,this.type=t}var ht={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){ht[e]=new pt(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];ht[t]=new pt(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){ht[e]=new pt(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(e){ht[e]=new pt(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){ht[e]=new pt(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){ht[e]=new pt(e,3,!0,e,null)}),["capture","download"].forEach(function(e){ht[e]=new pt(e,4,!1,e,null)}),["cols","rows","size","span"].forEach(function(e){ht[e]=new pt(e,6,!1,e,null)}),["rowSpan","start"].forEach(function(e){ht[e]=new pt(e,5,!1,e.toLowerCase(),null)});var mt=/[\\-:]([a-z])/g;function gt(e){return e[1].toUpperCase()}function vt(e,t,n,r){var u=ht.hasOwnProperty(t)?ht[t]:null;(null!==u?0===u.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||"undefined"===typeof t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,u,r)&&(n=null),r||null===u?function(e){return!!st.call(dt,e)||!st.call(ft,e)&&(ct.test(e)?dt[e]=!0:(ft[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):u.mustUseProperty?e[u.propertyName]=null===n?3!==u.type&&"":n:(t=u.attributeName,r=u.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(u=u.type)||4===u&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function yt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Dt(e,t){var n=t.checked;return u({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function bt(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=yt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function At(e,t){null!=(t=t.checked)&&vt(e,"checked",t,!1)}function Ct(e,t){At(e,t);var n=yt(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Ft(e,t.type,n):t.hasOwnProperty("defaultValue")&&Ft(e,t.type,yt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Et(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Ft(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(mt,gt);ht[t]=new pt(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(mt,gt);ht[t]=new pt(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(mt,gt);ht[t]=new pt(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),["tabIndex","crossOrigin"].forEach(function(e){ht[e]=new pt(e,1,!1,e.toLowerCase(),null)});var wt={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function xt(e,t,n){return(e=le.getPooled(wt.change,e,t,n)).type="change",Te(n),V(e),e}var Bt=null,kt=null;function St(e){_(e)}function Tt(e){if(He(L(e)))return e}function _t(e,t){if("change"===e)return t}var Pt=!1;function Ot(){Bt&&(Bt.detachEvent("onpropertychange",Nt),kt=Bt=null)}function Nt(e){"value"===e.propertyName&&Tt(kt)&&Ie(St,e=xt(kt,e,je(e)))}function Rt(e,t,n){"focus"===e?(Ot(),kt=n,(Bt=t).attachEvent("onpropertychange",Nt)):"blur"===e&&Ot()}function It(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Tt(kt)}function Lt(e,t){if("click"===e)return Tt(t)}function Mt(e,t){if("input"===e||"change"===e)return Tt(t)}W&&(Pt=qe("input")&&(!document.documentMode||9<document.documentMode));var jt={eventTypes:wt,_isInputEventSupported:Pt,extractEvents:function(e,t,n,r){var u=t?L(t):window,o=void 0,i=void 0,a=u.nodeName&&u.nodeName.toLowerCase();if("select"===a||"input"===a&&"file"===u.type?o=_t:Me(u)?Pt?o=Mt:(o=It,i=Rt):(a=u.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===u.type||"radio"===u.type)&&(o=Lt),o&&(o=o(e,t)))return xt(o,n,r);i&&i(e,u,t),"blur"===e&&(e=u._wrapperState)&&e.controlled&&"number"===u.type&&Ft(u,"number",u.value)}},qt=le.extend({view:null,detail:null}),Ut={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function zt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Ut[e])&&!!t[e]}function Ht(){return zt}var Vt=0,Wt=0,Gt=!1,$t=!1,Kt=qt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Ht,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Vt;return Vt=e.screenX,Gt?"mousemove"===e.type?e.screenX-t:0:(Gt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Wt;return Wt=e.screenY,$t?"mousemove"===e.type?e.screenY-t:0:($t=!0,0)}}),Qt=Kt.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Yt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Jt={eventTypes:Yt,extractEvents:function(e,t,n,r){var u="mouseover"===e||"pointerover"===e,o="mouseout"===e||"pointerout"===e;if(u&&(n.relatedTarget||n.fromElement)||!o&&!u)return null;if(u=r.window===r?r:(u=r.ownerDocument)?u.defaultView||u.parentWindow:window,o?(o=t,t=(t=n.relatedTarget||n.toElement)?R(t):null):o=null,o===t)return null;var i=void 0,a=void 0,l=void 0,c=void 0;"mouseout"===e||"mouseover"===e?(i=Kt,a=Yt.mouseLeave,l=Yt.mouseEnter,c="mouse"):"pointerout"!==e&&"pointerover"!==e||(i=Qt,a=Yt.pointerLeave,l=Yt.pointerEnter,c="pointer");var s=null==o?u:L(o);if(u=null==t?u:L(t),(e=i.getPooled(a,o,n,r)).type=c+"leave",e.target=s,e.relatedTarget=u,(n=i.getPooled(l,t,n,r)).type=c+"enter",n.target=u,n.relatedTarget=s,r=t,o&&r)e:{for(u=r,c=0,i=t=o;i;i=j(i))c++;for(i=0,l=u;l;l=j(l))i++;for(;0<c-i;)t=j(t),c--;for(;0<i-c;)u=j(u),i--;for(;c--;){if(t===u||t===u.alternate)break e;t=j(t),u=j(u)}t=null}else t=null;for(u=t,t=[];o&&o!==u&&(null===(c=o.alternate)||c!==u);)t.push(o),o=j(o);for(o=[];r&&r!==u&&(null===(c=r.alternate)||c!==u);)o.push(r),r=j(r);for(r=0;r<t.length;r++)z(t[r],"bubbled",e);for(r=o.length;0<r--;)z(o[r],"captured",n);return[e,n]}};function Xt(e,t){return e===t&&(0!==e||1/e===1/t)||e!==e&&t!==t}var Zt=Object.prototype.hasOwnProperty;function en(e,t){if(Xt(e,t))return!0;if("object"!==typeof e||null===e||"object"!==typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Zt.call(t,n[r])||!Xt(e[n[r]],t[n[r]]))return!1;return!0}function tn(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!==(2&t.effectTag))return 1;for(;t.return;)if(0!==(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function nn(e){2!==tn(e)&&i("188")}function rn(e){if(!(e=function(e){var t=e.alternate;if(!t)return 3===(t=tn(e))&&i("188"),1===t?null:e;for(var n=e,r=t;;){var u=n.return,o=u?u.alternate:null;if(!u||!o)break;if(u.child===o.child){for(var a=u.child;a;){if(a===n)return nn(u),e;if(a===r)return nn(u),t;a=a.sibling}i("188")}if(n.return!==r.return)n=u,r=o;else{a=!1;for(var l=u.child;l;){if(l===n){a=!0,n=u,r=o;break}if(l===r){a=!0,r=u,n=o;break}l=l.sibling}if(!a){for(l=o.child;l;){if(l===n){a=!0,n=o,r=u;break}if(l===r){a=!0,r=o,n=u;break}l=l.sibling}a||i("189")}}n.alternate!==r&&i("190")}return 3!==n.tag&&i("188"),n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var un=le.extend({animationName:null,elapsedTime:null,pseudoElement:null}),on=le.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),an=qt.extend({relatedTarget:null});function ln(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var cn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},fn=qt.extend({key:function(e){if(e.key){var t=cn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=ln(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?sn[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Ht,charCode:function(e){return"keypress"===e.type?ln(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?ln(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),dn=Kt.extend({dataTransfer:null}),pn=qt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Ht}),hn=le.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),mn=Kt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),gn=[["abort","abort"],[J,"animationEnd"],[X,"animationIteration"],[Z,"animationStart"],["canplay","canPlay"],["canplaythrough","canPlayThrough"],["drag","drag"],["dragenter","dragEnter"],["dragexit","dragExit"],["dragleave","dragLeave"],["dragover","dragOver"],["durationchange","durationChange"],["emptied","emptied"],["encrypted","encrypted"],["ended","ended"],["error","error"],["gotpointercapture","gotPointerCapture"],["load","load"],["loadeddata","loadedData"],["loadedmetadata","loadedMetadata"],["loadstart","loadStart"],["lostpointercapture","lostPointerCapture"],["mousemove","mouseMove"],["mouseout","mouseOut"],["mouseover","mouseOver"],["playing","playing"],["pointermove","pointerMove"],["pointerout","pointerOut"],["pointerover","pointerOver"],["progress","progress"],["scroll","scroll"],["seeking","seeking"],["stalled","stalled"],["suspend","suspend"],["timeupdate","timeUpdate"],["toggle","toggle"],["touchmove","touchMove"],[ee,"transitionEnd"],["waiting","waiting"],["wheel","wheel"]],vn={},yn={};function Dn(e,t){var n=e[0],r="on"+((e=e[1])[0].toUpperCase()+e.slice(1));t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n],isInteractive:t},vn[e]=t,yn[n]=t}[["blur","blur"],["cancel","cancel"],["click","click"],["close","close"],["contextmenu","contextMenu"],["copy","copy"],["cut","cut"],["auxclick","auxClick"],["dblclick","doubleClick"],["dragend","dragEnd"],["dragstart","dragStart"],["drop","drop"],["focus","focus"],["input","input"],["invalid","invalid"],["keydown","keyDown"],["keypress","keyPress"],["keyup","keyUp"],["mousedown","mouseDown"],["mouseup","mouseUp"],["paste","paste"],["pause","pause"],["play","play"],["pointercancel","pointerCancel"],["pointerdown","pointerDown"],["pointerup","pointerUp"],["ratechange","rateChange"],["reset","reset"],["seeked","seeked"],["submit","submit"],["touchcancel","touchCancel"],["touchend","touchEnd"],["touchstart","touchStart"],["volumechange","volumeChange"]].forEach(function(e){Dn(e,!0)}),gn.forEach(function(e){Dn(e,!1)});var bn={eventTypes:vn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=yn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var u=yn[e];if(!u)return null;switch(e){case"keypress":if(0===ln(n))return null;case"keydown":case"keyup":e=fn;break;case"blur":case"focus":e=an;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Kt;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=dn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=pn;break;case J:case X:case Z:e=un;break;case ee:e=hn;break;case"scroll":e=qt;break;case"wheel":e=mn;break;case"copy":case"cut":case"paste":e=on;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Qt;break;default:e=le}return V(t=e.getPooled(u,t,n,r)),t}},An=bn.isInteractiveTopLevelEventType,Cn=[];function En(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r;for(r=n;r.return;)r=r.return;if(!(r=3!==r.tag?null:r.stateNode.containerInfo))break;e.ancestors.push(n),n=R(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var u=je(e.nativeEvent);r=e.topLevelType;for(var o=e.nativeEvent,i=null,a=0;a<v.length;a++){var l=v[a];l&&(l=l.extractEvents(r,t,o,u))&&(i=w(i,l))}_(i)}}var Fn=!0;function wn(e,t){if(!t)return null;var n=(An(e)?Bn:kn).bind(null,e);t.addEventListener(e,n,!1)}function xn(e,t){if(!t)return null;var n=(An(e)?Bn:kn).bind(null,e);t.addEventListener(e,n,!0)}function Bn(e,t){Oe(kn,e,t)}function kn(e,t){if(Fn){var n=je(t);if(null===(n=R(n))||"number"!==typeof n.tag||2===tn(n)||(n=null),Cn.length){var r=Cn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Ie(En,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>Cn.length&&Cn.push(e)}}}var Sn={},Tn=0,_n="_reactListenersID"+(""+Math.random()).slice(2);function Pn(e){return Object.prototype.hasOwnProperty.call(e,_n)||(e[_n]=Tn++,Sn[e[_n]]={}),Sn[e[_n]]}function On(e){if("undefined"===typeof(e=e||("undefined"!==typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Nn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Rn(e,t){var n,r=Nn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Nn(r)}}function In(){for(var e=window,t=On();t instanceof e.HTMLIFrameElement;){try{var n="string"===typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=On((e=t.contentWindow).document)}return t}function Ln(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function Mn(e){var t=In(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(n.ownerDocument.documentElement,n)){if(null!==r&&Ln(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var u=n.textContent.length,o=Math.min(r.start,u);r=void 0===r.end?o:Math.min(r.end,u),!e.extend&&o>r&&(u=r,r=o,o=u),u=Rn(n,o);var i=Rn(n,r);u&&i&&(1!==e.rangeCount||e.anchorNode!==u.node||e.anchorOffset!==u.offset||e.focusNode!==i.node||e.focusOffset!==i.offset)&&((t=t.createRange()).setStart(u.node,u.offset),e.removeAllRanges(),o>r?(e.addRange(t),e.extend(i.node,i.offset)):(t.setEnd(i.node,i.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"===typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var jn=W&&"documentMode"in document&&11>=document.documentMode,qn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Un=null,zn=null,Hn=null,Vn=!1;function Wn(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Vn||null==Un||Un!==On(n)?null:("selectionStart"in(n=Un)&&Ln(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Hn&&en(Hn,n)?null:(Hn=n,(e=le.getPooled(qn.select,zn,e,t)).type="select",e.target=Un,V(e),e))}var Gn={eventTypes:qn,extractEvents:function(e,t,n,r){var u,o=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(u=!o)){e:{o=Pn(o),u=b.onSelect;for(var i=0;i<u.length;i++){var a=u[i];if(!o.hasOwnProperty(a)||!o[a]){o=!1;break e}}o=!0}u=!o}if(u)return null;switch(o=t?L(t):window,e){case"focus":(Me(o)||"true"===o.contentEditable)&&(Un=o,zn=t,Hn=null);break;case"blur":Hn=zn=Un=null;break;case"mousedown":Vn=!0;break;case"contextmenu":case"mouseup":case"dragend":return Vn=!1,Wn(n,r);case"selectionchange":if(jn)break;case"keydown":case"keyup":return Wn(n,r)}return null}};function $n(e,t){return e=u({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,function(e){null!=e&&(t+=e)}),t}(t.children))&&(e.children=t),e}function Kn(e,t,n,r){if(e=e.options,t){t={};for(var u=0;u<n.length;u++)t["$"+n[u]]=!0;for(n=0;n<e.length;n++)u=t.hasOwnProperty("$"+e[n].value),e[n].selected!==u&&(e[n].selected=u),u&&r&&(e[n].defaultSelected=!0)}else{for(n=""+yt(n),t=null,u=0;u<e.length;u++){if(e[u].value===n)return e[u].selected=!0,void(r&&(e[u].defaultSelected=!0));null!==t||e[u].disabled||(t=e[u])}null!==t&&(t.selected=!0)}}function Qn(e,t){return null!=t.dangerouslySetInnerHTML&&i("91"),u({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Yn(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&i("92"),Array.isArray(t)&&(1>=t.length||i("93"),t=t[0]),n=t),null==n&&(n="")),e._wrapperState={initialValue:yt(n)}}function Jn(e,t){var n=yt(t.value),r=yt(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Xn(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}S.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),A=M,C=I,E=L,S.injectEventPluginsByName({SimpleEventPlugin:bn,EnterLeaveEventPlugin:Jt,ChangeEventPlugin:jt,SelectEventPlugin:Gn,BeforeInputEventPlugin:we});var Zn={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function er(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function tr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?er(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var nr,rr=void 0,ur=(nr=function(e,t){if(e.namespaceURI!==Zn.svg||"innerHTML"in e)e.innerHTML=t;else{for((rr=rr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=rr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return nr(e,t)})}:nr);function or(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ir={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ar=["Webkit","ms","Moz","O"];function lr(e,t,n){return null==t||"boolean"===typeof t||""===t?"":n||"number"!==typeof t||0===t||ir.hasOwnProperty(e)&&ir[e]?(""+t).trim():t+"px"}function cr(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),u=lr(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,u):e[n]=u}}Object.keys(ir).forEach(function(e){ar.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ir[t]=ir[e]})});var sr=u({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function fr(e,t){t&&(sr[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&i("137",e,""),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&i("60"),"object"===typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||i("61")),null!=t.style&&"object"!==typeof t.style&&i("62",""))}function dr(e,t){if(-1===e.indexOf("-"))return"string"===typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function pr(e,t){var n=Pn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=b[t];for(var r=0;r<t.length;r++){var u=t[r];if(!n.hasOwnProperty(u)||!n[u]){switch(u){case"scroll":xn("scroll",e);break;case"focus":case"blur":xn("focus",e),xn("blur",e),n.blur=!0,n.focus=!0;break;case"cancel":case"close":qe(u)&&xn(u,e);break;case"invalid":case"submit":case"reset":break;default:-1===te.indexOf(u)&&wn(u,e)}n[u]=!0}}}function hr(){}var mr=null,gr=null;function vr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function yr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"===typeof t.children||"number"===typeof t.children||"object"===typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Dr="function"===typeof setTimeout?setTimeout:void 0,br="function"===typeof clearTimeout?clearTimeout:void 0,Ar=o.unstable_scheduleCallback,Cr=o.unstable_cancelCallback;function Er(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}function Fr(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e}new Set;var wr=[],xr=-1;function Br(e){0>xr||(e.current=wr[xr],wr[xr]=null,xr--)}function kr(e,t){wr[++xr]=e.current,e.current=t}var Sr={},Tr={current:Sr},_r={current:!1},Pr=Sr;function Or(e,t){var n=e.type.contextTypes;if(!n)return Sr;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var u,o={};for(u in n)o[u]=t[u];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function Nr(e){return null!==(e=e.childContextTypes)&&void 0!==e}function Rr(e){Br(_r),Br(Tr)}function Ir(e){Br(_r),Br(Tr)}function Lr(e,t,n){Tr.current!==Sr&&i("168"),kr(Tr,t),kr(_r,n)}function Mr(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!==typeof r.getChildContext)return n;for(var o in r=r.getChildContext())o in e||i("108",at(t)||"Unknown",o);return u({},n,r)}function jr(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||Sr,Pr=Tr.current,kr(Tr,t),kr(_r,_r.current),!0}function qr(e,t,n){var r=e.stateNode;r||i("169"),n?(t=Mr(e,t,Pr),r.__reactInternalMemoizedMergedChildContext=t,Br(_r),Br(Tr),kr(Tr,t)):Br(_r),kr(_r,n)}var Ur=null,zr=null;function Hr(e){return function(t){try{return e(t)}catch(e){}}}function Vr(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.contextDependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Wr(e,t,n,r){return new Vr(e,t,n,r)}function Gr(e){return!(!(e=e.prototype)||!e.isReactComponent)}function $r(e,t){var n=e.alternate;return null===n?((n=Wr(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,n.contextDependencies=e.contextDependencies,n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Kr(e,t,n,r,u,o){var a=2;if(r=e,"function"===typeof e)Gr(e)&&(a=1);else if("string"===typeof e)a=5;else e:switch(e){case Qe:return Qr(n.children,u,o,t);case et:return Yr(n,3|u,o,t);case Ye:return Yr(n,2|u,o,t);case Je:return(e=Wr(12,n,t,4|u)).elementType=Je,e.type=Je,e.expirationTime=o,e;case nt:return(e=Wr(13,n,t,u)).elementType=nt,e.type=nt,e.expirationTime=o,e;default:if("object"===typeof e&&null!==e)switch(e.$$typeof){case Xe:a=10;break e;case Ze:a=9;break e;case tt:a=11;break e;case rt:a=14;break e;case ut:a=16,r=null;break e}i("130",null==e?e:typeof e,"")}return(t=Wr(a,n,t,u)).elementType=e,t.type=r,t.expirationTime=o,t}function Qr(e,t,n,r){return(e=Wr(7,e,r,t)).expirationTime=n,e}function Yr(e,t,n,r){return e=Wr(8,e,r,t),t=0===(1&t)?Ye:et,e.elementType=t,e.type=t,e.expirationTime=n,e}function Jr(e,t,n){return(e=Wr(6,e,null,t)).expirationTime=n,e}function Xr(e,t,n){return(t=Wr(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Zr(e,t){e.didError=!1;var n=e.earliestPendingTime;0===n?e.earliestPendingTime=e.latestPendingTime=t:n<t?e.earliestPendingTime=t:e.latestPendingTime>t&&(e.latestPendingTime=t),nu(t,e)}function eu(e,t){e.didError=!1,e.latestPingedTime>=t&&(e.latestPingedTime=0);var n=e.earliestPendingTime,r=e.latestPendingTime;n===t?e.earliestPendingTime=r===t?e.latestPendingTime=0:r:r===t&&(e.latestPendingTime=n),n=e.earliestSuspendedTime,r=e.latestSuspendedTime,0===n?e.earliestSuspendedTime=e.latestSuspendedTime=t:n<t?e.earliestSuspendedTime=t:r>t&&(e.latestSuspendedTime=t),nu(t,e)}function tu(e,t){var n=e.earliestPendingTime;return n>t&&(t=n),(e=e.earliestSuspendedTime)>t&&(t=e),t}function nu(e,t){var n=t.earliestSuspendedTime,r=t.latestSuspendedTime,u=t.earliestPendingTime,o=t.latestPingedTime;0===(u=0!==u?u:o)&&(0===e||r<e)&&(u=r),0!==(e=u)&&n>e&&(e=n),t.nextExpirationTimeToWorkOn=u,t.expirationTime=e}function ru(e,t){if(e&&e.defaultProps)for(var n in t=u({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var uu=(new r.Component).refs;function ou(e,t,n,r){n=null===(n=n(r,t=e.memoizedState))||void 0===n?t:u({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var iu={isMounted:function(e){return!!(e=e._reactInternalFiber)&&2===tn(e)},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Ca(),u=Yo(r=Qi(r,e));u.payload=t,void 0!==n&&null!==n&&(u.callback=n),Hi(),Xo(e,u),Xi(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Ca(),u=Yo(r=Qi(r,e));u.tag=Vo,u.payload=t,void 0!==n&&null!==n&&(u.callback=n),Hi(),Xo(e,u),Xi(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Ca(),r=Yo(n=Qi(n,e));r.tag=Wo,void 0!==t&&null!==t&&(r.callback=t),Hi(),Xo(e,r),Xi(e,n)}};function au(e,t,n,r,u,o,i){return"function"===typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!t.prototype||!t.prototype.isPureReactComponent||(!en(n,r)||!en(u,o))}function lu(e,t,n){var r=!1,u=Sr,o=t.contextType;return"object"===typeof o&&null!==o?o=zo(o):(u=Nr(t)?Pr:Tr.current,o=(r=null!==(r=t.contextTypes)&&void 0!==r)?Or(e,u):Sr),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=iu,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=u,e.__reactInternalMemoizedMaskedChildContext=o),t}function cu(e,t,n,r){e=t.state,"function"===typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"===typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&iu.enqueueReplaceState(t,t.state,null)}function su(e,t,n,r){var u=e.stateNode;u.props=n,u.state=e.memoizedState,u.refs=uu;var o=t.contextType;"object"===typeof o&&null!==o?u.context=zo(o):(o=Nr(t)?Pr:Tr.current,u.context=Or(e,o)),null!==(o=e.updateQueue)&&(ni(e,o,n,u,r),u.state=e.memoizedState),"function"===typeof(o=t.getDerivedStateFromProps)&&(ou(e,t,o,n),u.state=e.memoizedState),"function"===typeof t.getDerivedStateFromProps||"function"===typeof u.getSnapshotBeforeUpdate||"function"!==typeof u.UNSAFE_componentWillMount&&"function"!==typeof u.componentWillMount||(t=u.state,"function"===typeof u.componentWillMount&&u.componentWillMount(),"function"===typeof u.UNSAFE_componentWillMount&&u.UNSAFE_componentWillMount(),t!==u.state&&iu.enqueueReplaceState(u,u.state,null),null!==(o=e.updateQueue)&&(ni(e,o,n,u,r),u.state=e.memoizedState)),"function"===typeof u.componentDidMount&&(e.effectTag|=4)}var fu=Array.isArray;function du(e,t,n){if(null!==(e=n.ref)&&"function"!==typeof e&&"object"!==typeof e){if(n._owner){n=n._owner;var r=void 0;n&&(1!==n.tag&&i("309"),r=n.stateNode),r||i("147",e);var u=""+e;return null!==t&&null!==t.ref&&"function"===typeof t.ref&&t.ref._stringRef===u?t.ref:((t=function(e){var t=r.refs;t===uu&&(t=r.refs={}),null===e?delete t[u]:t[u]=e})._stringRef=u,t)}"string"!==typeof e&&i("284"),n._owner||i("290",e)}return e}function pu(e,t){"textarea"!==e.type&&i("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function hu(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function u(e,t,n){return(e=$r(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function a(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Jr(n,e.mode,r)).return=e,t):((t=u(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=u(t,n.props)).ref=du(e,t,n),r.return=e,r):((r=Kr(n.type,n.key,n.props,null,e.mode,r)).ref=du(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Xr(n,e.mode,r)).return=e,t):((t=u(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Qr(n,e.mode,r,o)).return=e,t):((t=u(t,n)).return=e,t)}function d(e,t,n){if("string"===typeof t||"number"===typeof t)return(t=Jr(""+t,e.mode,n)).return=e,t;if("object"===typeof t&&null!==t){switch(t.$$typeof){case $e:return(n=Kr(t.type,t.key,t.props,null,e.mode,n)).ref=du(e,null,t),n.return=e,n;case Ke:return(t=Xr(t,e.mode,n)).return=e,t}if(fu(t)||it(t))return(t=Qr(t,e.mode,n,null)).return=e,t;pu(e,t)}return null}function p(e,t,n,r){var u=null!==t?t.key:null;if("string"===typeof n||"number"===typeof n)return null!==u?null:l(e,t,""+n,r);if("object"===typeof n&&null!==n){switch(n.$$typeof){case $e:return n.key===u?n.type===Qe?f(e,t,n.props.children,r,u):c(e,t,n,r):null;case Ke:return n.key===u?s(e,t,n,r):null}if(fu(n)||it(n))return null!==u?null:f(e,t,n,r,null);pu(e,n)}return null}function h(e,t,n,r,u){if("string"===typeof r||"number"===typeof r)return l(t,e=e.get(n)||null,""+r,u);if("object"===typeof r&&null!==r){switch(r.$$typeof){case $e:return e=e.get(null===r.key?n:r.key)||null,r.type===Qe?f(t,e,r.props.children,u,r.key):c(t,e,r,u);case Ke:return s(t,e=e.get(null===r.key?n:r.key)||null,r,u)}if(fu(r)||it(r))return f(t,e=e.get(n)||null,r,u,null);pu(t,r)}return null}function m(u,i,a,l){for(var c=null,s=null,f=i,m=i=0,g=null;null!==f&&m<a.length;m++){f.index>m?(g=f,f=null):g=f.sibling;var v=p(u,f,a[m],l);if(null===v){null===f&&(f=g);break}e&&f&&null===v.alternate&&t(u,f),i=o(v,i,m),null===s?c=v:s.sibling=v,s=v,f=g}if(m===a.length)return n(u,f),c;if(null===f){for(;m<a.length;m++)(f=d(u,a[m],l))&&(i=o(f,i,m),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(u,f);m<a.length;m++)(g=h(f,u,m,a[m],l))&&(e&&null!==g.alternate&&f.delete(null===g.key?m:g.key),i=o(g,i,m),null===s?c=g:s.sibling=g,s=g);return e&&f.forEach(function(e){return t(u,e)}),c}function g(u,a,l,c){var s=it(l);"function"!==typeof s&&i("150"),null==(l=s.call(l))&&i("151");for(var f=s=null,m=a,g=a=0,v=null,y=l.next();null!==m&&!y.done;g++,y=l.next()){m.index>g?(v=m,m=null):v=m.sibling;var D=p(u,m,y.value,c);if(null===D){m||(m=v);break}e&&m&&null===D.alternate&&t(u,m),a=o(D,a,g),null===f?s=D:f.sibling=D,f=D,m=v}if(y.done)return n(u,m),s;if(null===m){for(;!y.done;g++,y=l.next())null!==(y=d(u,y.value,c))&&(a=o(y,a,g),null===f?s=y:f.sibling=y,f=y);return s}for(m=r(u,m);!y.done;g++,y=l.next())null!==(y=h(m,u,g,y.value,c))&&(e&&null!==y.alternate&&m.delete(null===y.key?g:y.key),a=o(y,a,g),null===f?s=y:f.sibling=y,f=y);return e&&m.forEach(function(e){return t(u,e)}),s}return function(e,r,o,l){var c="object"===typeof o&&null!==o&&o.type===Qe&&null===o.key;c&&(o=o.props.children);var s="object"===typeof o&&null!==o;if(s)switch(o.$$typeof){case $e:e:{for(s=o.key,c=r;null!==c;){if(c.key===s){if(7===c.tag?o.type===Qe:c.elementType===o.type){n(e,c.sibling),(r=u(c,o.type===Qe?o.props.children:o.props)).ref=du(e,c,o),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}o.type===Qe?((r=Qr(o.props.children,e.mode,l,o.key)).return=e,e=r):((l=Kr(o.type,o.key,o.props,null,e.mode,l)).ref=du(e,r,o),l.return=e,e=l)}return a(e);case Ke:e:{for(c=o.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=u(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Xr(o,e.mode,l)).return=e,e=r}return a(e)}if("string"===typeof o||"number"===typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=u(r,o)).return=e,e=r):(n(e,r),(r=Jr(o,e.mode,l)).return=e,e=r),a(e);if(fu(o))return m(e,r,o,l);if(it(o))return g(e,r,o,l);if(s&&pu(e,o),"undefined"===typeof o&&!c)switch(e.tag){case 1:case 0:i("152",(l=e.type).displayName||l.name||"Component")}return n(e,r)}}var mu=hu(!0),gu=hu(!1),vu={},yu={current:vu},Du={current:vu},bu={current:vu};function Au(e){return e===vu&&i("174"),e}function Cu(e,t){kr(bu,t),kr(Du,e),kr(yu,vu);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:tr(null,"");break;default:t=tr(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}Br(yu),kr(yu,t)}function Eu(e){Br(yu),Br(Du),Br(bu)}function Fu(e){Au(bu.current);var t=Au(yu.current),n=tr(t,e.type);t!==n&&(kr(Du,e),kr(yu,n))}function wu(e){Du.current===e&&(Br(yu),Br(Du))}var xu=0,Bu=2,ku=4,Su=8,Tu=16,_u=32,Pu=64,Ou=128,Nu=Ve.ReactCurrentDispatcher,Ru=0,Iu=null,Lu=null,Mu=null,ju=null,qu=null,Uu=null,zu=0,Hu=null,Vu=0,Wu=!1,Gu=null,$u=0;function Ku(){i("321")}function Qu(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Xt(e[n],t[n]))return!1;return!0}function Yu(e,t,n,r,u,o){if(Ru=o,Iu=t,Mu=null!==e?e.memoizedState:null,Nu.current=null===Mu?co:so,t=n(r,u),Wu){do{Wu=!1,$u+=1,Mu=null!==e?e.memoizedState:null,Uu=ju,Hu=qu=Lu=null,Nu.current=so,t=n(r,u)}while(Wu);Gu=null,$u=0}return Nu.current=lo,(e=Iu).memoizedState=ju,e.expirationTime=zu,e.updateQueue=Hu,e.effectTag|=Vu,e=null!==Lu&&null!==Lu.next,Ru=0,Uu=qu=ju=Mu=Lu=Iu=null,zu=0,Hu=null,Vu=0,e&&i("300"),t}function Ju(){Nu.current=lo,Ru=0,Uu=qu=ju=Mu=Lu=Iu=null,zu=0,Hu=null,Vu=0,Wu=!1,Gu=null,$u=0}function Xu(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===qu?ju=qu=e:qu=qu.next=e,qu}function Zu(){if(null!==Uu)Uu=(qu=Uu).next,Mu=null!==(Lu=Mu)?Lu.next:null;else{null===Mu&&i("310");var e={memoizedState:(Lu=Mu).memoizedState,baseState:Lu.baseState,queue:Lu.queue,baseUpdate:Lu.baseUpdate,next:null};qu=null===qu?ju=e:qu.next=e,Mu=Lu.next}return qu}function eo(e,t){return"function"===typeof t?t(e):t}function to(e){var t=Zu(),n=t.queue;if(null===n&&i("311"),n.lastRenderedReducer=e,0<$u){var r=n.dispatch;if(null!==Gu){var u=Gu.get(n);if(void 0!==u){Gu.delete(n);var o=t.memoizedState;do{o=e(o,u.action),u=u.next}while(null!==u);return Xt(o,t.memoizedState)||(Co=!0),t.memoizedState=o,t.baseUpdate===n.last&&(t.baseState=o),n.lastRenderedState=o,[o,r]}}return[t.memoizedState,r]}r=n.last;var a=t.baseUpdate;if(o=t.baseState,null!==a?(null!==r&&(r.next=null),r=a.next):r=null!==r?r.next:null,null!==r){var l=u=null,c=r,s=!1;do{var f=c.expirationTime;f<Ru?(s||(s=!0,l=a,u=o),f>zu&&(zu=f)):o=c.eagerReducer===e?c.eagerState:e(o,c.action),a=c,c=c.next}while(null!==c&&c!==r);s||(l=a,u=o),Xt(o,t.memoizedState)||(Co=!0),t.memoizedState=o,t.baseUpdate=l,t.baseState=u,n.lastRenderedState=o}return[t.memoizedState,n.dispatch]}function no(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===Hu?(Hu={lastEffect:null}).lastEffect=e.next=e:null===(t=Hu.lastEffect)?Hu.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,Hu.lastEffect=e),e}function ro(e,t,n,r){var u=Xu();Vu|=e,u.memoizedState=no(t,n,void 0,void 0===r?null:r)}function uo(e,t,n,r){var u=Zu();r=void 0===r?null:r;var o=void 0;if(null!==Lu){var i=Lu.memoizedState;if(o=i.destroy,null!==r&&Qu(r,i.deps))return void no(xu,n,o,r)}Vu|=e,u.memoizedState=no(t,n,o,r)}function oo(e,t){return"function"===typeof t?(e=e(),t(e),function(){t(null)}):null!==t&&void 0!==t?(e=e(),t.current=e,function(){t.current=null}):void 0}function io(){}function ao(e,t,n){25>$u||i("301");var r=e.alternate;if(e===Iu||null!==r&&r===Iu)if(Wu=!0,e={expirationTime:Ru,action:n,eagerReducer:null,eagerState:null,next:null},null===Gu&&(Gu=new Map),void 0===(n=Gu.get(t)))Gu.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{Hi();var u=Ca(),o={expirationTime:u=Qi(u,e),action:n,eagerReducer:null,eagerState:null,next:null},a=t.last;if(null===a)o.next=o;else{var l=a.next;null!==l&&(o.next=l),a.next=o}if(t.last=o,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var c=t.lastRenderedState,s=r(c,n);if(o.eagerReducer=r,o.eagerState=s,Xt(s,c))return}catch(e){}Xi(e,u)}}var lo={readContext:zo,useCallback:Ku,useContext:Ku,useEffect:Ku,useImperativeHandle:Ku,useLayoutEffect:Ku,useMemo:Ku,useReducer:Ku,useRef:Ku,useState:Ku,useDebugValue:Ku},co={readContext:zo,useCallback:function(e,t){return Xu().memoizedState=[e,void 0===t?null:t],e},useContext:zo,useEffect:function(e,t){return ro(516,Ou|Pu,e,t)},useImperativeHandle:function(e,t,n){return n=null!==n&&void 0!==n?n.concat([e]):null,ro(4,ku|_u,oo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ro(4,ku|_u,e,t)},useMemo:function(e,t){var n=Xu();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Xu();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=ao.bind(null,Iu,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Xu().memoizedState=e},useState:function(e){var t=Xu();return"function"===typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:eo,lastRenderedState:e}).dispatch=ao.bind(null,Iu,e),[t.memoizedState,e]},useDebugValue:io},so={readContext:zo,useCallback:function(e,t){var n=Zu();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Qu(t,r[1])?r[0]:(n.memoizedState=[e,t],e)},useContext:zo,useEffect:function(e,t){return uo(516,Ou|Pu,e,t)},useImperativeHandle:function(e,t,n){return n=null!==n&&void 0!==n?n.concat([e]):null,uo(4,ku|_u,oo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return uo(4,ku|_u,e,t)},useMemo:function(e,t){var n=Zu();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Qu(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:to,useRef:function(){return Zu().memoizedState},useState:function(e){return to(eo)},useDebugValue:io},fo=null,po=null,ho=!1;function mo(e,t){var n=Wr(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function go(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function vo(e){if(ho){var t=po;if(t){var n=t;if(!go(e,t)){if(!(t=Er(n))||!go(e,t))return e.effectTag|=2,ho=!1,void(fo=e);mo(fo,n)}fo=e,po=Fr(t)}else e.effectTag|=2,ho=!1,fo=e}}function yo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&18!==e.tag;)e=e.return;fo=e}function Do(e){if(e!==fo)return!1;if(!ho)return yo(e),ho=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!yr(t,e.memoizedProps))for(t=po;t;)mo(e,t),t=Er(t);return yo(e),po=fo?Er(e.stateNode):null,!0}function bo(){po=fo=null,ho=!1}var Ao=Ve.ReactCurrentOwner,Co=!1;function Eo(e,t,n,r){t.child=null===e?gu(t,null,n,r):mu(t,e.child,n,r)}function Fo(e,t,n,r,u){n=n.render;var o=t.ref;return Uo(t,u),r=Yu(e,t,n,r,o,u),null===e||Co?(t.effectTag|=1,Eo(e,t,r,u),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=u&&(e.expirationTime=0),Oo(e,t,u))}function wo(e,t,n,r,u,o){if(null===e){var i=n.type;return"function"!==typeof i||Gr(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Kr(n.type,null,r,null,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,xo(e,t,i,r,u,o))}return i=e.child,u<o&&(u=i.memoizedProps,(n=null!==(n=n.compare)?n:en)(u,r)&&e.ref===t.ref)?Oo(e,t,o):(t.effectTag|=1,(e=$r(i,r)).ref=t.ref,e.return=t,t.child=e)}function xo(e,t,n,r,u,o){return null!==e&&en(e.memoizedProps,r)&&e.ref===t.ref&&(Co=!1,u<o)?Oo(e,t,o):ko(e,t,n,r,o)}function Bo(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function ko(e,t,n,r,u){var o=Nr(n)?Pr:Tr.current;return o=Or(t,o),Uo(t,u),n=Yu(e,t,n,r,o,u),null===e||Co?(t.effectTag|=1,Eo(e,t,n,u),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=u&&(e.expirationTime=0),Oo(e,t,u))}function So(e,t,n,r,u){if(Nr(n)){var o=!0;jr(t)}else o=!1;if(Uo(t,u),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),lu(t,n,r),su(t,n,r,u),r=!0;else if(null===e){var i=t.stateNode,a=t.memoizedProps;i.props=a;var l=i.context,c=n.contextType;"object"===typeof c&&null!==c?c=zo(c):c=Or(t,c=Nr(n)?Pr:Tr.current);var s=n.getDerivedStateFromProps,f="function"===typeof s||"function"===typeof i.getSnapshotBeforeUpdate;f||"function"!==typeof i.UNSAFE_componentWillReceiveProps&&"function"!==typeof i.componentWillReceiveProps||(a!==r||l!==c)&&cu(t,i,r,c),$o=!1;var d=t.memoizedState;l=i.state=d;var p=t.updateQueue;null!==p&&(ni(t,p,r,i,u),l=t.memoizedState),a!==r||d!==l||_r.current||$o?("function"===typeof s&&(ou(t,n,s,r),l=t.memoizedState),(a=$o||au(t,n,a,r,d,l,c))?(f||"function"!==typeof i.UNSAFE_componentWillMount&&"function"!==typeof i.componentWillMount||("function"===typeof i.componentWillMount&&i.componentWillMount(),"function"===typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"===typeof i.componentDidMount&&(t.effectTag|=4)):("function"===typeof i.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),i.props=r,i.state=l,i.context=c,r=a):("function"===typeof i.componentDidMount&&(t.effectTag|=4),r=!1)}else i=t.stateNode,a=t.memoizedProps,i.props=t.type===t.elementType?a:ru(t.type,a),l=i.context,"object"===typeof(c=n.contextType)&&null!==c?c=zo(c):c=Or(t,c=Nr(n)?Pr:Tr.current),(f="function"===typeof(s=n.getDerivedStateFromProps)||"function"===typeof i.getSnapshotBeforeUpdate)||"function"!==typeof i.UNSAFE_componentWillReceiveProps&&"function"!==typeof i.componentWillReceiveProps||(a!==r||l!==c)&&cu(t,i,r,c),$o=!1,l=t.memoizedState,d=i.state=l,null!==(p=t.updateQueue)&&(ni(t,p,r,i,u),d=t.memoizedState),a!==r||l!==d||_r.current||$o?("function"===typeof s&&(ou(t,n,s,r),d=t.memoizedState),(s=$o||au(t,n,a,r,l,d,c))?(f||"function"!==typeof i.UNSAFE_componentWillUpdate&&"function"!==typeof i.componentWillUpdate||("function"===typeof i.componentWillUpdate&&i.componentWillUpdate(r,d,c),"function"===typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,d,c)),"function"===typeof i.componentDidUpdate&&(t.effectTag|=4),"function"===typeof i.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!==typeof i.componentDidUpdate||a===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!==typeof i.getSnapshotBeforeUpdate||a===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),i.props=r,i.state=d,i.context=c,r=s):("function"!==typeof i.componentDidUpdate||a===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!==typeof i.getSnapshotBeforeUpdate||a===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return To(e,t,n,r,o,u)}function To(e,t,n,r,u,o){Bo(e,t);var i=0!==(64&t.effectTag);if(!r&&!i)return u&&qr(t,n,!1),Oo(e,t,o);r=t.stateNode,Ao.current=t;var a=i&&"function"!==typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&i?(t.child=mu(t,e.child,null,o),t.child=mu(t,null,a,o)):Eo(e,t,a,o),t.memoizedState=r.state,u&&qr(t,n,!0),t.child}function _o(e){var t=e.stateNode;t.pendingContext?Lr(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Lr(0,t.context,!1),Cu(e,t.containerInfo)}function Po(e,t,n){var r=t.mode,u=t.pendingProps,o=t.memoizedState;if(0===(64&t.effectTag)){o=null;var i=!1}else o={timedOutAt:null!==o?o.timedOutAt:0},i=!0,t.effectTag&=-65;if(null===e)if(i){var a=u.fallback;e=Qr(null,r,0,null),0===(1&t.mode)&&(e.child=null!==t.memoizedState?t.child.child:t.child),r=Qr(a,r,n,null),e.sibling=r,(n=e).return=r.return=t}else n=r=gu(t,null,u.children,n);else null!==e.memoizedState?(a=(r=e.child).sibling,i?(n=u.fallback,u=$r(r,r.pendingProps),0===(1&t.mode)&&((i=null!==t.memoizedState?t.child.child:t.child)!==r.child&&(u.child=i)),r=u.sibling=$r(a,n,a.expirationTime),n=u,u.childExpirationTime=0,n.return=r.return=t):n=r=mu(t,r.child,u.children,n)):(a=e.child,i?(i=u.fallback,(u=Qr(null,r,0,null)).child=a,0===(1&t.mode)&&(u.child=null!==t.memoizedState?t.child.child:t.child),(r=u.sibling=Qr(i,r,n,null)).effectTag|=2,n=u,u.childExpirationTime=0,n.return=r.return=t):r=n=mu(t,a,u.children,n)),t.stateNode=e.stateNode;return t.memoizedState=o,t.child=n,r}function Oo(e,t,n){if(null!==e&&(t.contextDependencies=e.contextDependencies),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child&&i("153"),null!==t.child){for(n=$r(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=$r(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function No(e,t,n){var r=t.expirationTime;if(null!==e){if(e.memoizedProps!==t.pendingProps||_r.current)Co=!0;else if(r<n){switch(Co=!1,t.tag){case 3:_o(t),bo();break;case 5:Fu(t);break;case 1:Nr(t.type)&&jr(t);break;case 4:Cu(t,t.stateNode.containerInfo);break;case 10:jo(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Po(e,t,n):null!==(t=Oo(e,t,n))?t.sibling:null}return Oo(e,t,n)}}else Co=!1;switch(t.expirationTime=0,t.tag){case 2:r=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps;var u=Or(t,Tr.current);if(Uo(t,n),u=Yu(null,t,r,e,u,n),t.effectTag|=1,"object"===typeof u&&null!==u&&"function"===typeof u.render&&void 0===u.$$typeof){if(t.tag=1,Ju(),Nr(r)){var o=!0;jr(t)}else o=!1;t.memoizedState=null!==u.state&&void 0!==u.state?u.state:null;var a=r.getDerivedStateFromProps;"function"===typeof a&&ou(t,r,a,e),u.updater=iu,t.stateNode=u,u._reactInternalFiber=t,su(t,r,e,n),t=To(null,t,r,!0,o,n)}else t.tag=0,Eo(null,t,u,n),t=t.child;return t;case 16:switch(u=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),o=t.pendingProps,e=function(e){var t=e._result;switch(e._status){case 1:return t;case 2:case 0:throw t;default:switch(e._status=0,(t=(t=e._ctor)()).then(function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)},function(t){0===e._status&&(e._status=2,e._result=t)}),e._status){case 1:return e._result;case 2:throw e._result}throw e._result=t,t}}(u),t.type=e,u=t.tag=function(e){if("function"===typeof e)return Gr(e)?1:0;if(void 0!==e&&null!==e){if((e=e.$$typeof)===tt)return 11;if(e===rt)return 14}return 2}(e),o=ru(e,o),a=void 0,u){case 0:a=ko(null,t,e,o,n);break;case 1:a=So(null,t,e,o,n);break;case 11:a=Fo(null,t,e,o,n);break;case 14:a=wo(null,t,e,ru(e.type,o),r,n);break;default:i("306",e,"")}return a;case 0:return r=t.type,u=t.pendingProps,ko(e,t,r,u=t.elementType===r?u:ru(r,u),n);case 1:return r=t.type,u=t.pendingProps,So(e,t,r,u=t.elementType===r?u:ru(r,u),n);case 3:return _o(t),null===(r=t.updateQueue)&&i("282"),u=null!==(u=t.memoizedState)?u.element:null,ni(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===u?(bo(),t=Oo(e,t,n)):(u=t.stateNode,(u=(null===e||null===e.child)&&u.hydrate)&&(po=Fr(t.stateNode.containerInfo),fo=t,u=ho=!0),u?(t.effectTag|=2,t.child=gu(t,null,r,n)):(Eo(e,t,r,n),bo()),t=t.child),t;case 5:return Fu(t),null===e&&vo(t),r=t.type,u=t.pendingProps,o=null!==e?e.memoizedProps:null,a=u.children,yr(r,u)?a=null:null!==o&&yr(r,o)&&(t.effectTag|=16),Bo(e,t),1!==n&&1&t.mode&&u.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Eo(e,t,a,n),t=t.child),t;case 6:return null===e&&vo(t),null;case 13:return Po(e,t,n);case 4:return Cu(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=mu(t,null,r,n):Eo(e,t,r,n),t.child;case 11:return r=t.type,u=t.pendingProps,Fo(e,t,r,u=t.elementType===r?u:ru(r,u),n);case 7:return Eo(e,t,t.pendingProps,n),t.child;case 8:case 12:return Eo(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,u=t.pendingProps,a=t.memoizedProps,jo(t,o=u.value),null!==a){var l=a.value;if(0===(o=Xt(l,o)?0:0|("function"===typeof r._calculateChangedBits?r._calculateChangedBits(l,o):1073741823))){if(a.children===u.children&&!_r.current){t=Oo(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.contextDependencies;if(null!==c){a=l.child;for(var s=c.first;null!==s;){if(s.context===r&&0!==(s.observedBits&o)){1===l.tag&&((s=Yo(n)).tag=Wo,Xo(l,s)),l.expirationTime<n&&(l.expirationTime=n),null!==(s=l.alternate)&&s.expirationTime<n&&(s.expirationTime=n),s=n;for(var f=l.return;null!==f;){var d=f.alternate;if(f.childExpirationTime<s)f.childExpirationTime=s,null!==d&&d.childExpirationTime<s&&(d.childExpirationTime=s);else{if(!(null!==d&&d.childExpirationTime<s))break;d.childExpirationTime=s}f=f.return}c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else a=10===l.tag&&l.type===t.type?null:l.child;if(null!==a)a.return=l;else for(a=l;null!==a;){if(a===t){a=null;break}if(null!==(l=a.sibling)){l.return=a.return,a=l;break}a=a.return}l=a}}Eo(e,t,u.children,n),t=t.child}return t;case 9:return u=t.type,r=(o=t.pendingProps).children,Uo(t,n),r=r(u=zo(u,o.unstable_observedBits)),t.effectTag|=1,Eo(e,t,r,n),t.child;case 14:return o=ru(u=t.type,t.pendingProps),wo(e,t,u,o=ru(u.type,o),r,n);case 15:return xo(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,u=t.pendingProps,u=t.elementType===r?u:ru(r,u),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,Nr(r)?(e=!0,jr(t)):e=!1,Uo(t,n),lu(t,r,u),su(t,r,u,n),To(null,t,r,!0,e,n)}i("156")}var Ro={current:null},Io=null,Lo=null,Mo=null;function jo(e,t){var n=e.type._context;kr(Ro,n._currentValue),n._currentValue=t}function qo(e){var t=Ro.current;Br(Ro),e.type._context._currentValue=t}function Uo(e,t){Io=e,Mo=Lo=null;var n=e.contextDependencies;null!==n&&n.expirationTime>=t&&(Co=!0),e.contextDependencies=null}function zo(e,t){return Mo!==e&&!1!==t&&0!==t&&("number"===typeof t&&1073741823!==t||(Mo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Lo?(null===Io&&i("308"),Lo=t,Io.contextDependencies={first:t,expirationTime:0}):Lo=Lo.next=t),e._currentValue}var Ho=0,Vo=1,Wo=2,Go=3,$o=!1;function Ko(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Qo(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function Yo(e){return{expirationTime:e,tag:Ho,payload:null,callback:null,next:null,nextEffect:null}}function Jo(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function Xo(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,u=null;null===r&&(r=e.updateQueue=Ko(e.memoizedState))}else r=e.updateQueue,u=n.updateQueue,null===r?null===u?(r=e.updateQueue=Ko(e.memoizedState),u=n.updateQueue=Ko(n.memoizedState)):r=e.updateQueue=Qo(u):null===u&&(u=n.updateQueue=Qo(r));null===u||r===u?Jo(r,t):null===r.lastUpdate||null===u.lastUpdate?(Jo(r,t),Jo(u,t)):(Jo(r,t),u.lastUpdate=t)}function Zo(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=Ko(e.memoizedState):ei(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function ei(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=Qo(t)),t}function ti(e,t,n,r,o,i){switch(n.tag){case Vo:return"function"===typeof(e=n.payload)?e.call(i,r,o):e;case Go:e.effectTag=-2049&e.effectTag|64;case Ho:if(null===(o="function"===typeof(e=n.payload)?e.call(i,r,o):e)||void 0===o)break;return u({},r,o);case Wo:$o=!0}return r}function ni(e,t,n,r,u){$o=!1;for(var o=(t=ei(e,t)).baseState,i=null,a=0,l=t.firstUpdate,c=o;null!==l;){var s=l.expirationTime;s<u?(null===i&&(i=l,o=c),a<s&&(a=s)):(c=ti(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=l:(t.lastEffect.nextEffect=l,t.lastEffect=l))),l=l.next}for(s=null,l=t.firstCapturedUpdate;null!==l;){var f=l.expirationTime;f<u?(null===s&&(s=l,null===i&&(o=c)),a<f&&(a=f)):(c=ti(e,0,l,c,n,r),null!==l.callback&&(e.effectTag|=32,l.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=l:(t.lastCapturedEffect.nextEffect=l,t.lastCapturedEffect=l))),l=l.next}null===i&&(t.lastUpdate=null),null===s?t.lastCapturedUpdate=null:e.effectTag|=32,null===i&&null===s&&(o=c),t.baseState=o,t.firstUpdate=i,t.firstCapturedUpdate=s,e.expirationTime=a,e.memoizedState=c}function ri(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),ui(t.firstEffect,n),t.firstEffect=t.lastEffect=null,ui(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function ui(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;"function"!==typeof n&&i("191",n),n.call(r)}e=e.nextEffect}}function oi(e,t){return{value:e,source:t,stack:lt(t)}}function ii(e){e.effectTag|=4}var ai=void 0,li=void 0,ci=void 0,si=void 0;ai=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},li=function(){},ci=function(e,t,n,r,o){var i=e.memoizedProps;if(i!==r){var a=t.stateNode;switch(Au(yu.current),e=null,n){case"input":i=Dt(a,i),r=Dt(a,r),e=[];break;case"option":i=$n(a,i),r=$n(a,r),e=[];break;case"select":i=u({},i,{value:void 0}),r=u({},r,{value:void 0}),e=[];break;case"textarea":i=Qn(a,i),r=Qn(a,r),e=[];break;default:"function"!==typeof i.onClick&&"function"===typeof r.onClick&&(a.onclick=hr)}fr(n,r),a=n=void 0;var l=null;for(n in i)if(!r.hasOwnProperty(n)&&i.hasOwnProperty(n)&&null!=i[n])if("style"===n){var c=i[n];for(a in c)c.hasOwnProperty(a)&&(l||(l={}),l[a]="")}else"dangerouslySetInnerHTML"!==n&&"children"!==n&&"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&"autoFocus"!==n&&(D.hasOwnProperty(n)?e||(e=[]):(e=e||[]).push(n,null));for(n in r){var s=r[n];if(c=null!=i?i[n]:void 0,r.hasOwnProperty(n)&&s!==c&&(null!=s||null!=c))if("style"===n)if(c){for(a in c)!c.hasOwnProperty(a)||s&&s.hasOwnProperty(a)||(l||(l={}),l[a]="");for(a in s)s.hasOwnProperty(a)&&c[a]!==s[a]&&(l||(l={}),l[a]=s[a])}else l||(e||(e=[]),e.push(n,l)),l=s;else"dangerouslySetInnerHTML"===n?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(n,""+s)):"children"===n?c===s||"string"!==typeof s&&"number"!==typeof s||(e=e||[]).push(n,""+s):"suppressContentEditableWarning"!==n&&"suppressHydrationWarning"!==n&&(D.hasOwnProperty(n)?(null!=s&&pr(o,n),e||c===s||(e=[])):(e=e||[]).push(n,s))}l&&(e=e||[]).push("style",l),o=e,(t.updateQueue=o)&&ii(t)}},si=function(e,t,n,r){n!==r&&ii(t)};var fi="function"===typeof WeakSet?WeakSet:Set;function di(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=lt(n)),null!==n&&at(n.type),t=t.value,null!==e&&1===e.tag&&at(e.type);try{console.error(t)}catch(e){setTimeout(function(){throw e})}}function pi(e){var t=e.ref;if(null!==t)if("function"===typeof t)try{t(null)}catch(t){Ki(e,t)}else t.current=null}function hi(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if((r.tag&e)!==xu){var u=r.destroy;r.destroy=void 0,void 0!==u&&u()}(r.tag&t)!==xu&&(u=r.create,r.destroy=u()),r=r.next}while(r!==n)}}function mi(e){switch("function"===typeof zr&&zr(e),e.tag){case 0:case 11:case 14:case 15:var t=e.updateQueue;if(null!==t&&null!==(t=t.lastEffect)){var n=t=t.next;do{var r=n.destroy;if(void 0!==r){var u=e;try{r()}catch(e){Ki(u,e)}}n=n.next}while(n!==t)}break;case 1:if(pi(e),"function"===typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Ki(e,t)}break;case 5:pi(e);break;case 4:yi(e)}}function gi(e){return 5===e.tag||3===e.tag||4===e.tag}function vi(e){e:{for(var t=e.return;null!==t;){if(gi(t)){var n=t;break e}t=t.return}i("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:i("161")}16&n.effectTag&&(or(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||gi(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var u=e;;){if(5===u.tag||6===u.tag)if(n)if(r){var o=t,a=u.stateNode,l=n;8===o.nodeType?o.parentNode.insertBefore(a,l):o.insertBefore(a,l)}else t.insertBefore(u.stateNode,n);else r?(a=t,l=u.stateNode,8===a.nodeType?(o=a.parentNode).insertBefore(l,a):(o=a).appendChild(l),null!==(a=a._reactRootContainer)&&void 0!==a||null!==o.onclick||(o.onclick=hr)):t.appendChild(u.stateNode);else if(4!==u.tag&&null!==u.child){u.child.return=u,u=u.child;continue}if(u===e)break;for(;null===u.sibling;){if(null===u.return||u.return===e)return;u=u.return}u.sibling.return=u.return,u=u.sibling}}function yi(e){for(var t=e,n=!1,r=void 0,u=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&i("160"),n.tag){case 5:r=n.stateNode,u=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,u=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag){e:for(var o=t,a=o;;)if(mi(a),null!==a.child&&4!==a.tag)a.child.return=a,a=a.child;else{if(a===o)break;for(;null===a.sibling;){if(null===a.return||a.return===o)break e;a=a.return}a.sibling.return=a.return,a=a.sibling}u?(o=r,a=t.stateNode,8===o.nodeType?o.parentNode.removeChild(a):o.removeChild(a)):r.removeChild(t.stateNode)}else if(4===t.tag){if(null!==t.child){r=t.stateNode.containerInfo,u=!0,t.child.return=t,t=t.child;continue}}else if(mi(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}function Di(e,t){switch(t.tag){case 0:case 11:case 14:case 15:hi(ku,Su,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var u=t.type,o=t.updateQueue;t.updateQueue=null,null!==o&&function(e,t,n,r,u){e[N]=u,"input"===n&&"radio"===u.type&&null!=u.name&&At(e,u),dr(n,r),r=dr(n,u);for(var o=0;o<t.length;o+=2){var i=t[o],a=t[o+1];"style"===i?cr(e,a):"dangerouslySetInnerHTML"===i?ur(e,a):"children"===i?or(e,a):vt(e,i,a,r)}switch(n){case"input":Ct(e,u);break;case"textarea":Jn(e,u);break;case"select":t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!u.multiple,null!=(n=u.value)?Kn(e,!!u.multiple,n,!1):t!==!!u.multiple&&(null!=u.defaultValue?Kn(e,!!u.multiple,u.defaultValue,!0):Kn(e,!!u.multiple,u.multiple?[]:"",!1))}}(n,o,u,e,r)}break;case 6:null===t.stateNode&&i("162"),t.stateNode.nodeValue=t.memoizedProps;break;case 3:case 12:break;case 13:if(n=t.memoizedState,r=void 0,e=t,null===n?r=!1:(r=!0,e=t.child,0===n.timedOutAt&&(n.timedOutAt=Ca())),null!==e&&function(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)r.style.display="none";else{r=n.stateNode;var u=n.memoizedProps.style;u=void 0!==u&&null!==u&&u.hasOwnProperty("display")?u.display:null,r.style.display=lr("display",u)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else{if(13===n.tag&&null!==n.memoizedState){(r=n.child.sibling).return=n,n=r;continue}if(null!==n.child){n.child.return=n,n=n.child;continue}}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}(e,r),null!==(n=t.updateQueue)){t.updateQueue=null;var a=t.stateNode;null===a&&(a=t.stateNode=new fi),n.forEach(function(e){var n=function(e,t){var n=e.stateNode;null!==n&&n.delete(t),t=Qi(t=Ca(),e),null!==(e=Ji(e,t))&&(Zr(e,t),0!==(t=e.expirationTime)&&Ea(e,t))}.bind(null,t,e);a.has(e)||(a.add(e),e.then(n,n))})}break;case 17:break;default:i("163")}}var bi="function"===typeof WeakMap?WeakMap:Map;function Ai(e,t,n){(n=Yo(n)).tag=Go,n.payload={element:null};var r=t.value;return n.callback=function(){Pa(r),di(e,t)},n}function Ci(e,t,n){(n=Yo(n)).tag=Go;var r=e.type.getDerivedStateFromError;if("function"===typeof r){var u=t.value;n.payload=function(){return r(u)}}var o=e.stateNode;return null!==o&&"function"===typeof o.componentDidCatch&&(n.callback=function(){"function"!==typeof r&&(null===Mi?Mi=new Set([this]):Mi.add(this));var n=t.value,u=t.stack;di(e,t),this.componentDidCatch(n,{componentStack:null!==u?u:""})}),n}function Ei(e){switch(e.tag){case 1:Nr(e.type)&&Rr();var t=e.effectTag;return 2048&t?(e.effectTag=-2049&t|64,e):null;case 3:return Eu(),Ir(),0!==(64&(t=e.effectTag))&&i("285"),e.effectTag=-2049&t|64,e;case 5:return wu(e),null;case 13:return 2048&(t=e.effectTag)?(e.effectTag=-2049&t|64,e):null;case 18:return null;case 4:return Eu(),null;case 10:return qo(e),null;default:return null}}var Fi=Ve.ReactCurrentDispatcher,wi=Ve.ReactCurrentOwner,xi=1073741822,Bi=!1,ki=null,Si=null,Ti=0,_i=-1,Pi=!1,Oi=null,Ni=!1,Ri=null,Ii=null,Li=null,Mi=null;function ji(){if(null!==ki)for(var e=ki.return;null!==e;){var t=e;switch(t.tag){case 1:var n=t.type.childContextTypes;null!==n&&void 0!==n&&Rr();break;case 3:Eu(),Ir();break;case 5:wu(t);break;case 4:Eu();break;case 10:qo(t)}e=e.return}Si=null,Ti=0,_i=-1,Pi=!1,ki=null}function qi(){for(;null!==Oi;){var e=Oi.effectTag;if(16&e&&or(Oi.stateNode,""),128&e){var t=Oi.alternate;null!==t&&(null!==(t=t.ref)&&("function"===typeof t?t(null):t.current=null))}switch(14&e){case 2:vi(Oi),Oi.effectTag&=-3;break;case 6:vi(Oi),Oi.effectTag&=-3,Di(Oi.alternate,Oi);break;case 4:Di(Oi.alternate,Oi);break;case 8:yi(e=Oi),e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,null!==(e=e.alternate)&&(e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null)}Oi=Oi.nextEffect}}function Ui(){for(;null!==Oi;){if(256&Oi.effectTag)e:{var e=Oi.alternate,t=Oi;switch(t.tag){case 0:case 11:case 15:hi(Bu,xu,t);break e;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:ru(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}break e;case 3:case 5:case 6:case 4:case 17:break e;default:i("163")}}Oi=Oi.nextEffect}}function zi(e,t){for(;null!==Oi;){var n=Oi.effectTag;if(36&n){var r=Oi.alternate,u=Oi,o=t;switch(u.tag){case 0:case 11:case 15:hi(Tu,_u,u);break;case 1:var a=u.stateNode;if(4&u.effectTag)if(null===r)a.componentDidMount();else{var l=u.elementType===u.type?r.memoizedProps:ru(u.type,r.memoizedProps);a.componentDidUpdate(l,r.memoizedState,a.__reactInternalSnapshotBeforeUpdate)}null!==(r=u.updateQueue)&&ri(0,r,a);break;case 3:if(null!==(r=u.updateQueue)){if(a=null,null!==u.child)switch(u.child.tag){case 5:a=u.child.stateNode;break;case 1:a=u.child.stateNode}ri(0,r,a)}break;case 5:o=u.stateNode,null===r&&4&u.effectTag&&vr(u.type,u.memoizedProps)&&o.focus();break;case 6:case 4:case 12:case 13:case 17:break;default:i("163")}}128&n&&(null!==(u=Oi.ref)&&(o=Oi.stateNode,"function"===typeof u?u(o):u.current=o)),512&n&&(Ri=e),Oi=Oi.nextEffect}}function Hi(){null!==Ii&&Cr(Ii),null!==Li&&Li()}function Vi(e,t){Ni=Bi=!0,e.current===t&&i("177");var n=e.pendingCommitExpirationTime;0===n&&i("261"),e.pendingCommitExpirationTime=0;var r=t.expirationTime,u=t.childExpirationTime;for(function(e,t){if(e.didError=!1,0===t)e.earliestPendingTime=0,e.latestPendingTime=0,e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0;else{t<e.latestPingedTime&&(e.latestPingedTime=0);var n=e.latestPendingTime;0!==n&&(n>t?e.earliestPendingTime=e.latestPendingTime=0:e.earliestPendingTime>t&&(e.earliestPendingTime=e.latestPendingTime)),0===(n=e.earliestSuspendedTime)?Zr(e,t):t<e.latestSuspendedTime?(e.earliestSuspendedTime=0,e.latestSuspendedTime=0,e.latestPingedTime=0,Zr(e,t)):t>n&&Zr(e,t)}nu(0,e)}(e,u>r?u:r),wi.current=null,r=void 0,1<t.effectTag?null!==t.lastEffect?(t.lastEffect.nextEffect=t,r=t.firstEffect):r=t:r=t.firstEffect,mr=Fn,gr=function(){var e=In();if(Ln(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=(t=(t=e.ownerDocument)&&t.defaultView||window).getSelection&&t.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,u=n.focusNode;n=n.focusOffset;try{t.nodeType,u.nodeType}catch(e){t=null;break e}var o=0,i=-1,a=-1,l=0,c=0,s=e,f=null;t:for(;;){for(var d;s!==t||0!==r&&3!==s.nodeType||(i=o+r),s!==u||0!==n&&3!==s.nodeType||(a=o+n),3===s.nodeType&&(o+=s.nodeValue.length),null!==(d=s.firstChild);)f=s,s=d;for(;;){if(s===e)break t;if(f===t&&++l===r&&(i=o),f===u&&++c===n&&(a=o),null!==(d=s.nextSibling))break;f=(s=f).parentNode}s=d}t=-1===i||-1===a?null:{start:i,end:a}}else t=null}t=t||{start:0,end:0}}else t=null;return{focusedElem:e,selectionRange:t}}(),Fn=!1,Oi=r;null!==Oi;){u=!1;var a=void 0;try{Ui()}catch(e){u=!0,a=e}u&&(null===Oi&&i("178"),Ki(Oi,a),null!==Oi&&(Oi=Oi.nextEffect))}for(Oi=r;null!==Oi;){u=!1,a=void 0;try{qi()}catch(e){u=!0,a=e}u&&(null===Oi&&i("178"),Ki(Oi,a),null!==Oi&&(Oi=Oi.nextEffect))}for(Mn(gr),gr=null,Fn=!!mr,mr=null,e.current=t,Oi=r;null!==Oi;){u=!1,a=void 0;try{zi(e,n)}catch(e){u=!0,a=e}u&&(null===Oi&&i("178"),Ki(Oi,a),null!==Oi&&(Oi=Oi.nextEffect))}if(null!==r&&null!==Ri){var l=function(e,t){Li=Ii=Ri=null;var n=ua;ua=!0;do{if(512&t.effectTag){var r=!1,u=void 0;try{var o=t;hi(Ou,xu,o),hi(xu,Pu,o)}catch(e){r=!0,u=e}r&&Ki(t,u)}t=t.nextEffect}while(null!==t);ua=n,0!==(n=e.expirationTime)&&Ea(e,n),sa||ua||ka(1073741823,!1)}.bind(null,e,r);Ii=o.unstable_runWithPriority(o.unstable_NormalPriority,function(){return Ar(l)}),Li=l}Bi=Ni=!1,"function"===typeof Ur&&Ur(t.stateNode),n=t.expirationTime,0===(t=(t=t.childExpirationTime)>n?t:n)&&(Mi=null),function(e,t){e.expirationTime=t,e.finishedWork=null}(e,t)}function Wi(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0===(1024&e.effectTag)){ki=e;e:{var o=t,a=Ti,l=(t=e).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:Nr(t.type)&&Rr();break;case 3:Eu(),Ir(),(l=t.stateNode).pendingContext&&(l.context=l.pendingContext,l.pendingContext=null),null!==o&&null!==o.child||(Do(t),t.effectTag&=-3),li(t);break;case 5:wu(t);var c=Au(bu.current);if(a=t.type,null!==o&&null!=t.stateNode)ci(o,t,a,l,c),o.ref!==t.ref&&(t.effectTag|=128);else if(l){var s=Au(yu.current);if(Do(t)){o=(l=t).stateNode;var f=l.type,d=l.memoizedProps,p=c;switch(o[O]=l,o[N]=d,a=void 0,c=f){case"iframe":case"object":wn("load",o);break;case"video":case"audio":for(f=0;f<te.length;f++)wn(te[f],o);break;case"source":wn("error",o);break;case"img":case"image":case"link":wn("error",o),wn("load",o);break;case"form":wn("reset",o),wn("submit",o);break;case"details":wn("toggle",o);break;case"input":bt(o,d),wn("invalid",o),pr(p,"onChange");break;case"select":o._wrapperState={wasMultiple:!!d.multiple},wn("invalid",o),pr(p,"onChange");break;case"textarea":Yn(o,d),wn("invalid",o),pr(p,"onChange")}for(a in fr(c,d),f=null,d)d.hasOwnProperty(a)&&(s=d[a],"children"===a?"string"===typeof s?o.textContent!==s&&(f=["children",s]):"number"===typeof s&&o.textContent!==""+s&&(f=["children",""+s]):D.hasOwnProperty(a)&&null!=s&&pr(p,a));switch(c){case"input":ze(o),Et(o,d,!0);break;case"textarea":ze(o),Xn(o);break;case"select":case"option":break;default:"function"===typeof d.onClick&&(o.onclick=hr)}a=f,l.updateQueue=a,(l=null!==a)&&ii(t)}else{d=t,p=a,o=l,f=9===c.nodeType?c:c.ownerDocument,s===Zn.html&&(s=er(p)),s===Zn.html?"script"===p?((o=f.createElement("div")).innerHTML="<script><\\/script>",f=o.removeChild(o.firstChild)):"string"===typeof o.is?f=f.createElement(p,{is:o.is}):(f=f.createElement(p),"select"===p&&(p=f,o.multiple?p.multiple=!0:o.size&&(p.size=o.size))):f=f.createElementNS(s,p),(o=f)[O]=d,o[N]=l,ai(o,t,!1,!1),p=o;var h=c,m=dr(f=a,d=l);switch(f){case"iframe":case"object":wn("load",p),c=d;break;case"video":case"audio":for(c=0;c<te.length;c++)wn(te[c],p);c=d;break;case"source":wn("error",p),c=d;break;case"img":case"image":case"link":wn("error",p),wn("load",p),c=d;break;case"form":wn("reset",p),wn("submit",p),c=d;break;case"details":wn("toggle",p),c=d;break;case"input":bt(p,d),c=Dt(p,d),wn("invalid",p),pr(h,"onChange");break;case"option":c=$n(p,d);break;case"select":p._wrapperState={wasMultiple:!!d.multiple},c=u({},d,{value:void 0}),wn("invalid",p),pr(h,"onChange");break;case"textarea":Yn(p,d),c=Qn(p,d),wn("invalid",p),pr(h,"onChange");break;default:c=d}fr(f,c),s=void 0;var g=f,v=p,y=c;for(s in y)if(y.hasOwnProperty(s)){var b=y[s];"style"===s?cr(v,b):"dangerouslySetInnerHTML"===s?null!=(b=b?b.__html:void 0)&&ur(v,b):"children"===s?"string"===typeof b?("textarea"!==g||""!==b)&&or(v,b):"number"===typeof b&&or(v,""+b):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(D.hasOwnProperty(s)?null!=b&&pr(h,s):null!=b&&vt(v,s,b,m))}switch(f){case"input":ze(p),Et(p,d,!1);break;case"textarea":ze(p),Xn(p);break;case"option":null!=d.value&&p.setAttribute("value",""+yt(d.value));break;case"select":(c=p).multiple=!!d.multiple,null!=(p=d.value)?Kn(c,!!d.multiple,p,!1):null!=d.defaultValue&&Kn(c,!!d.multiple,d.defaultValue,!0);break;default:"function"===typeof c.onClick&&(p.onclick=hr)}(l=vr(a,l))&&ii(t),t.stateNode=o}null!==t.ref&&(t.effectTag|=128)}else null===t.stateNode&&i("166");break;case 6:o&&null!=t.stateNode?si(o,t,o.memoizedProps,l):("string"!==typeof l&&(null===t.stateNode&&i("166")),o=Au(bu.current),Au(yu.current),Do(t)?(a=(l=t).stateNode,o=l.memoizedProps,a[O]=l,(l=a.nodeValue!==o)&&ii(t)):(a=t,(l=(9===o.nodeType?o:o.ownerDocument).createTextNode(l))[O]=t,a.stateNode=l));break;case 11:break;case 13:if(l=t.memoizedState,0!==(64&t.effectTag)){t.expirationTime=a,ki=t;break e}l=null!==l,a=null!==o&&null!==o.memoizedState,null!==o&&!l&&a&&(null!==(o=o.child.sibling)&&(null!==(c=t.firstEffect)?(t.firstEffect=o,o.nextEffect=c):(t.firstEffect=t.lastEffect=o,o.nextEffect=null),o.effectTag=8)),(l||a)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:Eu(),li(t);break;case 10:qo(t);break;case 9:case 14:break;case 17:Nr(t.type)&&Rr();break;case 18:break;default:i("156")}ki=null}if(t=e,1===Ti||1!==t.childExpirationTime){for(l=0,a=t.child;null!==a;)(o=a.expirationTime)>l&&(l=o),(c=a.childExpirationTime)>l&&(l=c),a=a.sibling;t.childExpirationTime=l}if(null!==ki)return ki;null!==n&&0===(1024&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e))}else{if(null!==(e=Ei(e)))return e.effectTag&=1023,e;null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=1024)}if(null!==r)return r;if(null===n)break;e=n}return null}function Gi(e){var t=No(e.alternate,e,Ti);return e.memoizedProps=e.pendingProps,null===t&&(t=Wi(e)),wi.current=null,t}function $i(e,t){Bi&&i("243"),Hi(),Bi=!0;var n=Fi.current;Fi.current=lo;var r=e.nextExpirationTimeToWorkOn;r===Ti&&e===Si&&null!==ki||(ji(),Ti=r,ki=$r((Si=e).current,null),e.pendingCommitExpirationTime=0);for(var u=!1;;){try{if(t)for(;null!==ki&&!xa();)ki=Gi(ki);else for(;null!==ki;)ki=Gi(ki)}catch(t){if(Mo=Lo=Io=null,Ju(),null===ki)u=!0,Pa(t);else{null===ki&&i("271");var o=ki,a=o.return;if(null!==a){e:{var l=e,c=a,s=o,f=t;if(a=Ti,s.effectTag|=1024,s.firstEffect=s.lastEffect=null,null!==f&&"object"===typeof f&&"function"===typeof f.then){var d=f;f=c;var p=-1,h=-1;do{if(13===f.tag){var m=f.alternate;if(null!==m&&null!==(m=m.memoizedState)){h=10*(1073741822-m.timedOutAt);break}"number"===typeof(m=f.pendingProps.maxDuration)&&(0>=m?p=0:(-1===p||m<p)&&(p=m))}f=f.return}while(null!==f);f=c;do{if((m=13===f.tag)&&(m=void 0!==f.memoizedProps.fallback&&null===f.memoizedState),m){if(null===(c=f.updateQueue)?((c=new Set).add(d),f.updateQueue=c):c.add(d),0===(1&f.mode)){f.effectTag|=64,s.effectTag&=-1957,1===s.tag&&(null===s.alternate?s.tag=17:((a=Yo(1073741823)).tag=Wo,Xo(s,a))),s.expirationTime=1073741823;break e}c=a;var g=(s=l).pingCache;null===g?(g=s.pingCache=new bi,m=new Set,g.set(d,m)):void 0===(m=g.get(d))&&(m=new Set,g.set(d,m)),m.has(c)||(m.add(c),s=Yi.bind(null,s,d,c),d.then(s,s)),-1===p?l=1073741823:(-1===h&&(h=10*(1073741822-tu(l,a))-5e3),l=h+p),0<=l&&_i<l&&(_i=l),f.effectTag|=2048,f.expirationTime=a;break e}f=f.return}while(null!==f);f=Error((at(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\\n\\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+lt(s))}Pi=!0,f=oi(f,s),l=c;do{switch(l.tag){case 3:l.effectTag|=2048,l.expirationTime=a,Zo(l,a=Ai(l,f,a));break e;case 1:if(p=f,h=l.type,s=l.stateNode,0===(64&l.effectTag)&&("function"===typeof h.getDerivedStateFromError||null!==s&&"function"===typeof s.componentDidCatch&&(null===Mi||!Mi.has(s)))){l.effectTag|=2048,l.expirationTime=a,Zo(l,a=Ci(l,p,a));break e}}l=l.return}while(null!==l)}ki=Wi(o);continue}u=!0,Pa(t)}}break}if(Bi=!1,Fi.current=n,Mo=Lo=Io=null,Ju(),u)Si=null,e.finishedWork=null;else if(null!==ki)e.finishedWork=null;else{if(null===(n=e.current.alternate)&&i("281"),Si=null,Pi){if(u=e.latestPendingTime,o=e.latestSuspendedTime,a=e.latestPingedTime,0!==u&&u<r||0!==o&&o<r||0!==a&&a<r)return eu(e,r),void Aa(e,n,r,e.expirationTime,-1);if(!e.didError&&t)return e.didError=!0,r=e.nextExpirationTimeToWorkOn=r,t=e.expirationTime=1073741823,void Aa(e,n,r,t,-1)}t&&-1!==_i?(eu(e,r),(t=10*(1073741822-tu(e,r)))<_i&&(_i=t),t=10*(1073741822-Ca()),t=_i-t,Aa(e,n,r,e.expirationTime,0>t?0:t)):(e.pendingCommitExpirationTime=r,e.finishedWork=n)}}function Ki(e,t){for(var n=e.return;null!==n;){switch(n.tag){case 1:var r=n.stateNode;if("function"===typeof n.type.getDerivedStateFromError||"function"===typeof r.componentDidCatch&&(null===Mi||!Mi.has(r)))return Xo(n,e=Ci(n,e=oi(t,e),1073741823)),void Xi(n,1073741823);break;case 3:return Xo(n,e=Ai(n,e=oi(t,e),1073741823)),void Xi(n,1073741823)}n=n.return}3===e.tag&&(Xo(e,n=Ai(e,n=oi(t,e),1073741823)),Xi(e,1073741823))}function Qi(e,t){var n=o.unstable_getCurrentPriorityLevel(),r=void 0;if(0===(1&t.mode))r=1073741823;else if(Bi&&!Ni)r=Ti;else{switch(n){case o.unstable_ImmediatePriority:r=1073741823;break;case o.unstable_UserBlockingPriority:r=1073741822-10*(1+((1073741822-e+15)/10|0));break;case o.unstable_NormalPriority:r=1073741822-25*(1+((1073741822-e+500)/25|0));break;case o.unstable_LowPriority:case o.unstable_IdlePriority:r=1;break;default:i("313")}null!==Si&&r===Ti&&--r}return n===o.unstable_UserBlockingPriority&&(0===aa||r<aa)&&(aa=r),r}function Yi(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),null!==Si&&Ti===n?Si=null:(t=e.earliestSuspendedTime,r=e.latestSuspendedTime,0!==t&&n<=t&&n>=r&&(e.didError=!1,(0===(t=e.latestPingedTime)||t>n)&&(e.latestPingedTime=n),nu(n,e),0!==(n=e.expirationTime)&&Ea(e,n)))}function Ji(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,u=null;if(null===r&&3===e.tag)u=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){u=r.stateNode;break}r=r.return}return u}function Xi(e,t){null!==(e=Ji(e,t))&&(!Bi&&0!==Ti&&t>Ti&&ji(),Zr(e,t),Bi&&!Ni&&Si===e||Ea(e,e.expirationTime),va>ga&&(va=0,i("185")))}function Zi(e,t,n,r,u){return o.unstable_runWithPriority(o.unstable_ImmediatePriority,function(){return e(t,n,r,u)})}var ea=null,ta=null,na=0,ra=void 0,ua=!1,oa=null,ia=0,aa=0,la=!1,ca=null,sa=!1,fa=!1,da=null,pa=o.unstable_now(),ha=1073741822-(pa/10|0),ma=ha,ga=50,va=0,ya=null;function Da(){ha=1073741822-((o.unstable_now()-pa)/10|0)}function ba(e,t){if(0!==na){if(t<na)return;null!==ra&&o.unstable_cancelCallback(ra)}na=t,e=o.unstable_now()-pa,ra=o.unstable_scheduleCallback(Ba,{timeout:10*(1073741822-t)-e})}function Aa(e,t,n,r,u){e.expirationTime=r,0!==u||xa()?0<u&&(e.timeoutHandle=Dr(function(e,t,n){e.pendingCommitExpirationTime=n,e.finishedWork=t,Da(),ma=ha,Sa(e,n)}.bind(null,e,t,n),u)):(e.pendingCommitExpirationTime=n,e.finishedWork=t)}function Ca(){return ua?ma:(Fa(),0!==ia&&1!==ia||(Da(),ma=ha),ma)}function Ea(e,t){null===e.nextScheduledRoot?(e.expirationTime=t,null===ta?(ea=ta=e,e.nextScheduledRoot=e):(ta=ta.nextScheduledRoot=e).nextScheduledRoot=ea):t>e.expirationTime&&(e.expirationTime=t),ua||(sa?fa&&(oa=e,ia=1073741823,Ta(e,1073741823,!1)):1073741823===t?ka(1073741823,!1):ba(e,t))}function Fa(){var e=0,t=null;if(null!==ta)for(var n=ta,r=ea;null!==r;){var u=r.expirationTime;if(0===u){if((null===n||null===ta)&&i("244"),r===r.nextScheduledRoot){ea=ta=r.nextScheduledRoot=null;break}if(r===ea)ea=u=r.nextScheduledRoot,ta.nextScheduledRoot=u,r.nextScheduledRoot=null;else{if(r===ta){(ta=n).nextScheduledRoot=ea,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if(u>e&&(e=u,t=r),r===ta)break;if(1073741823===e)break;n=r,r=r.nextScheduledRoot}}oa=t,ia=e}var wa=!1;function xa(){return!!wa||!!o.unstable_shouldYield()&&(wa=!0)}function Ba(){try{if(!xa()&&null!==ea){Da();var e=ea;do{var t=e.expirationTime;0!==t&&ha<=t&&(e.nextExpirationTimeToWorkOn=ha),e=e.nextScheduledRoot}while(e!==ea)}ka(0,!0)}finally{wa=!1}}function ka(e,t){if(Fa(),t)for(Da(),ma=ha;null!==oa&&0!==ia&&e<=ia&&!(wa&&ha>ia);)Ta(oa,ia,ha>ia),Fa(),Da(),ma=ha;else for(;null!==oa&&0!==ia&&e<=ia;)Ta(oa,ia,!1),Fa();if(t&&(na=0,ra=null),0!==ia&&ba(oa,ia),va=0,ya=null,null!==da)for(e=da,da=null,t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){la||(la=!0,ca=e)}}if(la)throw e=ca,ca=null,la=!1,e}function Sa(e,t){ua&&i("253"),oa=e,ia=t,Ta(e,t,!1),ka(1073741823,!1)}function Ta(e,t,n){if(ua&&i("245"),ua=!0,n){var r=e.finishedWork;null!==r?_a(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,br(r)),$i(e,n),null!==(r=e.finishedWork)&&(xa()?e.finishedWork=r:_a(e,r,t)))}else null!==(r=e.finishedWork)?_a(e,r,t):(e.finishedWork=null,-1!==(r=e.timeoutHandle)&&(e.timeoutHandle=-1,br(r)),$i(e,n),null!==(r=e.finishedWork)&&_a(e,r,t));ua=!1}function _a(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime>=n&&(null===da?da=[r]:da.push(r),r._defer))return e.finishedWork=t,void(e.expirationTime=0);e.finishedWork=null,e===ya?va++:(ya=e,va=0),o.unstable_runWithPriority(o.unstable_ImmediatePriority,function(){Vi(e,t)})}function Pa(e){null===oa&&i("246"),oa.expirationTime=0,la||(la=!0,ca=e)}function Oa(e,t){var n=sa;sa=!0;try{return e(t)}finally{(sa=n)||ua||ka(1073741823,!1)}}function Na(e,t){if(sa&&!fa){fa=!0;try{return e(t)}finally{fa=!1}}return e(t)}function Ra(e,t,n){sa||ua||0===aa||(ka(aa,!1),aa=0);var r=sa;sa=!0;try{return o.unstable_runWithPriority(o.unstable_UserBlockingPriority,function(){return e(t,n)})}finally{(sa=r)||ua||ka(1073741823,!1)}}function Ia(e,t,n,r,u){var o=t.current;e:if(n){t:{2===tn(n=n._reactInternalFiber)&&1===n.tag||i("170");var a=n;do{switch(a.tag){case 3:a=a.stateNode.context;break t;case 1:if(Nr(a.type)){a=a.stateNode.__reactInternalMemoizedMergedChildContext;break t}}a=a.return}while(null!==a);i("171"),a=void 0}if(1===n.tag){var l=n.type;if(Nr(l)){n=Mr(n,l,a);break e}}n=a}else n=Sr;return null===t.context?t.context=n:t.pendingContext=n,t=u,(u=Yo(r)).payload={element:e},null!==(t=void 0===t?null:t)&&(u.callback=t),Hi(),Xo(o,u),Xi(o,r),r}function La(e,t,n,r){var u=t.current;return Ia(e,t,n,u=Qi(Ca(),u),r)}function Ma(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function ja(e){var t=1073741822-25*(1+((1073741822-Ca()+500)/25|0));t>=xi&&(t=xi-1),this._expirationTime=xi=t,this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function qa(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function Ua(e,t,n){e={current:t=Wr(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pingCache:null,earliestPendingTime:0,latestPendingTime:0,earliestSuspendedTime:0,latestSuspendedTime:0,latestPingedTime:0,didError:!1,pendingCommitExpirationTime:0,finishedWork:null,timeoutHandle:-1,context:null,pendingContext:null,hydrate:n,nextExpirationTimeToWorkOn:0,expirationTime:0,firstBatch:null,nextScheduledRoot:null},this._internalRoot=t.stateNode=e}function za(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Ha(e,t,n,r,u){var o=n._reactRootContainer;if(o){if("function"===typeof u){var i=u;u=function(){var e=Ma(o._internalRoot);i.call(e)}}null!=e?o.legacy_renderSubtreeIntoContainer(e,t,u):o.render(t,u)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Ua(e,!1,t)}(n,r),"function"===typeof u){var a=u;u=function(){var e=Ma(o._internalRoot);a.call(e)}}Na(function(){null!=e?o.legacy_renderSubtreeIntoContainer(e,t,u):o.render(t,u)})}return Ma(o._internalRoot)}function Va(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return za(t)||i("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:Ke,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}xe=function(e,t,n){switch(t){case"input":if(Ct(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+\'][type="radio"]\'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var u=M(r);u||i("90"),He(r),Ct(r,u)}}}break;case"textarea":Jn(e,n);break;case"select":null!=(t=n.value)&&Kn(e,!!n.multiple,t,!1)}},ja.prototype.render=function(e){this._defer||i("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new qa;return Ia(e,t,null,n,r._onCommit),r},ja.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},ja.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||i("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,u=t;u!==this;)r=u,u=u._next;null===r&&i("251"),r._next=u._next,this._next=t,e.firstBatch=this}this._defer=!1,Sa(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},ja.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},qa.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},qa.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!==typeof n&&i("191",n),n()}}},Ua.prototype.render=function(e,t){var n=this._internalRoot,r=new qa;return null!==(t=void 0===t?null:t)&&r.then(t),La(e,n,null,r._onCommit),r},Ua.prototype.unmount=function(e){var t=this._internalRoot,n=new qa;return null!==(e=void 0===e?null:e)&&n.then(e),La(null,t,null,n._onCommit),n},Ua.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,u=new qa;return null!==(n=void 0===n?null:n)&&u.then(n),La(t,r,e,u._onCommit),u},Ua.prototype.createBatch=function(){var e=new ja(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime>=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e},Pe=Oa,Oe=Ra,Ne=function(){ua||0===aa||(ka(aa,!1),aa=0)};var Wa={createPortal:Va,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;return void 0===t&&("function"===typeof e.render?i("188"):i("268",Object.keys(e))),e=null===(e=rn(t))?null:e.stateNode},hydrate:function(e,t,n){return za(t)||i("200"),Ha(null,e,t,!0,n)},render:function(e,t,n){return za(t)||i("200"),Ha(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return za(n)||i("200"),(null==e||void 0===e._reactInternalFiber)&&i("38"),Ha(e,t,n,!1,r)},unmountComponentAtNode:function(e){return za(e)||i("40"),!!e._reactRootContainer&&(Na(function(){Ha(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return Va.apply(void 0,arguments)},unstable_batchedUpdates:Oa,unstable_interactiveUpdates:Ra,flushSync:function(e,t){ua&&i("187");var n=sa;sa=!0;try{return Zi(e,t)}finally{sa=n,ka(1073741823,!1)}},unstable_createRoot:function(e,t){return za(e)||i("299","unstable_createRoot"),new Ua(e,!0,null!=t&&!0===t.hydrate)},unstable_flushControlled:function(e){var t=sa;sa=!0;try{Zi(e)}finally{(sa=t)||ua||ka(1073741823,!1)}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[I,L,M,S.injectEventPluginsByName,y,V,function(e){x(e,H)},Te,_e,kn,_]}};!function(e){var t=e.findFiberByHostInstance;(function(e){if("undefined"===typeof{})return!1;var t={};if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Ur=Hr(function(e){return t.onCommitFiberRoot(n,e)}),zr=Hr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}})(u({},e,{overrideProps:null,currentDispatcherRef:Ve.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=rn(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}({findFiberByHostInstance:R,bundleType:0,version:"16.8.6",rendererPackageName:"react-dom"});var Ga={default:Wa},$a=Ga&&Wa||Ga;e.exports=$a.default||$a},function(e,t,n){"use strict";e.exports=n(181)},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var n=null,r=!1,u=3,o=-1,i=-1,a=!1,l=!1;function c(){if(!a){var e=n.expirationTime;l?E():l=!0,C(d,e)}}function s(){var e=n,t=n.next;if(n===t)n=null;else{var r=n.previous;n=r.next=t,t.previous=r}e.next=e.previous=null,r=e.callback,t=e.expirationTime,e=e.priorityLevel;var o=u,a=i;u=e,i=t;try{var l=r()}finally{u=o,i=a}if("function"===typeof l)if(l={callback:l,priorityLevel:e,expirationTime:t,next:null,previous:null},null===n)n=l.next=l.previous=l;else{r=null,e=n;do{if(e.expirationTime>=t){r=e;break}e=e.next}while(e!==n);null===r?r=n:r===n&&(n=l,c()),(t=r.previous).next=r.previous=l,l.next=r,l.previous=t}}function f(){if(-1===o&&null!==n&&1===n.priorityLevel){a=!0;try{do{s()}while(null!==n&&1===n.priorityLevel)}finally{a=!1,null!==n?c():l=!1}}}function d(e){a=!0;var u=r;r=e;try{if(e)for(;null!==n;){var o=t.unstable_now();if(!(n.expirationTime<=o))break;do{s()}while(null!==n&&n.expirationTime<=o)}else if(null!==n)do{s()}while(null!==n&&!F())}finally{a=!1,r=u,null!==n?c():l=!1,f()}}var p,h,m=Date,g="function"===typeof setTimeout?setTimeout:void 0,v="function"===typeof clearTimeout?clearTimeout:void 0,y="function"===typeof requestAnimationFrame?requestAnimationFrame:void 0,D="function"===typeof cancelAnimationFrame?cancelAnimationFrame:void 0;function b(e){p=y(function(t){v(h),e(t)}),h=g(function(){D(p),e(t.unstable_now())},100)}if("object"===typeof performance&&"function"===typeof performance.now){var A=performance;t.unstable_now=function(){return A.now()}}else t.unstable_now=function(){return m.now()};var C,E,F,w=null;if("undefined"!==typeof window?w=window:"undefined"!==typeof e&&(w=e),w&&w._schedMock){var x=w._schedMock;C=x[0],E=x[1],F=x[2],t.unstable_now=x[3]}else if("undefined"===typeof window||"function"!==typeof MessageChannel){var B=null,k=function(e){if(null!==B)try{B(e)}finally{B=null}};C=function(e){null!==B?setTimeout(C,0,e):(B=e,setTimeout(k,0,!1))},E=function(){B=null},F=function(){return!1}}else{"undefined"!==typeof console&&("function"!==typeof y&&console.error("This browser doesn\'t support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!==typeof D&&console.error("This browser doesn\'t support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var S=null,T=!1,_=-1,P=!1,O=!1,N=0,R=33,I=33;F=function(){return N<=t.unstable_now()};var L=new MessageChannel,M=L.port2;L.port1.onmessage=function(){T=!1;var e=S,n=_;S=null,_=-1;var r=t.unstable_now(),u=!1;if(0>=N-r){if(!(-1!==n&&n<=r))return P||(P=!0,b(j)),S=e,void(_=n);u=!0}if(null!==e){O=!0;try{e(u)}finally{O=!1}}};var j=function e(t){if(null!==S){b(e);var n=t-N+I;n<I&&R<I?(8>n&&(n=8),I=n<R?R:n):R=n,N=t+I,T||(T=!0,M.postMessage(void 0))}else P=!1};C=function(e,t){S=e,_=t,O||0>t?M.postMessage(void 0):P||(P=!0,b(j))},E=function(){S=null,T=!1,_=-1}}t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=u,i=o;u=e,o=t.unstable_now();try{return n()}finally{u=r,o=i,f()}},t.unstable_next=function(e){switch(u){case 1:case 2:case 3:var n=3;break;default:n=u}var r=u,i=o;u=n,o=t.unstable_now();try{return e()}finally{u=r,o=i,f()}},t.unstable_scheduleCallback=function(e,r){var i=-1!==o?o:t.unstable_now();if("object"===typeof r&&null!==r&&"number"===typeof r.timeout)r=i+r.timeout;else switch(u){case 1:r=i+-1;break;case 2:r=i+250;break;case 5:r=i+1073741823;break;case 4:r=i+1e4;break;default:r=i+5e3}if(e={callback:e,priorityLevel:u,expirationTime:r,next:null,previous:null},null===n)n=e.next=e.previous=e,c();else{i=null;var a=n;do{if(a.expirationTime>r){i=a;break}a=a.next}while(a!==n);null===i?i=n:i===n&&(n=e,c()),(r=i.previous).next=i.previous=e,e.next=i,e.previous=r}return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(t===e)n=null;else{e===n&&(n=t);var r=e.previous;r.next=t,t.previous=r}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var n=u;return function(){var r=u,i=o;u=n,o=t.unstable_now();try{return e.apply(this,arguments)}finally{u=r,o=i,f()}}},t.unstable_getCurrentPriorityLevel=function(){return u},t.unstable_shouldYield=function(){return!r&&(null!==n&&n.expirationTime<i||F())},t.unstable_continueExecution=function(){null!==n&&c()},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return n}}).call(this,n(49))},function(e,t){var n={"&lt":"<","&gt":">","&quot":\'"\',"&apos":"\'","&amp":"&","&lt;":"<","&gt;":">","&quot;":\'"\',"&apos;":"\'","&amp;":"&"},r={60:"lt",62:"gt",34:"quot",39:"apos",38:"amp"},u={"<":"&lt;",">":"&gt;",\'"\':"&quot;","\'":"&apos;","&":"&amp;"};function o(){}o.prototype.encode=function(e){return e&&e.length?e.replace(/<|>|"|\'|&/g,function(e){return u[e]}):""},o.encode=function(e){return(new o).encode(e)},o.prototype.decode=function(e){return e&&e.length?e.replace(/&#?[0-9a-zA-Z]+;?/g,function(e){if("#"===e.charAt(1)){var t="x"===e.charAt(2).toLowerCase()?parseInt(e.substr(3),16):parseInt(e.substr(2));return isNaN(t)||t<-32768||t>65535?"":String.fromCharCode(t)}return n[e]||e}):""},o.decode=function(e){return(new o).decode(e)},o.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",u=0;u<t;){var o=e.charCodeAt(u),i=r[o];i?(n+="&"+i+";",u++):(n+=o<32||o>126?"&#"+o+";":e.charAt(u),u++)}return n},o.encodeNonUTF=function(e){return(new o).encodeNonUTF(e)},o.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",r=0;r<t;){var u=e.charCodeAt(r);u<=255?n+=e[r++]:(n+="&#"+u+";",r++)}return n},o.encodeNonASCII=function(e){return(new o).encodeNonASCII(e)},e.exports=o},function(e,t){for(var n=["apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","Aelig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","quot","amp","lt","gt","OElig","oelig","Scaron","scaron","Yuml","circ","tilde","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","permil","lsaquo","rsaquo","euro","fnof","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","bull","hellip","prime","Prime","oline","frasl","weierp","image","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams"],r=[39,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,34,38,60,62,338,339,352,353,376,710,732,8194,8195,8201,8204,8205,8206,8207,8211,8212,8216,8217,8218,8220,8221,8222,8224,8225,8240,8249,8250,8364,402,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,977,978,982,8226,8230,8242,8243,8254,8260,8472,8465,8476,8482,8501,8592,8593,8594,8595,8596,8629,8656,8657,8658,8659,8660,8704,8706,8707,8709,8711,8712,8713,8715,8719,8721,8722,8727,8730,8733,8734,8736,8743,8744,8745,8746,8747,8756,8764,8773,8776,8800,8801,8804,8805,8834,8835,8836,8838,8839,8853,8855,8869,8901,8968,8969,8970,8971,9001,9002,9674,9824,9827,9829,9830],u={},o={},i=0,a=n.length;i<a;){var l=n[i],c=r[i];u[l]=String.fromCharCode(c),o[c]=l,i++}function s(){}s.prototype.decode=function(e){return e&&e.length?e.replace(/&(#?[\\w\\d]+);?/g,function(e,t){var n;if("#"===t.charAt(0)){var r="x"===t.charAt(1).toLowerCase()?parseInt(t.substr(2),16):parseInt(t.substr(1));isNaN(r)||r<-32768||r>65535||(n=String.fromCharCode(r))}else n=u[t];return n||e}):""},s.decode=function(e){return(new s).decode(e)},s.prototype.encode=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",r=0;r<t;){var u=o[e.charCodeAt(r)];n+=u?"&"+u+";":e.charAt(r),r++}return n},s.encode=function(e){return(new s).encode(e)},s.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",r=0;r<t;){var u=e.charCodeAt(r),i=o[u];n+=i?"&"+i+";":u<32||u>126?"&#"+u+";":e.charAt(r),r++}return n},s.encodeNonUTF=function(e){return(new s).encodeNonUTF(e)},s.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,n="",r=0;r<t;){var u=e.charCodeAt(r);u<=255?n+=e[r++]:(n+="&#"+u+";",r++)}return n},s.encodeNonASCII=function(e){return(new s).encodeNonASCII(e)},e.exports=s},function(e,t,n){"use strict";var r=n(185);function u(){var e=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)if(Object.prototype.hasOwnProperty.call(e,n)){var r=Object.defineProperty&&Object.getOwnPropertyDescriptor?Object.getOwnPropertyDescriptor(e,n):{};r.get||r.set?Object.defineProperty(t,n,r):t[n]=e[n]}return t.default=e,t}(n(189));return u=function(){return e},e}function o(){var e=a(n(190));return o=function(){return e},e}function i(){var e=a(n(193));return i=function(){return e},e}function a(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0}),t.shouldHighlight=f,t.getChalk=d,t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(f(t)){var n=d(t),i=function(e){return{keyword:e.cyan,capitalized:e.yellow,jsx_tag:e.yellow,punctuator:e.yellow,number:e.magenta,string:e.green,regex:e.magenta,comment:e.grey,invalid:e.white.bgRed.bold}}(n);return function(e,t){return t.replace(u().default,function(){for(var t=arguments.length,n=new Array(t),i=0;i<t;i++)n[i]=arguments[i];var a=function(e){var t=e.slice(-2),n=r(t,2),i=n[0],a=n[1],l=(0,u().matchToToken)(e);if("name"===l.type){if(o().default.keyword.isReservedWordES6(l.value))return"keyword";if(c.test(l.value)&&("<"===a[i-1]||"</"==a.substr(i-2,2)))return"jsx_tag";if(l.value[0]!==l.value[0].toLowerCase())return"capitalized"}if("punctuator"===l.type&&s.test(l.value))return"bracket";if("invalid"===l.type&&("@"===l.value||"#"===l.value))return"punctuator";return l.type}(n),f=e[a];return f?n[0].split(l).map(function(e){return f(e)}).join("\\n"):n[0]})}(i,e)}return e};var l=/\\r\\n|[\\n\\r\\u2028\\u2029]/,c=/^[a-z][\\w-]*$/i,s=/^[()[\\]{}]$/;function f(e){return i().default.supportsColor||e.forceColor}function d(e){var t=i().default;return e.forceColor&&(t=new(i().default.constructor)({enabled:!0,level:1})),t}},function(e,t,n){var r=n(186),u=n(187),o=n(188);e.exports=function(e,t){return r(e)||u(e,t)||o()}},function(e,t){e.exports=function(e){if(Array.isArray(e))return e}},function(e,t){e.exports=function(e,t){var n=[],r=!0,u=!1,o=void 0;try{for(var i,a=e[Symbol.iterator]();!(r=(i=a.next()).done)&&(n.push(i.value),!t||n.length!==t);r=!0);}catch(e){u=!0,o=e}finally{try{r||null==a.return||a.return()}finally{if(u)throw o}}return n}},function(e,t){e.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}},function(e,t){Object.defineProperty(t,"__esModule",{value:!0}),t.default=/(([\'"])(?:(?!\\2|\\\\).|\\\\(?:\\r\\n|[\\s\\S]))*(\\2)?|`(?:[^`\\\\$]|\\\\[\\s\\S]|\\$(?!\\{)|\\$\\{(?:[^{}]|\\{[^}]*\\}?)*\\}?)*(`)?)|(\\/\\/.*)|(\\/\\*(?:[^*]|\\*(?!\\/))*(\\*\\/)?)|(\\/(?!\\*)(?:\\[(?:(?![\\]\\\\]).|\\\\.)*\\]|(?![\\/\\]\\\\]).|\\\\.)+\\/(?:(?!\\s*(?:\\b|[\\u0080-\\uFFFF$\\\\\'"~({]|[+\\-!](?!=)|\\.?\\d))|[gmiyus]{1,6}\\b(?![\\u0080-\\uFFFF$\\\\]|\\s*(?:[+\\-*%&|^<>!=?({]|\\/(?![\\/*])))))|(0[xX][\\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\\d*\\.\\d+|\\d+\\.?)(?:[eE][+-]?\\d+)?)|((?!\\d)(?:(?!\\s)[$\\w\\u0080-\\uFFFF]|\\\\u[\\da-fA-F]{4}|\\\\u\\{[\\da-fA-F]+\\})+)|(--|\\+\\+|&&|\\|\\||=>|\\.{3}|(?:[+\\-\\/%&|^]|\\*{1,2}|<{1,2}|>{1,3}|!=?|={1,2})=?|[?~.,:;[\\](){}])|(\\s+)|(^$|[\\s\\S])/g,t.matchToToken=function(e){var t={type:"invalid",value:e[0],closed:void 0};return e[1]?(t.type="string",t.closed=!(!e[3]&&!e[4])):e[5]?t.type="comment":e[6]?(t.type="comment",t.closed=!!e[7]):e[8]?t.type="regex":e[9]?t.type="number":e[10]?t.type="name":e[11]?t.type="punctuator":e[12]&&(t.type="whitespace"),t}},function(e,t,n){!function(){"use strict";t.ast=n(191),t.code=n(81),t.keyword=n(192)}()},function(e,t){!function(){"use strict";function t(e){if(null==e)return!1;switch(e.type){case"BlockStatement":case"BreakStatement":case"ContinueStatement":case"DebuggerStatement":case"DoWhileStatement":case"EmptyStatement":case"ExpressionStatement":case"ForInStatement":case"ForStatement":case"IfStatement":case"LabeledStatement":case"ReturnStatement":case"SwitchStatement":case"ThrowStatement":case"TryStatement":case"VariableDeclaration":case"WhileStatement":case"WithStatement":return!0}return!1}function n(e){switch(e.type){case"IfStatement":return null!=e.alternate?e.alternate:e.consequent;case"LabeledStatement":case"ForStatement":case"ForInStatement":case"WhileStatement":case"WithStatement":return e.body}return null}e.exports={isExpression:function(e){if(null==e)return!1;switch(e.type){case"ArrayExpression":case"AssignmentExpression":case"BinaryExpression":case"CallExpression":case"ConditionalExpression":case"FunctionExpression":case"Identifier":case"Literal":case"LogicalExpression":case"MemberExpression":case"NewExpression":case"ObjectExpression":case"SequenceExpression":case"ThisExpression":case"UnaryExpression":case"UpdateExpression":return!0}return!1},isStatement:t,isIterationStatement:function(e){if(null==e)return!1;switch(e.type){case"DoWhileStatement":case"ForInStatement":case"ForStatement":case"WhileStatement":return!0}return!1},isSourceElement:function(e){return t(e)||null!=e&&"FunctionDeclaration"===e.type},isProblematicIfStatement:function(e){var t;if("IfStatement"!==e.type)return!1;if(null==e.alternate)return!1;t=e.consequent;do{if("IfStatement"===t.type&&null==t.alternate)return!0;t=n(t)}while(t);return!1},trailingStatement:n}}()},function(e,t,n){!function(){"use strict";var t=n(81);function r(e,t){return!(!t&&"yield"===e)&&u(e,t)}function u(e,t){if(t&&function(e){switch(e){case"implements":case"interface":case"package":case"private":case"protected":case"public":case"static":case"let":return!0;default:return!1}}(e))return!0;switch(e.length){case 2:return"if"===e||"in"===e||"do"===e;case 3:return"var"===e||"for"===e||"new"===e||"try"===e;case 4:return"this"===e||"else"===e||"case"===e||"void"===e||"with"===e||"enum"===e;case 5:return"while"===e||"break"===e||"catch"===e||"throw"===e||"const"===e||"yield"===e||"class"===e||"super"===e;case 6:return"return"===e||"typeof"===e||"delete"===e||"switch"===e||"export"===e||"import"===e;case 7:return"default"===e||"finally"===e||"extends"===e;case 8:return"function"===e||"continue"===e||"debugger"===e;case 10:return"instanceof"===e;default:return!1}}function o(e,t){return"null"===e||"true"===e||"false"===e||r(e,t)}function i(e,t){return"null"===e||"true"===e||"false"===e||u(e,t)}function a(e){var n,r,u;if(0===e.length)return!1;if(u=e.charCodeAt(0),!t.isIdentifierStartES5(u))return!1;for(n=1,r=e.length;n<r;++n)if(u=e.charCodeAt(n),!t.isIdentifierPartES5(u))return!1;return!0}function l(e){var n,r,u,o,i;if(0===e.length)return!1;for(i=t.isIdentifierStartES6,n=0,r=e.length;n<r;++n){if(55296<=(u=e.charCodeAt(n))&&u<=56319){if(++n>=r)return!1;if(!(56320<=(o=e.charCodeAt(n))&&o<=57343))return!1;u=1024*(u-55296)+(o-56320)+65536}if(!i(u))return!1;i=t.isIdentifierPartES6}return!0}e.exports={isKeywordES5:r,isKeywordES6:u,isReservedWordES5:o,isReservedWordES6:i,isRestrictedWord:function(e){return"eval"===e||"arguments"===e},isIdentifierNameES5:a,isIdentifierNameES6:l,isIdentifierES5:function(e,t){return a(e)&&!o(e,t)},isIdentifierES6:function(e,t){return l(e)&&!i(e,t)}}}()},function(e,t,n){"use strict";(function(t){var r=n(194),u=n(195),o=n(200).stdout,i=n(201),a="win32"===t.platform&&!(Object({NODE_ENV:"production"}).TERM||"").toLowerCase().startsWith("xterm"),l=["ansi","ansi","ansi256","ansi16m"],c=new Set(["gray"]),s=Object.create(null);function f(e,t){t=t||{};var n=o?o.level:0;e.level=void 0===t.level?n:t.level,e.enabled="enabled"in t?t.enabled:e.level>0}function d(e){if(!this||!(this instanceof d)||this.template){var t={};return f(t,e),t.template=function(){var e=[].slice.call(arguments);return function(e,t){if(!Array.isArray(t))return[].slice.call(arguments,1).join(" ");for(var n=[].slice.call(arguments,2),r=[t.raw[0]],u=1;u<t.length;u++)r.push(String(n[u-1]).replace(/[{}\\\\]/g,"\\\\$&")),r.push(String(t.raw[u]));return i(e,r.join(""))}.apply(null,[t.template].concat(e))},Object.setPrototypeOf(t,d.prototype),Object.setPrototypeOf(t.template,t),t.template.constructor=d,t.template}f(this,e)}a&&(u.blue.open="[94m");for(var p=function(){var e=m[h];u[e].closeRe=new RegExp(r(u[e].close),"g"),s[e]={get:function(){var t=u[e];return E.call(this,this._styles?this._styles.concat(t):[t],this._empty,e)}}},h=0,m=Object.keys(u);h<m.length;h++)p();s.visible={get:function(){return E.call(this,this._styles||[],!0,"visible")}},u.color.closeRe=new RegExp(r(u.color.close),"g");for(var g=function(){var e=y[v];if(c.has(e))return"continue";s[e]={get:function(){var t=this.level;return function(){var n={open:u.color[l[t]][e].apply(null,arguments),close:u.color.close,closeRe:u.color.closeRe};return E.call(this,this._styles?this._styles.concat(n):[n],this._empty,e)}}}},v=0,y=Object.keys(u.color.ansi);v<y.length;v++)g();u.bgColor.closeRe=new RegExp(r(u.bgColor.close),"g");for(var D=function(){var e=A[b];if(c.has(e))return"continue";var t="bg"+e[0].toUpperCase()+e.slice(1);s[t]={get:function(){var t=this.level;return function(){var n={open:u.bgColor[l[t]][e].apply(null,arguments),close:u.bgColor.close,closeRe:u.bgColor.closeRe};return E.call(this,this._styles?this._styles.concat(n):[n],this._empty,e)}}}},b=0,A=Object.keys(u.bgColor.ansi);b<A.length;b++)D();var C=Object.defineProperties(function(){},s);function E(e,t,n){var r=function e(){return function(){var e=arguments,t=e.length,n=String(arguments[0]);if(0===t)return"";if(t>1)for(var r=1;r<t;r++)n+=" "+e[r];if(!this.enabled||this.level<=0||!n)return this._empty?"":n;var o=u.dim.open;a&&this.hasGrey&&(u.dim.open="");var i=!0,l=!1,c=void 0;try{for(var s,f=this._styles.slice().reverse()[Symbol.iterator]();!(i=(s=f.next()).done);i=!0){var d=s.value;n=(n=d.open+n.replace(d.closeRe,d.open)+d.close).replace(/\\r?\\n/g,"".concat(d.close,"$&").concat(d.open))}}catch(e){l=!0,c=e}finally{try{i||null==f.return||f.return()}finally{if(l)throw c}}return u.dim.open=o,n}.apply(e,arguments)};r._styles=e,r._empty=t;var o=this;return Object.defineProperty(r,"level",{enumerable:!0,get:function(){return o.level},set:function(e){o.level=e}}),Object.defineProperty(r,"enabled",{enumerable:!0,get:function(){return o.enabled},set:function(e){o.enabled=e}}),r.hasGrey=this.hasGrey||"gray"===n||"grey"===n,r.__proto__=C,r}Object.defineProperties(d.prototype,s),e.exports=d(),e.exports.supportsColor=o,e.exports.default=e.exports}).call(this,n(51))},function(e,t,n){"use strict";var r=/[|\\\\{}()[\\]^$+*?.]/g;e.exports=function(e){if("string"!==typeof e)throw new TypeError("Expected a string");return e.replace(r,"\\\\$&")}},function(e,t,n){"use strict";(function(e){var t=n(197),r=function(e,n){return function(){var r=e.apply(t,arguments);return"[".concat(r+n,"m")}},u=function(e,n){return function(){var r=e.apply(t,arguments);return"[".concat(38+n,";5;").concat(r,"m")}},o=function(e,n){return function(){var r=e.apply(t,arguments);return"[".concat(38+n,";2;").concat(r[0],";").concat(r[1],";").concat(r[2],"m")}};Object.defineProperty(e,"exports",{enumerable:!0,get:function(){var e=new Map,n={modifier:{reset:[0,0],bold:[1,22],dim:[2,22],italic:[3,23],underline:[4,24],inverse:[7,27],hidden:[8,28],strikethrough:[9,29]},color:{black:[30,39],red:[31,39],green:[32,39],yellow:[33,39],blue:[34,39],magenta:[35,39],cyan:[36,39],white:[37,39],gray:[90,39],redBright:[91,39],greenBright:[92,39],yellowBright:[93,39],blueBright:[94,39],magentaBright:[95,39],cyanBright:[96,39],whiteBright:[97,39]},bgColor:{bgBlack:[40,49],bgRed:[41,49],bgGreen:[42,49],bgYellow:[43,49],bgBlue:[44,49],bgMagenta:[45,49],bgCyan:[46,49],bgWhite:[47,49],bgBlackBright:[100,49],bgRedBright:[101,49],bgGreenBright:[102,49],bgYellowBright:[103,49],bgBlueBright:[104,49],bgMagentaBright:[105,49],bgCyanBright:[106,49],bgWhiteBright:[107,49]}};n.color.grey=n.color.gray;for(var i=0,a=Object.keys(n);i<a.length;i++){for(var l=a[i],c=n[l],s=0,f=Object.keys(c);s<f.length;s++){var d=f[s],p=c[d];n[d]={open:"[".concat(p[0],"m"),close:"[".concat(p[1],"m")},c[d]=n[d],e.set(p[0],p[1])}Object.defineProperty(n,l,{value:c,enumerable:!1}),Object.defineProperty(n,"codes",{value:e,enumerable:!1})}var h=function(e){return e},m=function(e,t,n){return[e,t,n]};n.color.close="[39m",n.bgColor.close="[49m",n.color.ansi={ansi:r(h,0)},n.color.ansi256={ansi256:u(h,0)},n.color.ansi16m={rgb:o(m,0)},n.bgColor.ansi={ansi:r(h,10)},n.bgColor.ansi256={ansi256:u(h,10)},n.bgColor.ansi16m={rgb:o(m,10)};for(var g=0,v=Object.keys(t);g<v.length;g++){var y=v[g];if("object"===typeof t[y]){var D=t[y];"ansi16"===y&&(y="ansi"),"ansi16"in D&&(n.color.ansi[y]=r(D.ansi16,0),n.bgColor.ansi[y]=r(D.ansi16,10)),"ansi256"in D&&(n.color.ansi256[y]=u(D.ansi256,0),n.bgColor.ansi256[y]=u(D.ansi256,10)),"rgb"in D&&(n.color.ansi16m[y]=o(D.rgb,0),n.bgColor.ansi16m[y]=o(D.rgb,10))}}return n}})}).call(this,n(196)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){var r=n(82),u=n(199),o={};Object.keys(r).forEach(function(e){o[e]={},Object.defineProperty(o[e],"channels",{value:r[e].channels}),Object.defineProperty(o[e],"labels",{value:r[e].labels});var t=u(e);Object.keys(t).forEach(function(n){var r=t[n];o[e][n]=function(e){var t=function(t){if(void 0===t||null===t)return t;arguments.length>1&&(t=Array.prototype.slice.call(arguments));var n=e(t);if("object"===typeof n)for(var r=n.length,u=0;u<r;u++)n[u]=Math.round(n[u]);return n};return"conversion"in e&&(t.conversion=e.conversion),t}(r),o[e][n].raw=function(e){var t=function(t){return void 0===t||null===t?t:(arguments.length>1&&(t=Array.prototype.slice.call(arguments)),e(t))};return"conversion"in e&&(t.conversion=e.conversion),t}(r)})}),e.exports=o},function(e,t,n){"use strict";e.exports={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]}},function(e,t,n){var r=n(82);function u(e){var t=function(){for(var e={},t=Object.keys(r),n=t.length,u=0;u<n;u++)e[t[u]]={distance:-1,parent:null};return e}(),n=[e];for(t[e].distance=0;n.length;)for(var u=n.pop(),o=Object.keys(r[u]),i=o.length,a=0;a<i;a++){var l=o[a],c=t[l];-1===c.distance&&(c.distance=t[u].distance+1,c.parent=u,n.unshift(l))}return t}function o(e,t){return function(n){return t(e(n))}}function i(e,t){for(var n=[t[e].parent,e],u=r[t[e].parent][e],i=t[e].parent;t[i].parent;)n.unshift(t[i].parent),u=o(r[t[i].parent][i],u),i=t[i].parent;return u.conversion=n,u}e.exports=function(e){for(var t=u(e),n={},r=Object.keys(t),o=r.length,a=0;a<o;a++){var l=r[a];null!==t[l].parent&&(n[l]=i(l,t))}return n}},function(e,t,n){"use strict";e.exports={stdout:!1,stderr:!1}},function(e,t,n){"use strict";var r=/(?:\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi,u=/(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g,o=/^([\'"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/,i=/\\\\(u[a-f\\d]{4}|x[a-f\\d]{2}|.)|([^\\\\])/gi,a=new Map([["n","\\n"],["r","\\r"],["t","\\t"],["b","\\b"],["f","\\f"],["v","\\v"],["0","\\0"],["\\\\","\\\\"],["e",""],["a",""]]);function l(e){return"u"===e[0]&&5===e.length||"x"===e[0]&&3===e.length?String.fromCharCode(parseInt(e.slice(1),16)):a.get(e)||e}function c(e,t){var n,r=[],u=t.trim().split(/\\s*,\\s*/g),a=!0,c=!1,s=void 0;try{for(var f,d=u[Symbol.iterator]();!(a=(f=d.next()).done);a=!0){var p=f.value;if(isNaN(p)){if(!(n=p.match(o)))throw new Error("Invalid Chalk template style argument: ".concat(p," (in style \'").concat(e,"\')"));r.push(n[2].replace(i,function(e,t,n){return t?l(t):n}))}else r.push(Number(p))}}catch(e){c=!0,s=e}finally{try{a||null==d.return||d.return()}finally{if(c)throw s}}return r}function s(e){u.lastIndex=0;for(var t,n=[];null!==(t=u.exec(e));){var r=t[1];if(t[2]){var o=c(r,t[2]);n.push([r].concat(o))}else n.push([r])}return n}function f(e,t){var n={},r=!0,u=!1,o=void 0;try{for(var i,a=t[Symbol.iterator]();!(r=(i=a.next()).done);r=!0){var l=i.value,c=!0,s=!1,f=void 0;try{for(var d,p=l.styles[Symbol.iterator]();!(c=(d=p.next()).done);c=!0){var h=d.value;n[h[0]]=l.inverse?null:h.slice(1)}}catch(e){s=!0,f=e}finally{try{c||null==p.return||p.return()}finally{if(s)throw f}}}}catch(e){u=!0,o=e}finally{try{r||null==a.return||a.return()}finally{if(u)throw o}}for(var m=e,g=0,v=Object.keys(n);g<v.length;g++){var y=v[g];if(Array.isArray(n[y])){if(!(y in m))throw new Error("Unknown Chalk style: ".concat(y));m=n[y].length>0?m[y].apply(m,n[y]):m[y]}}return m}e.exports=function(e,t){var n=[],u=[],o=[];if(t.replace(r,function(t,r,i,a,c,d){if(r)o.push(l(r));else if(a){var p=o.join("");o=[],u.push(0===n.length?p:f(e,n)(p)),n.push({inverse:i,styles:s(a)})}else if(c){if(0===n.length)throw new Error("Found extraneous } in Chalk template literal");u.push(f(e,n)(o.join(""))),o=[],n.pop()}else o.push(d)}),u.push(o.join("")),n.length>0){var i="Chalk template literal is missing ".concat(n.length," closing bracket").concat(1===n.length?"":"s"," (`}`)");throw new Error(i)}return u.join("")}},function(e,t,n){"use strict";n.r(t);n(85);var r=n(0),u=n.n(r),o=n(52),i=n.n(o);function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function c(e,t,n){return t&&l(e.prototype,t),n&&l(e,n),e}function s(e){return(s="function"===typeof Symbol&&"symbol"===typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function f(e){return(f="function"===typeof Symbol&&"symbol"===s(Symbol.iterator)?function(e){return s(e)}:function(e){return e&&"function"===typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":s(e)})(e)}function d(e,t){return!t||"object"!==f(t)&&"function"!==typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called");return e}(e):t}function p(e){return(p=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function h(e,t){return(h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function m(e,t){if("function"!==typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}var g={width:"100%",height:"100%","box-sizing":"border-box","text-align":"center","background-color":"#ffffff"},v={"background-color":"#fccfcf"},y={"background-color":"#fbf5b4"},D={position:"relative",display:"inline-flex",flexDirection:"column",height:"100%",width:"1024px",maxWidth:"100%",overflowX:"hidden",overflowY:"auto",padding:"0.5rem",boxSizing:"border-box",textAlign:"left",fontFamily:"Consolas, Menlo, monospace",fontSize:"11px",whiteSpace:"pre-wrap",wordBreak:"break-word",lineHeight:1.5,color:"#293238"},b=function(e){function t(){var e,n;a(this,t);for(var r=arguments.length,u=new Array(r),o=0;o<r;o++)u[o]=arguments[o];return(n=d(this,(e=p(t)).call.apply(e,[this].concat(u)))).iframeWindow=null,n.getIframeWindow=function(e){if(e){var t=e.ownerDocument;n.iframeWindow=t.defaultView}},n.onKeyDown=function(e){var t=n.props.shortcutHandler;t&&t(e.key)},n}return m(t,r["Component"]),c(t,[{key:"componentDidMount",value:function(){window.addEventListener("keydown",this.onKeyDown),this.iframeWindow&&this.iframeWindow.addEventListener("keydown",this.onKeyDown)}},{key:"componentWillUnmount",value:function(){window.removeEventListener("keydown",this.onKeyDown),this.iframeWindow&&this.iframeWindow.removeEventListener("keydown",this.onKeyDown)}},{key:"render",value:function(){return u.a.createElement("div",{style:D,ref:this.getIframeWindow},this.props.children)}}]),t}(),A={fontFamily:"sans-serif",color:"#878e91",marginTop:"0.5rem",flex:"0 0 auto"};var C=function(e){return u.a.createElement("div",{style:A},e.line1,u.a.createElement("br",null),e.line2)},E={fontSize:"2em",fontFamily:"sans-serif",color:"#ce1126",whiteSpace:"pre-wrap",margin:"0 2rem 0.75rem 0",flex:"0 0 auto",maxHeight:"50%",overflow:"auto"};var F=function(e){return u.a.createElement("div",{style:E},e.headerText)};function w(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function x(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"===typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){w(e,t,n[t])})}return e}var B={position:"relative",display:"block",padding:"0.5em",marginTop:"0.5em",marginBottom:"0.5em",overflowX:"auto",whiteSpace:"pre-wrap",borderRadius:"0.25rem"},k=x({},B,{backgroundColor:"rgba(206, 17, 38, 0.05)"}),S=x({},B,{backgroundColor:"rgba(251, 245, 180, 0.3)"}),T={fontFamily:"Consolas, Menlo, monospace"};var _=function(e){var t=e.main?k:S,n={__html:e.codeHTML};return u.a.createElement("pre",{style:t},u.a.createElement("code",{style:T,dangerouslySetInnerHTML:n}))},P=n(33),O=n.n(P),N=new(n(83).AllHtmlEntities),R={reset:["333333","transparent"],black:"333333",red:"881280",green:"1155cc",yellow:"881280",blue:"994500",magenta:"994500",cyan:"c80000",gray:"6e6e6e",lightgrey:"f5f5f5",darkgrey:"6e6e6e"},I={"ansi-bright-black":"black","ansi-bright-yellow":"yellow","ansi-yellow":"yellow","ansi-bright-green":"green","ansi-green":"green","ansi-bright-cyan":"cyan","ansi-cyan":"cyan","ansi-bright-red":"red","ansi-red":"red","ansi-bright-magenta":"magenta","ansi-magenta":"magenta","ansi-white":"darkgrey"};var L=function(e){for(var t=(new O.a).ansiToJson(N.encode(e),{use_classes:!0}),n="",r=!1,u=0;u<t.length;++u)for(var o=t[u],i=o.content,a=o.fg,l=i.split("\\n"),c=0;c<l.length;++c){r||(n+=\'<span data-ansi-line="true">\',r=!0);var s=l[c].replace("\\r",""),f=R[I[a]];null!=f?n+=\'<span style="color: #\'+f+\';">\'+s+"</span>":(null!=a&&console.log("Missing color mapping: ",a),n+="<span>"+s+"</span>"),c<l.length-1&&(n+="</span>",r=!1,n+="<br/>")}return r&&(n+="</span>",r=!1),n},M=/^\\.(\\/[^\\/\\n ]+)+\\.[^\\/\\n ]+$/,j=[/^.*\\((\\d+):(\\d+)\\)$/,/^Line (\\d+):.+$/];var q=function(e){for(var t=e.split("\\n"),n="",r=0,u=0,o=0;o<t.length;o++){var i=O.a.ansiToText(t[o]).trim();if(i){!n&&i.match(M)&&(n=i);for(var a=0;a<j.length;){var l=i.match(j[a]);if(l){r=parseInt(l[1],10),u=parseInt(l[2],10)+1||1;break}a++}if(n&&r)break}}return n&&r?{fileName:n,lineNumber:r,colNumber:u}:null},U={cursor:"pointer"},z=function(e){function t(){return a(this,t),d(this,p(t).apply(this,arguments))}return m(t,r["PureComponent"]),c(t,[{key:"render",value:function(){var e=this.props,t=e.error,n=e.editorHandler,r=q(t),o=null!==r&&null!==n;return u.a.createElement(b,null,u.a.createElement(F,{headerText:"Failed to compile"}),u.a.createElement("div",{onClick:o&&r?function(){return n(r)}:null,style:o?U:null},u.a.createElement(_,{main:!0,codeHTML:L(t)})),u.a.createElement(C,{line1:"This error occurred during the build time and cannot be dismissed."}))}}]),t}(),H={color:"#293238",lineHeight:"1rem",fontSize:"1.5rem",padding:"1rem",cursor:"pointer",position:"absolute",right:0,top:0};var V=function(e){var t=e.close;return u.a.createElement("span",{title:"Click or press Escape to dismiss.",onClick:t,style:H},"×")},W={marginBottom:"0.5rem"},G={marginRight:"1em"},$={backgroundColor:"rgba(206, 17, 38, 0.05)",color:"#ce1126",border:"none",borderRadius:"4px",padding:"3px 6px",cursor:"pointer"},K=x({},$,{borderTopRightRadius:"0px",borderBottomRightRadius:"0px",marginRight:"1px"}),Q=x({},$,{borderTopLeftRadius:"0px",borderBottomLeftRadius:"0px"});var Y=function(e){var t=e.currentError,n=e.totalErrors,r=e.previous,o=e.next;return u.a.createElement("div",{style:W},u.a.createElement("span",{style:G},u.a.createElement("button",{onClick:r,style:K},"←"),u.a.createElement("button",{onClick:o,style:Q},"→")),"".concat(t," of ").concat(n," errors on the page"))};function J(e,t){for(var n in e.setAttribute("style",""),t)t.hasOwnProperty(n)&&(e.style[n]=t[n])}function X(e,t){for(;null!=t&&"br"!==t.tagName.toLowerCase();)t=t.nextElementSibling;null!=t&&e.removeChild(t)}var Z=n(84);var ee=function(e){var t=e.lines,n=e.lineNum,r=e.columnNum,o=e.contextSize,i=e.main,a=[],l=1/0;t.forEach(function(e){var t=e.content,n=t.match(/^\\s*/);""!==t&&(l=n&&n[0]?Math.min(l,n[0].length):0)}),t.forEach(function(e){var t=e.content,n=e.lineNumber;isFinite(l)&&(t=t.substring(l)),a[n-1]=t});var c=Object(Z.codeFrameColumns)(a.join("\\n"),{start:{line:n,column:null==r?0:r-(isFinite(l)?l:0)}},{forceColor:!0,linesAbove:o,linesBelow:o}),s=L(c),f=document.createElement("code");f.innerHTML=s,function(e){for(var t=e.childNodes,n=0;n<t.length;++n){var r=t[n];if("span"===r.tagName.toLowerCase()){var u=r.innerText;null!=u&&"|^"===u.replace(/\\s/g,"")&&(r.style.position="absolute",X(e,r))}}}(f);var d=f.childNodes;e:for(var p=0;p<d.length;++p)for(var h=d[p],m=h.childNodes,g=0;g<m.length;++g){var D=m[g].innerText;if(null!=D&&-1!==D.indexOf(" "+n+" |")){J(h,i?v:y);break e}}return u.a.createElement(_,{main:i,codeHTML:f.innerHTML})};function te(e,t,n,r,u,o,i){var a;if(!i&&e&&"number"===typeof t){var l=/^[\\/|\\\\].*?[\\/|\\\\]((src|node_modules)[\\/|\\\\].*)/.exec(e);a=l&&l[1]?l[1]:e,a+=":"+t,n&&(a+=":"+n)}else r&&"number"===typeof u?(a=r+":"+u,o&&(a+=":"+o)):a="unknown";return a.replace("webpack://",".")}var ne={fontSize:"0.9em",marginBottom:"0.9em"},re={textDecoration:"none",color:"#878e91",cursor:"pointer"},ue={cursor:"pointer"},oe={marginBottom:"1.5em",color:"#878e91",cursor:"pointer",border:"none",display:"block",width:"100%",textAlign:"left",background:"#fff",fontFamily:"Consolas, Menlo, monospace",fontSize:"1em",padding:"0px",lineHeight:"1.5"},ie=function(e){function t(){var e,n;a(this,t);for(var r=arguments.length,u=new Array(r),o=0;o<r;o++)u[o]=arguments[o];return(n=d(this,(e=p(t)).call.apply(e,[this].concat(u)))).state={compiled:!1},n.toggleCompiled=function(){n.setState(function(e){return{compiled:!e.compiled}})},n.editorHandler=function(){var e=n.getErrorLocation();e&&n.props.editorHandler(e)},n.onKeyDown=function(e){"Enter"===e.key&&n.editorHandler()},n}return m(t,r["Component"]),c(t,[{key:"getErrorLocation",value:function(){var e=this.props.frame,t=e._originalFileName,n=e._originalLineNumber;return t?-1!==t.trim().indexOf(" ")?null:{fileName:t,lineNumber:n||1}:null}},{key:"render",value:function(){var e=this.props,t=e.frame,n=e.contextSize,r=e.critical,o=e.showCode,i=t.fileName,a=t.lineNumber,l=t.columnNumber,c=t._scriptCode,s=t._originalFileName,f=t._originalLineNumber,d=t._originalColumnNumber,p=t._originalScriptCode,h=t.getFunctionName(),m=this.state.compiled,g=te(s,f,d,i,a,l,m),v=null;o&&(m&&c&&0!==c.length&&null!=a?v={lines:c,lineNum:a,columnNum:l,contextSize:n,main:r}:!m&&p&&0!==p.length&&null!=f&&(v={lines:p,lineNum:f,columnNum:d,contextSize:n,main:r}));var y=null!==this.getErrorLocation()&&null!==this.props.editorHandler;return u.a.createElement("div",null,u.a.createElement("div",null,h),u.a.createElement("div",{style:ne},u.a.createElement("span",{style:y?re:null,onClick:y?this.editorHandler:null,onKeyDown:y?this.onKeyDown:null,tabIndex:y?"0":null},g)),v&&u.a.createElement("span",null,u.a.createElement("span",{onClick:y?this.editorHandler:null,style:y?ue:null},u.a.createElement(ee,v)),u.a.createElement("button",{style:oe,onClick:this.toggleCompiled},"View "+(m?"source":"compiled"))))}}]),t}(),ae={color:"#293238",cursor:"pointer",border:"none",display:"block",width:"100%",textAlign:"left",background:"#fff",fontFamily:"Consolas, Menlo, monospace",fontSize:"1em",padding:"0px",lineHeight:"1.5"},le=x({},ae,{marginBottom:"1.5em"}),ce=x({},ae,{marginBottom:"0.6em"}),se=function(e){function t(){var e,n;a(this,t);for(var r=arguments.length,u=new Array(r),o=0;o<r;o++)u[o]=arguments[o];return(n=d(this,(e=p(t)).call.apply(e,[this].concat(u)))).state={collapsed:!0},n.toggleCollapsed=function(){n.setState(function(e){return{collapsed:!e.collapsed}})},n}return m(t,r["Component"]),c(t,[{key:"render",value:function(){var e=this.props.children.length,t=this.state.collapsed;return u.a.createElement("div",null,u.a.createElement("button",{onClick:this.toggleCollapsed,style:t?le:ce},(t?"▶":"▼")+" ".concat(e," stack frames were ")+(t?"collapsed.":"expanded.")),u.a.createElement("div",{style:{display:t?"none":"block"}},this.props.children,u.a.createElement("button",{onClick:this.toggleCollapsed,style:ce},"▲ ".concat(e," stack frames were expanded."))))}}]),t}();function fe(e){switch(e){case"EvalError":case"InternalError":case"RangeError":case"ReferenceError":case"SyntaxError":case"TypeError":case"URIError":return!0;default:return!1}}var de={fontSize:"1em",flex:"0 1 auto",minHeight:"0px",overflow:"auto"},pe=function(e){function t(){return a(this,t),d(this,p(t).apply(this,arguments))}return m(t,r["Component"]),c(t,[{key:"renderFrames",value:function(){var e=this.props,t=e.stackFrames,n=e.errorName,r=e.contextSize,o=e.editorHandler,i=[],a=!1,l=[],c=0;return t.forEach(function(e,s){var f=e.fileName,d=function(e,t){return null==e||""===e||-1!==e.indexOf("/~/")||-1!==e.indexOf("/node_modules/")||-1!==e.trim().indexOf(" ")||null==t||""===t}(e._originalFileName,f),p=!fe(n),h=d&&(p||a);d||(a=!0);var m=u.a.createElement(ie,{key:"frame-"+s,frame:e,contextSize:r,critical:0===s,showCode:!h,editorHandler:o}),g=s===t.length-1;h&&l.push(m),h&&!g||(1===l.length?i.push(l[0]):l.length>1&&(c++,i.push(u.a.createElement(se,{key:"bundle-"+c},l))),l=[]),h||i.push(m)}),i}},{key:"render",value:function(){return u.a.createElement("div",{style:de},this.renderFrames())}}]),t}(),he={display:"flex",flexDirection:"column"};var me=function(e){var t=e.errorRecord,n=e.editorHandler,r=t.error,o=t.unhandledRejection,i=t.contextSize,a=t.stackFrames,l=o?"Unhandled Rejection ("+r.name+")":r.name,c=r.message,s=c.match(/^\\w*:/)||!l?c:l+": "+c;return s=s.replace(/^Invariant Violation:\\s*/,"").replace(/^Warning:\\s*/,"").replace(" Check the render method","\\n\\nCheck the render method").replace(" Check your code at","\\n\\nCheck your code at"),u.a.createElement("div",{style:he},u.a.createElement(F,{headerText:s}),u.a.createElement(pe,{stackFrames:a,errorName:l,contextSize:i,editorHandler:n}))},ge=function(e){function t(){var e,n;a(this,t);for(var r=arguments.length,u=new Array(r),o=0;o<r;o++)u[o]=arguments[o];return(n=d(this,(e=p(t)).call.apply(e,[this].concat(u)))).state={currentIndex:0},n.previous=function(){n.setState(function(e,t){return{currentIndex:e.currentIndex>0?e.currentIndex-1:t.errorRecords.length-1}})},n.next=function(){n.setState(function(e,t){return{currentIndex:e.currentIndex<t.errorRecords.length-1?e.currentIndex+1:0}})},n.shortcutHandler=function(e){"Escape"===e?n.props.close():"ArrowLeft"===e?n.previous():"ArrowRight"===e&&n.next()},n}return m(t,r["PureComponent"]),c(t,[{key:"render",value:function(){var e=this.props,t=e.errorRecords,n=e.close,r=t.length;return u.a.createElement(b,{shortcutHandler:this.shortcutHandler},u.a.createElement(V,{close:n}),r>1&&u.a.createElement(Y,{currentError:this.state.currentIndex+1,totalErrors:r,previous:this.previous,next:this.next}),u.a.createElement(me,{errorRecord:t[this.state.currentIndex],editorHandler:this.props.editorHandler}),u.a.createElement(C,{line1:"This screen is visible only in development. It will not appear if the app crashes in production.",line2:"Open your browser’s developer console to further inspect this error."}))}}]),t}(),ve=null;window.updateContent=function(e){var t,n,r,o,a,l=(n=(t=e).currentBuildError,r=t.currentRuntimeErrorRecords,o=t.dismissRuntimeErrors,a=t.editorHandler,n?u.a.createElement(z,{error:n,editorHandler:a}):r.length>0?u.a.createElement(ge,{errorRecords:r,close:o,editorHandler:a}):null);return null===l?(i.a.unmountComponentAtNode(ve),!1):(i.a.render(l,ve),!0)},document.body.style.margin="0",document.body.style["max-width"]="100vw",J(ve=document.createElement("div"),g),document.body.appendChild(ve),window.parent.__REACT_ERROR_OVERLAY_GLOBAL_HOOK__.iframeReady()}]);';
  }, function (e, t, n) {
    var r = function (e) {
      "use strict";

      var t,
          n = Object.prototype,
          r = n.hasOwnProperty,
          u = "function" == typeof Symbol ? Symbol : {},
          o = u.iterator || "@@iterator",
          i = u.asyncIterator || "@@asyncIterator",
          a = u.toStringTag || "@@toStringTag";

      function l(e, t, n, r) {
        var u = t && t.prototype instanceof m ? t : m,
            o = Object.create(u.prototype),
            i = new B(r || []);
        return o._invoke = function (e, t, n) {
          var r = c;
          return function (u, o) {
            if (r === p) throw new Error("Generator is already running");

            if (r === d) {
              if ("throw" === u) throw o;
              return _();
            }

            for (n.method = u, n.arg = o;;) {
              var i = n.delegate;

              if (i) {
                var a = F(i, n);

                if (a) {
                  if (a === h) continue;
                  return a;
                }
              }

              if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
                if (r === c) throw r = d, n.arg;
                n.dispatchException(n.arg);
              } else "return" === n.method && n.abrupt("return", n.arg);
              r = p;
              var l = s(e, t, n);

              if ("normal" === l.type) {
                if (r = n.done ? d : f, l.arg === h) continue;
                return {
                  value: l.arg,
                  done: n.done
                };
              }

              "throw" === l.type && (r = d, n.method = "throw", n.arg = l.arg);
            }
          };
        }(e, n, i), o;
      }

      function s(e, t, n) {
        try {
          return {
            type: "normal",
            arg: e.call(t, n)
          };
        } catch (e) {
          return {
            type: "throw",
            arg: e
          };
        }
      }

      e.wrap = l;
      var c = "suspendedStart",
          f = "suspendedYield",
          p = "executing",
          d = "completed",
          h = {};

      function m() {}

      function g() {}

      function v() {}

      var y = {};

      y[o] = function () {
        return this;
      };

      var D = Object.getPrototypeOf,
          b = D && D(D(k([])));
      b && b !== n && r.call(b, o) && (y = b);
      var A = v.prototype = m.prototype = Object.create(y);

      function C(e) {
        ["next", "throw", "return"].forEach(function (t) {
          e[t] = function (e) {
            return this._invoke(t, e);
          };
        });
      }

      function E(e) {
        var t;

        this._invoke = function (n, u) {
          function o() {
            return new Promise(function (t, o) {
              !function t(n, u, o, i) {
                var a = s(e[n], e, u);

                if ("throw" !== a.type) {
                  var l = a.arg,
                      c = l.value;
                  return c && "object" == typeof c && r.call(c, "__await") ? Promise.resolve(c.__await).then(function (e) {
                    t("next", e, o, i);
                  }, function (e) {
                    t("throw", e, o, i);
                  }) : Promise.resolve(c).then(function (e) {
                    l.value = e, o(l);
                  }, function (e) {
                    return t("throw", e, o, i);
                  });
                }

                i(a.arg);
              }(n, u, t, o);
            });
          }

          return t = t ? t.then(o, o) : o();
        };
      }

      function F(e, n) {
        var r = e.iterator[n.method];

        if (r === t) {
          if (n.delegate = null, "throw" === n.method) {
            if (e.iterator.return && (n.method = "return", n.arg = t, F(e, n), "throw" === n.method)) return h;
            n.method = "throw", n.arg = new TypeError("The iterator does not provide a 'throw' method");
          }

          return h;
        }

        var u = s(r, e.iterator, n.arg);
        if ("throw" === u.type) return n.method = "throw", n.arg = u.arg, n.delegate = null, h;
        var o = u.arg;
        return o ? o.done ? (n[e.resultName] = o.value, n.next = e.nextLoc, "return" !== n.method && (n.method = "next", n.arg = t), n.delegate = null, h) : o : (n.method = "throw", n.arg = new TypeError("iterator result is not an object"), n.delegate = null, h);
      }

      function w(e) {
        var t = {
          tryLoc: e[0]
        };
        1 in e && (t.catchLoc = e[1]), 2 in e && (t.finallyLoc = e[2], t.afterLoc = e[3]), this.tryEntries.push(t);
      }

      function x(e) {
        var t = e.completion || {};
        t.type = "normal", delete t.arg, e.completion = t;
      }

      function B(e) {
        this.tryEntries = [{
          tryLoc: "root"
        }], e.forEach(w, this), this.reset(!0);
      }

      function k(e) {
        if (e) {
          var n = e[o];
          if (n) return n.call(e);
          if ("function" == typeof e.next) return e;

          if (!isNaN(e.length)) {
            var u = -1,
                i = function n() {
              for (; ++u < e.length;) if (r.call(e, u)) return n.value = e[u], n.done = !1, n;

              return n.value = t, n.done = !0, n;
            };

            return i.next = i;
          }
        }

        return {
          next: _
        };
      }

      function _() {
        return {
          value: t,
          done: !0
        };
      }

      return g.prototype = A.constructor = v, v.constructor = g, v[a] = g.displayName = "GeneratorFunction", e.isGeneratorFunction = function (e) {
        var t = "function" == typeof e && e.constructor;
        return !!t && (t === g || "GeneratorFunction" === (t.displayName || t.name));
      }, e.mark = function (e) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(e, v) : (e.__proto__ = v, a in e || (e[a] = "GeneratorFunction")), e.prototype = Object.create(A), e;
      }, e.awrap = function (e) {
        return {
          __await: e
        };
      }, C(E.prototype), E.prototype[i] = function () {
        return this;
      }, e.AsyncIterator = E, e.async = function (t, n, r, u) {
        var o = new E(l(t, n, r, u));
        return e.isGeneratorFunction(n) ? o : o.next().then(function (e) {
          return e.done ? e.value : o.next();
        });
      }, C(A), A[a] = "Generator", A[o] = function () {
        return this;
      }, A.toString = function () {
        return "[object Generator]";
      }, e.keys = function (e) {
        var t = [];

        for (var n in e) t.push(n);

        return t.reverse(), function n() {
          for (; t.length;) {
            var r = t.pop();
            if (r in e) return n.value = r, n.done = !1, n;
          }

          return n.done = !0, n;
        };
      }, e.values = k, B.prototype = {
        constructor: B,
        reset: function (e) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(x), !e) for (var n in this) "t" === n.charAt(0) && r.call(this, n) && !isNaN(+n.slice(1)) && (this[n] = t);
        },
        stop: function () {
          this.done = !0;
          var e = this.tryEntries[0].completion;
          if ("throw" === e.type) throw e.arg;
          return this.rval;
        },
        dispatchException: function (e) {
          if (this.done) throw e;
          var n = this;

          function u(r, u) {
            return a.type = "throw", a.arg = e, n.next = r, u && (n.method = "next", n.arg = t), !!u;
          }

          for (var o = this.tryEntries.length - 1; o >= 0; --o) {
            var i = this.tryEntries[o],
                a = i.completion;
            if ("root" === i.tryLoc) return u("end");

            if (i.tryLoc <= this.prev) {
              var l = r.call(i, "catchLoc"),
                  s = r.call(i, "finallyLoc");

              if (l && s) {
                if (this.prev < i.catchLoc) return u(i.catchLoc, !0);
                if (this.prev < i.finallyLoc) return u(i.finallyLoc);
              } else if (l) {
                if (this.prev < i.catchLoc) return u(i.catchLoc, !0);
              } else {
                if (!s) throw new Error("try statement without catch or finally");
                if (this.prev < i.finallyLoc) return u(i.finallyLoc);
              }
            }
          }
        },
        abrupt: function (e, t) {
          for (var n = this.tryEntries.length - 1; n >= 0; --n) {
            var u = this.tryEntries[n];

            if (u.tryLoc <= this.prev && r.call(u, "finallyLoc") && this.prev < u.finallyLoc) {
              var o = u;
              break;
            }
          }

          o && ("break" === e || "continue" === e) && o.tryLoc <= t && t <= o.finallyLoc && (o = null);
          var i = o ? o.completion : {};
          return i.type = e, i.arg = t, o ? (this.method = "next", this.next = o.finallyLoc, h) : this.complete(i);
        },
        complete: function (e, t) {
          if ("throw" === e.type) throw e.arg;
          return "break" === e.type || "continue" === e.type ? this.next = e.arg : "return" === e.type ? (this.rval = this.arg = e.arg, this.method = "return", this.next = "end") : "normal" === e.type && t && (this.next = t), h;
        },
        finish: function (e) {
          for (var t = this.tryEntries.length - 1; t >= 0; --t) {
            var n = this.tryEntries[t];
            if (n.finallyLoc === e) return this.complete(n.completion, n.afterLoc), x(n), h;
          }
        },
        catch: function (e) {
          for (var t = this.tryEntries.length - 1; t >= 0; --t) {
            var n = this.tryEntries[t];

            if (n.tryLoc === e) {
              var r = n.completion;

              if ("throw" === r.type) {
                var u = r.arg;
                x(n);
              }

              return u;
            }
          }

          throw new Error("illegal catch attempt");
        },
        delegateYield: function (e, n, r) {
          return this.delegate = {
            iterator: k(e),
            resultName: n,
            nextLoc: r
          }, "next" === this.method && (this.arg = t), h;
        }
      }, e;
    }(e.exports);

    try {
      regeneratorRuntime = r;
    } catch (e) {
      Function("r", "regeneratorRuntime = r")(r);
    }
  }, function (e, t) {
    var n = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
    t.encode = function (e) {
      if (0 <= e && e < n.length) return n[e];
      throw new TypeError("Must be between 0 and 63: " + e);
    }, t.decode = function (e) {
      return 65 <= e && e <= 90 ? e - 65 : 97 <= e && e <= 122 ? e - 97 + 26 : 48 <= e && e <= 57 ? e - 48 + 52 : 43 == e ? 62 : 47 == e ? 63 : -1;
    };
  }, function (e, t, n) {
    var r = n(1);

    function u() {
      this._array = [], this._sorted = !0, this._last = {
        generatedLine: -1,
        generatedColumn: 0
      };
    }

    u.prototype.unsortedForEach = function (e, t) {
      this._array.forEach(e, t);
    }, u.prototype.add = function (e) {
      var t, n, u, o, i, a;
      t = this._last, n = e, u = t.generatedLine, o = n.generatedLine, i = t.generatedColumn, a = n.generatedColumn, o > u || o == u && a >= i || r.compareByGeneratedPositionsInflated(t, n) <= 0 ? (this._last = e, this._array.push(e)) : (this._sorted = !1, this._array.push(e));
    }, u.prototype.toArray = function () {
      return this._sorted || (this._array.sort(r.compareByGeneratedPositionsInflated), this._sorted = !0), this._array;
    }, t.MappingList = u;
  }, function (e, t, n) {
    var r = n(1),
        u = n(13),
        o = n(6).ArraySet,
        i = n(5),
        a = n(14).quickSort;

    function l(e) {
      var t = e;
      return "string" == typeof e && (t = JSON.parse(e.replace(/^\)\]\}'/, ""))), null != t.sections ? new f(t) : new s(t);
    }

    function s(e) {
      var t = e;
      "string" == typeof e && (t = JSON.parse(e.replace(/^\)\]\}'/, "")));
      var n = r.getArg(t, "version"),
          u = r.getArg(t, "sources"),
          i = r.getArg(t, "names", []),
          a = r.getArg(t, "sourceRoot", null),
          l = r.getArg(t, "sourcesContent", null),
          s = r.getArg(t, "mappings"),
          c = r.getArg(t, "file", null);
      if (n != this._version) throw new Error("Unsupported version: " + n);
      u = u.map(String).map(r.normalize).map(function (e) {
        return a && r.isAbsolute(a) && r.isAbsolute(e) ? r.relative(a, e) : e;
      }), this._names = o.fromArray(i.map(String), !0), this._sources = o.fromArray(u, !0), this.sourceRoot = a, this.sourcesContent = l, this._mappings = s, this.file = c;
    }

    function c() {
      this.generatedLine = 0, this.generatedColumn = 0, this.source = null, this.originalLine = null, this.originalColumn = null, this.name = null;
    }

    function f(e) {
      var t = e;
      "string" == typeof e && (t = JSON.parse(e.replace(/^\)\]\}'/, "")));
      var n = r.getArg(t, "version"),
          u = r.getArg(t, "sections");
      if (n != this._version) throw new Error("Unsupported version: " + n);
      this._sources = new o(), this._names = new o();
      var i = {
        line: -1,
        column: 0
      };
      this._sections = u.map(function (e) {
        if (e.url) throw new Error("Support for url field in sections not implemented.");
        var t = r.getArg(e, "offset"),
            n = r.getArg(t, "line"),
            u = r.getArg(t, "column");
        if (n < i.line || n === i.line && u < i.column) throw new Error("Section offsets must be ordered and non-overlapping.");
        return i = t, {
          generatedOffset: {
            generatedLine: n + 1,
            generatedColumn: u + 1
          },
          consumer: new l(r.getArg(e, "map"))
        };
      });
    }

    l.fromSourceMap = function (e) {
      return s.fromSourceMap(e);
    }, l.prototype._version = 3, l.prototype.__generatedMappings = null, Object.defineProperty(l.prototype, "_generatedMappings", {
      get: function () {
        return this.__generatedMappings || this._parseMappings(this._mappings, this.sourceRoot), this.__generatedMappings;
      }
    }), l.prototype.__originalMappings = null, Object.defineProperty(l.prototype, "_originalMappings", {
      get: function () {
        return this.__originalMappings || this._parseMappings(this._mappings, this.sourceRoot), this.__originalMappings;
      }
    }), l.prototype._charIsMappingSeparator = function (e, t) {
      var n = e.charAt(t);
      return ";" === n || "," === n;
    }, l.prototype._parseMappings = function (e, t) {
      throw new Error("Subclasses must implement _parseMappings");
    }, l.GENERATED_ORDER = 1, l.ORIGINAL_ORDER = 2, l.GREATEST_LOWER_BOUND = 1, l.LEAST_UPPER_BOUND = 2, l.prototype.eachMapping = function (e, t, n) {
      var u,
          o = t || null;

      switch (n || l.GENERATED_ORDER) {
        case l.GENERATED_ORDER:
          u = this._generatedMappings;
          break;

        case l.ORIGINAL_ORDER:
          u = this._originalMappings;
          break;

        default:
          throw new Error("Unknown order of iteration.");
      }

      var i = this.sourceRoot;
      u.map(function (e) {
        var t = null === e.source ? null : this._sources.at(e.source);
        return null != t && null != i && (t = r.join(i, t)), {
          source: t,
          generatedLine: e.generatedLine,
          generatedColumn: e.generatedColumn,
          originalLine: e.originalLine,
          originalColumn: e.originalColumn,
          name: null === e.name ? null : this._names.at(e.name)
        };
      }, this).forEach(e, o);
    }, l.prototype.allGeneratedPositionsFor = function (e) {
      var t = r.getArg(e, "line"),
          n = {
        source: r.getArg(e, "source"),
        originalLine: t,
        originalColumn: r.getArg(e, "column", 0)
      };
      if (null != this.sourceRoot && (n.source = r.relative(this.sourceRoot, n.source)), !this._sources.has(n.source)) return [];
      n.source = this._sources.indexOf(n.source);

      var o = [],
          i = this._findMapping(n, this._originalMappings, "originalLine", "originalColumn", r.compareByOriginalPositions, u.LEAST_UPPER_BOUND);

      if (i >= 0) {
        var a = this._originalMappings[i];
        if (void 0 === e.column) for (var l = a.originalLine; a && a.originalLine === l;) o.push({
          line: r.getArg(a, "generatedLine", null),
          column: r.getArg(a, "generatedColumn", null),
          lastColumn: r.getArg(a, "lastGeneratedColumn", null)
        }), a = this._originalMappings[++i];else for (var s = a.originalColumn; a && a.originalLine === t && a.originalColumn == s;) o.push({
          line: r.getArg(a, "generatedLine", null),
          column: r.getArg(a, "generatedColumn", null),
          lastColumn: r.getArg(a, "lastGeneratedColumn", null)
        }), a = this._originalMappings[++i];
      }

      return o;
    }, t.SourceMapConsumer = l, s.prototype = Object.create(l.prototype), s.prototype.consumer = l, s.fromSourceMap = function (e) {
      var t = Object.create(s.prototype),
          n = t._names = o.fromArray(e._names.toArray(), !0),
          u = t._sources = o.fromArray(e._sources.toArray(), !0);
      t.sourceRoot = e._sourceRoot, t.sourcesContent = e._generateSourcesContent(t._sources.toArray(), t.sourceRoot), t.file = e._file;

      for (var i = e._mappings.toArray().slice(), l = t.__generatedMappings = [], f = t.__originalMappings = [], p = 0, d = i.length; p < d; p++) {
        var h = i[p],
            m = new c();
        m.generatedLine = h.generatedLine, m.generatedColumn = h.generatedColumn, h.source && (m.source = u.indexOf(h.source), m.originalLine = h.originalLine, m.originalColumn = h.originalColumn, h.name && (m.name = n.indexOf(h.name)), f.push(m)), l.push(m);
      }

      return a(t.__originalMappings, r.compareByOriginalPositions), t;
    }, s.prototype._version = 3, Object.defineProperty(s.prototype, "sources", {
      get: function () {
        return this._sources.toArray().map(function (e) {
          return null != this.sourceRoot ? r.join(this.sourceRoot, e) : e;
        }, this);
      }
    }), s.prototype._parseMappings = function (e, t) {
      for (var n, u, o, l, s, f = 1, p = 0, d = 0, h = 0, m = 0, g = 0, v = e.length, y = 0, D = {}, b = {}, A = [], C = []; y < v;) if (";" === e.charAt(y)) f++, y++, p = 0;else if ("," === e.charAt(y)) y++;else {
        for ((n = new c()).generatedLine = f, l = y; l < v && !this._charIsMappingSeparator(e, l); l++);

        if (o = D[u = e.slice(y, l)]) y += u.length;else {
          for (o = []; y < l;) i.decode(e, y, b), s = b.value, y = b.rest, o.push(s);

          if (2 === o.length) throw new Error("Found a source, but no line and column");
          if (3 === o.length) throw new Error("Found a source and line, but no column");
          D[u] = o;
        }
        n.generatedColumn = p + o[0], p = n.generatedColumn, o.length > 1 && (n.source = m + o[1], m += o[1], n.originalLine = d + o[2], d = n.originalLine, n.originalLine += 1, n.originalColumn = h + o[3], h = n.originalColumn, o.length > 4 && (n.name = g + o[4], g += o[4])), C.push(n), "number" == typeof n.originalLine && A.push(n);
      }

      a(C, r.compareByGeneratedPositionsDeflated), this.__generatedMappings = C, a(A, r.compareByOriginalPositions), this.__originalMappings = A;
    }, s.prototype._findMapping = function (e, t, n, r, o, i) {
      if (e[n] <= 0) throw new TypeError("Line must be greater than or equal to 1, got " + e[n]);
      if (e[r] < 0) throw new TypeError("Column must be greater than or equal to 0, got " + e[r]);
      return u.search(e, t, o, i);
    }, s.prototype.computeColumnSpans = function () {
      for (var e = 0; e < this._generatedMappings.length; ++e) {
        var t = this._generatedMappings[e];

        if (e + 1 < this._generatedMappings.length) {
          var n = this._generatedMappings[e + 1];

          if (t.generatedLine === n.generatedLine) {
            t.lastGeneratedColumn = n.generatedColumn - 1;
            continue;
          }
        }

        t.lastGeneratedColumn = 1 / 0;
      }
    }, s.prototype.originalPositionFor = function (e) {
      var t = {
        generatedLine: r.getArg(e, "line"),
        generatedColumn: r.getArg(e, "column")
      },
          n = this._findMapping(t, this._generatedMappings, "generatedLine", "generatedColumn", r.compareByGeneratedPositionsDeflated, r.getArg(e, "bias", l.GREATEST_LOWER_BOUND));

      if (n >= 0) {
        var u = this._generatedMappings[n];

        if (u.generatedLine === t.generatedLine) {
          var o = r.getArg(u, "source", null);
          null !== o && (o = this._sources.at(o), null != this.sourceRoot && (o = r.join(this.sourceRoot, o)));
          var i = r.getArg(u, "name", null);
          return null !== i && (i = this._names.at(i)), {
            source: o,
            line: r.getArg(u, "originalLine", null),
            column: r.getArg(u, "originalColumn", null),
            name: i
          };
        }
      }

      return {
        source: null,
        line: null,
        column: null,
        name: null
      };
    }, s.prototype.hasContentsOfAllSources = function () {
      return !!this.sourcesContent && this.sourcesContent.length >= this._sources.size() && !this.sourcesContent.some(function (e) {
        return null == e;
      });
    }, s.prototype.sourceContentFor = function (e, t) {
      if (!this.sourcesContent) return null;
      if (null != this.sourceRoot && (e = r.relative(this.sourceRoot, e)), this._sources.has(e)) return this.sourcesContent[this._sources.indexOf(e)];
      var n;

      if (null != this.sourceRoot && (n = r.urlParse(this.sourceRoot))) {
        var u = e.replace(/^file:\/\//, "");
        if ("file" == n.scheme && this._sources.has(u)) return this.sourcesContent[this._sources.indexOf(u)];
        if ((!n.path || "/" == n.path) && this._sources.has("/" + e)) return this.sourcesContent[this._sources.indexOf("/" + e)];
      }

      if (t) return null;
      throw new Error('"' + e + '" is not in the SourceMap.');
    }, s.prototype.generatedPositionFor = function (e) {
      var t = r.getArg(e, "source");
      if (null != this.sourceRoot && (t = r.relative(this.sourceRoot, t)), !this._sources.has(t)) return {
        line: null,
        column: null,
        lastColumn: null
      };

      var n = {
        source: t = this._sources.indexOf(t),
        originalLine: r.getArg(e, "line"),
        originalColumn: r.getArg(e, "column")
      },
          u = this._findMapping(n, this._originalMappings, "originalLine", "originalColumn", r.compareByOriginalPositions, r.getArg(e, "bias", l.GREATEST_LOWER_BOUND));

      if (u >= 0) {
        var o = this._originalMappings[u];
        if (o.source === n.source) return {
          line: r.getArg(o, "generatedLine", null),
          column: r.getArg(o, "generatedColumn", null),
          lastColumn: r.getArg(o, "lastGeneratedColumn", null)
        };
      }

      return {
        line: null,
        column: null,
        lastColumn: null
      };
    }, t.BasicSourceMapConsumer = s, f.prototype = Object.create(l.prototype), f.prototype.constructor = l, f.prototype._version = 3, Object.defineProperty(f.prototype, "sources", {
      get: function () {
        for (var e = [], t = 0; t < this._sections.length; t++) for (var n = 0; n < this._sections[t].consumer.sources.length; n++) e.push(this._sections[t].consumer.sources[n]);

        return e;
      }
    }), f.prototype.originalPositionFor = function (e) {
      var t = {
        generatedLine: r.getArg(e, "line"),
        generatedColumn: r.getArg(e, "column")
      },
          n = u.search(t, this._sections, function (e, t) {
        var n = e.generatedLine - t.generatedOffset.generatedLine;
        return n || e.generatedColumn - t.generatedOffset.generatedColumn;
      }),
          o = this._sections[n];
      return o ? o.consumer.originalPositionFor({
        line: t.generatedLine - (o.generatedOffset.generatedLine - 1),
        column: t.generatedColumn - (o.generatedOffset.generatedLine === t.generatedLine ? o.generatedOffset.generatedColumn - 1 : 0),
        bias: e.bias
      }) : {
        source: null,
        line: null,
        column: null,
        name: null
      };
    }, f.prototype.hasContentsOfAllSources = function () {
      return this._sections.every(function (e) {
        return e.consumer.hasContentsOfAllSources();
      });
    }, f.prototype.sourceContentFor = function (e, t) {
      for (var n = 0; n < this._sections.length; n++) {
        var r = this._sections[n].consumer.sourceContentFor(e, !0);

        if (r) return r;
      }

      if (t) return null;
      throw new Error('"' + e + '" is not in the SourceMap.');
    }, f.prototype.generatedPositionFor = function (e) {
      for (var t = 0; t < this._sections.length; t++) {
        var n = this._sections[t];

        if (-1 !== n.consumer.sources.indexOf(r.getArg(e, "source"))) {
          var u = n.consumer.generatedPositionFor(e);
          if (u) return {
            line: u.line + (n.generatedOffset.generatedLine - 1),
            column: u.column + (n.generatedOffset.generatedLine === u.line ? n.generatedOffset.generatedColumn - 1 : 0)
          };
        }
      }

      return {
        line: null,
        column: null
      };
    }, f.prototype._parseMappings = function (e, t) {
      this.__generatedMappings = [], this.__originalMappings = [];

      for (var n = 0; n < this._sections.length; n++) for (var u = this._sections[n], o = u.consumer._generatedMappings, i = 0; i < o.length; i++) {
        var l = o[i],
            s = u.consumer._sources.at(l.source);

        null !== u.consumer.sourceRoot && (s = r.join(u.consumer.sourceRoot, s)), this._sources.add(s), s = this._sources.indexOf(s);

        var c = u.consumer._names.at(l.name);

        this._names.add(c), c = this._names.indexOf(c);
        var f = {
          source: s,
          generatedLine: l.generatedLine + (u.generatedOffset.generatedLine - 1),
          generatedColumn: l.generatedColumn + (u.generatedOffset.generatedLine === l.generatedLine ? u.generatedOffset.generatedColumn - 1 : 0),
          originalLine: l.originalLine,
          originalColumn: l.originalColumn,
          name: c
        };
        this.__generatedMappings.push(f), "number" == typeof f.originalLine && this.__originalMappings.push(f);
      }

      a(this.__generatedMappings, r.compareByGeneratedPositionsDeflated), a(this.__originalMappings, r.compareByOriginalPositions);
    }, t.IndexedSourceMapConsumer = f;
  }, function (e, t) {
    t.GREATEST_LOWER_BOUND = 1, t.LEAST_UPPER_BOUND = 2, t.search = function (e, n, r, u) {
      if (0 === n.length) return -1;

      var o = function e(n, r, u, o, i, a) {
        var l = Math.floor((r - n) / 2) + n,
            s = i(u, o[l], !0);
        return 0 === s ? l : s > 0 ? r - l > 1 ? e(l, r, u, o, i, a) : a == t.LEAST_UPPER_BOUND ? r < o.length ? r : -1 : l : l - n > 1 ? e(n, l, u, o, i, a) : a == t.LEAST_UPPER_BOUND ? l : n < 0 ? -1 : n;
      }(-1, n.length, e, n, r, u || t.GREATEST_LOWER_BOUND);

      if (o < 0) return -1;

      for (; o - 1 >= 0 && 0 === r(n[o], n[o - 1], !0);) --o;

      return o;
    };
  }, function (e, t) {
    function n(e, t, n) {
      var r = e[t];
      e[t] = e[n], e[n] = r;
    }

    function r(e, t, u, o) {
      if (u < o) {
        var i = u - 1;
        n(e, (c = u, f = o, Math.round(c + Math.random() * (f - c))), o);

        for (var a = e[o], l = u; l < o; l++) t(e[l], a) <= 0 && n(e, i += 1, l);

        n(e, i + 1, l);
        var s = i + 1;
        r(e, t, u, s - 1), r(e, t, s + 1, o);
      }

      var c, f;
    }

    t.quickSort = function (e, t) {
      r(e, t, 0, e.length - 1);
    };
  }, function (e, t, n) {
    var r = n(4).SourceMapGenerator,
        u = n(1),
        o = /(\r?\n)/,
        i = "$$$isSourceNode$$$";

    function a(e, t, n, r, u) {
      this.children = [], this.sourceContents = {}, this.line = null == e ? null : e, this.column = null == t ? null : t, this.source = null == n ? null : n, this.name = null == u ? null : u, this[i] = !0, null != r && this.add(r);
    }

    a.fromStringWithSourceMap = function (e, t, n) {
      var r = new a(),
          i = e.split(o),
          l = function () {
        return i.shift() + (i.shift() || "");
      },
          s = 1,
          c = 0,
          f = null;

      return t.eachMapping(function (e) {
        if (null !== f) {
          if (!(s < e.generatedLine)) {
            var t = (n = i[0]).substr(0, e.generatedColumn - c);
            return i[0] = n.substr(e.generatedColumn - c), c = e.generatedColumn, p(f, t), void (f = e);
          }

          p(f, l()), s++, c = 0;
        }

        for (; s < e.generatedLine;) r.add(l()), s++;

        if (c < e.generatedColumn) {
          var n = i[0];
          r.add(n.substr(0, e.generatedColumn)), i[0] = n.substr(e.generatedColumn), c = e.generatedColumn;
        }

        f = e;
      }, this), i.length > 0 && (f && p(f, l()), r.add(i.join(""))), t.sources.forEach(function (e) {
        var o = t.sourceContentFor(e);
        null != o && (null != n && (e = u.join(n, e)), r.setSourceContent(e, o));
      }), r;

      function p(e, t) {
        if (null === e || void 0 === e.source) r.add(t);else {
          var o = n ? u.join(n, e.source) : e.source;
          r.add(new a(e.originalLine, e.originalColumn, o, t, e.name));
        }
      }
    }, a.prototype.add = function (e) {
      if (Array.isArray(e)) e.forEach(function (e) {
        this.add(e);
      }, this);else {
        if (!e[i] && "string" != typeof e) throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + e);
        e && this.children.push(e);
      }
      return this;
    }, a.prototype.prepend = function (e) {
      if (Array.isArray(e)) for (var t = e.length - 1; t >= 0; t--) this.prepend(e[t]);else {
        if (!e[i] && "string" != typeof e) throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + e);
        this.children.unshift(e);
      }
      return this;
    }, a.prototype.walk = function (e) {
      for (var t, n = 0, r = this.children.length; n < r; n++) (t = this.children[n])[i] ? t.walk(e) : "" !== t && e(t, {
        source: this.source,
        line: this.line,
        column: this.column,
        name: this.name
      });
    }, a.prototype.join = function (e) {
      var t,
          n,
          r = this.children.length;

      if (r > 0) {
        for (t = [], n = 0; n < r - 1; n++) t.push(this.children[n]), t.push(e);

        t.push(this.children[n]), this.children = t;
      }

      return this;
    }, a.prototype.replaceRight = function (e, t) {
      var n = this.children[this.children.length - 1];
      return n[i] ? n.replaceRight(e, t) : "string" == typeof n ? this.children[this.children.length - 1] = n.replace(e, t) : this.children.push("".replace(e, t)), this;
    }, a.prototype.setSourceContent = function (e, t) {
      this.sourceContents[u.toSetString(e)] = t;
    }, a.prototype.walkSourceContents = function (e) {
      for (var t = 0, n = this.children.length; t < n; t++) this.children[t][i] && this.children[t].walkSourceContents(e);

      var r = Object.keys(this.sourceContents);

      for (t = 0, n = r.length; t < n; t++) e(u.fromSetString(r[t]), this.sourceContents[r[t]]);
    }, a.prototype.toString = function () {
      var e = "";
      return this.walk(function (t) {
        e += t;
      }), e;
    }, a.prototype.toStringWithSourceMap = function (e) {
      var t = {
        code: "",
        line: 1,
        column: 0
      },
          n = new r(e),
          u = !1,
          o = null,
          i = null,
          a = null,
          l = null;
      return this.walk(function (e, r) {
        t.code += e, null !== r.source && null !== r.line && null !== r.column ? (o === r.source && i === r.line && a === r.column && l === r.name || n.addMapping({
          source: r.source,
          original: {
            line: r.line,
            column: r.column
          },
          generated: {
            line: t.line,
            column: t.column
          },
          name: r.name
        }), o = r.source, i = r.line, a = r.column, l = r.name, u = !0) : u && (n.addMapping({
          generated: {
            line: t.line,
            column: t.column
          }
        }), o = null, u = !1);

        for (var s = 0, c = e.length; s < c; s++) 10 === e.charCodeAt(s) ? (t.line++, t.column = 0, s + 1 === c ? (o = null, u = !1) : u && n.addMapping({
          source: r.source,
          original: {
            line: r.line,
            column: r.column
          },
          generated: {
            line: t.line,
            column: t.column
          },
          name: r.name
        })) : t.column++;
      }), this.walkSourceContents(function (e, t) {
        n.setSourceContent(e, t);
      }), {
        code: t.code,
        map: n
      };
    }, t.SourceNode = a;
  }, function (e, t, n) {
    "use strict";

    n.r(t);
    var r = null;

    function u(e, t) {
      null === r && (r = function (e, t) {
        if (t.error) {
          var n = t.error;
          n instanceof Error ? e(n) : e(new Error(n));
        }
      }.bind(void 0, t), e.addEventListener("error", r));
    }

    var o = null;

    function i(e, t) {
      null === o && (o = function (e, t) {
        if (null == t || null == t.reason) return e(new Error("Unknown"));
        var n = t.reason;
        return n instanceof Error ? e(n) : e(new Error(n));
      }.bind(void 0, t), e.addEventListener("unhandledrejection", o));
    }

    var a = !1,
        l = 10,
        s = 50;

    var c = [],
        f = function () {
      "undefined" != typeof console && (console.reactStack = function (e) {
        return c.push(e);
      }, console.reactStackEnd = function (e) {
        return c.pop();
      });
    },
        p = function () {
      "undefined" != typeof console && (console.reactStack = void 0, console.reactStackEnd = void 0);
    },
        d = function (e, t) {
      if ("undefined" != typeof console) {
        var n = console[e];
        "function" == typeof n && (console[e] = function () {
          try {
            var e = arguments[0];
            "string" == typeof e && c.length > 0 && t(e, c[c.length - 1]);
          } catch (e) {
            setTimeout(function () {
              throw e;
            });
          }

          return n.apply(this, arguments);
        });
      }
    };

    function h(e, t) {
      return (h = Object.setPrototypeOf || function (e, t) {
        return e.__proto__ = t, e;
      })(e, t);
    }

    function m(e, t, n) {
      return (m = function () {
        if ("undefined" == typeof Reflect || !Reflect.construct) return !1;
        if (Reflect.construct.sham) return !1;
        if ("function" == typeof Proxy) return !0;

        try {
          return Date.prototype.toString.call(Reflect.construct(Date, [], function () {})), !0;
        } catch (e) {
          return !1;
        }
      }() ? Reflect.construct : function (e, t, n) {
        var r = [null];
        r.push.apply(r, t);
        var u = new (Function.bind.apply(e, r))();
        return n && h(u, n.prototype), u;
      }).apply(null, arguments);
    }

    function g(e) {
      return function (e) {
        if (Array.isArray(e)) {
          for (var t = 0, n = new Array(e.length); t < e.length; t++) n[t] = e[t];

          return n;
        }
      }(e) || function (e) {
        if (Symbol.iterator in Object(e) || "[object Arguments]" === Object.prototype.toString.call(e)) return Array.from(e);
      }(e) || function () {
        throw new TypeError("Invalid attempt to spread non-iterable instance");
      }();
    }

    function v(e, t) {
      for (var n = 0; n < t.length; n++) {
        var r = t[n];
        r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
      }
    }

    function y(e, t, n) {
      return t && v(e.prototype, t), n && v(e, n), e;
    }

    function D(e, t) {
      if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
    }

    var b = function e(t, n) {
      var r = arguments.length > 2 && void 0 !== arguments[2] && arguments[2];
      D(this, e), this.lineNumber = t, this.content = n, this.highlight = r;
    },
        A = function () {
      function e() {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : null,
            n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : null,
            r = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : null,
            u = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : null,
            o = arguments.length > 4 && void 0 !== arguments[4] ? arguments[4] : null,
            i = arguments.length > 5 && void 0 !== arguments[5] ? arguments[5] : null,
            a = arguments.length > 6 && void 0 !== arguments[6] ? arguments[6] : null,
            l = arguments.length > 7 && void 0 !== arguments[7] ? arguments[7] : null,
            s = arguments.length > 8 && void 0 !== arguments[8] ? arguments[8] : null,
            c = arguments.length > 9 && void 0 !== arguments[9] ? arguments[9] : null;
        D(this, e), t && 0 === t.indexOf("Object.") && (t = t.slice("Object.".length)), "friendlySyntaxErrorLabel" !== t && "exports.__esModule" !== t && "<anonymous>" !== t && t || (t = null), this.functionName = t, this.fileName = n, this.lineNumber = r, this.columnNumber = u, this._originalFunctionName = i, this._originalFileName = a, this._originalLineNumber = l, this._originalColumnNumber = s, this._scriptCode = o, this._originalScriptCode = c;
      }

      return y(e, [{
        key: "getFunctionName",
        value: function () {
          return this.functionName || "(anonymous function)";
        }
      }, {
        key: "getSource",
        value: function () {
          var e = "";
          return null != this.fileName && (e += this.fileName + ":"), null != this.lineNumber && (e += this.lineNumber + ":"), null != this.columnNumber && (e += this.columnNumber + ":"), e.slice(0, -1);
        }
      }, {
        key: "toString",
        value: function () {
          var e = this.getFunctionName(),
              t = this.getSource();
          return "".concat(e).concat(t ? " (".concat(t, ")") : "");
        }
      }]), e;
    }(),
        C = /\(?(.+?)(?::(\d+))?(?::(\d+))?\)?$/;

    function E(e) {
      return C.exec(e).slice(1).map(function (e) {
        var t = Number(e);
        return isNaN(t) ? e : t;
      });
    }

    var F = /^\s*(at|in)\s.+(:\d+)/,
        w = /(^|@)\S+:\d+|.+line\s+\d+\s+>\s+(eval|Function).+/;

    function x(e) {
      return e.filter(function (e) {
        return F.test(e) || w.test(e);
      }).map(function (e) {
        if (w.test(e)) {
          var t = !1;
          / > (eval|Function)/.test(e) && (e = e.replace(/ line (\d+)(?: > eval line \d+)* > (eval|Function):\d+:\d+/g, ":$1"), t = !0);
          var n = e.split(/[@]/g),
              r = n.pop();
          return m(A, [n.join("@") || (t ? "eval" : null)].concat(g(E(r))));
        }

        -1 !== e.indexOf("(eval ") && (e = e.replace(/(\(eval at [^()]*)|(\),.*$)/g, "")), -1 !== e.indexOf("(at ") && (e = e.replace(/\(at /, "("));
        var u = e.trim().split(/\s+/g).slice(1),
            o = u.pop();
        return m(A, [u.join(" ") || null].concat(g(E(o))));
      });
    }

    function B(e) {
      if (null == e) throw new Error("You cannot pass a null object.");
      if ("string" == typeof e) return x(e.split("\n"));
      if (Array.isArray(e)) return x(e);
      if ("string" == typeof e.stack) return x(e.stack.split("\n"));
      throw new Error("The error you provided does not contain a stack trace.");
    }

    var k = n(0),
        _ = n.n(k);

    function S(e, t, n, r, u, o, i) {
      try {
        var a = e[o](i),
            l = a.value;
      } catch (e) {
        return void n(e);
      }

      a.done ? t(l) : Promise.resolve(l).then(r, u);
    }

    function T(e) {
      return function () {
        var t = this,
            n = arguments;
        return new Promise(function (r, u) {
          var o = e.apply(t, n);

          function i(e) {
            S(o, r, u, i, a, "next", e);
          }

          function a(e) {
            S(o, r, u, i, a, "throw", e);
          }

          i(void 0);
        });
      };
    }

    var O = n(3),
        P = function () {
      function e(t) {
        D(this, e), this.__source_map = t;
      }

      return y(e, [{
        key: "getOriginalPosition",
        value: function (e, t) {
          var n = this.__source_map.originalPositionFor({
            line: e,
            column: t
          });

          return {
            line: n.line,
            column: n.column,
            source: n.source
          };
        }
      }, {
        key: "getGeneratedPosition",
        value: function (e, t, n) {
          var r = this.__source_map.generatedPositionFor({
            source: e,
            line: t,
            column: n
          });

          return {
            line: r.line,
            column: r.column
          };
        }
      }, {
        key: "getSource",
        value: function (e) {
          return this.__source_map.sourceContentFor(e);
        }
      }, {
        key: "getSources",
        value: function () {
          return this.__source_map.sources;
        }
      }]), e;
    }();

    function L(e, t) {
      for (var n = /\/\/[#@] ?sourceMappingURL=([^\s'"]+)\s*$/gm, r = null;;) {
        var u = n.exec(t);
        if (null == u) break;
        r = u;
      }

      return r && r[1] ? Promise.resolve(r[1].toString()) : Promise.reject("Cannot find a source map directive for ".concat(e, "."));
    }

    function N(e, t) {
      return R.apply(this, arguments);
    }

    function R() {
      return (R = T(_.a.mark(function e(t, n) {
        var r, u, o, i, a, l;
        return _.a.wrap(function (e) {
          for (;;) switch (e.prev = e.next) {
            case 0:
              return e.next = 2, L(t, n);

            case 2:
              if (0 !== (r = e.sent).indexOf("data:")) {
                e.next = 14;
                break;
              }

              if (u = /^data:application\/json;([\w=:"-]+;)*base64,/, o = r.match(u)) {
                e.next = 8;
                break;
              }

              throw new Error("Sorry, non-base64 inline source-map encoding is not supported.");

            case 8:
              return r = r.substring(o[0].length), r = window.atob(r), r = JSON.parse(r), e.abrupt("return", new P(new O.SourceMapConsumer(r)));

            case 14:
              return i = t.lastIndexOf("/"), a = t.substring(0, i + 1) + r, e.next = 18, fetch(a).then(function (e) {
                return e.json();
              });

            case 18:
              return l = e.sent, e.abrupt("return", new P(new O.SourceMapConsumer(l)));

            case 20:
            case "end":
              return e.stop();
          }
        }, e);
      }))).apply(this, arguments);
    }

    function M(e, t, n) {
      "string" == typeof n && (n = n.split("\n"));

      for (var r = [], u = Math.max(0, e - 1 - t); u <= Math.min(n.length - 1, e - 1 + t); ++u) r.push(new b(u + 1, n[u], u === e - 1));

      return r;
    }

    var j = n(7);

    function I(e) {
      return q.apply(this, arguments);
    }

    function q() {
      return (q = T(_.a.mark(function e(t) {
        var n,
            r,
            u,
            o = arguments;
        return _.a.wrap(function (e) {
          for (;;) switch (e.prev = e.next) {
            case 0:
              return n = o.length > 1 && void 0 !== o[1] ? o[1] : 3, r = {}, u = [], t.forEach(function (e) {
                var t = e.fileName;
                null != t && -1 === u.indexOf(t) && u.push(t);
              }), e.next = 6, Object(j.settle)(u.map(function () {
                var e = T(_.a.mark(function e(t) {
                  var n, u, o;
                  return _.a.wrap(function (e) {
                    for (;;) switch (e.prev = e.next) {
                      case 0:
                        return n = 0 === t.indexOf("webpack-internal:") ? "/__get-internal-source?fileName=".concat(encodeURIComponent(t)) : t, e.next = 3, fetch(n).then(function (e) {
                          return e.text();
                        });

                      case 3:
                        return u = e.sent, e.next = 6, N(t, u);

                      case 6:
                        o = e.sent, r[t] = {
                          fileSource: u,
                          map: o
                        };

                      case 8:
                      case "end":
                        return e.stop();
                    }
                  }, e);
                }));
                return function (t) {
                  return e.apply(this, arguments);
                };
              }()));

            case 6:
              return e.abrupt("return", t.map(function (e) {
                var t = e.functionName,
                    u = e.fileName,
                    o = e.lineNumber,
                    i = e.columnNumber,
                    a = r[u] || {},
                    l = a.map,
                    s = a.fileSource;
                if (null == l || null == o) return e;
                var c = l.getOriginalPosition(o, i),
                    f = c.source,
                    p = c.line,
                    d = c.column,
                    h = null == f ? [] : l.getSource(f);
                return new A(t, u, o, i, M(o, n, s), t, f, p, d, M(p, n, h));
              }));

            case 7:
            case "end":
              return e.stop();
          }
        }, e);
      }))).apply(this, arguments);
    }

    var U = n(2),
        z = n.n(U);

    function H(e, t) {
      var n = -1,
          r = -1;

      do {
        ++n, r = t.indexOf(e, r + 1);
      } while (-1 !== r);

      return n;
    }

    function V(e, t) {
      return W.apply(this, arguments);
    }

    function W() {
      return (W = T(_.a.mark(function e(t, n) {
        var r,
            u,
            o,
            i,
            a = arguments;
        return _.a.wrap(function (e) {
          for (;;) switch (e.prev = e.next) {
            case 0:
              if (r = a.length > 2 && void 0 !== a[2] ? a[2] : 3, u = "object" == typeof t ? t.contents : null, o = "object" == typeof t ? t.uri : t, null != u) {
                e.next = 7;
                break;
              }

              return e.next = 6, fetch(o).then(function (e) {
                return e.text();
              });

            case 6:
              u = e.sent;

            case 7:
              return e.next = 9, N(o, u);

            case 9:
              return i = e.sent, e.abrupt("return", n.map(function (e) {
                var t = e.functionName,
                    n = e.lineNumber,
                    a = e.columnNumber;
                if (null != e._originalLineNumber) return e;
                var l = e.fileName;
                if (l && (l = z.a.normalize(l.replace(/[\\]+/g, "/"))), null == l) return e;
                var s = l,
                    c = i.getSources().map(function (e) {
                  return e.replace(/[\\]+/g, "/");
                }).filter(function (e) {
                  var t = (e = z.a.normalize(e)).lastIndexOf(s);
                  return -1 !== t && t === e.length - s.length;
                }).map(function (e) {
                  return {
                    token: e,
                    seps: H(z.a.sep, z.a.normalize(e)),
                    penalties: H("node_modules", e) + H("~", e)
                  };
                }).sort(function (e, t) {
                  var n = Math.sign(e.seps - t.seps);
                  return 0 !== n ? n : Math.sign(e.penalties - t.penalties);
                });
                if (c.length < 1 || null == n) return new A(null, null, null, null, null, t, s, n, a, null);
                var f = c[0].token,
                    p = i.getGeneratedPosition(f, n, a),
                    d = p.line,
                    h = p.column,
                    m = i.getSource(f);
                return new A(t, o, d, h || null, M(d, r, u || []), t, s, n, a, M(n, r, m));
              }));

            case 11:
            case "end":
              return e.stop();
          }
        }, e);
      }))).apply(this, arguments);
    }

    var G = function (e) {
      arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
      var t = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : 3,
          n = B(e);
      return (e.__unmap_source ? V(e.__unmap_source, n, t) : I(n, t)).then(function (e) {
        return 0 === e.map(function (e) {
          return e._originalFileName;
        }).filter(function (e) {
          return null != e && -1 === e.indexOf("node_modules");
        }).length ? null : e.filter(function (e) {
          var t = e.functionName;
          return null == t || -1 === t.indexOf("__stack_frame_overlay_proxy_console__");
        });
      });
    },
        $ = function (e) {
      return function (t) {
        var n = arguments.length > 1 && void 0 !== arguments[1] && arguments[1];
        G(t, n, 3).then(function (r) {
          null != r && e({
            error: t,
            unhandledRejection: n,
            contextSize: 3,
            stackFrames: r
          });
        }).catch(function (e) {
          console.log("Could not get the stack frames of error:", e);
        });
      };
    };

    function K(e) {
      var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "/static/js/bundle.js",
          n = $(e);
      return u(window, function (e) {
        return n(e, !1);
      }), i(window, function (e) {
        return n(e, !0);
      }), function () {
        var e = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : s;
        if (!a) try {
          l = Error.stackTraceLimit, Error.stackTraceLimit = e, a = !0;
        } catch (e) {}
      }(), f(), d("error", function (e, r) {
        var u = function (e, t) {
          for (var n, r, u = function (e) {
            return e.split("\n").filter(function (e) {
              return !e.match(/^\s*in/);
            }).join("\n");
          }(e), o = "", i = 0; i < t.length; ++i) {
            var a = t[i],
                l = a.fileName,
                s = a.lineNumber;

            if (null != l && null != s && !(l === n && "number" == typeof s && "number" == typeof r && Math.abs(s - r) < 3)) {
              n = l, r = s;
              var c = t[i].name;
              o += "in ".concat(c = c || "(anonymous function)", " (at ").concat(l, ":").concat(s, ")\n");
            }
          }

          return {
            message: u,
            stack: o
          };
        }(e, r);

        n({
          message: u.message,
          stack: u.stack,
          __unmap_source: t
        }, !1);
      }), function () {
        var e;
        !function () {
          if (a) try {
            Error.stackTraceLimit = l, a = !1;
          } catch (e) {}
        }(), e = window, null !== o && (e.removeEventListener("unhandledrejection", o), o = null), function (e) {
          null !== r && (e.removeEventListener("error", r), r = null);
        }(window), p();
      };
    }

    var Q = {
      position: "fixed",
      top: "0",
      left: "0",
      width: "100%",
      height: "100%",
      border: "none",
      "z-index": 2147483647
    };
    var Y = n(8),
        X = n.n(Y);
    n.d(t, "setEditorHandler", function () {
      return ie;
    }), n.d(t, "reportBuildError", function () {
      return ae;
    }), n.d(t, "reportRuntimeError", function () {
      return le;
    }), n.d(t, "dismissBuildError", function () {
      return se;
    }), n.d(t, "startReportingRuntimeErrors", function () {
      return ce;
    }), n.d(t, "dismissRuntimeErrors", function () {
      return pe;
    }), n.d(t, "stopReportingRuntimeErrors", function () {
      return de;
    });
    var J = null,
        Z = !1,
        ee = !1,
        te = null,
        ne = null,
        re = [],
        ue = null,
        oe = null;

    function ie(e) {
      te = e, J && he();
    }

    function ae(e) {
      ne = e, he();
    }

    function le(e) {
      var t = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {};
      ue = t, $(fe(t))(e);
    }

    function se() {
      ne = null, he();
    }

    function ce(e) {
      if (null !== oe) throw new Error("Already listening");
      e.launchEditorEndpoint && console.warn("Warning: `startReportingRuntimeErrors` doesn’t accept `launchEditorEndpoint` argument anymore. Use `listenToOpenInEditor` instead with your own implementation to open errors in editor "), ue = e, oe = K(fe(e), e.filename);
    }

    var fe = function (e) {
      return function (t) {
        try {
          "function" == typeof e.onError && e.onError.call(null);
        } finally {
          if (re.some(function (e) {
            return e.error === t.error;
          })) return;
          re = re.concat([t]), he();
        }
      };
    };

    function pe() {
      re = [], he();
    }

    function de() {
      if (null === oe) throw new Error("Not currently listening");
      ue = null;

      try {
        oe();
      } finally {
        oe = null;
      }
    }

    function he() {
      if (!Z) if (ee) me();else {
        Z = !0;
        var e = window.document.createElement("iframe");
        !function (e, t) {
          for (var n in e.setAttribute("style", ""), t) t.hasOwnProperty(n) && (e.style[n] = t[n]);
        }(e, Q), e.onload = function () {
          var t = e.contentDocument;

          if (null != t && null != t.body) {
            J = e;
            var n = e.contentWindow.document.createElement("script");
            n.type = "text/javascript", n.innerHTML = X.a, t.body.appendChild(n);
          }
        }, window.document.body.appendChild(e);
      }
    }

    function me() {
      if (!ue) throw new Error("Expected options to be injected.");
      if (!J) throw new Error("Iframe has not been created yet.");
      J.contentWindow.updateContent({
        currentBuildError: ne,
        currentRuntimeErrorRecords: re,
        dismissRuntimeErrors: pe,
        editorHandler: te
      }) || (window.document.body.removeChild(J), J = null, ee = !1);
    }

    window.__REACT_ERROR_OVERLAY_GLOBAL_HOOK__ = window.__REACT_ERROR_OVERLAY_GLOBAL_HOOK__ || {}, window.__REACT_ERROR_OVERLAY_GLOBAL_HOOK__.iframeReady = function () {
      ee = !0, Z = !1, me();
    },  false && false;
  }]);
});
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/react-is/cjs/react-is.development.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-is/cjs/react-is.development.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.8.6
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


if (true) {
  (function () {
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    }); // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.

    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
    var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;

    function isValidElementType(type) {
      return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
    }
    /**
     * Forked from fbjs/warning:
     * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
     *
     * Only change is we use console.warn instead of console.error,
     * and do nothing when 'console' is not supported.
     * This really simplifies the code.
     * ---
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */


    var lowPriorityWarning = function () {};

    {
      var printWarning = function (format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });

        if (typeof console !== 'undefined') {
          console.warn(message);
        }

        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };

      lowPriorityWarning = function (condition, format) {
        if (format === undefined) {
          throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
        }

        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }

          printWarning.apply(undefined, [format].concat(args));
        }
      };
    }
    var lowPriorityWarning$1 = lowPriorityWarning;

    function typeOf(object) {
      if (typeof object === 'object' && object !== null) {
        var $$typeof = object.$$typeof;

        switch ($$typeof) {
          case REACT_ELEMENT_TYPE:
            var type = object.type;

            switch (type) {
              case REACT_ASYNC_MODE_TYPE:
              case REACT_CONCURRENT_MODE_TYPE:
              case REACT_FRAGMENT_TYPE:
              case REACT_PROFILER_TYPE:
              case REACT_STRICT_MODE_TYPE:
              case REACT_SUSPENSE_TYPE:
                return type;

              default:
                var $$typeofType = type && type.$$typeof;

                switch ($$typeofType) {
                  case REACT_CONTEXT_TYPE:
                  case REACT_FORWARD_REF_TYPE:
                  case REACT_PROVIDER_TYPE:
                    return $$typeofType;

                  default:
                    return $$typeof;
                }

            }

          case REACT_LAZY_TYPE:
          case REACT_MEMO_TYPE:
          case REACT_PORTAL_TYPE:
            return $$typeof;
        }
      }

      return undefined;
    } // AsyncMode is deprecated along with isAsyncMode


    var AsyncMode = REACT_ASYNC_MODE_TYPE;
    var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
    var ContextConsumer = REACT_CONTEXT_TYPE;
    var ContextProvider = REACT_PROVIDER_TYPE;
    var Element = REACT_ELEMENT_TYPE;
    var ForwardRef = REACT_FORWARD_REF_TYPE;
    var Fragment = REACT_FRAGMENT_TYPE;
    var Lazy = REACT_LAZY_TYPE;
    var Memo = REACT_MEMO_TYPE;
    var Portal = REACT_PORTAL_TYPE;
    var Profiler = REACT_PROFILER_TYPE;
    var StrictMode = REACT_STRICT_MODE_TYPE;
    var Suspense = REACT_SUSPENSE_TYPE;
    var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

    function isAsyncMode(object) {
      {
        if (!hasWarnedAboutDeprecatedIsAsyncMode) {
          hasWarnedAboutDeprecatedIsAsyncMode = true;
          lowPriorityWarning$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
        }
      }
      return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
    }

    function isConcurrentMode(object) {
      return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
    }

    function isContextConsumer(object) {
      return typeOf(object) === REACT_CONTEXT_TYPE;
    }

    function isContextProvider(object) {
      return typeOf(object) === REACT_PROVIDER_TYPE;
    }

    function isElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }

    function isForwardRef(object) {
      return typeOf(object) === REACT_FORWARD_REF_TYPE;
    }

    function isFragment(object) {
      return typeOf(object) === REACT_FRAGMENT_TYPE;
    }

    function isLazy(object) {
      return typeOf(object) === REACT_LAZY_TYPE;
    }

    function isMemo(object) {
      return typeOf(object) === REACT_MEMO_TYPE;
    }

    function isPortal(object) {
      return typeOf(object) === REACT_PORTAL_TYPE;
    }

    function isProfiler(object) {
      return typeOf(object) === REACT_PROFILER_TYPE;
    }

    function isStrictMode(object) {
      return typeOf(object) === REACT_STRICT_MODE_TYPE;
    }

    function isSuspense(object) {
      return typeOf(object) === REACT_SUSPENSE_TYPE;
    }

    exports.typeOf = typeOf;
    exports.AsyncMode = AsyncMode;
    exports.ConcurrentMode = ConcurrentMode;
    exports.ContextConsumer = ContextConsumer;
    exports.ContextProvider = ContextProvider;
    exports.Element = Element;
    exports.ForwardRef = ForwardRef;
    exports.Fragment = Fragment;
    exports.Lazy = Lazy;
    exports.Memo = Memo;
    exports.Portal = Portal;
    exports.Profiler = Profiler;
    exports.StrictMode = StrictMode;
    exports.Suspense = Suspense;
    exports.isValidElementType = isValidElementType;
    exports.isAsyncMode = isAsyncMode;
    exports.isConcurrentMode = isConcurrentMode;
    exports.isContextConsumer = isContextConsumer;
    exports.isContextProvider = isContextProvider;
    exports.isElement = isElement;
    exports.isForwardRef = isForwardRef;
    exports.isFragment = isFragment;
    exports.isLazy = isLazy;
    exports.isMemo = isMemo;
    exports.isPortal = isPortal;
    exports.isProfiler = isProfiler;
    exports.isStrictMode = isStrictMode;
    exports.isSuspense = isSuspense;
  })();
}

/***/ }),

/***/ "./node_modules/react-is/index.js":
/*!****************************************!*\
  !*** ./node_modules/react-is/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react-is.development.js */ "./node_modules/react-is/cjs/react-is.development.js");
}

/***/ }),

/***/ "./node_modules/react-redux-firebase/es/actions/auth.js":
/*!**************************************************************!*\
  !*** ./node_modules/react-redux-firebase/es/actions/auth.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.signInWithPhoneNumber = exports.linkWithCredential = exports.reloadAuth = exports.updateEmail = exports.updateAuth = exports.updateProfile = exports.verifyPasswordResetCode = exports.confirmPasswordReset = exports.resetPassword = exports.createUser = exports.logout = exports.login = exports.init = exports.handleRedirectResult = exports.createUserProfile = exports.watchUserProfile = exports.handleProfileWatchResponse = exports.unWatchUserProfile = undefined;

var _pick2 = __webpack_require__(/*! lodash/pick */ "./node_modules/lodash/pick.js");

var _pick3 = _interopRequireDefault(_pick2);

var _omit2 = __webpack_require__(/*! lodash/omit */ "./node_modules/lodash/omit.js");

var _omit3 = _interopRequireDefault(_omit2);

var _forEach2 = __webpack_require__(/*! lodash/forEach */ "./node_modules/lodash/forEach.js");

var _forEach3 = _interopRequireDefault(_forEach2);

var _isFunction2 = __webpack_require__(/*! lodash/isFunction */ "./node_modules/lodash/isFunction.js");

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _isString2 = __webpack_require__(/*! lodash/isString */ "./node_modules/lodash/isString.js");

var _isString3 = _interopRequireDefault(_isString2);

var _isArray2 = __webpack_require__(/*! lodash/isArray */ "./node_modules/lodash/isArray.js");

var _isArray3 = _interopRequireDefault(_isArray2);

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var _constants = __webpack_require__(/*! ../constants */ "./node_modules/react-redux-firebase/es/constants.js");

var _helpers = __webpack_require__(/*! ../helpers */ "./node_modules/react-redux-firebase/es/helpers.js");

var _auth = __webpack_require__(/*! ../utils/auth */ "./node_modules/react-redux-firebase/es/utils/auth.js");

var _populate = __webpack_require__(/*! ../utils/populate */ "./node_modules/react-redux-firebase/es/utils/populate.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  } else {
    return Array.from(arr);
  }
}

var dispatchLoginError = function dispatchLoginError(dispatch, authError) {
  return dispatch({
    type: _constants.actionTypes.LOGIN_ERROR,
    authError: authError
  });
};

var unWatchUserProfile = exports.unWatchUserProfile = function unWatchUserProfile(firebase) {
  var _firebase$_ = firebase._,
      authUid = _firebase$_.authUid,
      _firebase$_$config = _firebase$_.config,
      userProfile = _firebase$_$config.userProfile,
      useFirestoreForProfile = _firebase$_$config.useFirestoreForProfile;

  if (firebase._.profileWatch) {
    if (useFirestoreForProfile && firebase.firestore) {
      firebase._.profileWatch();
    } else {
      firebase.database().ref().child(userProfile + '/' + authUid).off('value', firebase._.profileWatch);
    }

    firebase._.profileWatch = null;
  }
};

var getProfileFromSnap = function getProfileFromSnap(snap) {
  if (snap && snap.val) {
    return snap.val();
  }

  if (snap && snap.data && snap.exists) {
    return snap.data();
  }

  return null;
};

var handleProfileWatchResponse = exports.handleProfileWatchResponse = function handleProfileWatchResponse(dispatch, firebase, userProfileSnap) {
  var _firebase$_$config2 = firebase._.config,
      profileParamsToPopulate = _firebase$_$config2.profileParamsToPopulate,
      autoPopulateProfile = _firebase$_$config2.autoPopulateProfile,
      useFirestoreForProfile = _firebase$_$config2.useFirestoreForProfile,
      logErrors = _firebase$_$config2.logErrors;
  var profile = getProfileFromSnap(userProfileSnap);

  if (!profileParamsToPopulate || useFirestoreForProfile || !(0, _isArray3.default)(profileParamsToPopulate) && !(0, _isString3.default)(profileParamsToPopulate)) {
    if (useFirestoreForProfile && profileParamsToPopulate) {
      console.warn('Profile population is not yet supported for Firestore');
    }

    dispatch({
      type: _constants.actionTypes.SET_PROFILE,
      profile: profile
    });
  } else {
    (0, _populate.promisesForPopulate)(firebase, userProfileSnap.key, profile, profileParamsToPopulate).then(function (data) {
      (0, _forEach3.default)(data, function (result, path) {
        dispatch({
          type: _constants.actionTypes.SET,
          path: path,
          data: result,
          timestamp: Date.now(),
          requesting: false,
          requested: true
        });
      });

      if (!autoPopulateProfile) {
        dispatch({
          type: _constants.actionTypes.SET_PROFILE,
          profile: profile
        });
      } else {
        var populates = (0, _populate.getPopulateObjs)(profileParamsToPopulate);

        var _profile = userProfileSnap.val();

        dispatch({
          type: _constants.actionTypes.SET_PROFILE,
          profile: (0, _helpers.populate)({
            profile: _profile,
            data: data
          }, 'profile', populates)
        });
      }
    }).catch(function (err) {
      if (logErrors) {
        console.error('RRF: Error retrieving data for profile population. Firebase:', err);
      }

      dispatch({
        type: _constants.actionTypes.UNAUTHORIZED_ERROR,
        authError: 'Error during profile population: ' + err.message
      });
      dispatch({
        type: _constants.actionTypes.SET_PROFILE,
        profile: profile
      });
    });
  }
};

function createProfileWatchErrorHandler(dispatch, firebase) {
  var _firebase$_$config3 = firebase._.config,
      onProfileListenerError = _firebase$_$config3.onProfileListenerError,
      logErrors = _firebase$_$config3.logErrors;
  return function handleProfileError(err) {
    if (logErrors) {
      console.error('Error with profile listener: ' + (err.message || ''), err);
    }

    if ((0, _isFunction3.default)(onProfileListenerError)) {
      var factoryResult = onProfileListenerError(err, firebase);

      if ((0, _isFunction3.default)(factoryResult.then)) {
        return factoryResult;
      }
    }

    return Promise.reject(err);
  };
}

var watchUserProfile = exports.watchUserProfile = function watchUserProfile(dispatch, firebase) {
  var _firebase$_2 = firebase._,
      authUid = _firebase$_2.authUid,
      _firebase$_2$config = _firebase$_2.config,
      userProfile = _firebase$_2$config.userProfile,
      useFirestoreForProfile = _firebase$_2$config.useFirestoreForProfile;
  unWatchUserProfile(firebase);

  if (userProfile) {
    if (useFirestoreForProfile && firebase.firestore) {
      firebase._.profileWatch = firebase.firestore().collection(userProfile).doc(authUid).onSnapshot(function (userProfileSnap) {
        return handleProfileWatchResponse(dispatch, firebase, userProfileSnap);
      }, createProfileWatchErrorHandler(dispatch, firebase));
    } else if (firebase.database) {
      firebase._.profileWatch = firebase.database().ref().child(userProfile + '/' + authUid).on('value', function (userProfileSnap) {
        return handleProfileWatchResponse(dispatch, firebase, userProfileSnap);
      }, createProfileWatchErrorHandler(dispatch, firebase));
    } else {
      throw new Error('Real Time Database or Firestore must be included to enable user profile');
    }
  }
};

var createUserProfile = exports.createUserProfile = function createUserProfile(dispatch, firebase, userData, profile) {
  var config = firebase._.config;

  if (!config.userProfile || !firebase.database && !firebase.firestore) {
    return Promise.resolve(userData);
  }

  if ((0, _isFunction3.default)(config.profileFactory)) {
    try {
      profile = config.profileFactory(userData, profile);
    } catch (err) {
      console.error('Error occured within profileFactory function:', err.message || err);
      return Promise.reject(err);
    }
  }

  if (config.useFirestoreForProfile) {
    return firebase.firestore().collection(config.userProfile).doc(userData.uid || userData.user.uid).get().then(function (profileSnap) {
      if (!config.updateProfileOnLogin && profileSnap.exists) {
        return profileSnap.data();
      }

      var newProfile = profile;

      if (!newProfile) {
        var userDataObject = userData.uid ? userData.toJSON ? userData.toJSON() : userData : userData.user.toJSON ? userData.user.toJSON() : userData.user;
        newProfile = _extends({}, (0, _omit3.default)(userDataObject, config.keysToRemoveFromAuth), {
          avatarUrl: userDataObject.photoURL
        });
      }

      if ((0, _isArray3.default)(newProfile.providerData)) {
        newProfile.providerData = newProfile.providerData.map(function (providerDataItem) {
          return (0, _pick3.default)(providerDataItem, config.keysToPreserveFromProviderData);
        });
      }

      return profileSnap.ref.set(newProfile, {
        merge: true
      }).then(function () {
        return newProfile;
      });
    }).catch(function (err) {
      dispatch({
        type: _constants.actionTypes.UNAUTHORIZED_ERROR,
        authError: err
      });
      return Promise.reject(err);
    });
  }

  return firebase.database().ref().child(config.userProfile + '/' + (userData.user ? userData.user.uid : userData.uid)).once('value').then(function (profileSnap) {
    return !config.updateProfileOnLogin && profileSnap.val() !== null ? profileSnap.val() : profileSnap.ref.update(profile).then(function () {
      return profile;
    });
  }).catch(function (err) {
    dispatch({
      type: _constants.actionTypes.UNAUTHORIZED_ERROR,
      authError: err
    });

    if ((0, _isFunction3.default)(config.onProfileWriteError)) {
      config.onProfileWriteError(err, firebase);
    }

    return Promise.reject(err);
  });
};

var handleAuthStateChange = function handleAuthStateChange(dispatch, firebase, authData) {
  var config = firebase._.config;

  if (!authData) {
    if ((0, _isFunction3.default)(config.onAuthStateChanged)) {
      firebase._.config.onAuthStateChanged(authData, firebase, dispatch);
    }

    dispatch({
      type: _constants.actionTypes.AUTH_EMPTY_CHANGE,
      preserve: config.preserveOnEmptyAuthChange
    });
  } else {
    firebase._.authUid = authData.uid;

    if (config.presence) {
      (0, _auth.setupPresence)(dispatch, firebase);
    }

    dispatch({
      type: _constants.actionTypes.LOGIN,
      auth: authData,
      preserve: config.preserveOnLogin
    });
    watchUserProfile(dispatch, firebase);

    if ((0, _isFunction3.default)(config.onAuthStateChanged)) {
      config.onAuthStateChanged(authData, firebase, dispatch);
    }
  }
};

var handleRedirectResult = exports.handleRedirectResult = function handleRedirectResult(dispatch, firebase, authData) {
  if (typeof firebase._.config.onRedirectResult === 'function') {
    firebase._.config.onRedirectResult(authData, firebase, dispatch);
  }

  if (authData && authData.user) {
    var user = authData.user;
    firebase._.authUid = user.uid;
    watchUserProfile(dispatch, firebase);
    dispatch({
      type: _constants.actionTypes.LOGIN,
      auth: user,
      preserve: firebase._.config.preserveOnLogin
    });
    return createUserProfile(dispatch, firebase, user, {
      email: user.email,
      displayName: user.providerData[0].displayName || user.email,
      avatarUrl: user.providerData[0].photoURL,
      providerData: user.providerData
    });
  }
};

var init = exports.init = function init(dispatch, firebase) {
  if (!firebase.auth) {
    return;
  }

  dispatch({
    type: _constants.actionTypes.AUTHENTICATION_INIT_STARTED
  });
  firebase.auth().onAuthStateChanged(function (authData) {
    return handleAuthStateChange(dispatch, firebase, authData);
  });

  if (firebase._.config.enableRedirectHandling && (0, _isFunction3.default)(firebase.auth().getRedirectResult) && typeof window !== 'undefined' && window.location && window.location.protocol && window.location.protocol.indexOf('http') !== -1) {
    firebase.auth().getRedirectResult().then(function (authData) {
      return handleRedirectResult(dispatch, firebase, authData);
    }).catch(function (error) {
      dispatchLoginError(dispatch, error);
      return Promise.reject(error);
    });
  }

  firebase.auth().currentUser;
  dispatch({
    type: _constants.actionTypes.AUTHENTICATION_INIT_FINISHED
  });
};

var login = exports.login = function login(dispatch, firebase, credentials) {
  var _firebase$auth;

  if (firebase._.config.resetBeforeLogin) {
    dispatchLoginError(dispatch, null);
  }

  var _getLoginMethodAndPar = (0, _auth.getLoginMethodAndParams)(firebase, credentials),
      method = _getLoginMethodAndPar.method,
      params = _getLoginMethodAndPar.params;

  return (_firebase$auth = firebase.auth())[method].apply(_firebase$auth, _toConsumableArray(params)).then(function (userData) {
    if (!userData) return Promise.resolve(null);

    if (['signInWithEmailAndPassword', 'signInAndRetrieveDataWithEmailAndPassword'].includes(method)) {
      return {
        user: userData
      };
    }

    if (['signInWithCustomToken', 'signInAndRetrieveDataWithCustomToken'].includes(method)) {
      if (!firebase._.config.updateProfileOnLogin) {
        return {
          user: userData
        };
      }

      return createUserProfile(dispatch, firebase, userData, credentials.profile);
    }

    if (method === 'signInWithPhoneNumber') {
      return _extends({}, userData, {
        confirm: function confirm(code) {
          return userData.confirm(code).then(function (_ref) {
            var user = _ref.user,
                additionalUserInfo = _ref.additionalUserInfo;
            return createUserProfile(dispatch, firebase, user, {
              phoneNumber: user.providerData[0].phoneNumber,
              providerData: user.providerData
            }).then(function (profile) {
              return {
                profile: profile,
                user: user,
                additionalUserInfo: additionalUserInfo
              };
            });
          });
        }
      });
    }

    var user = userData.user || userData;
    return createUserProfile(dispatch, firebase, user, credentials.profile || {
      email: user.email,
      displayName: user.providerData[0].displayName || user.email,
      avatarUrl: user.providerData[0].photoURL,
      providerData: user.providerData
    }).then(function (profile) {
      return _extends({
        profile: profile
      }, userData);
    });
  }).catch(function (err) {
    dispatchLoginError(dispatch, err);
    return Promise.reject(err);
  });
};

var logout = exports.logout = function logout(dispatch, firebase) {
  unWatchUserProfile(firebase);
  return firebase.auth().signOut().then(function () {
    var action = {
      type: _constants.actionTypes.LOGOUT
    };

    if (firebase._.config.preserveOnLogout) {
      action.preserve = firebase._.config.preserveOnLogout;
    }

    dispatch(action);
    firebase._.authUid = null;
    return firebase;
  });
};

var createUser = exports.createUser = function createUser(dispatch, firebase, _ref2, profile) {
  var email = _ref2.email,
      password = _ref2.password,
      signIn = _ref2.signIn;
  dispatchLoginError(dispatch, null);

  if (!email || !password) {
    var error = new Error('Email and Password are required to create user');
    dispatchLoginError(dispatch, error);
    return Promise.reject(error);
  }

  return firebase.auth().createUserWithEmailAndPassword(email, password).then(function (userData) {
    return firebase.auth().currentUser || !!signIn && signIn === false ? createUserProfile(dispatch, firebase, userData, profile || {
      email: email
    }) : login(dispatch, firebase, {
      email: email,
      password: password
    }).then(function () {
      return createUserProfile(dispatch, firebase, userData, profile || {
        email: email
      });
    }).catch(function (err) {
      if (err) {
        switch (err.code) {
          case 'auth/user-not-found':
            dispatchLoginError(dispatch, new Error('The specified user account does not exist.'));
            break;

          default:
            dispatchLoginError(dispatch, err);
        }
      }

      return Promise.reject(err);
    });
  }).catch(function (err) {
    dispatchLoginError(dispatch, err);
    return Promise.reject(err);
  });
};

var resetPassword = exports.resetPassword = function resetPassword(dispatch, firebase, email) {
  dispatchLoginError(dispatch, null);
  return firebase.auth().sendPasswordResetEmail(email).catch(function (err) {
    if (err) {
      switch (err.code) {
        case 'auth/user-not-found':
          dispatchLoginError(dispatch, new Error('The specified user account does not exist.'));
          break;

        default:
          dispatchLoginError(dispatch, err);
      }

      return Promise.reject(err);
    }
  });
};

var confirmPasswordReset = exports.confirmPasswordReset = function confirmPasswordReset(dispatch, firebase, code, password) {
  dispatchLoginError(dispatch, null);
  return firebase.auth().confirmPasswordReset(code, password).catch(function (err) {
    if (err) {
      switch (err.code) {
        case 'auth/expired-action-code':
          dispatchLoginError(dispatch, new Error('The action code has expired.'));
          break;

        case 'auth/invalid-action-code':
          dispatchLoginError(dispatch, new Error('The action code is invalid.'));
          break;

        case 'auth/user-disabled':
          dispatchLoginError(dispatch, new Error('The user is disabled.'));
          break;

        case 'auth/user-not-found':
          dispatchLoginError(dispatch, new Error('The user is not found.'));
          break;

        case 'auth/weak-password':
          dispatchLoginError(dispatch, new Error('The password is not strong enough.'));
          break;

        default:
          dispatchLoginError(dispatch, err);
      }

      return Promise.reject(err);
    }
  });
};

var verifyPasswordResetCode = exports.verifyPasswordResetCode = function verifyPasswordResetCode(dispatch, firebase, code) {
  dispatchLoginError(dispatch, null);
  return firebase.auth().verifyPasswordResetCode(code).catch(function (err) {
    if (err) {
      dispatchLoginError(dispatch, err);
    }

    return Promise.reject(err);
  });
};

var updateProfile = exports.updateProfile = function updateProfile(dispatch, firebase, profileUpdate) {
  var config = firebase._.config;
  dispatch({
    type: _constants.actionTypes.PROFILE_UPDATE_START,
    payload: profileUpdate
  });
  var updatePromise = config.useFirestoreForProfile ? _auth.updateProfileOnFirestore : _auth.updateProfileOnRTDB;
  return updatePromise(firebase, profileUpdate).then(function (snap) {
    dispatch({
      type: _constants.actionTypes.PROFILE_UPDATE_SUCCESS,
      payload: config.useFirestoreForProfile ? snap.data() : snap.val()
    });
    return snap;
  }).catch(function (error) {
    dispatch({
      type: _constants.actionTypes.PROFILE_UPDATE_ERROR,
      error: error
    });
    return Promise.reject(error);
  });
};

var updateAuth = exports.updateAuth = function updateAuth(dispatch, firebase, authUpdate, updateInProfile) {
  dispatch({
    type: _constants.actionTypes.AUTH_UPDATE_START,
    payload: authUpdate
  });

  if (!firebase.auth().currentUser) {
    var error = new Error('User must be logged in to update auth.');
    dispatch({
      type: _constants.actionTypes.AUTH_UPDATE_ERROR,
      payload: error
    });
    return Promise.reject(error);
  }

  return firebase.auth().currentUser.updateProfile(authUpdate).then(function (payload) {
    dispatch({
      type: _constants.actionTypes.AUTH_UPDATE_SUCCESS,
      auth: firebase.auth().currentUser
    });

    if (updateInProfile) {
      return updateProfile(dispatch, firebase, authUpdate);
    }

    return payload;
  }).catch(function (error) {
    dispatch({
      type: _constants.actionTypes.AUTH_UPDATE_ERROR,
      error: error
    });
    return Promise.reject(error);
  });
};

var updateEmail = exports.updateEmail = function updateEmail(dispatch, firebase, newEmail, updateInProfile) {
  dispatch({
    type: _constants.actionTypes.EMAIL_UPDATE_START,
    payload: newEmail
  });

  if (!firebase.auth().currentUser) {
    var error = new Error('User must be logged in to update email.');
    dispatch({
      type: _constants.actionTypes.EMAIL_UPDATE_ERROR,
      error: error
    });
    return Promise.reject(error);
  }

  return firebase.auth().currentUser.updateEmail(newEmail).then(function (payload) {
    dispatch({
      type: _constants.actionTypes.EMAIL_UPDATE_SUCCESS,
      payload: newEmail
    });

    if (updateInProfile) {
      return updateProfile(dispatch, firebase, {
        email: newEmail
      });
    }

    return payload;
  }).catch(function (error) {
    dispatch({
      type: _constants.actionTypes.EMAIL_UPDATE_ERROR,
      error: error
    });
    return Promise.reject(error);
  });
};

var reloadAuth = exports.reloadAuth = function reloadAuth(dispatch, firebase) {
  dispatch({
    type: _constants.actionTypes.AUTH_RELOAD_START
  });

  if (!firebase.auth().currentUser) {
    var error = new Error('User must be logged in to reload auth.');
    dispatch({
      type: _constants.actionTypes.AUTH_RELOAD_ERROR,
      error: error
    });
    return Promise.reject(error);
  }

  return firebase.auth().currentUser.reload().then(function () {
    var auth = firebase.auth().currentUser;
    dispatch({
      type: _constants.actionTypes.AUTH_RELOAD_SUCCESS,
      payload: auth
    });
    return auth;
  }).catch(function (error) {
    dispatch({
      type: _constants.actionTypes.AUTH_RELOAD_ERROR,
      error: error
    });
    return Promise.reject(error);
  });
};

var linkWithCredential = exports.linkWithCredential = function linkWithCredential(dispatch, firebase, credential) {
  dispatch({
    type: _constants.actionTypes.AUTH_LINK_START
  });

  if (!firebase.auth().currentUser) {
    var error = new Error('User must be logged in to link with credential.');
    dispatch({
      type: _constants.actionTypes.AUTH_LINK_ERROR,
      error: error
    });
    return Promise.reject(error);
  }

  return firebase.auth().currentUser.linkWithCredential(credential).then(function (auth) {
    dispatch({
      type: _constants.actionTypes.AUTH_LINK_SUCCESS,
      payload: auth
    });
    return auth;
  }).catch(function (error) {
    dispatch({
      type: _constants.actionTypes.AUTH_LINK_ERROR,
      error: error
    });
    return Promise.reject(error);
  });
};

var signInWithPhoneNumber = exports.signInWithPhoneNumber = function signInWithPhoneNumber(firebase, dispatch, phoneNumber, applicationVerifier) {
  var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
  return login(dispatch, firebase, _extends({
    phoneNumber: phoneNumber,
    applicationVerifier: applicationVerifier
  }, options));
};

exports.default = {
  dispatchLoginError: dispatchLoginError,
  unWatchUserProfile: unWatchUserProfile,
  watchUserProfile: watchUserProfile,
  init: init,
  createUserProfile: createUserProfile,
  login: login,
  logout: logout,
  createUser: createUser,
  resetPassword: resetPassword,
  confirmPasswordReset: confirmPasswordReset,
  verifyPasswordResetCode: verifyPasswordResetCode,
  updateAuth: updateAuth,
  updateProfile: updateProfile,
  updateEmail: updateEmail,
  reloadAuth: reloadAuth,
  signInWithPhoneNumber: signInWithPhoneNumber
};

/***/ }),

/***/ "./node_modules/react-redux-firebase/es/actions/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/react-redux-firebase/es/actions/index.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.storageActions = exports.queryActions = exports.authActions = undefined;

var _auth = __webpack_require__(/*! ./auth */ "./node_modules/react-redux-firebase/es/actions/auth.js");

var authActions = _interopRequireWildcard(_auth);

var _query = __webpack_require__(/*! ./query */ "./node_modules/react-redux-firebase/es/actions/query.js");

var queryActions = _interopRequireWildcard(_query);

var _storage = __webpack_require__(/*! ./storage */ "./node_modules/react-redux-firebase/es/actions/storage.js");

var storageActions = _interopRequireWildcard(_storage);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }

    newObj.default = obj;
    return newObj;
  }
}

exports.authActions = authActions;
exports.queryActions = queryActions;
exports.storageActions = storageActions;
exports.default = {
  authActions: authActions,
  queryActions: queryActions,
  storageActions: storageActions
};

/***/ }),

/***/ "./node_modules/react-redux-firebase/es/actions/query.js":
/*!***************************************************************!*\
  !*** ./node_modules/react-redux-firebase/es/actions/query.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.remove = exports.unWatchEvents = exports.watchEvents = exports.unWatchEvent = exports.watchEvent = undefined;

var _isArray2 = __webpack_require__(/*! lodash/isArray */ "./node_modules/lodash/isArray.js");

var _isArray3 = _interopRequireDefault(_isArray2);

var _constants = __webpack_require__(/*! ../constants */ "./node_modules/react-redux-firebase/es/constants.js");

var _query = __webpack_require__(/*! ../utils/query */ "./node_modules/react-redux-firebase/es/utils/query.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var watchEvent = exports.watchEvent = function watchEvent(firebase, dispatch, options) {
  if (!firebase.database || typeof firebase.database !== 'function') {
    throw new Error('Firebase database is required to create watchers');
  }

  var type = options.type,
      path = options.path,
      populates = options.populates,
      queryParams = options.queryParams,
      queryId = options.queryId,
      isQuery = options.isQuery,
      storeAs = options.storeAs;
  var logErrors = firebase._.config.logErrors;
  var watchPath = !storeAs ? path : path + '@' + storeAs;
  var id = queryId || (0, _query.getQueryIdFromPath)(path);
  var counter = (0, _query.getWatcherCount)(firebase, type, watchPath, id);

  if (counter > 0) {
    if (id) {
      (0, _query.unsetWatcher)(firebase, dispatch, type, path, id);
    }
  }

  (0, _query.setWatcher)(firebase, dispatch, type, watchPath, id);

  if (type === 'first_child') {
    return firebase.database().ref().child(path).orderByKey().limitToFirst(1).once('value').then(function (snapshot) {
      if (snapshot.val() === null) {
        dispatch({
          type: _constants.actionTypes.NO_VALUE,
          path: storeAs || path
        });
      }

      return snapshot;
    }).catch(function (err) {
      dispatch({
        type: _constants.actionTypes.ERROR,
        path: storeAs || path,
        payload: err
      });
      return Promise.reject(err);
    });
  }

  var query = firebase.database().ref().child(path);

  if (isQuery) {
    query = (0, _query.applyParamsToQuery)(queryParams, query);
  }

  dispatch({
    type: _constants.actionTypes.START,
    path: storeAs || path
  });

  if (type === 'once') {
    return query.once('value').then(function (snapshot) {
      if (snapshot.val() === null) {
        return dispatch({
          type: _constants.actionTypes.NO_VALUE,
          path: storeAs || path
        });
      }

      if (!populates) {
        return dispatch({
          type: _constants.actionTypes.SET,
          path: storeAs || path,
          data: snapshot.val(),
          ordered: (0, _query.orderedFromSnapshot)(snapshot)
        });
      }

      return (0, _query.populateAndDispatch)(firebase, dispatch, {
        path: path,
        storeAs: storeAs,
        snapshot: snapshot,
        data: snapshot.val(),
        populates: populates
      });
    }).catch(function (err) {
      dispatch({
        type: _constants.actionTypes.UNAUTHORIZED_ERROR,
        payload: err
      });
      return Promise.reject(err);
    });
  }

  query.on(type, function (snapshot) {
    var data = type === 'child_removed' ? undefined : snapshot.val();
    var resultPath = storeAs || type === 'value' ? path : path + '/' + snapshot.key;

    if (!populates) {
      var ordered = type === 'child_added' ? [{
        key: snapshot.key,
        value: snapshot.val()
      }] : (0, _query.orderedFromSnapshot)(snapshot);
      return dispatch({
        type: _constants.actionTypes.SET,
        path: storeAs || resultPath,
        data: data,
        ordered: ordered
      });
    }

    return (0, _query.populateAndDispatch)(firebase, dispatch, {
      path: path,
      storeAs: storeAs,
      snapshot: snapshot,
      data: snapshot.val(),
      populates: populates
    });
  }, function (err) {
    if (logErrors) {
      console.log('RRF: Error retrieving data for path: ' + path + ', storeAs: ' + storeAs + '. Firebase:', err);
    }

    dispatch({
      type: _constants.actionTypes.ERROR,
      storeAs: storeAs,
      path: path,
      payload: err
    });
  });
};

var unWatchEvent = exports.unWatchEvent = function unWatchEvent(firebase, dispatch, _ref) {
  var type = _ref.type,
      path = _ref.path,
      storeAs = _ref.storeAs,
      queryId = _ref.queryId;
  var watchPath = !storeAs ? path : path + '@' + storeAs;
  (0, _query.unsetWatcher)(firebase, dispatch, type, watchPath, queryId);
};

var watchEvents = exports.watchEvents = function watchEvents(firebase, dispatch, events) {
  if (!(0, _isArray3.default)(events)) {
    throw new Error('Events config must be an Array');
  }

  return events.map(function (event) {
    return watchEvent(firebase, dispatch, event);
  });
};

var unWatchEvents = exports.unWatchEvents = function unWatchEvents(firebase, dispatch, events) {
  return events.forEach(function (event) {
    return unWatchEvent(firebase, dispatch, event);
  });
};

var remove = exports.remove = function remove(firebase, dispatch, path) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var _options$dispatchActi = options.dispatchAction,
      dispatchAction = _options$dispatchActi === undefined ? true : _options$dispatchActi;
  var dispatchRemoveAction = firebase._.config.dispatchRemoveAction;
  return firebase.database().ref(path).remove().then(function () {
    if (dispatchRemoveAction && dispatchAction) {
      dispatch({
        type: _constants.actionTypes.REMOVE,
        path: path
      });
    }

    return path;
  }).catch(function (err) {
    dispatch({
      type: _constants.actionTypes.ERROR,
      payload: err
    });
    return Promise.reject(err);
  });
};

exports.default = {
  watchEvents: watchEvents,
  unWatchEvents: unWatchEvents,
  remove: remove
};

/***/ }),

/***/ "./node_modules/react-redux-firebase/es/actions/storage.js":
/*!*****************************************************************!*\
  !*** ./node_modules/react-redux-firebase/es/actions/storage.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteFile = exports.uploadFiles = exports.uploadFile = undefined;

var _isFunction2 = __webpack_require__(/*! lodash/isFunction */ "./node_modules/lodash/isFunction.js");

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _map2 = __webpack_require__(/*! lodash/map */ "./node_modules/lodash/map.js");

var _map3 = _interopRequireDefault(_map2);

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var _constants = __webpack_require__(/*! ../constants */ "./node_modules/react-redux-firebase/es/constants.js");

var _actions = __webpack_require__(/*! ../utils/actions */ "./node_modules/react-redux-firebase/es/utils/actions.js");

var _storage = __webpack_require__(/*! ../utils/storage */ "./node_modules/react-redux-firebase/es/utils/storage.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _objectWithoutProperties(obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
}

var FILE_UPLOAD_START = _constants.actionTypes.FILE_UPLOAD_START,
    FILE_UPLOAD_ERROR = _constants.actionTypes.FILE_UPLOAD_ERROR,
    FILE_UPLOAD_COMPLETE = _constants.actionTypes.FILE_UPLOAD_COMPLETE,
    FILE_DELETE_START = _constants.actionTypes.FILE_DELETE_START,
    FILE_DELETE_ERROR = _constants.actionTypes.FILE_DELETE_ERROR,
    FILE_DELETE_COMPLETE = _constants.actionTypes.FILE_DELETE_COMPLETE;

var uploadFile = exports.uploadFile = function uploadFile(dispatch, firebase, config) {
  if (!firebase.storage) {
    throw new Error('Firebase storage is required to upload files');
  }

  var _ref = config || {},
      path = _ref.path,
      file = _ref.file,
      dbPath = _ref.dbPath,
      _ref$options = _ref.options,
      options = _ref$options === undefined ? {
    progress: false
  } : _ref$options;

  var logErrors = firebase._.config.logErrors;
  var nameFromOptions = (0, _isFunction3.default)(options.name) ? options.name(file, firebase, config) : options.name;
  var filename = nameFromOptions || file.name;

  var meta = _extends({}, config, {
    filename: filename
  });

  dispatch({
    type: FILE_UPLOAD_START,
    payload: _extends({}, config, {
      filename: filename
    })
  });

  var uploadPromise = function uploadPromise() {
    return options.progress ? (0, _storage.uploadFileWithProgress)(dispatch, firebase, {
      path: path,
      file: file,
      filename: filename,
      meta: meta
    }) : firebase.storage().ref(path + '/' + filename).put(file);
  };

  return uploadPromise().then(function (uploadTaskSnapshot) {
    if (!dbPath || !firebase.database && !firebase.firestore) {
      dispatch({
        type: FILE_UPLOAD_COMPLETE,
        meta: _extends({}, config, {
          filename: filename
        }),
        payload: {
          uploadTaskSnapshot: uploadTaskSnapshot,
          uploadTaskSnaphot: uploadTaskSnapshot
        }
      });
      return {
        uploadTaskSnapshot: uploadTaskSnapshot,
        uploadTaskSnaphot: uploadTaskSnapshot
      };
    }

    return (0, _storage.writeMetadataToDb)({
      firebase: firebase,
      uploadTaskSnapshot: uploadTaskSnapshot,
      dbPath: dbPath,
      options: options
    }).then(function (payload) {
      dispatch({
        type: FILE_UPLOAD_COMPLETE,
        meta: _extends({}, config, {
          filename: filename
        }),
        payload: payload
      });
      return payload;
    });
  }).catch(function (err) {
    if (logErrors) {
      console.error && console.error('RRF: Error uploading file: ' + (err.message || err), err);
    }

    dispatch({
      type: FILE_UPLOAD_ERROR,
      path: path,
      payload: err
    });
    return Promise.reject(err);
  });
};

var uploadFiles = function uploadFiles(dispatch, firebase, _ref2) {
  var files = _ref2.files,
      other = _objectWithoutProperties(_ref2, ['files']);

  return Promise.all((0, _map3.default)(files, function (file) {
    return uploadFile(dispatch, firebase, _extends({
      file: file
    }, other));
  }));
};

exports.uploadFiles = uploadFiles;

var deleteFile = exports.deleteFile = function deleteFile(dispatch, firebase, _ref3) {
  var path = _ref3.path,
      dbPath = _ref3.dbPath;
  return (0, _actions.wrapInDispatch)(dispatch, {
    method: _storage.deleteFile,
    args: [firebase, {
      path: path,
      dbPath: dbPath
    }],
    types: [FILE_DELETE_START, FILE_DELETE_COMPLETE, FILE_DELETE_ERROR]
  });
};

/***/ }),

/***/ "./node_modules/react-redux-firebase/es/constants.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-redux-firebase/es/constants.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var actionsPrefix = exports.actionsPrefix = '@@reactReduxFirebase';
var actionTypes = exports.actionTypes = {
  START: actionsPrefix + '/START',
  SET: actionsPrefix + '/SET',
  REMOVE: actionsPrefix + '/REMOVE',
  MERGE: actionsPrefix + '/MERGE',
  SET_PROFILE: actionsPrefix + '/SET_PROFILE',
  LOGIN: actionsPrefix + '/LOGIN',
  LOGOUT: actionsPrefix + '/LOGOUT',
  LOGIN_ERROR: actionsPrefix + '/LOGIN_ERROR',
  NO_VALUE: actionsPrefix + '/NO_VALUE',
  UNAUTHORIZED_ERROR: actionsPrefix + '/UNAUTHORIZED_ERROR',
  ERROR: actionsPrefix + '/ERROR',
  CLEAR_ERRORS: actionsPrefix + '/CLEAR_ERRORS',
  SET_LISTENER: actionsPrefix + '/SET_LISTENER',
  UNSET_LISTENER: actionsPrefix + '/UNSET_LISTENER',
  AUTHENTICATION_INIT_STARTED: actionsPrefix + '/AUTHENTICATION_INIT_STARTED',
  AUTHENTICATION_INIT_FINISHED: actionsPrefix + '/AUTHENTICATION_INIT_FINISHED',
  SESSION_START: actionsPrefix + '/SESSION_START',
  SESSION_END: actionsPrefix + '/SESSION_END',
  FILE_UPLOAD_START: actionsPrefix + '/FILE_UPLOAD_START',
  FILE_UPLOAD_ERROR: actionsPrefix + '/FILE_UPLOAD_ERROR',
  FILE_UPLOAD_PROGRESS: actionsPrefix + '/FILE_UPLOAD_PROGRESS',
  FILE_UPLOAD_COMPLETE: actionsPrefix + '/FILE_UPLOAD_COMPLETE',
  FILE_DELETE_START: actionsPrefix + '/FILE_DELETE_START',
  FILE_DELETE_ERROR: actionsPrefix + '/FILE_DELETE_ERROR',
  FILE_DELETE_COMPLETE: actionsPrefix + '/FILE_DELETE_COMPLETE',
  AUTH_UPDATE_START: actionsPrefix + '/AUTH_UPDATE_START',
  AUTH_UPDATE_SUCCESS: actionsPrefix + '/AUTH_UPDATE_SUCCESS',
  AUTH_UPDATE_ERROR: actionsPrefix + '/AUTH_UPDATE_ERROR',
  PROFILE_UPDATE_START: actionsPrefix + '/PROFILE_UPDATE_START',
  PROFILE_UPDATE_SUCCESS: actionsPrefix + '/PROFILE_UPDATE_SUCCESS',
  PROFILE_UPDATE_ERROR: actionsPrefix + '/PROFILE_UPDATE_ERROR',
  EMAIL_UPDATE_START: actionsPrefix + '/EMAIL_UPDATE_START',
  EMAIL_UPDATE_SUCCESS: actionsPrefix + '/EMAIL_UPDATE_SUCCESS',
  EMAIL_UPDATE_ERROR: actionsPrefix + '/EMAIL_UPDATE_ERROR',
  AUTH_RELOAD_START: actionsPrefix + '/AUTH_RELOAD_START',
  AUTH_RELOAD_ERROR: actionsPrefix + '/AUTH_RELOAD_ERROR',
  AUTH_RELOAD_SUCCESS: actionsPrefix + '/AUTH_RELOAD_SUCCESS',
  AUTH_LINK_START: actionsPrefix + '/AUTH_LINK_START',
  AUTH_LINK_ERROR: actionsPrefix + '/AUTH_LINK_ERROR',
  AUTH_LINK_SUCCESS: actionsPrefix + '/AUTH_LINK_SUCCESS',
  AUTH_EMPTY_CHANGE: actionsPrefix + '/AUTH_EMPTY_CHANGE'
};
var defaultConfig = exports.defaultConfig = {
  userProfile: null,
  presence: null,
  sessions: 'sessions',
  enableLogging: false,
  logErrors: true,
  preserveOnLogout: null,
  preserveOnEmptyAuthChange: null,
  resetBeforeLogin: true,
  updateProfileOnLogin: true,
  enableRedirectHandling: true,
  autoPopulateProfile: false,
  setProfilePopulateResults: false,
  dispatchOnUnsetListener: true,
  dispatchRemoveAction: false,
  enableEmptyAuthChanges: true,
  firebaseStateName: 'firebase',
  attachAuthIsReady: false,
  keysToRemoveFromAuth: ['appName', 'apiKey', 'authDomain', 'redirectEventId', 'stsTokenManager', 'uid'],
  keysToPreserveFromProviderData: ['email', 'phoneNumber', 'photoURL', 'providerId', 'uid']
};
var supportedAuthProviders = exports.supportedAuthProviders = ['google', 'github', 'twitter', 'facebook'];
var topLevelPaths = exports.topLevelPaths = ['auth', 'profile', 'ordered', 'data'];
var v3ErrorMessage = exports.v3ErrorMessage = 'Context from react-redux not found. If you are using react-redux v6 a v3.*.* version of react-redux-firebase is required. Please checkout the v3 migration guide: http://bit.ly/2SRNdiO';
exports.default = {
  actionTypes: actionTypes,
  defaultConfig: defaultConfig
};

/***/ }),

/***/ "./node_modules/react-redux-firebase/es/createFirebaseInstance.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-redux-firebase/es/createFirebaseInstance.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFirebaseInstance = undefined;

var _isObject2 = __webpack_require__(/*! lodash/isObject */ "./node_modules/lodash/isObject.js");

var _isObject3 = _interopRequireDefault(_isObject2);

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/react-redux-firebase/es/utils/index.js");

var _actions = __webpack_require__(/*! ./utils/actions */ "./node_modules/react-redux-firebase/es/utils/actions.js");

var _actions2 = __webpack_require__(/*! ./actions */ "./node_modules/react-redux-firebase/es/actions/index.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var createFirebaseInstance = exports.createFirebaseInstance = function createFirebaseInstance(firebase, configs, dispatch) {
  if (configs.enableLogging && firebase.database && typeof firebase.database.enableLogging === 'function') {
    firebase.database.enableLogging(configs.enableLogging);
  }

  var defaultInternals = {
    watchers: {},
    listeners: {},
    callbacks: {},
    queries: {},
    config: configs,
    authUid: null
  };
  Object.defineProperty(firebase, '_', {
    value: defaultInternals,
    writable: true,
    enumerable: true,
    configurable: true
  });

  var withMeta = function withMeta(method, path, value, onComplete) {
    if ((0, _isObject3.default)(value)) {
      var prefix = method === 'update' ? 'updated' : 'created';

      var dataWithMeta = _extends({}, value, _defineProperty({}, prefix + 'At', firebase.database.ServerValue.TIMESTAMP));

      if (firebase.auth().currentUser) {
        dataWithMeta[prefix + 'By'] = firebase.auth().currentUser.uid;
      }

      return firebase.database().ref(path)[method](dataWithMeta, onComplete);
    }

    return firebase.database().ref(path)[method](value, onComplete);
  };

  var set = function set(path, value, onComplete) {
    return firebase.database().ref(path).set(value, onComplete);
  };

  var setWithMeta = function setWithMeta(path, value, onComplete) {
    return withMeta('set', path, value, onComplete);
  };

  var push = function push(path, value, onComplete) {
    return firebase.database().ref(path).push(value, onComplete);
  };

  var pushWithMeta = function pushWithMeta(path, value, onComplete) {
    return withMeta('push', path, value, onComplete);
  };

  var update = function update(path, value, onComplete) {
    return firebase.database().ref(path).update(value, onComplete);
  };

  var updateWithMeta = function updateWithMeta(path, value, onComplete) {
    return withMeta('update', path, value, onComplete);
  };

  var remove = function remove(path, onComplete, options) {
    return _actions2.queryActions.remove(firebase, dispatch, path, options).then(function () {
      if (typeof onComplete === 'function') onComplete();
      return path;
    });
  };

  var uniqueSet = function uniqueSet(path, value, onComplete) {
    return firebase.database().ref(path).transaction(function (d) {
      return d === null ? value : undefined;
    }).then(function (_ref) {
      var committed = _ref.committed,
          snapshot = _ref.snapshot;

      if (!committed) {
        var newError = new Error('Path already exists.');
        if (onComplete) onComplete(newError);
        return Promise.reject(newError);
      }

      if (onComplete) onComplete(snapshot);
      return snapshot;
    });
  };

  var uploadFile = function uploadFile(path, file, dbPath, options) {
    return _actions2.storageActions.uploadFile(dispatch, firebase, {
      path: path,
      file: file,
      dbPath: dbPath,
      options: options
    });
  };

  var uploadFiles = function uploadFiles(path, files, dbPath, options) {
    return _actions2.storageActions.uploadFiles(dispatch, firebase, {
      path: path,
      files: files,
      dbPath: dbPath,
      options: options
    });
  };

  var deleteFile = function deleteFile(path, dbPath) {
    return _actions2.storageActions.deleteFile(dispatch, firebase, {
      path: path,
      dbPath: dbPath
    });
  };

  var watchEvent = function watchEvent(type, path, storeAs) {
    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    return _actions2.queryActions.watchEvent(firebase, dispatch, _extends({
      type: type,
      path: path,
      storeAs: storeAs
    }, options));
  };

  var unWatchEvent = function unWatchEvent(type, path, queryId) {
    var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
    return _actions2.queryActions.unWatchEvent(firebase, dispatch, _extends({
      type: type,
      path: path,
      queryId: queryId
    }, options));
  };

  var promiseEvents = function promiseEvents(watchArray, options) {
    var inputAsFunc = (0, _utils.createCallable)(watchArray);
    var prevData = inputAsFunc(options, firebase);
    var queryConfigs = (0, _utils.getEventsFromInput)(prevData);
    return Promise.all(queryConfigs.map(function (queryConfig) {
      return _actions2.queryActions.watchEvent(firebase, dispatch, queryConfig);
    }));
  };

  var login = function login(credentials) {
    return _actions2.authActions.login(dispatch, firebase, credentials);
  };

  var logout = function logout() {
    return _actions2.authActions.logout(dispatch, firebase);
  };

  var createUser = function createUser(credentials, profile) {
    return _actions2.authActions.createUser(dispatch, firebase, credentials, profile);
  };

  var resetPassword = function resetPassword(credentials) {
    return _actions2.authActions.resetPassword(dispatch, firebase, credentials);
  };

  var confirmPasswordReset = function confirmPasswordReset(code, password) {
    return _actions2.authActions.confirmPasswordReset(dispatch, firebase, code, password);
  };

  var verifyPasswordResetCode = function verifyPasswordResetCode(code) {
    return _actions2.authActions.verifyPasswordResetCode(dispatch, firebase, code);
  };

  var updateProfile = function updateProfile(profileUpdate, options) {
    return _actions2.authActions.updateProfile(dispatch, firebase, profileUpdate, options);
  };

  var updateAuth = function updateAuth(authUpdate, updateInProfile) {
    return _actions2.authActions.updateAuth(dispatch, firebase, authUpdate, updateInProfile);
  };

  var updateEmail = function updateEmail(newEmail, updateInProfile) {
    return _actions2.authActions.updateEmail(dispatch, firebase, newEmail, updateInProfile);
  };

  var reloadAuth = function reloadAuth() {
    return _actions2.authActions.reloadAuth(dispatch, firebase);
  };

  var linkWithCredential = function linkWithCredential(credential) {
    return _actions2.authActions.linkWithCredential(dispatch, firebase, credential);
  };

  var actionCreators = (0, _actions.mapWithFirebaseAndDispatch)(firebase, dispatch, {
    signInWithPhoneNumber: _actions2.authActions.signInWithPhoneNumber
  });

  var helpers = _extends({
    ref: function ref(path) {
      return firebase.database().ref(path);
    },
    set: set,
    setWithMeta: setWithMeta,
    uniqueSet: uniqueSet,
    push: push,
    pushWithMeta: pushWithMeta,
    remove: remove,
    update: update,
    updateWithMeta: updateWithMeta,
    login: login,
    logout: logout,
    updateAuth: updateAuth,
    updateEmail: updateEmail,
    updateProfile: updateProfile,
    uploadFile: uploadFile,
    uploadFiles: uploadFiles,
    deleteFile: deleteFile,
    createUser: createUser,
    resetPassword: resetPassword,
    confirmPasswordReset: confirmPasswordReset,
    verifyPasswordResetCode: verifyPasswordResetCode,
    watchEvent: watchEvent,
    unWatchEvent: unWatchEvent,
    reloadAuth: reloadAuth,
    linkWithCredential: linkWithCredential,
    promiseEvents: promiseEvents
  }, actionCreators);

  return _extends(firebase, helpers, {
    helpers: helpers
  });
};

/***/ }),

/***/ "./node_modules/react-redux-firebase/es/enhancer.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-redux-firebase/es/enhancer.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getFirebase = undefined;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var _createFirebaseInstance = __webpack_require__(/*! ./createFirebaseInstance */ "./node_modules/react-redux-firebase/es/createFirebaseInstance.js");

var _auth = __webpack_require__(/*! ./utils/auth */ "./node_modules/react-redux-firebase/es/utils/auth.js");

var _constants = __webpack_require__(/*! ./constants */ "./node_modules/react-redux-firebase/es/constants.js");

var _actions = __webpack_require__(/*! ./actions */ "./node_modules/react-redux-firebase/es/actions/index.js");

var firebaseInstance = void 0;

exports.default = function (instance, otherConfig) {
  return function (next) {
    return function (reducer, initialState, middleware) {
      var store = next(reducer, initialState, middleware);

      if (!instance.SDK_VERSION && !instance.firebase_ && !instance.database) {
        throw new Error('v2.0.0-beta and higher require passing a firebase app instance or a firebase library instance. View the migration guide for details.');
      }

      var existingConfig = instance && instance._ || {};

      var configs = _extends({}, existingConfig, _constants.defaultConfig, otherConfig);

      firebaseInstance = (0, _createFirebaseInstance.createFirebaseInstance)(instance.firebase_ || instance, configs, store.dispatch);

      _actions.authActions.init(store.dispatch, firebaseInstance);

      store.firebase = firebaseInstance;

      if (configs.attachAuthIsReady) {
        store.firebaseAuthIsReady = (0, _auth.createAuthIsReady)(store, configs);
      }

      return store;
    };
  };
};

var getFirebase = exports.getFirebase = function getFirebase() {
  if (!firebaseInstance) {
    throw new Error('Firebase instance does not yet exist. Check your compose function.');
  }

  return firebaseInstance;
};

/***/ }),

/***/ "./node_modules/react-redux-firebase/es/firebaseConnect.js":
/*!*****************************************************************!*\
  !*** ./node_modules/react-redux-firebase/es/firebaseConnect.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFirebaseConnect = undefined;

var _differenceWith2 = __webpack_require__(/*! lodash/differenceWith */ "./node_modules/lodash/differenceWith.js");

var _differenceWith3 = _interopRequireDefault(_differenceWith2);

var _isEqual2 = __webpack_require__(/*! lodash/isEqual */ "./node_modules/lodash/isEqual.js");

var _isEqual3 = _interopRequireDefault(_isEqual2);

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _hoistNonReactStatics = __webpack_require__(/*! hoist-non-react-statics */ "./node_modules/react-redux-firebase/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js");

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _query = __webpack_require__(/*! ./actions/query */ "./node_modules/react-redux-firebase/es/actions/query.js");

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/react-redux-firebase/es/utils/index.js");

var _constants = __webpack_require__(/*! ./constants */ "./node_modules/react-redux-firebase/es/constants.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var createFirebaseConnect = exports.createFirebaseConnect = function createFirebaseConnect() {
  var storeKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'store';
  return function () {
    var dataOrFn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    return function (WrappedComponent) {
      var FirebaseConnect = function (_Component) {
        _inherits(FirebaseConnect, _Component);

        function FirebaseConnect() {
          var _ref;

          var _temp, _this, _ret;

          _classCallCheck(this, FirebaseConnect);

          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FirebaseConnect.__proto__ || Object.getPrototypeOf(FirebaseConnect)).call.apply(_ref, [this].concat(args))), _this), _this.firebaseEvents = [], _this.firebase = null, _this.prevData = null, _this.store = _this.context[storeKey], _temp), _possibleConstructorReturn(_this, _ret);
        }

        _createClass(FirebaseConnect, [{
          key: 'componentWillMount',
          value: function componentWillMount() {
            if (!this.context || !this.context[storeKey]) {
              throw new Error(_constants.v3ErrorMessage);
            }

            var _store = this.store,
                firebase = _store.firebase,
                dispatch = _store.dispatch;
            var inputAsFunc = (0, _utils.createCallable)(dataOrFn);
            this.prevData = inputAsFunc(this.props, this.store);
            var ref = firebase.ref,
                helpers = firebase.helpers,
                storage = firebase.storage,
                database = firebase.database,
                auth = firebase.auth;
            this.firebase = _extends({
              ref: ref,
              storage: storage,
              database: database,
              auth: auth
            }, helpers);
            this._firebaseEvents = (0, _utils.getEventsFromInput)(this.prevData);
            (0, _query.watchEvents)(firebase, dispatch, this._firebaseEvents);
          }
        }, {
          key: 'componentWillUnmount',
          value: function componentWillUnmount() {
            var _store2 = this.store,
                firebase = _store2.firebase,
                dispatch = _store2.dispatch;
            (0, _query.unWatchEvents)(firebase, dispatch, this._firebaseEvents);
          }
        }, {
          key: 'componentWillReceiveProps',
          value: function componentWillReceiveProps(np) {
            var _store3 = this.store,
                firebase = _store3.firebase,
                dispatch = _store3.dispatch;
            var inputAsFunc = (0, _utils.createCallable)(dataOrFn);
            var data = inputAsFunc(np, this.store);

            if (!(0, _isEqual3.default)(data, this.prevData)) {
              var itemsToSubscribe = (0, _differenceWith3.default)(data, this.prevData, _isEqual3.default);
              var itemsToUnsubscribe = (0, _differenceWith3.default)(this.prevData, data, _isEqual3.default);
              this.prevData = data;
              (0, _query.unWatchEvents)(firebase, dispatch, (0, _utils.getEventsFromInput)(itemsToUnsubscribe));
              this._firebaseEvents = (0, _utils.getEventsFromInput)(data);
              (0, _query.watchEvents)(firebase, dispatch, (0, _utils.getEventsFromInput)(itemsToSubscribe));
            }
          }
        }, {
          key: 'render',
          value: function render() {
            return _react2.default.createElement(WrappedComponent, _extends({}, this.props, this.state, {
              firebase: this.firebase
            }));
          }
        }]);

        return FirebaseConnect;
      }(_react.Component);

      FirebaseConnect.displayName = 'FirebaseConnect(' + (0, _utils.getDisplayName)(WrappedComponent) + ')';
      FirebaseConnect.wrappedComponent = WrappedComponent;
      FirebaseConnect.contextTypes = _defineProperty({}, storeKey, _propTypes2.default.object.isRequired);
      return (0, _hoistNonReactStatics2.default)(FirebaseConnect, WrappedComponent);
    };
  };
};

exports.default = createFirebaseConnect();

/***/ }),

/***/ "./node_modules/react-redux-firebase/es/firestoreConnect.js":
/*!******************************************************************!*\
  !*** ./node_modules/react-redux-firebase/es/firestoreConnect.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFirestoreConnect = undefined;

var _filter2 = __webpack_require__(/*! lodash/filter */ "./node_modules/lodash/filter.js");

var _filter3 = _interopRequireDefault(_filter2);

var _some2 = __webpack_require__(/*! lodash/some */ "./node_modules/lodash/some.js");

var _some3 = _interopRequireDefault(_some2);

var _isEqual2 = __webpack_require__(/*! lodash/isEqual */ "./node_modules/lodash/isEqual.js");

var _isEqual3 = _interopRequireDefault(_isEqual2);

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _hoistNonReactStatics = __webpack_require__(/*! hoist-non-react-statics */ "./node_modules/react-redux-firebase/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js");

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/react-redux-firebase/es/utils/index.js");

var _constants = __webpack_require__(/*! ./constants */ "./node_modules/react-redux-firebase/es/constants.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var createFirestoreConnect = exports.createFirestoreConnect = function createFirestoreConnect() {
  var storeKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'store';
  return function () {
    var dataOrFn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    return function (WrappedComponent) {
      var FirestoreConnect = function (_Component) {
        _inherits(FirestoreConnect, _Component);

        function FirestoreConnect() {
          var _ref;

          var _temp, _this, _ret;

          _classCallCheck(this, FirestoreConnect);

          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FirestoreConnect.__proto__ || Object.getPrototypeOf(FirestoreConnect)).call.apply(_ref, [this].concat(args))), _this), _this.prevData = null, _this.store = _this.context[storeKey], _temp), _possibleConstructorReturn(_this, _ret);
        }

        _createClass(FirestoreConnect, [{
          key: 'componentWillMount',
          value: function componentWillMount() {
            if (!this.context || !this.context[storeKey]) {
              throw new Error(_constants.v3ErrorMessage);
            }

            var firestore = this.store.firestore;

            if (this.firestoreIsEnabled) {
              var inputAsFunc = (0, _utils.createCallable)(dataOrFn);
              this.prevData = inputAsFunc(this.props, this.store);
              firestore.setListeners(this.prevData);
            }
          }
        }, {
          key: 'componentWillUnmount',
          value: function componentWillUnmount() {
            var firestore = this.store.firestore;

            if (this.firestoreIsEnabled && this.prevData) {
              firestore.unsetListeners(this.prevData);
            }
          }
        }, {
          key: 'componentWillReceiveProps',
          value: function componentWillReceiveProps(np) {
            var firestore = this.store.firestore;
            var inputAsFunc = (0, _utils.createCallable)(dataOrFn);
            var data = inputAsFunc(np, this.store);

            if (this.firestoreIsEnabled && !(0, _isEqual3.default)(data, this.prevData)) {
              var changes = this.getChanges(data, this.prevData);
              this.prevData = data;
              firestore.unsetListeners(changes.removed);
              firestore.setListeners(changes.added);
            }
          }
        }, {
          key: 'getChanges',
          value: function getChanges() {
            var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
            var prevData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
            var result = {};
            result.added = (0, _filter3.default)(data, function (d) {
              return !(0, _some3.default)(prevData, function (p) {
                return (0, _isEqual3.default)(d, p);
              });
            });
            result.removed = (0, _filter3.default)(prevData, function (p) {
              return !(0, _some3.default)(data, function (d) {
                return (0, _isEqual3.default)(p, d);
              });
            });
            return result;
          }
        }, {
          key: 'render',
          value: function render() {
            var _store = this.store,
                firebase = _store.firebase,
                firestore = _store.firestore;

            var newProps = _extends({}, this.props, {
              firestore: firestore
            });

            if (firebase) {
              newProps.firebase = _extends({}, firebase, firebase.helpers);
            }

            return _react2.default.createElement(WrappedComponent, newProps);
          }
        }, {
          key: 'firestoreIsEnabled',
          get: function get() {
            return !!this.store.firestore;
          }
        }]);

        return FirestoreConnect;
      }(_react.Component);

      FirestoreConnect.wrappedComponent = WrappedComponent;
      FirestoreConnect.displayName = (0, _utils.wrapDisplayName)(WrappedComponent, 'FirestoreConnect');
      FirestoreConnect.contextTypes = _defineProperty({}, storeKey, _propTypes2.default.object.isRequired);
      return (0, _hoistNonReactStatics2.default)(FirestoreConnect, WrappedComponent);
    };
  };
};

exports.default = createFirestoreConnect();

/***/ }),

/***/ "./node_modules/react-redux-firebase/es/helpers.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-redux-firebase/es/helpers.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.populate = exports.fixPath = exports.isEmpty = exports.isLoaded = exports.getVal = undefined;

var _isFunction2 = __webpack_require__(/*! lodash/isFunction */ "./node_modules/lodash/isFunction.js");

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _isArray2 = __webpack_require__(/*! lodash/isArray */ "./node_modules/lodash/isArray.js");

var _isArray3 = _interopRequireDefault(_isArray2);

var _some2 = __webpack_require__(/*! lodash/some */ "./node_modules/lodash/some.js");

var _some3 = _interopRequireDefault(_some2);

var _compact2 = __webpack_require__(/*! lodash/compact */ "./node_modules/lodash/compact.js");

var _compact3 = _interopRequireDefault(_compact2);

var _isString2 = __webpack_require__(/*! lodash/isString */ "./node_modules/lodash/isString.js");

var _isString3 = _interopRequireDefault(_isString2);

var _defaultsDeep2 = __webpack_require__(/*! lodash/defaultsDeep */ "./node_modules/lodash/defaultsDeep.js");

var _defaultsDeep3 = _interopRequireDefault(_defaultsDeep2);

var _reduce2 = __webpack_require__(/*! lodash/reduce */ "./node_modules/lodash/reduce.js");

var _reduce3 = _interopRequireDefault(_reduce2);

var _every2 = __webpack_require__(/*! lodash/every */ "./node_modules/lodash/every.js");

var _every3 = _interopRequireDefault(_every2);

var _mapValues2 = __webpack_require__(/*! lodash/mapValues */ "./node_modules/lodash/mapValues.js");

var _mapValues3 = _interopRequireDefault(_mapValues2);

var _map2 = __webpack_require__(/*! lodash/map */ "./node_modules/lodash/map.js");

var _map3 = _interopRequireDefault(_map2);

var _last2 = __webpack_require__(/*! lodash/last */ "./node_modules/lodash/last.js");

var _last3 = _interopRequireDefault(_last2);

var _has2 = __webpack_require__(/*! lodash/has */ "./node_modules/lodash/has.js");

var _has3 = _interopRequireDefault(_has2);

var _get2 = __webpack_require__(/*! lodash/get */ "./node_modules/lodash/get.js");

var _get3 = _interopRequireDefault(_get2);

var _set2 = __webpack_require__(/*! lodash/set */ "./node_modules/lodash/set.js");

var _set3 = _interopRequireDefault(_set2);

var _size2 = __webpack_require__(/*! lodash/size */ "./node_modules/lodash/size.js");

var _size3 = _interopRequireDefault(_size2);

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var _constants = __webpack_require__(/*! ./constants */ "./node_modules/react-redux-firebase/es/constants.js");

var _populate = __webpack_require__(/*! ./utils/populate */ "./node_modules/react-redux-firebase/es/utils/populate.js");

var _reducers = __webpack_require__(/*! ./utils/reducers */ "./node_modules/react-redux-firebase/es/utils/reducers.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  } else {
    return Array.from(arr);
  }
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var getVal = exports.getVal = function getVal(firebase, path, notSetValue) {
  if (!firebase) {
    return notSetValue;
  }

  var dotPath = (0, _reducers.getDotStrPath)(path);
  var valueAtPath = (0, _get3.default)(firebase, dotPath, notSetValue);
  return valueAtPath;
};

var isLoaded = exports.isLoaded = function isLoaded() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return !args || !args.length ? true : (0, _every3.default)(args, function (arg) {
    return arg !== undefined && (0, _get3.default)(arg, 'isLoaded') !== false;
  });
};

var isEmpty = exports.isEmpty = function isEmpty() {
  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  return (0, _some3.default)(args, function (arg) {
    return !(arg && (0, _size3.default)(arg)) || arg.isEmpty === true;
  });
};

var fixPath = exports.fixPath = function fixPath(path) {
  return (path.substring(0, 1) === '/' ? '' : '/') + path;
};

var buildChildList = function buildChildList(state, list, p) {
  return (0, _mapValues3.default)(list, function (val, key) {
    var getKey = val;

    if (val === true || p.populateByKey) {
      getKey = key;
    }

    var dotRoot = (0, _compact3.default)(p.root.split('/')).join('.');
    var pathArr = [dotRoot, getKey];

    if (p.childParam) {
      pathArr.push(p.childParam);
    }

    var pathString = pathArr.join('.');

    if ((0, _get3.default)(state.data, pathString)) {
      return p.keyProp ? _extends(_defineProperty({}, p.keyProp, getKey), (0, _get3.default)(state.data, pathString)) : (0, _get3.default)(state.data, pathString);
    }

    return val === true || p.populateByKey ? val : getKey;
  });
};

var populateChild = function populateChild(state, child, p) {
  var childVal = (0, _get3.default)(child, p.child);

  if (!child || !childVal) {
    return null;
  }

  if ((0, _isString3.default)(childVal)) {
    var dotRoot = (0, _compact3.default)(p.root.split('/')).join('.');
    var pathArr = [dotRoot, childVal];

    if (p.childParam) {
      pathArr.push(p.childParam);
    }

    var pathString = pathArr.join('.');
    var populateVal = (0, _get3.default)(state.data, pathString);

    if (populateVal) {
      return (0, _set3.default)({}, p.childAlias || p.child, p.keyProp ? _extends(_defineProperty({}, p.keyProp, childVal), populateVal) : populateVal);
    }

    return child;
  }

  return (0, _set3.default)({}, p.childAlias || p.child, buildChildList(state, childVal, p));
};

var populate = exports.populate = function populate(state, path, populates, notSetValue) {
  var splitPath = (0, _compact3.default)(path.split('/'));
  var pathArr = _constants.topLevelPaths.indexOf(splitPath[0]) === -1 ? ['data'].concat(_toConsumableArray(splitPath)) : splitPath;
  var dotPath = pathArr.join('.');
  var data = (0, _get3.default)(state, dotPath, notSetValue);

  if (!state || data === notSetValue) {
    return notSetValue;
  }

  if (data === null) {
    return null;
  }

  var populatesForData = (0, _populate.getPopulateObjs)((0, _isFunction3.default)(populates) ? populates((0, _last3.default)(pathArr), data) : populates);

  if ((0, _isArray3.default)(data)) {
    var someArrayItemHasKey = function someArrayItemHasKey(array) {
      return function (key) {
        return (0, _some3.default)(array, function (item) {
          return (0, _has3.default)(item, key);
        });
      };
    };

    var _dataHasPopulateChilds = (0, _some3.default)(populatesForData, function (populate) {
      return someArrayItemHasKey(data)(['value', populate.child]);
    });

    if (_dataHasPopulateChilds) {
      return data.map(function (_ref) {
        var key = _ref.key,
            dataValue = _ref.value;
        var populatedValue = populatesForData.map(function (p) {
          return populateChild(state, dataValue, p);
        }).reduce(function (acc, v) {
          return (0, _defaultsDeep3.default)(v, acc);
        }, dataValue);
        return {
          key: key,
          value: populatedValue
        };
      });
    }

    return data;
  }

  var dataHasPopulateChilds = (0, _some3.default)(populatesForData, function (p) {
    return (0, _has3.default)(data, p.child);
  });

  if (dataHasPopulateChilds) {
    return populatesForData.map(function (p) {
      return populateChild(state, data, p);
    }).reduce(function (acc, v) {
      return (0, _defaultsDeep3.default)(v, acc);
    }, data);
  }

  if (pathArr.indexOf('profile') !== -1) {
    return data;
  }

  return (0, _mapValues3.default)(data, function (child, childKey) {
    var key = pathArr[0] === 'ordered' ? child.key : childKey;
    var populatesForDataItem = (0, _populate.getPopulateObjs)((0, _isFunction3.default)(populates) ? populates(key, child) : populates);
    var dataHasPopulateChilds = (0, _some3.default)(populatesForDataItem, function (p) {
      return (0, _has3.default)(child, p.child);
    });

    if (!dataHasPopulateChilds) {
      return child;
    }

    return (0, _reduce3.default)((0, _map3.default)(populatesForDataItem, function (p) {
      return populateChild(state, child, p);
    }), function (obj, v) {
      return (0, _defaultsDeep3.default)(v, obj);
    }, child);
  });
};

/***/ }),

/***/ "./node_modules/react-redux-firebase/es/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-redux-firebase/es/index.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var _createFirebaseInstance = __webpack_require__(/*! ./createFirebaseInstance */ "./node_modules/react-redux-firebase/es/createFirebaseInstance.js");

var _firebaseConnect = __webpack_require__(/*! ./firebaseConnect */ "./node_modules/react-redux-firebase/es/firebaseConnect.js");

var _firebaseConnect2 = _interopRequireDefault(_firebaseConnect);

var _firestoreConnect = __webpack_require__(/*! ./firestoreConnect */ "./node_modules/react-redux-firebase/es/firestoreConnect.js");

var _firestoreConnect2 = _interopRequireDefault(_firestoreConnect);

var _withFirebase = __webpack_require__(/*! ./withFirebase */ "./node_modules/react-redux-firebase/es/withFirebase.js");

var _withFirebase2 = _interopRequireDefault(_withFirebase);

var _withFirestore = __webpack_require__(/*! ./withFirestore */ "./node_modules/react-redux-firebase/es/withFirestore.js");

var _withFirestore2 = _interopRequireDefault(_withFirestore);

var _enhancer = __webpack_require__(/*! ./enhancer */ "./node_modules/react-redux-firebase/es/enhancer.js");

var _enhancer2 = _interopRequireDefault(_enhancer);

var _reducer = __webpack_require__(/*! ./reducer */ "./node_modules/react-redux-firebase/es/reducer.js");

var _reducer2 = _interopRequireDefault(_reducer);

var _constants = __webpack_require__(/*! ./constants */ "./node_modules/react-redux-firebase/es/constants.js");

var _constants2 = _interopRequireDefault(_constants);

var _auth = __webpack_require__(/*! ./utils/auth */ "./node_modules/react-redux-firebase/es/utils/auth.js");

var _helpers = __webpack_require__(/*! ./helpers */ "./node_modules/react-redux-firebase/es/helpers.js");

var helpers = _interopRequireWildcard(_helpers);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }

    newObj.default = obj;
    return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

exports.default = _extends({
  firebase: _firebaseConnect2.default,
  createFirebaseInstance: _createFirebaseInstance.createFirebaseInstance,
  firebaseConnect: _firebaseConnect2.default,
  createFirebaseConnect: _firebaseConnect.createFirebaseConnect,
  firestoreConnect: _firestoreConnect2.default,
  createFirestoreConnect: _firestoreConnect.createFirestoreConnect,
  withFirebase: _withFirebase2.default,
  createWithFirebase: _withFirebase.createWithFirebase,
  withFirestore: _withFirestore2.default,
  createWithFirestore: _withFirestore.createWithFirestore,
  reducer: _reducer2.default,
  firebaseReducer: _reducer2.default,
  firebaseStateReducer: _reducer2.default,
  reduxReactFirebase: _enhancer2.default,
  reactReduxFirebase: _enhancer2.default,
  reduxFirebase: _enhancer2.default,
  constants: _constants2.default,
  actionTypes: _constants.actionTypes,
  getFirebase: _enhancer.getFirebase,
  authIsReady: _auth.authIsReady,
  helpers: helpers
}, helpers);
module.exports = exports['default'];

/***/ }),

/***/ "./node_modules/react-redux-firebase/es/reducer.js":
/*!*********************************************************!*\
  !*** ./node_modules/react-redux-firebase/es/reducer.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reducers = __webpack_require__(/*! ./utils/reducers */ "./node_modules/react-redux-firebase/es/utils/reducers.js");

var _reducers2 = __webpack_require__(/*! ./reducers */ "./node_modules/react-redux-firebase/es/reducers.js");

exports.default = (0, _reducers.combineReducers)({
  requesting: _reducers2.requestingReducer,
  requested: _reducers2.requestedReducer,
  timestamps: _reducers2.timestampsReducer,
  data: _reducers2.dataReducer,
  ordered: _reducers2.orderedReducer,
  auth: _reducers2.authReducer,
  authError: _reducers2.authErrorReducer,
  profile: _reducers2.profileReducer,
  listeners: _reducers2.listenersReducer,
  isInitializing: _reducers2.isInitializingReducer,
  errors: _reducers2.errorsReducer
});
module.exports = exports['default'];

/***/ }),

/***/ "./node_modules/react-redux-firebase/es/reducers.js":
/*!**********************************************************!*\
  !*** ./node_modules/react-redux-firebase/es/reducers.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.orderedReducer = exports.dataReducer = exports.listenersReducer = exports.errorsReducer = exports.profileReducer = exports.authErrorReducer = exports.authReducer = exports.timestampsReducer = exports.requestedReducer = exports.requestingReducer = exports.isInitializingReducer = undefined;

var _assign2 = __webpack_require__(/*! lodash/fp/assign */ "./node_modules/lodash/fp/assign.js");

var _assign3 = _interopRequireDefault(_assign2);

var _setWith2 = __webpack_require__(/*! lodash/fp/setWith */ "./node_modules/lodash/fp/setWith.js");

var _setWith3 = _interopRequireDefault(_setWith2);

var _isObject2 = __webpack_require__(/*! lodash/isObject */ "./node_modules/lodash/isObject.js");

var _isObject3 = _interopRequireDefault(_isObject2);

var _isArray2 = __webpack_require__(/*! lodash/isArray */ "./node_modules/lodash/isArray.js");

var _isArray3 = _interopRequireDefault(_isArray2);

var _get2 = __webpack_require__(/*! lodash/get */ "./node_modules/lodash/get.js");

var _get3 = _interopRequireDefault(_get2);

var _omit2 = __webpack_require__(/*! lodash/omit */ "./node_modules/lodash/omit.js");

var _omit3 = _interopRequireDefault(_omit2);

var _pick2 = __webpack_require__(/*! lodash/pick */ "./node_modules/lodash/pick.js");

var _pick3 = _interopRequireDefault(_pick2);

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var _constants = __webpack_require__(/*! ./constants */ "./node_modules/react-redux-firebase/es/constants.js");

var _reducers = __webpack_require__(/*! ./utils/reducers */ "./node_modules/react-redux-firebase/es/utils/reducers.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  } else {
    return Array.from(arr);
  }
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var START = _constants.actionTypes.START,
    SET = _constants.actionTypes.SET,
    SET_PROFILE = _constants.actionTypes.SET_PROFILE,
    MERGE = _constants.actionTypes.MERGE,
    LOGIN = _constants.actionTypes.LOGIN,
    LOGOUT = _constants.actionTypes.LOGOUT,
    LOGIN_ERROR = _constants.actionTypes.LOGIN_ERROR,
    CLEAR_ERRORS = _constants.actionTypes.CLEAR_ERRORS,
    REMOVE = _constants.actionTypes.REMOVE,
    NO_VALUE = _constants.actionTypes.NO_VALUE,
    SET_LISTENER = _constants.actionTypes.SET_LISTENER,
    UNSET_LISTENER = _constants.actionTypes.UNSET_LISTENER,
    AUTHENTICATION_INIT_STARTED = _constants.actionTypes.AUTHENTICATION_INIT_STARTED,
    AUTHENTICATION_INIT_FINISHED = _constants.actionTypes.AUTHENTICATION_INIT_FINISHED,
    AUTH_EMPTY_CHANGE = _constants.actionTypes.AUTH_EMPTY_CHANGE,
    AUTH_LINK_SUCCESS = _constants.actionTypes.AUTH_LINK_SUCCESS,
    UNAUTHORIZED_ERROR = _constants.actionTypes.UNAUTHORIZED_ERROR,
    AUTH_UPDATE_SUCCESS = _constants.actionTypes.AUTH_UPDATE_SUCCESS,
    AUTH_RELOAD_SUCCESS = _constants.actionTypes.AUTH_RELOAD_SUCCESS,
    PROFILE_UPDATE_SUCCESS = _constants.actionTypes.PROFILE_UPDATE_SUCCESS;

var isInitializingReducer = exports.isInitializingReducer = function isInitializingReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var action = arguments[1];

  switch (action.type) {
    case AUTHENTICATION_INIT_STARTED:
      return true;

    case AUTHENTICATION_INIT_FINISHED:
      return false;

    default:
      return state;
  }
};

var requestingReducer = exports.requestingReducer = function requestingReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _ref = arguments[1];
  var type = _ref.type,
      path = _ref.path;

  switch (type) {
    case START:
      return _extends({}, state, _defineProperty({}, (0, _reducers.getSlashStrPath)(path), true));

    case NO_VALUE:
    case SET:
      return _extends({}, state, _defineProperty({}, (0, _reducers.getSlashStrPath)(path), false));

    default:
      return state;
  }
};

var requestedReducer = exports.requestedReducer = function requestedReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _ref2 = arguments[1];
  var type = _ref2.type,
      path = _ref2.path;

  switch (type) {
    case START:
      return _extends({}, state, _defineProperty({}, (0, _reducers.getSlashStrPath)(path), false));

    case NO_VALUE:
    case SET:
      return _extends({}, state, _defineProperty({}, (0, _reducers.getSlashStrPath)(path), true));

    default:
      return state;
  }
};

var timestampsReducer = exports.timestampsReducer = function timestampsReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _ref3 = arguments[1];
  var type = _ref3.type,
      path = _ref3.path;

  switch (type) {
    case START:
    case NO_VALUE:
    case SET:
      return _extends({}, state, _defineProperty({}, (0, _reducers.getSlashStrPath)(path), Date.now()));

    default:
      return state;
  }
};

var createDataReducer = function createDataReducer() {
  var actionKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'data';
  return function () {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var action = arguments[1];

    switch (action.type) {
      case SET:
        return (0, _setWith3.default)(Object, (0, _reducers.getDotStrPath)(action.path), action[actionKey], state);

      case MERGE:
        var previousData = (0, _get3.default)(state, (0, _reducers.getDotStrPath)(action.path), {});
        var mergedData = (0, _assign3.default)(previousData, action[actionKey]);
        return (0, _setWith3.default)(Object, (0, _reducers.getDotStrPath)(action.path), mergedData, state);

      case NO_VALUE:
        return (0, _setWith3.default)(Object, (0, _reducers.getDotStrPath)(action.path), null, state);

      case REMOVE:
        if (actionKey === 'data') {
          return (0, _reducers.recursiveUnset)((0, _reducers.getDotStrPath)(action.path), state);
        }

        return state;

      case LOGOUT:
        if (action.preserve) {
          if ((0, _isArray3.default)(action.preserve)) {
            return (0, _pick3.default)(state, action.preserve);
          } else if ((0, _isObject3.default)(action.preserve)) {
            return action.preserve[actionKey] ? (0, _reducers.preserveValuesFromState)(state, action.preserve[actionKey], {}) : {};
          }

          throw new Error('Invalid preserve parameter. It must be an Object or an Array');
        }

        return {};

      default:
        return state;
    }
  };
};

var authReducer = exports.authReducer = function authReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
    isLoaded: false,
    isEmpty: true
  };
  var action = arguments[1];

  switch (action.type) {
    case LOGIN:
    case AUTH_UPDATE_SUCCESS:
      if (!action.auth) {
        return {
          isEmpty: true,
          isLoaded: true
        };
      }

      var auth = action.auth.toJSON ? action.auth.toJSON() : action.auth;

      if (action.preserve && action.preserve.auth) {
        return (0, _reducers.preserveValuesFromState)(state, action.preserve.auth, _extends({}, auth, {
          isEmpty: false,
          isLoaded: true
        }));
      }

      return _extends({}, auth, {
        isEmpty: false,
        isLoaded: true
      });

    case AUTH_LINK_SUCCESS:
    case AUTH_RELOAD_SUCCESS:
      if (!action.payload) {
        return {
          isEmpty: true,
          isLoaded: true
        };
      }

      return _extends({}, action.payload.toJSON ? action.payload.toJSON() : action.payload, {
        isEmpty: false,
        isLoaded: true
      });

    case LOGIN_ERROR:
    case AUTH_EMPTY_CHANGE:
    case LOGOUT:
      if (action.preserve && action.preserve.auth) {
        return (0, _reducers.preserveValuesFromState)(state, action.preserve.auth, {
          isLoaded: true,
          isEmpty: true
        });
      }

      return {
        isLoaded: true,
        isEmpty: true
      };

    default:
      return state;
  }
};

var authErrorReducer = exports.authErrorReducer = function authErrorReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var action = arguments[1];

  switch (action.type) {
    case LOGIN:
    case LOGOUT:
      return null;

    case LOGIN_ERROR:
    case UNAUTHORIZED_ERROR:
      return action.authError;

    default:
      return state;
  }
};

var profileReducer = exports.profileReducer = function profileReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
    isLoaded: false,
    isEmpty: true
  };
  var action = arguments[1];

  switch (action.type) {
    case SET_PROFILE:
      if (!action.profile) {
        return _extends({}, state, {
          isEmpty: true,
          isLoaded: true
        });
      }

      return _extends({}, action.profile, {
        isEmpty: false,
        isLoaded: true
      });

    case PROFILE_UPDATE_SUCCESS:
      return _extends({}, state, action.payload);

    case LOGIN:
      if (action.preserve && action.preserve.profile) {
        return (0, _reducers.preserveValuesFromState)(state, action.preserve.profile, {
          isLoaded: true,
          isEmpty: true
        });
      }

      return {
        isEmpty: true,
        isLoaded: false
      };

    case LOGOUT:
    case AUTH_EMPTY_CHANGE:
      if (action.preserve && action.preserve.profile) {
        return (0, _reducers.preserveValuesFromState)(state, action.preserve.profile, {
          isLoaded: true,
          isEmpty: true
        });
      }

      return {
        isLoaded: true,
        isEmpty: true
      };

    default:
      return state;
  }
};

var errorsReducer = exports.errorsReducer = function errorsReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var action = arguments[1];

  switch (action.type) {
    case LOGIN_ERROR:
    case UNAUTHORIZED_ERROR:
      if (!(0, _isArray3.default)(state)) {
        throw new Error('Errors state must be an array');
      }

      return [].concat(_toConsumableArray(state), [action.authError]);

    case LOGOUT:
    case CLEAR_ERRORS:
      if (action.preserve && action.preserve.errors) {
        if (typeof action.preserve.errors !== 'function') {
          throw new Error('Preserve for the errors state currently only supports functions');
        }

        return state.filter(action.preserve.errors);
      }

      return [];

    default:
      return state;
  }
};

var listenersById = function listenersById() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _ref4 = arguments[1];
  var type = _ref4.type,
      path = _ref4.path,
      payload = _ref4.payload;

  switch (type) {
    case SET_LISTENER:
      return _extends({}, state, _defineProperty({}, payload.id, {
        id: payload.id,
        path: path
      }));

    case UNSET_LISTENER:
      return (0, _omit3.default)(state, [payload.id]);

    default:
      return state;
  }
};

var allListeners = function allListeners() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var _ref5 = arguments[1];
  var type = _ref5.type,
      path = _ref5.path,
      payload = _ref5.payload;

  switch (type) {
    case SET_LISTENER:
      return [].concat(_toConsumableArray(state), [payload.id]);

    case UNSET_LISTENER:
      return state.filter(function (lId) {
        return lId !== payload.id;
      });

    default:
      return state;
  }
};

var listenersReducer = exports.listenersReducer = (0, _reducers.combineReducers)({
  byId: listenersById,
  allIds: allListeners
});
var dataReducer = exports.dataReducer = createDataReducer();
var orderedReducer = exports.orderedReducer = createDataReducer('ordered');

/***/ }),

/***/ "./node_modules/react-redux-firebase/es/utils/actions.js":
/*!***************************************************************!*\
  !*** ./node_modules/react-redux-firebase/es/utils/actions.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mapWithFirebaseAndDispatch = exports.wrapInDispatch = undefined;

var _mapValues2 = __webpack_require__(/*! lodash/mapValues */ "./node_modules/lodash/mapValues.js");

var _mapValues3 = _interopRequireDefault(_mapValues2);

var _isObject2 = __webpack_require__(/*! lodash/isObject */ "./node_modules/lodash/isObject.js");

var _isObject3 = _interopRequireDefault(_isObject2);

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var _slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  } else {
    return Array.from(arr);
  }
}

var wrapInDispatch = exports.wrapInDispatch = function wrapInDispatch(dispatch, _ref) {
  var ref = _ref.ref,
      meta = _ref.meta,
      method = _ref.method,
      _ref$args = _ref.args,
      args = _ref$args === undefined ? [] : _ref$args,
      types = _ref.types;

  var _types = _slicedToArray(types, 3),
      requestingType = _types[0],
      successType = _types[1],
      errorType = _types[2];

  dispatch({
    type: (0, _isObject3.default)(requestingType) ? requestingType.type : requestingType,
    meta: meta,
    payload: (0, _isObject3.default)(requestingType) ? requestingType.payload : {
      args: args
    }
  });
  return method.apply(undefined, _toConsumableArray(args)).then(function (payload) {
    dispatch({
      type: (0, _isObject3.default)(successType) ? successType.type : successType,
      meta: meta,
      payload: (0, _isObject3.default)(successType) ? successType.payload : payload
    });
    return payload;
  }).catch(function (err) {
    dispatch({
      type: errorType,
      meta: meta,
      payload: err
    });
    return Promise.reject(err);
  });
};

var createWithFirebaseAndDispatch = function createWithFirebaseAndDispatch(firebase, dispatch, dispatchFirst) {
  return function (func) {
    return function () {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return func.apply(firebase, dispatchFirst ? [dispatch, firebase].concat(args) : [firebase, dispatch].concat(args));
    };
  };
};

var mapWithFirebaseAndDispatch = exports.mapWithFirebaseAndDispatch = function mapWithFirebaseAndDispatch(firebase, dispatch, actions) {
  var aliases = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
  var withFirebaseAndDispatch = createWithFirebaseAndDispatch(firebase, dispatch);
  return _extends({}, (0, _mapValues3.default)(actions, withFirebaseAndDispatch), aliases.reduce(function (acc, _ref2) {
    var action = _ref2.action,
        name = _ref2.name;
    return _extends({}, acc, _defineProperty({}, name, withFirebaseAndDispatch(action)));
  }, {}));
};

/***/ }),

/***/ "./node_modules/react-redux-firebase/es/utils/auth.js":
/*!************************************************************!*\
  !*** ./node_modules/react-redux-firebase/es/utils/auth.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateProfileOnFirestore = exports.updateProfileOnRTDB = exports.createAuthIsReady = exports.authIsReady = exports.getLoginMethodAndParams = undefined;

var _isFunction2 = __webpack_require__(/*! lodash/isFunction */ "./node_modules/lodash/isFunction.js");

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _isString2 = __webpack_require__(/*! lodash/isString */ "./node_modules/lodash/isString.js");

var _isString3 = _interopRequireDefault(_isString2);

var _isArray2 = __webpack_require__(/*! lodash/isArray */ "./node_modules/lodash/isArray.js");

var _isArray3 = _interopRequireDefault(_isArray2);

var _capitalize2 = __webpack_require__(/*! lodash/capitalize */ "./node_modules/lodash/capitalize.js");

var _capitalize3 = _interopRequireDefault(_capitalize2);

exports.setupPresence = setupPresence;

var _constants = __webpack_require__(/*! ../constants */ "./node_modules/react-redux-firebase/es/constants.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var createAuthProvider = function createAuthProvider(firebase, providerName, scopes) {
  var capitalProviderName = (0, _capitalize3.default)(providerName) + 'AuthProvider';

  if (!firebase.auth[capitalProviderName]) {
    throw new Error(providerName + ' is not a valid auth provider for your firebase instance. If using react-native, use a RN specific auth library.');
  }

  var provider = new firebase.auth[capitalProviderName]();
  var customAuthParameters = firebase._.config.customAuthParameters;

  if (customAuthParameters && customAuthParameters[providerName]) {
    provider.setCustomParameters(customAuthParameters[providerName]);
  }

  if (providerName.toLowerCase() === 'twitter' || !(0, _isFunction3.default)(provider.addScope)) {
    return provider;
  }

  provider.addScope('email');

  if (scopes) {
    if ((0, _isArray3.default)(scopes)) {
      scopes.forEach(function (scope) {
        provider.addScope(scope);
      });
    }

    if ((0, _isString3.default)(scopes)) {
      provider.addScope(scopes);
    }
  }

  return provider;
};

var getLoginMethodAndParams = exports.getLoginMethodAndParams = function getLoginMethodAndParams(firebase, creds) {
  var email = creds.email,
      password = creds.password,
      provider = creds.provider,
      type = creds.type,
      token = creds.token,
      scopes = creds.scopes,
      phoneNumber = creds.phoneNumber,
      applicationVerifier = creds.applicationVerifier,
      credential = creds.credential;

  if (credential) {
    var credentialAuth = firebase.auth().signInAndRetrieveDataWithCredential;

    if (credentialAuth) {
      return {
        method: 'signInAndRetrieveDataWithCredential',
        params: [credential]
      };
    }

    return {
      method: 'signInWithCredential',
      params: [credential]
    };
  }

  if (provider) {
    if (_constants.supportedAuthProviders.indexOf(provider.toLowerCase()) === -1) {
      throw new Error(provider + ' is not a valid Auth Provider');
    }

    if (token) {
      throw new Error('provider with token no longer supported, use credential parameter instead');
    }

    var authProvider = createAuthProvider(firebase, provider, scopes);

    if (type === 'popup') {
      return {
        method: 'signInWithPopup',
        params: [authProvider]
      };
    }

    return {
      method: 'signInWithRedirect',
      params: [authProvider]
    };
  }

  if (token) {
    var tokenAuth = firebase.auth().signInAndRetrieveDataWithCustomToken;

    if (tokenAuth) {
      return {
        method: 'signInAndRetrieveDataWithCustomToken',
        params: [token]
      };
    }

    return {
      method: 'signInWithCustomToken',
      params: [token]
    };
  }

  if (phoneNumber) {
    if (!applicationVerifier) {
      throw new Error('Application verifier is required for phone authentication');
    }

    return {
      method: 'signInWithPhoneNumber',
      params: [phoneNumber, applicationVerifier]
    };
  }

  if (!firebase.auth().signInWithEmailAndPassword) {
    return {
      method: 'signInAndRetrieveDataWithEmailAndPassword',
      params: [email, password]
    };
  }

  return {
    method: 'signInWithEmailAndPassword',
    params: [email, password]
  };
};

var isAuthReady = function isAuthReady(store, stateName) {
  var state = store.getState();
  var firebaseState = stateName ? state[stateName] : state;
  var firebaseAuthState = firebaseState && firebaseState.auth;

  if (!firebaseAuthState) {
    throw new Error('The Firebase auth state could not be found in the store under the attribute \'' + (stateName ? stateName + '.' : '') + 'auth\'. Make sure your react-redux-firebase reducer is correctly set in the store');
  }

  return firebaseState.auth.isLoaded;
};

var authIsReady = exports.authIsReady = function authIsReady(store) {
  var stateName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'firebase';
  return new Promise(function (resolve) {
    if (isAuthReady(store, stateName)) {
      resolve();
    } else {
      var unsubscribe = store.subscribe(function () {
        if (isAuthReady(store, stateName)) {
          unsubscribe();
          resolve();
        }
      });
    }
  });
};

var createAuthIsReady = exports.createAuthIsReady = function createAuthIsReady(store, config) {
  return (0, _isFunction3.default)(config.authIsReady) ? config.authIsReady(store, config) : authIsReady(store, config.firebaseStateName);
};

var updateProfileOnRTDB = exports.updateProfileOnRTDB = function updateProfileOnRTDB(firebase, profileUpdate) {
  var database = firebase.database,
      _firebase$_ = firebase._,
      config = _firebase$_.config,
      authUid = _firebase$_.authUid;
  var profileRef = database().ref(config.userProfile + '/' + authUid);
  return profileRef.update(profileUpdate).then(function () {
    return profileRef.once('value');
  });
};

var updateProfileOnFirestore = exports.updateProfileOnFirestore = function updateProfileOnFirestore(firebase, profileUpdate) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var _options$useSet = options.useSet,
      useSet = _options$useSet === undefined ? true : _options$useSet,
      _options$merge = options.merge,
      merge = _options$merge === undefined ? true : _options$merge;
  var firestore = firebase.firestore,
      _firebase$_2 = firebase._,
      config = _firebase$_2.config,
      authUid = _firebase$_2.authUid;
  var profileRef = firestore().doc(config.userProfile + '/' + authUid);
  var profileUpdatePromise = useSet ? profileRef.set(profileUpdate, {
    merge: merge
  }) : profileRef.update(profileUpdate);
  return profileUpdatePromise.then(function () {
    return profileRef.get();
  });
};

function setupPresence(dispatch, firebase) {
  if (!firebase.database || !firebase.database.ServerValue) {
    return;
  }

  var ref = firebase.database().ref();
  var _firebase$_3 = firebase._,
      _firebase$_3$config = _firebase$_3.config,
      presence = _firebase$_3$config.presence,
      sessions = _firebase$_3$config.sessions,
      authUid = _firebase$_3.authUid;
  var amOnline = ref.child('.info/connected');
  var onlineRef = ref.child((0, _isFunction3.default)(presence) ? presence(firebase.auth().currentUser, firebase) : presence).child(authUid);
  var sessionsRef = (0, _isFunction3.default)(sessions) ? sessions(firebase.auth().currentUser, firebase) : sessions;

  if (sessionsRef) {
    sessionsRef = ref.child(sessions);
  }

  amOnline.on('value', function (snapShot) {
    if (!snapShot.val()) return;

    if (sessionsRef) {
      dispatch({
        type: _constants.actionTypes.SESSION_START,
        payload: authUid
      });
      var session = sessionsRef.push({
        startedAt: firebase.database.ServerValue.TIMESTAMP,
        user: authUid
      });

      if ((0, _isFunction3.default)(session.setPriority)) {
        session.setPriority(authUid);
      }

      session.child('endedAt').onDisconnect().set(firebase.database.ServerValue.TIMESTAMP, function () {
        dispatch({
          type: _constants.actionTypes.SESSION_END
        });
      });
    }

    onlineRef.set(true);
    onlineRef.onDisconnect().remove();
  });
}

/***/ }),

/***/ "./node_modules/react-redux-firebase/es/utils/events.js":
/*!**************************************************************!*\
  !*** ./node_modules/react-redux-firebase/es/utils/events.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getEventsFromInput = exports.pathStrToObj = undefined;

var _remove2 = __webpack_require__(/*! lodash/remove */ "./node_modules/lodash/remove.js");

var _remove3 = _interopRequireDefault(_remove2);

var _isString2 = __webpack_require__(/*! lodash/isString */ "./node_modules/lodash/isString.js");

var _isString3 = _interopRequireDefault(_isString2);

var _isObject2 = __webpack_require__(/*! lodash/isObject */ "./node_modules/lodash/isObject.js");

var _isObject3 = _interopRequireDefault(_isObject2);

var _isArray2 = __webpack_require__(/*! lodash/isArray */ "./node_modules/lodash/isArray.js");

var _isArray3 = _interopRequireDefault(_isArray2);

var _flatMap2 = __webpack_require__(/*! lodash/flatMap */ "./node_modules/lodash/flatMap.js");

var _flatMap3 = _interopRequireDefault(_flatMap2);

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var _populate = __webpack_require__(/*! ./populate */ "./node_modules/react-redux-firebase/es/utils/populate.js");

var _query = __webpack_require__(/*! ./query */ "./node_modules/react-redux-firebase/es/utils/query.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var pathStrToObj = exports.pathStrToObj = function pathStrToObj(path) {
  var pathObj = {
    path: path,
    type: 'value',
    isQuery: false
  };
  var queryId = (0, _query.getQueryIdFromPath)(path);

  if (queryId) {
    var pathArray = path.split('#');
    pathObj = _extends({}, pathObj, {
      queryId: queryId,
      isQuery: true,
      path: pathArray[0],
      queryParams: pathArray[1].split('&')
    });

    if ((0, _populate.getPopulates)(pathArray[1].split('&'))) {
      pathObj.populates = (0, _populate.getPopulates)(pathArray[1].split('&'));
      pathObj.queryParams = (0, _remove3.default)(pathArray[1].split('&'), function (p) {
        return p.indexOf('populate') === -1;
      });
    }
  }

  return pathObj;
};

var getEventsFromInput = exports.getEventsFromInput = function getEventsFromInput(paths) {
  return (0, _flatMap3.default)(paths, function (path) {
    if ((0, _isString3.default)(path)) {
      return [pathStrToObj(path)];
    }

    if ((0, _isArray3.default)(path)) {
      return [{
        type: 'first_child',
        path: path[0]
      }, {
        type: 'child_added',
        path: path[0]
      }, {
        type: 'child_removed',
        path: path[0]
      }, {
        type: 'child_moved',
        path: path[0]
      }, {
        type: 'child_changed',
        path: path[0]
      }];
    }

    if ((0, _isObject3.default)(path)) {
      if (!path.path) {
        throw new Error('Path is a required parameter within definition object');
      }

      var strPath = path.path;

      if (path.storeAs) {
        strPath += '@' + path.storeAs;
      }

      if (path.queryParams) {
        strPath += '#' + path.queryParams.join('&');
      }

      path = _extends({}, pathStrToObj(strPath), path);
      return [path];
    }

    throw new Error('Invalid Path Definition: ' + path + '. Only strings, objects, and arrays accepted.');
  });
};

exports.default = {
  getEventsFromInput: getEventsFromInput
};

/***/ }),

/***/ "./node_modules/react-redux-firebase/es/utils/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-redux-firebase/es/utils/index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.stringToDate = exports.wrapDisplayName = exports.getDisplayName = exports.createCallable = exports.getEventsFromInput = undefined;

var _isFunction2 = __webpack_require__(/*! lodash/isFunction */ "./node_modules/lodash/isFunction.js");

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _events = __webpack_require__(/*! ./events */ "./node_modules/react-redux-firebase/es/utils/events.js");

Object.defineProperty(exports, 'getEventsFromInput', {
  enumerable: true,
  get: function get() {
    return _events.getEventsFromInput;
  }
});

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var createCallable = exports.createCallable = function createCallable(f) {
  return (0, _isFunction3.default)(f) ? f : function () {
    return f;
  };
};

var getDisplayName = exports.getDisplayName = function getDisplayName(Component) {
  if (typeof Component === 'string') {
    return Component;
  }

  if (!Component) {
    return undefined;
  }

  return Component.displayName || Component.name || 'Component';
};

var wrapDisplayName = exports.wrapDisplayName = function wrapDisplayName(BaseComponent, hocName) {
  return hocName + '(' + getDisplayName(BaseComponent) + ')';
};

var stringToDate = exports.stringToDate = function stringToDate(strInput) {
  try {
    return new Date(JSON.parse(strInput));
  } catch (err) {
    console.error('Error parsing string to date:', err.message || err);
    return strInput;
  }
};

/***/ }),

/***/ "./node_modules/react-redux-firebase/es/utils/populate.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-redux-firebase/es/utils/populate.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.promisesForPopulate = exports.populateList = exports.getPopulateChild = exports.getPopulates = exports.getPopulateObjs = exports.getChildType = exports.getPopulateObj = undefined;

var _some2 = __webpack_require__(/*! lodash/some */ "./node_modules/lodash/some.js");

var _some3 = _interopRequireDefault(_some2);

var _has2 = __webpack_require__(/*! lodash/has */ "./node_modules/lodash/has.js");

var _has3 = _interopRequireDefault(_has2);

var _set2 = __webpack_require__(/*! lodash/set */ "./node_modules/lodash/set.js");

var _set3 = _interopRequireDefault(_set2);

var _forEach2 = __webpack_require__(/*! lodash/forEach */ "./node_modules/lodash/forEach.js");

var _forEach3 = _interopRequireDefault(_forEach2);

var _get2 = __webpack_require__(/*! lodash/get */ "./node_modules/lodash/get.js");

var _get3 = _interopRequireDefault(_get2);

var _map2 = __webpack_require__(/*! lodash/map */ "./node_modules/lodash/map.js");

var _map3 = _interopRequireDefault(_map2);

var _isObject2 = __webpack_require__(/*! lodash/isObject */ "./node_modules/lodash/isObject.js");

var _isObject3 = _interopRequireDefault(_isObject2);

var _isFunction2 = __webpack_require__(/*! lodash/isFunction */ "./node_modules/lodash/isFunction.js");

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _isArray2 = __webpack_require__(/*! lodash/isArray */ "./node_modules/lodash/isArray.js");

var _isArray3 = _interopRequireDefault(_isArray2);

var _isString2 = __webpack_require__(/*! lodash/isString */ "./node_modules/lodash/isString.js");

var _isString3 = _interopRequireDefault(_isString2);

var _filter2 = __webpack_require__(/*! lodash/filter */ "./node_modules/lodash/filter.js");

var _filter3 = _interopRequireDefault(_filter2);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var getPopulateObj = exports.getPopulateObj = function getPopulateObj(str) {
  if (!(0, _isString3.default)(str)) {
    return str;
  }

  var strArray = str.split(':');
  return {
    child: strArray[0],
    root: strArray[1]
  };
};

var getChildType = exports.getChildType = function getChildType(child) {
  if ((0, _isString3.default)(child)) {
    return 'string';
  }

  if ((0, _isArray3.default)(child)) {
    return 'array';
  }

  if ((0, _isObject3.default)(child)) {
    return 'object';
  }

  return 'other';
};

var getPopulateObjs = exports.getPopulateObjs = function getPopulateObjs(arr) {
  if (!(0, _isArray3.default)(arr)) {
    return arr;
  }

  return arr.map(function (o) {
    return (0, _isObject3.default)(o) ? o : getPopulateObj(o);
  });
};

var getPopulates = exports.getPopulates = function getPopulates(params) {
  var populates = (0, _filter3.default)(params, function (param) {
    return param.indexOf('populate') !== -1 || (0, _isObject3.default)(param) && param.populates;
  }).map(function (p) {
    return p.split('=')[1];
  });

  if (!populates.length) {
    return null;
  }

  return populates.map(getPopulateObj);
};

var getPopulateChild = exports.getPopulateChild = function getPopulateChild(firebase, populate, id) {
  return firebase.database().ref().child(populate.root + '/' + id).once('value').then(function (snap) {
    return snap.val();
  });
};

var populateList = exports.populateList = function populateList(firebase, list, p, results) {
  if (!results[p.root]) {
    (0, _set3.default)(results, p.root, {});
  }

  return Promise.all((0, _map3.default)(list, function (id, childKey) {
    var populateKey = id === true || p.populateByKey ? childKey : id;
    return getPopulateChild(firebase, p, populateKey).then(function (pc) {
      if (pc) {
        return (0, _set3.default)(results, p.root + '.' + populateKey, pc);
      }

      return results;
    });
  }));
};

var promisesForPopulate = exports.promisesForPopulate = function promisesForPopulate(firebase, dataKey, originalData, populatesIn) {
  var promisesArray = [];
  var results = {};
  var populatesForData = getPopulateObjs((0, _isFunction3.default)(populatesIn) ? populatesIn(dataKey, originalData) : populatesIn);
  var dataHasPopulateChilds = (0, _some3.default)(populatesForData, function (populate) {
    return (0, _has3.default)(originalData, populate.child);
  });

  if (dataHasPopulateChilds) {
    (0, _forEach3.default)(populatesForData, function (p) {
      if ((0, _isString3.default)((0, _get3.default)(originalData, p.child))) {
        return promisesArray.push(getPopulateChild(firebase, p, (0, _get3.default)(originalData, p.child)).then(function (v) {
          if (v) {
            (0, _set3.default)(results, p.root + '.' + (0, _get3.default)(originalData, p.child), v);
          }
        }));
      }

      return promisesArray.push(populateList(firebase, (0, _get3.default)(originalData, p.child), p, results));
    });
  } else {
    (0, _forEach3.default)(originalData, function (d, key) {
      var populatesForDataItem = getPopulateObj((0, _isFunction3.default)(populatesIn) ? populatesIn(key, d) : populatesIn);
      (0, _forEach3.default)(populatesForDataItem, function (p) {
        var idOrList = (0, _get3.default)(d, p.child);

        if (!idOrList) {
          return;
        }

        if ((0, _isString3.default)(idOrList)) {
          return promisesArray.push(getPopulateChild(firebase, p, idOrList).then(function (v) {
            if (v) {
              (0, _set3.default)(results, p.root + '.' + idOrList, v);
            }

            return results;
          }));
        }

        if ((0, _isArray3.default)(idOrList) || (0, _isObject3.default)(idOrList)) {
          return promisesArray.push(populateList(firebase, idOrList, p, results));
        }
      });
    });
  }

  return Promise.all(promisesArray).then(function () {
    return results;
  });
};

exports.default = {
  promisesForPopulate: promisesForPopulate
};

/***/ }),

/***/ "./node_modules/react-redux-firebase/es/utils/query.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-redux-firebase/es/utils/query.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.populateAndDispatch = exports.orderedFromSnapshot = exports.applyParamsToQuery = exports.unsetWatcher = exports.getWatcherCount = exports.setWatcher = exports.getQueryIdFromPath = exports.getWatchPath = undefined;

var _isString2 = __webpack_require__(/*! lodash/isString */ "./node_modules/lodash/isString.js");

var _isString3 = _interopRequireDefault(_isString2);

var _size2 = __webpack_require__(/*! lodash/size */ "./node_modules/lodash/size.js");

var _size3 = _interopRequireDefault(_size2);

var _forEach2 = __webpack_require__(/*! lodash/forEach */ "./node_modules/lodash/forEach.js");

var _forEach3 = _interopRequireDefault(_forEach2);

var _isNaN2 = __webpack_require__(/*! lodash/isNaN */ "./node_modules/lodash/isNaN.js");

var _isNaN3 = _interopRequireDefault(_isNaN2);

var _constants = __webpack_require__(/*! ../constants */ "./node_modules/react-redux-firebase/es/constants.js");

var _populate = __webpack_require__(/*! ./populate */ "./node_modules/react-redux-firebase/es/utils/populate.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var tryParseToNumber = function tryParseToNumber(value) {
  var result = Number(value);

  if ((0, _isNaN3.default)(result)) {
    return value;
  }

  return result;
};

var getWatchPath = exports.getWatchPath = function getWatchPath(event, path) {
  if (!event || event === '' || !path) {
    throw new Error('Event and path are required');
  }

  return event + ':' + (path.substring(0, 1) === '/' ? '' : '/') + path;
};

var getQueryIdFromPath = exports.getQueryIdFromPath = function getQueryIdFromPath(path, event) {
  if (!(0, _isString3.default)(path)) {
    throw new Error('Query path must be a string');
  }

  var origPath = path;
  var pathSplitted = path.split('#');
  path = pathSplitted[0];
  var isQuery = pathSplitted.length > 1;
  var queryParams = isQuery ? pathSplitted[1].split('&') : [];
  var queryId = isQuery ? queryParams.map(function (param) {
    var splittedParam = param.split('=');

    if (splittedParam[0] === 'queryId') {
      return splittedParam[1];
    }
  }).filter(function (q) {
    return q;
  }) : undefined;
  return queryId && queryId.length > 0 ? event ? event + ':/' + queryId : queryId[0] : isQuery ? origPath : undefined;
};

var setWatcher = exports.setWatcher = function setWatcher(firebase, dispatch, event, path, queryId) {
  var id = queryId || getQueryIdFromPath(path, event) || getWatchPath(event, path);

  if (firebase._.watchers[id]) {
    firebase._.watchers[id]++;
  } else {
    firebase._.watchers[id] = 1;
  }

  dispatch({
    type: _constants.actionTypes.SET_LISTENER,
    path: path,
    payload: {
      id: id
    }
  });
  return firebase._.watchers[id];
};

var getWatcherCount = exports.getWatcherCount = function getWatcherCount(firebase, event, path, queryId) {
  var id = queryId || getQueryIdFromPath(path, event) || getWatchPath(event, path);
  return firebase._.watchers[id];
};

var unsetWatcher = exports.unsetWatcher = function unsetWatcher(firebase, dispatch, event, path, queryId) {
  var id = queryId || getQueryIdFromPath(path, event) || getWatchPath(event, path);
  path = path.split('#')[0];
  var watchers = firebase._.watchers;

  if (watchers[id] <= 1) {
    delete watchers[id];

    if (event !== 'first_child' && event !== 'once') {
      firebase.database().ref().child(path).off(event);
    }
  } else if (watchers[id]) {
    watchers[id]--;
  }

  dispatch({
    type: _constants.actionTypes.UNSET_LISTENER,
    path: path,
    payload: {
      id: id
    }
  });
};

var applyParamsToQuery = exports.applyParamsToQuery = function applyParamsToQuery(queryParams, query) {
  var doNotParse = false;

  if (queryParams) {
    queryParams.forEach(function (param) {
      param = param.split('=');

      switch (param[0]) {
        case 'orderByValue':
          query = query.orderByValue();
          doNotParse = true;
          break;

        case 'orderByPriority':
          query = query.orderByPriority();
          doNotParse = true;
          break;

        case 'orderByKey':
          query = query.orderByKey();
          doNotParse = true;
          break;

        case 'orderByChild':
          query = query.orderByChild(param[1]);
          break;

        case 'limitToFirst':
          query = query.limitToFirst(parseInt(param[1], 10));
          break;

        case 'limitToLast':
          query = query.limitToLast(parseInt(param[1], 10));
          break;

        case 'notParsed':
          doNotParse = true;
          break;

        case 'parsed':
          doNotParse = false;
          break;

        case 'equalTo':
          var equalToParam = !doNotParse ? tryParseToNumber(param[1]) : param[1];
          equalToParam = equalToParam === 'null' ? null : equalToParam;
          equalToParam = equalToParam === 'false' ? false : equalToParam;
          equalToParam = equalToParam === 'true' ? true : equalToParam;
          query = param.length === 3 ? query.equalTo(equalToParam, param[2]) : query.equalTo(equalToParam);
          break;

        case 'startAt':
          var startAtParam = !doNotParse ? tryParseToNumber(param[1]) : param[1];
          startAtParam = startAtParam === 'null' ? null : startAtParam;
          query = param.length === 3 ? query.startAt(startAtParam, param[2]) : query.startAt(startAtParam);
          break;

        case 'endAt':
          var endAtParam = !doNotParse ? tryParseToNumber(param[1]) : param[1];
          endAtParam = endAtParam === 'null' ? null : endAtParam;
          query = param.length === 3 ? query.endAt(endAtParam, param[2]) : query.endAt(endAtParam);
          break;
      }
    });
  }

  return query;
};

var orderedFromSnapshot = exports.orderedFromSnapshot = function orderedFromSnapshot(snap) {
  if (snap.hasChildren && !snap.hasChildren()) {
    return null;
  }

  var ordered = [];

  if (snap.forEach) {
    snap.forEach(function (child) {
      ordered.push({
        key: child.key,
        value: child.val()
      });
    });
  }

  return (0, _size3.default)(ordered) ? ordered : null;
};

var populateAndDispatch = exports.populateAndDispatch = function populateAndDispatch(firebase, dispatch, config) {
  var data = config.data,
      populates = config.populates,
      snapshot = config.snapshot,
      path = config.path,
      storeAs = config.storeAs;
  return (0, _populate.promisesForPopulate)(firebase, snapshot.key, data, populates).then(function (results) {
    (0, _forEach3.default)(results, function (result, path) {
      dispatch({
        type: _constants.actionTypes.MERGE,
        path: path,
        data: result
      });
    });
    dispatch({
      type: _constants.actionTypes.SET,
      path: storeAs || path,
      data: data,
      ordered: orderedFromSnapshot(snapshot)
    });
    return results;
  }).catch(function (err) {
    dispatch({
      type: _constants.actionTypes.ERROR,
      payload: err
    });
    return Promise.reject(err);
  });
};

/***/ }),

/***/ "./node_modules/react-redux-firebase/es/utils/reducers.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-redux-firebase/es/utils/reducers.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.recursiveUnset = exports.preserveValuesFromState = exports.combineReducers = undefined;

var _unset2 = __webpack_require__(/*! lodash/fp/unset */ "./node_modules/lodash/fp/unset.js");

var _unset3 = _interopRequireDefault(_unset2);

var _isArray2 = __webpack_require__(/*! lodash/isArray */ "./node_modules/lodash/isArray.js");

var _isArray3 = _interopRequireDefault(_isArray2);

var _pick2 = __webpack_require__(/*! lodash/pick */ "./node_modules/lodash/pick.js");

var _pick3 = _interopRequireDefault(_pick2);

var _isBoolean2 = __webpack_require__(/*! lodash/isBoolean */ "./node_modules/lodash/isBoolean.js");

var _isBoolean3 = _interopRequireDefault(_isBoolean2);

var _isFunction2 = __webpack_require__(/*! lodash/isFunction */ "./node_modules/lodash/isFunction.js");

var _isFunction3 = _interopRequireDefault(_isFunction2);

var _size2 = __webpack_require__(/*! lodash/size */ "./node_modules/lodash/size.js");

var _size3 = _interopRequireDefault(_size2);

var _replace2 = __webpack_require__(/*! lodash/replace */ "./node_modules/lodash/replace.js");

var _replace3 = _interopRequireDefault(_replace2);

var _get2 = __webpack_require__(/*! lodash/get */ "./node_modules/lodash/get.js");

var _get3 = _interopRequireDefault(_get2);

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

exports.pathToArr = pathToArr;
exports.getSlashStrPath = getSlashStrPath;
exports.getDotStrPath = getDotStrPath;

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function pathToArr(path) {
  return path ? path.split(/\//).filter(function (p) {
    return !!p;
  }) : [];
}

function getSlashStrPath(path) {
  return pathToArr(path).join('/');
}

function getDotStrPath(path) {
  return pathToArr(path).join('.');
}

var combineReducers = exports.combineReducers = function combineReducers(reducers) {
  return function () {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var action = arguments[1];
    return Object.keys(reducers).reduce(function (nextState, key) {
      nextState[key] = reducers[key](state[key], action);
      return nextState;
    }, {});
  };
};

var preserveValuesFromState = exports.preserveValuesFromState = function preserveValuesFromState(state, preserveSetting, nextState) {
  if ((0, _isFunction3.default)(preserveSetting)) {
    return preserveSetting(state, nextState);
  }

  if ((0, _isBoolean3.default)(preserveSetting) && preserveSetting) {
    return nextState ? _extends({}, state, nextState) : state;
  }

  if ((0, _isArray3.default)(preserveSetting)) {
    return (0, _pick3.default)(state, preserveSetting);
  }

  throw new Error('Invalid preserve parameter. It must be an Object or an Array');
};

var recursiveUnset = exports.recursiveUnset = function recursiveUnset(path, obj) {
  var isRecursiveCall = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  if (!path) {
    return obj;
  }

  if ((0, _size3.default)((0, _get3.default)(obj, path)) > 0 && isRecursiveCall) {
    return obj;
  }

  var objectWithRemovedKey = (0, _unset3.default)(path, obj);
  var newPath = path.match(/\./) ? (0, _replace3.default)(path, /\.[^.]*$/, '') : '';
  return recursiveUnset(newPath, objectWithRemovedKey, true);
};

/***/ }),

/***/ "./node_modules/react-redux-firebase/es/utils/storage.js":
/*!***************************************************************!*\
  !*** ./node_modules/react-redux-firebase/es/utils/storage.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _isUndefined2 = __webpack_require__(/*! lodash/isUndefined */ "./node_modules/lodash/isUndefined.js");

var _isUndefined3 = _interopRequireDefault(_isUndefined2);

var _omitBy2 = __webpack_require__(/*! lodash/omitBy */ "./node_modules/lodash/omitBy.js");

var _omitBy3 = _interopRequireDefault(_omitBy2);

var _isFunction2 = __webpack_require__(/*! lodash/isFunction */ "./node_modules/lodash/isFunction.js");

var _isFunction3 = _interopRequireDefault(_isFunction2);

exports.deleteFile = deleteFile;
exports.writeMetadataToDb = writeMetadataToDb;
exports.uploadFileWithProgress = uploadFileWithProgress;

var _constants = __webpack_require__(/*! ../constants */ "./node_modules/react-redux-firebase/es/constants.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var FILE_UPLOAD_ERROR = _constants.actionTypes.FILE_UPLOAD_ERROR,
    FILE_UPLOAD_PROGRESS = _constants.actionTypes.FILE_UPLOAD_PROGRESS;

function deleteFile(firebase, _ref) {
  var path = _ref.path,
      dbPath = _ref.dbPath;
  return firebase.storage().ref(path).delete().then(function () {
    if (!dbPath || !firebase.database && !firebase.firestore) {
      return {
        path: path
      };
    }

    var metaDeletePromise = function metaDeletePromise() {
      return firebase._.config.useFirestoreForStorageMeta ? firebase.firestore().doc(dbPath).delete() : firebase.database().ref(dbPath).remove();
    };

    return metaDeletePromise().then(function () {
      return {
        path: path,
        dbPath: dbPath
      };
    });
  });
}

function createUploadMetaResponseHandler(_ref2) {
  var fileData = _ref2.fileData,
      firebase = _ref2.firebase,
      uploadTaskSnapshot = _ref2.uploadTaskSnapshot,
      downloadURL = _ref2.downloadURL;
  return function uploadResultFromSnap(metaDataSnapshot) {
    var useFirestoreForStorageMeta = firebase._.config.useFirestoreForStorageMeta;
    var result = {
      snapshot: metaDataSnapshot,
      key: metaDataSnapshot.key || metaDataSnapshot.id,
      File: fileData,
      metaDataSnapshot: metaDataSnapshot,
      uploadTaskSnapshot: uploadTaskSnapshot,
      uploadTaskSnaphot: uploadTaskSnapshot,
      createdAt: useFirestoreForStorageMeta ? firebase.firestore.FieldValue.serverTimestamp() : firebase.database.ServerValue.TIMESTAMP
    };

    if (metaDataSnapshot.id) {
      result.id = metaDataSnapshot.id;
    }

    if (downloadURL) {
      result.downloadURL = downloadURL;
    }

    return result;
  };
}

function getDownloadURLFromUploadTaskSnapshot(uploadTaskSnapshot) {
  if (uploadTaskSnapshot.ref && typeof uploadTaskSnapshot.ref.getDownloadURL === 'function') {
    return uploadTaskSnapshot.ref.getDownloadURL();
  }

  return Promise.resolve(uploadTaskSnapshot.downloadURLs && uploadTaskSnapshot.downloadURLs[0]);
}

function writeMetadataToDb(_ref3) {
  var firebase = _ref3.firebase,
      uploadTaskSnapshot = _ref3.uploadTaskSnapshot,
      dbPath = _ref3.dbPath,
      options = _ref3.options;
  var _firebase$_$config = firebase._.config,
      fileMetadataFactory = _firebase$_$config.fileMetadataFactory,
      useFirestoreForStorageMeta = _firebase$_$config.useFirestoreForStorageMeta;
  var metadataFactory = options.metadataFactory;
  var metaFactoryFunction = metadataFactory || fileMetadataFactory;
  return getDownloadURLFromUploadTaskSnapshot(uploadTaskSnapshot).then(function (downloadURL) {
    var fileData = (0, _isFunction3.default)(metaFactoryFunction) ? metaFactoryFunction(uploadTaskSnapshot, firebase, uploadTaskSnapshot.metadata, downloadURL) : (0, _omitBy3.default)(uploadTaskSnapshot.metadata, _isUndefined3.default);
    var resultFromSnap = createUploadMetaResponseHandler({
      fileData: fileData,
      firebase: firebase,
      uploadTaskSnapshot: uploadTaskSnapshot,
      downloadURL: downloadURL
    });

    var metaSetPromise = function metaSetPromise(fileData) {
      if (useFirestoreForStorageMeta) {
        return firebase.firestore().collection(dbPath).add(fileData);
      }

      var newMetaRef = firebase.database().ref(dbPath).push();
      return newMetaRef.set(fileData).then(function (res) {
        return newMetaRef;
      });
    };

    return metaSetPromise(fileData).then(resultFromSnap);
  });
}

function uploadFileWithProgress(dispatch, firebase, _ref4) {
  var path = _ref4.path,
      file = _ref4.file,
      filename = _ref4.filename,
      meta = _ref4.meta;
  var uploadEvent = firebase.storage().ref(path + '/' + filename).put(file);
  var unListen = uploadEvent.on(firebase.storage.TaskEvent.STATE_CHANGED, {
    next: function next(snapshot) {
      dispatch({
        type: FILE_UPLOAD_PROGRESS,
        meta: meta,
        payload: {
          snapshot: snapshot,
          percent: Math.floor(snapshot.bytesTransferred / snapshot.totalBytes * 100)
        }
      });
    },
    error: function error(err) {
      dispatch({
        type: FILE_UPLOAD_ERROR,
        meta: meta,
        payload: err
      });
      unListen();
    },
    complete: function complete() {
      unListen();
    }
  });
  return uploadEvent;
}

/***/ }),

/***/ "./node_modules/react-redux-firebase/es/withFirebase.js":
/*!**************************************************************!*\
  !*** ./node_modules/react-redux-firebase/es/withFirebase.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWithFirebase = undefined;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _hoistNonReactStatics = __webpack_require__(/*! hoist-non-react-statics */ "./node_modules/react-redux-firebase/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js");

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/react-redux-firebase/es/utils/index.js");

var _constants = __webpack_require__(/*! ./constants */ "./node_modules/react-redux-firebase/es/constants.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var createWithFirebase = exports.createWithFirebase = function createWithFirebase() {
  var storeKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'store';
  return function (WrappedComponent) {
    var withFirebase = function (_Component) {
      _inherits(withFirebase, _Component);

      function withFirebase() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, withFirebase);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = withFirebase.__proto__ || Object.getPrototypeOf(withFirebase)).call.apply(_ref, [this].concat(args))), _this), _this.store = _this.context[storeKey], _temp), _possibleConstructorReturn(_this, _ret);
      }

      _createClass(withFirebase, [{
        key: 'render',
        value: function render() {
          if (!this.context || !this.context[storeKey]) {
            throw new Error(_constants.v3ErrorMessage);
          }

          return _react2.default.createElement(WrappedComponent, _extends({}, this.props, this.state, {
            dispatch: this.store.dispatch,
            firebase: this.store.firebase
          }));
        }
      }]);

      return withFirebase;
    }(_react.Component);

    withFirebase.wrappedComponent = WrappedComponent;
    withFirebase.displayName = (0, _utils.wrapDisplayName)(WrappedComponent, 'withFirebase');
    withFirebase.contextTypes = _defineProperty({}, storeKey, _propTypes2.default.object.isRequired);
    return (0, _hoistNonReactStatics2.default)(withFirebase, WrappedComponent);
  };
};

exports.default = createWithFirebase();

/***/ }),

/***/ "./node_modules/react-redux-firebase/es/withFirestore.js":
/*!***************************************************************!*\
  !*** ./node_modules/react-redux-firebase/es/withFirestore.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWithFirestore = undefined;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _hoistNonReactStatics = __webpack_require__(/*! hoist-non-react-statics */ "./node_modules/react-redux-firebase/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js");

var _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);

var _utils = __webpack_require__(/*! ./utils */ "./node_modules/react-redux-firebase/es/utils/index.js");

var _constants = __webpack_require__(/*! ./constants */ "./node_modules/react-redux-firebase/es/constants.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var createWithFirestore = exports.createWithFirestore = function createWithFirestore() {
  var storeKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'store';
  return function (WrappedComponent) {
    var withFirestore = function (_Component) {
      _inherits(withFirestore, _Component);

      function withFirestore() {
        var _ref;

        var _temp, _this, _ret;

        _classCallCheck(this, withFirestore);

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = withFirestore.__proto__ || Object.getPrototypeOf(withFirestore)).call.apply(_ref, [this].concat(args))), _this), _this.store = _this.context[storeKey], _temp), _possibleConstructorReturn(_this, _ret);
      }

      _createClass(withFirestore, [{
        key: 'render',
        value: function render() {
          if (!this.context || !this.context[storeKey]) {
            throw new Error(_constants.v3ErrorMessage);
          }

          return _react2.default.createElement(WrappedComponent, _extends({}, this.props, {
            dispatch: this.store.dispatch,
            firestore: this.store.firestore,
            firebase: this.store.firebase
          }));
        }
      }]);

      return withFirestore;
    }(_react.Component);

    withFirestore.wrappedComponent = WrappedComponent;
    withFirestore.displayName = (0, _utils.wrapDisplayName)(WrappedComponent, 'withFirestore');
    withFirestore.contextTypes = _defineProperty({}, storeKey, _propTypes2.default.object.isRequired);
    return (0, _hoistNonReactStatics2.default)(withFirestore, WrappedComponent);
  };
};

exports.default = createWithFirestore();

/***/ }),

/***/ "./node_modules/react-redux-firebase/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js":
/*!********************************************************************************************************************!*\
  !*** ./node_modules/react-redux-firebase/node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */

var REACT_STATICS = {
  childContextTypes: true,
  contextTypes: true,
  defaultProps: true,
  displayName: true,
  getDefaultProps: true,
  getDerivedStateFromProps: true,
  mixins: true,
  propTypes: true,
  type: true
};
var KNOWN_STATICS = {
  name: true,
  length: true,
  prototype: true,
  caller: true,
  callee: true,
  arguments: true,
  arity: true
};
var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = getPrototypeOf && getPrototypeOf(Object);

function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
  if (typeof sourceComponent !== 'string') {
    // don't hoist over string (html) components
    if (objectPrototype) {
      var inheritedComponent = getPrototypeOf(sourceComponent);

      if (inheritedComponent && inheritedComponent !== objectPrototype) {
        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
      }
    }

    var keys = getOwnPropertyNames(sourceComponent);

    if (getOwnPropertySymbols) {
      keys = keys.concat(getOwnPropertySymbols(sourceComponent));
    }

    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];

      if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

        try {
          // Avoid failures from read-only properties
          defineProperty(targetComponent, key, descriptor);
        } catch (e) {}
      }
    }

    return targetComponent;
  }

  return targetComponent;
}

module.exports = hoistNonReactStatics;

/***/ }),

/***/ "./node_modules/react-redux/es/components/Provider.js":
/*!************************************************************!*\
  !*** ./node_modules/react-redux/es/components/Provider.js ***!
  \************************************************************/
/*! exports provided: createProvider, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createProvider", function() { return createProvider; });
/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inheritsLoose */ "./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _utils_PropTypes__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/PropTypes */ "./node_modules/react-redux/es/utils/PropTypes.js");
/* harmony import */ var _utils_warning__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/warning */ "./node_modules/react-redux/es/utils/warning.js");





var didWarnAboutReceivingStore = false;

function warnAboutReceivingStore() {
  if (didWarnAboutReceivingStore) {
    return;
  }

  didWarnAboutReceivingStore = true;
  Object(_utils_warning__WEBPACK_IMPORTED_MODULE_4__["default"])('<Provider> does not support changing `store` on the fly. ' + 'It is most likely that you see this error because you updated to ' + 'Redux 2.x and React Redux 2.x which no longer hot reload reducers ' + 'automatically. See https://github.com/reduxjs/react-redux/releases/' + 'tag/v2.0.0 for the migration instructions.');
}

function createProvider(storeKey) {
  var _Provider$childContex;

  if (storeKey === void 0) {
    storeKey = 'store';
  }

  var subscriptionKey = storeKey + "Subscription";

  var Provider =
  /*#__PURE__*/
  function (_Component) {
    Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(Provider, _Component);

    var _proto = Provider.prototype;

    _proto.getChildContext = function getChildContext() {
      var _ref;

      return _ref = {}, _ref[storeKey] = this[storeKey], _ref[subscriptionKey] = null, _ref;
    };

    function Provider(props, context) {
      var _this;

      _this = _Component.call(this, props, context) || this;
      _this[storeKey] = props.store;
      return _this;
    }

    _proto.render = function render() {
      return react__WEBPACK_IMPORTED_MODULE_1__["Children"].only(this.props.children);
    };

    return Provider;
  }(react__WEBPACK_IMPORTED_MODULE_1__["Component"]);

  if (true) {
    Provider.prototype.componentWillReceiveProps = function (nextProps) {
      if (this[storeKey] !== nextProps.store) {
        warnAboutReceivingStore();
      }
    };
  }

  Provider.propTypes = {
    store: _utils_PropTypes__WEBPACK_IMPORTED_MODULE_3__["storeShape"].isRequired,
    children: prop_types__WEBPACK_IMPORTED_MODULE_2___default.a.element.isRequired
  };
  Provider.childContextTypes = (_Provider$childContex = {}, _Provider$childContex[storeKey] = _utils_PropTypes__WEBPACK_IMPORTED_MODULE_3__["storeShape"].isRequired, _Provider$childContex[subscriptionKey] = _utils_PropTypes__WEBPACK_IMPORTED_MODULE_3__["subscriptionShape"], _Provider$childContex);
  return Provider;
}
/* harmony default export */ __webpack_exports__["default"] = (createProvider());

/***/ }),

/***/ "./node_modules/react-redux/es/components/connectAdvanced.js":
/*!*******************************************************************!*\
  !*** ./node_modules/react-redux/es/components/connectAdvanced.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return connectAdvanced; });
/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inheritsLoose */ "./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js");
/* harmony import */ var _babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/assertThisInitialized */ "./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js");
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! hoist-non-react-statics */ "./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js");
/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var invariant__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! invariant */ "./node_modules/invariant/browser.js");
/* harmony import */ var invariant__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(invariant__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js");
/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(react_is__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _utils_Subscription__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../utils/Subscription */ "./node_modules/react-redux/es/utils/Subscription.js");
/* harmony import */ var _utils_PropTypes__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../utils/PropTypes */ "./node_modules/react-redux/es/utils/PropTypes.js");










var hotReloadingVersion = 0;
var dummyState = {};

function noop() {}

function makeSelectorStateful(sourceSelector, store) {
  // wrap the selector in an object that tracks its results between runs.
  var selector = {
    run: function runComponentSelector(props) {
      try {
        var nextProps = sourceSelector(store.getState(), props);

        if (nextProps !== selector.props || selector.error) {
          selector.shouldComponentUpdate = true;
          selector.props = nextProps;
          selector.error = null;
        }
      } catch (error) {
        selector.shouldComponentUpdate = true;
        selector.error = error;
      }
    }
  };
  return selector;
}

function connectAdvanced(
/*
  selectorFactory is a func that is responsible for returning the selector function used to
  compute new props from state, props, and dispatch. For example:
     export default connectAdvanced((dispatch, options) => (state, props) => ({
      thing: state.things[props.thingId],
      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
    }))(YourComponent)
   Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
   Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
  props. Do not use connectAdvanced directly without memoizing results between calls to your
  selector, otherwise the Connect component will re-render on every state or props change.
*/
selectorFactory, // options object:
_ref) {
  var _contextTypes, _childContextTypes;

  if (_ref === void 0) {
    _ref = {};
  }

  var _ref2 = _ref,
      _ref2$getDisplayName = _ref2.getDisplayName,
      getDisplayName = _ref2$getDisplayName === void 0 ? function (name) {
    return "ConnectAdvanced(" + name + ")";
  } : _ref2$getDisplayName,
      _ref2$methodName = _ref2.methodName,
      methodName = _ref2$methodName === void 0 ? 'connectAdvanced' : _ref2$methodName,
      _ref2$renderCountProp = _ref2.renderCountProp,
      renderCountProp = _ref2$renderCountProp === void 0 ? undefined : _ref2$renderCountProp,
      _ref2$shouldHandleSta = _ref2.shouldHandleStateChanges,
      shouldHandleStateChanges = _ref2$shouldHandleSta === void 0 ? true : _ref2$shouldHandleSta,
      _ref2$storeKey = _ref2.storeKey,
      storeKey = _ref2$storeKey === void 0 ? 'store' : _ref2$storeKey,
      _ref2$withRef = _ref2.withRef,
      withRef = _ref2$withRef === void 0 ? false : _ref2$withRef,
      connectOptions = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_3__["default"])(_ref2, ["getDisplayName", "methodName", "renderCountProp", "shouldHandleStateChanges", "storeKey", "withRef"]);

  var subscriptionKey = storeKey + 'Subscription';
  var version = hotReloadingVersion++;
  var contextTypes = (_contextTypes = {}, _contextTypes[storeKey] = _utils_PropTypes__WEBPACK_IMPORTED_MODULE_9__["storeShape"], _contextTypes[subscriptionKey] = _utils_PropTypes__WEBPACK_IMPORTED_MODULE_9__["subscriptionShape"], _contextTypes);
  var childContextTypes = (_childContextTypes = {}, _childContextTypes[subscriptionKey] = _utils_PropTypes__WEBPACK_IMPORTED_MODULE_9__["subscriptionShape"], _childContextTypes);
  return function wrapWithConnect(WrappedComponent) {
    invariant__WEBPACK_IMPORTED_MODULE_5___default()(Object(react_is__WEBPACK_IMPORTED_MODULE_7__["isValidElementType"])(WrappedComponent), "You must pass a component to the function returned by " + (methodName + ". Instead received " + JSON.stringify(WrappedComponent)));
    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
    var displayName = getDisplayName(wrappedComponentName);

    var selectorFactoryOptions = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__["default"])({}, connectOptions, {
      getDisplayName: getDisplayName,
      methodName: methodName,
      renderCountProp: renderCountProp,
      shouldHandleStateChanges: shouldHandleStateChanges,
      storeKey: storeKey,
      withRef: withRef,
      displayName: displayName,
      wrappedComponentName: wrappedComponentName,
      WrappedComponent: WrappedComponent // TODO Actually fix our use of componentWillReceiveProps

      /* eslint-disable react/no-deprecated */

    });

    var Connect =
    /*#__PURE__*/
    function (_Component) {
      Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(Connect, _Component);

      function Connect(props, context) {
        var _this;

        _this = _Component.call(this, props, context) || this;
        _this.version = version;
        _this.state = {};
        _this.renderCount = 0;
        _this.store = props[storeKey] || context[storeKey];
        _this.propsMode = Boolean(props[storeKey]);
        _this.setWrappedInstance = _this.setWrappedInstance.bind(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__["default"])(Object(_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_1__["default"])(_this)));
        invariant__WEBPACK_IMPORTED_MODULE_5___default()(_this.store, "Could not find \"" + storeKey + "\" in either the context or props of " + ("\"" + displayName + "\". Either wrap the root component in a <Provider>, ") + ("or explicitly pass \"" + storeKey + "\" as a prop to \"" + displayName + "\"."));

        _this.initSelector();

        _this.initSubscription();

        return _this;
      }

      var _proto = Connect.prototype;

      _proto.getChildContext = function getChildContext() {
        var _ref3; // If this component received store from props, its subscription should be transparent
        // to any descendants receiving store+subscription from context; it passes along
        // subscription passed to it. Otherwise, it shadows the parent subscription, which allows
        // Connect to control ordering of notifications to flow top-down.


        var subscription = this.propsMode ? null : this.subscription;
        return _ref3 = {}, _ref3[subscriptionKey] = subscription || this.context[subscriptionKey], _ref3;
      };

      _proto.componentDidMount = function componentDidMount() {
        if (!shouldHandleStateChanges) return; // componentWillMount fires during server side rendering, but componentDidMount and
        // componentWillUnmount do not. Because of this, trySubscribe happens during ...didMount.
        // Otherwise, unsubscription would never take place during SSR, causing a memory leak.
        // To handle the case where a child component may have triggered a state change by
        // dispatching an action in its componentWillMount, we have to re-run the select and maybe
        // re-render.

        this.subscription.trySubscribe();
        this.selector.run(this.props);
        if (this.selector.shouldComponentUpdate) this.forceUpdate();
      };

      _proto.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        this.selector.run(nextProps);
      };

      _proto.shouldComponentUpdate = function shouldComponentUpdate() {
        return this.selector.shouldComponentUpdate;
      };

      _proto.componentWillUnmount = function componentWillUnmount() {
        if (this.subscription) this.subscription.tryUnsubscribe();
        this.subscription = null;
        this.notifyNestedSubs = noop;
        this.store = null;
        this.selector.run = noop;
        this.selector.shouldComponentUpdate = false;
      };

      _proto.getWrappedInstance = function getWrappedInstance() {
        invariant__WEBPACK_IMPORTED_MODULE_5___default()(withRef, "To access the wrapped instance, you need to specify " + ("{ withRef: true } in the options argument of the " + methodName + "() call."));
        return this.wrappedInstance;
      };

      _proto.setWrappedInstance = function setWrappedInstance(ref) {
        this.wrappedInstance = ref;
      };

      _proto.initSelector = function initSelector() {
        var sourceSelector = selectorFactory(this.store.dispatch, selectorFactoryOptions);
        this.selector = makeSelectorStateful(sourceSelector, this.store);
        this.selector.run(this.props);
      };

      _proto.initSubscription = function initSubscription() {
        if (!shouldHandleStateChanges) return; // parentSub's source should match where store came from: props vs. context. A component
        // connected to the store via props shouldn't use subscription from context, or vice versa.

        var parentSub = (this.propsMode ? this.props : this.context)[subscriptionKey];
        this.subscription = new _utils_Subscription__WEBPACK_IMPORTED_MODULE_8__["default"](this.store, parentSub, this.onStateChange.bind(this)); // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in
        // the middle of the notification loop, where `this.subscription` will then be null. An
        // extra null check every change can be avoided by copying the method onto `this` and then
        // replacing it with a no-op on unmount. This can probably be avoided if Subscription's
        // listeners logic is changed to not call listeners that have been unsubscribed in the
        // middle of the notification loop.

        this.notifyNestedSubs = this.subscription.notifyNestedSubs.bind(this.subscription);
      };

      _proto.onStateChange = function onStateChange() {
        this.selector.run(this.props);

        if (!this.selector.shouldComponentUpdate) {
          this.notifyNestedSubs();
        } else {
          this.componentDidUpdate = this.notifyNestedSubsOnComponentDidUpdate;
          this.setState(dummyState);
        }
      };

      _proto.notifyNestedSubsOnComponentDidUpdate = function notifyNestedSubsOnComponentDidUpdate() {
        // `componentDidUpdate` is conditionally implemented when `onStateChange` determines it
        // needs to notify nested subs. Once called, it unimplements itself until further state
        // changes occur. Doing it this way vs having a permanent `componentDidUpdate` that does
        // a boolean check every time avoids an extra method call most of the time, resulting
        // in some perf boost.
        this.componentDidUpdate = undefined;
        this.notifyNestedSubs();
      };

      _proto.isSubscribed = function isSubscribed() {
        return Boolean(this.subscription) && this.subscription.isSubscribed();
      };

      _proto.addExtraProps = function addExtraProps(props) {
        if (!withRef && !renderCountProp && !(this.propsMode && this.subscription)) return props; // make a shallow copy so that fields added don't leak to the original selector.
        // this is especially important for 'ref' since that's a reference back to the component
        // instance. a singleton memoized selector would then be holding a reference to the
        // instance, preventing the instance from being garbage collected, and that would be bad

        var withExtras = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_2__["default"])({}, props);

        if (withRef) withExtras.ref = this.setWrappedInstance;
        if (renderCountProp) withExtras[renderCountProp] = this.renderCount++;
        if (this.propsMode && this.subscription) withExtras[subscriptionKey] = this.subscription;
        return withExtras;
      };

      _proto.render = function render() {
        var selector = this.selector;
        selector.shouldComponentUpdate = false;

        if (selector.error) {
          throw selector.error;
        } else {
          return Object(react__WEBPACK_IMPORTED_MODULE_6__["createElement"])(WrappedComponent, this.addExtraProps(selector.props));
        }
      };

      return Connect;
    }(react__WEBPACK_IMPORTED_MODULE_6__["Component"]);
    /* eslint-enable react/no-deprecated */


    Connect.WrappedComponent = WrappedComponent;
    Connect.displayName = displayName;
    Connect.childContextTypes = childContextTypes;
    Connect.contextTypes = contextTypes;
    Connect.propTypes = contextTypes;

    if (true) {
      Connect.prototype.componentWillUpdate = function componentWillUpdate() {
        var _this2 = this; // We are hot reloading!


        if (this.version !== version) {
          this.version = version;
          this.initSelector(); // If any connected descendants don't hot reload (and resubscribe in the process), their
          // listeners will be lost when we unsubscribe. Unfortunately, by copying over all
          // listeners, this does mean that the old versions of connected descendants will still be
          // notified of state changes; however, their onStateChange function is a no-op so this
          // isn't a huge deal.

          var oldListeners = [];

          if (this.subscription) {
            oldListeners = this.subscription.listeners.get();
            this.subscription.tryUnsubscribe();
          }

          this.initSubscription();

          if (shouldHandleStateChanges) {
            this.subscription.trySubscribe();
            oldListeners.forEach(function (listener) {
              return _this2.subscription.listeners.subscribe(listener);
            });
          }
        }
      };
    }

    return hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_4___default()(Connect, WrappedComponent);
  };
}

/***/ }),

/***/ "./node_modules/react-redux/es/connect/connect.js":
/*!********************************************************!*\
  !*** ./node_modules/react-redux/es/connect/connect.js ***!
  \********************************************************/
/*! exports provided: createConnect, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createConnect", function() { return createConnect; });
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
/* harmony import */ var _components_connectAdvanced__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/connectAdvanced */ "./node_modules/react-redux/es/components/connectAdvanced.js");
/* harmony import */ var _utils_shallowEqual__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/shallowEqual */ "./node_modules/react-redux/es/utils/shallowEqual.js");
/* harmony import */ var _mapDispatchToProps__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mapDispatchToProps */ "./node_modules/react-redux/es/connect/mapDispatchToProps.js");
/* harmony import */ var _mapStateToProps__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./mapStateToProps */ "./node_modules/react-redux/es/connect/mapStateToProps.js");
/* harmony import */ var _mergeProps__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./mergeProps */ "./node_modules/react-redux/es/connect/mergeProps.js");
/* harmony import */ var _selectorFactory__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./selectorFactory */ "./node_modules/react-redux/es/connect/selectorFactory.js");








/*
  connect is a facade over connectAdvanced. It turns its args into a compatible
  selectorFactory, which has the signature:

    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
  
  connect passes its args to connectAdvanced as options, which will in turn pass them to
  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

  selectorFactory returns a final props selector from its mapStateToProps,
  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
  mergePropsFactories, and pure args.

  The resulting final props selector is called by the Connect component instance whenever
  it receives new props or store state.
 */

function match(arg, factories, name) {
  for (var i = factories.length - 1; i >= 0; i--) {
    var result = factories[i](arg);
    if (result) return result;
  }

  return function (dispatch, options) {
    throw new Error("Invalid value of type " + typeof arg + " for " + name + " argument when connecting component " + options.wrappedComponentName + ".");
  };
}

function strictEqual(a, b) {
  return a === b;
} // createConnect with default args builds the 'official' connect behavior. Calling it with
// different options opens up some testing and extensibility scenarios


function createConnect(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$connectHOC = _ref.connectHOC,
      connectHOC = _ref$connectHOC === void 0 ? _components_connectAdvanced__WEBPACK_IMPORTED_MODULE_2__["default"] : _ref$connectHOC,
      _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,
      mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? _mapStateToProps__WEBPACK_IMPORTED_MODULE_5__["default"] : _ref$mapStateToPropsF,
      _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,
      mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? _mapDispatchToProps__WEBPACK_IMPORTED_MODULE_4__["default"] : _ref$mapDispatchToPro,
      _ref$mergePropsFactor = _ref.mergePropsFactories,
      mergePropsFactories = _ref$mergePropsFactor === void 0 ? _mergeProps__WEBPACK_IMPORTED_MODULE_6__["default"] : _ref$mergePropsFactor,
      _ref$selectorFactory = _ref.selectorFactory,
      selectorFactory = _ref$selectorFactory === void 0 ? _selectorFactory__WEBPACK_IMPORTED_MODULE_7__["default"] : _ref$selectorFactory;

  return function connect(mapStateToProps, mapDispatchToProps, mergeProps, _ref2) {
    if (_ref2 === void 0) {
      _ref2 = {};
    }

    var _ref3 = _ref2,
        _ref3$pure = _ref3.pure,
        pure = _ref3$pure === void 0 ? true : _ref3$pure,
        _ref3$areStatesEqual = _ref3.areStatesEqual,
        areStatesEqual = _ref3$areStatesEqual === void 0 ? strictEqual : _ref3$areStatesEqual,
        _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual,
        areOwnPropsEqual = _ref3$areOwnPropsEqua === void 0 ? _utils_shallowEqual__WEBPACK_IMPORTED_MODULE_3__["default"] : _ref3$areOwnPropsEqua,
        _ref3$areStatePropsEq = _ref3.areStatePropsEqual,
        areStatePropsEqual = _ref3$areStatePropsEq === void 0 ? _utils_shallowEqual__WEBPACK_IMPORTED_MODULE_3__["default"] : _ref3$areStatePropsEq,
        _ref3$areMergedPropsE = _ref3.areMergedPropsEqual,
        areMergedPropsEqual = _ref3$areMergedPropsE === void 0 ? _utils_shallowEqual__WEBPACK_IMPORTED_MODULE_3__["default"] : _ref3$areMergedPropsE,
        extraOptions = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(_ref3, ["pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual"]);

    var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');
    var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');
    var initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');
    return connectHOC(selectorFactory, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({
      // used in error messages
      methodName: 'connect',
      // used to compute Connect's displayName from the wrapped component's displayName.
      getDisplayName: function getDisplayName(name) {
        return "Connect(" + name + ")";
      },
      // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes
      shouldHandleStateChanges: Boolean(mapStateToProps),
      // passed through to selectorFactory
      initMapStateToProps: initMapStateToProps,
      initMapDispatchToProps: initMapDispatchToProps,
      initMergeProps: initMergeProps,
      pure: pure,
      areStatesEqual: areStatesEqual,
      areOwnPropsEqual: areOwnPropsEqual,
      areStatePropsEqual: areStatePropsEqual,
      areMergedPropsEqual: areMergedPropsEqual
    }, extraOptions));
  };
}
/* harmony default export */ __webpack_exports__["default"] = (createConnect());

/***/ }),

/***/ "./node_modules/react-redux/es/connect/mapDispatchToProps.js":
/*!*******************************************************************!*\
  !*** ./node_modules/react-redux/es/connect/mapDispatchToProps.js ***!
  \*******************************************************************/
/*! exports provided: whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "whenMapDispatchToPropsIsFunction", function() { return whenMapDispatchToPropsIsFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "whenMapDispatchToPropsIsMissing", function() { return whenMapDispatchToPropsIsMissing; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "whenMapDispatchToPropsIsObject", function() { return whenMapDispatchToPropsIsObject; });
/* harmony import */ var redux__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! redux */ "./node_modules/redux/es/redux.js");
/* harmony import */ var _wrapMapToProps__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./wrapMapToProps */ "./node_modules/react-redux/es/connect/wrapMapToProps.js");


function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
  return typeof mapDispatchToProps === 'function' ? Object(_wrapMapToProps__WEBPACK_IMPORTED_MODULE_1__["wrapMapToPropsFunc"])(mapDispatchToProps, 'mapDispatchToProps') : undefined;
}
function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
  return !mapDispatchToProps ? Object(_wrapMapToProps__WEBPACK_IMPORTED_MODULE_1__["wrapMapToPropsConstant"])(function (dispatch) {
    return {
      dispatch: dispatch
    };
  }) : undefined;
}
function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
  return mapDispatchToProps && typeof mapDispatchToProps === 'object' ? Object(_wrapMapToProps__WEBPACK_IMPORTED_MODULE_1__["wrapMapToPropsConstant"])(function (dispatch) {
    return Object(redux__WEBPACK_IMPORTED_MODULE_0__["bindActionCreators"])(mapDispatchToProps, dispatch);
  }) : undefined;
}
/* harmony default export */ __webpack_exports__["default"] = ([whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject]);

/***/ }),

/***/ "./node_modules/react-redux/es/connect/mapStateToProps.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-redux/es/connect/mapStateToProps.js ***!
  \****************************************************************/
/*! exports provided: whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "whenMapStateToPropsIsFunction", function() { return whenMapStateToPropsIsFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "whenMapStateToPropsIsMissing", function() { return whenMapStateToPropsIsMissing; });
/* harmony import */ var _wrapMapToProps__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wrapMapToProps */ "./node_modules/react-redux/es/connect/wrapMapToProps.js");

function whenMapStateToPropsIsFunction(mapStateToProps) {
  return typeof mapStateToProps === 'function' ? Object(_wrapMapToProps__WEBPACK_IMPORTED_MODULE_0__["wrapMapToPropsFunc"])(mapStateToProps, 'mapStateToProps') : undefined;
}
function whenMapStateToPropsIsMissing(mapStateToProps) {
  return !mapStateToProps ? Object(_wrapMapToProps__WEBPACK_IMPORTED_MODULE_0__["wrapMapToPropsConstant"])(function () {
    return {};
  }) : undefined;
}
/* harmony default export */ __webpack_exports__["default"] = ([whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing]);

/***/ }),

/***/ "./node_modules/react-redux/es/connect/mergeProps.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-redux/es/connect/mergeProps.js ***!
  \***********************************************************/
/*! exports provided: defaultMergeProps, wrapMergePropsFunc, whenMergePropsIsFunction, whenMergePropsIsOmitted, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "defaultMergeProps", function() { return defaultMergeProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wrapMergePropsFunc", function() { return wrapMergePropsFunc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "whenMergePropsIsFunction", function() { return whenMergePropsIsFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "whenMergePropsIsOmitted", function() { return whenMergePropsIsOmitted; });
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _utils_verifyPlainObject__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/verifyPlainObject */ "./node_modules/react-redux/es/utils/verifyPlainObject.js");


function defaultMergeProps(stateProps, dispatchProps, ownProps) {
  return Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, ownProps, stateProps, dispatchProps);
}
function wrapMergePropsFunc(mergeProps) {
  return function initMergePropsProxy(dispatch, _ref) {
    var displayName = _ref.displayName,
        pure = _ref.pure,
        areMergedPropsEqual = _ref.areMergedPropsEqual;
    var hasRunOnce = false;
    var mergedProps;
    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);

      if (hasRunOnce) {
        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
      } else {
        hasRunOnce = true;
        mergedProps = nextMergedProps;
        if (true) Object(_utils_verifyPlainObject__WEBPACK_IMPORTED_MODULE_1__["default"])(mergedProps, displayName, 'mergeProps');
      }

      return mergedProps;
    };
  };
}
function whenMergePropsIsFunction(mergeProps) {
  return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;
}
function whenMergePropsIsOmitted(mergeProps) {
  return !mergeProps ? function () {
    return defaultMergeProps;
  } : undefined;
}
/* harmony default export */ __webpack_exports__["default"] = ([whenMergePropsIsFunction, whenMergePropsIsOmitted]);

/***/ }),

/***/ "./node_modules/react-redux/es/connect/selectorFactory.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-redux/es/connect/selectorFactory.js ***!
  \****************************************************************/
/*! exports provided: impureFinalPropsSelectorFactory, pureFinalPropsSelectorFactory, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "impureFinalPropsSelectorFactory", function() { return impureFinalPropsSelectorFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "pureFinalPropsSelectorFactory", function() { return pureFinalPropsSelectorFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return finalPropsSelectorFactory; });
/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
/* harmony import */ var _verifySubselectors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./verifySubselectors */ "./node_modules/react-redux/es/connect/verifySubselectors.js");


function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
  return function impureFinalPropsSelector(state, ownProps) {
    return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
  };
}
function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
  var areStatesEqual = _ref.areStatesEqual,
      areOwnPropsEqual = _ref.areOwnPropsEqual,
      areStatePropsEqual = _ref.areStatePropsEqual;
  var hasRunAtLeastOnce = false;
  var state;
  var ownProps;
  var stateProps;
  var dispatchProps;
  var mergedProps;

  function handleFirstCall(firstState, firstOwnProps) {
    state = firstState;
    ownProps = firstOwnProps;
    stateProps = mapStateToProps(state, ownProps);
    dispatchProps = mapDispatchToProps(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    hasRunAtLeastOnce = true;
    return mergedProps;
  }

  function handleNewPropsAndNewState() {
    stateProps = mapStateToProps(state, ownProps);
    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }

  function handleNewProps() {
    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);
    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }

  function handleNewState() {
    var nextStateProps = mapStateToProps(state, ownProps);
    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
    stateProps = nextStateProps;
    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }

  function handleSubsequentCalls(nextState, nextOwnProps) {
    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
    var stateChanged = !areStatesEqual(nextState, state);
    state = nextState;
    ownProps = nextOwnProps;
    if (propsChanged && stateChanged) return handleNewPropsAndNewState();
    if (propsChanged) return handleNewProps();
    if (stateChanged) return handleNewState();
    return mergedProps;
  }

  return function pureFinalPropsSelector(nextState, nextOwnProps) {
    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
  };
} // TODO: Add more comments
// If pure is true, the selector returned by selectorFactory will memoize its results,
// allowing connectAdvanced's shouldComponentUpdate to return false if final
// props have not changed. If false, the selector will always return a new
// object and shouldComponentUpdate will always return true.

function finalPropsSelectorFactory(dispatch, _ref2) {
  var initMapStateToProps = _ref2.initMapStateToProps,
      initMapDispatchToProps = _ref2.initMapDispatchToProps,
      initMergeProps = _ref2.initMergeProps,
      options = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(_ref2, ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"]);

  var mapStateToProps = initMapStateToProps(dispatch, options);
  var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
  var mergeProps = initMergeProps(dispatch, options);

  if (true) {
    Object(_verifySubselectors__WEBPACK_IMPORTED_MODULE_1__["default"])(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);
  }

  var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;
  return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
}

/***/ }),

/***/ "./node_modules/react-redux/es/connect/verifySubselectors.js":
/*!*******************************************************************!*\
  !*** ./node_modules/react-redux/es/connect/verifySubselectors.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return verifySubselectors; });
/* harmony import */ var _utils_warning__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/warning */ "./node_modules/react-redux/es/utils/warning.js");


function verify(selector, methodName, displayName) {
  if (!selector) {
    throw new Error("Unexpected value for " + methodName + " in " + displayName + ".");
  } else if (methodName === 'mapStateToProps' || methodName === 'mapDispatchToProps') {
    if (!selector.hasOwnProperty('dependsOnOwnProps')) {
      Object(_utils_warning__WEBPACK_IMPORTED_MODULE_0__["default"])("The selector for " + methodName + " of " + displayName + " did not specify a value for dependsOnOwnProps.");
    }
  }
}

function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {
  verify(mapStateToProps, 'mapStateToProps', displayName);
  verify(mapDispatchToProps, 'mapDispatchToProps', displayName);
  verify(mergeProps, 'mergeProps', displayName);
}

/***/ }),

/***/ "./node_modules/react-redux/es/connect/wrapMapToProps.js":
/*!***************************************************************!*\
  !*** ./node_modules/react-redux/es/connect/wrapMapToProps.js ***!
  \***************************************************************/
/*! exports provided: wrapMapToPropsConstant, getDependsOnOwnProps, wrapMapToPropsFunc */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wrapMapToPropsConstant", function() { return wrapMapToPropsConstant; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getDependsOnOwnProps", function() { return getDependsOnOwnProps; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "wrapMapToPropsFunc", function() { return wrapMapToPropsFunc; });
/* harmony import */ var _utils_verifyPlainObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/verifyPlainObject */ "./node_modules/react-redux/es/utils/verifyPlainObject.js");

function wrapMapToPropsConstant(getConstant) {
  return function initConstantSelector(dispatch, options) {
    var constant = getConstant(dispatch, options);

    function constantSelector() {
      return constant;
    }

    constantSelector.dependsOnOwnProps = false;
    return constantSelector;
  };
} // dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args
// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine
// whether mapToProps needs to be invoked when props have changed.
// 
// A length of one signals that mapToProps does not depend on props from the parent component.
// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and
// therefore not reporting its length accurately..

function getDependsOnOwnProps(mapToProps) {
  return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
} // Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,
// this function wraps mapToProps in a proxy function which does several things:
// 
//  * Detects whether the mapToProps function being called depends on props, which
//    is used by selectorFactory to decide if it should reinvoke on props changes.
//    
//  * On first call, handles mapToProps if returns another function, and treats that
//    new function as the true mapToProps for subsequent calls.
//    
//  * On first call, verifies the first result is a plain object, in order to warn
//    the developer that their mapToProps function is not returning a valid result.
//    

function wrapMapToPropsFunc(mapToProps, methodName) {
  return function initProxySelector(dispatch, _ref) {
    var displayName = _ref.displayName;

    var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
    }; // allow detectFactoryAndVerify to get ownProps


    proxy.dependsOnOwnProps = true;

    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
      proxy.mapToProps = mapToProps;
      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
      var props = proxy(stateOrDispatch, ownProps);

      if (typeof props === 'function') {
        proxy.mapToProps = props;
        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
        props = proxy(stateOrDispatch, ownProps);
      }

      if (true) Object(_utils_verifyPlainObject__WEBPACK_IMPORTED_MODULE_0__["default"])(props, displayName, methodName);
      return props;
    };

    return proxy;
  };
}

/***/ }),

/***/ "./node_modules/react-redux/es/index.js":
/*!**********************************************!*\
  !*** ./node_modules/react-redux/es/index.js ***!
  \**********************************************/
/*! exports provided: Provider, createProvider, connectAdvanced, connect */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _components_Provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/Provider */ "./node_modules/react-redux/es/components/Provider.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Provider", function() { return _components_Provider__WEBPACK_IMPORTED_MODULE_0__["default"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "createProvider", function() { return _components_Provider__WEBPACK_IMPORTED_MODULE_0__["createProvider"]; });

/* harmony import */ var _components_connectAdvanced__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/connectAdvanced */ "./node_modules/react-redux/es/components/connectAdvanced.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "connectAdvanced", function() { return _components_connectAdvanced__WEBPACK_IMPORTED_MODULE_1__["default"]; });

/* harmony import */ var _connect_connect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./connect/connect */ "./node_modules/react-redux/es/connect/connect.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "connect", function() { return _connect_connect__WEBPACK_IMPORTED_MODULE_2__["default"]; });






/***/ }),

/***/ "./node_modules/react-redux/es/utils/PropTypes.js":
/*!********************************************************!*\
  !*** ./node_modules/react-redux/es/utils/PropTypes.js ***!
  \********************************************************/
/*! exports provided: subscriptionShape, storeShape */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "subscriptionShape", function() { return subscriptionShape; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "storeShape", function() { return storeShape; });
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_0__);

var subscriptionShape = prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.shape({
  trySubscribe: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.func.isRequired,
  tryUnsubscribe: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.func.isRequired,
  notifyNestedSubs: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.func.isRequired,
  isSubscribed: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.func.isRequired
});
var storeShape = prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.shape({
  subscribe: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.func.isRequired,
  dispatch: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.func.isRequired,
  getState: prop_types__WEBPACK_IMPORTED_MODULE_0___default.a.func.isRequired
});

/***/ }),

/***/ "./node_modules/react-redux/es/utils/Subscription.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-redux/es/utils/Subscription.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Subscription; });
// encapsulates the subscription logic for connecting a component to the redux store, as
// well as nesting subscriptions of descendant components, so that we can ensure the
// ancestor components re-render before descendants
var CLEARED = null;
var nullListeners = {
  notify: function notify() {}
};

function createListenerCollection() {
  // the current/next pattern is copied from redux's createStore code.
  // TODO: refactor+expose that code to be reusable here?
  var current = [];
  var next = [];
  return {
    clear: function clear() {
      next = CLEARED;
      current = CLEARED;
    },
    notify: function notify() {
      var listeners = current = next;

      for (var i = 0; i < listeners.length; i++) {
        listeners[i]();
      }
    },
    get: function get() {
      return next;
    },
    subscribe: function subscribe(listener) {
      var isSubscribed = true;
      if (next === current) next = current.slice();
      next.push(listener);
      return function unsubscribe() {
        if (!isSubscribed || current === CLEARED) return;
        isSubscribed = false;
        if (next === current) next = current.slice();
        next.splice(next.indexOf(listener), 1);
      };
    }
  };
}

var Subscription =
/*#__PURE__*/
function () {
  function Subscription(store, parentSub, onStateChange) {
    this.store = store;
    this.parentSub = parentSub;
    this.onStateChange = onStateChange;
    this.unsubscribe = null;
    this.listeners = nullListeners;
  }

  var _proto = Subscription.prototype;

  _proto.addNestedSub = function addNestedSub(listener) {
    this.trySubscribe();
    return this.listeners.subscribe(listener);
  };

  _proto.notifyNestedSubs = function notifyNestedSubs() {
    this.listeners.notify();
  };

  _proto.isSubscribed = function isSubscribed() {
    return Boolean(this.unsubscribe);
  };

  _proto.trySubscribe = function trySubscribe() {
    if (!this.unsubscribe) {
      this.unsubscribe = this.parentSub ? this.parentSub.addNestedSub(this.onStateChange) : this.store.subscribe(this.onStateChange);
      this.listeners = createListenerCollection();
    }
  };

  _proto.tryUnsubscribe = function tryUnsubscribe() {
    if (this.unsubscribe) {
      this.unsubscribe();
      this.unsubscribe = null;
      this.listeners.clear();
      this.listeners = nullListeners;
    }
  };

  return Subscription;
}();



/***/ }),

/***/ "./node_modules/react-redux/es/utils/isPlainObject.js":
/*!************************************************************!*\
  !*** ./node_modules/react-redux/es/utils/isPlainObject.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return isPlainObject; });
/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */
function isPlainObject(obj) {
  if (typeof obj !== 'object' || obj === null) return false;
  var proto = Object.getPrototypeOf(obj);
  if (proto === null) return true;
  var baseProto = proto;

  while (Object.getPrototypeOf(baseProto) !== null) {
    baseProto = Object.getPrototypeOf(baseProto);
  }

  return proto === baseProto;
}

/***/ }),

/***/ "./node_modules/react-redux/es/utils/shallowEqual.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-redux/es/utils/shallowEqual.js ***!
  \***********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return shallowEqual; });
var hasOwn = Object.prototype.hasOwnProperty;

function is(x, y) {
  if (x === y) {
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}

function shallowEqual(objA, objB) {
  if (is(objA, objB)) return true;

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);
  if (keysA.length !== keysB.length) return false;

  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwn.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

/***/ }),

/***/ "./node_modules/react-redux/es/utils/verifyPlainObject.js":
/*!****************************************************************!*\
  !*** ./node_modules/react-redux/es/utils/verifyPlainObject.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return verifyPlainObject; });
/* harmony import */ var _isPlainObject__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isPlainObject */ "./node_modules/react-redux/es/utils/isPlainObject.js");
/* harmony import */ var _warning__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./warning */ "./node_modules/react-redux/es/utils/warning.js");


function verifyPlainObject(value, displayName, methodName) {
  if (!Object(_isPlainObject__WEBPACK_IMPORTED_MODULE_0__["default"])(value)) {
    Object(_warning__WEBPACK_IMPORTED_MODULE_1__["default"])(methodName + "() in " + displayName + " must return a plain object. Instead received " + value + ".");
  }
}

/***/ }),

/***/ "./node_modules/react-redux/es/utils/warning.js":
/*!******************************************************!*\
  !*** ./node_modules/react-redux/es/utils/warning.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return warning; });
/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */
function warning(message) {
  /* eslint-disable no-console */
  if (typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error(message);
  }
  /* eslint-enable no-console */


  try {
    // This error was thrown as a convenience so that if you enable
    // "break on all exceptions" in your console,
    // it would pause the execution at this line.
    throw new Error(message);
    /* eslint-disable no-empty */
  } catch (e) {}
  /* eslint-enable no-empty */

}

/***/ }),

/***/ "./node_modules/react-router-dom/esm/react-router-dom.js":
/*!***************************************************************!*\
  !*** ./node_modules/react-router-dom/esm/react-router-dom.js ***!
  \***************************************************************/
/*! exports provided: BrowserRouter, HashRouter, Link, NavLink, MemoryRouter, Prompt, Redirect, Route, Router, StaticRouter, Switch, generatePath, matchPath, withRouter, __RouterContext */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BrowserRouter", function() { return BrowserRouter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HashRouter", function() { return HashRouter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Link", function() { return Link; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NavLink", function() { return NavLink; });
/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inheritsLoose */ "./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var react_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-router */ "./node_modules/react-router/esm/react-router.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "MemoryRouter", function() { return react_router__WEBPACK_IMPORTED_MODULE_2__["MemoryRouter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Prompt", function() { return react_router__WEBPACK_IMPORTED_MODULE_2__["Prompt"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Redirect", function() { return react_router__WEBPACK_IMPORTED_MODULE_2__["Redirect"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Route", function() { return react_router__WEBPACK_IMPORTED_MODULE_2__["Route"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Router", function() { return react_router__WEBPACK_IMPORTED_MODULE_2__["Router"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StaticRouter", function() { return react_router__WEBPACK_IMPORTED_MODULE_2__["StaticRouter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "Switch", function() { return react_router__WEBPACK_IMPORTED_MODULE_2__["Switch"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "generatePath", function() { return react_router__WEBPACK_IMPORTED_MODULE_2__["generatePath"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "matchPath", function() { return react_router__WEBPACK_IMPORTED_MODULE_2__["matchPath"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "withRouter", function() { return react_router__WEBPACK_IMPORTED_MODULE_2__["withRouter"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "__RouterContext", function() { return react_router__WEBPACK_IMPORTED_MODULE_2__["__RouterContext"]; });

/* harmony import */ var history__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! history */ "./node_modules/history/esm/history.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var tiny_warning__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tiny-warning */ "./node_modules/tiny-warning/dist/tiny-warning.esm.js");
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! tiny-invariant */ "./node_modules/tiny-invariant/dist/tiny-invariant.esm.js");










/**
 * The public API for a <Router> that uses HTML5 history.
 */

var BrowserRouter =
/*#__PURE__*/
function (_React$Component) {
  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(BrowserRouter, _React$Component);

  function BrowserRouter() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.history = Object(history__WEBPACK_IMPORTED_MODULE_3__["createBrowserHistory"])(_this.props);
    return _this;
  }

  var _proto = BrowserRouter.prototype;

  _proto.render = function render() {
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(react_router__WEBPACK_IMPORTED_MODULE_2__["Router"], {
      history: this.history,
      children: this.props.children
    });
  };

  return BrowserRouter;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

if (true) {
  BrowserRouter.propTypes = {
    basename: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.string,
    children: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.node,
    forceRefresh: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.bool,
    getUserConfirmation: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.func,
    keyLength: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.number
  };

  BrowserRouter.prototype.componentDidMount = function () {
     true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_5__["default"])(!this.props.history, "<BrowserRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { BrowserRouter as Router }`.") : undefined;
  };
}
/**
 * The public API for a <Router> that uses window.location.hash.
 */


var HashRouter =
/*#__PURE__*/
function (_React$Component) {
  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(HashRouter, _React$Component);

  function HashRouter() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.history = Object(history__WEBPACK_IMPORTED_MODULE_3__["createHashHistory"])(_this.props);
    return _this;
  }

  var _proto = HashRouter.prototype;

  _proto.render = function render() {
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(react_router__WEBPACK_IMPORTED_MODULE_2__["Router"], {
      history: this.history,
      children: this.props.children
    });
  };

  return HashRouter;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

if (true) {
  HashRouter.propTypes = {
    basename: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.string,
    children: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.node,
    getUserConfirmation: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.func,
    hashType: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.oneOf(["hashbang", "noslash", "slash"])
  };

  HashRouter.prototype.componentDidMount = function () {
     true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_5__["default"])(!this.props.history, "<HashRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { HashRouter as Router }`.") : undefined;
  };
}

function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
/**
 * The public API for rendering a history-aware <a>.
 */


var Link =
/*#__PURE__*/
function (_React$Component) {
  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_0__["default"])(Link, _React$Component);

  function Link() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Link.prototype;

  _proto.handleClick = function handleClick(event, history) {
    try {
      if (this.props.onClick) this.props.onClick(event);
    } catch (ex) {
      event.preventDefault();
      throw ex;
    }

    if (!event.defaultPrevented && // onClick prevented default
    event.button === 0 && ( // ignore everything but left clicks
    !this.props.target || this.props.target === "_self") && // let browser handle "target=_blank" etc.
    !isModifiedEvent(event) // ignore clicks with modifier keys
    ) {
        event.preventDefault();
        var method = this.props.replace ? history.replace : history.push;
        method(this.props.to);
      }
  };

  _proto.render = function render() {
    var _this = this;

    var _this$props = this.props,
        innerRef = _this$props.innerRef,
        replace = _this$props.replace,
        to = _this$props.to,
        rest = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_7__["default"])(_this$props, ["innerRef", "replace", "to"]); // eslint-disable-line no-unused-vars


    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(react_router__WEBPACK_IMPORTED_MODULE_2__["__RouterContext"].Consumer, null, function (context) {
      !context ?  true ? Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_8__["default"])(false, "You should not use <Link> outside a <Router>") : undefined : void 0;
      var location = typeof to === "string" ? Object(history__WEBPACK_IMPORTED_MODULE_3__["createLocation"])(to, null, null, context.location) : to;
      var href = location ? context.history.createHref(location) : "";
      return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement("a", Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_6__["default"])({}, rest, {
        onClick: function onClick(event) {
          return _this.handleClick(event, context.history);
        },
        href: href,
        ref: innerRef
      }));
    });
  };

  return Link;
}(react__WEBPACK_IMPORTED_MODULE_1___default.a.Component);

if (true) {
  var toType = prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.string, prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.object]);
  var innerRefType = prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.string, prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.func, prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.shape({
    current: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.any
  })]);
  Link.propTypes = {
    innerRef: innerRefType,
    onClick: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.func,
    replace: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.bool,
    target: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.string,
    to: toType.isRequired
  };
}

function joinClassnames() {
  for (var _len = arguments.length, classnames = new Array(_len), _key = 0; _key < _len; _key++) {
    classnames[_key] = arguments[_key];
  }

  return classnames.filter(function (i) {
    return i;
  }).join(" ");
}
/**
 * A <Link> wrapper that knows if it's "active" or not.
 */


function NavLink(_ref) {
  var _ref$ariaCurrent = _ref["aria-current"],
      ariaCurrent = _ref$ariaCurrent === void 0 ? "page" : _ref$ariaCurrent,
      _ref$activeClassName = _ref.activeClassName,
      activeClassName = _ref$activeClassName === void 0 ? "active" : _ref$activeClassName,
      activeStyle = _ref.activeStyle,
      classNameProp = _ref.className,
      exact = _ref.exact,
      isActiveProp = _ref.isActive,
      locationProp = _ref.location,
      strict = _ref.strict,
      styleProp = _ref.style,
      to = _ref.to,
      rest = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_7__["default"])(_ref, ["aria-current", "activeClassName", "activeStyle", "className", "exact", "isActive", "location", "strict", "style", "to"]);

  var path = typeof to === "object" ? to.pathname : to; // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202

  var escapedPath = path && path.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");
  return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(react_router__WEBPACK_IMPORTED_MODULE_2__["__RouterContext"].Consumer, null, function (context) {
    !context ?  true ? Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_8__["default"])(false, "You should not use <NavLink> outside a <Router>") : undefined : void 0;
    var pathToMatch = locationProp ? locationProp.pathname : context.location.pathname;
    var match = escapedPath ? Object(react_router__WEBPACK_IMPORTED_MODULE_2__["matchPath"])(pathToMatch, {
      path: escapedPath,
      exact: exact,
      strict: strict
    }) : null;
    var isActive = !!(isActiveProp ? isActiveProp(match, context.location) : match);
    var className = isActive ? joinClassnames(classNameProp, activeClassName) : classNameProp;
    var style = isActive ? Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_6__["default"])({}, styleProp, activeStyle) : styleProp;
    return react__WEBPACK_IMPORTED_MODULE_1___default.a.createElement(Link, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_6__["default"])({
      "aria-current": isActive && ariaCurrent || null,
      className: className,
      style: style,
      to: to
    }, rest));
  });
}

if (true) {
  var ariaCurrentType = prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.oneOf(["page", "step", "location", "date", "time", "true"]);
  NavLink.propTypes = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_6__["default"])({}, Link.propTypes, {
    "aria-current": ariaCurrentType,
    activeClassName: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.string,
    activeStyle: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.object,
    className: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.string,
    exact: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.bool,
    isActive: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.func,
    location: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.object,
    strict: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.bool,
    style: prop_types__WEBPACK_IMPORTED_MODULE_4___default.a.object
  });
}



/***/ }),

/***/ "./node_modules/react-router/esm/react-router.js":
/*!*******************************************************!*\
  !*** ./node_modules/react-router/esm/react-router.js ***!
  \*******************************************************/
/*! exports provided: MemoryRouter, Prompt, Redirect, Route, Router, StaticRouter, Switch, generatePath, matchPath, withRouter, __RouterContext */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MemoryRouter", function() { return MemoryRouter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Prompt", function() { return Prompt; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Redirect", function() { return Redirect; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Route", function() { return Route; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Router", function() { return Router; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StaticRouter", function() { return StaticRouter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Switch", function() { return Switch; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "generatePath", function() { return generatePath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matchPath", function() { return matchPath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "withRouter", function() { return withRouter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__RouterContext", function() { return context; });
/* harmony import */ var mini_create_react_context__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mini-create-react-context */ "./node_modules/mini-create-react-context/dist/esm/index.js");
/* harmony import */ var _babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/inheritsLoose */ "./node_modules/@babel/runtime/helpers/esm/inheritsLoose.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");
/* harmony import */ var prop_types__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var tiny_warning__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! tiny-warning */ "./node_modules/tiny-warning/dist/tiny-warning.esm.js");
/* harmony import */ var history__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! history */ "./node_modules/history/esm/history.js");
/* harmony import */ var tiny_invariant__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! tiny-invariant */ "./node_modules/tiny-invariant/dist/tiny-invariant.esm.js");
/* harmony import */ var path_to_regexp__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! path-to-regexp */ "./node_modules/react-router/node_modules/path-to-regexp/index.js");
/* harmony import */ var path_to_regexp__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(path_to_regexp__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js");
/* harmony import */ var react_is__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(react_is__WEBPACK_IMPORTED_MODULE_9__);
/* harmony import */ var _babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @babel/runtime/helpers/esm/objectWithoutPropertiesLoose */ "./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js");
/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! hoist-non-react-statics */ "./node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js");
/* harmony import */ var hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_11__);











 // TODO: Replace with React.createContext once we can assume React 16+

var createNamedContext = function createNamedContext(name) {
  var context = Object(mini_create_react_context__WEBPACK_IMPORTED_MODULE_0__["default"])();
  context.displayName = name;
  return context;
};

var context =
/*#__PURE__*/
createNamedContext("Router");
/**
 * The public API for putting history on context.
 */

var Router =
/*#__PURE__*/
function (_React$Component) {
  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(Router, _React$Component);

  Router.computeRootMatch = function computeRootMatch(pathname) {
    return {
      path: "/",
      url: "/",
      params: {},
      isExact: pathname === "/"
    };
  };

  function Router(props) {
    var _this;

    _this = _React$Component.call(this, props) || this;
    _this.state = {
      location: props.history.location
    }; // This is a bit of a hack. We have to start listening for location
    // changes here in the constructor in case there are any <Redirect>s
    // on the initial render. If there are, they will replace/push when
    // they mount and since cDM fires in children before parents, we may
    // get a new location before the <Router> is mounted.

    _this._isMounted = false;
    _this._pendingLocation = null;

    if (!props.staticContext) {
      _this.unlisten = props.history.listen(function (location) {
        if (_this._isMounted) {
          _this.setState({
            location: location
          });
        } else {
          _this._pendingLocation = location;
        }
      });
    }

    return _this;
  }

  var _proto = Router.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this._isMounted = true;

    if (this._pendingLocation) {
      this.setState({
        location: this._pendingLocation
      });
    }
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.unlisten) this.unlisten();
  };

  _proto.render = function render() {
    return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(context.Provider, {
      children: this.props.children || null,
      value: {
        history: this.props.history,
        location: this.state.location,
        match: Router.computeRootMatch(this.state.location.pathname),
        staticContext: this.props.staticContext
      }
    });
  };

  return Router;
}(react__WEBPACK_IMPORTED_MODULE_2___default.a.Component);

if (true) {
  Router.propTypes = {
    children: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.node,
    history: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.object.isRequired,
    staticContext: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.object
  };

  Router.prototype.componentDidUpdate = function (prevProps) {
     true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_4__["default"])(prevProps.history === this.props.history, "You cannot change <Router history>") : undefined;
  };
}
/**
 * The public API for a <Router> that stores location in memory.
 */


var MemoryRouter =
/*#__PURE__*/
function (_React$Component) {
  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(MemoryRouter, _React$Component);

  function MemoryRouter() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.history = Object(history__WEBPACK_IMPORTED_MODULE_5__["createMemoryHistory"])(_this.props);
    return _this;
  }

  var _proto = MemoryRouter.prototype;

  _proto.render = function render() {
    return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(Router, {
      history: this.history,
      children: this.props.children
    });
  };

  return MemoryRouter;
}(react__WEBPACK_IMPORTED_MODULE_2___default.a.Component);

if (true) {
  MemoryRouter.propTypes = {
    initialEntries: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.array,
    initialIndex: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.number,
    getUserConfirmation: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.func,
    keyLength: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.number,
    children: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.node
  };

  MemoryRouter.prototype.componentDidMount = function () {
     true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_4__["default"])(!this.props.history, "<MemoryRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { MemoryRouter as Router }`.") : undefined;
  };
}

var Lifecycle =
/*#__PURE__*/
function (_React$Component) {
  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(Lifecycle, _React$Component);

  function Lifecycle() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Lifecycle.prototype;

  _proto.componentDidMount = function componentDidMount() {
    if (this.props.onMount) this.props.onMount.call(this, this);
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (this.props.onUpdate) this.props.onUpdate.call(this, this, prevProps);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.props.onUnmount) this.props.onUnmount.call(this, this);
  };

  _proto.render = function render() {
    return null;
  };

  return Lifecycle;
}(react__WEBPACK_IMPORTED_MODULE_2___default.a.Component);
/**
 * The public API for prompting the user before navigating away from a screen.
 */


function Prompt(_ref) {
  var message = _ref.message,
      _ref$when = _ref.when,
      when = _ref$when === void 0 ? true : _ref$when;
  return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(context.Consumer, null, function (context$$1) {
    !context$$1 ?  true ? Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_6__["default"])(false, "You should not use <Prompt> outside a <Router>") : undefined : void 0;
    if (!when || context$$1.staticContext) return null;
    var method = context$$1.history.block;
    return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(Lifecycle, {
      onMount: function onMount(self) {
        self.release = method(message);
      },
      onUpdate: function onUpdate(self, prevProps) {
        if (prevProps.message !== message) {
          self.release();
          self.release = method(message);
        }
      },
      onUnmount: function onUnmount(self) {
        self.release();
      },
      message: message
    });
  });
}

if (true) {
  var messageType = prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.func, prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string]);
  Prompt.propTypes = {
    when: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.bool,
    message: messageType.isRequired
  };
}

var cache = {};
var cacheLimit = 10000;
var cacheCount = 0;

function compilePath(path) {
  if (cache[path]) return cache[path];
  var generator = path_to_regexp__WEBPACK_IMPORTED_MODULE_7___default.a.compile(path);

  if (cacheCount < cacheLimit) {
    cache[path] = generator;
    cacheCount++;
  }

  return generator;
}
/**
 * Public API for generating a URL pathname from a path and parameters.
 */


function generatePath(path, params) {
  if (path === void 0) {
    path = "/";
  }

  if (params === void 0) {
    params = {};
  }

  return path === "/" ? path : compilePath(path)(params, {
    pretty: true
  });
}
/**
 * The public API for navigating programmatically with a component.
 */


function Redirect(_ref) {
  var computedMatch = _ref.computedMatch,
      to = _ref.to,
      _ref$push = _ref.push,
      push = _ref$push === void 0 ? false : _ref$push;
  return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(context.Consumer, null, function (context$$1) {
    !context$$1 ?  true ? Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_6__["default"])(false, "You should not use <Redirect> outside a <Router>") : undefined : void 0;
    var history = context$$1.history,
        staticContext = context$$1.staticContext;
    var method = push ? history.push : history.replace;
    var location = Object(history__WEBPACK_IMPORTED_MODULE_5__["createLocation"])(computedMatch ? typeof to === "string" ? generatePath(to, computedMatch.params) : Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_8__["default"])({}, to, {
      pathname: generatePath(to.pathname, computedMatch.params)
    }) : to); // When rendering in a static context,
    // set the new location immediately.

    if (staticContext) {
      method(location);
      return null;
    }

    return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(Lifecycle, {
      onMount: function onMount() {
        method(location);
      },
      onUpdate: function onUpdate(self, prevProps) {
        var prevLocation = Object(history__WEBPACK_IMPORTED_MODULE_5__["createLocation"])(prevProps.to);

        if (!Object(history__WEBPACK_IMPORTED_MODULE_5__["locationsAreEqual"])(prevLocation, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_8__["default"])({}, location, {
          key: prevLocation.key
        }))) {
          method(location);
        }
      },
      to: to
    });
  });
}

if (true) {
  Redirect.propTypes = {
    push: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.bool,
    from: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string,
    to: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string, prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.object]).isRequired
  };
}

var cache$1 = {};
var cacheLimit$1 = 10000;
var cacheCount$1 = 0;

function compilePath$1(path, options) {
  var cacheKey = "" + options.end + options.strict + options.sensitive;
  var pathCache = cache$1[cacheKey] || (cache$1[cacheKey] = {});
  if (pathCache[path]) return pathCache[path];
  var keys = [];
  var regexp = path_to_regexp__WEBPACK_IMPORTED_MODULE_7___default()(path, keys, options);
  var result = {
    regexp: regexp,
    keys: keys
  };

  if (cacheCount$1 < cacheLimit$1) {
    pathCache[path] = result;
    cacheCount$1++;
  }

  return result;
}
/**
 * Public API for matching a URL pathname to a path.
 */


function matchPath(pathname, options) {
  if (options === void 0) {
    options = {};
  }

  if (typeof options === "string") options = {
    path: options
  };
  var _options = options,
      path = _options.path,
      _options$exact = _options.exact,
      exact = _options$exact === void 0 ? false : _options$exact,
      _options$strict = _options.strict,
      strict = _options$strict === void 0 ? false : _options$strict,
      _options$sensitive = _options.sensitive,
      sensitive = _options$sensitive === void 0 ? false : _options$sensitive;
  var paths = [].concat(path);
  return paths.reduce(function (matched, path) {
    if (!path) return null;
    if (matched) return matched;

    var _compilePath = compilePath$1(path, {
      end: exact,
      strict: strict,
      sensitive: sensitive
    }),
        regexp = _compilePath.regexp,
        keys = _compilePath.keys;

    var match = regexp.exec(pathname);
    if (!match) return null;
    var url = match[0],
        values = match.slice(1);
    var isExact = pathname === url;
    if (exact && !isExact) return null;
    return {
      path: path,
      // the path used to match
      url: path === "/" && url === "" ? "/" : url,
      // the matched portion of the URL
      isExact: isExact,
      // whether or not we matched exactly
      params: keys.reduce(function (memo, key, index) {
        memo[key.name] = values[index];
        return memo;
      }, {})
    };
  }, null);
}

function isEmptyChildren(children) {
  return react__WEBPACK_IMPORTED_MODULE_2___default.a.Children.count(children) === 0;
}
/**
 * The public API for matching a single path and rendering.
 */


var Route =
/*#__PURE__*/
function (_React$Component) {
  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(Route, _React$Component);

  function Route() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Route.prototype;

  _proto.render = function render() {
    var _this = this;

    return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(context.Consumer, null, function (context$$1) {
      !context$$1 ?  true ? Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_6__["default"])(false, "You should not use <Route> outside a <Router>") : undefined : void 0;
      var location = _this.props.location || context$$1.location;
      var match = _this.props.computedMatch ? _this.props.computedMatch // <Switch> already computed the match for us
      : _this.props.path ? matchPath(location.pathname, _this.props) : context$$1.match;

      var props = Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_8__["default"])({}, context$$1, {
        location: location,
        match: match
      });

      var _this$props = _this.props,
          children = _this$props.children,
          component = _this$props.component,
          render = _this$props.render; // Preact uses an empty array as children by
      // default, so use null if that's the case.

      if (Array.isArray(children) && children.length === 0) {
        children = null;
      }

      if (typeof children === "function") {
        children = children(props);

        if (children === undefined) {
          if (true) {
            var path = _this.props.path;
             true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_4__["default"])(false, "You returned `undefined` from the `children` function of " + ("<Route" + (path ? " path=\"" + path + "\"" : "") + ">, but you ") + "should have returned a React element or `null`") : undefined;
          }

          children = null;
        }
      }

      return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(context.Provider, {
        value: props
      }, children && !isEmptyChildren(children) ? children : props.match ? component ? react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(component, props) : render ? render(props) : null : null);
    });
  };

  return Route;
}(react__WEBPACK_IMPORTED_MODULE_2___default.a.Component);

if (true) {
  Route.propTypes = {
    children: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.func, prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.node]),
    component: function component(props, propName) {
      if (props[propName] && !Object(react_is__WEBPACK_IMPORTED_MODULE_9__["isValidElementType"])(props[propName])) {
        return new Error("Invalid prop 'component' supplied to 'Route': the prop is not a valid React component");
      }
    },
    exact: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.bool,
    location: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.object,
    path: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string, prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.arrayOf(prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string)]),
    render: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.func,
    sensitive: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.bool,
    strict: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.bool
  };

  Route.prototype.componentDidMount = function () {
     true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_4__["default"])(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.component), "You should not use <Route component> and <Route children> in the same route; <Route component> will be ignored") : undefined;
     true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_4__["default"])(!(this.props.children && !isEmptyChildren(this.props.children) && this.props.render), "You should not use <Route render> and <Route children> in the same route; <Route render> will be ignored") : undefined;
     true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_4__["default"])(!(this.props.component && this.props.render), "You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored") : undefined;
  };

  Route.prototype.componentDidUpdate = function (prevProps) {
     true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_4__["default"])(!(this.props.location && !prevProps.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.') : undefined;
     true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_4__["default"])(!(!this.props.location && prevProps.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.') : undefined;
  };
}

function addLeadingSlash(path) {
  return path.charAt(0) === "/" ? path : "/" + path;
}

function addBasename(basename, location) {
  if (!basename) return location;
  return Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_8__["default"])({}, location, {
    pathname: addLeadingSlash(basename) + location.pathname
  });
}

function stripBasename(basename, location) {
  if (!basename) return location;
  var base = addLeadingSlash(basename);
  if (location.pathname.indexOf(base) !== 0) return location;
  return Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_8__["default"])({}, location, {
    pathname: location.pathname.substr(base.length)
  });
}

function createURL(location) {
  return typeof location === "string" ? location : Object(history__WEBPACK_IMPORTED_MODULE_5__["createPath"])(location);
}

function staticHandler(methodName) {
  return function () {
     true ? Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_6__["default"])(false, "You cannot %s with <StaticRouter>", methodName) : undefined;
  };
}

function noop() {}
/**
 * The public top-level API for a "static" <Router>, so-called because it
 * can't actually change the current location. Instead, it just records
 * location changes in a context object. Useful mainly in testing and
 * server-rendering scenarios.
 */


var StaticRouter =
/*#__PURE__*/
function (_React$Component) {
  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(StaticRouter, _React$Component);

  function StaticRouter() {
    var _this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;

    _this.handlePush = function (location) {
      return _this.navigateTo(location, "PUSH");
    };

    _this.handleReplace = function (location) {
      return _this.navigateTo(location, "REPLACE");
    };

    _this.handleListen = function () {
      return noop;
    };

    _this.handleBlock = function () {
      return noop;
    };

    return _this;
  }

  var _proto = StaticRouter.prototype;

  _proto.navigateTo = function navigateTo(location, action) {
    var _this$props = this.props,
        _this$props$basename = _this$props.basename,
        basename = _this$props$basename === void 0 ? "" : _this$props$basename,
        _this$props$context = _this$props.context,
        context = _this$props$context === void 0 ? {} : _this$props$context;
    context.action = action;
    context.location = addBasename(basename, Object(history__WEBPACK_IMPORTED_MODULE_5__["createLocation"])(location));
    context.url = createURL(context.location);
  };

  _proto.render = function render() {
    var _this$props2 = this.props,
        _this$props2$basename = _this$props2.basename,
        basename = _this$props2$basename === void 0 ? "" : _this$props2$basename,
        _this$props2$context = _this$props2.context,
        context = _this$props2$context === void 0 ? {} : _this$props2$context,
        _this$props2$location = _this$props2.location,
        location = _this$props2$location === void 0 ? "/" : _this$props2$location,
        rest = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_10__["default"])(_this$props2, ["basename", "context", "location"]);

    var history = {
      createHref: function createHref(path) {
        return addLeadingSlash(basename + createURL(path));
      },
      action: "POP",
      location: stripBasename(basename, Object(history__WEBPACK_IMPORTED_MODULE_5__["createLocation"])(location)),
      push: this.handlePush,
      replace: this.handleReplace,
      go: staticHandler("go"),
      goBack: staticHandler("goBack"),
      goForward: staticHandler("goForward"),
      listen: this.handleListen,
      block: this.handleBlock
    };
    return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(Router, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_8__["default"])({}, rest, {
      history: history,
      staticContext: context
    }));
  };

  return StaticRouter;
}(react__WEBPACK_IMPORTED_MODULE_2___default.a.Component);

if (true) {
  StaticRouter.propTypes = {
    basename: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string,
    context: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.object,
    location: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string, prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.object])
  };

  StaticRouter.prototype.componentDidMount = function () {
     true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_4__["default"])(!this.props.history, "<StaticRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { StaticRouter as Router }`.") : undefined;
  };
}
/**
 * The public API for rendering the first <Route> that matches.
 */


var Switch =
/*#__PURE__*/
function (_React$Component) {
  Object(_babel_runtime_helpers_esm_inheritsLoose__WEBPACK_IMPORTED_MODULE_1__["default"])(Switch, _React$Component);

  function Switch() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = Switch.prototype;

  _proto.render = function render() {
    var _this = this;

    return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(context.Consumer, null, function (context$$1) {
      !context$$1 ?  true ? Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_6__["default"])(false, "You should not use <Switch> outside a <Router>") : undefined : void 0;
      var location = _this.props.location || context$$1.location;
      var element, match; // We use React.Children.forEach instead of React.Children.toArray().find()
      // here because toArray adds keys to all child elements and we do not want
      // to trigger an unmount/remount for two <Route>s that render the same
      // component at different URLs.

      react__WEBPACK_IMPORTED_MODULE_2___default.a.Children.forEach(_this.props.children, function (child) {
        if (match == null && react__WEBPACK_IMPORTED_MODULE_2___default.a.isValidElement(child)) {
          element = child;
          var path = child.props.path || child.props.from;
          match = path ? matchPath(location.pathname, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_8__["default"])({}, child.props, {
            path: path
          })) : context$$1.match;
        }
      });
      return match ? react__WEBPACK_IMPORTED_MODULE_2___default.a.cloneElement(element, {
        location: location,
        computedMatch: match
      }) : null;
    });
  };

  return Switch;
}(react__WEBPACK_IMPORTED_MODULE_2___default.a.Component);

if (true) {
  Switch.propTypes = {
    children: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.node,
    location: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.object
  };

  Switch.prototype.componentDidUpdate = function (prevProps) {
     true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_4__["default"])(!(this.props.location && !prevProps.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.') : undefined;
     true ? Object(tiny_warning__WEBPACK_IMPORTED_MODULE_4__["default"])(!(!this.props.location && prevProps.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.') : undefined;
  };
}
/**
 * A public higher-order component to access the imperative API
 */


function withRouter(Component) {
  var displayName = "withRouter(" + (Component.displayName || Component.name) + ")";

  var C = function C(props) {
    var wrappedComponentRef = props.wrappedComponentRef,
        remainingProps = Object(_babel_runtime_helpers_esm_objectWithoutPropertiesLoose__WEBPACK_IMPORTED_MODULE_10__["default"])(props, ["wrappedComponentRef"]);

    return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(context.Consumer, null, function (context$$1) {
      !context$$1 ?  true ? Object(tiny_invariant__WEBPACK_IMPORTED_MODULE_6__["default"])(false, "You should not use <" + displayName + " /> outside a <Router>") : undefined : void 0;
      return react__WEBPACK_IMPORTED_MODULE_2___default.a.createElement(Component, Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_8__["default"])({}, remainingProps, context$$1, {
        ref: wrappedComponentRef
      }));
    });
  };

  C.displayName = displayName;
  C.WrappedComponent = Component;

  if (true) {
    C.propTypes = {
      wrappedComponentRef: prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.oneOfType([prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.string, prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.func, prop_types__WEBPACK_IMPORTED_MODULE_3___default.a.object])
    };
  }

  return hoist_non_react_statics__WEBPACK_IMPORTED_MODULE_11___default()(C, Component);
}

if (true) {
  if (typeof window !== "undefined") {
    var global = window;
    var key = "__react_router_build__";
    var buildNames = {
      cjs: "CommonJS",
      esm: "ES modules",
      umd: "UMD"
    };

    if (global[key] && global[key] !== "esm") {
      var initialBuildName = buildNames[global[key]];
      var secondaryBuildName = buildNames["esm"]; // TODO: Add link to article that explains in detail how to avoid
      // loading 2 different builds.

      throw new Error("You are loading the " + secondaryBuildName + " build of React Router " + ("on a page that is already running the " + initialBuildName + " ") + "build, so things won't work right.");
    }

    global[key] = "esm";
  }
}



/***/ }),

/***/ "./node_modules/react-router/node_modules/isarray/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/react-router/node_modules/isarray/index.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

/***/ }),

/***/ "./node_modules/react-router/node_modules/path-to-regexp/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-router/node_modules/path-to-regexp/index.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var isarray = __webpack_require__(/*! isarray */ "./node_modules/react-router/node_modules/isarray/index.js");
/**
 * Expose `pathToRegexp`.
 */


module.exports = pathToRegexp;
module.exports.parse = parse;
module.exports.compile = compile;
module.exports.tokensToFunction = tokensToFunction;
module.exports.tokensToRegExp = tokensToRegExp;
/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */

var PATH_REGEXP = new RegExp([// Match escaped characters that would otherwise appear in future matches.
// This allows the user to escape special characters that won't transform.
'(\\\\.)', // Match Express-style parameters and un-named parameters with a prefix
// and optional suffixes. Matches appear as:
//
// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
// "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
'([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'].join('|'), 'g');
/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */

function parse(str, options) {
  var tokens = [];
  var key = 0;
  var index = 0;
  var path = '';
  var defaultDelimiter = options && options.delimiter || '/';
  var res;

  while ((res = PATH_REGEXP.exec(str)) != null) {
    var m = res[0];
    var escaped = res[1];
    var offset = res.index;
    path += str.slice(index, offset);
    index = offset + m.length; // Ignore already escaped sequences.

    if (escaped) {
      path += escaped[1];
      continue;
    }

    var next = str[index];
    var prefix = res[2];
    var name = res[3];
    var capture = res[4];
    var group = res[5];
    var modifier = res[6];
    var asterisk = res[7]; // Push the current path onto the tokens.

    if (path) {
      tokens.push(path);
      path = '';
    }

    var partial = prefix != null && next != null && next !== prefix;
    var repeat = modifier === '+' || modifier === '*';
    var optional = modifier === '?' || modifier === '*';
    var delimiter = res[2] || defaultDelimiter;
    var pattern = capture || group;
    tokens.push({
      name: name || key++,
      prefix: prefix || '',
      delimiter: delimiter,
      optional: optional,
      repeat: repeat,
      partial: partial,
      asterisk: !!asterisk,
      pattern: pattern ? escapeGroup(pattern) : asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?'
    });
  } // Match any characters still remaining.


  if (index < str.length) {
    path += str.substr(index);
  } // If the path exists, push it onto the end.


  if (path) {
    tokens.push(path);
  }

  return tokens;
}
/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */


function compile(str, options) {
  return tokensToFunction(parse(str, options));
}
/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */


function encodeURIComponentPretty(str) {
  return encodeURI(str).replace(/[\/?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
  });
}
/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */


function encodeAsterisk(str) {
  return encodeURI(str).replace(/[?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
  });
}
/**
 * Expose a method for transforming tokens into the path function.
 */


function tokensToFunction(tokens) {
  // Compile all the tokens into regexps.
  var matches = new Array(tokens.length); // Compile all the patterns before compilation.

  for (var i = 0; i < tokens.length; i++) {
    if (typeof tokens[i] === 'object') {
      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
    }
  }

  return function (obj, opts) {
    var path = '';
    var data = obj || {};
    var options = opts || {};
    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];

      if (typeof token === 'string') {
        path += token;
        continue;
      }

      var value = data[token.name];
      var segment;

      if (value == null) {
        if (token.optional) {
          // Prepend partial segment prefixes.
          if (token.partial) {
            path += token.prefix;
          }

          continue;
        } else {
          throw new TypeError('Expected "' + token.name + '" to be defined');
        }
      }

      if (isarray(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`');
        }

        if (value.length === 0) {
          if (token.optional) {
            continue;
          } else {
            throw new TypeError('Expected "' + token.name + '" to not be empty');
          }
        }

        for (var j = 0; j < value.length; j++) {
          segment = encode(value[j]);

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`');
          }

          path += (j === 0 ? token.prefix : token.delimiter) + segment;
        }

        continue;
      }

      segment = token.asterisk ? encodeAsterisk(value) : encode(value);

      if (!matches[i].test(segment)) {
        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
      }

      path += token.prefix + segment;
    }

    return path;
  };
}
/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */


function escapeString(str) {
  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1');
}
/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */


function escapeGroup(group) {
  return group.replace(/([=!:$\/()])/g, '\\$1');
}
/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */


function attachKeys(re, keys) {
  re.keys = keys;
  return re;
}
/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */


function flags(options) {
  return options.sensitive ? '' : 'i';
}
/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */


function regexpToRegexp(path, keys) {
  // Use a negative lookahead to match only capturing groups.
  var groups = path.source.match(/\((?!\?)/g);

  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
      });
    }
  }

  return attachKeys(path, keys);
}
/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */


function arrayToRegexp(path, keys, options) {
  var parts = [];

  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options).source);
  }

  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));
  return attachKeys(regexp, keys);
}
/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */


function stringToRegexp(path, keys, options) {
  return tokensToRegExp(parse(path, options), keys, options);
}
/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */


function tokensToRegExp(tokens, keys, options) {
  if (!isarray(keys)) {
    options =
    /** @type {!Object} */
    keys || options;
    keys = [];
  }

  options = options || {};
  var strict = options.strict;
  var end = options.end !== false;
  var route = ''; // Iterate over the tokens and create our regexp string.

  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];

    if (typeof token === 'string') {
      route += escapeString(token);
    } else {
      var prefix = escapeString(token.prefix);
      var capture = '(?:' + token.pattern + ')';
      keys.push(token);

      if (token.repeat) {
        capture += '(?:' + prefix + capture + ')*';
      }

      if (token.optional) {
        if (!token.partial) {
          capture = '(?:' + prefix + '(' + capture + '))?';
        } else {
          capture = prefix + '(' + capture + ')?';
        }
      } else {
        capture = prefix + '(' + capture + ')';
      }

      route += capture;
    }
  }

  var delimiter = escapeString(options.delimiter || '/');
  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter; // In non-strict mode we allow a slash at the end of match. If the path to
  // match already ends with a slash, we remove it for consistency. The slash
  // is valid at the end of a path match, not in the middle. This is important
  // in non-ending mode, where "/test/" shouldn't match "/test//route".

  if (!strict) {
    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
  }

  if (end) {
    route += '$';
  } else {
    // In non-ending mode, we need the capturing groups to match as much as
    // possible by using a positive lookahead to the end or next path segment.
    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
  }

  return attachKeys(new RegExp('^' + route, flags(options)), keys);
}
/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */


function pathToRegexp(path, keys, options) {
  if (!isarray(keys)) {
    options =
    /** @type {!Object} */
    keys || options;
    keys = [];
  }

  options = options || {};

  if (path instanceof RegExp) {
    return regexpToRegexp(path,
    /** @type {!Array} */
    keys);
  }

  if (isarray(path)) {
    return arrayToRegexp(
    /** @type {!Array} */
    path,
    /** @type {!Array} */
    keys, options);
  }

  return stringToRegexp(
  /** @type {string} */
  path,
  /** @type {!Array} */
  keys, options);
}

/***/ }),

/***/ "./node_modules/react/cjs/react.development.js":
/*!*****************************************************!*\
  !*** ./node_modules/react/cjs/react.development.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.8.6
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


if (true) {
  (function () {
    'use strict';

    var _assign = __webpack_require__(/*! object-assign */ "./node_modules/object-assign/index.js");

    var checkPropTypes = __webpack_require__(/*! prop-types/checkPropTypes */ "./node_modules/prop-types/checkPropTypes.js"); // TODO: this is special because it gets imported during build.


    var ReactVersion = '16.8.6'; // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
    // nor polyfill, then a plain number is used for performance.

    var hasSymbol = typeof Symbol === 'function' && Symbol.for;
    var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
    var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
    var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
    var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
    var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
    var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
    var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace;
    var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
    var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
    var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
    var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
    var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
    var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
    var FAUX_ITERATOR_SYMBOL = '@@iterator';

    function getIteratorFn(maybeIterable) {
      if (maybeIterable === null || typeof maybeIterable !== 'object') {
        return null;
      }

      var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

      if (typeof maybeIterator === 'function') {
        return maybeIterator;
      }

      return null;
    }
    /**
     * Use invariant() to assert state which your program assumes to be true.
     *
     * Provide sprintf-style format (only %s is supported) and arguments
     * to provide information about what broke and what you were
     * expecting.
     *
     * The invariant message will be stripped in production, but the invariant
     * will remain to ensure logic does not differ in production.
     */


    var validateFormat = function () {};

    {
      validateFormat = function (format) {
        if (format === undefined) {
          throw new Error('invariant requires an error message argument');
        }
      };
    }

    function invariant(condition, format, a, b, c, d, e, f) {
      validateFormat(format);

      if (!condition) {
        var error = void 0;

        if (format === undefined) {
          error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(format.replace(/%s/g, function () {
            return args[argIndex++];
          }));
          error.name = 'Invariant Violation';
        }

        error.framesToPop = 1; // we don't care about invariant's own frame

        throw error;
      }
    } // Relying on the `invariant()` implementation lets us
    // preserve the format and params in the www builds.

    /**
     * Forked from fbjs/warning:
     * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
     *
     * Only change is we use console.warn instead of console.error,
     * and do nothing when 'console' is not supported.
     * This really simplifies the code.
     * ---
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */


    var lowPriorityWarning = function () {};

    {
      var printWarning = function (format) {
        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }

        var argIndex = 0;
        var message = 'Warning: ' + format.replace(/%s/g, function () {
          return args[argIndex++];
        });

        if (typeof console !== 'undefined') {
          console.warn(message);
        }

        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          throw new Error(message);
        } catch (x) {}
      };

      lowPriorityWarning = function (condition, format) {
        if (format === undefined) {
          throw new Error('`lowPriorityWarning(condition, format, ...args)` requires a warning ' + 'message argument');
        }

        if (!condition) {
          for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
            args[_key2 - 2] = arguments[_key2];
          }

          printWarning.apply(undefined, [format].concat(args));
        }
      };
    }
    var lowPriorityWarning$1 = lowPriorityWarning;
    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var warningWithoutStack = function () {};

    {
      warningWithoutStack = function (condition, format) {
        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        if (format === undefined) {
          throw new Error('`warningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
        }

        if (args.length > 8) {
          // Check before the condition to catch violations early.
          throw new Error('warningWithoutStack() currently supports at most 8 arguments.');
        }

        if (condition) {
          return;
        }

        if (typeof console !== 'undefined') {
          var argsWithFormat = args.map(function (item) {
            return '' + item;
          });
          argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
          // breaks IE9: https://github.com/facebook/react/issues/13610

          Function.prototype.apply.call(console.error, console, argsWithFormat);
        }

        try {
          // --- Welcome to debugging React ---
          // This error was thrown as a convenience so that you can use this stack
          // to find the callsite that caused this warning to fire.
          var argIndex = 0;
          var message = 'Warning: ' + format.replace(/%s/g, function () {
            return args[argIndex++];
          });
          throw new Error(message);
        } catch (x) {}
      };
    }
    var warningWithoutStack$1 = warningWithoutStack;
    var didWarnStateUpdateForUnmountedComponent = {};

    function warnNoop(publicInstance, callerName) {
      {
        var _constructor = publicInstance.constructor;
        var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
        var warningKey = componentName + '.' + callerName;

        if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
          return;
        }

        warningWithoutStack$1(false, "Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);
        didWarnStateUpdateForUnmountedComponent[warningKey] = true;
      }
    }
    /**
     * This is the abstract API for an update queue.
     */


    var ReactNoopUpdateQueue = {
      /**
       * Checks whether or not this composite component is mounted.
       * @param {ReactClass} publicInstance The instance we want to test.
       * @return {boolean} True if mounted, false otherwise.
       * @protected
       * @final
       */
      isMounted: function (publicInstance) {
        return false;
      },

      /**
       * Forces an update. This should only be invoked when it is known with
       * certainty that we are **not** in a DOM transaction.
       *
       * You may want to call this when you know that some deeper aspect of the
       * component's state has changed but `setState` was not called.
       *
       * This will not invoke `shouldComponentUpdate`, but it will invoke
       * `componentWillUpdate` and `componentDidUpdate`.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {?function} callback Called after component is updated.
       * @param {?string} callerName name of the calling function in the public API.
       * @internal
       */
      enqueueForceUpdate: function (publicInstance, callback, callerName) {
        warnNoop(publicInstance, 'forceUpdate');
      },

      /**
       * Replaces all of the state. Always use this or `setState` to mutate state.
       * You should treat `this.state` as immutable.
       *
       * There is no guarantee that `this.state` will be immediately updated, so
       * accessing `this.state` after calling this method may return the old value.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} completeState Next state.
       * @param {?function} callback Called after component is updated.
       * @param {?string} callerName name of the calling function in the public API.
       * @internal
       */
      enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
        warnNoop(publicInstance, 'replaceState');
      },

      /**
       * Sets a subset of the state. This only exists because _pendingState is
       * internal. This provides a merging strategy that is not available to deep
       * properties which is confusing. TODO: Expose pendingState or don't use it
       * during the merge.
       *
       * @param {ReactClass} publicInstance The instance that should rerender.
       * @param {object} partialState Next partial state to be merged with state.
       * @param {?function} callback Called after component is updated.
       * @param {?string} Name of the calling function in the public API.
       * @internal
       */
      enqueueSetState: function (publicInstance, partialState, callback, callerName) {
        warnNoop(publicInstance, 'setState');
      }
    };
    var emptyObject = {};
    {
      Object.freeze(emptyObject);
    }
    /**
     * Base class helpers for the updating state of a component.
     */

    function Component(props, context, updater) {
      this.props = props;
      this.context = context; // If a component has string refs, we will assign a different object later.

      this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
      // renderer.

      this.updater = updater || ReactNoopUpdateQueue;
    }

    Component.prototype.isReactComponent = {};
    /**
     * Sets a subset of the state. Always use this to mutate
     * state. You should treat `this.state` as immutable.
     *
     * There is no guarantee that `this.state` will be immediately updated, so
     * accessing `this.state` after calling this method may return the old value.
     *
     * There is no guarantee that calls to `setState` will run synchronously,
     * as they may eventually be batched together.  You can provide an optional
     * callback that will be executed when the call to setState is actually
     * completed.
     *
     * When a function is provided to setState, it will be called at some point in
     * the future (not synchronously). It will be called with the up to date
     * component arguments (state, props, context). These values can be different
     * from this.* because your function may be called after receiveProps but before
     * shouldComponentUpdate, and this new state, props, and context will not yet be
     * assigned to this.
     *
     * @param {object|function} partialState Next partial state or function to
     *        produce next partial state to be merged with current state.
     * @param {?function} callback Called after state is updated.
     * @final
     * @protected
     */

    Component.prototype.setState = function (partialState, callback) {
      !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : void 0;
      this.updater.enqueueSetState(this, partialState, callback, 'setState');
    };
    /**
     * Forces an update. This should only be invoked when it is known with
     * certainty that we are **not** in a DOM transaction.
     *
     * You may want to call this when you know that some deeper aspect of the
     * component's state has changed but `setState` was not called.
     *
     * This will not invoke `shouldComponentUpdate`, but it will invoke
     * `componentWillUpdate` and `componentDidUpdate`.
     *
     * @param {?function} callback Called after update is complete.
     * @final
     * @protected
     */


    Component.prototype.forceUpdate = function (callback) {
      this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
    };
    /**
     * Deprecated APIs. These APIs used to exist on classic React classes but since
     * we would like to deprecate them, we're not going to move them over to this
     * modern base class. Instead, we define a getter that warns if it's accessed.
     */


    {
      var deprecatedAPIs = {
        isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
        replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
      };

      var defineDeprecationWarning = function (methodName, info) {
        Object.defineProperty(Component.prototype, methodName, {
          get: function () {
            lowPriorityWarning$1(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);
            return undefined;
          }
        });
      };

      for (var fnName in deprecatedAPIs) {
        if (deprecatedAPIs.hasOwnProperty(fnName)) {
          defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
        }
      }
    }

    function ComponentDummy() {}

    ComponentDummy.prototype = Component.prototype;
    /**
     * Convenience component with default shallow equality check for sCU.
     */

    function PureComponent(props, context, updater) {
      this.props = props;
      this.context = context; // If a component has string refs, we will assign a different object later.

      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;
    }

    var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
    pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

    _assign(pureComponentPrototype, Component.prototype);

    pureComponentPrototype.isPureReactComponent = true; // an immutable object with a single mutable value

    function createRef() {
      var refObject = {
        current: null
      };
      {
        Object.seal(refObject);
      }
      return refObject;
    }
    /**
     * Keeps track of the current dispatcher.
     */


    var ReactCurrentDispatcher = {
      /**
       * @internal
       * @type {ReactComponent}
       */
      current: null
    };
    /**
     * Keeps track of the current owner.
     *
     * The current owner is the component who should own any components that are
     * currently being constructed.
     */

    var ReactCurrentOwner = {
      /**
       * @internal
       * @type {ReactComponent}
       */
      current: null
    };
    var BEFORE_SLASH_RE = /^(.*)[\\\/]/;

    var describeComponentFrame = function (name, source, ownerName) {
      var sourceInfo = '';

      if (source) {
        var path = source.fileName;
        var fileName = path.replace(BEFORE_SLASH_RE, '');
        {
          // In DEV, include code for a common special case:
          // prefer "folder/index.js" instead of just "index.js".
          if (/^index\./.test(fileName)) {
            var match = path.match(BEFORE_SLASH_RE);

            if (match) {
              var pathBeforeSlash = match[1];

              if (pathBeforeSlash) {
                var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
                fileName = folderName + '/' + fileName;
              }
            }
          }
        }
        sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
      } else if (ownerName) {
        sourceInfo = ' (created by ' + ownerName + ')';
      }

      return '\n    in ' + (name || 'Unknown') + sourceInfo;
    };

    var Resolved = 1;

    function refineResolvedLazyComponent(lazyComponent) {
      return lazyComponent._status === Resolved ? lazyComponent._result : null;
    }

    function getWrappedName(outerType, innerType, wrapperName) {
      var functionName = innerType.displayName || innerType.name || '';
      return outerType.displayName || (functionName !== '' ? wrapperName + '(' + functionName + ')' : wrapperName);
    }

    function getComponentName(type) {
      if (type == null) {
        // Host root, text node or just invalid type.
        return null;
      }

      {
        if (typeof type.tag === 'number') {
          warningWithoutStack$1(false, 'Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
        }
      }

      if (typeof type === 'function') {
        return type.displayName || type.name || null;
      }

      if (typeof type === 'string') {
        return type;
      }

      switch (type) {
        case REACT_CONCURRENT_MODE_TYPE:
          return 'ConcurrentMode';

        case REACT_FRAGMENT_TYPE:
          return 'Fragment';

        case REACT_PORTAL_TYPE:
          return 'Portal';

        case REACT_PROFILER_TYPE:
          return 'Profiler';

        case REACT_STRICT_MODE_TYPE:
          return 'StrictMode';

        case REACT_SUSPENSE_TYPE:
          return 'Suspense';
      }

      if (typeof type === 'object') {
        switch (type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            return 'Context.Consumer';

          case REACT_PROVIDER_TYPE:
            return 'Context.Provider';

          case REACT_FORWARD_REF_TYPE:
            return getWrappedName(type, type.render, 'ForwardRef');

          case REACT_MEMO_TYPE:
            return getComponentName(type.type);

          case REACT_LAZY_TYPE:
            {
              var thenable = type;
              var resolvedThenable = refineResolvedLazyComponent(thenable);

              if (resolvedThenable) {
                return getComponentName(resolvedThenable);
              }
            }
        }
      }

      return null;
    }

    var ReactDebugCurrentFrame = {};
    var currentlyValidatingElement = null;

    function setCurrentlyValidatingElement(element) {
      {
        currentlyValidatingElement = element;
      }
    }

    {
      // Stack implementation injected by the current renderer.
      ReactDebugCurrentFrame.getCurrentStack = null;

      ReactDebugCurrentFrame.getStackAddendum = function () {
        var stack = ''; // Add an extra top frame while an element is being validated

        if (currentlyValidatingElement) {
          var name = getComponentName(currentlyValidatingElement.type);
          var owner = currentlyValidatingElement._owner;
          stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
        } // Delegate to the injected renderer-specific implementation


        var impl = ReactDebugCurrentFrame.getCurrentStack;

        if (impl) {
          stack += impl() || '';
        }

        return stack;
      };
    }
    var ReactSharedInternals = {
      ReactCurrentDispatcher: ReactCurrentDispatcher,
      ReactCurrentOwner: ReactCurrentOwner,
      // Used by renderers to avoid bundling object-assign twice in UMD bundles:
      assign: _assign
    };
    {
      _assign(ReactSharedInternals, {
        // These should not be included in production.
        ReactDebugCurrentFrame: ReactDebugCurrentFrame,
        // Shim for React DOM 16.0.0 which still destructured (but not used) this.
        // TODO: remove in React 17.0.
        ReactComponentTreeHook: {}
      });
    }
    /**
     * Similar to invariant but only logs a warning if the condition is not met.
     * This can be used to log issues in development environments in critical
     * paths. Removing the logging code for production environments will keep the
     * same logic and follow the same code paths.
     */

    var warning = warningWithoutStack$1;
    {
      warning = function (condition, format) {
        if (condition) {
          return;
        }

        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var stack = ReactDebugCurrentFrame.getStackAddendum(); // eslint-disable-next-line react-internal/warning-and-invariant-args

        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }

        warningWithoutStack$1.apply(undefined, [false, format + '%s'].concat(args, [stack]));
      };
    }
    var warning$1 = warning;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var RESERVED_PROPS = {
      key: true,
      ref: true,
      __self: true,
      __source: true
    };
    var specialPropKeyWarningShown = void 0;
    var specialPropRefWarningShown = void 0;

    function hasValidRef(config) {
      {
        if (hasOwnProperty.call(config, 'ref')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.ref !== undefined;
    }

    function hasValidKey(config) {
      {
        if (hasOwnProperty.call(config, 'key')) {
          var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

          if (getter && getter.isReactWarning) {
            return false;
          }
        }
      }
      return config.key !== undefined;
    }

    function defineKeyPropWarningGetter(props, displayName) {
      var warnAboutAccessingKey = function () {
        if (!specialPropKeyWarningShown) {
          specialPropKeyWarningShown = true;
          warningWithoutStack$1(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
        }
      };

      warnAboutAccessingKey.isReactWarning = true;
      Object.defineProperty(props, 'key', {
        get: warnAboutAccessingKey,
        configurable: true
      });
    }

    function defineRefPropWarningGetter(props, displayName) {
      var warnAboutAccessingRef = function () {
        if (!specialPropRefWarningShown) {
          specialPropRefWarningShown = true;
          warningWithoutStack$1(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
        }
      };

      warnAboutAccessingRef.isReactWarning = true;
      Object.defineProperty(props, 'ref', {
        get: warnAboutAccessingRef,
        configurable: true
      });
    }
    /**
     * Factory method to create a new React element. This no longer adheres to
     * the class pattern, so do not use new to call it. Also, no instanceof check
     * will work. Instead test $$typeof field against Symbol.for('react.element') to check
     * if something is a React Element.
     *
     * @param {*} type
     * @param {*} key
     * @param {string|object} ref
     * @param {*} self A *temporary* helper to detect places where `this` is
     * different from the `owner` when React.createElement is called, so that we
     * can warn. We want to get rid of owner and replace string `ref`s with arrow
     * functions, and as long as `this` and owner are the same, there will be no
     * change in behavior.
     * @param {*} source An annotation object (added by a transpiler or otherwise)
     * indicating filename, line number, and/or other information.
     * @param {*} owner
     * @param {*} props
     * @internal
     */


    var ReactElement = function (type, key, ref, self, source, owner, props) {
      var element = {
        // This tag allows us to uniquely identify this as a React Element
        $$typeof: REACT_ELEMENT_TYPE,
        // Built-in properties that belong on the element
        type: type,
        key: key,
        ref: ref,
        props: props,
        // Record the component responsible for creating this element.
        _owner: owner
      };
      {
        // The validation flag is currently mutative. We put it on
        // an external backing store so that we can freeze the whole object.
        // This can be replaced with a WeakMap once they are implemented in
        // commonly used development environments.
        element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
        // the validation flag non-enumerable (where possible, which should
        // include every environment we run tests in), so the test framework
        // ignores it.

        Object.defineProperty(element._store, 'validated', {
          configurable: false,
          enumerable: false,
          writable: true,
          value: false
        }); // self and source are DEV only properties.

        Object.defineProperty(element, '_self', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: self
        }); // Two elements created in two different places should be considered
        // equal for testing purposes and therefore we hide it from enumeration.

        Object.defineProperty(element, '_source', {
          configurable: false,
          enumerable: false,
          writable: false,
          value: source
        });

        if (Object.freeze) {
          Object.freeze(element.props);
          Object.freeze(element);
        }
      }
      return element;
    };
    /**
     * Create and return a new ReactElement of the given type.
     * See https://reactjs.org/docs/react-api.html#createelement
     */


    function createElement(type, config, children) {
      var propName = void 0; // Reserved names are extracted

      var props = {};
      var key = null;
      var ref = null;
      var self = null;
      var source = null;

      if (config != null) {
        if (hasValidRef(config)) {
          ref = config.ref;
        }

        if (hasValidKey(config)) {
          key = '' + config.key;
        }

        self = config.__self === undefined ? null : config.__self;
        source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            props[propName] = config[propName];
          }
        }
      } // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.


      var childrenLength = arguments.length - 2;

      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);

        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }

        {
          if (Object.freeze) {
            Object.freeze(childArray);
          }
        }
        props.children = childArray;
      } // Resolve default props


      if (type && type.defaultProps) {
        var defaultProps = type.defaultProps;

        for (propName in defaultProps) {
          if (props[propName] === undefined) {
            props[propName] = defaultProps[propName];
          }
        }
      }

      {
        if (key || ref) {
          var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

          if (key) {
            defineKeyPropWarningGetter(props, displayName);
          }

          if (ref) {
            defineRefPropWarningGetter(props, displayName);
          }
        }
      }
      return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
    }
    /**
     * Return a function that produces ReactElements of a given type.
     * See https://reactjs.org/docs/react-api.html#createfactory
     */


    function cloneAndReplaceKey(oldElement, newKey) {
      var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
      return newElement;
    }
    /**
     * Clone and return a new ReactElement using element as the starting point.
     * See https://reactjs.org/docs/react-api.html#cloneelement
     */


    function cloneElement(element, config, children) {
      !!(element === null || element === undefined) ? invariant(false, 'React.cloneElement(...): The argument must be a React element, but you passed %s.', element) : void 0;
      var propName = void 0; // Original props are copied

      var props = _assign({}, element.props); // Reserved names are extracted


      var key = element.key;
      var ref = element.ref; // Self is preserved since the owner is preserved.

      var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
      // transpiler, and the original source is probably a better indicator of the
      // true owner.

      var source = element._source; // Owner will be preserved, unless ref is overridden

      var owner = element._owner;

      if (config != null) {
        if (hasValidRef(config)) {
          // Silently steal the ref from the parent.
          ref = config.ref;
          owner = ReactCurrentOwner.current;
        }

        if (hasValidKey(config)) {
          key = '' + config.key;
        } // Remaining properties override existing props


        var defaultProps = void 0;

        if (element.type && element.type.defaultProps) {
          defaultProps = element.type.defaultProps;
        }

        for (propName in config) {
          if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
            if (config[propName] === undefined && defaultProps !== undefined) {
              // Resolve default props
              props[propName] = defaultProps[propName];
            } else {
              props[propName] = config[propName];
            }
          }
        }
      } // Children can be more than one argument, and those are transferred onto
      // the newly allocated props object.


      var childrenLength = arguments.length - 2;

      if (childrenLength === 1) {
        props.children = children;
      } else if (childrenLength > 1) {
        var childArray = Array(childrenLength);

        for (var i = 0; i < childrenLength; i++) {
          childArray[i] = arguments[i + 2];
        }

        props.children = childArray;
      }

      return ReactElement(element.type, key, ref, self, source, owner, props);
    }
    /**
     * Verifies the object is a ReactElement.
     * See https://reactjs.org/docs/react-api.html#isvalidelement
     * @param {?object} object
     * @return {boolean} True if `object` is a ReactElement.
     * @final
     */


    function isValidElement(object) {
      return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
    }

    var SEPARATOR = '.';
    var SUBSEPARATOR = ':';
    /**
     * Escape and wrap key so it is safe to use as a reactid
     *
     * @param {string} key to be escaped.
     * @return {string} the escaped key.
     */

    function escape(key) {
      var escapeRegex = /[=:]/g;
      var escaperLookup = {
        '=': '=0',
        ':': '=2'
      };
      var escapedString = ('' + key).replace(escapeRegex, function (match) {
        return escaperLookup[match];
      });
      return '$' + escapedString;
    }
    /**
     * TODO: Test that a single child and an array with one item have the same key
     * pattern.
     */


    var didWarnAboutMaps = false;
    var userProvidedKeyEscapeRegex = /\/+/g;

    function escapeUserProvidedKey(text) {
      return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
    }

    var POOL_SIZE = 10;
    var traverseContextPool = [];

    function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
      if (traverseContextPool.length) {
        var traverseContext = traverseContextPool.pop();
        traverseContext.result = mapResult;
        traverseContext.keyPrefix = keyPrefix;
        traverseContext.func = mapFunction;
        traverseContext.context = mapContext;
        traverseContext.count = 0;
        return traverseContext;
      } else {
        return {
          result: mapResult,
          keyPrefix: keyPrefix,
          func: mapFunction,
          context: mapContext,
          count: 0
        };
      }
    }

    function releaseTraverseContext(traverseContext) {
      traverseContext.result = null;
      traverseContext.keyPrefix = null;
      traverseContext.func = null;
      traverseContext.context = null;
      traverseContext.count = 0;

      if (traverseContextPool.length < POOL_SIZE) {
        traverseContextPool.push(traverseContext);
      }
    }
    /**
     * @param {?*} children Children tree container.
     * @param {!string} nameSoFar Name of the key path so far.
     * @param {!function} callback Callback to invoke with each child found.
     * @param {?*} traverseContext Used to pass information throughout the traversal
     * process.
     * @return {!number} The number of children in this subtree.
     */


    function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
      var type = typeof children;

      if (type === 'undefined' || type === 'boolean') {
        // All of the above are perceived as null.
        children = null;
      }

      var invokeCallback = false;

      if (children === null) {
        invokeCallback = true;
      } else {
        switch (type) {
          case 'string':
          case 'number':
            invokeCallback = true;
            break;

          case 'object':
            switch (children.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                invokeCallback = true;
            }

        }
      }

      if (invokeCallback) {
        callback(traverseContext, children, // If it's the only child, treat the name as if it was wrapped in an array
        // so that it's consistent if the number of children grows.
        nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
        return 1;
      }

      var child = void 0;
      var nextName = void 0;
      var subtreeCount = 0; // Count of children found in the current subtree.

      var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

      if (Array.isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          child = children[i];
          nextName = nextNamePrefix + getComponentKey(child, i);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        var iteratorFn = getIteratorFn(children);

        if (typeof iteratorFn === 'function') {
          {
            // Warn about using Maps as children
            if (iteratorFn === children.entries) {
              !didWarnAboutMaps ? warning$1(false, 'Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.') : void 0;
              didWarnAboutMaps = true;
            }
          }
          var iterator = iteratorFn.call(children);
          var step = void 0;
          var ii = 0;

          while (!(step = iterator.next()).done) {
            child = step.value;
            nextName = nextNamePrefix + getComponentKey(child, ii++);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        } else if (type === 'object') {
          var addendum = '';
          {
            addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
          }
          var childrenString = '' + children;
          invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
        }
      }

      return subtreeCount;
    }
    /**
     * Traverses children that are typically specified as `props.children`, but
     * might also be specified through attributes:
     *
     * - `traverseAllChildren(this.props.children, ...)`
     * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
     *
     * The `traverseContext` is an optional argument that is passed through the
     * entire traversal. It can be used to store accumulations or anything else that
     * the callback might find relevant.
     *
     * @param {?*} children Children tree object.
     * @param {!function} callback To invoke upon traversing each child.
     * @param {?*} traverseContext Context for traversal.
     * @return {!number} The number of children in this subtree.
     */


    function traverseAllChildren(children, callback, traverseContext) {
      if (children == null) {
        return 0;
      }

      return traverseAllChildrenImpl(children, '', callback, traverseContext);
    }
    /**
     * Generate a key string that identifies a component within a set.
     *
     * @param {*} component A component that could contain a manual key.
     * @param {number} index Index that is used if a manual key is not provided.
     * @return {string}
     */


    function getComponentKey(component, index) {
      // Do some typechecking here since we call this blindly. We want to ensure
      // that we don't block potential future ES APIs.
      if (typeof component === 'object' && component !== null && component.key != null) {
        // Explicit key
        return escape(component.key);
      } // Implicit key determined by the index in the set


      return index.toString(36);
    }

    function forEachSingleChild(bookKeeping, child, name) {
      var func = bookKeeping.func,
          context = bookKeeping.context;
      func.call(context, child, bookKeeping.count++);
    }
    /**
     * Iterates through children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
     *
     * The provided forEachFunc(child, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} forEachFunc
     * @param {*} forEachContext Context for forEachContext.
     */


    function forEachChildren(children, forEachFunc, forEachContext) {
      if (children == null) {
        return children;
      }

      var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
      traverseAllChildren(children, forEachSingleChild, traverseContext);
      releaseTraverseContext(traverseContext);
    }

    function mapSingleChildIntoContext(bookKeeping, child, childKey) {
      var result = bookKeeping.result,
          keyPrefix = bookKeeping.keyPrefix,
          func = bookKeeping.func,
          context = bookKeeping.context;
      var mappedChild = func.call(context, child, bookKeeping.count++);

      if (Array.isArray(mappedChild)) {
        mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
          return c;
        });
      } else if (mappedChild != null) {
        if (isValidElement(mappedChild)) {
          mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
          // traverseAllChildren used to do for objects as children
          keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
        }

        result.push(mappedChild);
      }
    }

    function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
      var escapedPrefix = '';

      if (prefix != null) {
        escapedPrefix = escapeUserProvidedKey(prefix) + '/';
      }

      var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
      traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
      releaseTraverseContext(traverseContext);
    }
    /**
     * Maps children that are typically specified as `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenmap
     *
     * The provided mapFunction(child, key, index) will be called for each
     * leaf child.
     *
     * @param {?*} children Children tree container.
     * @param {function(*, int)} func The map function.
     * @param {*} context Context for mapFunction.
     * @return {object} Object containing the ordered map of results.
     */


    function mapChildren(children, func, context) {
      if (children == null) {
        return children;
      }

      var result = [];
      mapIntoWithKeyPrefixInternal(children, result, null, func, context);
      return result;
    }
    /**
     * Count the number of children that are typically specified as
     * `props.children`.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrencount
     *
     * @param {?*} children Children tree container.
     * @return {number} The number of children.
     */


    function countChildren(children) {
      return traverseAllChildren(children, function () {
        return null;
      }, null);
    }
    /**
     * Flatten a children object (typically specified as `props.children`) and
     * return an array with appropriately re-keyed children.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
     */


    function toArray(children) {
      var result = [];
      mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
        return child;
      });
      return result;
    }
    /**
     * Returns the first child in a collection of children and verifies that there
     * is only one child in the collection.
     *
     * See https://reactjs.org/docs/react-api.html#reactchildrenonly
     *
     * The current implementation of this function assumes that a single child gets
     * passed without a wrapper, but the purpose of this helper function is to
     * abstract away the particular structure of children.
     *
     * @param {?object} children Child collection structure.
     * @return {ReactElement} The first and only `ReactElement` contained in the
     * structure.
     */


    function onlyChild(children) {
      !isValidElement(children) ? invariant(false, 'React.Children.only expected to receive a single React element child.') : void 0;
      return children;
    }

    function createContext(defaultValue, calculateChangedBits) {
      if (calculateChangedBits === undefined) {
        calculateChangedBits = null;
      } else {
        {
          !(calculateChangedBits === null || typeof calculateChangedBits === 'function') ? warningWithoutStack$1(false, 'createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits) : void 0;
        }
      }

      var context = {
        $$typeof: REACT_CONTEXT_TYPE,
        _calculateChangedBits: calculateChangedBits,
        // As a workaround to support multiple concurrent renderers, we categorize
        // some renderers as primary and others as secondary. We only expect
        // there to be two concurrent renderers at most: React Native (primary) and
        // Fabric (secondary); React DOM (primary) and React ART (secondary).
        // Secondary renderers store their context values on separate fields.
        _currentValue: defaultValue,
        _currentValue2: defaultValue,
        // Used to track how many concurrent renderers this context currently
        // supports within in a single renderer. Such as parallel server rendering.
        _threadCount: 0,
        // These are circular
        Provider: null,
        Consumer: null
      };
      context.Provider = {
        $$typeof: REACT_PROVIDER_TYPE,
        _context: context
      };
      var hasWarnedAboutUsingNestedContextConsumers = false;
      var hasWarnedAboutUsingConsumerProvider = false;
      {
        // A separate object, but proxies back to the original context object for
        // backwards compatibility. It has a different $$typeof, so we can properly
        // warn for the incorrect usage of Context as a Consumer.
        var Consumer = {
          $$typeof: REACT_CONTEXT_TYPE,
          _context: context,
          _calculateChangedBits: context._calculateChangedBits
        }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

        Object.defineProperties(Consumer, {
          Provider: {
            get: function () {
              if (!hasWarnedAboutUsingConsumerProvider) {
                hasWarnedAboutUsingConsumerProvider = true;
                warning$1(false, 'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
              }

              return context.Provider;
            },
            set: function (_Provider) {
              context.Provider = _Provider;
            }
          },
          _currentValue: {
            get: function () {
              return context._currentValue;
            },
            set: function (_currentValue) {
              context._currentValue = _currentValue;
            }
          },
          _currentValue2: {
            get: function () {
              return context._currentValue2;
            },
            set: function (_currentValue2) {
              context._currentValue2 = _currentValue2;
            }
          },
          _threadCount: {
            get: function () {
              return context._threadCount;
            },
            set: function (_threadCount) {
              context._threadCount = _threadCount;
            }
          },
          Consumer: {
            get: function () {
              if (!hasWarnedAboutUsingNestedContextConsumers) {
                hasWarnedAboutUsingNestedContextConsumers = true;
                warning$1(false, 'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
              }

              return context.Consumer;
            }
          }
        }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

        context.Consumer = Consumer;
      }
      {
        context._currentRenderer = null;
        context._currentRenderer2 = null;
      }
      return context;
    }

    function lazy(ctor) {
      var lazyType = {
        $$typeof: REACT_LAZY_TYPE,
        _ctor: ctor,
        // React uses these fields to store the result.
        _status: -1,
        _result: null
      };
      {
        // In production, this would just set it on the object.
        var defaultProps = void 0;
        var propTypes = void 0;
        Object.defineProperties(lazyType, {
          defaultProps: {
            configurable: true,
            get: function () {
              return defaultProps;
            },
            set: function (newDefaultProps) {
              warning$1(false, 'React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
              defaultProps = newDefaultProps; // Match production behavior more closely:

              Object.defineProperty(lazyType, 'defaultProps', {
                enumerable: true
              });
            }
          },
          propTypes: {
            configurable: true,
            get: function () {
              return propTypes;
            },
            set: function (newPropTypes) {
              warning$1(false, 'React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');
              propTypes = newPropTypes; // Match production behavior more closely:

              Object.defineProperty(lazyType, 'propTypes', {
                enumerable: true
              });
            }
          }
        });
      }
      return lazyType;
    }

    function forwardRef(render) {
      {
        if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
          warningWithoutStack$1(false, 'forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
        } else if (typeof render !== 'function') {
          warningWithoutStack$1(false, 'forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
        } else {
          !( // Do not warn for 0 arguments because it could be due to usage of the 'arguments' object
          render.length === 0 || render.length === 2) ? warningWithoutStack$1(false, 'forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.') : void 0;
        }

        if (render != null) {
          !(render.defaultProps == null && render.propTypes == null) ? warningWithoutStack$1(false, 'forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?') : void 0;
        }
      }
      return {
        $$typeof: REACT_FORWARD_REF_TYPE,
        render: render
      };
    }

    function isValidElementType(type) {
      return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE);
    }

    function memo(type, compare) {
      {
        if (!isValidElementType(type)) {
          warningWithoutStack$1(false, 'memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
        }
      }
      return {
        $$typeof: REACT_MEMO_TYPE,
        type: type,
        compare: compare === undefined ? null : compare
      };
    }

    function resolveDispatcher() {
      var dispatcher = ReactCurrentDispatcher.current;
      !(dispatcher !== null) ? invariant(false, 'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem.') : void 0;
      return dispatcher;
    }

    function useContext(Context, unstable_observedBits) {
      var dispatcher = resolveDispatcher();
      {
        !(unstable_observedBits === undefined) ? warning$1(false, 'useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '') : void 0; // TODO: add a more generic warning for invalid values.

        if (Context._context !== undefined) {
          var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
          // and nobody should be using this in existing code.

          if (realContext.Consumer === Context) {
            warning$1(false, 'Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
          } else if (realContext.Provider === Context) {
            warning$1(false, 'Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
          }
        }
      }
      return dispatcher.useContext(Context, unstable_observedBits);
    }

    function useState(initialState) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useState(initialState);
    }

    function useReducer(reducer, initialArg, init) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useReducer(reducer, initialArg, init);
    }

    function useRef(initialValue) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useRef(initialValue);
    }

    function useEffect(create, inputs) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useEffect(create, inputs);
    }

    function useLayoutEffect(create, inputs) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useLayoutEffect(create, inputs);
    }

    function useCallback(callback, inputs) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useCallback(callback, inputs);
    }

    function useMemo(create, inputs) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useMemo(create, inputs);
    }

    function useImperativeHandle(ref, create, inputs) {
      var dispatcher = resolveDispatcher();
      return dispatcher.useImperativeHandle(ref, create, inputs);
    }

    function useDebugValue(value, formatterFn) {
      {
        var dispatcher = resolveDispatcher();
        return dispatcher.useDebugValue(value, formatterFn);
      }
    }
    /**
     * ReactElementValidator provides a wrapper around a element factory
     * which validates the props passed to the element. This is intended to be
     * used only in DEV and could be replaced by a static type checker for languages
     * that support it.
     */


    var propTypesMisspellWarningShown = void 0;
    {
      propTypesMisspellWarningShown = false;
    }

    function getDeclarationErrorAddendum() {
      if (ReactCurrentOwner.current) {
        var name = getComponentName(ReactCurrentOwner.current.type);

        if (name) {
          return '\n\nCheck the render method of `' + name + '`.';
        }
      }

      return '';
    }

    function getSourceInfoErrorAddendum(elementProps) {
      if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
        var source = elementProps.__source;
        var fileName = source.fileName.replace(/^.*[\\\/]/, '');
        var lineNumber = source.lineNumber;
        return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
      }

      return '';
    }
    /**
     * Warn if there's no key explicitly set on dynamic arrays of children or
     * object keys are not valid. This allows us to keep track of children between
     * updates.
     */


    var ownerHasKeyUseWarning = {};

    function getCurrentComponentErrorInfo(parentType) {
      var info = getDeclarationErrorAddendum();

      if (!info) {
        var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

        if (parentName) {
          info = '\n\nCheck the top-level render call using <' + parentName + '>.';
        }
      }

      return info;
    }
    /**
     * Warn if the element doesn't have an explicit key assigned to it.
     * This element is in an array. The array could grow and shrink or be
     * reordered. All children that haven't already been validated are required to
     * have a "key" property assigned to it. Error statuses are cached so a warning
     * will only be shown once.
     *
     * @internal
     * @param {ReactElement} element Element that requires a key.
     * @param {*} parentType element's parent's type.
     */


    function validateExplicitKey(element, parentType) {
      if (!element._store || element._store.validated || element.key != null) {
        return;
      }

      element._store.validated = true;
      var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

      if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
        return;
      }

      ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
      // property, it may be the creator of the child that's responsible for
      // assigning it a key.

      var childOwner = '';

      if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
        // Give the component that originally created this child.
        childOwner = ' It was passed a child from ' + getComponentName(element._owner.type) + '.';
      }

      setCurrentlyValidatingElement(element);
      {
        warning$1(false, 'Each child in a list should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
      }
      setCurrentlyValidatingElement(null);
    }
    /**
     * Ensure that every element either is passed in a static location, in an
     * array with an explicit keys property defined, or in an object literal
     * with valid key property.
     *
     * @internal
     * @param {ReactNode} node Statically passed child of any type.
     * @param {*} parentType node's parent's type.
     */


    function validateChildKeys(node, parentType) {
      if (typeof node !== 'object') {
        return;
      }

      if (Array.isArray(node)) {
        for (var i = 0; i < node.length; i++) {
          var child = node[i];

          if (isValidElement(child)) {
            validateExplicitKey(child, parentType);
          }
        }
      } else if (isValidElement(node)) {
        // This element was passed in a valid location.
        if (node._store) {
          node._store.validated = true;
        }
      } else if (node) {
        var iteratorFn = getIteratorFn(node);

        if (typeof iteratorFn === 'function') {
          // Entry iterators used to provide implicit keys,
          // but now we print a separate warning for them later.
          if (iteratorFn !== node.entries) {
            var iterator = iteratorFn.call(node);
            var step = void 0;

            while (!(step = iterator.next()).done) {
              if (isValidElement(step.value)) {
                validateExplicitKey(step.value, parentType);
              }
            }
          }
        }
      }
    }
    /**
     * Given an element, validate that its props follow the propTypes definition,
     * provided by the type.
     *
     * @param {ReactElement} element
     */


    function validatePropTypes(element) {
      var type = element.type;

      if (type === null || type === undefined || typeof type === 'string') {
        return;
      }

      var name = getComponentName(type);
      var propTypes = void 0;

      if (typeof type === 'function') {
        propTypes = type.propTypes;
      } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
      // Inner props are checked in the reconciler.
      type.$$typeof === REACT_MEMO_TYPE)) {
        propTypes = type.propTypes;
      } else {
        return;
      }

      if (propTypes) {
        setCurrentlyValidatingElement(element);
        checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
        setCurrentlyValidatingElement(null);
      } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
        propTypesMisspellWarningShown = true;
        warningWithoutStack$1(false, 'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
      }

      if (typeof type.getDefaultProps === 'function') {
        !type.getDefaultProps.isReactClassApproved ? warningWithoutStack$1(false, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
      }
    }
    /**
     * Given a fragment, validate that it can only be provided with fragment props
     * @param {ReactElement} fragment
     */


    function validateFragmentProps(fragment) {
      setCurrentlyValidatingElement(fragment);
      var keys = Object.keys(fragment.props);

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];

        if (key !== 'children' && key !== 'key') {
          warning$1(false, 'Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);
          break;
        }
      }

      if (fragment.ref !== null) {
        warning$1(false, 'Invalid attribute `ref` supplied to `React.Fragment`.');
      }

      setCurrentlyValidatingElement(null);
    }

    function createElementWithValidation(type, props, children) {
      var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
      // succeed and there will likely be errors in render.

      if (!validType) {
        var info = '';

        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
        }

        var sourceInfo = getSourceInfoErrorAddendum(props);

        if (sourceInfo) {
          info += sourceInfo;
        } else {
          info += getDeclarationErrorAddendum();
        }

        var typeString = void 0;

        if (type === null) {
          typeString = 'null';
        } else if (Array.isArray(type)) {
          typeString = 'array';
        } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
          typeString = '<' + (getComponentName(type.type) || 'Unknown') + ' />';
          info = ' Did you accidentally export a JSX literal instead of a component?';
        } else {
          typeString = typeof type;
        }

        warning$1(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
      }

      var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
      // TODO: Drop this when these are no longer allowed as the type argument.

      if (element == null) {
        return element;
      } // Skip key warning if the type isn't valid since our key validation logic
      // doesn't expect a non-string/function type and can throw confusing errors.
      // We don't want exception behavior to differ between dev and prod.
      // (Rendering will throw with a helpful message and as soon as the type is
      // fixed, the key warnings will appear.)


      if (validType) {
        for (var i = 2; i < arguments.length; i++) {
          validateChildKeys(arguments[i], type);
        }
      }

      if (type === REACT_FRAGMENT_TYPE) {
        validateFragmentProps(element);
      } else {
        validatePropTypes(element);
      }

      return element;
    }

    function createFactoryWithValidation(type) {
      var validatedFactory = createElementWithValidation.bind(null, type);
      validatedFactory.type = type; // Legacy hook: remove it

      {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            lowPriorityWarning$1(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
      return validatedFactory;
    }

    function cloneElementWithValidation(element, props, children) {
      var newElement = cloneElement.apply(this, arguments);

      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], newElement.type);
      }

      validatePropTypes(newElement);
      return newElement;
    } // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
    // In some cases, StrictMode should also double-render lifecycles.
    // This can be confusing for tests though,
    // And it can be bad for performance in production.
    // This feature flag can be used to control the behavior:
    // To preserve the "Pause on caught exceptions" behavior of the debugger, we
    // replay the begin phase of a failed component inside invokeGuardedCallback.
    // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
    // Gather advanced timing metrics for Profiler subtrees.
    // Trace which interactions trigger each commit.
    // Only used in www builds.
    // TODO: true? Here it might just be false.
    // Only used in www builds.
    // Only used in www builds.
    // React Fire: prevent the value and checked attributes from syncing
    // with their related DOM properties
    // These APIs will no longer be "unstable" in the upcoming 16.7 release,
    // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.


    var enableStableConcurrentModeAPIs = false;
    var React = {
      Children: {
        map: mapChildren,
        forEach: forEachChildren,
        count: countChildren,
        toArray: toArray,
        only: onlyChild
      },
      createRef: createRef,
      Component: Component,
      PureComponent: PureComponent,
      createContext: createContext,
      forwardRef: forwardRef,
      lazy: lazy,
      memo: memo,
      useCallback: useCallback,
      useContext: useContext,
      useEffect: useEffect,
      useImperativeHandle: useImperativeHandle,
      useDebugValue: useDebugValue,
      useLayoutEffect: useLayoutEffect,
      useMemo: useMemo,
      useReducer: useReducer,
      useRef: useRef,
      useState: useState,
      Fragment: REACT_FRAGMENT_TYPE,
      StrictMode: REACT_STRICT_MODE_TYPE,
      Suspense: REACT_SUSPENSE_TYPE,
      createElement: createElementWithValidation,
      cloneElement: cloneElementWithValidation,
      createFactory: createFactoryWithValidation,
      isValidElement: isValidElement,
      version: ReactVersion,
      unstable_ConcurrentMode: REACT_CONCURRENT_MODE_TYPE,
      unstable_Profiler: REACT_PROFILER_TYPE,
      __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED: ReactSharedInternals
    }; // Note: some APIs are added with feature flags.
    // Make sure that stable builds for open source
    // don't modify the React object to avoid deopts.
    // Also let's not expose their names in stable builds.

    if (enableStableConcurrentModeAPIs) {
      React.ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
      React.Profiler = REACT_PROFILER_TYPE;
      React.unstable_ConcurrentMode = undefined;
      React.unstable_Profiler = undefined;
    }

    var React$2 = Object.freeze({
      default: React
    });
    var React$3 = React$2 && React || React$2; // TODO: decide on the top-level export form.
    // This is hacky but makes it work with both Rollup and Jest.

    var react = React$3.default || React$3;
    module.exports = react;
  })();
}

/***/ }),

/***/ "./node_modules/react/index.js":
/*!*************************************!*\
  !*** ./node_modules/react/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react.development.js */ "./node_modules/react/cjs/react.development.js");
}

/***/ }),

/***/ "./node_modules/reduce-reducers/es/index.js":
/*!**************************************************!*\
  !*** ./node_modules/reduce-reducers/es/index.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = (function () {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var initialState = typeof args[args.length - 1] !== 'function' && args.pop();
  var reducers = args;

  if (typeof initialState === 'undefined') {
    throw new TypeError('The initial state may not be undefined. If you do not want to set a value for this reducer, you can use null instead of undefined.');
  }

  return function (prevState, value) {
    for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
      args[_key2 - 2] = arguments[_key2];
    }

    var prevStateIsUndefined = typeof prevState === 'undefined';
    var valueIsUndefined = typeof value === 'undefined';

    if (prevStateIsUndefined && valueIsUndefined && initialState) {
      return initialState;
    }

    return reducers.reduce(function (newState, reducer) {
      return reducer.apply(undefined, [newState, value].concat(args));
    }, prevStateIsUndefined && !valueIsUndefined && initialState ? initialState : prevState);
  };
});

/***/ }),

/***/ "./node_modules/redux-firestore/es/actions/firestore.js":
/*!**************************************************************!*\
  !*** ./node_modules/redux-firestore/es/actions/firestore.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.add = add;
exports.set = set;
exports.get = get;
exports.update = update;
exports.deleteRef = deleteRef;
exports.setListener = setListener;
exports.setListeners = setListeners;
exports.unsetListener = unsetListener;
exports.unsetListeners = unsetListeners;
exports.runTransaction = runTransaction;
exports.default = void 0;

var _every2 = _interopRequireDefault(__webpack_require__(/*! lodash/every */ "./node_modules/lodash/every.js"));

var _isFunction2 = _interopRequireDefault(__webpack_require__(/*! lodash/isFunction */ "./node_modules/lodash/isFunction.js"));

var _invoke2 = _interopRequireDefault(__webpack_require__(/*! lodash/invoke */ "./node_modules/lodash/invoke.js"));

var _isArray2 = _interopRequireDefault(__webpack_require__(/*! lodash/isArray */ "./node_modules/lodash/isArray.js"));

var _actions = __webpack_require__(/*! ../utils/actions */ "./node_modules/redux-firestore/es/utils/actions.js");

var _constants = __webpack_require__(/*! ../constants */ "./node_modules/redux-firestore/es/constants.js");

var _query = __webpack_require__(/*! ../utils/query */ "./node_modules/redux-firestore/es/utils/query.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var pathListenerCounts = {};

function add(firebase, dispatch, queryOption) {
  for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    args[_key - 3] = arguments[_key];
  }

  var meta = (0, _query.getQueryConfig)(queryOption);
  return (0, _actions.wrapInDispatch)(dispatch, {
    ref: (0, _query.firestoreRef)(firebase, meta),
    method: 'add',
    meta: meta,
    args: args,
    types: [_constants.actionTypes.ADD_REQUEST, {
      type: _constants.actionTypes.ADD_SUCCESS,
      payload: function payload(snap) {
        return {
          id: snap.id,
          data: args[0]
        };
      }
    }, _constants.actionTypes.ADD_FAILURE]
  });
}

function set(firebase, dispatch, queryOption) {
  for (var _len2 = arguments.length, args = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {
    args[_key2 - 3] = arguments[_key2];
  }

  var meta = (0, _query.getQueryConfig)(queryOption);
  return (0, _actions.wrapInDispatch)(dispatch, {
    ref: (0, _query.firestoreRef)(firebase, meta),
    method: 'set',
    meta: meta,
    args: args,
    types: [_constants.actionTypes.SET_REQUEST, _constants.actionTypes.SET_SUCCESS, _constants.actionTypes.SET_FAILURE]
  });
}

function get(firebase, dispatch, queryOption) {
  var meta = (0, _query.getQueryConfig)(queryOption);

  var _ref = firebase._.config || {},
      mergeOrdered = _ref.mergeOrdered,
      mergeOrderedDocUpdates = _ref.mergeOrderedDocUpdates,
      mergeOrderedCollectionUpdates = _ref.mergeOrderedCollectionUpdates;

  return (0, _actions.wrapInDispatch)(dispatch, {
    ref: (0, _query.firestoreRef)(firebase, meta),
    method: 'get',
    meta: meta,
    types: [_constants.actionTypes.GET_REQUEST, {
      type: _constants.actionTypes.GET_SUCCESS,
      payload: function payload(snap) {
        return {
          data: (0, _query.dataByIdSnapshot)(snap),
          ordered: (0, _query.orderedFromSnap)(snap)
        };
      },
      merge: {
        docs: mergeOrdered && mergeOrderedDocUpdates,
        collections: mergeOrdered && mergeOrderedCollectionUpdates
      }
    }, _constants.actionTypes.GET_FAILURE]
  });
}

function update(firebase, dispatch, queryOption) {
  for (var _len3 = arguments.length, args = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {
    args[_key3 - 3] = arguments[_key3];
  }

  var meta = (0, _query.getQueryConfig)(queryOption);
  return (0, _actions.wrapInDispatch)(dispatch, {
    ref: (0, _query.firestoreRef)(firebase, meta),
    method: 'update',
    meta: meta,
    args: args,
    types: [_constants.actionTypes.UPDATE_REQUEST, _constants.actionTypes.UPDATE_SUCCESS, _constants.actionTypes.UPDATE_FAILURE]
  });
}

function deleteRef(firebase, dispatch, queryOption) {
  var meta = (0, _query.getQueryConfig)(queryOption);
  var config = firebase._.config;

  if (!meta.doc || meta.subcollections && !(0, _every2.default)(meta.subcollections, 'doc')) {
    if ((0, _isFunction2.default)(config.onAttemptCollectionDelete)) {
      return config.onAttemptCollectionDelete(queryOption, dispatch, firebase);
    }

    return Promise.reject(new Error('Only documents can be deleted.'));
  }

  return (0, _actions.wrapInDispatch)(dispatch, {
    ref: (0, _query.firestoreRef)(firebase, meta),
    method: 'delete',
    meta: meta,
    types: [_constants.actionTypes.DELETE_REQUEST, {
      type: _constants.actionTypes.DELETE_SUCCESS,
      preserve: firebase._.config.preserveOnDelete
    }, _constants.actionTypes.DELETE_FAILURE]
  });
}

function setListener(firebase, dispatch, queryOpts, successCb, errorCb) {
  var meta = (0, _query.getQueryConfig)(queryOpts);
  var unsubscribe = (0, _query.firestoreRef)(firebase, meta).onSnapshot(function (docData) {
    if (!meta.populates) {
      (0, _query.dispatchListenerResponse)({
        dispatch: dispatch,
        docData: docData,
        meta: meta,
        firebase: firebase
      });
      if (typeof successCb === 'function') successCb(docData);
      return;
    }

    (0, _query.getPopulateActions)({
      firebase: firebase,
      docData: docData,
      meta: meta
    }).then(function (populateActions) {
      populateActions.forEach(function (populateAction) {
        dispatch(_objectSpread({}, populateAction, {
          type: _constants.actionTypes.LISTENER_RESPONSE,
          timestamp: Date.now()
        }));
      });
      (0, _query.dispatchListenerResponse)({
        dispatch: dispatch,
        docData: docData,
        meta: meta,
        firebase: firebase
      });
    }).catch(function (populateErr) {
      if (firebase._.config.logListenerError) {
        (0, _invoke2.default)(console, 'error', "Error populating:", populateErr);
      }

      if (typeof errorCb === 'function') errorCb(populateErr);
    });
  }, function (err) {
    var _ref2 = firebase._.config || {},
        mergeOrdered = _ref2.mergeOrdered,
        mergeOrderedDocUpdates = _ref2.mergeOrderedDocUpdates,
        mergeOrderedCollectionUpdates = _ref2.mergeOrderedCollectionUpdates;

    var _ref3 = firebase._.config || {},
        logListenerError = _ref3.logListenerError,
        preserveOnListenerError = _ref3.preserveOnListenerError;

    if (logListenerError) (0, _invoke2.default)(console, 'error', err);
    dispatch({
      type: _constants.actionTypes.LISTENER_ERROR,
      meta: meta,
      payload: err,
      merge: {
        docs: mergeOrdered && mergeOrderedDocUpdates,
        collections: mergeOrdered && mergeOrderedCollectionUpdates
      },
      preserve: preserveOnListenerError
    });
    if (typeof errorCb === 'function') errorCb(err);
  });
  (0, _query.attachListener)(firebase, dispatch, meta, unsubscribe);
  return unsubscribe;
}

function setListeners(firebase, dispatch, listeners) {
  if (!(0, _isArray2.default)(listeners)) {
    throw new Error('Listeners must be an Array of listener configs (Strings/Objects).');
  }

  var config = firebase._.config;

  if (config.oneListenerPerPath) {
    listeners.forEach(function (listener) {
      var path = (0, _query.getQueryName)(listener);
      var oldListenerCount = pathListenerCounts[path] || 0;
      pathListenerCounts[path] = oldListenerCount + 1;

      if (oldListenerCount > 0) {
        return;
      }

      setListener(firebase, dispatch, listener);
    });
  } else {
    var allowMultipleListeners = config.allowMultipleListeners;
    listeners.forEach(function (listener) {
      var path = (0, _query.getQueryName)(listener);
      var oldListenerCount = pathListenerCounts[path] || 0;
      var multipleListenersEnabled = (0, _isFunction2.default)(allowMultipleListeners) ? allowMultipleListeners(listener, firebase._.listeners) : allowMultipleListeners;
      pathListenerCounts[path] = oldListenerCount + 1;

      if (oldListenerCount === 0 || multipleListenersEnabled) {
        setListener(firebase, dispatch, listener);
      }
    });
  }
}

function unsetListener(firebase, dispatch, meta) {
  return (0, _query.detachListener)(firebase, dispatch, (0, _query.getQueryConfig)(meta));
}

function unsetListeners(firebase, dispatch, listeners) {
  if (!(0, _isArray2.default)(listeners)) {
    throw new Error('Listeners must be an Array of listener configs (Strings/Objects).');
  }

  var config = firebase._.config;
  var allowMultipleListeners = config.allowMultipleListeners;
  listeners.forEach(function (listener) {
    var path = (0, _query.getQueryName)(listener);
    var listenerExists = pathListenerCounts[path] >= 1;
    var multipleListenersEnabled = (0, _isFunction2.default)(allowMultipleListeners) ? allowMultipleListeners(listener, firebase._.listeners) : allowMultipleListeners;

    if (listenerExists) {
      pathListenerCounts[path] -= 1;

      if (pathListenerCounts[path] === 0 || multipleListenersEnabled) {
        unsetListener(firebase, dispatch, listener);
      }
    }
  });
}

function runTransaction(firebase, dispatch, transactionPromise) {
  return (0, _actions.wrapInDispatch)(dispatch, {
    ref: firebase.firestore(),
    method: 'runTransaction',
    args: [transactionPromise],
    types: [_constants.actionTypes.TRANSACTION_START, _constants.actionTypes.TRANSACTION_SUCCESS, _constants.actionTypes.TRANSACTION_FAILURE]
  });
}

var _default = {
  get: get,
  firestoreRef: _query.firestoreRef,
  add: add,
  update: update,
  setListener: setListener,
  setListeners: setListeners,
  unsetListener: unsetListener,
  unsetListeners: unsetListeners,
  runTransaction: runTransaction
};
exports.default = _default;

/***/ }),

/***/ "./node_modules/redux-firestore/es/actions/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/redux-firestore/es/actions/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.firestoreActions = exports.default = void 0;

var firestoreActions = _interopRequireWildcard(__webpack_require__(/*! ./firestore */ "./node_modules/redux-firestore/es/actions/firestore.js"));

exports.firestoreActions = firestoreActions;

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

          if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }

    newObj.default = obj;
    return newObj;
  }
}

var _default = {
  firestoreActions: firestoreActions
};
exports.default = _default;

/***/ }),

/***/ "./node_modules/redux-firestore/es/constants.js":
/*!******************************************************!*\
  !*** ./node_modules/redux-firestore/es/constants.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.methodsToAddFromFirestore = exports.defaultConfig = exports.actionTypes = exports.actionsPrefix = void 0;
var actionsPrefix = '@@reduxFirestore';
exports.actionsPrefix = actionsPrefix;
var actionTypes = {
  START: "".concat(actionsPrefix, "/START"),
  ERROR: "".concat(actionsPrefix, "/ERROR"),
  CLEAR_DATA: "".concat(actionsPrefix, "/CLEAR_DATA"),
  CLEAR_ERROR: "".concat(actionsPrefix, "/CLEAR_ERROR"),
  CLEAR_ERRORS: "".concat(actionsPrefix, "/CLEAR_ERRORS"),
  SET_LISTENER: "".concat(actionsPrefix, "/SET_LISTENER"),
  UNSET_LISTENER: "".concat(actionsPrefix, "/UNSET_LISTENER"),
  GET_REQUEST: "".concat(actionsPrefix, "/GET_REQUEST"),
  GET_SUCCESS: "".concat(actionsPrefix, "/GET_SUCCESS"),
  GET_FAILURE: "".concat(actionsPrefix, "/GET_FAILURE"),
  SET_REQUEST: "".concat(actionsPrefix, "/SET_REQUEST"),
  SET_SUCCESS: "".concat(actionsPrefix, "/SET_SUCCESS"),
  SET_FAILURE: "".concat(actionsPrefix, "/SET_FAILURE"),
  ADD_REQUEST: "".concat(actionsPrefix, "/ADD_REQUEST"),
  ADD_SUCCESS: "".concat(actionsPrefix, "/ADD_SUCCESS"),
  ADD_FAILURE: "".concat(actionsPrefix, "/ADD_FAILURE"),
  UPDATE_REQUEST: "".concat(actionsPrefix, "/UPDATE_REQUEST"),
  UPDATE_SUCCESS: "".concat(actionsPrefix, "/UPDATE_SUCCESS"),
  UPDATE_FAILURE: "".concat(actionsPrefix, "/UPDATE_FAILURE"),
  DELETE_REQUEST: "".concat(actionsPrefix, "/DELETE_REQUEST"),
  DELETE_SUCCESS: "".concat(actionsPrefix, "/DELETE_SUCCESS"),
  DELETE_FAILURE: "".concat(actionsPrefix, "/DELETE_FAILURE"),
  ATTACH_LISTENER: "".concat(actionsPrefix, "/ATTACH_LISTENER"),
  LISTENER_RESPONSE: "".concat(actionsPrefix, "/LISTENER_RESPONSE"),
  LISTENER_ERROR: "".concat(actionsPrefix, "/LISTENER_ERROR"),
  ON_SNAPSHOT_REQUEST: "".concat(actionsPrefix, "/ON_SNAPSHOT_REQUEST"),
  ON_SNAPSHOT_SUCCESS: "".concat(actionsPrefix, "/ON_SNAPSHOT_SUCCESS"),
  ON_SNAPSHOT_FAILURE: "".concat(actionsPrefix, "/ON_SNAPSHOT_FAILURE"),
  DOCUMENT_ADDED: "".concat(actionsPrefix, "/DOCUMENT_ADDED"),
  DOCUMENT_MODIFIED: "".concat(actionsPrefix, "/DOCUMENT_MODIFIED"),
  DOCUMENT_REMOVED: "".concat(actionsPrefix, "/DOCUMENT_REMOVED"),
  TRANSACTION_START: "".concat(actionsPrefix, "/TRANSACTION_START"),
  TRANSACTION_SUCCESS: "".concat(actionsPrefix, "/TRANSACTION_SUCCESS"),
  TRANSACTION_FAILURE: "".concat(actionsPrefix, "/TRANSACTION_FAILURE")
};
exports.actionTypes = actionTypes;
var defaultConfig = {
  logListenerError: true,
  enhancerNamespace: 'firestore',
  helpersNamespace: null,
  allowMultipleListeners: false,
  preserveOnDelete: null,
  preserveOnListenerError: null,
  onAttemptCollectionDelete: null,
  mergeOrdered: true,
  mergeOrderedDocUpdates: true,
  mergeOrderedCollectionUpdates: true
};
exports.defaultConfig = defaultConfig;
var methodsToAddFromFirestore = ['collection', 'configureClient', 'doc', 'batch', 'disableNetwork', 'enableNetwork', 'enablePersistence', 'ensureClientConfigured', 'setLogLevel', 'settings'];
exports.methodsToAddFromFirestore = methodsToAddFromFirestore;
var _default = {
  actionsPrefix: actionsPrefix,
  actionTypes: actionTypes,
  defaultConfig: defaultConfig
};
exports.default = _default;

/***/ }),

/***/ "./node_modules/redux-firestore/es/createFirestoreInstance.js":
/*!********************************************************************!*\
  !*** ./node_modules/redux-firestore/es/createFirestoreInstance.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createFirestoreInstance;

var _merge2 = _interopRequireDefault(__webpack_require__(/*! lodash/fp/merge */ "./node_modules/lodash/fp/merge.js"));

var _reduce2 = _interopRequireDefault(__webpack_require__(/*! lodash/reduce */ "./node_modules/lodash/reduce.js"));

var _actions = __webpack_require__(/*! ./actions */ "./node_modules/redux-firestore/es/actions/index.js");

var _actions2 = __webpack_require__(/*! ./utils/actions */ "./node_modules/redux-firestore/es/utils/actions.js");

var _constants = __webpack_require__(/*! ./constants */ "./node_modules/redux-firestore/es/constants.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function createFirestoreInstance(firebase, configs, dispatch) {
  var defaultInternals = {
    listeners: {},
    config: _objectSpread({}, _constants.defaultConfig, configs)
  };
  firebase._ = (0, _merge2.default)(defaultInternals, firebase._);
  var aliases = [{
    action: _actions.firestoreActions.deleteRef,
    name: 'delete'
  }, {
    action: _actions.firestoreActions.setListener,
    name: 'onSnapshot'
  }];
  var methods = (0, _actions2.mapWithFirebaseAndDispatch)(firebase, dispatch, _actions.firestoreActions, aliases);
  var methodsFromFirestore = (0, _reduce2.default)(_constants.methodsToAddFromFirestore, function (acc, methodName) {
    return firebase.firestore && typeof firebase.firestore()[methodName] === 'function' ? _objectSpread({}, acc, _defineProperty({}, methodName, firebase.firestore()[methodName].bind(firebase.firestore()))) : acc;
  }, {});
  return Object.assign(methodsFromFirestore, firebase.firestore, {
    _: firebase._
  }, configs.helpersNamespace ? _defineProperty({}, configs.helpersNamespace, methods) : methods);
}

/***/ }),

/***/ "./node_modules/redux-firestore/es/enhancer.js":
/*!*****************************************************!*\
  !*** ./node_modules/redux-firestore/es/enhancer.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = reduxFirestore;
exports.getFirestore = void 0;

var _constants = __webpack_require__(/*! ./constants */ "./node_modules/redux-firestore/es/constants.js");

var _createFirestoreInstance = _interopRequireDefault(__webpack_require__(/*! ./createFirestoreInstance */ "./node_modules/redux-firestore/es/createFirestoreInstance.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var firestoreInstance;

function reduxFirestore(firebaseInstance, otherConfig) {
  return function (next) {
    return function (reducer, initialState, middleware) {
      var store = next(reducer, initialState, middleware);

      var configs = _objectSpread({}, _constants.defaultConfig, otherConfig);

      firestoreInstance = (0, _createFirestoreInstance.default)(firebaseInstance.firebase_ || firebaseInstance, configs, store.dispatch);
      store.firestore = firestoreInstance;
      return store;
    };
  };
}

var getFirestore = function getFirestore() {
  if (!firestoreInstance) {
    throw new Error('Firebase instance does not yet exist. Check your compose function.');
  }

  return firestoreInstance;
};

exports.getFirestore = getFirestore;

/***/ }),

/***/ "./node_modules/redux-firestore/es/index.js":
/*!**************************************************!*\
  !*** ./node_modules/redux-firestore/es/index.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "enhancer", {
  enumerable: true,
  get: function get() {
    return _enhancer.default;
  }
});
Object.defineProperty(exports, "reduxFirestore", {
  enumerable: true,
  get: function get() {
    return _enhancer.default;
  }
});
Object.defineProperty(exports, "getFirestore", {
  enumerable: true,
  get: function get() {
    return _enhancer.getFirestore;
  }
});
Object.defineProperty(exports, "reducer", {
  enumerable: true,
  get: function get() {
    return _reducer.default;
  }
});
Object.defineProperty(exports, "firestoreReducer", {
  enumerable: true,
  get: function get() {
    return _reducer.default;
  }
});
Object.defineProperty(exports, "actions", {
  enumerable: true,
  get: function get() {
    return _actions.firestoreActions;
  }
});
Object.defineProperty(exports, "createFirestoreInstance", {
  enumerable: true,
  get: function get() {
    return _createFirestoreInstance.default;
  }
});
Object.defineProperty(exports, "constants", {
  enumerable: true,
  get: function get() {
    return _constants.default;
  }
});
Object.defineProperty(exports, "actionTypes", {
  enumerable: true,
  get: function get() {
    return _constants.actionTypes;
  }
});
Object.defineProperty(exports, "middleware", {
  enumerable: true,
  get: function get() {
    return _middleware.default;
  }
});
Object.defineProperty(exports, "CALL_FIRESTORE", {
  enumerable: true,
  get: function get() {
    return _middleware.CALL_FIRESTORE;
  }
});
exports.default = exports.version = void 0;

var _enhancer = _interopRequireWildcard(__webpack_require__(/*! ./enhancer */ "./node_modules/redux-firestore/es/enhancer.js"));

var _reducer = _interopRequireDefault(__webpack_require__(/*! ./reducer */ "./node_modules/redux-firestore/es/reducer.js"));

var _actions = __webpack_require__(/*! ./actions */ "./node_modules/redux-firestore/es/actions/index.js");

var _createFirestoreInstance = _interopRequireDefault(__webpack_require__(/*! ./createFirestoreInstance */ "./node_modules/redux-firestore/es/createFirestoreInstance.js"));

var _constants = _interopRequireWildcard(__webpack_require__(/*! ./constants */ "./node_modules/redux-firestore/es/constants.js"));

var _middleware = _interopRequireWildcard(__webpack_require__(/*! ./middleware */ "./node_modules/redux-firestore/es/middleware.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

          if (desc.get || desc.set) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }

    newObj.default = obj;
    return newObj;
  }
}

var version = "0.8.0";
exports.version = version;
var _default = {
  version: version,
  reducer: _reducer.default,
  firestoreReducer: _reducer.default,
  enhancer: _enhancer.default,
  reduxFirestore: _enhancer.default,
  createFirestoreInstance: _createFirestoreInstance.default,
  actions: _actions.firestoreActions,
  getFirestore: _enhancer.getFirestore,
  constants: _constants.default,
  actionTypes: _constants.actionTypes,
  middleware: _middleware.default,
  CALL_FIRESTORE: _middleware.CALL_FIRESTORE
};
exports.default = _default;

/***/ }),

/***/ "./node_modules/redux-firestore/es/middleware.js":
/*!*******************************************************!*\
  !*** ./node_modules/redux-firestore/es/middleware.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = reduxFirestoreMiddleware;
exports.CALL_FIRESTORE = void 0;

var _isArray2 = _interopRequireDefault(__webpack_require__(/*! lodash/isArray */ "./node_modules/lodash/isArray.js"));

var _constants = __webpack_require__(/*! ./constants */ "./node_modules/redux-firestore/es/constants.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function callFirestore(firebaseInstance, callInfoObj) {
  var method = callInfoObj.method;
  var modelArgs = callInfoObj.modelArgs,
      methodArgs = callInfoObj.methodArgs;
  if (!(0, _isArray2.default)(modelArgs)) modelArgs = [modelArgs];
  if (!(0, _isArray2.default)(methodArgs)) methodArgs = [methodArgs];

  if (!firebaseInstance || !firebaseInstance.firestore) {
    throw new Error('firestore is not a Firebase namespace');
  }

  return !methodArgs ? firebaseInstance.firestore()[method] : firebaseInstance.firestore()[method].apply(firebaseInstance, methodArgs);
}

var CALL_FIRESTORE = 'CALL_FIRESTORE';
exports.CALL_FIRESTORE = CALL_FIRESTORE;
var typesMap = {
  get: [_constants.actionTypes.GET_REQUEST, _constants.actionTypes.GET_SUCCESS, _constants.actionTypes.GET_FAILURE]
};

function reduxFirestoreMiddleware(firestore) {
  return function (store) {
    return function (next) {
      return function (action) {
        var callAPI = action.type === CALL_FIRESTORE ? action : undefined;
        if (typeof callAPI === 'undefined') return next(action);
        var method = callAPI.method;
        if (typeof method === 'function') method = method(store.getState());
        if (typeof method !== 'string') throw new Error('Specify a method.');
        var args = callAPI.args;
        var types = typesMap[method];

        if (!Array.isArray(types) || types.length !== 3) {
          throw new Error('Expected an array of three action types.');
        }

        if (!types.every(function (type) {
          return typeof type === 'string';
        })) {
          throw new Error('Expected action types to be strings.');
        }

        function actionWith(data) {
          var finalAction = Object.assign({}, action, data);
          delete finalAction[CALL_FIRESTORE];
          return finalAction;
        }

        var _types = _slicedToArray(types, 3),
            requestType = _types[0],
            successType = _types[1],
            failureType = _types[2];

        next({
          type: requestType
        });
        var callInfoObj = {
          method: method
        };
        return callFirestore(firestore, callInfoObj).then(function (response) {
          return next({
            response: response,
            method: method,
            args: args,
            type: successType
          });
        }).catch(function (error) {
          return next(actionWith({
            type: failureType,
            error: error.message || error || 'Something bad happened'
          }));
        });
      };
    };
  };
}

/***/ }),

/***/ "./node_modules/redux-firestore/es/reducer.js":
/*!****************************************************!*\
  !*** ./node_modules/redux-firestore/es/reducer.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reduceReducers = _interopRequireDefault(__webpack_require__(/*! reduce-reducers */ "./node_modules/reduce-reducers/es/index.js"));

var _reducers = __webpack_require__(/*! ./utils/reducers */ "./node_modules/redux-firestore/es/utils/reducers.js");

var _reducers2 = __webpack_require__(/*! ./reducers */ "./node_modules/redux-firestore/es/reducers/index.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var combinedReducers = (0, _reducers.combineReducers)({
  status: _reducers2.statusReducer,
  data: _reducers2.dataReducer,
  ordered: _reducers2.orderedReducer,
  listeners: _reducers2.listenersReducer,
  errors: _reducers2.errorsReducer,
  queries: _reducers2.queriesReducer,
  composite: function composite(state) {
    return state;
  }
});

var _default = (0, _reduceReducers.default)(combinedReducers, _reducers2.crossSliceReducer);

exports.default = _default;

/***/ }),

/***/ "./node_modules/redux-firestore/es/reducers/crossSliceReducer.js":
/*!***********************************************************************!*\
  !*** ./node_modules/redux-firestore/es/reducers/crossSliceReducer.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = crossSliceReducer;

var _keys2 = _interopRequireDefault(__webpack_require__(/*! lodash/keys */ "./node_modules/lodash/keys.js"));

var _get2 = _interopRequireDefault(__webpack_require__(/*! lodash/get */ "./node_modules/lodash/get.js"));

var _set2 = _interopRequireDefault(__webpack_require__(/*! lodash/set */ "./node_modules/lodash/set.js"));

var _merge2 = _interopRequireDefault(__webpack_require__(/*! lodash/merge */ "./node_modules/lodash/merge.js"));

var _groupBy2 = _interopRequireDefault(__webpack_require__(/*! lodash/groupBy */ "./node_modules/lodash/groupBy.js"));

var _values2 = _interopRequireDefault(__webpack_require__(/*! lodash/values */ "./node_modules/lodash/values.js"));

var _immer = _interopRequireDefault(__webpack_require__(/*! immer */ "./node_modules/redux-firestore/node_modules/immer/dist/immer.module.js"));

var _constants = __webpack_require__(/*! ../constants */ "./node_modules/redux-firestore/es/constants.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function crossSliceReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments.length > 1 ? arguments[1] : undefined;
  return (0, _immer.default)(state, function (draft) {
    switch (action.type) {
      case _constants.actionTypes.DOCUMENT_MODIFIED:
      case _constants.actionTypes.DOCUMENT_ADDED:
      case _constants.actionTypes.DOCUMENT_REMOVED:
      case _constants.actionTypes.LISTENER_RESPONSE:
      case _constants.actionTypes.UNSET_LISTENER:
        var groups = (0, _groupBy2.default)((0, _values2.default)(state.queries), function (c) {
          return c.storeAs || c.collection;
        });
        (0, _keys2.default)(groups).forEach(function (storeAs) {
          var updated = {};
          groups[storeAs].forEach(function (item) {
            return (0, _merge2.default)(updated, (0, _get2.default)(item, 'data', {}));
          });
          (0, _set2.default)(draft, ['composite', storeAs], updated);
        });
        return draft;

      default:
        return state;
    }
  });
}

/***/ }),

/***/ "./node_modules/redux-firestore/es/reducers/dataReducer.js":
/*!*****************************************************************!*\
  !*** ./node_modules/redux-firestore/es/reducers/dataReducer.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = dataReducer;

var _setWith2 = _interopRequireDefault(__webpack_require__(/*! lodash/fp/setWith */ "./node_modules/lodash/fp/setWith.js"));

var _get2 = _interopRequireDefault(__webpack_require__(/*! lodash/get */ "./node_modules/lodash/get.js"));

var _constants = __webpack_require__(/*! ../constants */ "./node_modules/redux-firestore/es/constants.js");

var _reducers = __webpack_require__(/*! ../utils/reducers */ "./node_modules/redux-firestore/es/utils/reducers.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var CLEAR_DATA = _constants.actionTypes.CLEAR_DATA,
    GET_SUCCESS = _constants.actionTypes.GET_SUCCESS,
    LISTENER_RESPONSE = _constants.actionTypes.LISTENER_RESPONSE,
    LISTENER_ERROR = _constants.actionTypes.LISTENER_ERROR,
    DELETE_SUCCESS = _constants.actionTypes.DELETE_SUCCESS,
    DOCUMENT_ADDED = _constants.actionTypes.DOCUMENT_ADDED,
    DOCUMENT_MODIFIED = _constants.actionTypes.DOCUMENT_MODIFIED,
    DOCUMENT_REMOVED = _constants.actionTypes.DOCUMENT_REMOVED;

function dataReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments.length > 1 ? arguments[1] : undefined;

  switch (action.type) {
    case GET_SUCCESS:
    case LISTENER_RESPONSE:
      var meta = action.meta,
          payload = action.payload;

      if (!payload || payload.data === undefined) {
        return state;
      }

      var getDocName = function getDocName(data) {
        return data.subcollections ? getDocName(data.subcollections.slice(-1)[0]) : data.doc;
      };

      var docName = getDocName(meta);
      var data = docName ? (0, _get2.default)(payload.data, docName) : payload.data;
      var previousData = (0, _get2.default)(state, meta.storeAs ? [meta.storeAs] : (0, _reducers.pathFromMeta)(meta));

      if (!previousData || meta.subcollections) {
        return (0, _setWith2.default)(Object, meta.storeAs ? [meta.storeAs] : (0, _reducers.pathFromMeta)(meta), data, state);
      }

      return (0, _setWith2.default)(Object, meta.storeAs ? [meta.storeAs] : (0, _reducers.pathFromMeta)(meta), data, state);

    case DOCUMENT_MODIFIED:
    case DOCUMENT_ADDED:
      return (0, _setWith2.default)(Object, (0, _reducers.pathFromMeta)(action.meta), action.payload.data, state);

    case DOCUMENT_REMOVED:
    case DELETE_SUCCESS:
      var removePath = (0, _reducers.pathFromMeta)(action.meta);
      var cleanedState = (0, _setWith2.default)(Object, removePath, null, state);

      if (action.preserve && action.preserve.data) {
        return (0, _reducers.preserveValuesFromState)(state, action.preserve.data, cleanedState);
      }

      return cleanedState;

    case CLEAR_DATA:
      if (action.preserve && action.preserve.data) {
        return (0, _reducers.preserveValuesFromState)(state, action.preserve.data, {});
      }

      return {};

    case LISTENER_ERROR:
      var nextState = (0, _setWith2.default)(Object, (0, _reducers.pathFromMeta)(action.meta), null, state);

      if (action.preserve && action.preserve.data) {
        return (0, _reducers.preserveValuesFromState)(state, action.preserve.data, nextState);
      }

      var existingState = (0, _get2.default)(state, (0, _reducers.pathFromMeta)(action.meta));

      if (existingState) {
        return state;
      }

      return nextState;

    default:
      return state;
  }
}

/***/ }),

/***/ "./node_modules/redux-firestore/es/reducers/errorsReducer.js":
/*!*******************************************************************!*\
  !*** ./node_modules/redux-firestore/es/reducers/errorsReducer.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _constants = __webpack_require__(/*! ../constants */ "./node_modules/redux-firestore/es/constants.js");

var _query = __webpack_require__(/*! ../utils/query */ "./node_modules/redux-firestore/es/utils/query.js");

var _reducers = __webpack_require__(/*! ../utils/reducers */ "./node_modules/redux-firestore/es/utils/reducers.js");

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

var CLEAR_ERRORS = _constants.actionTypes.CLEAR_ERRORS,
    CLEAR_ERROR = _constants.actionTypes.CLEAR_ERROR,
    LISTENER_ERROR = _constants.actionTypes.LISTENER_ERROR,
    ERROR = _constants.actionTypes.ERROR;

function errorsAllIds() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  var _ref = arguments.length > 1 ? arguments[1] : undefined,
      meta = _ref.meta,
      type = _ref.type;

  switch (type) {
    case LISTENER_ERROR:
    case ERROR:
      if (state.indexOf((0, _query.getQueryName)(meta)) !== -1) {
        return state;
      }

      return [].concat(_toConsumableArray(state), [(0, _query.getQueryName)(meta)]);

    case CLEAR_ERRORS:
      return [];

    case CLEAR_ERROR:
      return state.filter(function (lId) {
        return lId !== (0, _query.getQueryName)(meta);
      });

    default:
      return state;
  }
}

function errorsByQuery() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _ref2 = arguments.length > 1 ? arguments[1] : undefined,
      meta = _ref2.meta,
      payload = _ref2.payload,
      type = _ref2.type;

  switch (type) {
    case ERROR:
    case LISTENER_ERROR:
      return _objectSpread({}, state, _defineProperty({}, (0, _query.getQueryName)(meta), payload));

    case CLEAR_ERROR:
      return _objectSpread({}, state, _defineProperty({}, (0, _query.getQueryName)(meta), null));

    default:
      return state;
  }
}

var errorsReducer = (0, _reducers.combineReducers)({
  byQuery: errorsByQuery,
  allIds: errorsAllIds
});
var _default = errorsReducer;
exports.default = _default;

/***/ }),

/***/ "./node_modules/redux-firestore/es/reducers/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/redux-firestore/es/reducers/index.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "dataReducer", {
  enumerable: true,
  get: function get() {
    return _dataReducer.default;
  }
});
Object.defineProperty(exports, "errorsReducer", {
  enumerable: true,
  get: function get() {
    return _errorsReducer.default;
  }
});
Object.defineProperty(exports, "listenersReducer", {
  enumerable: true,
  get: function get() {
    return _listenersReducer.default;
  }
});
Object.defineProperty(exports, "orderedReducer", {
  enumerable: true,
  get: function get() {
    return _orderedReducer.default;
  }
});
Object.defineProperty(exports, "statusReducer", {
  enumerable: true,
  get: function get() {
    return _statusReducer.default;
  }
});
Object.defineProperty(exports, "queriesReducer", {
  enumerable: true,
  get: function get() {
    return _queriesReducer.default;
  }
});
Object.defineProperty(exports, "crossSliceReducer", {
  enumerable: true,
  get: function get() {
    return _crossSliceReducer.default;
  }
});
exports.default = void 0;

var _dataReducer = _interopRequireDefault(__webpack_require__(/*! ./dataReducer */ "./node_modules/redux-firestore/es/reducers/dataReducer.js"));

var _errorsReducer = _interopRequireDefault(__webpack_require__(/*! ./errorsReducer */ "./node_modules/redux-firestore/es/reducers/errorsReducer.js"));

var _listenersReducer = _interopRequireDefault(__webpack_require__(/*! ./listenersReducer */ "./node_modules/redux-firestore/es/reducers/listenersReducer.js"));

var _orderedReducer = _interopRequireDefault(__webpack_require__(/*! ./orderedReducer */ "./node_modules/redux-firestore/es/reducers/orderedReducer.js"));

var _statusReducer = _interopRequireDefault(__webpack_require__(/*! ./statusReducer */ "./node_modules/redux-firestore/es/reducers/statusReducer.js"));

var _queriesReducer = _interopRequireDefault(__webpack_require__(/*! ./queriesReducer */ "./node_modules/redux-firestore/es/reducers/queriesReducer.js"));

var _crossSliceReducer = _interopRequireDefault(__webpack_require__(/*! ./crossSliceReducer */ "./node_modules/redux-firestore/es/reducers/crossSliceReducer.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

var _default = {
  dataReducer: _dataReducer.default,
  errorsReducer: _errorsReducer.default,
  listenersReducer: _listenersReducer.default,
  orderedReducer: _orderedReducer.default,
  statusReducer: _statusReducer.default,
  queriesReducer: _queriesReducer.default,
  crossSliceReducer: _crossSliceReducer.default
};
exports.default = _default;

/***/ }),

/***/ "./node_modules/redux-firestore/es/reducers/listenersReducer.js":
/*!**********************************************************************!*\
  !*** ./node_modules/redux-firestore/es/reducers/listenersReducer.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _omit2 = _interopRequireDefault(__webpack_require__(/*! lodash/omit */ "./node_modules/lodash/omit.js"));

var _constants = __webpack_require__(/*! ../constants */ "./node_modules/redux-firestore/es/constants.js");

var _reducers = __webpack_require__(/*! ../utils/reducers */ "./node_modules/redux-firestore/es/utils/reducers.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function listenersById() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _ref = arguments.length > 1 ? arguments[1] : undefined,
      type = _ref.type,
      path = _ref.path,
      payload = _ref.payload;

  switch (type) {
    case _constants.actionTypes.SET_LISTENER:
      return _objectSpread({}, state, _defineProperty({}, payload.name, {
        name: payload.name,
        path: path
      }));

    case _constants.actionTypes.UNSET_LISTENER:
      return (0, _omit2.default)(state, [payload.name]);

    default:
      return state;
  }
}

function allListeners() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

  var _ref2 = arguments.length > 1 ? arguments[1] : undefined,
      type = _ref2.type,
      payload = _ref2.payload;

  switch (type) {
    case _constants.actionTypes.SET_LISTENER:
      return [].concat(_toConsumableArray(state), [payload.name]);

    case _constants.actionTypes.UNSET_LISTENER:
      return state.filter(function (name) {
        return name !== payload.name;
      });

    default:
      return state;
  }
}

var listenersReducer = (0, _reducers.combineReducers)({
  byId: listenersById,
  allIds: allListeners
});
var _default = listenersReducer;
exports.default = _default;

/***/ }),

/***/ "./node_modules/redux-firestore/es/reducers/orderedReducer.js":
/*!********************************************************************!*\
  !*** ./node_modules/redux-firestore/es/reducers/orderedReducer.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = orderedReducer;

var _assign2 = _interopRequireDefault(__webpack_require__(/*! lodash/fp/assign */ "./node_modules/lodash/fp/assign.js"));

var _merge2 = _interopRequireDefault(__webpack_require__(/*! lodash/fp/merge */ "./node_modules/lodash/fp/merge.js"));

var _isEqual2 = _interopRequireDefault(__webpack_require__(/*! lodash/isEqual */ "./node_modules/lodash/isEqual.js"));

var _keyBy2 = _interopRequireDefault(__webpack_require__(/*! lodash/keyBy */ "./node_modules/lodash/keyBy.js"));

var _map2 = _interopRequireDefault(__webpack_require__(/*! lodash/map */ "./node_modules/lodash/map.js"));

var _omit2 = _interopRequireDefault(__webpack_require__(/*! lodash/omit */ "./node_modules/lodash/omit.js"));

var _reject2 = _interopRequireDefault(__webpack_require__(/*! lodash/reject */ "./node_modules/lodash/reject.js"));

var _unionBy2 = _interopRequireDefault(__webpack_require__(/*! lodash/unionBy */ "./node_modules/lodash/unionBy.js"));

var _get2 = _interopRequireDefault(__webpack_require__(/*! lodash/get */ "./node_modules/lodash/get.js"));

var _size2 = _interopRequireDefault(__webpack_require__(/*! lodash/size */ "./node_modules/lodash/size.js"));

var _constants = __webpack_require__(/*! ../constants */ "./node_modules/redux-firestore/es/constants.js");

var _reducers = __webpack_require__(/*! ../utils/reducers */ "./node_modules/redux-firestore/es/utils/reducers.js");

var _actionHandlers;

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

var DOCUMENT_ADDED = _constants.actionTypes.DOCUMENT_ADDED,
    GET_SUCCESS = _constants.actionTypes.GET_SUCCESS,
    LISTENER_RESPONSE = _constants.actionTypes.LISTENER_RESPONSE,
    CLEAR_DATA = _constants.actionTypes.CLEAR_DATA,
    DELETE_SUCCESS = _constants.actionTypes.DELETE_SUCCESS,
    DOCUMENT_REMOVED = _constants.actionTypes.DOCUMENT_REMOVED,
    DOCUMENT_MODIFIED = _constants.actionTypes.DOCUMENT_MODIFIED;

function modifyDoc(collectionState, action) {
  if (!action.meta.subcollections || action.meta.storeAs) {
    return (0, _reducers.updateItemInArray)(collectionState, action.meta.doc, function (item) {
      return (0, _assign2.default)(item, action.payload.data);
    });
  }

  var _pathToArr = (0, _reducers.pathToArr)(action.meta.path),
      _pathToArr2 = _slicedToArray(_pathToArr, 4),
      docId = _pathToArr2[1],
      subcollectionName = _pathToArr2[2],
      subDocId = _pathToArr2[3];

  return (0, _reducers.updateItemInArray)(collectionState, docId, function (item) {
    return _objectSpread({}, item, _defineProperty({}, subcollectionName, (0, _reducers.updateItemInArray)((0, _get2.default)(item, subcollectionName, []), subDocId, function (subitem) {
      return (0, _merge2.default)(subitem, action.payload.data);
    })));
  });
}

function addDoc() {
  var array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var action = arguments.length > 1 ? arguments[1] : undefined;
  var meta = action.meta,
      payload = action.payload;

  if (!meta.subcollections || meta.storeAs) {
    return [].concat(_toConsumableArray(array.slice(0, payload.ordered.newIndex)), [_objectSpread({
      id: meta.doc
    }, payload.data)], _toConsumableArray(array.slice(payload.ordered.newIndex)));
  }

  return modifyDoc(array, action);
}

function removeDoc(array, action) {
  if (!action.meta.subcollections || action.meta.storeAs) {
    return (0, _reject2.default)(array, {
      id: action.meta.doc
    });
  }

  var subcollectionSetting = action.meta.subcollections[0];

  if (!subcollectionSetting.doc) {
    return (0, _reducers.updateItemInArray)(array, action.meta.doc, function (item) {
      return (0, _omit2.default)(item, [subcollectionSetting.collection]);
    });
  }

  return (0, _reducers.updateItemInArray)(array, action.meta.doc, function (item) {
    var subcollectionVal = (0, _get2.default)(item, subcollectionSetting.collection, []);

    if (subcollectionVal.length) {
      return _objectSpread({}, item, _defineProperty({}, subcollectionSetting.collection, (0, _reject2.default)(array, {
        id: subcollectionSetting.doc
      })));
    }

    return item;
  });
}

function writeCollection(collectionState, action) {
  var meta = action.meta,
      _action$merge = action.merge,
      merge = _action$merge === void 0 ? {
    doc: true,
    collections: true
  } : _action$merge;

  if (meta.storeAs) {
    return action.payload.ordered;
  }

  var collectionStateSize = (0, _size2.default)(collectionState);
  var payloadExists = !!(0, _size2.default)(action.payload.ordered);

  if (meta.doc && merge.doc && collectionStateSize) {
    return modifyDoc(collectionState, action);
  }

  if (collectionStateSize && merge.collections) {
    if (!payloadExists) {
      return [];
    }

    var existingKeys = collectionState && (0, _keyBy2.default)(collectionState, 'id');
    return (0, _map2.default)(action.payload.ordered, function (newDocObj) {
      var existingDoc = (0, _get2.default)(existingKeys, newDocObj.id);
      return !!existingDoc && !(0, _isEqual2.default)(existingDoc, newDocObj) ? _objectSpread({}, existingDoc, newDocObj) : newDocObj;
    });
  }

  if (meta.doc && meta.subcollections) {
    var subcollectionConfig = meta.subcollections[0];

    if (!collectionStateSize) {
      return [_defineProperty({
        id: meta.doc
      }, subcollectionConfig.collection, action.payload.ordered)];
    }

    return (0, _reducers.updateItemInArray)(collectionState, meta.doc, function (item) {
      return payloadExists ? _objectSpread({}, item, _defineProperty({}, subcollectionConfig.collection, (0, _unionBy2.default)((0, _get2.default)(item, subcollectionConfig.collection, []), action.payload.ordered, 'id'))) : (0, _omit2.default)(item, [subcollectionConfig.collection]);
    });
  }

  if (meta.doc && collectionStateSize) {
    if (!(0, _size2.default)(action.payload.ordered)) {
      return collectionState;
    }

    return (0, _reducers.updateItemInArray)(collectionState, meta.doc, function (item) {
      return (0, _merge2.default)(item, action.payload.ordered[0]);
    });
  }

  return action.payload.ordered;
}

var actionHandlers = (_actionHandlers = {}, _defineProperty(_actionHandlers, DOCUMENT_ADDED, addDoc), _defineProperty(_actionHandlers, DOCUMENT_MODIFIED, modifyDoc), _defineProperty(_actionHandlers, DOCUMENT_REMOVED, removeDoc), _defineProperty(_actionHandlers, DELETE_SUCCESS, removeDoc), _defineProperty(_actionHandlers, LISTENER_RESPONSE, writeCollection), _defineProperty(_actionHandlers, GET_SUCCESS, writeCollection), _actionHandlers);
var orderedCollectionReducer = (0, _reducers.createReducer)(undefined, actionHandlers);

function orderedReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments.length > 1 ? arguments[1] : undefined;

  if (!action.type) {
    return state;
  }

  if (action.type === CLEAR_DATA) {
    if (action.preserve && action.preserve.ordered) {
      return (0, _reducers.preserveValuesFromState)(state, action.preserve.ordered, {});
    }

    return {};
  }

  if (!Object.prototype.hasOwnProperty.call(actionHandlers, action.type)) {
    return state;
  }

  if (!action.meta || !action.meta.storeAs && !action.meta.collection) {
    return state;
  }

  var storeUnderKey = action.meta.storeAs || action.meta.collection;
  var collectionStateSlice = (0, _get2.default)(state, storeUnderKey);
  return _objectSpread({}, state, _defineProperty({}, storeUnderKey, orderedCollectionReducer(collectionStateSlice, action)));
}

/***/ }),

/***/ "./node_modules/redux-firestore/es/reducers/queriesReducer.js":
/*!********************************************************************!*\
  !*** ./node_modules/redux-firestore/es/reducers/queriesReducer.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = queriesReducer;
exports.isComposable = void 0;

var _unset2 = _interopRequireDefault(__webpack_require__(/*! lodash/unset */ "./node_modules/lodash/unset.js"));

var _get2 = _interopRequireDefault(__webpack_require__(/*! lodash/get */ "./node_modules/lodash/get.js"));

var _set2 = _interopRequireDefault(__webpack_require__(/*! lodash/set */ "./node_modules/lodash/set.js"));

var _immer = _interopRequireDefault(__webpack_require__(/*! immer */ "./node_modules/redux-firestore/node_modules/immer/dist/immer.module.js"));

var _constants = __webpack_require__(/*! ../constants */ "./node_modules/redux-firestore/es/constants.js");

var _query = __webpack_require__(/*! ../utils/query */ "./node_modules/redux-firestore/es/utils/query.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var isComposable = function isComposable(action) {
  return (0, _get2.default)(action, 'meta.where') && (0, _get2.default)(action, 'meta.collection');
};

exports.isComposable = isComposable;

function queriesReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var action = arguments.length > 1 ? arguments[1] : undefined;
  return (0, _immer.default)(state, function (draft) {
    if (!isComposable(action)) {
      return state;
    }

    var key = (0, _query.getBaseQueryName)(action.meta);

    switch (action.type) {
      case _constants.actionTypes.GET_SUCCESS:
      case _constants.actionTypes.LISTENER_RESPONSE:
        draft[key] = _objectSpread({
          data: action.payload.data
        }, action.meta);
        return draft;

      case _constants.actionTypes.UNSET_LISTENER:
        if (draft[key]) {
          draft[key].data = undefined;
        }

        return draft;

      case _constants.actionTypes.DOCUMENT_ADDED:
      case _constants.actionTypes.DOCUMENT_MODIFIED:
        (0, _set2.default)(draft, [key, 'data', action.meta.doc], action.payload.data);
        return draft;

      case _constants.actionTypes.DOCUMENT_REMOVED:
      case _constants.actionTypes.DELETE_SUCCESS:
        (0, _unset2.default)(draft, [key, 'data', action.meta.doc]);
        return draft;

      default:
        return state;
    }
  });
}

/***/ }),

/***/ "./node_modules/redux-firestore/es/reducers/statusReducer.js":
/*!*******************************************************************!*\
  !*** ./node_modules/redux-firestore/es/reducers/statusReducer.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.requestingReducer = requestingReducer;
exports.requestedReducer = requestedReducer;
exports.timestampsReducer = timestampsReducer;
exports.default = void 0;

var _constants = __webpack_require__(/*! ../constants */ "./node_modules/redux-firestore/es/constants.js");

var _reducers = __webpack_require__(/*! ../utils/reducers */ "./node_modules/redux-firestore/es/utils/reducers.js");

var _query = __webpack_require__(/*! ../utils/query */ "./node_modules/redux-firestore/es/utils/query.js");

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var SET_LISTENER = _constants.actionTypes.SET_LISTENER,
    LISTENER_ERROR = _constants.actionTypes.LISTENER_ERROR,
    LISTENER_RESPONSE = _constants.actionTypes.LISTENER_RESPONSE;

function requestingReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _ref = arguments.length > 1 ? arguments[1] : undefined,
      type = _ref.type,
      meta = _ref.meta;

  switch (type) {
    case SET_LISTENER:
      return _objectSpread({}, state, _defineProperty({}, (0, _reducers.getSlashStrPath)((0, _query.getQueryName)(meta)), true));

    case LISTENER_ERROR:
    case LISTENER_RESPONSE:
      return _objectSpread({}, state, _defineProperty({}, (0, _reducers.getSlashStrPath)((0, _query.getQueryName)(meta)), false));

    default:
      return state;
  }
}

function requestedReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _ref2 = arguments.length > 1 ? arguments[1] : undefined,
      type = _ref2.type,
      meta = _ref2.meta;

  switch (type) {
    case SET_LISTENER:
      return _objectSpread({}, state, _defineProperty({}, (0, _query.getQueryName)(meta), false));

    case LISTENER_ERROR:
    case LISTENER_RESPONSE:
      return _objectSpread({}, state, _defineProperty({}, (0, _query.getQueryName)(meta), true));

    default:
      return state;
  }
}

function timestampsReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _ref3 = arguments.length > 1 ? arguments[1] : undefined,
      type = _ref3.type,
      meta = _ref3.meta;

  switch (type) {
    case SET_LISTENER:
      return _objectSpread({}, state, _defineProperty({}, (0, _query.getQueryName)(meta), Date.now()));

    default:
      return state;
  }
}

var _default = (0, _reducers.combineReducers)({
  requesting: requestingReducer,
  requested: requestedReducer,
  timestamps: timestampsReducer
});

exports.default = _default;

/***/ }),

/***/ "./node_modules/redux-firestore/es/utils/actions.js":
/*!**********************************************************!*\
  !*** ./node_modules/redux-firestore/es/utils/actions.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapInDispatch = wrapInDispatch;
exports.mapWithFirebaseAndDispatch = mapWithFirebaseAndDispatch;

var _mapValues2 = _interopRequireDefault(__webpack_require__(/*! lodash/mapValues */ "./node_modules/lodash/mapValues.js"));

var _isFunction2 = _interopRequireDefault(__webpack_require__(/*! lodash/isFunction */ "./node_modules/lodash/isFunction.js"));

var _isObject2 = _interopRequireDefault(__webpack_require__(/*! lodash/isObject */ "./node_modules/lodash/isObject.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function makePayload(_ref, valToPass) {
  var payload = _ref.payload;
  return (0, _isFunction2.default)(payload) ? payload(valToPass) : payload;
}

function wrapInDispatch(dispatch, _ref2) {
  var ref = _ref2.ref,
      _ref2$meta = _ref2.meta,
      meta = _ref2$meta === void 0 ? {} : _ref2$meta,
      method = _ref2.method,
      _ref2$args = _ref2.args,
      args = _ref2$args === void 0 ? [] : _ref2$args,
      types = _ref2.types;

  var _types = _slicedToArray(types, 3),
      requestingType = _types[0],
      successType = _types[1],
      errorType = _types[2];

  dispatch({
    type: (0, _isObject2.default)(requestingType) ? requestingType.type : requestingType,
    meta: meta,
    payload: (0, _isObject2.default)(requestingType) ? requestingType.payload : {
      args: args
    }
  });
  return ref[method].apply(ref, _toConsumableArray(args)).then(function (result) {
    var successIsObject = (0, _isObject2.default)(successType);
    var actionObj = {
      type: successIsObject ? successType.type : successType,
      meta: meta,
      payload: successIsObject && successType.payload ? makePayload(successType, result) : {
        args: args
      }
    };

    if (successIsObject && successType.preserve) {
      actionObj.preserve = successType.preserve;
    }

    if (successIsObject && successType.merge) {
      actionObj.merge = successType.merge;
    }

    dispatch(actionObj);
    return result;
  }).catch(function (err) {
    dispatch({
      type: errorType,
      meta: meta,
      payload: err
    });
    return Promise.reject(err);
  });
}

function createWithFirebaseAndDispatch(firebase, dispatch) {
  return function (func) {
    return function () {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return func.apply(firebase, [firebase, dispatch].concat(args));
    };
  };
}

function mapWithFirebaseAndDispatch(firebase, dispatch, actions, aliases) {
  var withFirebaseAndDispatch = createWithFirebaseAndDispatch(firebase, dispatch);
  return _objectSpread({}, (0, _mapValues2.default)(actions, withFirebaseAndDispatch), aliases.reduce(function (acc, _ref3) {
    var action = _ref3.action,
        name = _ref3.name;
    return _objectSpread({}, acc, _defineProperty({}, name, withFirebaseAndDispatch(action)));
  }, {}));
}

/***/ }),

/***/ "./node_modules/redux-firestore/es/utils/query.js":
/*!********************************************************!*\
  !*** ./node_modules/redux-firestore/es/utils/query.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.firestoreRef = firestoreRef;
exports.getQueryName = getQueryName;
exports.getBaseQueryName = getBaseQueryName;
exports.listenerExists = listenerExists;
exports.attachListener = attachListener;
exports.detachListener = detachListener;
exports.queryStrToObj = queryStrToObj;
exports.getQueryConfig = getQueryConfig;
exports.getQueryConfigs = getQueryConfigs;
exports.orderedFromSnap = orderedFromSnap;
exports.dataByIdSnapshot = dataByIdSnapshot;
exports.getPopulateChild = getPopulateChild;
exports.populateList = populateList;
exports.promisesForPopulate = promisesForPopulate;
exports.dispatchListenerResponse = dispatchListenerResponse;
exports.getPopulateActions = getPopulateActions;

var _cloneDeep2 = _interopRequireDefault(__webpack_require__(/*! lodash/cloneDeep */ "./node_modules/lodash/cloneDeep.js"));

var _some2 = _interopRequireDefault(__webpack_require__(/*! lodash/some */ "./node_modules/lodash/some.js"));

var _set2 = _interopRequireDefault(__webpack_require__(/*! lodash/set */ "./node_modules/lodash/set.js"));

var _get2 = _interopRequireDefault(__webpack_require__(/*! lodash/get */ "./node_modules/lodash/get.js"));

var _map2 = _interopRequireDefault(__webpack_require__(/*! lodash/map */ "./node_modules/lodash/map.js"));

var _has2 = _interopRequireDefault(__webpack_require__(/*! lodash/has */ "./node_modules/lodash/has.js"));

var _forEach2 = _interopRequireDefault(__webpack_require__(/*! lodash/forEach */ "./node_modules/lodash/forEach.js"));

var _trim2 = _interopRequireDefault(__webpack_require__(/*! lodash/trim */ "./node_modules/lodash/trim.js"));

var _size2 = _interopRequireDefault(__webpack_require__(/*! lodash/size */ "./node_modules/lodash/size.js"));

var _isEmpty2 = _interopRequireDefault(__webpack_require__(/*! lodash/isEmpty */ "./node_modules/lodash/isEmpty.js"));

var _isNumber2 = _interopRequireDefault(__webpack_require__(/*! lodash/isNumber */ "./node_modules/lodash/isNumber.js"));

var _isObject2 = _interopRequireDefault(__webpack_require__(/*! lodash/isObject */ "./node_modules/lodash/isObject.js"));

var _isFunction2 = _interopRequireDefault(__webpack_require__(/*! lodash/isFunction */ "./node_modules/lodash/isFunction.js"));

var _isArray2 = _interopRequireDefault(__webpack_require__(/*! lodash/isArray */ "./node_modules/lodash/isArray.js"));

var _isString2 = _interopRequireDefault(__webpack_require__(/*! lodash/isString */ "./node_modules/lodash/isString.js"));

var _constants = __webpack_require__(/*! ../constants */ "./node_modules/redux-firestore/es/constants.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _toArray(arr) {
  return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest();
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

function addWhereToRef(ref, where) {
  if (!(0, _isArray2.default)(where)) {
    throw new Error('where parameter must be an array.');
  }

  if ((0, _isString2.default)(where[0])) {
    return where.length > 1 ? ref.where.apply(ref, _toConsumableArray(where)) : ref.where(where[0]);
  }

  return where.reduce(function (acc, whereArgs) {
    return addWhereToRef(acc, whereArgs);
  }, ref);
}

function addOrderByToRef(ref, orderBy) {
  if (!(0, _isArray2.default)(orderBy) && !(0, _isString2.default)(orderBy)) {
    throw new Error('orderBy parameter must be an array or string.');
  }

  if ((0, _isString2.default)(orderBy)) {
    return ref.orderBy(orderBy);
  }

  if ((0, _isString2.default)(orderBy[0])) {
    return ref.orderBy.apply(ref, _toConsumableArray(orderBy));
  }

  return orderBy.reduce(function (acc, orderByArgs) {
    return addOrderByToRef(acc, orderByArgs);
  }, ref);
}

function handleSubcollections(ref, subcollectionList) {
  if (subcollectionList) {
    (0, _forEach2.default)(subcollectionList, function (subcollection) {
      if (subcollection.collection) {
        if (!(0, _isFunction2.default)(ref.collection)) {
          throw new Error("Collection can only be run on a document. Check that query config for subcollection: \"".concat(subcollection.collection, "\" contains a doc parameter."));
        }

        ref = ref.collection(subcollection.collection);
      }

      if (subcollection.doc) ref = ref.doc(subcollection.doc);
      if (subcollection.where) ref = addWhereToRef(ref, subcollection.where);

      if (subcollection.orderBy) {
        ref = addOrderByToRef(ref, subcollection.orderBy);
      }

      if (subcollection.limit) ref = ref.limit(subcollection.limit);
      if (subcollection.startAt) ref = ref.startAt(subcollection.startAt);

      if (subcollection.startAfter) {
        ref = ref.startAfter(subcollection.startAfter);
      }

      if (subcollection.endAt) ref = ref.endAt(subcollection.endAt);
      if (subcollection.endBefore) ref = ref.endBefore(subcollection.endBefore);
      ref = handleSubcollections(ref, subcollection.subcollections);
    });
  }

  return ref;
}

function firestoreRef(firebase, meta) {
  if (!firebase.firestore) {
    throw new Error('Firestore must be required and initalized.');
  }

  var collection = meta.collection,
      doc = meta.doc,
      subcollections = meta.subcollections,
      where = meta.where,
      orderBy = meta.orderBy,
      limit = meta.limit,
      startAt = meta.startAt,
      startAfter = meta.startAfter,
      endAt = meta.endAt,
      endBefore = meta.endBefore;
  var ref = firebase.firestore().collection(collection);
  if (doc) ref = ref.doc(doc);
  ref = handleSubcollections(ref, subcollections);
  if (where) ref = addWhereToRef(ref, where);
  if (orderBy) ref = addOrderByToRef(ref, orderBy);
  if (limit) ref = ref.limit(limit);
  if (startAt) ref = ref.startAt(startAt);
  if (startAfter) ref = ref.startAfter(startAfter);
  if (endAt) ref = ref.endAt(endAt);
  if (endBefore) ref = ref.endBefore(endBefore);
  return ref;
}

function arrayToStr(key, value) {
  if ((0, _isString2.default)(value) || (0, _isNumber2.default)(value)) return "".concat(key, "=").concat(value);
  if ((0, _isString2.default)(value[0])) return "".concat(key, "=").concat(value.join(':'));
  if (value && value.toString) return "".concat(key, "=").concat(value.toString());
  return value.map(function (val) {
    return arrayToStr(key, val);
  });
}

function pickQueryParams(obj) {
  return ['where', 'orderBy', 'limit', 'startAfter', 'startAt', 'endAt', 'endBefore'].reduce(function (acc, key) {
    return obj[key] ? _objectSpread({}, acc, _defineProperty({}, key, obj[key])) : acc;
  }, {});
}

function serialize(queryParams) {
  return Object.keys(queryParams).filter(function (key) {
    return queryParams[key] !== undefined;
  }).map(function (key) {
    return arrayToStr(key, queryParams[key]);
  }).join('&');
}

function getQueryName(meta) {
  if ((0, _isString2.default)(meta)) {
    return meta;
  }

  var collection = meta.collection,
      doc = meta.doc,
      subcollections = meta.subcollections,
      storeAs = meta.storeAs,
      remainingMeta = _objectWithoutProperties(meta, ["collection", "doc", "subcollections", "storeAs"]);

  if (!collection) {
    throw new Error('Collection is required to build query name');
  }

  if (storeAs) {
    return storeAs;
  }

  var basePath = collection;

  if (doc) {
    basePath = basePath.concat("/".concat(doc));
  }

  if (subcollections) {
    var mappedCollections = subcollections.map(function (subcollection) {
      return getQueryName(subcollection);
    });
    basePath = "".concat(basePath, "/").concat(mappedCollections.join('/'));
  }

  var queryParams = pickQueryParams(remainingMeta);

  if (!(0, _isEmpty2.default)(queryParams)) {
    if (queryParams.where && !(0, _isArray2.default)(queryParams.where)) {
      throw new Error('where parameter must be an array.');
    }

    basePath = basePath.concat('?', serialize(queryParams));
  }

  return basePath;
}

function getBaseQueryName(meta) {
  if ((0, _isString2.default)(meta)) {
    return meta;
  }

  var collection = meta.collection,
      subcollections = meta.subcollections,
      remainingMeta = _objectWithoutProperties(meta, ["collection", "subcollections"]);

  if (!collection) {
    throw new Error('Collection is required to build query name');
  }

  var basePath = collection;

  if (subcollections) {
    var mappedCollections = subcollections.map(function (subcollection) {
      return getQueryName(subcollection);
    });
    basePath = "".concat(basePath, "/").concat(mappedCollections.join('/'));
  }

  var queryParams = pickQueryParams(remainingMeta);

  if (!(0, _isEmpty2.default)(queryParams)) {
    if (queryParams.where && !(0, _isArray2.default)(queryParams.where)) {
      throw new Error('where parameter must be an array.');
    }

    basePath = basePath.concat('?', serialize(queryParams));
  }

  return basePath;
}

function confirmMetaAndConfig(firebase, meta) {
  if (!meta) {
    throw new Error('Meta data is required to attach listener.');
  }

  if (!(0, _has2.default)(firebase, '_.listeners')) {
    throw new Error('Internal Firebase object required to attach listener. Confirm that reduxFirestore enhancer was added when you were creating your store');
  }
}

function listenerExists(firebase, meta) {
  confirmMetaAndConfig(firebase, meta);
  var name = getQueryName(meta);
  return !!firebase._.listeners[name];
}

function attachListener(firebase, dispatch, meta, unsubscribe) {
  confirmMetaAndConfig(firebase, meta);
  var name = getQueryName(meta);

  if (!firebase._.listeners[name]) {
    firebase._.listeners[name] = unsubscribe;
  }

  dispatch({
    type: _constants.actionTypes.SET_LISTENER,
    meta: meta,
    payload: {
      name: name
    }
  });
  return firebase._.listeners;
}

function detachListener(firebase, dispatch, meta) {
  var name = getQueryName(meta);

  if (firebase._.listeners[name]) {
    firebase._.listeners[name]();

    delete firebase._.listeners[name];
  }

  dispatch({
    type: _constants.actionTypes.UNSET_LISTENER,
    meta: meta,
    payload: {
      name: name
    }
  });
}

function queryStrToObj(queryPathStr, parsedPath) {
  var pathArr = parsedPath || (0, _trim2.default)(queryPathStr, ['/']).split('/');

  var _pathArr = _toArray(pathArr),
      collection = _pathArr[0],
      doc = _pathArr[1],
      subcollections = _pathArr.slice(2);

  var queryObj = {};
  if (collection) queryObj.collection = collection;
  if (doc) queryObj.doc = doc;

  if (subcollections.length) {
    queryObj.subcollections = [queryStrToObj('', subcollections)];
  }

  return queryObj;
}

function getQueryConfig(query) {
  if ((0, _isString2.default)(query)) {
    return queryStrToObj(query);
  }

  if ((0, _isObject2.default)(query)) {
    if (!query.collection && !query.doc) {
      throw new Error('Collection and/or Doc are required parameters within query definition object.');
    }

    return query;
  }

  throw new Error('Invalid Path Definition: Only Strings and Objects are accepted.');
}

function getQueryConfigs(queries) {
  if ((0, _isArray2.default)(queries)) {
    return queries.map(getQueryConfig);
  }

  if ((0, _isString2.default)(queries)) {
    return queryStrToObj(queries);
  }

  if ((0, _isObject2.default)(queries)) {
    return [getQueryConfig(queries)];
  }

  throw new Error('Querie(s) must be an Array or a string.');
}

function orderedFromSnap(snap) {
  var ordered = [];

  if (snap.data && snap.exists) {
    var obj = (0, _isObject2.default)(snap.data()) ? _objectSpread({
      id: snap.id
    }, snap.data() || snap.data) : {
      id: snap.id,
      data: snap.data()
    };
    ordered.push(obj);
  } else if (snap.forEach) {
    snap.forEach(function (doc) {
      var obj = (0, _isObject2.default)(doc.data()) ? _objectSpread({
        id: doc.id
      }, doc.data() || doc.data) : {
        id: doc.id,
        data: doc.data()
      };
      ordered.push(obj);
    });
  }

  return ordered;
}

function dataByIdSnapshot(snap) {
  var data = {};

  if (snap.data) {
    data[snap.id] = snap.exists ? snap.data() : null;
  } else if (snap.forEach) {
    snap.forEach(function (doc) {
      data[doc.id] = doc.data() || doc;
    });
  }

  return (0, _size2.default)(data) ? data : null;
}

function getPopulateChild(firebase, populate, id) {
  return firestoreRef(firebase, {
    collection: populate.root,
    doc: id
  }).get().then(function (snap) {
    return Object.assign({
      id: id
    }, snap.data());
  });
}

function populateList(firebase, originalObj, p, results) {
  if (!results[p.root]) {
    (0, _set2.default)(results, p.root, {});
  }

  return Promise.all((0, _map2.default)(originalObj, function (id, childKey) {
    var populateKey = id === true || p.populateByKey ? childKey : id;
    return getPopulateChild(firebase, p, populateKey).then(function (pc) {
      if (pc) {
        return (0, _set2.default)(results, "".concat(p.root, ".").concat(populateKey), pc);
      }

      return results;
    });
  }));
}

function getPopulateObj(str) {
  if (!(0, _isString2.default)(str)) {
    return str;
  }

  var strArray = str.split(':');
  return {
    child: strArray[0],
    root: strArray[1]
  };
}

function getPopulateObjs(arr) {
  if (!(0, _isArray2.default)(arr)) {
    return arr;
  }

  return arr.map(function (o) {
    return (0, _isObject2.default)(o) ? o : getPopulateObj(o);
  });
}

function promisesForPopulate(firebase, dataKey, originalData, populatesIn) {
  var promisesArray = [];
  var results = {};
  var populatesForData = getPopulateObjs((0, _isFunction2.default)(populatesIn) ? populatesIn(dataKey, originalData) : populatesIn);
  var dataHasPopulateChilds = (0, _some2.default)(populatesForData, function (populate) {
    return (0, _has2.default)(originalData, populate.child);
  });

  if (dataHasPopulateChilds) {
    (0, _forEach2.default)(populatesForData, function (p) {
      if ((0, _isString2.default)((0, _get2.default)(originalData, p.child))) {
        return promisesArray.push(getPopulateChild(firebase, p, (0, _get2.default)(originalData, p.child)).then(function (v) {
          if (v) {
            (0, _set2.default)(results, "".concat(p.root, ".").concat((0, _get2.default)(originalData, p.child)), v);
          }
        }));
      }

      return promisesArray.push(populateList(firebase, (0, _get2.default)(originalData, p.child), p, results));
    });
  } else {
    (0, _forEach2.default)(originalData, function (d, key) {
      var populatesForDataItem = getPopulateObj((0, _isFunction2.default)(populatesIn) ? populatesIn(key, d) : populatesIn);
      (0, _forEach2.default)(populatesForDataItem, function (p) {
        var idOrList = (0, _get2.default)(d, p.child);

        if (!idOrList) {
          return;
        }

        if ((0, _isString2.default)(idOrList)) {
          return promisesArray.push(getPopulateChild(firebase, p, idOrList).then(function (v) {
            if (v) {
              (0, _set2.default)(results, "".concat(p.root, ".").concat(idOrList), v);
            }

            return results;
          }));
        }

        if ((0, _isArray2.default)(idOrList) || (0, _isObject2.default)(idOrList)) {
          return promisesArray.push(populateList(firebase, idOrList, p, results));
        }
      });
    });
  }

  return Promise.all(promisesArray).then(function () {
    return results;
  });
}

var changeTypeToEventType = {
  added: _constants.actionTypes.DOCUMENT_ADDED,
  removed: _constants.actionTypes.DOCUMENT_REMOVED,
  modified: _constants.actionTypes.DOCUMENT_MODIFIED
};

function docChangeEvent(change) {
  var originalMeta = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var meta = _objectSpread({}, (0, _cloneDeep2.default)(originalMeta), {
    path: change.doc.ref.path
  });

  if (originalMeta.subcollections && !originalMeta.storeAs) {
    meta.subcollections[0] = _objectSpread({}, meta.subcollections[0], {
      doc: change.doc.id
    });
  } else {
    meta.doc = change.doc.id;
  }

  return {
    type: changeTypeToEventType[change.type] || _constants.actionTypes.DOCUMENT_MODIFIED,
    meta: meta,
    payload: {
      data: change.doc.data(),
      ordered: {
        oldIndex: change.oldIndex,
        newIndex: change.newIndex
      }
    }
  };
}

function dispatchListenerResponse(_ref) {
  var dispatch = _ref.dispatch,
      docData = _ref.docData,
      meta = _ref.meta,
      firebase = _ref.firebase;

  var _ref2 = firebase._.config || {},
      mergeOrdered = _ref2.mergeOrdered,
      mergeOrderedDocUpdates = _ref2.mergeOrderedDocUpdates,
      mergeOrderedCollectionUpdates = _ref2.mergeOrderedCollectionUpdates;

  var docChanges = typeof docData.docChanges === 'function' ? docData.docChanges() : docData.docChanges;

  if (docChanges && docChanges.length < docData.size) {
    docChanges.forEach(function (change) {
      dispatch(docChangeEvent(change, meta));
    });
  } else {
    dispatch({
      type: _constants.actionTypes.LISTENER_RESPONSE,
      meta: meta,
      payload: {
        data: dataByIdSnapshot(docData),
        ordered: orderedFromSnap(docData)
      },
      merge: {
        docs: mergeOrdered && mergeOrderedDocUpdates,
        collections: mergeOrdered && mergeOrderedCollectionUpdates
      }
    });
  }
}

function getPopulateActions(_ref3) {
  var firebase = _ref3.firebase,
      docData = _ref3.docData,
      meta = _ref3.meta;
  return promisesForPopulate(firebase, docData.id, dataByIdSnapshot(docData), meta.populates).then(function (populateResults) {
    return Object.keys(populateResults).map(function (resultKey) {
      return {
        meta: {
          collection: resultKey
        },
        payload: {
          data: populateResults[resultKey]
        },
        requesting: false,
        requested: true
      };
    });
  }).catch(function (populateErr) {
    console.error('Error with populate:', populateErr, meta);
    return Promise.reject(populateErr);
  });
}

/***/ }),

/***/ "./node_modules/redux-firestore/es/utils/reducers.js":
/*!***********************************************************!*\
  !*** ./node_modules/redux-firestore/es/utils/reducers.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pathToArr = pathToArr;
exports.getSlashStrPath = getSlashStrPath;
exports.getDotStrPath = getDotStrPath;
exports.combineReducers = combineReducers;
exports.pathFromMeta = pathFromMeta;
exports.updateItemInArray = updateItemInArray;
exports.createReducer = createReducer;
exports.preserveValuesFromState = preserveValuesFromState;

var _flatten2 = _interopRequireDefault(__webpack_require__(/*! lodash/flatten */ "./node_modules/lodash/flatten.js"));

var _trimStart2 = _interopRequireDefault(__webpack_require__(/*! lodash/trimStart */ "./node_modules/lodash/trimStart.js"));

var _replace2 = _interopRequireDefault(__webpack_require__(/*! lodash/replace */ "./node_modules/lodash/replace.js"));

var _pick2 = _interopRequireDefault(__webpack_require__(/*! lodash/pick */ "./node_modules/lodash/pick.js"));

var _isArray2 = _interopRequireDefault(__webpack_require__(/*! lodash/isArray */ "./node_modules/lodash/isArray.js"));

var _isBoolean2 = _interopRequireDefault(__webpack_require__(/*! lodash/isBoolean */ "./node_modules/lodash/isBoolean.js"));

var _isFunction2 = _interopRequireDefault(__webpack_require__(/*! lodash/isFunction */ "./node_modules/lodash/isFunction.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

function pathToArr(path) {
  return path ? path.split(/\//).filter(function (p) {
    return !!p;
  }) : [];
}

function getSlashStrPath(path) {
  return (0, _trimStart2.default)((0, _replace2.default)(path, /[.]/g, '/'), '/');
}

function getDotStrPath(path) {
  return pathToArr(path).join('.');
}

function combineReducers(reducers) {
  return function () {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var action = arguments.length > 1 ? arguments[1] : undefined;
    return Object.keys(reducers).reduce(function (nextState, key) {
      nextState[key] = reducers[key](state[key], action);
      return nextState;
    }, {});
  };
}

function pathFromMeta(meta) {
  if (!meta) {
    throw new Error('Action meta is required to build path for reducers.');
  }

  var collection = meta.collection,
      doc = meta.doc,
      subcollections = meta.subcollections,
      storeAs = meta.storeAs;

  if (storeAs) {
    return doc ? [storeAs, doc] : [storeAs];
  }

  if (meta.path) {
    return meta.path.split('/');
  }

  if (!collection) {
    throw new Error('Collection is required to construct reducer path.');
  }

  var basePath = [collection];

  if (doc) {
    basePath = [].concat(_toConsumableArray(basePath), [doc]);
  }

  if (!subcollections) {
    return basePath;
  }

  var mappedCollections = subcollections.map(pathFromMeta);
  return [].concat(_toConsumableArray(basePath), _toConsumableArray((0, _flatten2.default)(mappedCollections)));
}

function updateItemInArray(array, itemId, updateItemCallback) {
  var matchFound = false;
  var modified = Array.isArray(array) ? array.map(function (item) {
    if (!item || item.id !== itemId) {
      return item;
    }

    matchFound = true;
    var updatedItem = updateItemCallback(item);
    return updatedItem;
  }) : [];

  if (!matchFound) {
    modified.push(updateItemCallback({
      id: itemId
    }));
  }

  return modified;
}

function createReducer(initialState, handlers) {
  return function reducer() {
    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;
    var action = arguments.length > 1 ? arguments[1] : undefined;

    if (handlers.hasOwnProperty(action.type)) {
      return handlers[action.type](state, action);
    }

    return state;
  };
}

function preserveValuesFromState(state, preserveSetting, nextState) {
  if ((0, _isBoolean2.default)(preserveSetting)) {
    return nextState ? _objectSpread({}, state, nextState) : state;
  }

  if ((0, _isFunction2.default)(preserveSetting)) {
    return preserveSetting(state, nextState);
  }

  if ((0, _isArray2.default)(preserveSetting)) {
    return (0, _pick2.default)(state, preserveSetting);
  }

  throw new Error('Invalid preserve parameter. It must be an Object or an Array.');
}

/***/ }),

/***/ "./node_modules/redux-firestore/node_modules/immer/dist/immer.module.js":
/*!******************************************************************************!*\
  !*** ./node_modules/redux-firestore/node_modules/immer/dist/immer.module.js ***!
  \******************************************************************************/
/*! exports provided: produce, applyPatches, setAutoFreeze, setUseProxies, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "produce", function() { return produce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyPatches", function() { return applyPatches$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setAutoFreeze", function() { return setAutoFreeze; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setUseProxies", function() { return setUseProxies; });
function generatePatches(state, basepath, patches, inversePatches, baseValue, resultValue) {
  if (patches) if (Array.isArray(baseValue)) generateArrayPatches(state, basepath, patches, inversePatches, baseValue, resultValue);else generateObjectPatches(state, basepath, patches, inversePatches, baseValue, resultValue);
}

function generateArrayPatches(state, basepath, patches, inversePatches, baseValue, resultValue) {
  var shared = Math.min(baseValue.length, resultValue.length);

  for (var i = 0; i < shared; i++) {
    if (state.assigned[i] && baseValue[i] !== resultValue[i]) {
      var path = basepath.concat(i);
      patches.push({
        op: "replace",
        path: path,
        value: resultValue[i]
      });
      inversePatches.push({
        op: "replace",
        path: path,
        value: baseValue[i]
      });
    }
  }

  if (shared < resultValue.length) {
    // stuff was added
    for (var _i = shared; _i < resultValue.length; _i++) {
      var _path = basepath.concat(_i);

      patches.push({
        op: "add",
        path: _path,
        value: resultValue[_i]
      });
    }

    inversePatches.push({
      op: "replace",
      path: basepath.concat("length"),
      value: baseValue.length
    });
  } else if (shared < baseValue.length) {
    // stuff was removed
    patches.push({
      op: "replace",
      path: basepath.concat("length"),
      value: resultValue.length
    });

    for (var _i2 = shared; _i2 < baseValue.length; _i2++) {
      var _path2 = basepath.concat(_i2);

      inversePatches.push({
        op: "add",
        path: _path2,
        value: baseValue[_i2]
      });
    }
  }
}

function generateObjectPatches(state, basepath, patches, inversePatches, baseValue, resultValue) {
  each(state.assigned, function (key, assignedValue) {
    var origValue = baseValue[key];
    var value = resultValue[key];
    var op = !assignedValue ? "remove" : key in baseValue ? "replace" : "add";
    if (origValue === baseValue && op === "replace") return;
    var path = basepath.concat(key);
    patches.push(op === "remove" ? {
      op: op,
      path: path
    } : {
      op: op,
      path: path,
      value: value
    });
    inversePatches.push(op === "add" ? {
      op: "remove",
      path: path
    } : op === "remove" ? {
      op: "add",
      path: path,
      value: origValue
    } : {
      op: "replace",
      path: path,
      value: origValue
    });
  });
}

function applyPatches(draft, patches) {
  var _loop = function _loop(i) {
    var patch = patches[i];

    if (patch.path.length === 0 && patch.op === "replace") {
      draft = patch.value;
    } else {
      var path = patch.path.slice();
      var key = path.pop();
      var base = path.reduce(function (current, part) {
        if (!current) throw new Error("Cannot apply patch, path doesn't resolve: " + patch.path.join("/"));
        return current[part];
      }, draft);
      if (!base) throw new Error("Cannot apply patch, path doesn't resolve: " + patch.path.join("/"));

      switch (patch.op) {
        case "replace":
        case "add":
          // TODO: add support is not extensive, it does not support insertion or `-` atm!
          base[key] = patch.value;
          break;

        case "remove":
          if (Array.isArray(base)) {
            if (key === base.length - 1) base.length -= 1;else throw new Error("Remove can only remove the last key of an array, index: " + key + ", length: " + base.length);
          } else delete base[key];

          break;

        default:
          throw new Error("Unsupported patch operation: " + patch.op);
      }
    }
  };

  for (var i = 0; i < patches.length; i++) {
    _loop(i);
  }

  return draft;
}

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var PROXY_STATE = typeof Symbol !== "undefined" ? Symbol("immer-proxy-state") : "__$immer_state";
var RETURNED_AND_MODIFIED_ERROR = "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.";

function verifyMinified() {}

var inProduction = typeof process !== "undefined" && "development" === "production" || verifyMinified.name !== "verifyMinified";
var autoFreeze = !inProduction;
var useProxies = typeof Proxy !== "undefined";
/**
 * Automatically freezes any state trees generated by immer.
 * This protects against accidental modifications of the state tree outside of an immer function.
 * This comes with a performance impact, so it is recommended to disable this option in production.
 * It is by default enabled.
 *
 * @returns {void}
 */

function setAutoFreeze(enableAutoFreeze) {
  autoFreeze = enableAutoFreeze;
}

function setUseProxies(value) {
  useProxies = value;
}

function getUseProxies() {
  return useProxies;
}

function isProxy(value) {
  return !!value && !!value[PROXY_STATE];
}

function isProxyable(value) {
  if (!value) return false;
  if ((typeof value === "undefined" ? "undefined" : _typeof(value)) !== "object") return false;
  if (Array.isArray(value)) return true;
  var proto = Object.getPrototypeOf(value);
  return proto === null || proto === Object.prototype;
}

function freeze(value) {
  if (autoFreeze) {
    Object.freeze(value);
  }

  return value;
}

var assign = Object.assign || function assign(target, value) {
  for (var key in value) {
    if (has(value, key)) {
      target[key] = value[key];
    }
  }

  return target;
};

function shallowCopy(value) {
  if (Array.isArray(value)) return value.slice();
  var target = value.__proto__ === undefined ? Object.create(null) : {};
  return assign(target, value);
}

function each(value, cb) {
  if (Array.isArray(value)) {
    for (var i = 0; i < value.length; i++) {
      cb(i, value[i]);
    }
  } else {
    for (var key in value) {
      cb(key, value[key]);
    }
  }
}

function has(thing, prop) {
  return Object.prototype.hasOwnProperty.call(thing, prop);
} // given a base object, returns it if unmodified, or return the changed cloned if modified


function finalize(base, path, patches, inversePatches) {
  if (isProxy(base)) {
    var state = base[PROXY_STATE];

    if (state.modified === true) {
      if (state.finalized === true) return state.copy;
      state.finalized = true;
      var result = finalizeObject(useProxies ? state.copy : state.copy = shallowCopy(base), state, path, patches, inversePatches);
      generatePatches(state, path, patches, inversePatches, state.base, result);
      return result;
    } else {
      return state.base;
    }
  }

  finalizeNonProxiedObject(base);
  return base;
}

function finalizeObject(copy, state, path, patches, inversePatches) {
  var base = state.base;
  each(copy, function (prop, value) {
    if (value !== base[prop]) {
      // if there was an assignment on this property, we don't need to generate
      // patches for the subtree
      var _generatePatches = patches && !has(state.assigned, prop);

      copy[prop] = finalize(value, _generatePatches && path.concat(prop), _generatePatches && patches, inversePatches);
    }
  });
  return freeze(copy);
}

function finalizeNonProxiedObject(parent) {
  // If finalize is called on an object that was not a proxy, it means that it is an object that was not there in the original
  // tree and it could contain proxies at arbitrarily places. Let's find and finalize them as well
  if (!isProxyable(parent)) return;
  if (Object.isFrozen(parent)) return;
  each(parent, function (i, child) {
    if (isProxy(child)) {
      parent[i] = finalize(child);
    } else finalizeNonProxiedObject(child);
  }); // always freeze completely new data

  freeze(parent);
}

function is(x, y) {
  // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js
  if (x === y) {
    return x !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
} // @ts-check


var proxies = null;
var objectTraps = {
  get: get$1,
  has: function has$$1(target, prop) {
    return prop in source(target);
  },
  ownKeys: function ownKeys(target) {
    return Reflect.ownKeys(source(target));
  },
  set: set$1,
  deleteProperty: deleteProperty,
  getOwnPropertyDescriptor: getOwnPropertyDescriptor,
  defineProperty: defineProperty$1,
  setPrototypeOf: function setPrototypeOf() {
    throw new Error("Immer does not support `setPrototypeOf()`.");
  }
};
var arrayTraps = {};
each(objectTraps, function (key, fn) {
  arrayTraps[key] = function () {
    arguments[0] = arguments[0][0];
    return fn.apply(this, arguments);
  };
});

function createState(parent, base) {
  return {
    modified: false,
    // this tree is modified (either this object or one of it's children)
    assigned: {},
    // true: value was assigned to these props, false: was removed
    finalized: false,
    parent: parent,
    base: base,
    copy: undefined,
    proxies: {}
  };
}

function source(state) {
  return state.modified === true ? state.copy : state.base;
}

function get$1(state, prop) {
  if (prop === PROXY_STATE) return state;

  if (state.modified) {
    var value = state.copy[prop];
    if (value === state.base[prop] && isProxyable(value)) // only create proxy if it is not yet a proxy, and not a new object
      // (new objects don't need proxying, they will be processed in finalize anyway)
      return state.copy[prop] = createProxy(state, value);
    return value;
  } else {
    if (has(state.proxies, prop)) return state.proxies[prop];
    var _value = state.base[prop];
    if (!isProxy(_value) && isProxyable(_value)) return state.proxies[prop] = createProxy(state, _value);
    return _value;
  }
}

function set$1(state, prop, value) {
  // TODO: optimize
  state.assigned[prop] = true;

  if (!state.modified) {
    if (prop in state.base && is(state.base[prop], value) || has(state.proxies, prop) && state.proxies[prop] === value) return true;
    markChanged(state);
  }

  state.copy[prop] = value;
  return true;
}

function deleteProperty(state, prop) {
  state.assigned[prop] = false;
  markChanged(state);
  delete state.copy[prop];
  return true;
}

function getOwnPropertyDescriptor(state, prop) {
  var owner = state.modified ? state.copy : has(state.proxies, prop) ? state.proxies : state.base;
  var descriptor = Reflect.getOwnPropertyDescriptor(owner, prop);
  if (descriptor && !(Array.isArray(owner) && prop === "length")) descriptor.configurable = true;
  return descriptor;
}

function defineProperty$1() {
  throw new Error("Immer does not support defining properties on draft objects.");
}

function markChanged(state) {
  if (!state.modified) {
    state.modified = true;
    state.copy = shallowCopy(state.base); // copy the proxies over the base-copy

    Object.assign(state.copy, state.proxies); // yup that works for arrays as well

    if (state.parent) markChanged(state.parent);
  }
} // creates a proxy for plain objects / arrays


function createProxy(parentState, base, key) {
  if (isProxy(base)) throw new Error("Immer bug. Plz report.");
  var state = createState(parentState, base, key);
  var proxy = Array.isArray(base) ? Proxy.revocable([state], arrayTraps) : Proxy.revocable(state, objectTraps);
  proxies.push(proxy);
  return proxy.proxy;
}

function produceProxy(baseState, producer, patchListener) {
  if (isProxy(baseState)) {
    // See #100, don't nest producers
    var returnValue = producer.call(baseState, baseState);
    return returnValue === undefined ? baseState : returnValue;
  }

  var previousProxies = proxies;
  proxies = [];
  var patches = patchListener && [];
  var inversePatches = patchListener && [];

  try {
    // create proxy for root
    var rootProxy = createProxy(undefined, baseState); // execute the thunk

    var _returnValue = producer.call(rootProxy, rootProxy); // and finalize the modified proxy


    var result = void 0; // check whether the draft was modified and/or a value was returned

    if (_returnValue !== undefined && _returnValue !== rootProxy) {
      // something was returned, and it wasn't the proxy itself
      if (rootProxy[PROXY_STATE].modified) throw new Error(RETURNED_AND_MODIFIED_ERROR); // See #117
      // Should we just throw when returning a proxy which is not the root, but a subset of the original state?
      // Looks like a wrongly modeled reducer

      result = finalize(_returnValue);

      if (patches) {
        patches.push({
          op: "replace",
          path: [],
          value: result
        });
        inversePatches.push({
          op: "replace",
          path: [],
          value: baseState
        });
      }
    } else {
      result = finalize(rootProxy, [], patches, inversePatches);
    } // revoke all proxies


    each(proxies, function (_, p) {
      return p.revoke();
    });
    patchListener && patchListener(patches, inversePatches);
    return result;
  } finally {
    proxies = previousProxies;
  }
} // @ts-check


var descriptors = {};
var states = null;

function createState$1(parent, proxy, base) {
  return {
    modified: false,
    assigned: {},
    // true: value was assigned to these props, false: was removed
    hasCopy: false,
    parent: parent,
    base: base,
    proxy: proxy,
    copy: undefined,
    finished: false,
    finalizing: false,
    finalized: false
  };
}

function source$1(state) {
  return state.hasCopy ? state.copy : state.base;
}

function _get(state, prop) {
  assertUnfinished(state);
  var value = source$1(state)[prop];

  if (!state.finalizing && value === state.base[prop] && isProxyable(value)) {
    // only create a proxy if the value is proxyable, and the value was in the base state
    // if it wasn't in the base state, the object is already modified and we will process it in finalize
    prepareCopy(state);
    return state.copy[prop] = createProxy$1(state, value);
  }

  return value;
}

function _set(state, prop, value) {
  assertUnfinished(state);
  state.assigned[prop] = true; // optimization; skip this if there is no listener

  if (!state.modified) {
    if (is(source$1(state)[prop], value)) return;
    markChanged$1(state);
    prepareCopy(state);
  }

  state.copy[prop] = value;
}

function markChanged$1(state) {
  if (!state.modified) {
    state.modified = true;
    if (state.parent) markChanged$1(state.parent);
  }
}

function prepareCopy(state) {
  if (state.hasCopy) return;
  state.hasCopy = true;
  state.copy = shallowCopy(state.base);
} // creates a proxy for plain objects / arrays


function createProxy$1(parent, base) {
  var proxy = shallowCopy(base);
  each(base, function (i) {
    Object.defineProperty(proxy, "" + i, createPropertyProxy("" + i));
  });
  var state = createState$1(parent, proxy, base);
  createHiddenProperty(proxy, PROXY_STATE, state);
  states.push(state);
  return proxy;
}

function createPropertyProxy(prop) {
  return descriptors[prop] || (descriptors[prop] = {
    configurable: true,
    enumerable: true,
    get: function get$$1() {
      return _get(this[PROXY_STATE], prop);
    },
    set: function set$$1(value) {
      _set(this[PROXY_STATE], prop, value);
    }
  });
}

function assertUnfinished(state) {
  if (state.finished === true) throw new Error("Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + JSON.stringify(state.copy || state.base));
} // this sounds very expensive, but actually it is not that expensive in practice
// as it will only visit proxies, and only do key-based change detection for objects for
// which it is not already know that they are changed (that is, only object for which no known key was changed)


function markChangesSweep() {
  // intentionally we process the proxies in reverse order;
  // ideally we start by processing leafs in the tree, because if a child has changed, we don't have to check the parent anymore
  // reverse order of proxy creation approximates this
  for (var i = states.length - 1; i >= 0; i--) {
    var state = states[i];

    if (state.modified === false) {
      if (Array.isArray(state.base)) {
        if (hasArrayChanges(state)) markChanged$1(state);
      } else if (hasObjectChanges(state)) markChanged$1(state);
    }
  }
}

function markChangesRecursively(object) {
  if (!object || (typeof object === "undefined" ? "undefined" : _typeof(object)) !== "object") return;
  var state = object[PROXY_STATE];
  if (!state) return;
  var proxy = state.proxy,
      base = state.base;

  if (Array.isArray(object)) {
    if (hasArrayChanges(state)) {
      markChanged$1(state);
      state.assigned.length = true;
      if (proxy.length < base.length) for (var i = proxy.length; i < base.length; i++) {
        state.assigned[i] = false;
      } else for (var _i = base.length; _i < proxy.length; _i++) {
        state.assigned[_i] = true;
      }
      each(proxy, function (index, child) {
        if (!state.assigned[index]) markChangesRecursively(child);
      });
    }
  } else {
    var _diffKeys = diffKeys(base, proxy),
        added = _diffKeys.added,
        removed = _diffKeys.removed;

    if (added.length > 0 || removed.length > 0) markChanged$1(state);
    each(added, function (_, key) {
      state.assigned[key] = true;
    });
    each(removed, function (_, key) {
      state.assigned[key] = false;
    });
    each(proxy, function (key, child) {
      if (!state.assigned[key]) markChangesRecursively(child);
    });
  }
}

function diffKeys(from, to) {
  // TODO: optimize
  var a = Object.keys(from);
  var b = Object.keys(to);
  return {
    added: b.filter(function (key) {
      return a.indexOf(key) === -1;
    }),
    removed: a.filter(function (key) {
      return b.indexOf(key) === -1;
    })
  };
}

function hasObjectChanges(state) {
  var baseKeys = Object.keys(state.base);
  var keys = Object.keys(state.proxy);
  return !shallowEqual(baseKeys, keys);
}

function hasArrayChanges(state) {
  var proxy = state.proxy;
  if (proxy.length !== state.base.length) return true; // See #116
  // If we first shorten the length, our array interceptors will be removed.
  // If after that new items are added, result in the same original length,
  // those last items will have no intercepting property.
  // So if there is no own descriptor on the last position, we know that items were removed and added
  // N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check
  // the last one

  var descriptor = Object.getOwnPropertyDescriptor(proxy, proxy.length - 1); // descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)

  if (descriptor && !descriptor.get) return true; // For all other cases, we don't have to compare, as they would have been picked up by the index setters

  return false;
}

function produceEs5(baseState, producer, patchListener) {
  if (isProxy(baseState)) {
    // See #100, don't nest producers
    var returnValue = producer.call(baseState, baseState);
    return returnValue === undefined ? baseState : returnValue;
  }

  var prevStates = states;
  states = [];
  var patches = patchListener && [];
  var inversePatches = patchListener && [];

  try {
    // create proxy for root
    var rootProxy = createProxy$1(undefined, baseState); // execute the thunk

    var _returnValue = producer.call(rootProxy, rootProxy); // and finalize the modified proxy


    each(states, function (_, state) {
      state.finalizing = true;
    });
    var result = void 0; // check whether the draft was modified and/or a value was returned

    if (_returnValue !== undefined && _returnValue !== rootProxy) {
      // something was returned, and it wasn't the proxy itself
      if (rootProxy[PROXY_STATE].modified) throw new Error(RETURNED_AND_MODIFIED_ERROR);
      result = finalize(_returnValue);

      if (patches) {
        patches.push({
          op: "replace",
          path: [],
          value: result
        });
        inversePatches.push({
          op: "replace",
          path: [],
          value: baseState
        });
      }
    } else {
      if (patchListener) markChangesRecursively(rootProxy);
      markChangesSweep(); // this one is more efficient if we don't need to know which attributes have changed

      result = finalize(rootProxy, [], patches, inversePatches);
    } // make sure all proxies become unusable


    each(states, function (_, state) {
      state.finished = true;
    });
    patchListener && patchListener(patches, inversePatches);
    return result;
  } finally {
    states = prevStates;
  }
}

function shallowEqual(objA, objB) {
  //From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js
  if (is(objA, objB)) return true;

  if ((typeof objA === "undefined" ? "undefined" : _typeof(objA)) !== "object" || objA === null || (typeof objB === "undefined" ? "undefined" : _typeof(objB)) !== "object" || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);
  if (keysA.length !== keysB.length) return false;

  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

function createHiddenProperty(target, prop, value) {
  Object.defineProperty(target, prop, {
    value: value,
    enumerable: false,
    writable: true
  });
}
/**
 * produce takes a state, and runs a function against it.
 * That function can freely mutate the state, as it will create copies-on-write.
 * This means that the original state will stay unchanged, and once the function finishes, the modified state is returned
 *
 * @export
 * @param {any} baseState - the state to start with
 * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified
 * @param {Function} patchListener - optional function that will be called with all the patches produces here
 * @returns {any} a new state, or the base state if nothing was modified
 */


function produce(baseState, producer, patchListener) {
  // prettier-ignore
  if (arguments.length < 1 || arguments.length > 3) throw new Error("produce expects 1 to 3 arguments, got " + arguments.length); // curried invocation

  if (typeof baseState === "function") {
    // prettier-ignore
    if (typeof producer === "function") throw new Error("if first argument is a function (curried invocation), the second argument to produce cannot be a function");
    var initialState = producer;
    var recipe = baseState;
    return function () {
      var args = arguments;
      var currentState = args[0] === undefined && initialState !== undefined ? initialState : args[0];
      return produce(currentState, function (draft) {
        args[0] = draft; // blegh!

        return recipe.apply(draft, args);
      });
    };
  } // prettier-ignore


  {
    if (typeof producer !== "function") throw new Error("if first argument is not a function, the second argument to produce should be a function");
    if (patchListener !== undefined && typeof patchListener !== "function") throw new Error("the third argument of a producer should not be set or a function");
  } // if state is a primitive, don't bother proxying at all

  if ((typeof baseState === "undefined" ? "undefined" : _typeof(baseState)) !== "object" || baseState === null) {
    var returnValue = producer(baseState);
    return returnValue === undefined ? baseState : returnValue;
  }

  if (!isProxyable(baseState)) throw new Error("the first argument to an immer producer should be a primitive, plain object or array, got " + (typeof baseState === "undefined" ? "undefined" : _typeof(baseState)) + ": \"" + baseState + "\"");
  return getUseProxies() ? produceProxy(baseState, producer, patchListener) : produceEs5(baseState, producer, patchListener);
}

var applyPatches$1 = produce(applyPatches);

/* harmony default export */ __webpack_exports__["default"] = (produce);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/redux-thunk/es/index.js":
/*!**********************************************!*\
  !*** ./node_modules/redux-thunk/es/index.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function createThunkMiddleware(extraArgument) {
  return function (_ref) {
    var dispatch = _ref.dispatch,
        getState = _ref.getState;
    return function (next) {
      return function (action) {
        if (typeof action === 'function') {
          return action(dispatch, getState, extraArgument);
        }

        return next(action);
      };
    };
  };
}

var thunk = createThunkMiddleware();
thunk.withExtraArgument = createThunkMiddleware;
/* harmony default export */ __webpack_exports__["default"] = (thunk);

/***/ }),

/***/ "./node_modules/redux/es/redux.js":
/*!****************************************!*\
  !*** ./node_modules/redux/es/redux.js ***!
  \****************************************/
/*! exports provided: createStore, combineReducers, bindActionCreators, applyMiddleware, compose, __DO_NOT_USE__ActionTypes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createStore", function() { return createStore; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "combineReducers", function() { return combineReducers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bindActionCreators", function() { return bindActionCreators; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyMiddleware", function() { return applyMiddleware; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compose", function() { return compose; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__DO_NOT_USE__ActionTypes", function() { return ActionTypes; });
/* harmony import */ var symbol_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! symbol-observable */ "./node_modules/symbol-observable/es/index.js");

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */

var randomString = function randomString() {
  return Math.random().toString(36).substring(7).split('').join('.');
};

var ActionTypes = {
  INIT: "@@redux/INIT" + randomString(),
  REPLACE: "@@redux/REPLACE" + randomString(),
  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
    return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
  }
};
/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */

function isPlainObject(obj) {
  if (typeof obj !== 'object' || obj === null) return false;
  var proto = obj;

  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }

  return Object.getPrototypeOf(obj) === proto;
}
/**
 * Creates a Redux store that holds the state tree.
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */


function createStore(reducer, preloadedState, enhancer) {
  var _ref2;

  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {
    throw new Error('It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function');
  }

  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
    enhancer = preloadedState;
    preloadedState = undefined;
  }

  if (typeof enhancer !== 'undefined') {
    if (typeof enhancer !== 'function') {
      throw new Error('Expected the enhancer to be a function.');
    }

    return enhancer(createStore)(reducer, preloadedState);
  }

  if (typeof reducer !== 'function') {
    throw new Error('Expected the reducer to be a function.');
  }

  var currentReducer = reducer;
  var currentState = preloadedState;
  var currentListeners = [];
  var nextListeners = currentListeners;
  var isDispatching = false;

  function ensureCanMutateNextListeners() {
    if (nextListeners === currentListeners) {
      nextListeners = currentListeners.slice();
    }
  }
  /**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */


  function getState() {
    if (isDispatching) {
      throw new Error('You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');
    }

    return currentState;
  }
  /**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */


  function subscribe(listener) {
    if (typeof listener !== 'function') {
      throw new Error('Expected the listener to be a function.');
    }

    if (isDispatching) {
      throw new Error('You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');
    }

    var isSubscribed = true;
    ensureCanMutateNextListeners();
    nextListeners.push(listener);
    return function unsubscribe() {
      if (!isSubscribed) {
        return;
      }

      if (isDispatching) {
        throw new Error('You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api-reference/store#subscribe(listener) for more details.');
      }

      isSubscribed = false;
      ensureCanMutateNextListeners();
      var index = nextListeners.indexOf(listener);
      nextListeners.splice(index, 1);
    };
  }
  /**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */


  function dispatch(action) {
    if (!isPlainObject(action)) {
      throw new Error('Actions must be plain objects. ' + 'Use custom middleware for async actions.');
    }

    if (typeof action.type === 'undefined') {
      throw new Error('Actions may not have an undefined "type" property. ' + 'Have you misspelled a constant?');
    }

    if (isDispatching) {
      throw new Error('Reducers may not dispatch actions.');
    }

    try {
      isDispatching = true;
      currentState = currentReducer(currentState, action);
    } finally {
      isDispatching = false;
    }

    var listeners = currentListeners = nextListeners;

    for (var i = 0; i < listeners.length; i++) {
      var listener = listeners[i];
      listener();
    }

    return action;
  }
  /**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */


  function replaceReducer(nextReducer) {
    if (typeof nextReducer !== 'function') {
      throw new Error('Expected the nextReducer to be a function.');
    }

    currentReducer = nextReducer;
    dispatch({
      type: ActionTypes.REPLACE
    });
  }
  /**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */


  function observable() {
    var _ref;

    var outerSubscribe = subscribe;
    return _ref = {
      /**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
      subscribe: function subscribe(observer) {
        if (typeof observer !== 'object' || observer === null) {
          throw new TypeError('Expected the observer to be an object.');
        }

        function observeState() {
          if (observer.next) {
            observer.next(getState());
          }
        }

        observeState();
        var unsubscribe = outerSubscribe(observeState);
        return {
          unsubscribe: unsubscribe
        };
      }
    }, _ref[symbol_observable__WEBPACK_IMPORTED_MODULE_0__["default"]] = function () {
      return this;
    }, _ref;
  } // When a store is created, an "INIT" action is dispatched so that every
  // reducer returns their initial state. This effectively populates
  // the initial state tree.


  dispatch({
    type: ActionTypes.INIT
  });
  return _ref2 = {
    dispatch: dispatch,
    subscribe: subscribe,
    getState: getState,
    replaceReducer: replaceReducer
  }, _ref2[symbol_observable__WEBPACK_IMPORTED_MODULE_0__["default"]] = observable, _ref2;
}
/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */


function warning(message) {
  /* eslint-disable no-console */
  if (typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error(message);
  }
  /* eslint-enable no-console */


  try {
    // This error was thrown as a convenience so that if you enable
    // "break on all exceptions" in your console,
    // it would pause the execution at this line.
    throw new Error(message);
  } catch (e) {} // eslint-disable-line no-empty

}

function getUndefinedStateErrorMessage(key, action) {
  var actionType = action && action.type;
  var actionDescription = actionType && "action \"" + String(actionType) + "\"" || 'an action';
  return "Given " + actionDescription + ", reducer \"" + key + "\" returned undefined. " + "To ignore an action, you must explicitly return the previous state. " + "If you want this reducer to hold no value, you can return null instead of undefined.";
}

function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
  var reducerKeys = Object.keys(reducers);
  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

  if (reducerKeys.length === 0) {
    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
  }

  if (!isPlainObject(inputState)) {
    return "The " + argumentName + " has unexpected type of \"" + {}.toString.call(inputState).match(/\s([a-z|A-Z]+)/)[1] + "\". Expected argument to be an object with the following " + ("keys: \"" + reducerKeys.join('", "') + "\"");
  }

  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
  });
  unexpectedKeys.forEach(function (key) {
    unexpectedKeyCache[key] = true;
  });
  if (action && action.type === ActionTypes.REPLACE) return;

  if (unexpectedKeys.length > 0) {
    return "Unexpected " + (unexpectedKeys.length > 1 ? 'keys' : 'key') + " " + ("\"" + unexpectedKeys.join('", "') + "\" found in " + argumentName + ". ") + "Expected to find one of the known reducer keys instead: " + ("\"" + reducerKeys.join('", "') + "\". Unexpected keys will be ignored.");
  }
}

function assertReducerShape(reducers) {
  Object.keys(reducers).forEach(function (key) {
    var reducer = reducers[key];
    var initialState = reducer(undefined, {
      type: ActionTypes.INIT
    });

    if (typeof initialState === 'undefined') {
      throw new Error("Reducer \"" + key + "\" returned undefined during initialization. " + "If the state passed to the reducer is undefined, you must " + "explicitly return the initial state. The initial state may " + "not be undefined. If you don't want to set a value for this reducer, " + "you can use null instead of undefined.");
    }

    if (typeof reducer(undefined, {
      type: ActionTypes.PROBE_UNKNOWN_ACTION()
    }) === 'undefined') {
      throw new Error("Reducer \"" + key + "\" returned undefined when probed with a random type. " + ("Don't try to handle " + ActionTypes.INIT + " or other actions in \"redux/*\" ") + "namespace. They are considered private. Instead, you must return the " + "current state for any unknown actions, unless it is undefined, " + "in which case you must return the initial state, regardless of the " + "action type. The initial state may not be undefined, but can be null.");
    }
  });
}
/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */


function combineReducers(reducers) {
  var reducerKeys = Object.keys(reducers);
  var finalReducers = {};

  for (var i = 0; i < reducerKeys.length; i++) {
    var key = reducerKeys[i];

    if (true) {
      if (typeof reducers[key] === 'undefined') {
        warning("No reducer provided for key \"" + key + "\"");
      }
    }

    if (typeof reducers[key] === 'function') {
      finalReducers[key] = reducers[key];
    }
  }

  var finalReducerKeys = Object.keys(finalReducers);
  var unexpectedKeyCache;

  if (true) {
    unexpectedKeyCache = {};
  }

  var shapeAssertionError;

  try {
    assertReducerShape(finalReducers);
  } catch (e) {
    shapeAssertionError = e;
  }

  return function combination(state, action) {
    if (state === void 0) {
      state = {};
    }

    if (shapeAssertionError) {
      throw shapeAssertionError;
    }

    if (true) {
      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);

      if (warningMessage) {
        warning(warningMessage);
      }
    }

    var hasChanged = false;
    var nextState = {};

    for (var _i = 0; _i < finalReducerKeys.length; _i++) {
      var _key = finalReducerKeys[_i];
      var reducer = finalReducers[_key];
      var previousStateForKey = state[_key];
      var nextStateForKey = reducer(previousStateForKey, action);

      if (typeof nextStateForKey === 'undefined') {
        var errorMessage = getUndefinedStateErrorMessage(_key, action);
        throw new Error(errorMessage);
      }

      nextState[_key] = nextStateForKey;
      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
    }

    return hasChanged ? nextState : state;
  };
}

function bindActionCreator(actionCreator, dispatch) {
  return function () {
    return dispatch(actionCreator.apply(this, arguments));
  };
}
/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass a single function as the first argument,
 * and get a function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */


function bindActionCreators(actionCreators, dispatch) {
  if (typeof actionCreators === 'function') {
    return bindActionCreator(actionCreators, dispatch);
  }

  if (typeof actionCreators !== 'object' || actionCreators === null) {
    throw new Error("bindActionCreators expected an object or a function, instead received " + (actionCreators === null ? 'null' : typeof actionCreators) + ". " + "Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?");
  }

  var keys = Object.keys(actionCreators);
  var boundActionCreators = {};

  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    var actionCreator = actionCreators[key];

    if (typeof actionCreator === 'function') {
      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
    }
  }

  return boundActionCreators;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}
/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */


function compose() {
  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }

  if (funcs.length === 0) {
    return function (arg) {
      return arg;
    };
  }

  if (funcs.length === 1) {
    return funcs[0];
  }

  return funcs.reduce(function (a, b) {
    return function () {
      return a(b.apply(void 0, arguments));
    };
  });
}
/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */


function applyMiddleware() {
  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
    middlewares[_key] = arguments[_key];
  }

  return function (createStore) {
    return function () {
      var store = createStore.apply(void 0, arguments);

      var _dispatch = function dispatch() {
        throw new Error("Dispatching while constructing your middleware is not allowed. " + "Other middleware would not be applied to this dispatch.");
      };

      var middlewareAPI = {
        getState: store.getState,
        dispatch: function dispatch() {
          return _dispatch.apply(void 0, arguments);
        }
      };
      var chain = middlewares.map(function (middleware) {
        return middleware(middlewareAPI);
      });
      _dispatch = compose.apply(void 0, chain)(store.dispatch);
      return _objectSpread({}, store, {
        dispatch: _dispatch
      });
    };
  };
}
/*
 * This is a dummy function to check if the function name has been altered by minification.
 * If the function has been minified and NODE_ENV !== 'production', warn the user.
 */


function isCrushed() {}

if ( true && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
  warning('You are currently using minified code outside of NODE_ENV === "production". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');
}



/***/ }),

/***/ "./node_modules/requires-port/index.js":
/*!*********************************************!*\
  !*** ./node_modules/requires-port/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * Check if we're required to add a port number.
 *
 * @see https://url.spec.whatwg.org/#default-port
 * @param {Number|String} port Port number we need to check
 * @param {String} protocol Protocol we need to check against.
 * @returns {Boolean} Is it a default port for the given protocol
 * @api private
 */

module.exports = function required(port, protocol) {
  protocol = protocol.split(':')[0];
  port = +port;
  if (!port) return false;

  switch (protocol) {
    case 'http':
    case 'ws':
      return port !== 80;

    case 'https':
    case 'wss':
      return port !== 443;

    case 'ftp':
      return port !== 21;

    case 'gopher':
      return port !== 70;

    case 'file':
      return false;
  }

  return port !== 0;
};

/***/ }),

/***/ "./node_modules/resolve-pathname/index.js":
/*!************************************************!*\
  !*** ./node_modules/resolve-pathname/index.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
function isAbsolute(pathname) {
  return pathname.charAt(0) === '/';
} // About 1.5x faster than the two-arg version of Array#splice()


function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
    list[i] = list[k];
  }

  list.pop();
} // This implementation is based heavily on node's url.parse


function resolvePathname(to) {
  var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var toParts = to && to.split('/') || [];
  var fromParts = from && from.split('/') || [];
  var isToAbs = to && isAbsolute(to);
  var isFromAbs = from && isAbsolute(from);
  var mustEndAbs = isToAbs || isFromAbs;

  if (to && isAbsolute(to)) {
    // to is absolute
    fromParts = toParts;
  } else if (toParts.length) {
    // to is relative, drop the filename
    fromParts.pop();
    fromParts = fromParts.concat(toParts);
  }

  if (!fromParts.length) return '/';
  var hasTrailingSlash = void 0;

  if (fromParts.length) {
    var last = fromParts[fromParts.length - 1];
    hasTrailingSlash = last === '.' || last === '..' || last === '';
  } else {
    hasTrailingSlash = false;
  }

  var up = 0;

  for (var i = fromParts.length; i >= 0; i--) {
    var part = fromParts[i];

    if (part === '.') {
      spliceOne(fromParts, i);
    } else if (part === '..') {
      spliceOne(fromParts, i);
      up++;
    } else if (up) {
      spliceOne(fromParts, i);
      up--;
    }
  }

  if (!mustEndAbs) for (; up--; up) {
    fromParts.unshift('..');
  }
  if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');
  var result = fromParts.join('/');
  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';
  return result;
}

/* harmony default export */ __webpack_exports__["default"] = (resolvePathname);

/***/ }),

/***/ "./node_modules/scheduler/cjs/scheduler-tracing.development.js":
/*!*********************************************************************!*\
  !*** ./node_modules/scheduler/cjs/scheduler-tracing.development.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v0.13.6
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


if (true) {
  (function () {
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    }); // Helps identify side effects in begin-phase lifecycle hooks and setState reducers:
    // In some cases, StrictMode should also double-render lifecycles.
    // This can be confusing for tests though,
    // And it can be bad for performance in production.
    // This feature flag can be used to control the behavior:
    // To preserve the "Pause on caught exceptions" behavior of the debugger, we
    // replay the begin phase of a failed component inside invokeGuardedCallback.
    // Warn about deprecated, async-unsafe lifecycles; relates to RFC #6:
    // Gather advanced timing metrics for Profiler subtrees.
    // Trace which interactions trigger each commit.

    var enableSchedulerTracing = true; // Only used in www builds.
    // TODO: true? Here it might just be false.
    // Only used in www builds.
    // Only used in www builds.
    // React Fire: prevent the value and checked attributes from syncing
    // with their related DOM properties
    // These APIs will no longer be "unstable" in the upcoming 16.7 release,
    // Control this behavior with a flag to support 16.6 minor releases in the meanwhile.

    var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.

    var interactionIDCounter = 0;
    var threadIDCounter = 0; // Set of currently traced interactions.
    // Interactions "stack"–
    // Meaning that newly traced interactions are appended to the previously active set.
    // When an interaction goes out of scope, the previous set (if any) is restored.

    exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.

    exports.__subscriberRef = null;

    if (enableSchedulerTracing) {
      exports.__interactionsRef = {
        current: new Set()
      };
      exports.__subscriberRef = {
        current: null
      };
    }

    function unstable_clear(callback) {
      if (!enableSchedulerTracing) {
        return callback();
      }

      var prevInteractions = exports.__interactionsRef.current;
      exports.__interactionsRef.current = new Set();

      try {
        return callback();
      } finally {
        exports.__interactionsRef.current = prevInteractions;
      }
    }

    function unstable_getCurrent() {
      if (!enableSchedulerTracing) {
        return null;
      } else {
        return exports.__interactionsRef.current;
      }
    }

    function unstable_getThreadID() {
      return ++threadIDCounter;
    }

    function unstable_trace(name, timestamp, callback) {
      var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

      if (!enableSchedulerTracing) {
        return callback();
      }

      var interaction = {
        __count: 1,
        id: interactionIDCounter++,
        name: name,
        timestamp: timestamp
      };
      var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
      // To do that, clone the current interactions.
      // The previous set will be restored upon completion.

      var interactions = new Set(prevInteractions);
      interactions.add(interaction);
      exports.__interactionsRef.current = interactions;
      var subscriber = exports.__subscriberRef.current;
      var returnValue = void 0;

      try {
        if (subscriber !== null) {
          subscriber.onInteractionTraced(interaction);
        }
      } finally {
        try {
          if (subscriber !== null) {
            subscriber.onWorkStarted(interactions, threadID);
          }
        } finally {
          try {
            returnValue = callback();
          } finally {
            exports.__interactionsRef.current = prevInteractions;

            try {
              if (subscriber !== null) {
                subscriber.onWorkStopped(interactions, threadID);
              }
            } finally {
              interaction.__count--; // If no async work was scheduled for this interaction,
              // Notify subscribers that it's completed.

              if (subscriber !== null && interaction.__count === 0) {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              }
            }
          }
        }
      }

      return returnValue;
    }

    function unstable_wrap(callback) {
      var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

      if (!enableSchedulerTracing) {
        return callback;
      }

      var wrappedInteractions = exports.__interactionsRef.current;
      var subscriber = exports.__subscriberRef.current;

      if (subscriber !== null) {
        subscriber.onWorkScheduled(wrappedInteractions, threadID);
      } // Update the pending async work count for the current interactions.
      // Update after calling subscribers in case of error.


      wrappedInteractions.forEach(function (interaction) {
        interaction.__count++;
      });
      var hasRun = false;

      function wrapped() {
        var prevInteractions = exports.__interactionsRef.current;
        exports.__interactionsRef.current = wrappedInteractions;
        subscriber = exports.__subscriberRef.current;

        try {
          var returnValue = void 0;

          try {
            if (subscriber !== null) {
              subscriber.onWorkStarted(wrappedInteractions, threadID);
            }
          } finally {
            try {
              returnValue = callback.apply(undefined, arguments);
            } finally {
              exports.__interactionsRef.current = prevInteractions;

              if (subscriber !== null) {
                subscriber.onWorkStopped(wrappedInteractions, threadID);
              }
            }
          }

          return returnValue;
        } finally {
          if (!hasRun) {
            // We only expect a wrapped function to be executed once,
            // But in the event that it's executed more than once–
            // Only decrement the outstanding interaction counts once.
            hasRun = true; // Update pending async counts for all wrapped interactions.
            // If this was the last scheduled async work for any of them,
            // Mark them as completed.

            wrappedInteractions.forEach(function (interaction) {
              interaction.__count--;

              if (subscriber !== null && interaction.__count === 0) {
                subscriber.onInteractionScheduledWorkCompleted(interaction);
              }
            });
          }
        }
      }

      wrapped.cancel = function cancel() {
        subscriber = exports.__subscriberRef.current;

        try {
          if (subscriber !== null) {
            subscriber.onWorkCanceled(wrappedInteractions, threadID);
          }
        } finally {
          // Update pending async counts for all wrapped interactions.
          // If this was the last scheduled async work for any of them,
          // Mark them as completed.
          wrappedInteractions.forEach(function (interaction) {
            interaction.__count--;

            if (subscriber && interaction.__count === 0) {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            }
          });
        }
      };

      return wrapped;
    }

    var subscribers = null;

    if (enableSchedulerTracing) {
      subscribers = new Set();
    }

    function unstable_subscribe(subscriber) {
      if (enableSchedulerTracing) {
        subscribers.add(subscriber);

        if (subscribers.size === 1) {
          exports.__subscriberRef.current = {
            onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
            onInteractionTraced: onInteractionTraced,
            onWorkCanceled: onWorkCanceled,
            onWorkScheduled: onWorkScheduled,
            onWorkStarted: onWorkStarted,
            onWorkStopped: onWorkStopped
          };
        }
      }
    }

    function unstable_unsubscribe(subscriber) {
      if (enableSchedulerTracing) {
        subscribers.delete(subscriber);

        if (subscribers.size === 0) {
          exports.__subscriberRef.current = null;
        }
      }
    }

    function onInteractionTraced(interaction) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onInteractionTraced(interaction);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onInteractionScheduledWorkCompleted(interaction) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onInteractionScheduledWorkCompleted(interaction);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkScheduled(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkScheduled(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkStarted(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkStarted(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkStopped(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkStopped(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    function onWorkCanceled(interactions, threadID) {
      var didCatchError = false;
      var caughtError = null;
      subscribers.forEach(function (subscriber) {
        try {
          subscriber.onWorkCanceled(interactions, threadID);
        } catch (error) {
          if (!didCatchError) {
            didCatchError = true;
            caughtError = error;
          }
        }
      });

      if (didCatchError) {
        throw caughtError;
      }
    }

    exports.unstable_clear = unstable_clear;
    exports.unstable_getCurrent = unstable_getCurrent;
    exports.unstable_getThreadID = unstable_getThreadID;
    exports.unstable_trace = unstable_trace;
    exports.unstable_wrap = unstable_wrap;
    exports.unstable_subscribe = unstable_subscribe;
    exports.unstable_unsubscribe = unstable_unsubscribe;
  })();
}

/***/ }),

/***/ "./node_modules/scheduler/cjs/scheduler.development.js":
/*!*************************************************************!*\
  !*** ./node_modules/scheduler/cjs/scheduler.development.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {/** @license React v0.13.6
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */


if (true) {
  (function () {
    'use strict';

    Object.defineProperty(exports, '__esModule', {
      value: true
    });
    var enableSchedulerDebugging = false;
    /* eslint-disable no-var */
    // TODO: Use symbols?

    var ImmediatePriority = 1;
    var UserBlockingPriority = 2;
    var NormalPriority = 3;
    var LowPriority = 4;
    var IdlePriority = 5; // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
    // Math.pow(2, 30) - 1
    // 0b111111111111111111111111111111

    var maxSigned31BitInt = 1073741823; // Times out immediately

    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

    var USER_BLOCKING_PRIORITY = 250;
    var NORMAL_PRIORITY_TIMEOUT = 5000;
    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

    var IDLE_PRIORITY = maxSigned31BitInt; // Callbacks are stored as a circular, doubly linked list.

    var firstCallbackNode = null;
    var currentDidTimeout = false; // Pausing the scheduler is useful for debugging.

    var isSchedulerPaused = false;
    var currentPriorityLevel = NormalPriority;
    var currentEventStartTime = -1;
    var currentExpirationTime = -1; // This is set when a callback is being executed, to prevent re-entrancy.

    var isExecutingCallback = false;
    var isHostCallbackScheduled = false;
    var hasNativePerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

    function ensureHostCallbackIsScheduled() {
      if (isExecutingCallback) {
        // Don't schedule work yet; wait until the next time we yield.
        return;
      } // Schedule the host callback using the earliest expiration in the list.


      var expirationTime = firstCallbackNode.expirationTime;

      if (!isHostCallbackScheduled) {
        isHostCallbackScheduled = true;
      } else {
        // Cancel the existing host callback.
        cancelHostCallback();
      }

      requestHostCallback(flushWork, expirationTime);
    }

    function flushFirstCallback() {
      var flushedNode = firstCallbackNode; // Remove the node from the list before calling the callback. That way the
      // list is in a consistent state even if the callback throws.

      var next = firstCallbackNode.next;

      if (firstCallbackNode === next) {
        // This is the last callback in the list.
        firstCallbackNode = null;
        next = null;
      } else {
        var lastCallbackNode = firstCallbackNode.previous;
        firstCallbackNode = lastCallbackNode.next = next;
        next.previous = lastCallbackNode;
      }

      flushedNode.next = flushedNode.previous = null; // Now it's safe to call the callback.

      var callback = flushedNode.callback;
      var expirationTime = flushedNode.expirationTime;
      var priorityLevel = flushedNode.priorityLevel;
      var previousPriorityLevel = currentPriorityLevel;
      var previousExpirationTime = currentExpirationTime;
      currentPriorityLevel = priorityLevel;
      currentExpirationTime = expirationTime;
      var continuationCallback;

      try {
        continuationCallback = callback();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
        currentExpirationTime = previousExpirationTime;
      } // A callback may return a continuation. The continuation should be scheduled
      // with the same priority and expiration as the just-finished callback.


      if (typeof continuationCallback === 'function') {
        var continuationNode = {
          callback: continuationCallback,
          priorityLevel: priorityLevel,
          expirationTime: expirationTime,
          next: null,
          previous: null
        }; // Insert the new callback into the list, sorted by its expiration. This is
        // almost the same as the code in `scheduleCallback`, except the callback
        // is inserted into the list *before* callbacks of equal expiration instead
        // of after.

        if (firstCallbackNode === null) {
          // This is the first callback in the list.
          firstCallbackNode = continuationNode.next = continuationNode.previous = continuationNode;
        } else {
          var nextAfterContinuation = null;
          var node = firstCallbackNode;

          do {
            if (node.expirationTime >= expirationTime) {
              // This callback expires at or after the continuation. We will insert
              // the continuation *before* this callback.
              nextAfterContinuation = node;
              break;
            }

            node = node.next;
          } while (node !== firstCallbackNode);

          if (nextAfterContinuation === null) {
            // No equal or lower priority callback was found, which means the new
            // callback is the lowest priority callback in the list.
            nextAfterContinuation = firstCallbackNode;
          } else if (nextAfterContinuation === firstCallbackNode) {
            // The new callback is the highest priority callback in the list.
            firstCallbackNode = continuationNode;
            ensureHostCallbackIsScheduled();
          }

          var previous = nextAfterContinuation.previous;
          previous.next = nextAfterContinuation.previous = continuationNode;
          continuationNode.next = nextAfterContinuation;
          continuationNode.previous = previous;
        }
      }
    }

    function flushImmediateWork() {
      if ( // Confirm we've exited the outer most event handler
      currentEventStartTime === -1 && firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority) {
        isExecutingCallback = true;

        try {
          do {
            flushFirstCallback();
          } while ( // Keep flushing until there are no more immediate callbacks
          firstCallbackNode !== null && firstCallbackNode.priorityLevel === ImmediatePriority);
        } finally {
          isExecutingCallback = false;

          if (firstCallbackNode !== null) {
            // There's still work remaining. Request another callback.
            ensureHostCallbackIsScheduled();
          } else {
            isHostCallbackScheduled = false;
          }
        }
      }
    }

    function flushWork(didTimeout) {
      // Exit right away if we're currently paused
      if (enableSchedulerDebugging && isSchedulerPaused) {
        return;
      }

      isExecutingCallback = true;
      var previousDidTimeout = currentDidTimeout;
      currentDidTimeout = didTimeout;

      try {
        if (didTimeout) {
          // Flush all the expired callbacks without yielding.
          while (firstCallbackNode !== null && !(enableSchedulerDebugging && isSchedulerPaused)) {
            // TODO Wrap in feature flag
            // Read the current time. Flush all the callbacks that expire at or
            // earlier than that time. Then read the current time again and repeat.
            // This optimizes for as few performance.now calls as possible.
            var currentTime = exports.unstable_now();

            if (firstCallbackNode.expirationTime <= currentTime) {
              do {
                flushFirstCallback();
              } while (firstCallbackNode !== null && firstCallbackNode.expirationTime <= currentTime && !(enableSchedulerDebugging && isSchedulerPaused));

              continue;
            }

            break;
          }
        } else {
          // Keep flushing callbacks until we run out of time in the frame.
          if (firstCallbackNode !== null) {
            do {
              if (enableSchedulerDebugging && isSchedulerPaused) {
                break;
              }

              flushFirstCallback();
            } while (firstCallbackNode !== null && !shouldYieldToHost());
          }
        }
      } finally {
        isExecutingCallback = false;
        currentDidTimeout = previousDidTimeout;

        if (firstCallbackNode !== null) {
          // There's still work remaining. Request another callback.
          ensureHostCallbackIsScheduled();
        } else {
          isHostCallbackScheduled = false;
        } // Before exiting, flush all the immediate work that was scheduled.


        flushImmediateWork();
      }
    }

    function unstable_runWithPriority(priorityLevel, eventHandler) {
      switch (priorityLevel) {
        case ImmediatePriority:
        case UserBlockingPriority:
        case NormalPriority:
        case LowPriority:
        case IdlePriority:
          break;

        default:
          priorityLevel = NormalPriority;
      }

      var previousPriorityLevel = currentPriorityLevel;
      var previousEventStartTime = currentEventStartTime;
      currentPriorityLevel = priorityLevel;
      currentEventStartTime = exports.unstable_now();

      try {
        return eventHandler();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
        currentEventStartTime = previousEventStartTime; // Before exiting, flush all the immediate work that was scheduled.

        flushImmediateWork();
      }
    }

    function unstable_next(eventHandler) {
      var priorityLevel = void 0;

      switch (currentPriorityLevel) {
        case ImmediatePriority:
        case UserBlockingPriority:
        case NormalPriority:
          // Shift down to normal priority
          priorityLevel = NormalPriority;
          break;

        default:
          // Anything lower than normal priority should remain at the current level.
          priorityLevel = currentPriorityLevel;
          break;
      }

      var previousPriorityLevel = currentPriorityLevel;
      var previousEventStartTime = currentEventStartTime;
      currentPriorityLevel = priorityLevel;
      currentEventStartTime = exports.unstable_now();

      try {
        return eventHandler();
      } finally {
        currentPriorityLevel = previousPriorityLevel;
        currentEventStartTime = previousEventStartTime; // Before exiting, flush all the immediate work that was scheduled.

        flushImmediateWork();
      }
    }

    function unstable_wrapCallback(callback) {
      var parentPriorityLevel = currentPriorityLevel;
      return function () {
        // This is a fork of runWithPriority, inlined for performance.
        var previousPriorityLevel = currentPriorityLevel;
        var previousEventStartTime = currentEventStartTime;
        currentPriorityLevel = parentPriorityLevel;
        currentEventStartTime = exports.unstable_now();

        try {
          return callback.apply(this, arguments);
        } finally {
          currentPriorityLevel = previousPriorityLevel;
          currentEventStartTime = previousEventStartTime;
          flushImmediateWork();
        }
      };
    }

    function unstable_scheduleCallback(callback, deprecated_options) {
      var startTime = currentEventStartTime !== -1 ? currentEventStartTime : exports.unstable_now();
      var expirationTime;

      if (typeof deprecated_options === 'object' && deprecated_options !== null && typeof deprecated_options.timeout === 'number') {
        // FIXME: Remove this branch once we lift expiration times out of React.
        expirationTime = startTime + deprecated_options.timeout;
      } else {
        switch (currentPriorityLevel) {
          case ImmediatePriority:
            expirationTime = startTime + IMMEDIATE_PRIORITY_TIMEOUT;
            break;

          case UserBlockingPriority:
            expirationTime = startTime + USER_BLOCKING_PRIORITY;
            break;

          case IdlePriority:
            expirationTime = startTime + IDLE_PRIORITY;
            break;

          case LowPriority:
            expirationTime = startTime + LOW_PRIORITY_TIMEOUT;
            break;

          case NormalPriority:
          default:
            expirationTime = startTime + NORMAL_PRIORITY_TIMEOUT;
        }
      }

      var newNode = {
        callback: callback,
        priorityLevel: currentPriorityLevel,
        expirationTime: expirationTime,
        next: null,
        previous: null
      }; // Insert the new callback into the list, ordered first by expiration, then
      // by insertion. So the new callback is inserted any other callback with
      // equal expiration.

      if (firstCallbackNode === null) {
        // This is the first callback in the list.
        firstCallbackNode = newNode.next = newNode.previous = newNode;
        ensureHostCallbackIsScheduled();
      } else {
        var next = null;
        var node = firstCallbackNode;

        do {
          if (node.expirationTime > expirationTime) {
            // The new callback expires before this one.
            next = node;
            break;
          }

          node = node.next;
        } while (node !== firstCallbackNode);

        if (next === null) {
          // No callback with a later expiration was found, which means the new
          // callback has the latest expiration in the list.
          next = firstCallbackNode;
        } else if (next === firstCallbackNode) {
          // The new callback has the earliest expiration in the entire list.
          firstCallbackNode = newNode;
          ensureHostCallbackIsScheduled();
        }

        var previous = next.previous;
        previous.next = next.previous = newNode;
        newNode.next = next;
        newNode.previous = previous;
      }

      return newNode;
    }

    function unstable_pauseExecution() {
      isSchedulerPaused = true;
    }

    function unstable_continueExecution() {
      isSchedulerPaused = false;

      if (firstCallbackNode !== null) {
        ensureHostCallbackIsScheduled();
      }
    }

    function unstable_getFirstCallbackNode() {
      return firstCallbackNode;
    }

    function unstable_cancelCallback(callbackNode) {
      var next = callbackNode.next;

      if (next === null) {
        // Already cancelled.
        return;
      }

      if (next === callbackNode) {
        // This is the only scheduled callback. Clear the list.
        firstCallbackNode = null;
      } else {
        // Remove the callback from its position in the list.
        if (callbackNode === firstCallbackNode) {
          firstCallbackNode = next;
        }

        var previous = callbackNode.previous;
        previous.next = next;
        next.previous = previous;
      }

      callbackNode.next = callbackNode.previous = null;
    }

    function unstable_getCurrentPriorityLevel() {
      return currentPriorityLevel;
    }

    function unstable_shouldYield() {
      return !currentDidTimeout && (firstCallbackNode !== null && firstCallbackNode.expirationTime < currentExpirationTime || shouldYieldToHost());
    } // The remaining code is essentially a polyfill for requestIdleCallback. It
    // works by scheduling a requestAnimationFrame, storing the time for the start
    // of the frame, then scheduling a postMessage which gets scheduled after paint.
    // Within the postMessage handler do as much work as possible until time + frame
    // rate. By separating the idle call into a separate event tick we ensure that
    // layout, paint and other browser work is counted against the available time.
    // The frame rate is dynamically adjusted.
    // We capture a local reference to any global, in case it gets polyfilled after
    // this module is initially evaluated. We want to be using a
    // consistent implementation.


    var localDate = Date; // This initialization code may run even on server environments if a component
    // just imports ReactDOM (e.g. for findDOMNode). Some environments might not
    // have setTimeout or clearTimeout. However, we always expect them to be defined
    // on the client. https://github.com/facebook/react/pull/13088

    var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
    var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined; // We don't expect either of these to necessarily be defined, but we will error
    // later if they are missing on the client.

    var localRequestAnimationFrame = typeof requestAnimationFrame === 'function' ? requestAnimationFrame : undefined;
    var localCancelAnimationFrame = typeof cancelAnimationFrame === 'function' ? cancelAnimationFrame : undefined; // requestAnimationFrame does not run when the tab is in the background. If
    // we're backgrounded we prefer for that work to happen so that the page
    // continues to load in the background. So we also schedule a 'setTimeout' as
    // a fallback.
    // TODO: Need a better heuristic for backgrounded work.

    var ANIMATION_FRAME_TIMEOUT = 100;
    var rAFID;
    var rAFTimeoutID;

    var requestAnimationFrameWithTimeout = function (callback) {
      // schedule rAF and also a setTimeout
      rAFID = localRequestAnimationFrame(function (timestamp) {
        // cancel the setTimeout
        localClearTimeout(rAFTimeoutID);
        callback(timestamp);
      });
      rAFTimeoutID = localSetTimeout(function () {
        // cancel the requestAnimationFrame
        localCancelAnimationFrame(rAFID);
        callback(exports.unstable_now());
      }, ANIMATION_FRAME_TIMEOUT);
    };

    if (hasNativePerformanceNow) {
      var Performance = performance;

      exports.unstable_now = function () {
        return Performance.now();
      };
    } else {
      exports.unstable_now = function () {
        return localDate.now();
      };
    }

    var requestHostCallback;
    var cancelHostCallback;
    var shouldYieldToHost;
    var globalValue = null;

    if (typeof window !== 'undefined') {
      globalValue = window;
    } else if (typeof global !== 'undefined') {
      globalValue = global;
    }

    if (globalValue && globalValue._schedMock) {
      // Dynamic injection, only for testing purposes.
      var globalImpl = globalValue._schedMock;
      requestHostCallback = globalImpl[0];
      cancelHostCallback = globalImpl[1];
      shouldYieldToHost = globalImpl[2];
      exports.unstable_now = globalImpl[3];
    } else if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive
    // implementation using setTimeout.
    typeof window === 'undefined' || // Check if MessageChannel is supported, too.
    typeof MessageChannel !== 'function') {
      // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
      // fallback to a naive implementation.
      var _callback = null;

      var _flushCallback = function (didTimeout) {
        if (_callback !== null) {
          try {
            _callback(didTimeout);
          } finally {
            _callback = null;
          }
        }
      };

      requestHostCallback = function (cb, ms) {
        if (_callback !== null) {
          // Protect against re-entrancy.
          setTimeout(requestHostCallback, 0, cb);
        } else {
          _callback = cb;
          setTimeout(_flushCallback, 0, false);
        }
      };

      cancelHostCallback = function () {
        _callback = null;
      };

      shouldYieldToHost = function () {
        return false;
      };
    } else {
      if (typeof console !== 'undefined') {
        // TODO: Remove fb.me link
        if (typeof localRequestAnimationFrame !== 'function') {
          console.error("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
        }

        if (typeof localCancelAnimationFrame !== 'function') {
          console.error("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
        }
      }

      var scheduledHostCallback = null;
      var isMessageEventScheduled = false;
      var timeoutTime = -1;
      var isAnimationFrameScheduled = false;
      var isFlushingHostCallback = false;
      var frameDeadline = 0; // We start out assuming that we run at 30fps but then the heuristic tracking
      // will adjust this value to a faster fps if we get more frequent animation
      // frames.

      var previousFrameTime = 33;
      var activeFrameTime = 33;

      shouldYieldToHost = function () {
        return frameDeadline <= exports.unstable_now();
      }; // We use the postMessage trick to defer idle work until after the repaint.


      var channel = new MessageChannel();
      var port = channel.port2;

      channel.port1.onmessage = function (event) {
        isMessageEventScheduled = false;
        var prevScheduledCallback = scheduledHostCallback;
        var prevTimeoutTime = timeoutTime;
        scheduledHostCallback = null;
        timeoutTime = -1;
        var currentTime = exports.unstable_now();
        var didTimeout = false;

        if (frameDeadline - currentTime <= 0) {
          // There's no time left in this idle period. Check if the callback has
          // a timeout and whether it's been exceeded.
          if (prevTimeoutTime !== -1 && prevTimeoutTime <= currentTime) {
            // Exceeded the timeout. Invoke the callback even though there's no
            // time left.
            didTimeout = true;
          } else {
            // No timeout.
            if (!isAnimationFrameScheduled) {
              // Schedule another animation callback so we retry later.
              isAnimationFrameScheduled = true;
              requestAnimationFrameWithTimeout(animationTick);
            } // Exit without invoking the callback.


            scheduledHostCallback = prevScheduledCallback;
            timeoutTime = prevTimeoutTime;
            return;
          }
        }

        if (prevScheduledCallback !== null) {
          isFlushingHostCallback = true;

          try {
            prevScheduledCallback(didTimeout);
          } finally {
            isFlushingHostCallback = false;
          }
        }
      };

      var animationTick = function (rafTime) {
        if (scheduledHostCallback !== null) {
          // Eagerly schedule the next animation callback at the beginning of the
          // frame. If the scheduler queue is not empty at the end of the frame, it
          // will continue flushing inside that callback. If the queue *is* empty,
          // then it will exit immediately. Posting the callback at the start of the
          // frame ensures it's fired within the earliest possible frame. If we
          // waited until the end of the frame to post the callback, we risk the
          // browser skipping a frame and not firing the callback until the frame
          // after that.
          requestAnimationFrameWithTimeout(animationTick);
        } else {
          // No pending work. Exit.
          isAnimationFrameScheduled = false;
          return;
        }

        var nextFrameTime = rafTime - frameDeadline + activeFrameTime;

        if (nextFrameTime < activeFrameTime && previousFrameTime < activeFrameTime) {
          if (nextFrameTime < 8) {
            // Defensive coding. We don't support higher frame rates than 120hz.
            // If the calculated frame time gets lower than 8, it is probably a bug.
            nextFrameTime = 8;
          } // If one frame goes long, then the next one can be short to catch up.
          // If two frames are short in a row, then that's an indication that we
          // actually have a higher frame rate than what we're currently optimizing.
          // We adjust our heuristic dynamically accordingly. For example, if we're
          // running on 120hz display or 90hz VR display.
          // Take the max of the two in case one of them was an anomaly due to
          // missed frame deadlines.


          activeFrameTime = nextFrameTime < previousFrameTime ? previousFrameTime : nextFrameTime;
        } else {
          previousFrameTime = nextFrameTime;
        }

        frameDeadline = rafTime + activeFrameTime;

        if (!isMessageEventScheduled) {
          isMessageEventScheduled = true;
          port.postMessage(undefined);
        }
      };

      requestHostCallback = function (callback, absoluteTimeout) {
        scheduledHostCallback = callback;
        timeoutTime = absoluteTimeout;

        if (isFlushingHostCallback || absoluteTimeout < 0) {
          // Don't wait for the next frame. Continue working ASAP, in a new event.
          port.postMessage(undefined);
        } else if (!isAnimationFrameScheduled) {
          // If rAF didn't already schedule one, we need to schedule a frame.
          // TODO: If this rAF doesn't materialize because the browser throttles, we
          // might want to still have setTimeout trigger rIC as a backup to ensure
          // that we keep performing work.
          isAnimationFrameScheduled = true;
          requestAnimationFrameWithTimeout(animationTick);
        }
      };

      cancelHostCallback = function () {
        scheduledHostCallback = null;
        isMessageEventScheduled = false;
        timeoutTime = -1;
      };
    }

    exports.unstable_ImmediatePriority = ImmediatePriority;
    exports.unstable_UserBlockingPriority = UserBlockingPriority;
    exports.unstable_NormalPriority = NormalPriority;
    exports.unstable_IdlePriority = IdlePriority;
    exports.unstable_LowPriority = LowPriority;
    exports.unstable_runWithPriority = unstable_runWithPriority;
    exports.unstable_next = unstable_next;
    exports.unstable_scheduleCallback = unstable_scheduleCallback;
    exports.unstable_cancelCallback = unstable_cancelCallback;
    exports.unstable_wrapCallback = unstable_wrapCallback;
    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
    exports.unstable_shouldYield = unstable_shouldYield;
    exports.unstable_continueExecution = unstable_continueExecution;
    exports.unstable_pauseExecution = unstable_pauseExecution;
    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
  })();
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/scheduler/index.js":
/*!*****************************************!*\
  !*** ./node_modules/scheduler/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/scheduler.development.js */ "./node_modules/scheduler/cjs/scheduler.development.js");
}

/***/ }),

/***/ "./node_modules/scheduler/tracing.js":
/*!*******************************************!*\
  !*** ./node_modules/scheduler/tracing.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/scheduler-tracing.development.js */ "./node_modules/scheduler/cjs/scheduler-tracing.development.js");
}

/***/ }),

/***/ "./node_modules/sockjs-client/lib/entry.js":
/*!*************************************************!*\
  !*** ./node_modules/sockjs-client/lib/entry.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var transportList = __webpack_require__(/*! ./transport-list */ "./node_modules/sockjs-client/lib/transport-list.js");

module.exports = __webpack_require__(/*! ./main */ "./node_modules/sockjs-client/lib/main.js")(transportList); // TODO can't get rid of this until all servers do

if ('_sockjs_onload' in global) {
  setTimeout(global._sockjs_onload, 1);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/sockjs-client/lib/event/close.js":
/*!*******************************************************!*\
  !*** ./node_modules/sockjs-client/lib/event/close.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    Event = __webpack_require__(/*! ./event */ "./node_modules/sockjs-client/lib/event/event.js");

function CloseEvent() {
  Event.call(this);
  this.initEvent('close', false, false);
  this.wasClean = false;
  this.code = 0;
  this.reason = '';
}

inherits(CloseEvent, Event);
module.exports = CloseEvent;

/***/ }),

/***/ "./node_modules/sockjs-client/lib/event/emitter.js":
/*!*********************************************************!*\
  !*** ./node_modules/sockjs-client/lib/event/emitter.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    EventTarget = __webpack_require__(/*! ./eventtarget */ "./node_modules/sockjs-client/lib/event/eventtarget.js");

function EventEmitter() {
  EventTarget.call(this);
}

inherits(EventEmitter, EventTarget);

EventEmitter.prototype.removeAllListeners = function (type) {
  if (type) {
    delete this._listeners[type];
  } else {
    this._listeners = {};
  }
};

EventEmitter.prototype.once = function (type, listener) {
  var self = this,
      fired = false;

  function g() {
    self.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  this.on(type, g);
};

EventEmitter.prototype.emit = function () {
  var type = arguments[0];
  var listeners = this._listeners[type];

  if (!listeners) {
    return;
  } // equivalent of Array.prototype.slice.call(arguments, 1);


  var l = arguments.length;
  var args = new Array(l - 1);

  for (var ai = 1; ai < l; ai++) {
    args[ai - 1] = arguments[ai];
  }

  for (var i = 0; i < listeners.length; i++) {
    listeners[i].apply(this, args);
  }
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener = EventTarget.prototype.addEventListener;
EventEmitter.prototype.removeListener = EventTarget.prototype.removeEventListener;
module.exports.EventEmitter = EventEmitter;

/***/ }),

/***/ "./node_modules/sockjs-client/lib/event/event.js":
/*!*******************************************************!*\
  !*** ./node_modules/sockjs-client/lib/event/event.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function Event(eventType) {
  this.type = eventType;
}

Event.prototype.initEvent = function (eventType, canBubble, cancelable) {
  this.type = eventType;
  this.bubbles = canBubble;
  this.cancelable = cancelable;
  this.timeStamp = +new Date();
  return this;
};

Event.prototype.stopPropagation = function () {};

Event.prototype.preventDefault = function () {};

Event.CAPTURING_PHASE = 1;
Event.AT_TARGET = 2;
Event.BUBBLING_PHASE = 3;
module.exports = Event;

/***/ }),

/***/ "./node_modules/sockjs-client/lib/event/eventtarget.js":
/*!*************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/event/eventtarget.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* Simplified implementation of DOM2 EventTarget.
 *   http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget
 */

function EventTarget() {
  this._listeners = {};
}

EventTarget.prototype.addEventListener = function (eventType, listener) {
  if (!(eventType in this._listeners)) {
    this._listeners[eventType] = [];
  }

  var arr = this._listeners[eventType]; // #4

  if (arr.indexOf(listener) === -1) {
    // Make a copy so as not to interfere with a current dispatchEvent.
    arr = arr.concat([listener]);
  }

  this._listeners[eventType] = arr;
};

EventTarget.prototype.removeEventListener = function (eventType, listener) {
  var arr = this._listeners[eventType];

  if (!arr) {
    return;
  }

  var idx = arr.indexOf(listener);

  if (idx !== -1) {
    if (arr.length > 1) {
      // Make a copy so as not to interfere with a current dispatchEvent.
      this._listeners[eventType] = arr.slice(0, idx).concat(arr.slice(idx + 1));
    } else {
      delete this._listeners[eventType];
    }

    return;
  }
};

EventTarget.prototype.dispatchEvent = function () {
  var event = arguments[0];
  var t = event.type; // equivalent of Array.prototype.slice.call(arguments, 0);

  var args = arguments.length === 1 ? [event] : Array.apply(null, arguments); // TODO: This doesn't match the real behavior; per spec, onfoo get
  // their place in line from the /first/ time they're set from
  // non-null. Although WebKit bumps it to the end every time it's
  // set.

  if (this['on' + t]) {
    this['on' + t].apply(this, args);
  }

  if (t in this._listeners) {
    // Grab a reference to the listeners list. removeEventListener may alter the list.
    var listeners = this._listeners[t];

    for (var i = 0; i < listeners.length; i++) {
      listeners[i].apply(this, args);
    }
  }
};

module.exports = EventTarget;

/***/ }),

/***/ "./node_modules/sockjs-client/lib/event/trans-message.js":
/*!***************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/event/trans-message.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    Event = __webpack_require__(/*! ./event */ "./node_modules/sockjs-client/lib/event/event.js");

function TransportMessageEvent(data) {
  Event.call(this);
  this.initEvent('message', false, false);
  this.data = data;
}

inherits(TransportMessageEvent, Event);
module.exports = TransportMessageEvent;

/***/ }),

/***/ "./node_modules/sockjs-client/lib/facade.js":
/*!**************************************************!*\
  !*** ./node_modules/sockjs-client/lib/facade.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var JSON3 = __webpack_require__(/*! json3 */ "./node_modules/json3/lib/json3.js"),
    iframeUtils = __webpack_require__(/*! ./utils/iframe */ "./node_modules/sockjs-client/lib/utils/iframe.js");

function FacadeJS(transport) {
  this._transport = transport;
  transport.on('message', this._transportMessage.bind(this));
  transport.on('close', this._transportClose.bind(this));
}

FacadeJS.prototype._transportClose = function (code, reason) {
  iframeUtils.postMessage('c', JSON3.stringify([code, reason]));
};

FacadeJS.prototype._transportMessage = function (frame) {
  iframeUtils.postMessage('t', frame);
};

FacadeJS.prototype._send = function (data) {
  this._transport.send(data);
};

FacadeJS.prototype._close = function () {
  this._transport.close();

  this._transport.removeAllListeners();
};

module.exports = FacadeJS;

/***/ }),

/***/ "./node_modules/sockjs-client/lib/iframe-bootstrap.js":
/*!************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/iframe-bootstrap.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var urlUtils = __webpack_require__(/*! ./utils/url */ "./node_modules/sockjs-client/lib/utils/url.js"),
    eventUtils = __webpack_require__(/*! ./utils/event */ "./node_modules/sockjs-client/lib/utils/event.js"),
    JSON3 = __webpack_require__(/*! json3 */ "./node_modules/json3/lib/json3.js"),
    FacadeJS = __webpack_require__(/*! ./facade */ "./node_modules/sockjs-client/lib/facade.js"),
    InfoIframeReceiver = __webpack_require__(/*! ./info-iframe-receiver */ "./node_modules/sockjs-client/lib/info-iframe-receiver.js"),
    iframeUtils = __webpack_require__(/*! ./utils/iframe */ "./node_modules/sockjs-client/lib/utils/iframe.js"),
    loc = __webpack_require__(/*! ./location */ "./node_modules/sockjs-client/lib/location.js");

var debug = function () {};

if (true) {
  debug = __webpack_require__(/*! debug */ "./node_modules/sockjs-client/node_modules/debug/src/browser.js")('sockjs-client:iframe-bootstrap');
}

module.exports = function (SockJS, availableTransports) {
  var transportMap = {};
  availableTransports.forEach(function (at) {
    if (at.facadeTransport) {
      transportMap[at.facadeTransport.transportName] = at.facadeTransport;
    }
  }); // hard-coded for the info iframe
  // TODO see if we can make this more dynamic

  transportMap[InfoIframeReceiver.transportName] = InfoIframeReceiver;
  var parentOrigin;
  /* eslint-disable camelcase */

  SockJS.bootstrap_iframe = function () {
    /* eslint-enable camelcase */
    var facade;
    iframeUtils.currentWindowId = loc.hash.slice(1);

    var onMessage = function (e) {
      if (e.source !== parent) {
        return;
      }

      if (typeof parentOrigin === 'undefined') {
        parentOrigin = e.origin;
      }

      if (e.origin !== parentOrigin) {
        return;
      }

      var iframeMessage;

      try {
        iframeMessage = JSON3.parse(e.data);
      } catch (ignored) {
        debug('bad json', e.data);
        return;
      }

      if (iframeMessage.windowId !== iframeUtils.currentWindowId) {
        return;
      }

      switch (iframeMessage.type) {
        case 's':
          var p;

          try {
            p = JSON3.parse(iframeMessage.data);
          } catch (ignored) {
            debug('bad json', iframeMessage.data);
            break;
          }

          var version = p[0];
          var transport = p[1];
          var transUrl = p[2];
          var baseUrl = p[3];
          debug(version, transport, transUrl, baseUrl); // change this to semver logic

          if (version !== SockJS.version) {
            throw new Error('Incompatible SockJS! Main site uses:' + ' "' + version + '", the iframe:' + ' "' + SockJS.version + '".');
          }

          if (!urlUtils.isOriginEqual(transUrl, loc.href) || !urlUtils.isOriginEqual(baseUrl, loc.href)) {
            throw new Error('Can\'t connect to different domain from within an ' + 'iframe. (' + loc.href + ', ' + transUrl + ', ' + baseUrl + ')');
          }

          facade = new FacadeJS(new transportMap[transport](transUrl, baseUrl));
          break;

        case 'm':
          facade._send(iframeMessage.data);

          break;

        case 'c':
          if (facade) {
            facade._close();
          }

          facade = null;
          break;
      }
    };

    eventUtils.attachEvent('message', onMessage); // Start

    iframeUtils.postMessage('s');
  };
};

/***/ }),

/***/ "./node_modules/sockjs-client/lib/info-ajax.js":
/*!*****************************************************!*\
  !*** ./node_modules/sockjs-client/lib/info-ajax.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var EventEmitter = __webpack_require__(/*! events */ "./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter,
    inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    JSON3 = __webpack_require__(/*! json3 */ "./node_modules/json3/lib/json3.js"),
    objectUtils = __webpack_require__(/*! ./utils/object */ "./node_modules/sockjs-client/lib/utils/object.js");

var debug = function () {};

if (true) {
  debug = __webpack_require__(/*! debug */ "./node_modules/sockjs-client/node_modules/debug/src/browser.js")('sockjs-client:info-ajax');
}

function InfoAjax(url, AjaxObject) {
  EventEmitter.call(this);
  var self = this;
  var t0 = +new Date();
  this.xo = new AjaxObject('GET', url);
  this.xo.once('finish', function (status, text) {
    var info, rtt;

    if (status === 200) {
      rtt = +new Date() - t0;

      if (text) {
        try {
          info = JSON3.parse(text);
        } catch (e) {
          debug('bad json', text);
        }
      }

      if (!objectUtils.isObject(info)) {
        info = {};
      }
    }

    self.emit('finish', info, rtt);
    self.removeAllListeners();
  });
}

inherits(InfoAjax, EventEmitter);

InfoAjax.prototype.close = function () {
  this.removeAllListeners();
  this.xo.close();
};

module.exports = InfoAjax;

/***/ }),

/***/ "./node_modules/sockjs-client/lib/info-iframe-receiver.js":
/*!****************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/info-iframe-receiver.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    EventEmitter = __webpack_require__(/*! events */ "./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter,
    JSON3 = __webpack_require__(/*! json3 */ "./node_modules/json3/lib/json3.js"),
    XHRLocalObject = __webpack_require__(/*! ./transport/sender/xhr-local */ "./node_modules/sockjs-client/lib/transport/sender/xhr-local.js"),
    InfoAjax = __webpack_require__(/*! ./info-ajax */ "./node_modules/sockjs-client/lib/info-ajax.js");

function InfoReceiverIframe(transUrl) {
  var self = this;
  EventEmitter.call(this);
  this.ir = new InfoAjax(transUrl, XHRLocalObject);
  this.ir.once('finish', function (info, rtt) {
    self.ir = null;
    self.emit('message', JSON3.stringify([info, rtt]));
  });
}

inherits(InfoReceiverIframe, EventEmitter);
InfoReceiverIframe.transportName = 'iframe-info-receiver';

InfoReceiverIframe.prototype.close = function () {
  if (this.ir) {
    this.ir.close();
    this.ir = null;
  }

  this.removeAllListeners();
};

module.exports = InfoReceiverIframe;

/***/ }),

/***/ "./node_modules/sockjs-client/lib/info-iframe.js":
/*!*******************************************************!*\
  !*** ./node_modules/sockjs-client/lib/info-iframe.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var EventEmitter = __webpack_require__(/*! events */ "./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter,
    inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    JSON3 = __webpack_require__(/*! json3 */ "./node_modules/json3/lib/json3.js"),
    utils = __webpack_require__(/*! ./utils/event */ "./node_modules/sockjs-client/lib/utils/event.js"),
    IframeTransport = __webpack_require__(/*! ./transport/iframe */ "./node_modules/sockjs-client/lib/transport/iframe.js"),
    InfoReceiverIframe = __webpack_require__(/*! ./info-iframe-receiver */ "./node_modules/sockjs-client/lib/info-iframe-receiver.js");

var debug = function () {};

if (true) {
  debug = __webpack_require__(/*! debug */ "./node_modules/sockjs-client/node_modules/debug/src/browser.js")('sockjs-client:info-iframe');
}

function InfoIframe(baseUrl, url) {
  var self = this;
  EventEmitter.call(this);

  var go = function () {
    var ifr = self.ifr = new IframeTransport(InfoReceiverIframe.transportName, url, baseUrl);
    ifr.once('message', function (msg) {
      if (msg) {
        var d;

        try {
          d = JSON3.parse(msg);
        } catch (e) {
          debug('bad json', msg);
          self.emit('finish');
          self.close();
          return;
        }

        var info = d[0],
            rtt = d[1];
        self.emit('finish', info, rtt);
      }

      self.close();
    });
    ifr.once('close', function () {
      self.emit('finish');
      self.close();
    });
  }; // TODO this seems the same as the 'needBody' from transports


  if (!global.document.body) {
    utils.attachEvent('load', go);
  } else {
    go();
  }
}

inherits(InfoIframe, EventEmitter);

InfoIframe.enabled = function () {
  return IframeTransport.enabled();
};

InfoIframe.prototype.close = function () {
  if (this.ifr) {
    this.ifr.close();
  }

  this.removeAllListeners();
  this.ifr = null;
};

module.exports = InfoIframe;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/sockjs-client/lib/info-receiver.js":
/*!*********************************************************!*\
  !*** ./node_modules/sockjs-client/lib/info-receiver.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var EventEmitter = __webpack_require__(/*! events */ "./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter,
    inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    urlUtils = __webpack_require__(/*! ./utils/url */ "./node_modules/sockjs-client/lib/utils/url.js"),
    XDR = __webpack_require__(/*! ./transport/sender/xdr */ "./node_modules/sockjs-client/lib/transport/sender/xdr.js"),
    XHRCors = __webpack_require__(/*! ./transport/sender/xhr-cors */ "./node_modules/sockjs-client/lib/transport/sender/xhr-cors.js"),
    XHRLocal = __webpack_require__(/*! ./transport/sender/xhr-local */ "./node_modules/sockjs-client/lib/transport/sender/xhr-local.js"),
    XHRFake = __webpack_require__(/*! ./transport/sender/xhr-fake */ "./node_modules/sockjs-client/lib/transport/sender/xhr-fake.js"),
    InfoIframe = __webpack_require__(/*! ./info-iframe */ "./node_modules/sockjs-client/lib/info-iframe.js"),
    InfoAjax = __webpack_require__(/*! ./info-ajax */ "./node_modules/sockjs-client/lib/info-ajax.js");

var debug = function () {};

if (true) {
  debug = __webpack_require__(/*! debug */ "./node_modules/sockjs-client/node_modules/debug/src/browser.js")('sockjs-client:info-receiver');
}

function InfoReceiver(baseUrl, urlInfo) {
  debug(baseUrl);
  var self = this;
  EventEmitter.call(this);
  setTimeout(function () {
    self.doXhr(baseUrl, urlInfo);
  }, 0);
}

inherits(InfoReceiver, EventEmitter); // TODO this is currently ignoring the list of available transports and the whitelist

InfoReceiver._getReceiver = function (baseUrl, url, urlInfo) {
  // determine method of CORS support (if needed)
  if (urlInfo.sameOrigin) {
    return new InfoAjax(url, XHRLocal);
  }

  if (XHRCors.enabled) {
    return new InfoAjax(url, XHRCors);
  }

  if (XDR.enabled && urlInfo.sameScheme) {
    return new InfoAjax(url, XDR);
  }

  if (InfoIframe.enabled()) {
    return new InfoIframe(baseUrl, url);
  }

  return new InfoAjax(url, XHRFake);
};

InfoReceiver.prototype.doXhr = function (baseUrl, urlInfo) {
  var self = this,
      url = urlUtils.addPath(baseUrl, '/info');
  debug('doXhr', url);
  this.xo = InfoReceiver._getReceiver(baseUrl, url, urlInfo);
  this.timeoutRef = setTimeout(function () {
    debug('timeout');

    self._cleanup(false);

    self.emit('finish');
  }, InfoReceiver.timeout);
  this.xo.once('finish', function (info, rtt) {
    debug('finish', info, rtt);

    self._cleanup(true);

    self.emit('finish', info, rtt);
  });
};

InfoReceiver.prototype._cleanup = function (wasClean) {
  debug('_cleanup');
  clearTimeout(this.timeoutRef);
  this.timeoutRef = null;

  if (!wasClean && this.xo) {
    this.xo.close();
  }

  this.xo = null;
};

InfoReceiver.prototype.close = function () {
  debug('close');
  this.removeAllListeners();

  this._cleanup(false);
};

InfoReceiver.timeout = 8000;
module.exports = InfoReceiver;

/***/ }),

/***/ "./node_modules/sockjs-client/lib/location.js":
/*!****************************************************!*\
  !*** ./node_modules/sockjs-client/lib/location.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

module.exports = global.location || {
  origin: 'http://localhost:80',
  protocol: 'http:',
  host: 'localhost',
  port: 80,
  href: 'http://localhost/',
  hash: ''
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/sockjs-client/lib/main.js":
/*!************************************************!*\
  !*** ./node_modules/sockjs-client/lib/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

__webpack_require__(/*! ./shims */ "./node_modules/sockjs-client/lib/shims.js");

var URL = __webpack_require__(/*! url-parse */ "./node_modules/url-parse/index.js"),
    inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    JSON3 = __webpack_require__(/*! json3 */ "./node_modules/json3/lib/json3.js"),
    random = __webpack_require__(/*! ./utils/random */ "./node_modules/sockjs-client/lib/utils/random.js"),
    escape = __webpack_require__(/*! ./utils/escape */ "./node_modules/sockjs-client/lib/utils/escape.js"),
    urlUtils = __webpack_require__(/*! ./utils/url */ "./node_modules/sockjs-client/lib/utils/url.js"),
    eventUtils = __webpack_require__(/*! ./utils/event */ "./node_modules/sockjs-client/lib/utils/event.js"),
    transport = __webpack_require__(/*! ./utils/transport */ "./node_modules/sockjs-client/lib/utils/transport.js"),
    objectUtils = __webpack_require__(/*! ./utils/object */ "./node_modules/sockjs-client/lib/utils/object.js"),
    browser = __webpack_require__(/*! ./utils/browser */ "./node_modules/sockjs-client/lib/utils/browser.js"),
    log = __webpack_require__(/*! ./utils/log */ "./node_modules/sockjs-client/lib/utils/log.js"),
    Event = __webpack_require__(/*! ./event/event */ "./node_modules/sockjs-client/lib/event/event.js"),
    EventTarget = __webpack_require__(/*! ./event/eventtarget */ "./node_modules/sockjs-client/lib/event/eventtarget.js"),
    loc = __webpack_require__(/*! ./location */ "./node_modules/sockjs-client/lib/location.js"),
    CloseEvent = __webpack_require__(/*! ./event/close */ "./node_modules/sockjs-client/lib/event/close.js"),
    TransportMessageEvent = __webpack_require__(/*! ./event/trans-message */ "./node_modules/sockjs-client/lib/event/trans-message.js"),
    InfoReceiver = __webpack_require__(/*! ./info-receiver */ "./node_modules/sockjs-client/lib/info-receiver.js");

var debug = function () {};

if (true) {
  debug = __webpack_require__(/*! debug */ "./node_modules/sockjs-client/node_modules/debug/src/browser.js")('sockjs-client:main');
}

var transports; // follow constructor steps defined at http://dev.w3.org/html5/websockets/#the-websocket-interface

function SockJS(url, protocols, options) {
  if (!(this instanceof SockJS)) {
    return new SockJS(url, protocols, options);
  }

  if (arguments.length < 1) {
    throw new TypeError("Failed to construct 'SockJS: 1 argument required, but only 0 present");
  }

  EventTarget.call(this);
  this.readyState = SockJS.CONNECTING;
  this.extensions = '';
  this.protocol = ''; // non-standard extension

  options = options || {};

  if (options.protocols_whitelist) {
    log.warn("'protocols_whitelist' is DEPRECATED. Use 'transports' instead.");
  }

  this._transportsWhitelist = options.transports;
  this._transportOptions = options.transportOptions || {};
  var sessionId = options.sessionId || 8;

  if (typeof sessionId === 'function') {
    this._generateSessionId = sessionId;
  } else if (typeof sessionId === 'number') {
    this._generateSessionId = function () {
      return random.string(sessionId);
    };
  } else {
    throw new TypeError('If sessionId is used in the options, it needs to be a number or a function.');
  }

  this._server = options.server || random.numberString(1000); // Step 1 of WS spec - parse and validate the url. Issue #8

  var parsedUrl = new URL(url);

  if (!parsedUrl.host || !parsedUrl.protocol) {
    throw new SyntaxError("The URL '" + url + "' is invalid");
  } else if (parsedUrl.hash) {
    throw new SyntaxError('The URL must not contain a fragment');
  } else if (parsedUrl.protocol !== 'http:' && parsedUrl.protocol !== 'https:') {
    throw new SyntaxError("The URL's scheme must be either 'http:' or 'https:'. '" + parsedUrl.protocol + "' is not allowed.");
  }

  var secure = parsedUrl.protocol === 'https:'; // Step 2 - don't allow secure origin with an insecure protocol

  if (loc.protocol === 'https:' && !secure) {
    throw new Error('SecurityError: An insecure SockJS connection may not be initiated from a page loaded over HTTPS');
  } // Step 3 - check port access - no need here
  // Step 4 - parse protocols argument


  if (!protocols) {
    protocols = [];
  } else if (!Array.isArray(protocols)) {
    protocols = [protocols];
  } // Step 5 - check protocols argument


  var sortedProtocols = protocols.sort();
  sortedProtocols.forEach(function (proto, i) {
    if (!proto) {
      throw new SyntaxError("The protocols entry '" + proto + "' is invalid.");
    }

    if (i < sortedProtocols.length - 1 && proto === sortedProtocols[i + 1]) {
      throw new SyntaxError("The protocols entry '" + proto + "' is duplicated.");
    }
  }); // Step 6 - convert origin

  var o = urlUtils.getOrigin(loc.href);
  this._origin = o ? o.toLowerCase() : null; // remove the trailing slash

  parsedUrl.set('pathname', parsedUrl.pathname.replace(/\/+$/, '')); // store the sanitized url

  this.url = parsedUrl.href;
  debug('using url', this.url); // Step 7 - start connection in background
  // obtain server info
  // http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html#section-26

  this._urlInfo = {
    nullOrigin: !browser.hasDomain(),
    sameOrigin: urlUtils.isOriginEqual(this.url, loc.href),
    sameScheme: urlUtils.isSchemeEqual(this.url, loc.href)
  };
  this._ir = new InfoReceiver(this.url, this._urlInfo);

  this._ir.once('finish', this._receiveInfo.bind(this));
}

inherits(SockJS, EventTarget);

function userSetCode(code) {
  return code === 1000 || code >= 3000 && code <= 4999;
}

SockJS.prototype.close = function (code, reason) {
  // Step 1
  if (code && !userSetCode(code)) {
    throw new Error('InvalidAccessError: Invalid code');
  } // Step 2.4 states the max is 123 bytes, but we are just checking length


  if (reason && reason.length > 123) {
    throw new SyntaxError('reason argument has an invalid length');
  } // Step 3.1


  if (this.readyState === SockJS.CLOSING || this.readyState === SockJS.CLOSED) {
    return;
  } // TODO look at docs to determine how to set this


  var wasClean = true;

  this._close(code || 1000, reason || 'Normal closure', wasClean);
};

SockJS.prototype.send = function (data) {
  // #13 - convert anything non-string to string
  // TODO this currently turns objects into [object Object]
  if (typeof data !== 'string') {
    data = '' + data;
  }

  if (this.readyState === SockJS.CONNECTING) {
    throw new Error('InvalidStateError: The connection has not been established yet');
  }

  if (this.readyState !== SockJS.OPEN) {
    return;
  }

  this._transport.send(escape.quote(data));
};

SockJS.version = __webpack_require__(/*! ./version */ "./node_modules/sockjs-client/lib/version.js");
SockJS.CONNECTING = 0;
SockJS.OPEN = 1;
SockJS.CLOSING = 2;
SockJS.CLOSED = 3;

SockJS.prototype._receiveInfo = function (info, rtt) {
  debug('_receiveInfo', rtt);
  this._ir = null;

  if (!info) {
    this._close(1002, 'Cannot connect to server');

    return;
  } // establish a round-trip timeout (RTO) based on the
  // round-trip time (RTT)


  this._rto = this.countRTO(rtt); // allow server to override url used for the actual transport

  this._transUrl = info.base_url ? info.base_url : this.url;
  info = objectUtils.extend(info, this._urlInfo);
  debug('info', info); // determine list of desired and supported transports

  var enabledTransports = transports.filterToEnabled(this._transportsWhitelist, info);
  this._transports = enabledTransports.main;
  debug(this._transports.length + ' enabled transports');

  this._connect();
};

SockJS.prototype._connect = function () {
  for (var Transport = this._transports.shift(); Transport; Transport = this._transports.shift()) {
    debug('attempt', Transport.transportName);

    if (Transport.needBody) {
      if (!global.document.body || typeof global.document.readyState !== 'undefined' && global.document.readyState !== 'complete' && global.document.readyState !== 'interactive') {
        debug('waiting for body');

        this._transports.unshift(Transport);

        eventUtils.attachEvent('load', this._connect.bind(this));
        return;
      }
    } // calculate timeout based on RTO and round trips. Default to 5s


    var timeoutMs = this._rto * Transport.roundTrips || 5000;
    this._transportTimeoutId = setTimeout(this._transportTimeout.bind(this), timeoutMs);
    debug('using timeout', timeoutMs);
    var transportUrl = urlUtils.addPath(this._transUrl, '/' + this._server + '/' + this._generateSessionId());
    var options = this._transportOptions[Transport.transportName];
    debug('transport url', transportUrl);
    var transportObj = new Transport(transportUrl, this._transUrl, options);
    transportObj.on('message', this._transportMessage.bind(this));
    transportObj.once('close', this._transportClose.bind(this));
    transportObj.transportName = Transport.transportName;
    this._transport = transportObj;
    return;
  }

  this._close(2000, 'All transports failed', false);
};

SockJS.prototype._transportTimeout = function () {
  debug('_transportTimeout');

  if (this.readyState === SockJS.CONNECTING) {
    if (this._transport) {
      this._transport.close();
    }

    this._transportClose(2007, 'Transport timed out');
  }
};

SockJS.prototype._transportMessage = function (msg) {
  debug('_transportMessage', msg);
  var self = this,
      type = msg.slice(0, 1),
      content = msg.slice(1),
      payload; // first check for messages that don't need a payload

  switch (type) {
    case 'o':
      this._open();

      return;

    case 'h':
      this.dispatchEvent(new Event('heartbeat'));
      debug('heartbeat', this.transport);
      return;
  }

  if (content) {
    try {
      payload = JSON3.parse(content);
    } catch (e) {
      debug('bad json', content);
    }
  }

  if (typeof payload === 'undefined') {
    debug('empty payload', content);
    return;
  }

  switch (type) {
    case 'a':
      if (Array.isArray(payload)) {
        payload.forEach(function (p) {
          debug('message', self.transport, p);
          self.dispatchEvent(new TransportMessageEvent(p));
        });
      }

      break;

    case 'm':
      debug('message', this.transport, payload);
      this.dispatchEvent(new TransportMessageEvent(payload));
      break;

    case 'c':
      if (Array.isArray(payload) && payload.length === 2) {
        this._close(payload[0], payload[1], true);
      }

      break;
  }
};

SockJS.prototype._transportClose = function (code, reason) {
  debug('_transportClose', this.transport, code, reason);

  if (this._transport) {
    this._transport.removeAllListeners();

    this._transport = null;
    this.transport = null;
  }

  if (!userSetCode(code) && code !== 2000 && this.readyState === SockJS.CONNECTING) {
    this._connect();

    return;
  }

  this._close(code, reason);
};

SockJS.prototype._open = function () {
  debug('_open', this._transport.transportName, this.readyState);

  if (this.readyState === SockJS.CONNECTING) {
    if (this._transportTimeoutId) {
      clearTimeout(this._transportTimeoutId);
      this._transportTimeoutId = null;
    }

    this.readyState = SockJS.OPEN;
    this.transport = this._transport.transportName;
    this.dispatchEvent(new Event('open'));
    debug('connected', this.transport);
  } else {
    // The server might have been restarted, and lost track of our
    // connection.
    this._close(1006, 'Server lost session');
  }
};

SockJS.prototype._close = function (code, reason, wasClean) {
  debug('_close', this.transport, code, reason, wasClean, this.readyState);
  var forceFail = false;

  if (this._ir) {
    forceFail = true;

    this._ir.close();

    this._ir = null;
  }

  if (this._transport) {
    this._transport.close();

    this._transport = null;
    this.transport = null;
  }

  if (this.readyState === SockJS.CLOSED) {
    throw new Error('InvalidStateError: SockJS has already been closed');
  }

  this.readyState = SockJS.CLOSING;
  setTimeout(function () {
    this.readyState = SockJS.CLOSED;

    if (forceFail) {
      this.dispatchEvent(new Event('error'));
    }

    var e = new CloseEvent('close');
    e.wasClean = wasClean || false;
    e.code = code || 1000;
    e.reason = reason;
    this.dispatchEvent(e);
    this.onmessage = this.onclose = this.onerror = null;
    debug('disconnected');
  }.bind(this), 0);
}; // See: http://www.erg.abdn.ac.uk/~gerrit/dccp/notes/ccid2/rto_estimator/
// and RFC 2988.


SockJS.prototype.countRTO = function (rtt) {
  // In a local environment, when using IE8/9 and the `jsonp-polling`
  // transport the time needed to establish a connection (the time that pass
  // from the opening of the transport to the call of `_dispatchOpen`) is
  // around 200msec (the lower bound used in the article above) and this
  // causes spurious timeouts. For this reason we calculate a value slightly
  // larger than that used in the article.
  if (rtt > 100) {
    return 4 * rtt; // rto > 400msec
  }

  return 300 + rtt; // 300msec < rto <= 400msec
};

module.exports = function (availableTransports) {
  transports = transport(availableTransports);

  __webpack_require__(/*! ./iframe-bootstrap */ "./node_modules/sockjs-client/lib/iframe-bootstrap.js")(SockJS, availableTransports);

  return SockJS;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/sockjs-client/lib/shims.js":
/*!*************************************************!*\
  !*** ./node_modules/sockjs-client/lib/shims.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* eslint-disable */

/* jscs: disable */
 // pulled specific shims from https://github.com/es-shims/es5-shim

var ArrayPrototype = Array.prototype;
var ObjectPrototype = Object.prototype;
var FunctionPrototype = Function.prototype;
var StringPrototype = String.prototype;
var array_slice = ArrayPrototype.slice;
var _toString = ObjectPrototype.toString;

var isFunction = function (val) {
  return ObjectPrototype.toString.call(val) === '[object Function]';
};

var isArray = function isArray(obj) {
  return _toString.call(obj) === '[object Array]';
};

var isString = function isString(obj) {
  return _toString.call(obj) === '[object String]';
};

var supportsDescriptors = Object.defineProperty && function () {
  try {
    Object.defineProperty({}, 'x', {});
    return true;
  } catch (e) {
    /* this is ES3 */
    return false;
  }
}(); // Define configurable, writable and non-enumerable props
// if they don't exist.


var defineProperty;

if (supportsDescriptors) {
  defineProperty = function (object, name, method, forceAssign) {
    if (!forceAssign && name in object) {
      return;
    }

    Object.defineProperty(object, name, {
      configurable: true,
      enumerable: false,
      writable: true,
      value: method
    });
  };
} else {
  defineProperty = function (object, name, method, forceAssign) {
    if (!forceAssign && name in object) {
      return;
    }

    object[name] = method;
  };
}

var defineProperties = function (object, map, forceAssign) {
  for (var name in map) {
    if (ObjectPrototype.hasOwnProperty.call(map, name)) {
      defineProperty(object, name, map[name], forceAssign);
    }
  }
};

var toObject = function (o) {
  if (o == null) {
    // this matches both null and undefined
    throw new TypeError("can't convert " + o + ' to object');
  }

  return Object(o);
}; //
// Util
// ======
//
// ES5 9.4
// http://es5.github.com/#x9.4
// http://jsperf.com/to-integer


function toInteger(num) {
  var n = +num;

  if (n !== n) {
    // isNaN
    n = 0;
  } else if (n !== 0 && n !== 1 / 0 && n !== -(1 / 0)) {
    n = (n > 0 || -1) * Math.floor(Math.abs(n));
  }

  return n;
}

function ToUint32(x) {
  return x >>> 0;
} //
// Function
// ========
//
// ES-5 15.3.4.5
// http://es5.github.com/#x15.3.4.5


function Empty() {}

defineProperties(FunctionPrototype, {
  bind: function bind(that) {
    // .length is 1
    // 1. Let Target be the this value.
    var target = this; // 2. If IsCallable(Target) is false, throw a TypeError exception.

    if (!isFunction(target)) {
      throw new TypeError('Function.prototype.bind called on incompatible ' + target);
    } // 3. Let A be a new (possibly empty) internal list of all of the
    //   argument values provided after thisArg (arg1, arg2 etc), in order.
    // XXX slicedArgs will stand in for "A" if used


    var args = array_slice.call(arguments, 1); // for normal call
    // 4. Let F be a new native ECMAScript object.
    // 11. Set the [[Prototype]] internal property of F to the standard
    //   built-in Function prototype object as specified in 15.3.3.1.
    // 12. Set the [[Call]] internal property of F as described in
    //   15.3.4.5.1.
    // 13. Set the [[Construct]] internal property of F as described in
    //   15.3.4.5.2.
    // 14. Set the [[HasInstance]] internal property of F as described in
    //   15.3.4.5.3.

    var binder = function () {
      if (this instanceof bound) {
        // 15.3.4.5.2 [[Construct]]
        // When the [[Construct]] internal method of a function object,
        // F that was created using the bind function is called with a
        // list of arguments ExtraArgs, the following steps are taken:
        // 1. Let target be the value of F's [[TargetFunction]]
        //   internal property.
        // 2. If target has no [[Construct]] internal method, a
        //   TypeError exception is thrown.
        // 3. Let boundArgs be the value of F's [[BoundArgs]] internal
        //   property.
        // 4. Let args be a new list containing the same values as the
        //   list boundArgs in the same order followed by the same
        //   values as the list ExtraArgs in the same order.
        // 5. Return the result of calling the [[Construct]] internal
        //   method of target providing args as the arguments.
        var result = target.apply(this, args.concat(array_slice.call(arguments)));

        if (Object(result) === result) {
          return result;
        }

        return this;
      } else {
        // 15.3.4.5.1 [[Call]]
        // When the [[Call]] internal method of a function object, F,
        // which was created using the bind function is called with a
        // this value and a list of arguments ExtraArgs, the following
        // steps are taken:
        // 1. Let boundArgs be the value of F's [[BoundArgs]] internal
        //   property.
        // 2. Let boundThis be the value of F's [[BoundThis]] internal
        //   property.
        // 3. Let target be the value of F's [[TargetFunction]] internal
        //   property.
        // 4. Let args be a new list containing the same values as the
        //   list boundArgs in the same order followed by the same
        //   values as the list ExtraArgs in the same order.
        // 5. Return the result of calling the [[Call]] internal method
        //   of target providing boundThis as the this value and
        //   providing args as the arguments.
        // equiv: target.call(this, ...boundArgs, ...args)
        return target.apply(that, args.concat(array_slice.call(arguments)));
      }
    }; // 15. If the [[Class]] internal property of Target is "Function", then
    //     a. Let L be the length property of Target minus the length of A.
    //     b. Set the length own property of F to either 0 or L, whichever is
    //       larger.
    // 16. Else set the length own property of F to 0.


    var boundLength = Math.max(0, target.length - args.length); // 17. Set the attributes of the length own property of F to the values
    //   specified in 15.3.5.1.

    var boundArgs = [];

    for (var i = 0; i < boundLength; i++) {
      boundArgs.push('$' + i);
    } // XXX Build a dynamic function with desired amount of arguments is the only
    // way to set the length property of a function.
    // In environments where Content Security Policies enabled (Chrome extensions,
    // for ex.) all use of eval or Function costructor throws an exception.
    // However in all of these environments Function.prototype.bind exists
    // and so this code will never be executed.


    var bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this, arguments); }')(binder);

    if (target.prototype) {
      Empty.prototype = target.prototype;
      bound.prototype = new Empty(); // Clean up dangling references.

      Empty.prototype = null;
    } // TODO
    // 18. Set the [[Extensible]] internal property of F to true.
    // TODO
    // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).
    // 20. Call the [[DefineOwnProperty]] internal method of F with
    //   arguments "caller", PropertyDescriptor {[[Get]]: thrower, [[Set]]:
    //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and
    //   false.
    // 21. Call the [[DefineOwnProperty]] internal method of F with
    //   arguments "arguments", PropertyDescriptor {[[Get]]: thrower,
    //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},
    //   and false.
    // TODO
    // NOTE Function objects created using Function.prototype.bind do not
    // have a prototype property or the [[Code]], [[FormalParameters]], and
    // [[Scope]] internal properties.
    // XXX can't delete prototype in pure-js.
    // 22. Return F.


    return bound;
  }
}); //
// Array
// =====
//
// ES5 15.4.3.2
// http://es5.github.com/#x15.4.3.2
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray

defineProperties(Array, {
  isArray: isArray
});
var boxedString = Object('a');
var splitString = boxedString[0] !== 'a' || !(0 in boxedString);

var properlyBoxesContext = function properlyBoxed(method) {
  // Check node 0.6.21 bug where third parameter is not boxed
  var properlyBoxesNonStrict = true;
  var properlyBoxesStrict = true;

  if (method) {
    method.call('foo', function (_, __, context) {
      if (typeof context !== 'object') {
        properlyBoxesNonStrict = false;
      }
    });
    method.call([1], function () {
      'use strict';

      properlyBoxesStrict = typeof this === 'string';
    }, 'x');
  }

  return !!method && properlyBoxesNonStrict && properlyBoxesStrict;
};

defineProperties(ArrayPrototype, {
  forEach: function forEach(fun
  /*, thisp*/
  ) {
    var object = toObject(this),
        self = splitString && isString(this) ? this.split('') : object,
        thisp = arguments[1],
        i = -1,
        length = self.length >>> 0; // If no callback function or if callback is not a callable function

    if (!isFunction(fun)) {
      throw new TypeError(); // TODO message
    }

    while (++i < length) {
      if (i in self) {
        // Invoke the callback function with call, passing arguments:
        // context, property value, property key, thisArg object
        // context
        fun.call(thisp, self[i], i, object);
      }
    }
  }
}, !properlyBoxesContext(ArrayPrototype.forEach)); // ES5 15.4.4.14
// http://es5.github.com/#x15.4.4.14
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf

var hasFirefox2IndexOfBug = Array.prototype.indexOf && [0, 1].indexOf(1, 2) !== -1;
defineProperties(ArrayPrototype, {
  indexOf: function indexOf(sought
  /*, fromIndex */
  ) {
    var self = splitString && isString(this) ? this.split('') : toObject(this),
        length = self.length >>> 0;

    if (!length) {
      return -1;
    }

    var i = 0;

    if (arguments.length > 1) {
      i = toInteger(arguments[1]);
    } // handle negative indices


    i = i >= 0 ? i : Math.max(0, length + i);

    for (; i < length; i++) {
      if (i in self && self[i] === sought) {
        return i;
      }
    }

    return -1;
  }
}, hasFirefox2IndexOfBug); //
// String
// ======
//
// ES5 15.5.4.14
// http://es5.github.com/#x15.5.4.14
// [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]
// Many browsers do not split properly with regular expressions or they
// do not perform the split correctly under obscure conditions.
// See http://blog.stevenlevithan.com/archives/cross-browser-split
// I've tested in many browsers and this seems to cover the deviant ones:
//    'ab'.split(/(?:ab)*/) should be ["", ""], not [""]
//    '.'.split(/(.?)(.?)/) should be ["", ".", "", ""], not ["", ""]
//    'tesst'.split(/(s)*/) should be ["t", undefined, "e", "s", "t"], not
//       [undefined, "t", undefined, "e", ...]
//    ''.split(/.?/) should be [], not [""]
//    '.'.split(/()()/) should be ["."], not ["", "", "."]

var string_split = StringPrototype.split;

if ('ab'.split(/(?:ab)*/).length !== 2 || '.'.split(/(.?)(.?)/).length !== 4 || 'tesst'.split(/(s)*/)[1] === 't' || 'test'.split(/(?:)/, -1).length !== 4 || ''.split(/.?/).length || '.'.split(/()()/).length > 1) {
  (function () {
    var compliantExecNpcg = /()??/.exec('')[1] === void 0; // NPCG: nonparticipating capturing group

    StringPrototype.split = function (separator, limit) {
      var string = this;

      if (separator === void 0 && limit === 0) {
        return [];
      } // If `separator` is not a regex, use native split


      if (_toString.call(separator) !== '[object RegExp]') {
        return string_split.call(this, separator, limit);
      }

      var output = [],
          flags = (separator.ignoreCase ? 'i' : '') + (separator.multiline ? 'm' : '') + (separator.extended ? 'x' : '') + ( // Proposed for ES6
      separator.sticky ? 'y' : ''),
          // Firefox 3+
      lastLastIndex = 0,
          // Make `global` and avoid `lastIndex` issues by working with a copy
      separator2,
          match,
          lastIndex,
          lastLength;
      separator = new RegExp(separator.source, flags + 'g');
      string += ''; // Type-convert

      if (!compliantExecNpcg) {
        // Doesn't need flags gy, but they don't hurt
        separator2 = new RegExp('^' + separator.source + '$(?!\\s)', flags);
      }
      /* Values for `limit`, per the spec:
       * If undefined: 4294967295 // Math.pow(2, 32) - 1
       * If 0, Infinity, or NaN: 0
       * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
       * If negative number: 4294967296 - Math.floor(Math.abs(limit))
       * If other: Type-convert, then use the above rules
       */


      limit = limit === void 0 ? -1 >>> 0 : // Math.pow(2, 32) - 1
      ToUint32(limit);

      while (match = separator.exec(string)) {
        // `separator.lastIndex` is not reliable cross-browser
        lastIndex = match.index + match[0].length;

        if (lastIndex > lastLastIndex) {
          output.push(string.slice(lastLastIndex, match.index)); // Fix browsers whose `exec` methods don't consistently return `undefined` for
          // nonparticipating capturing groups

          if (!compliantExecNpcg && match.length > 1) {
            match[0].replace(separator2, function () {
              for (var i = 1; i < arguments.length - 2; i++) {
                if (arguments[i] === void 0) {
                  match[i] = void 0;
                }
              }
            });
          }

          if (match.length > 1 && match.index < string.length) {
            ArrayPrototype.push.apply(output, match.slice(1));
          }

          lastLength = match[0].length;
          lastLastIndex = lastIndex;

          if (output.length >= limit) {
            break;
          }
        }

        if (separator.lastIndex === match.index) {
          separator.lastIndex++; // Avoid an infinite loop
        }
      }

      if (lastLastIndex === string.length) {
        if (lastLength || !separator.test('')) {
          output.push('');
        }
      } else {
        output.push(string.slice(lastLastIndex));
      }

      return output.length > limit ? output.slice(0, limit) : output;
    };
  })(); // [bugfix, chrome]
  // If separator is undefined, then the result array contains just one String,
  // which is the this value (converted to a String). If limit is not undefined,
  // then the output array is truncated so that it contains no more than limit
  // elements.
  // "0".split(undefined, 0) -> []

} else if ('0'.split(void 0, 0).length) {
  StringPrototype.split = function split(separator, limit) {
    if (separator === void 0 && limit === 0) {
      return [];
    }

    return string_split.call(this, separator, limit);
  };
} // ECMA-262, 3rd B.2.3
// Not an ECMAScript standard, although ECMAScript 3rd Edition has a
// non-normative section suggesting uniform semantics and it should be
// normalized across all browsers
// [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE


var string_substr = StringPrototype.substr;
var hasNegativeSubstrBug = ''.substr && '0b'.substr(-1) !== 'b';
defineProperties(StringPrototype, {
  substr: function substr(start, length) {
    return string_substr.call(this, start < 0 ? (start = this.length + start) < 0 ? 0 : start : start, length);
  }
}, hasNegativeSubstrBug);

/***/ }),

/***/ "./node_modules/sockjs-client/lib/transport-list.js":
/*!**********************************************************!*\
  !*** ./node_modules/sockjs-client/lib/transport-list.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = [// streaming transports
__webpack_require__(/*! ./transport/websocket */ "./node_modules/sockjs-client/lib/transport/websocket.js"), __webpack_require__(/*! ./transport/xhr-streaming */ "./node_modules/sockjs-client/lib/transport/xhr-streaming.js"), __webpack_require__(/*! ./transport/xdr-streaming */ "./node_modules/sockjs-client/lib/transport/xdr-streaming.js"), __webpack_require__(/*! ./transport/eventsource */ "./node_modules/sockjs-client/lib/transport/eventsource.js"), __webpack_require__(/*! ./transport/lib/iframe-wrap */ "./node_modules/sockjs-client/lib/transport/lib/iframe-wrap.js")(__webpack_require__(/*! ./transport/eventsource */ "./node_modules/sockjs-client/lib/transport/eventsource.js")) // polling transports
, __webpack_require__(/*! ./transport/htmlfile */ "./node_modules/sockjs-client/lib/transport/htmlfile.js"), __webpack_require__(/*! ./transport/lib/iframe-wrap */ "./node_modules/sockjs-client/lib/transport/lib/iframe-wrap.js")(__webpack_require__(/*! ./transport/htmlfile */ "./node_modules/sockjs-client/lib/transport/htmlfile.js")), __webpack_require__(/*! ./transport/xhr-polling */ "./node_modules/sockjs-client/lib/transport/xhr-polling.js"), __webpack_require__(/*! ./transport/xdr-polling */ "./node_modules/sockjs-client/lib/transport/xdr-polling.js"), __webpack_require__(/*! ./transport/lib/iframe-wrap */ "./node_modules/sockjs-client/lib/transport/lib/iframe-wrap.js")(__webpack_require__(/*! ./transport/xhr-polling */ "./node_modules/sockjs-client/lib/transport/xhr-polling.js")), __webpack_require__(/*! ./transport/jsonp-polling */ "./node_modules/sockjs-client/lib/transport/jsonp-polling.js")];

/***/ }),

/***/ "./node_modules/sockjs-client/lib/transport/browser/abstract-xhr.js":
/*!**************************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/transport/browser/abstract-xhr.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var EventEmitter = __webpack_require__(/*! events */ "./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter,
    inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    utils = __webpack_require__(/*! ../../utils/event */ "./node_modules/sockjs-client/lib/utils/event.js"),
    urlUtils = __webpack_require__(/*! ../../utils/url */ "./node_modules/sockjs-client/lib/utils/url.js"),
    XHR = global.XMLHttpRequest;

var debug = function () {};

if (true) {
  debug = __webpack_require__(/*! debug */ "./node_modules/sockjs-client/node_modules/debug/src/browser.js")('sockjs-client:browser:xhr');
}

function AbstractXHRObject(method, url, payload, opts) {
  debug(method, url);
  var self = this;
  EventEmitter.call(this);
  setTimeout(function () {
    self._start(method, url, payload, opts);
  }, 0);
}

inherits(AbstractXHRObject, EventEmitter);

AbstractXHRObject.prototype._start = function (method, url, payload, opts) {
  var self = this;

  try {
    this.xhr = new XHR();
  } catch (x) {// intentionally empty
  }

  if (!this.xhr) {
    debug('no xhr');
    this.emit('finish', 0, 'no xhr support');

    this._cleanup();

    return;
  } // several browsers cache POSTs


  url = urlUtils.addQuery(url, 't=' + +new Date()); // Explorer tends to keep connection open, even after the
  // tab gets closed: http://bugs.jquery.com/ticket/5280

  this.unloadRef = utils.unloadAdd(function () {
    debug('unload cleanup');

    self._cleanup(true);
  });

  try {
    this.xhr.open(method, url, true);

    if (this.timeout && 'timeout' in this.xhr) {
      this.xhr.timeout = this.timeout;

      this.xhr.ontimeout = function () {
        debug('xhr timeout');
        self.emit('finish', 0, '');

        self._cleanup(false);
      };
    }
  } catch (e) {
    debug('exception', e); // IE raises an exception on wrong port.

    this.emit('finish', 0, '');

    this._cleanup(false);

    return;
  }

  if ((!opts || !opts.noCredentials) && AbstractXHRObject.supportsCORS) {
    debug('withCredentials'); // Mozilla docs says https://developer.mozilla.org/en/XMLHttpRequest :
    // "This never affects same-site requests."

    this.xhr.withCredentials = true;
  }

  if (opts && opts.headers) {
    for (var key in opts.headers) {
      this.xhr.setRequestHeader(key, opts.headers[key]);
    }
  }

  this.xhr.onreadystatechange = function () {
    if (self.xhr) {
      var x = self.xhr;
      var text, status;
      debug('readyState', x.readyState);

      switch (x.readyState) {
        case 3:
          // IE doesn't like peeking into responseText or status
          // on Microsoft.XMLHTTP and readystate=3
          try {
            status = x.status;
            text = x.responseText;
          } catch (e) {// intentionally empty
          }

          debug('status', status); // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450

          if (status === 1223) {
            status = 204;
          } // IE does return readystate == 3 for 404 answers.


          if (status === 200 && text && text.length > 0) {
            debug('chunk');
            self.emit('chunk', status, text);
          }

          break;

        case 4:
          status = x.status;
          debug('status', status); // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450

          if (status === 1223) {
            status = 204;
          } // IE returns this for a bad port
          // http://msdn.microsoft.com/en-us/library/windows/desktop/aa383770(v=vs.85).aspx


          if (status === 12005 || status === 12029) {
            status = 0;
          }

          debug('finish', status, x.responseText);
          self.emit('finish', status, x.responseText);

          self._cleanup(false);

          break;
      }
    }
  };

  try {
    self.xhr.send(payload);
  } catch (e) {
    self.emit('finish', 0, '');

    self._cleanup(false);
  }
};

AbstractXHRObject.prototype._cleanup = function (abort) {
  debug('cleanup');

  if (!this.xhr) {
    return;
  }

  this.removeAllListeners();
  utils.unloadDel(this.unloadRef); // IE needs this field to be a function

  this.xhr.onreadystatechange = function () {};

  if (this.xhr.ontimeout) {
    this.xhr.ontimeout = null;
  }

  if (abort) {
    try {
      this.xhr.abort();
    } catch (x) {// intentionally empty
    }
  }

  this.unloadRef = this.xhr = null;
};

AbstractXHRObject.prototype.close = function () {
  debug('close');

  this._cleanup(true);
};

AbstractXHRObject.enabled = !!XHR; // override XMLHttpRequest for IE6/7
// obfuscate to avoid firewalls

var axo = ['Active'].concat('Object').join('X');

if (!AbstractXHRObject.enabled && axo in global) {
  debug('overriding xmlhttprequest');

  XHR = function () {
    try {
      return new global[axo]('Microsoft.XMLHTTP');
    } catch (e) {
      return null;
    }
  };

  AbstractXHRObject.enabled = !!new XHR();
}

var cors = false;

try {
  cors = 'withCredentials' in new XHR();
} catch (ignored) {// intentionally empty
}

AbstractXHRObject.supportsCORS = cors;
module.exports = AbstractXHRObject;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/sockjs-client/lib/transport/browser/eventsource.js":
/*!*************************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/transport/browser/eventsource.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {module.exports = global.EventSource;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/sockjs-client/lib/transport/browser/websocket.js":
/*!***********************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/transport/browser/websocket.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var Driver = global.WebSocket || global.MozWebSocket;

if (Driver) {
  module.exports = function WebSocketBrowserDriver(url) {
    return new Driver(url);
  };
} else {
  module.exports = undefined;
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/sockjs-client/lib/transport/eventsource.js":
/*!*****************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/transport/eventsource.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    AjaxBasedTransport = __webpack_require__(/*! ./lib/ajax-based */ "./node_modules/sockjs-client/lib/transport/lib/ajax-based.js"),
    EventSourceReceiver = __webpack_require__(/*! ./receiver/eventsource */ "./node_modules/sockjs-client/lib/transport/receiver/eventsource.js"),
    XHRCorsObject = __webpack_require__(/*! ./sender/xhr-cors */ "./node_modules/sockjs-client/lib/transport/sender/xhr-cors.js"),
    EventSourceDriver = __webpack_require__(/*! eventsource */ "./node_modules/sockjs-client/lib/transport/browser/eventsource.js");

function EventSourceTransport(transUrl) {
  if (!EventSourceTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }

  AjaxBasedTransport.call(this, transUrl, '/eventsource', EventSourceReceiver, XHRCorsObject);
}

inherits(EventSourceTransport, AjaxBasedTransport);

EventSourceTransport.enabled = function () {
  return !!EventSourceDriver;
};

EventSourceTransport.transportName = 'eventsource';
EventSourceTransport.roundTrips = 2;
module.exports = EventSourceTransport;

/***/ }),

/***/ "./node_modules/sockjs-client/lib/transport/htmlfile.js":
/*!**************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/transport/htmlfile.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    HtmlfileReceiver = __webpack_require__(/*! ./receiver/htmlfile */ "./node_modules/sockjs-client/lib/transport/receiver/htmlfile.js"),
    XHRLocalObject = __webpack_require__(/*! ./sender/xhr-local */ "./node_modules/sockjs-client/lib/transport/sender/xhr-local.js"),
    AjaxBasedTransport = __webpack_require__(/*! ./lib/ajax-based */ "./node_modules/sockjs-client/lib/transport/lib/ajax-based.js");

function HtmlFileTransport(transUrl) {
  if (!HtmlfileReceiver.enabled) {
    throw new Error('Transport created when disabled');
  }

  AjaxBasedTransport.call(this, transUrl, '/htmlfile', HtmlfileReceiver, XHRLocalObject);
}

inherits(HtmlFileTransport, AjaxBasedTransport);

HtmlFileTransport.enabled = function (info) {
  return HtmlfileReceiver.enabled && info.sameOrigin;
};

HtmlFileTransport.transportName = 'htmlfile';
HtmlFileTransport.roundTrips = 2;
module.exports = HtmlFileTransport;

/***/ }),

/***/ "./node_modules/sockjs-client/lib/transport/iframe.js":
/*!************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/transport/iframe.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // Few cool transports do work only for same-origin. In order to make
// them work cross-domain we shall use iframe, served from the
// remote domain. New browsers have capabilities to communicate with
// cross domain iframe using postMessage(). In IE it was implemented
// from IE 8+, but of course, IE got some details wrong:
//    http://msdn.microsoft.com/en-us/library/cc197015(v=VS.85).aspx
//    http://stevesouders.com/misc/test-postmessage.php

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    JSON3 = __webpack_require__(/*! json3 */ "./node_modules/json3/lib/json3.js"),
    EventEmitter = __webpack_require__(/*! events */ "./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter,
    version = __webpack_require__(/*! ../version */ "./node_modules/sockjs-client/lib/version.js"),
    urlUtils = __webpack_require__(/*! ../utils/url */ "./node_modules/sockjs-client/lib/utils/url.js"),
    iframeUtils = __webpack_require__(/*! ../utils/iframe */ "./node_modules/sockjs-client/lib/utils/iframe.js"),
    eventUtils = __webpack_require__(/*! ../utils/event */ "./node_modules/sockjs-client/lib/utils/event.js"),
    random = __webpack_require__(/*! ../utils/random */ "./node_modules/sockjs-client/lib/utils/random.js");

var debug = function () {};

if (true) {
  debug = __webpack_require__(/*! debug */ "./node_modules/sockjs-client/node_modules/debug/src/browser.js")('sockjs-client:transport:iframe');
}

function IframeTransport(transport, transUrl, baseUrl) {
  if (!IframeTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }

  EventEmitter.call(this);
  var self = this;
  this.origin = urlUtils.getOrigin(baseUrl);
  this.baseUrl = baseUrl;
  this.transUrl = transUrl;
  this.transport = transport;
  this.windowId = random.string(8);
  var iframeUrl = urlUtils.addPath(baseUrl, '/iframe.html') + '#' + this.windowId;
  debug(transport, transUrl, iframeUrl);
  this.iframeObj = iframeUtils.createIframe(iframeUrl, function (r) {
    debug('err callback');
    self.emit('close', 1006, 'Unable to load an iframe (' + r + ')');
    self.close();
  });
  this.onmessageCallback = this._message.bind(this);
  eventUtils.attachEvent('message', this.onmessageCallback);
}

inherits(IframeTransport, EventEmitter);

IframeTransport.prototype.close = function () {
  debug('close');
  this.removeAllListeners();

  if (this.iframeObj) {
    eventUtils.detachEvent('message', this.onmessageCallback);

    try {
      // When the iframe is not loaded, IE raises an exception
      // on 'contentWindow'.
      this.postMessage('c');
    } catch (x) {// intentionally empty
    }

    this.iframeObj.cleanup();
    this.iframeObj = null;
    this.onmessageCallback = this.iframeObj = null;
  }
};

IframeTransport.prototype._message = function (e) {
  debug('message', e.data);

  if (!urlUtils.isOriginEqual(e.origin, this.origin)) {
    debug('not same origin', e.origin, this.origin);
    return;
  }

  var iframeMessage;

  try {
    iframeMessage = JSON3.parse(e.data);
  } catch (ignored) {
    debug('bad json', e.data);
    return;
  }

  if (iframeMessage.windowId !== this.windowId) {
    debug('mismatched window id', iframeMessage.windowId, this.windowId);
    return;
  }

  switch (iframeMessage.type) {
    case 's':
      this.iframeObj.loaded(); // window global dependency

      this.postMessage('s', JSON3.stringify([version, this.transport, this.transUrl, this.baseUrl]));
      break;

    case 't':
      this.emit('message', iframeMessage.data);
      break;

    case 'c':
      var cdata;

      try {
        cdata = JSON3.parse(iframeMessage.data);
      } catch (ignored) {
        debug('bad json', iframeMessage.data);
        return;
      }

      this.emit('close', cdata[0], cdata[1]);
      this.close();
      break;
  }
};

IframeTransport.prototype.postMessage = function (type, data) {
  debug('postMessage', type, data);
  this.iframeObj.post(JSON3.stringify({
    windowId: this.windowId,
    type: type,
    data: data || ''
  }), this.origin);
};

IframeTransport.prototype.send = function (message) {
  debug('send', message);
  this.postMessage('m', message);
};

IframeTransport.enabled = function () {
  return iframeUtils.iframeEnabled;
};

IframeTransport.transportName = 'iframe';
IframeTransport.roundTrips = 2;
module.exports = IframeTransport;

/***/ }),

/***/ "./node_modules/sockjs-client/lib/transport/jsonp-polling.js":
/*!*******************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/transport/jsonp-polling.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) { // The simplest and most robust transport, using the well-know cross
// domain hack - JSONP. This transport is quite inefficient - one
// message could use up to one http request. But at least it works almost
// everywhere.
// Known limitations:
//   o you will get a spinning cursor
//   o for Konqueror a dumb timer is needed to detect errors

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    SenderReceiver = __webpack_require__(/*! ./lib/sender-receiver */ "./node_modules/sockjs-client/lib/transport/lib/sender-receiver.js"),
    JsonpReceiver = __webpack_require__(/*! ./receiver/jsonp */ "./node_modules/sockjs-client/lib/transport/receiver/jsonp.js"),
    jsonpSender = __webpack_require__(/*! ./sender/jsonp */ "./node_modules/sockjs-client/lib/transport/sender/jsonp.js");

function JsonPTransport(transUrl) {
  if (!JsonPTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }

  SenderReceiver.call(this, transUrl, '/jsonp', jsonpSender, JsonpReceiver);
}

inherits(JsonPTransport, SenderReceiver);

JsonPTransport.enabled = function () {
  return !!global.document;
};

JsonPTransport.transportName = 'jsonp-polling';
JsonPTransport.roundTrips = 1;
JsonPTransport.needBody = true;
module.exports = JsonPTransport;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/sockjs-client/lib/transport/lib/ajax-based.js":
/*!********************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/transport/lib/ajax-based.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    urlUtils = __webpack_require__(/*! ../../utils/url */ "./node_modules/sockjs-client/lib/utils/url.js"),
    SenderReceiver = __webpack_require__(/*! ./sender-receiver */ "./node_modules/sockjs-client/lib/transport/lib/sender-receiver.js");

var debug = function () {};

if (true) {
  debug = __webpack_require__(/*! debug */ "./node_modules/sockjs-client/node_modules/debug/src/browser.js")('sockjs-client:ajax-based');
}

function createAjaxSender(AjaxObject) {
  return function (url, payload, callback) {
    debug('create ajax sender', url, payload);
    var opt = {};

    if (typeof payload === 'string') {
      opt.headers = {
        'Content-type': 'text/plain'
      };
    }

    var ajaxUrl = urlUtils.addPath(url, '/xhr_send');
    var xo = new AjaxObject('POST', ajaxUrl, payload, opt);
    xo.once('finish', function (status) {
      debug('finish', status);
      xo = null;

      if (status !== 200 && status !== 204) {
        return callback(new Error('http status ' + status));
      }

      callback();
    });
    return function () {
      debug('abort');
      xo.close();
      xo = null;
      var err = new Error('Aborted');
      err.code = 1000;
      callback(err);
    };
  };
}

function AjaxBasedTransport(transUrl, urlSuffix, Receiver, AjaxObject) {
  SenderReceiver.call(this, transUrl, urlSuffix, createAjaxSender(AjaxObject), Receiver, AjaxObject);
}

inherits(AjaxBasedTransport, SenderReceiver);
module.exports = AjaxBasedTransport;

/***/ }),

/***/ "./node_modules/sockjs-client/lib/transport/lib/buffered-sender.js":
/*!*************************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/transport/lib/buffered-sender.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    EventEmitter = __webpack_require__(/*! events */ "./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter;

var debug = function () {};

if (true) {
  debug = __webpack_require__(/*! debug */ "./node_modules/sockjs-client/node_modules/debug/src/browser.js")('sockjs-client:buffered-sender');
}

function BufferedSender(url, sender) {
  debug(url);
  EventEmitter.call(this);
  this.sendBuffer = [];
  this.sender = sender;
  this.url = url;
}

inherits(BufferedSender, EventEmitter);

BufferedSender.prototype.send = function (message) {
  debug('send', message);
  this.sendBuffer.push(message);

  if (!this.sendStop) {
    this.sendSchedule();
  }
}; // For polling transports in a situation when in the message callback,
// new message is being send. If the sending connection was started
// before receiving one, it is possible to saturate the network and
// timeout due to the lack of receiving socket. To avoid that we delay
// sending messages by some small time, in order to let receiving
// connection be started beforehand. This is only a halfmeasure and
// does not fix the big problem, but it does make the tests go more
// stable on slow networks.


BufferedSender.prototype.sendScheduleWait = function () {
  debug('sendScheduleWait');
  var self = this;
  var tref;

  this.sendStop = function () {
    debug('sendStop');
    self.sendStop = null;
    clearTimeout(tref);
  };

  tref = setTimeout(function () {
    debug('timeout');
    self.sendStop = null;
    self.sendSchedule();
  }, 25);
};

BufferedSender.prototype.sendSchedule = function () {
  debug('sendSchedule', this.sendBuffer.length);
  var self = this;

  if (this.sendBuffer.length > 0) {
    var payload = '[' + this.sendBuffer.join(',') + ']';
    this.sendStop = this.sender(this.url, payload, function (err) {
      self.sendStop = null;

      if (err) {
        debug('error', err);
        self.emit('close', err.code || 1006, 'Sending error: ' + err);
        self.close();
      } else {
        self.sendScheduleWait();
      }
    });
    this.sendBuffer = [];
  }
};

BufferedSender.prototype._cleanup = function () {
  debug('_cleanup');
  this.removeAllListeners();
};

BufferedSender.prototype.close = function () {
  debug('close');

  this._cleanup();

  if (this.sendStop) {
    this.sendStop();
    this.sendStop = null;
  }
};

module.exports = BufferedSender;

/***/ }),

/***/ "./node_modules/sockjs-client/lib/transport/lib/iframe-wrap.js":
/*!*********************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/transport/lib/iframe-wrap.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    IframeTransport = __webpack_require__(/*! ../iframe */ "./node_modules/sockjs-client/lib/transport/iframe.js"),
    objectUtils = __webpack_require__(/*! ../../utils/object */ "./node_modules/sockjs-client/lib/utils/object.js");

module.exports = function (transport) {
  function IframeWrapTransport(transUrl, baseUrl) {
    IframeTransport.call(this, transport.transportName, transUrl, baseUrl);
  }

  inherits(IframeWrapTransport, IframeTransport);

  IframeWrapTransport.enabled = function (url, info) {
    if (!global.document) {
      return false;
    }

    var iframeInfo = objectUtils.extend({}, info);
    iframeInfo.sameOrigin = true;
    return transport.enabled(iframeInfo) && IframeTransport.enabled();
  };

  IframeWrapTransport.transportName = 'iframe-' + transport.transportName;
  IframeWrapTransport.needBody = true;
  IframeWrapTransport.roundTrips = IframeTransport.roundTrips + transport.roundTrips - 1; // html, javascript (2) + transport - no CORS (1)

  IframeWrapTransport.facadeTransport = transport;
  return IframeWrapTransport;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/sockjs-client/lib/transport/lib/polling.js":
/*!*****************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/transport/lib/polling.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    EventEmitter = __webpack_require__(/*! events */ "./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter;

var debug = function () {};

if (true) {
  debug = __webpack_require__(/*! debug */ "./node_modules/sockjs-client/node_modules/debug/src/browser.js")('sockjs-client:polling');
}

function Polling(Receiver, receiveUrl, AjaxObject) {
  debug(receiveUrl);
  EventEmitter.call(this);
  this.Receiver = Receiver;
  this.receiveUrl = receiveUrl;
  this.AjaxObject = AjaxObject;

  this._scheduleReceiver();
}

inherits(Polling, EventEmitter);

Polling.prototype._scheduleReceiver = function () {
  debug('_scheduleReceiver');
  var self = this;
  var poll = this.poll = new this.Receiver(this.receiveUrl, this.AjaxObject);
  poll.on('message', function (msg) {
    debug('message', msg);
    self.emit('message', msg);
  });
  poll.once('close', function (code, reason) {
    debug('close', code, reason, self.pollIsClosing);
    self.poll = poll = null;

    if (!self.pollIsClosing) {
      if (reason === 'network') {
        self._scheduleReceiver();
      } else {
        self.emit('close', code || 1006, reason);
        self.removeAllListeners();
      }
    }
  });
};

Polling.prototype.abort = function () {
  debug('abort');
  this.removeAllListeners();
  this.pollIsClosing = true;

  if (this.poll) {
    this.poll.abort();
  }
};

module.exports = Polling;

/***/ }),

/***/ "./node_modules/sockjs-client/lib/transport/lib/sender-receiver.js":
/*!*************************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/transport/lib/sender-receiver.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    urlUtils = __webpack_require__(/*! ../../utils/url */ "./node_modules/sockjs-client/lib/utils/url.js"),
    BufferedSender = __webpack_require__(/*! ./buffered-sender */ "./node_modules/sockjs-client/lib/transport/lib/buffered-sender.js"),
    Polling = __webpack_require__(/*! ./polling */ "./node_modules/sockjs-client/lib/transport/lib/polling.js");

var debug = function () {};

if (true) {
  debug = __webpack_require__(/*! debug */ "./node_modules/sockjs-client/node_modules/debug/src/browser.js")('sockjs-client:sender-receiver');
}

function SenderReceiver(transUrl, urlSuffix, senderFunc, Receiver, AjaxObject) {
  var pollUrl = urlUtils.addPath(transUrl, urlSuffix);
  debug(pollUrl);
  var self = this;
  BufferedSender.call(this, transUrl, senderFunc);
  this.poll = new Polling(Receiver, pollUrl, AjaxObject);
  this.poll.on('message', function (msg) {
    debug('poll message', msg);
    self.emit('message', msg);
  });
  this.poll.once('close', function (code, reason) {
    debug('poll close', code, reason);
    self.poll = null;
    self.emit('close', code, reason);
    self.close();
  });
}

inherits(SenderReceiver, BufferedSender);

SenderReceiver.prototype.close = function () {
  BufferedSender.prototype.close.call(this);
  debug('close');
  this.removeAllListeners();

  if (this.poll) {
    this.poll.abort();
    this.poll = null;
  }
};

module.exports = SenderReceiver;

/***/ }),

/***/ "./node_modules/sockjs-client/lib/transport/receiver/eventsource.js":
/*!**************************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/transport/receiver/eventsource.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    EventEmitter = __webpack_require__(/*! events */ "./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter,
    EventSourceDriver = __webpack_require__(/*! eventsource */ "./node_modules/sockjs-client/lib/transport/browser/eventsource.js");

var debug = function () {};

if (true) {
  debug = __webpack_require__(/*! debug */ "./node_modules/sockjs-client/node_modules/debug/src/browser.js")('sockjs-client:receiver:eventsource');
}

function EventSourceReceiver(url) {
  debug(url);
  EventEmitter.call(this);
  var self = this;
  var es = this.es = new EventSourceDriver(url);

  es.onmessage = function (e) {
    debug('message', e.data);
    self.emit('message', decodeURI(e.data));
  };

  es.onerror = function (e) {
    debug('error', es.readyState, e); // ES on reconnection has readyState = 0 or 1.
    // on network error it's CLOSED = 2

    var reason = es.readyState !== 2 ? 'network' : 'permanent';

    self._cleanup();

    self._close(reason);
  };
}

inherits(EventSourceReceiver, EventEmitter);

EventSourceReceiver.prototype.abort = function () {
  debug('abort');

  this._cleanup();

  this._close('user');
};

EventSourceReceiver.prototype._cleanup = function () {
  debug('cleanup');
  var es = this.es;

  if (es) {
    es.onmessage = es.onerror = null;
    es.close();
    this.es = null;
  }
};

EventSourceReceiver.prototype._close = function (reason) {
  debug('close', reason);
  var self = this; // Safari and chrome < 15 crash if we close window before
  // waiting for ES cleanup. See:
  // https://code.google.com/p/chromium/issues/detail?id=89155

  setTimeout(function () {
    self.emit('close', null, reason);
    self.removeAllListeners();
  }, 200);
};

module.exports = EventSourceReceiver;

/***/ }),

/***/ "./node_modules/sockjs-client/lib/transport/receiver/htmlfile.js":
/*!***********************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/transport/receiver/htmlfile.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    iframeUtils = __webpack_require__(/*! ../../utils/iframe */ "./node_modules/sockjs-client/lib/utils/iframe.js"),
    urlUtils = __webpack_require__(/*! ../../utils/url */ "./node_modules/sockjs-client/lib/utils/url.js"),
    EventEmitter = __webpack_require__(/*! events */ "./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter,
    random = __webpack_require__(/*! ../../utils/random */ "./node_modules/sockjs-client/lib/utils/random.js");

var debug = function () {};

if (true) {
  debug = __webpack_require__(/*! debug */ "./node_modules/sockjs-client/node_modules/debug/src/browser.js")('sockjs-client:receiver:htmlfile');
}

function HtmlfileReceiver(url) {
  debug(url);
  EventEmitter.call(this);
  var self = this;
  iframeUtils.polluteGlobalNamespace();
  this.id = 'a' + random.string(6);
  url = urlUtils.addQuery(url, 'c=' + decodeURIComponent(iframeUtils.WPrefix + '.' + this.id));
  debug('using htmlfile', HtmlfileReceiver.htmlfileEnabled);
  var constructFunc = HtmlfileReceiver.htmlfileEnabled ? iframeUtils.createHtmlfile : iframeUtils.createIframe;
  global[iframeUtils.WPrefix][this.id] = {
    start: function () {
      debug('start');
      self.iframeObj.loaded();
    },
    message: function (data) {
      debug('message', data);
      self.emit('message', data);
    },
    stop: function () {
      debug('stop');

      self._cleanup();

      self._close('network');
    }
  };
  this.iframeObj = constructFunc(url, function () {
    debug('callback');

    self._cleanup();

    self._close('permanent');
  });
}

inherits(HtmlfileReceiver, EventEmitter);

HtmlfileReceiver.prototype.abort = function () {
  debug('abort');

  this._cleanup();

  this._close('user');
};

HtmlfileReceiver.prototype._cleanup = function () {
  debug('_cleanup');

  if (this.iframeObj) {
    this.iframeObj.cleanup();
    this.iframeObj = null;
  }

  delete global[iframeUtils.WPrefix][this.id];
};

HtmlfileReceiver.prototype._close = function (reason) {
  debug('_close', reason);
  this.emit('close', null, reason);
  this.removeAllListeners();
};

HtmlfileReceiver.htmlfileEnabled = false; // obfuscate to avoid firewalls

var axo = ['Active'].concat('Object').join('X');

if (axo in global) {
  try {
    HtmlfileReceiver.htmlfileEnabled = !!new global[axo]('htmlfile');
  } catch (x) {// intentionally empty
  }
}

HtmlfileReceiver.enabled = HtmlfileReceiver.htmlfileEnabled || iframeUtils.iframeEnabled;
module.exports = HtmlfileReceiver;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/sockjs-client/lib/transport/receiver/jsonp.js":
/*!********************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/transport/receiver/jsonp.js ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var utils = __webpack_require__(/*! ../../utils/iframe */ "./node_modules/sockjs-client/lib/utils/iframe.js"),
    random = __webpack_require__(/*! ../../utils/random */ "./node_modules/sockjs-client/lib/utils/random.js"),
    browser = __webpack_require__(/*! ../../utils/browser */ "./node_modules/sockjs-client/lib/utils/browser.js"),
    urlUtils = __webpack_require__(/*! ../../utils/url */ "./node_modules/sockjs-client/lib/utils/url.js"),
    inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    EventEmitter = __webpack_require__(/*! events */ "./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter;

var debug = function () {};

if (true) {
  debug = __webpack_require__(/*! debug */ "./node_modules/sockjs-client/node_modules/debug/src/browser.js")('sockjs-client:receiver:jsonp');
}

function JsonpReceiver(url) {
  debug(url);
  var self = this;
  EventEmitter.call(this);
  utils.polluteGlobalNamespace();
  this.id = 'a' + random.string(6);
  var urlWithId = urlUtils.addQuery(url, 'c=' + encodeURIComponent(utils.WPrefix + '.' + this.id));
  global[utils.WPrefix][this.id] = this._callback.bind(this);

  this._createScript(urlWithId); // Fallback mostly for Konqueror - stupid timer, 35 seconds shall be plenty.


  this.timeoutId = setTimeout(function () {
    debug('timeout');

    self._abort(new Error('JSONP script loaded abnormally (timeout)'));
  }, JsonpReceiver.timeout);
}

inherits(JsonpReceiver, EventEmitter);

JsonpReceiver.prototype.abort = function () {
  debug('abort');

  if (global[utils.WPrefix][this.id]) {
    var err = new Error('JSONP user aborted read');
    err.code = 1000;

    this._abort(err);
  }
};

JsonpReceiver.timeout = 35000;
JsonpReceiver.scriptErrorTimeout = 1000;

JsonpReceiver.prototype._callback = function (data) {
  debug('_callback', data);

  this._cleanup();

  if (this.aborting) {
    return;
  }

  if (data) {
    debug('message', data);
    this.emit('message', data);
  }

  this.emit('close', null, 'network');
  this.removeAllListeners();
};

JsonpReceiver.prototype._abort = function (err) {
  debug('_abort', err);

  this._cleanup();

  this.aborting = true;
  this.emit('close', err.code, err.message);
  this.removeAllListeners();
};

JsonpReceiver.prototype._cleanup = function () {
  debug('_cleanup');
  clearTimeout(this.timeoutId);

  if (this.script2) {
    this.script2.parentNode.removeChild(this.script2);
    this.script2 = null;
  }

  if (this.script) {
    var script = this.script; // Unfortunately, you can't really abort script loading of
    // the script.

    script.parentNode.removeChild(script);
    script.onreadystatechange = script.onerror = script.onload = script.onclick = null;
    this.script = null;
  }

  delete global[utils.WPrefix][this.id];
};

JsonpReceiver.prototype._scriptError = function () {
  debug('_scriptError');
  var self = this;

  if (this.errorTimer) {
    return;
  }

  this.errorTimer = setTimeout(function () {
    if (!self.loadedOkay) {
      self._abort(new Error('JSONP script loaded abnormally (onerror)'));
    }
  }, JsonpReceiver.scriptErrorTimeout);
};

JsonpReceiver.prototype._createScript = function (url) {
  debug('_createScript', url);
  var self = this;
  var script = this.script = global.document.createElement('script');
  var script2; // Opera synchronous load trick.

  script.id = 'a' + random.string(8);
  script.src = url;
  script.type = 'text/javascript';
  script.charset = 'UTF-8';
  script.onerror = this._scriptError.bind(this);

  script.onload = function () {
    debug('onload');

    self._abort(new Error('JSONP script loaded abnormally (onload)'));
  }; // IE9 fires 'error' event after onreadystatechange or before, in random order.
  // Use loadedOkay to determine if actually errored


  script.onreadystatechange = function () {
    debug('onreadystatechange', script.readyState);

    if (/loaded|closed/.test(script.readyState)) {
      if (script && script.htmlFor && script.onclick) {
        self.loadedOkay = true;

        try {
          // In IE, actually execute the script.
          script.onclick();
        } catch (x) {// intentionally empty
        }
      }

      if (script) {
        self._abort(new Error('JSONP script loaded abnormally (onreadystatechange)'));
      }
    }
  }; // IE: event/htmlFor/onclick trick.
  // One can't rely on proper order for onreadystatechange. In order to
  // make sure, set a 'htmlFor' and 'event' properties, so that
  // script code will be installed as 'onclick' handler for the
  // script object. Later, onreadystatechange, manually execute this
  // code. FF and Chrome doesn't work with 'event' and 'htmlFor'
  // set. For reference see:
  //   http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html
  // Also, read on that about script ordering:
  //   http://wiki.whatwg.org/wiki/Dynamic_Script_Execution_Order


  if (typeof script.async === 'undefined' && global.document.attachEvent) {
    // According to mozilla docs, in recent browsers script.async defaults
    // to 'true', so we may use it to detect a good browser:
    // https://developer.mozilla.org/en/HTML/Element/script
    if (!browser.isOpera()) {
      // Naively assume we're in IE
      try {
        script.htmlFor = script.id;
        script.event = 'onclick';
      } catch (x) {// intentionally empty
      }

      script.async = true;
    } else {
      // Opera, second sync script hack
      script2 = this.script2 = global.document.createElement('script');
      script2.text = "try{var a = document.getElementById('" + script.id + "'); if(a)a.onerror();}catch(x){};";
      script.async = script2.async = false;
    }
  }

  if (typeof script.async !== 'undefined') {
    script.async = true;
  }

  var head = global.document.getElementsByTagName('head')[0];
  head.insertBefore(script, head.firstChild);

  if (script2) {
    head.insertBefore(script2, head.firstChild);
  }
};

module.exports = JsonpReceiver;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/sockjs-client/lib/transport/receiver/xhr.js":
/*!******************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/transport/receiver/xhr.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    EventEmitter = __webpack_require__(/*! events */ "./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter;

var debug = function () {};

if (true) {
  debug = __webpack_require__(/*! debug */ "./node_modules/sockjs-client/node_modules/debug/src/browser.js")('sockjs-client:receiver:xhr');
}

function XhrReceiver(url, AjaxObject) {
  debug(url);
  EventEmitter.call(this);
  var self = this;
  this.bufferPosition = 0;
  this.xo = new AjaxObject('POST', url, null);
  this.xo.on('chunk', this._chunkHandler.bind(this));
  this.xo.once('finish', function (status, text) {
    debug('finish', status, text);

    self._chunkHandler(status, text);

    self.xo = null;
    var reason = status === 200 ? 'network' : 'permanent';
    debug('close', reason);
    self.emit('close', null, reason);

    self._cleanup();
  });
}

inherits(XhrReceiver, EventEmitter);

XhrReceiver.prototype._chunkHandler = function (status, text) {
  debug('_chunkHandler', status);

  if (status !== 200 || !text) {
    return;
  }

  for (var idx = -1;; this.bufferPosition += idx + 1) {
    var buf = text.slice(this.bufferPosition);
    idx = buf.indexOf('\n');

    if (idx === -1) {
      break;
    }

    var msg = buf.slice(0, idx);

    if (msg) {
      debug('message', msg);
      this.emit('message', msg);
    }
  }
};

XhrReceiver.prototype._cleanup = function () {
  debug('_cleanup');
  this.removeAllListeners();
};

XhrReceiver.prototype.abort = function () {
  debug('abort');

  if (this.xo) {
    this.xo.close();
    debug('close');
    this.emit('close', null, 'user');
    this.xo = null;
  }

  this._cleanup();
};

module.exports = XhrReceiver;

/***/ }),

/***/ "./node_modules/sockjs-client/lib/transport/sender/jsonp.js":
/*!******************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/transport/sender/jsonp.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var random = __webpack_require__(/*! ../../utils/random */ "./node_modules/sockjs-client/lib/utils/random.js"),
    urlUtils = __webpack_require__(/*! ../../utils/url */ "./node_modules/sockjs-client/lib/utils/url.js");

var debug = function () {};

if (true) {
  debug = __webpack_require__(/*! debug */ "./node_modules/sockjs-client/node_modules/debug/src/browser.js")('sockjs-client:sender:jsonp');
}

var form, area;

function createIframe(id) {
  debug('createIframe', id);

  try {
    // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
    return global.document.createElement('<iframe name="' + id + '">');
  } catch (x) {
    var iframe = global.document.createElement('iframe');
    iframe.name = id;
    return iframe;
  }
}

function createForm() {
  debug('createForm');
  form = global.document.createElement('form');
  form.style.display = 'none';
  form.style.position = 'absolute';
  form.method = 'POST';
  form.enctype = 'application/x-www-form-urlencoded';
  form.acceptCharset = 'UTF-8';
  area = global.document.createElement('textarea');
  area.name = 'd';
  form.appendChild(area);
  global.document.body.appendChild(form);
}

module.exports = function (url, payload, callback) {
  debug(url, payload);

  if (!form) {
    createForm();
  }

  var id = 'a' + random.string(8);
  form.target = id;
  form.action = urlUtils.addQuery(urlUtils.addPath(url, '/jsonp_send'), 'i=' + id);
  var iframe = createIframe(id);
  iframe.id = id;
  iframe.style.display = 'none';
  form.appendChild(iframe);

  try {
    area.value = payload;
  } catch (e) {// seriously broken browsers get here
  }

  form.submit();

  var completed = function (err) {
    debug('completed', id, err);

    if (!iframe.onerror) {
      return;
    }

    iframe.onreadystatechange = iframe.onerror = iframe.onload = null; // Opera mini doesn't like if we GC iframe
    // immediately, thus this timeout.

    setTimeout(function () {
      debug('cleaning up', id);
      iframe.parentNode.removeChild(iframe);
      iframe = null;
    }, 500);
    area.value = ''; // It is not possible to detect if the iframe succeeded or
    // failed to submit our form.

    callback(err);
  };

  iframe.onerror = function () {
    debug('onerror', id);
    completed();
  };

  iframe.onload = function () {
    debug('onload', id);
    completed();
  };

  iframe.onreadystatechange = function (e) {
    debug('onreadystatechange', id, iframe.readyState, e);

    if (iframe.readyState === 'complete') {
      completed();
    }
  };

  return function () {
    debug('aborted', id);
    completed(new Error('Aborted'));
  };
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/sockjs-client/lib/transport/sender/xdr.js":
/*!****************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/transport/sender/xdr.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var EventEmitter = __webpack_require__(/*! events */ "./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter,
    inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    eventUtils = __webpack_require__(/*! ../../utils/event */ "./node_modules/sockjs-client/lib/utils/event.js"),
    browser = __webpack_require__(/*! ../../utils/browser */ "./node_modules/sockjs-client/lib/utils/browser.js"),
    urlUtils = __webpack_require__(/*! ../../utils/url */ "./node_modules/sockjs-client/lib/utils/url.js");

var debug = function () {};

if (true) {
  debug = __webpack_require__(/*! debug */ "./node_modules/sockjs-client/node_modules/debug/src/browser.js")('sockjs-client:sender:xdr');
} // References:
//   http://ajaxian.com/archives/100-line-ajax-wrapper
//   http://msdn.microsoft.com/en-us/library/cc288060(v=VS.85).aspx


function XDRObject(method, url, payload) {
  debug(method, url);
  var self = this;
  EventEmitter.call(this);
  setTimeout(function () {
    self._start(method, url, payload);
  }, 0);
}

inherits(XDRObject, EventEmitter);

XDRObject.prototype._start = function (method, url, payload) {
  debug('_start');
  var self = this;
  var xdr = new global.XDomainRequest(); // IE caches even POSTs

  url = urlUtils.addQuery(url, 't=' + +new Date());

  xdr.onerror = function () {
    debug('onerror');

    self._error();
  };

  xdr.ontimeout = function () {
    debug('ontimeout');

    self._error();
  };

  xdr.onprogress = function () {
    debug('progress', xdr.responseText);
    self.emit('chunk', 200, xdr.responseText);
  };

  xdr.onload = function () {
    debug('load');
    self.emit('finish', 200, xdr.responseText);

    self._cleanup(false);
  };

  this.xdr = xdr;
  this.unloadRef = eventUtils.unloadAdd(function () {
    self._cleanup(true);
  });

  try {
    // Fails with AccessDenied if port number is bogus
    this.xdr.open(method, url);

    if (this.timeout) {
      this.xdr.timeout = this.timeout;
    }

    this.xdr.send(payload);
  } catch (x) {
    this._error();
  }
};

XDRObject.prototype._error = function () {
  this.emit('finish', 0, '');

  this._cleanup(false);
};

XDRObject.prototype._cleanup = function (abort) {
  debug('cleanup', abort);

  if (!this.xdr) {
    return;
  }

  this.removeAllListeners();
  eventUtils.unloadDel(this.unloadRef);
  this.xdr.ontimeout = this.xdr.onerror = this.xdr.onprogress = this.xdr.onload = null;

  if (abort) {
    try {
      this.xdr.abort();
    } catch (x) {// intentionally empty
    }
  }

  this.unloadRef = this.xdr = null;
};

XDRObject.prototype.close = function () {
  debug('close');

  this._cleanup(true);
}; // IE 8/9 if the request target uses the same scheme - #79


XDRObject.enabled = !!(global.XDomainRequest && browser.hasDomain());
module.exports = XDRObject;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/sockjs-client/lib/transport/sender/xhr-cors.js":
/*!*********************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/transport/sender/xhr-cors.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    XhrDriver = __webpack_require__(/*! ../driver/xhr */ "./node_modules/sockjs-client/lib/transport/browser/abstract-xhr.js");

function XHRCorsObject(method, url, payload, opts) {
  XhrDriver.call(this, method, url, payload, opts);
}

inherits(XHRCorsObject, XhrDriver);
XHRCorsObject.enabled = XhrDriver.enabled && XhrDriver.supportsCORS;
module.exports = XHRCorsObject;

/***/ }),

/***/ "./node_modules/sockjs-client/lib/transport/sender/xhr-fake.js":
/*!*********************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/transport/sender/xhr-fake.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var EventEmitter = __webpack_require__(/*! events */ "./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter,
    inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

function XHRFake()
/* method, url, payload, opts */
{
  var self = this;
  EventEmitter.call(this);
  this.to = setTimeout(function () {
    self.emit('finish', 200, '{}');
  }, XHRFake.timeout);
}

inherits(XHRFake, EventEmitter);

XHRFake.prototype.close = function () {
  clearTimeout(this.to);
};

XHRFake.timeout = 2000;
module.exports = XHRFake;

/***/ }),

/***/ "./node_modules/sockjs-client/lib/transport/sender/xhr-local.js":
/*!**********************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/transport/sender/xhr-local.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    XhrDriver = __webpack_require__(/*! ../driver/xhr */ "./node_modules/sockjs-client/lib/transport/browser/abstract-xhr.js");

function XHRLocalObject(method, url, payload
/*, opts */
) {
  XhrDriver.call(this, method, url, payload, {
    noCredentials: true
  });
}

inherits(XHRLocalObject, XhrDriver);
XHRLocalObject.enabled = XhrDriver.enabled;
module.exports = XHRLocalObject;

/***/ }),

/***/ "./node_modules/sockjs-client/lib/transport/websocket.js":
/*!***************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/transport/websocket.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var utils = __webpack_require__(/*! ../utils/event */ "./node_modules/sockjs-client/lib/utils/event.js"),
    urlUtils = __webpack_require__(/*! ../utils/url */ "./node_modules/sockjs-client/lib/utils/url.js"),
    inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    EventEmitter = __webpack_require__(/*! events */ "./node_modules/sockjs-client/lib/event/emitter.js").EventEmitter,
    WebsocketDriver = __webpack_require__(/*! ./driver/websocket */ "./node_modules/sockjs-client/lib/transport/browser/websocket.js");

var debug = function () {};

if (true) {
  debug = __webpack_require__(/*! debug */ "./node_modules/sockjs-client/node_modules/debug/src/browser.js")('sockjs-client:websocket');
}

function WebSocketTransport(transUrl, ignore, options) {
  if (!WebSocketTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }

  EventEmitter.call(this);
  debug('constructor', transUrl);
  var self = this;
  var url = urlUtils.addPath(transUrl, '/websocket');

  if (url.slice(0, 5) === 'https') {
    url = 'wss' + url.slice(5);
  } else {
    url = 'ws' + url.slice(4);
  }

  this.url = url;
  this.ws = new WebsocketDriver(this.url, [], options);

  this.ws.onmessage = function (e) {
    debug('message event', e.data);
    self.emit('message', e.data);
  }; // Firefox has an interesting bug. If a websocket connection is
  // created after onunload, it stays alive even when user
  // navigates away from the page. In such situation let's lie -
  // let's not open the ws connection at all. See:
  // https://github.com/sockjs/sockjs-client/issues/28
  // https://bugzilla.mozilla.org/show_bug.cgi?id=696085


  this.unloadRef = utils.unloadAdd(function () {
    debug('unload');
    self.ws.close();
  });

  this.ws.onclose = function (e) {
    debug('close event', e.code, e.reason);
    self.emit('close', e.code, e.reason);

    self._cleanup();
  };

  this.ws.onerror = function (e) {
    debug('error event', e);
    self.emit('close', 1006, 'WebSocket connection broken');

    self._cleanup();
  };
}

inherits(WebSocketTransport, EventEmitter);

WebSocketTransport.prototype.send = function (data) {
  var msg = '[' + data + ']';
  debug('send', msg);
  this.ws.send(msg);
};

WebSocketTransport.prototype.close = function () {
  debug('close');
  var ws = this.ws;

  this._cleanup();

  if (ws) {
    ws.close();
  }
};

WebSocketTransport.prototype._cleanup = function () {
  debug('_cleanup');
  var ws = this.ws;

  if (ws) {
    ws.onmessage = ws.onclose = ws.onerror = null;
  }

  utils.unloadDel(this.unloadRef);
  this.unloadRef = this.ws = null;
  this.removeAllListeners();
};

WebSocketTransport.enabled = function () {
  debug('enabled');
  return !!WebsocketDriver;
};

WebSocketTransport.transportName = 'websocket'; // In theory, ws should require 1 round trip. But in chrome, this is
// not very stable over SSL. Most likely a ws connection requires a
// separate SSL connection, in which case 2 round trips are an
// absolute minumum.

WebSocketTransport.roundTrips = 2;
module.exports = WebSocketTransport;

/***/ }),

/***/ "./node_modules/sockjs-client/lib/transport/xdr-polling.js":
/*!*****************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/transport/xdr-polling.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    AjaxBasedTransport = __webpack_require__(/*! ./lib/ajax-based */ "./node_modules/sockjs-client/lib/transport/lib/ajax-based.js"),
    XdrStreamingTransport = __webpack_require__(/*! ./xdr-streaming */ "./node_modules/sockjs-client/lib/transport/xdr-streaming.js"),
    XhrReceiver = __webpack_require__(/*! ./receiver/xhr */ "./node_modules/sockjs-client/lib/transport/receiver/xhr.js"),
    XDRObject = __webpack_require__(/*! ./sender/xdr */ "./node_modules/sockjs-client/lib/transport/sender/xdr.js");

function XdrPollingTransport(transUrl) {
  if (!XDRObject.enabled) {
    throw new Error('Transport created when disabled');
  }

  AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XDRObject);
}

inherits(XdrPollingTransport, AjaxBasedTransport);
XdrPollingTransport.enabled = XdrStreamingTransport.enabled;
XdrPollingTransport.transportName = 'xdr-polling';
XdrPollingTransport.roundTrips = 2; // preflight, ajax

module.exports = XdrPollingTransport;

/***/ }),

/***/ "./node_modules/sockjs-client/lib/transport/xdr-streaming.js":
/*!*******************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/transport/xdr-streaming.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    AjaxBasedTransport = __webpack_require__(/*! ./lib/ajax-based */ "./node_modules/sockjs-client/lib/transport/lib/ajax-based.js"),
    XhrReceiver = __webpack_require__(/*! ./receiver/xhr */ "./node_modules/sockjs-client/lib/transport/receiver/xhr.js"),
    XDRObject = __webpack_require__(/*! ./sender/xdr */ "./node_modules/sockjs-client/lib/transport/sender/xdr.js"); // According to:
//   http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests
//   http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/


function XdrStreamingTransport(transUrl) {
  if (!XDRObject.enabled) {
    throw new Error('Transport created when disabled');
  }

  AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XDRObject);
}

inherits(XdrStreamingTransport, AjaxBasedTransport);

XdrStreamingTransport.enabled = function (info) {
  if (info.cookie_needed || info.nullOrigin) {
    return false;
  }

  return XDRObject.enabled && info.sameScheme;
};

XdrStreamingTransport.transportName = 'xdr-streaming';
XdrStreamingTransport.roundTrips = 2; // preflight, ajax

module.exports = XdrStreamingTransport;

/***/ }),

/***/ "./node_modules/sockjs-client/lib/transport/xhr-polling.js":
/*!*****************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/transport/xhr-polling.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    AjaxBasedTransport = __webpack_require__(/*! ./lib/ajax-based */ "./node_modules/sockjs-client/lib/transport/lib/ajax-based.js"),
    XhrReceiver = __webpack_require__(/*! ./receiver/xhr */ "./node_modules/sockjs-client/lib/transport/receiver/xhr.js"),
    XHRCorsObject = __webpack_require__(/*! ./sender/xhr-cors */ "./node_modules/sockjs-client/lib/transport/sender/xhr-cors.js"),
    XHRLocalObject = __webpack_require__(/*! ./sender/xhr-local */ "./node_modules/sockjs-client/lib/transport/sender/xhr-local.js");

function XhrPollingTransport(transUrl) {
  if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {
    throw new Error('Transport created when disabled');
  }

  AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XHRCorsObject);
}

inherits(XhrPollingTransport, AjaxBasedTransport);

XhrPollingTransport.enabled = function (info) {
  if (info.nullOrigin) {
    return false;
  }

  if (XHRLocalObject.enabled && info.sameOrigin) {
    return true;
  }

  return XHRCorsObject.enabled;
};

XhrPollingTransport.transportName = 'xhr-polling';
XhrPollingTransport.roundTrips = 2; // preflight, ajax

module.exports = XhrPollingTransport;

/***/ }),

/***/ "./node_modules/sockjs-client/lib/transport/xhr-streaming.js":
/*!*******************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/transport/xhr-streaming.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js"),
    AjaxBasedTransport = __webpack_require__(/*! ./lib/ajax-based */ "./node_modules/sockjs-client/lib/transport/lib/ajax-based.js"),
    XhrReceiver = __webpack_require__(/*! ./receiver/xhr */ "./node_modules/sockjs-client/lib/transport/receiver/xhr.js"),
    XHRCorsObject = __webpack_require__(/*! ./sender/xhr-cors */ "./node_modules/sockjs-client/lib/transport/sender/xhr-cors.js"),
    XHRLocalObject = __webpack_require__(/*! ./sender/xhr-local */ "./node_modules/sockjs-client/lib/transport/sender/xhr-local.js"),
    browser = __webpack_require__(/*! ../utils/browser */ "./node_modules/sockjs-client/lib/utils/browser.js");

function XhrStreamingTransport(transUrl) {
  if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {
    throw new Error('Transport created when disabled');
  }

  AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XHRCorsObject);
}

inherits(XhrStreamingTransport, AjaxBasedTransport);

XhrStreamingTransport.enabled = function (info) {
  if (info.nullOrigin) {
    return false;
  } // Opera doesn't support xhr-streaming #60
  // But it might be able to #92


  if (browser.isOpera()) {
    return false;
  }

  return XHRCorsObject.enabled;
};

XhrStreamingTransport.transportName = 'xhr-streaming';
XhrStreamingTransport.roundTrips = 2; // preflight, ajax
// Safari gets confused when a streaming ajax request is started
// before onload. This causes the load indicator to spin indefinetely.
// Only require body when used in a browser

XhrStreamingTransport.needBody = !!global.document;
module.exports = XhrStreamingTransport;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/sockjs-client/lib/utils/browser-crypto.js":
/*!****************************************************************!*\
  !*** ./node_modules/sockjs-client/lib/utils/browser-crypto.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

if (global.crypto && global.crypto.getRandomValues) {
  module.exports.randomBytes = function (length) {
    var bytes = new Uint8Array(length);
    global.crypto.getRandomValues(bytes);
    return bytes;
  };
} else {
  module.exports.randomBytes = function (length) {
    var bytes = new Array(length);

    for (var i = 0; i < length; i++) {
      bytes[i] = Math.floor(Math.random() * 256);
    }

    return bytes;
  };
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/sockjs-client/lib/utils/browser.js":
/*!*********************************************************!*\
  !*** ./node_modules/sockjs-client/lib/utils/browser.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

module.exports = {
  isOpera: function () {
    return global.navigator && /opera/i.test(global.navigator.userAgent);
  },
  isKonqueror: function () {
    return global.navigator && /konqueror/i.test(global.navigator.userAgent);
  } // #187 wrap document.domain in try/catch because of WP8 from file:///
  ,
  hasDomain: function () {
    // non-browser client always has a domain
    if (!global.document) {
      return true;
    }

    try {
      return !!global.document.domain;
    } catch (e) {
      return false;
    }
  }
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/sockjs-client/lib/utils/escape.js":
/*!********************************************************!*\
  !*** ./node_modules/sockjs-client/lib/utils/escape.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var JSON3 = __webpack_require__(/*! json3 */ "./node_modules/json3/lib/json3.js"); // Some extra characters that Chrome gets wrong, and substitutes with
// something else on the wire.
// eslint-disable-next-line no-control-regex


var extraEscapable = /[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g,
    extraLookup; // This may be quite slow, so let's delay until user actually uses bad
// characters.

var unrollLookup = function (escapable) {
  var i;
  var unrolled = {};
  var c = [];

  for (i = 0; i < 65536; i++) {
    c.push(String.fromCharCode(i));
  }

  escapable.lastIndex = 0;
  c.join('').replace(escapable, function (a) {
    unrolled[a] = '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
    return '';
  });
  escapable.lastIndex = 0;
  return unrolled;
}; // Quote string, also taking care of unicode characters that browsers
// often break. Especially, take care of unicode surrogates:
// http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates


module.exports = {
  quote: function (string) {
    var quoted = JSON3.stringify(string); // In most cases this should be very fast and good enough.

    extraEscapable.lastIndex = 0;

    if (!extraEscapable.test(quoted)) {
      return quoted;
    }

    if (!extraLookup) {
      extraLookup = unrollLookup(extraEscapable);
    }

    return quoted.replace(extraEscapable, function (a) {
      return extraLookup[a];
    });
  }
};

/***/ }),

/***/ "./node_modules/sockjs-client/lib/utils/event.js":
/*!*******************************************************!*\
  !*** ./node_modules/sockjs-client/lib/utils/event.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var random = __webpack_require__(/*! ./random */ "./node_modules/sockjs-client/lib/utils/random.js");

var onUnload = {},
    afterUnload = false // detect google chrome packaged apps because they don't allow the 'unload' event
,
    isChromePackagedApp = global.chrome && global.chrome.app && global.chrome.app.runtime;
module.exports = {
  attachEvent: function (event, listener) {
    if (typeof global.addEventListener !== 'undefined') {
      global.addEventListener(event, listener, false);
    } else if (global.document && global.attachEvent) {
      // IE quirks.
      // According to: http://stevesouders.com/misc/test-postmessage.php
      // the message gets delivered only to 'document', not 'window'.
      global.document.attachEvent('on' + event, listener); // I get 'window' for ie8.

      global.attachEvent('on' + event, listener);
    }
  },
  detachEvent: function (event, listener) {
    if (typeof global.addEventListener !== 'undefined') {
      global.removeEventListener(event, listener, false);
    } else if (global.document && global.detachEvent) {
      global.document.detachEvent('on' + event, listener);
      global.detachEvent('on' + event, listener);
    }
  },
  unloadAdd: function (listener) {
    if (isChromePackagedApp) {
      return null;
    }

    var ref = random.string(8);
    onUnload[ref] = listener;

    if (afterUnload) {
      setTimeout(this.triggerUnloadCallbacks, 0);
    }

    return ref;
  },
  unloadDel: function (ref) {
    if (ref in onUnload) {
      delete onUnload[ref];
    }
  },
  triggerUnloadCallbacks: function () {
    for (var ref in onUnload) {
      onUnload[ref]();
      delete onUnload[ref];
    }
  }
};

var unloadTriggered = function () {
  if (afterUnload) {
    return;
  }

  afterUnload = true;
  module.exports.triggerUnloadCallbacks();
}; // 'unload' alone is not reliable in opera within an iframe, but we
// can't use `beforeunload` as IE fires it on javascript: links.


if (!isChromePackagedApp) {
  module.exports.attachEvent('unload', unloadTriggered);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/sockjs-client/lib/utils/iframe.js":
/*!********************************************************!*\
  !*** ./node_modules/sockjs-client/lib/utils/iframe.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var eventUtils = __webpack_require__(/*! ./event */ "./node_modules/sockjs-client/lib/utils/event.js"),
    JSON3 = __webpack_require__(/*! json3 */ "./node_modules/json3/lib/json3.js"),
    browser = __webpack_require__(/*! ./browser */ "./node_modules/sockjs-client/lib/utils/browser.js");

var debug = function () {};

if (true) {
  debug = __webpack_require__(/*! debug */ "./node_modules/sockjs-client/node_modules/debug/src/browser.js")('sockjs-client:utils:iframe');
}

module.exports = {
  WPrefix: '_jp',
  currentWindowId: null,
  polluteGlobalNamespace: function () {
    if (!(module.exports.WPrefix in global)) {
      global[module.exports.WPrefix] = {};
    }
  },
  postMessage: function (type, data) {
    if (global.parent !== global) {
      global.parent.postMessage(JSON3.stringify({
        windowId: module.exports.currentWindowId,
        type: type,
        data: data || ''
      }), '*');
    } else {
      debug('Cannot postMessage, no parent window.', type, data);
    }
  },
  createIframe: function (iframeUrl, errorCallback) {
    var iframe = global.document.createElement('iframe');
    var tref, unloadRef;

    var unattach = function () {
      debug('unattach');
      clearTimeout(tref); // Explorer had problems with that.

      try {
        iframe.onload = null;
      } catch (x) {// intentionally empty
      }

      iframe.onerror = null;
    };

    var cleanup = function () {
      debug('cleanup');

      if (iframe) {
        unattach(); // This timeout makes chrome fire onbeforeunload event
        // within iframe. Without the timeout it goes straight to
        // onunload.

        setTimeout(function () {
          if (iframe) {
            iframe.parentNode.removeChild(iframe);
          }

          iframe = null;
        }, 0);
        eventUtils.unloadDel(unloadRef);
      }
    };

    var onerror = function (err) {
      debug('onerror', err);

      if (iframe) {
        cleanup();
        errorCallback(err);
      }
    };

    var post = function (msg, origin) {
      debug('post', msg, origin);
      setTimeout(function () {
        try {
          // When the iframe is not loaded, IE raises an exception
          // on 'contentWindow'.
          if (iframe && iframe.contentWindow) {
            iframe.contentWindow.postMessage(msg, origin);
          }
        } catch (x) {// intentionally empty
        }
      }, 0);
    };

    iframe.src = iframeUrl;
    iframe.style.display = 'none';
    iframe.style.position = 'absolute';

    iframe.onerror = function () {
      onerror('onerror');
    };

    iframe.onload = function () {
      debug('onload'); // `onload` is triggered before scripts on the iframe are
      // executed. Give it few seconds to actually load stuff.

      clearTimeout(tref);
      tref = setTimeout(function () {
        onerror('onload timeout');
      }, 2000);
    };

    global.document.body.appendChild(iframe);
    tref = setTimeout(function () {
      onerror('timeout');
    }, 15000);
    unloadRef = eventUtils.unloadAdd(cleanup);
    return {
      post: post,
      cleanup: cleanup,
      loaded: unattach
    };
  }
  /* eslint no-undef: "off", new-cap: "off" */
  ,
  createHtmlfile: function (iframeUrl, errorCallback) {
    var axo = ['Active'].concat('Object').join('X');
    var doc = new global[axo]('htmlfile');
    var tref, unloadRef;
    var iframe;

    var unattach = function () {
      clearTimeout(tref);
      iframe.onerror = null;
    };

    var cleanup = function () {
      if (doc) {
        unattach();
        eventUtils.unloadDel(unloadRef);
        iframe.parentNode.removeChild(iframe);
        iframe = doc = null;
        CollectGarbage();
      }
    };

    var onerror = function (r) {
      debug('onerror', r);

      if (doc) {
        cleanup();
        errorCallback(r);
      }
    };

    var post = function (msg, origin) {
      try {
        // When the iframe is not loaded, IE raises an exception
        // on 'contentWindow'.
        setTimeout(function () {
          if (iframe && iframe.contentWindow) {
            iframe.contentWindow.postMessage(msg, origin);
          }
        }, 0);
      } catch (x) {// intentionally empty
      }
    };

    doc.open();
    doc.write('<html><s' + 'cript>' + 'document.domain="' + global.document.domain + '";' + '</s' + 'cript></html>');
    doc.close();
    doc.parentWindow[module.exports.WPrefix] = global[module.exports.WPrefix];
    var c = doc.createElement('div');
    doc.body.appendChild(c);
    iframe = doc.createElement('iframe');
    c.appendChild(iframe);
    iframe.src = iframeUrl;

    iframe.onerror = function () {
      onerror('onerror');
    };

    tref = setTimeout(function () {
      onerror('timeout');
    }, 15000);
    unloadRef = eventUtils.unloadAdd(cleanup);
    return {
      post: post,
      cleanup: cleanup,
      loaded: unattach
    };
  }
};
module.exports.iframeEnabled = false;

if (global.document) {
  // postMessage misbehaves in konqueror 4.6.5 - the messages are delivered with
  // huge delay, or not at all.
  module.exports.iframeEnabled = (typeof global.postMessage === 'function' || typeof global.postMessage === 'object') && !browser.isKonqueror();
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/sockjs-client/lib/utils/log.js":
/*!*****************************************************!*\
  !*** ./node_modules/sockjs-client/lib/utils/log.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var logObject = {};
['log', 'debug', 'warn'].forEach(function (level) {
  var levelExists;

  try {
    levelExists = global.console && global.console[level] && global.console[level].apply;
  } catch (e) {// do nothing
  }

  logObject[level] = levelExists ? function () {
    return global.console[level].apply(global.console, arguments);
  } : level === 'log' ? function () {} : logObject.log;
});
module.exports = logObject;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/sockjs-client/lib/utils/object.js":
/*!********************************************************!*\
  !*** ./node_modules/sockjs-client/lib/utils/object.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isObject: function (obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  },
  extend: function (obj) {
    if (!this.isObject(obj)) {
      return obj;
    }

    var source, prop;

    for (var i = 1, length = arguments.length; i < length; i++) {
      source = arguments[i];

      for (prop in source) {
        if (Object.prototype.hasOwnProperty.call(source, prop)) {
          obj[prop] = source[prop];
        }
      }
    }

    return obj;
  }
};

/***/ }),

/***/ "./node_modules/sockjs-client/lib/utils/random.js":
/*!********************************************************!*\
  !*** ./node_modules/sockjs-client/lib/utils/random.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* global crypto:true */

var crypto = __webpack_require__(/*! crypto */ "./node_modules/sockjs-client/lib/utils/browser-crypto.js"); // This string has length 32, a power of 2, so the modulus doesn't introduce a
// bias.


var _randomStringChars = 'abcdefghijklmnopqrstuvwxyz012345';
module.exports = {
  string: function (length) {
    var max = _randomStringChars.length;
    var bytes = crypto.randomBytes(length);
    var ret = [];

    for (var i = 0; i < length; i++) {
      ret.push(_randomStringChars.substr(bytes[i] % max, 1));
    }

    return ret.join('');
  },
  number: function (max) {
    return Math.floor(Math.random() * max);
  },
  numberString: function (max) {
    var t = ('' + (max - 1)).length;
    var p = new Array(t + 1).join('0');
    return (p + this.number(max)).slice(-t);
  }
};

/***/ }),

/***/ "./node_modules/sockjs-client/lib/utils/transport.js":
/*!***********************************************************!*\
  !*** ./node_modules/sockjs-client/lib/utils/transport.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var debug = function () {};

if (true) {
  debug = __webpack_require__(/*! debug */ "./node_modules/sockjs-client/node_modules/debug/src/browser.js")('sockjs-client:utils:transport');
}

module.exports = function (availableTransports) {
  return {
    filterToEnabled: function (transportsWhitelist, info) {
      var transports = {
        main: [],
        facade: []
      };

      if (!transportsWhitelist) {
        transportsWhitelist = [];
      } else if (typeof transportsWhitelist === 'string') {
        transportsWhitelist = [transportsWhitelist];
      }

      availableTransports.forEach(function (trans) {
        if (!trans) {
          return;
        }

        if (trans.transportName === 'websocket' && info.websocket === false) {
          debug('disabled from server', 'websocket');
          return;
        }

        if (transportsWhitelist.length && transportsWhitelist.indexOf(trans.transportName) === -1) {
          debug('not in whitelist', trans.transportName);
          return;
        }

        if (trans.enabled(info)) {
          debug('enabled', trans.transportName);
          transports.main.push(trans);

          if (trans.facadeTransport) {
            transports.facade.push(trans.facadeTransport);
          }
        } else {
          debug('disabled', trans.transportName);
        }
      });
      return transports;
    }
  };
};

/***/ }),

/***/ "./node_modules/sockjs-client/lib/utils/url.js":
/*!*****************************************************!*\
  !*** ./node_modules/sockjs-client/lib/utils/url.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var URL = __webpack_require__(/*! url-parse */ "./node_modules/url-parse/index.js");

var debug = function () {};

if (true) {
  debug = __webpack_require__(/*! debug */ "./node_modules/sockjs-client/node_modules/debug/src/browser.js")('sockjs-client:utils:url');
}

module.exports = {
  getOrigin: function (url) {
    if (!url) {
      return null;
    }

    var p = new URL(url);

    if (p.protocol === 'file:') {
      return null;
    }

    var port = p.port;

    if (!port) {
      port = p.protocol === 'https:' ? '443' : '80';
    }

    return p.protocol + '//' + p.hostname + ':' + port;
  },
  isOriginEqual: function (a, b) {
    var res = this.getOrigin(a) === this.getOrigin(b);
    debug('same', a, b, res);
    return res;
  },
  isSchemeEqual: function (a, b) {
    return a.split(':')[0] === b.split(':')[0];
  },
  addPath: function (url, path) {
    var qs = url.split('?');
    return qs[0] + path + (qs[1] ? '?' + qs[1] : '');
  },
  addQuery: function (url, q) {
    return url + (url.indexOf('?') === -1 ? '?' + q : '&' + q);
  }
};

/***/ }),

/***/ "./node_modules/sockjs-client/lib/version.js":
/*!***************************************************!*\
  !*** ./node_modules/sockjs-client/lib/version.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = '1.3.0';

/***/ }),

/***/ "./node_modules/sockjs-client/node_modules/debug/src/browser.js":
/*!**********************************************************************!*\
  !*** ./node_modules/sockjs-client/node_modules/debug/src/browser.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}
/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */


exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
/**
 * Colors.
 */

exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */
// eslint-disable-next-line complexity

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
    return true;
  } // Internet Explorer and Edge do not support colors.


  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  } // Is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */


function formatArgs(args) {
  args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);

  if (!this.useColors) {
    return;
  }

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit'); // The final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into

  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function (match) {
    if (match === '%%') {
      return;
    }

    index++;

    if (match === '%c') {
      // We only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });
  args.splice(lastC, 0, c);
}
/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */


function log() {
  var _console; // This hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'


  return (typeof console === "undefined" ? "undefined" : _typeof(console)) === 'object' && console.log && (_console = console).log.apply(_console, arguments);
}
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */


function save(namespaces) {
  try {
    if (namespaces) {
      exports.storage.setItem('debug', namespaces);
    } else {
      exports.storage.removeItem('debug');
    }
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */


function load() {
  var r;

  try {
    r = exports.storage.getItem('debug');
  } catch (error) {} // Swallow
  // XXX (@Qix-) should we be logging these?
  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = Object({"NODE_ENV":"development","PUBLIC_URL":""}).DEBUG;
  }

  return r;
}
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */


function localstorage() {
  try {
    // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
    // The Browser also has localStorage in the global context.
    return localStorage;
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}

module.exports = __webpack_require__(/*! ./common */ "./node_modules/sockjs-client/node_modules/debug/src/common.js")(exports);
var formatters = module.exports.formatters;
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
  try {
    return JSON.stringify(v);
  } catch (error) {
    return '[UnexpectedJSONParseError]: ' + error.message;
  }
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/sockjs-client/node_modules/debug/src/common.js":
/*!*********************************************************************!*\
  !*** ./node_modules/sockjs-client/node_modules/debug/src/common.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */

function setup(env) {
  createDebug.debug = createDebug;
  createDebug.default = createDebug;
  createDebug.coerce = coerce;
  createDebug.disable = disable;
  createDebug.enable = enable;
  createDebug.enabled = enabled;
  createDebug.humanize = __webpack_require__(/*! ms */ "./node_modules/sockjs-client/node_modules/ms/index.js");
  Object.keys(env).forEach(function (key) {
    createDebug[key] = env[key];
  });
  /**
  * Active `debug` instances.
  */

  createDebug.instances = [];
  /**
  * The currently active debug mode names, and names to skip.
  */

  createDebug.names = [];
  createDebug.skips = [];
  /**
  * Map of special "%n" handling functions, for the debug "format" argument.
  *
  * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
  */

  createDebug.formatters = {};
  /**
  * Selects a color for a debug namespace
  * @param {String} namespace The namespace string for the for the debug instance to be colored
  * @return {Number|String} An ANSI color code for the given namespace
  * @api private
  */

  function selectColor(namespace) {
    var hash = 0;

    for (var i = 0; i < namespace.length; i++) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0; // Convert to 32bit integer
    }

    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
  }

  createDebug.selectColor = selectColor;
  /**
  * Create a debugger with the given `namespace`.
  *
  * @param {String} namespace
  * @return {Function}
  * @api public
  */

  function createDebug(namespace) {
    var prevTime;

    function debug() {
      // Disabled?
      if (!debug.enabled) {
        return;
      }

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      var self = debug; // Set `diff` timestamp

      var curr = Number(new Date());
      var ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;
      args[0] = createDebug.coerce(args[0]);

      if (typeof args[0] !== 'string') {
        // Anything else let's inspect with %O
        args.unshift('%O');
      } // Apply any `formatters` transformations


      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
        // If we encounter an escaped % then don't increase the array index
        if (match === '%%') {
          return match;
        }

        index++;
        var formatter = createDebug.formatters[format];

        if (typeof formatter === 'function') {
          var val = args[index];
          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`

          args.splice(index, 1);
          index--;
        }

        return match;
      }); // Apply env-specific formatting (colors, etc.)

      createDebug.formatArgs.call(self, args);
      var logFn = self.log || createDebug.log;
      logFn.apply(self, args);
    }

    debug.namespace = namespace;
    debug.enabled = createDebug.enabled(namespace);
    debug.useColors = createDebug.useColors();
    debug.color = selectColor(namespace);
    debug.destroy = destroy;
    debug.extend = extend; // Debug.formatArgs = formatArgs;
    // debug.rawLog = rawLog;
    // env-specific initialization logic for debug instances

    if (typeof createDebug.init === 'function') {
      createDebug.init(debug);
    }

    createDebug.instances.push(debug);
    return debug;
  }

  function destroy() {
    var index = createDebug.instances.indexOf(this);

    if (index !== -1) {
      createDebug.instances.splice(index, 1);
      return true;
    }

    return false;
  }

  function extend(namespace, delimiter) {
    return createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
  }
  /**
  * Enables a debug mode by namespaces. This can include modes
  * separated by a colon and wildcards.
  *
  * @param {String} namespaces
  * @api public
  */


  function enable(namespaces) {
    createDebug.save(namespaces);
    createDebug.names = [];
    createDebug.skips = [];
    var i;
    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    var len = split.length;

    for (i = 0; i < len; i++) {
      if (!split[i]) {
        // ignore empty strings
        continue;
      }

      namespaces = split[i].replace(/\*/g, '.*?');

      if (namespaces[0] === '-') {
        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        createDebug.names.push(new RegExp('^' + namespaces + '$'));
      }
    }

    for (i = 0; i < createDebug.instances.length; i++) {
      var instance = createDebug.instances[i];
      instance.enabled = createDebug.enabled(instance.namespace);
    }
  }
  /**
  * Disable debug output.
  *
  * @api public
  */


  function disable() {
    createDebug.enable('');
  }
  /**
  * Returns true if the given mode name is enabled, false otherwise.
  *
  * @param {String} name
  * @return {Boolean}
  * @api public
  */


  function enabled(name) {
    if (name[name.length - 1] === '*') {
      return true;
    }

    var i;
    var len;

    for (i = 0, len = createDebug.skips.length; i < len; i++) {
      if (createDebug.skips[i].test(name)) {
        return false;
      }
    }

    for (i = 0, len = createDebug.names.length; i < len; i++) {
      if (createDebug.names[i].test(name)) {
        return true;
      }
    }

    return false;
  }
  /**
  * Coerce `val`.
  *
  * @param {Mixed} val
  * @return {Mixed}
  * @api private
  */


  function coerce(val) {
    if (val instanceof Error) {
      return val.stack || val.message;
    }

    return val;
  }

  createDebug.enable(createDebug.load());
  return createDebug;
}

module.exports = setup;

/***/ }),

/***/ "./node_modules/sockjs-client/node_modules/ms/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/sockjs-client/node_modules/ms/index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Helpers.
 */
var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;
/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function (val, options) {
  options = options || {};
  var type = typeof val;

  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isFinite(val)) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }

  throw new Error('val is not a non-empty string or a valid number. val=' + JSON.stringify(val));
};
/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */


function parse(str) {
  str = String(str);

  if (str.length > 100) {
    return;
  }

  var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);

  if (!match) {
    return;
  }

  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();

  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;

    case 'weeks':
    case 'week':
    case 'w':
      return n * w;

    case 'days':
    case 'day':
    case 'd':
      return n * d;

    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;

    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;

    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;

    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;

    default:
      return undefined;
  }
}
/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */


function fmtShort(ms) {
  var msAbs = Math.abs(ms);

  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }

  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }

  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }

  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }

  return ms + 'ms';
}
/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */


function fmtLong(ms) {
  var msAbs = Math.abs(ms);

  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }

  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }

  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }

  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }

  return ms + ' ms';
}
/**
 * Pluralization helper.
 */


function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}

/***/ }),

/***/ "./node_modules/style-loader/lib/addStyles.js":
/*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getTarget = function (target, parent) {
  if (parent){
    return parent.querySelector(target);
  }
  return document.querySelector(target);
};

var getElement = (function (fn) {
	var memo = {};

	return function(target, parent) {
                // If passing function in options, then use it for resolve "head" element.
                // Useful for Shadow Root style i.e
                // {
                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }
                // }
                if (typeof target === 'function') {
                        return target();
                }
                if (typeof memo[target] === "undefined") {
			var styleTarget = getTarget.call(this, target, parent);
			// Special case to return head of iframe instead of iframe itself
			if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[target] = styleTarget;
		}
		return memo[target]
	};
})();

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(/*! ./urls */ "./node_modules/style-loader/lib/urls.js");

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
        if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertAt.before, target);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}

	if(options.attrs.nonce === undefined) {
		var nonce = getNonce();
		if (nonce) {
			options.attrs.nonce = nonce;
		}
	}

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function getNonce() {
	if (false) {}

	return __webpack_require__.nc;
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = typeof options.transform === 'function'
		 ? options.transform(obj.css) 
		 : options.transform.default(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),

/***/ "./node_modules/style-loader/lib/urls.js":
/*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */
module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  } // blank or null?


  if (!css || typeof css !== "string") {
    return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/"); // convert each url(...)

  /*
  This regular expression is just a way to recursively match brackets within
  a string.
  	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
     (  = Start a capturing group
       (?:  = Start a non-capturing group
           [^)(]  = Match anything that isn't a parentheses
           |  = OR
           \(  = Match a start parentheses
               (?:  = Start another non-capturing groups
                   [^)(]+  = Match anything that isn't a parentheses
                   |  = OR
                   \(  = Match a start parentheses
                       [^)(]*  = Match anything that isn't a parentheses
                   \)  = Match a end parentheses
               )  = End Group
               *\) = Match anything and then a close parens
           )  = Close non-capturing group
           *  = Match anything
        )  = Close capturing group
   \)  = Match a close parens
  	 /gi  = Get all matches, not the first.  Be case insensitive.
   */

  var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function (fullMatch, origUrl) {
    // strip quotes (if they exist)
    var unquotedOrigUrl = origUrl.trim().replace(/^"(.*)"$/, function (o, $1) {
      return $1;
    }).replace(/^'(.*)'$/, function (o, $1) {
      return $1;
    }); // already a full url? no change

    if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(unquotedOrigUrl)) {
      return fullMatch;
    } // convert the url to a full url


    var newUrl;

    if (unquotedOrigUrl.indexOf("//") === 0) {
      //TODO: should we add protocol?
      newUrl = unquotedOrigUrl;
    } else if (unquotedOrigUrl.indexOf("/") === 0) {
      // path should be relative to the base url
      newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
    } else {
      // path should be relative to current directory
      newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
    } // send back the fixed url(...)


    return "url(" + JSON.stringify(newUrl) + ")";
  }); // send back the fixed css

  return fixedCss;
};

/***/ }),

/***/ "./node_modules/symbol-observable/es/index.js":
/*!****************************************************!*\
  !*** ./node_modules/symbol-observable/es/index.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(global, module) {/* harmony import */ var _ponyfill_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ponyfill.js */ "./node_modules/symbol-observable/es/ponyfill.js");
/* global window */

var root;

if (typeof self !== 'undefined') {
  root = self;
} else if (typeof window !== 'undefined') {
  root = window;
} else if (typeof global !== 'undefined') {
  root = global;
} else if (true) {
  root = module;
} else {}

var result = Object(_ponyfill_js__WEBPACK_IMPORTED_MODULE_0__["default"])(root);
/* harmony default export */ __webpack_exports__["default"] = (result);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../../webpack/buildin/harmony-module.js */ "./node_modules/webpack/buildin/harmony-module.js")(module)))

/***/ }),

/***/ "./node_modules/symbol-observable/es/ponyfill.js":
/*!*******************************************************!*\
  !*** ./node_modules/symbol-observable/es/ponyfill.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return symbolObservablePonyfill; });
function symbolObservablePonyfill(root) {
  var result;
  var Symbol = root.Symbol;

  if (typeof Symbol === 'function') {
    if (Symbol.observable) {
      result = Symbol.observable;
    } else {
      result = Symbol('observable');
      Symbol.observable = result;
    }
  } else {
    result = '@@observable';
  }

  return result;
}
;

/***/ }),

/***/ "./node_modules/tiny-invariant/dist/tiny-invariant.esm.js":
/*!****************************************************************!*\
  !*** ./node_modules/tiny-invariant/dist/tiny-invariant.esm.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var isProduction = "development" === 'production';
var prefix = 'Invariant failed';

function invariant(condition, message) {
  if (condition) {
    return;
  }

  if (isProduction) {
    throw new Error(prefix);
  } else {
    throw new Error(prefix + ": " + (message || ''));
  }
}

/* harmony default export */ __webpack_exports__["default"] = (invariant);

/***/ }),

/***/ "./node_modules/tiny-warning/dist/tiny-warning.esm.js":
/*!************************************************************!*\
  !*** ./node_modules/tiny-warning/dist/tiny-warning.esm.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var isProduction = "development" === 'production';

function warning(condition, message) {
  if (!isProduction) {
    if (condition) {
      return;
    }

    var text = "Warning: " + message;

    if (typeof console !== 'undefined') {
      console.warn(text);
    }

    try {
      throw Error(text);
    } catch (x) {}
  }
}

/* harmony default export */ __webpack_exports__["default"] = (warning);

/***/ }),

/***/ "./node_modules/tslib/tslib.es6.js":
/*!*****************************************!*\
  !*** ./node_modules/tslib/tslib.es6.js ***!
  \*****************************************/
/*! exports provided: __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __exportStar, __values, __read, __spread, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__extends", function() { return __extends; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__assign", function() { return __assign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__rest", function() { return __rest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__decorate", function() { return __decorate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__param", function() { return __param; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__metadata", function() { return __metadata; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__awaiter", function() { return __awaiter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__generator", function() { return __generator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__exportStar", function() { return __exportStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__values", function() { return __values; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__read", function() { return __read; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spread", function() { return __spread; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__await", function() { return __await; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncGenerator", function() { return __asyncGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncDelegator", function() { return __asyncDelegator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncValues", function() { return __asyncValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__makeTemplateObject", function() { return __makeTemplateObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importStar", function() { return __importStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importDefault", function() { return __importDefault; });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */
var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}
function __exportStar(m, exports) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
  var m = typeof Symbol === "function" && o[Symbol.iterator],
      i = 0;
  if (m) return m.call(o);
  return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

  return ar;
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
      i,
      q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;

  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }

  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }

  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }

  function fulfill(value) {
    resume("next", value);
  }

  function reject(value) {
    resume("throw", value);
  }

  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;

  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await(o[n](v)),
        done: n === "return"
      } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
      i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);

  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }

  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }

  return cooked;
}
;
function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  result.default = mod;
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : {
    default: mod
  };
}

/***/ }),

/***/ "./node_modules/url-parse/index.js":
/*!*****************************************!*\
  !*** ./node_modules/url-parse/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

var required = __webpack_require__(/*! requires-port */ "./node_modules/requires-port/index.js"),
    qs = __webpack_require__(/*! querystringify */ "./node_modules/querystringify/index.js"),
    slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//,
    protocolre = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i,
    whitespace = '[\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF]',
    left = new RegExp('^' + whitespace + '+');
/**
 * Trim a given string.
 *
 * @param {String} str String to trim.
 * @public
 */


function trimLeft(str) {
  return (str ? str : '').toString().replace(left, '');
}
/**
 * These are the parse rules for the URL parser, it informs the parser
 * about:
 *
 * 0. The char it Needs to parse, if it's a string it should be done using
 *    indexOf, RegExp using exec and NaN means set as current value.
 * 1. The property we should set when parsing this value.
 * 2. Indication if it's backwards or forward parsing, when set as number it's
 *    the value of extra chars that should be split off.
 * 3. Inherit from location if non existing in the parser.
 * 4. `toLowerCase` the resulting value.
 */


var rules = [['#', 'hash'], // Extract from the back.
['?', 'query'], // Extract from the back.
function sanitize(address) {
  // Sanitize what is left of the address
  return address.replace('\\', '/');
}, ['/', 'pathname'], // Extract from the back.
['@', 'auth', 1], // Extract from the front.
[NaN, 'host', undefined, 1, 1], // Set left over value.
[/:(\d+)$/, 'port', undefined, 1], // RegExp the back.
[NaN, 'hostname', undefined, 1, 1] // Set left over.
];
/**
 * These properties should not be copied or inherited from. This is only needed
 * for all non blob URL's as a blob URL does not include a hash, only the
 * origin.
 *
 * @type {Object}
 * @private
 */

var ignore = {
  hash: 1,
  query: 1
};
/**
 * The location object differs when your code is loaded through a normal page,
 * Worker or through a worker using a blob. And with the blobble begins the
 * trouble as the location object will contain the URL of the blob, not the
 * location of the page where our code is loaded in. The actual origin is
 * encoded in the `pathname` so we can thankfully generate a good "default"
 * location from it so we can generate proper relative URL's again.
 *
 * @param {Object|String} loc Optional default location object.
 * @returns {Object} lolcation object.
 * @public
 */

function lolcation(loc) {
  var globalVar;
  if (typeof window !== 'undefined') globalVar = window;else if (typeof global !== 'undefined') globalVar = global;else if (typeof self !== 'undefined') globalVar = self;else globalVar = {};
  var location = globalVar.location || {};
  loc = loc || location;
  var finaldestination = {},
      type = typeof loc,
      key;

  if ('blob:' === loc.protocol) {
    finaldestination = new Url(unescape(loc.pathname), {});
  } else if ('string' === type) {
    finaldestination = new Url(loc, {});

    for (key in ignore) delete finaldestination[key];
  } else if ('object' === type) {
    for (key in loc) {
      if (key in ignore) continue;
      finaldestination[key] = loc[key];
    }

    if (finaldestination.slashes === undefined) {
      finaldestination.slashes = slashes.test(loc.href);
    }
  }

  return finaldestination;
}
/**
 * @typedef ProtocolExtract
 * @type Object
 * @property {String} protocol Protocol matched in the URL, in lowercase.
 * @property {Boolean} slashes `true` if protocol is followed by "//", else `false`.
 * @property {String} rest Rest of the URL that is not part of the protocol.
 */

/**
 * Extract protocol information from a URL with/without double slash ("//").
 *
 * @param {String} address URL we want to extract from.
 * @return {ProtocolExtract} Extracted information.
 * @private
 */


function extractProtocol(address) {
  address = trimLeft(address);
  var match = protocolre.exec(address);
  return {
    protocol: match[1] ? match[1].toLowerCase() : '',
    slashes: !!match[2],
    rest: match[3]
  };
}
/**
 * Resolve a relative URL pathname against a base URL pathname.
 *
 * @param {String} relative Pathname of the relative URL.
 * @param {String} base Pathname of the base URL.
 * @return {String} Resolved pathname.
 * @private
 */


function resolve(relative, base) {
  if (relative === '') return base;
  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/')),
      i = path.length,
      last = path[i - 1],
      unshift = false,
      up = 0;

  while (i--) {
    if (path[i] === '.') {
      path.splice(i, 1);
    } else if (path[i] === '..') {
      path.splice(i, 1);
      up++;
    } else if (up) {
      if (i === 0) unshift = true;
      path.splice(i, 1);
      up--;
    }
  }

  if (unshift) path.unshift('');
  if (last === '.' || last === '..') path.push('');
  return path.join('/');
}
/**
 * The actual URL instance. Instead of returning an object we've opted-in to
 * create an actual constructor as it's much more memory efficient and
 * faster and it pleases my OCD.
 *
 * It is worth noting that we should not use `URL` as class name to prevent
 * clashes with the global URL instance that got introduced in browsers.
 *
 * @constructor
 * @param {String} address URL we want to parse.
 * @param {Object|String} [location] Location defaults for relative paths.
 * @param {Boolean|Function} [parser] Parser for the query string.
 * @private
 */


function Url(address, location, parser) {
  address = trimLeft(address);

  if (!(this instanceof Url)) {
    return new Url(address, location, parser);
  }

  var relative,
      extracted,
      parse,
      instruction,
      index,
      key,
      instructions = rules.slice(),
      type = typeof location,
      url = this,
      i = 0; //
  // The following if statements allows this module two have compatibility with
  // 2 different API:
  //
  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments
  //    where the boolean indicates that the query string should also be parsed.
  //
  // 2. The `URL` interface of the browser which accepts a URL, object as
  //    arguments. The supplied object will be used as default values / fall-back
  //    for relative paths.
  //

  if ('object' !== type && 'string' !== type) {
    parser = location;
    location = null;
  }

  if (parser && 'function' !== typeof parser) parser = qs.parse;
  location = lolcation(location); //
  // Extract protocol information before running the instructions.
  //

  extracted = extractProtocol(address || '');
  relative = !extracted.protocol && !extracted.slashes;
  url.slashes = extracted.slashes || relative && location.slashes;
  url.protocol = extracted.protocol || location.protocol || '';
  address = extracted.rest; //
  // When the authority component is absent the URL starts with a path
  // component.
  //

  if (!extracted.slashes) instructions[3] = [/(.*)/, 'pathname'];

  for (; i < instructions.length; i++) {
    instruction = instructions[i];

    if (typeof instruction === 'function') {
      address = instruction(address);
      continue;
    }

    parse = instruction[0];
    key = instruction[1];

    if (parse !== parse) {
      url[key] = address;
    } else if ('string' === typeof parse) {
      if (~(index = address.indexOf(parse))) {
        if ('number' === typeof instruction[2]) {
          url[key] = address.slice(0, index);
          address = address.slice(index + instruction[2]);
        } else {
          url[key] = address.slice(index);
          address = address.slice(0, index);
        }
      }
    } else if (index = parse.exec(address)) {
      url[key] = index[1];
      address = address.slice(0, index.index);
    }

    url[key] = url[key] || (relative && instruction[3] ? location[key] || '' : ''); //
    // Hostname, host and protocol should be lowercased so they can be used to
    // create a proper `origin`.
    //

    if (instruction[4]) url[key] = url[key].toLowerCase();
  } //
  // Also parse the supplied query string in to an object. If we're supplied
  // with a custom parser as function use that instead of the default build-in
  // parser.
  //


  if (parser) url.query = parser(url.query); //
  // If the URL is relative, resolve the pathname against the base URL.
  //

  if (relative && location.slashes && url.pathname.charAt(0) !== '/' && (url.pathname !== '' || location.pathname !== '')) {
    url.pathname = resolve(url.pathname, location.pathname);
  } //
  // We should not add port numbers if they are already the default port number
  // for a given protocol. As the host also contains the port number we're going
  // override it with the hostname which contains no port number.
  //


  if (!required(url.port, url.protocol)) {
    url.host = url.hostname;
    url.port = '';
  } //
  // Parse down the `auth` for the username and password.
  //


  url.username = url.password = '';

  if (url.auth) {
    instruction = url.auth.split(':');
    url.username = instruction[0] || '';
    url.password = instruction[1] || '';
  }

  url.origin = url.protocol && url.host && url.protocol !== 'file:' ? url.protocol + '//' + url.host : 'null'; //
  // The href is just the compiled result.
  //

  url.href = url.toString();
}
/**
 * This is convenience method for changing properties in the URL instance to
 * insure that they all propagate correctly.
 *
 * @param {String} part          Property we need to adjust.
 * @param {Mixed} value          The newly assigned value.
 * @param {Boolean|Function} fn  When setting the query, it will be the function
 *                               used to parse the query.
 *                               When setting the protocol, double slash will be
 *                               removed from the final url if it is true.
 * @returns {URL} URL instance for chaining.
 * @public
 */


function set(part, value, fn) {
  var url = this;

  switch (part) {
    case 'query':
      if ('string' === typeof value && value.length) {
        value = (fn || qs.parse)(value);
      }

      url[part] = value;
      break;

    case 'port':
      url[part] = value;

      if (!required(value, url.protocol)) {
        url.host = url.hostname;
        url[part] = '';
      } else if (value) {
        url.host = url.hostname + ':' + value;
      }

      break;

    case 'hostname':
      url[part] = value;
      if (url.port) value += ':' + url.port;
      url.host = value;
      break;

    case 'host':
      url[part] = value;

      if (/:\d+$/.test(value)) {
        value = value.split(':');
        url.port = value.pop();
        url.hostname = value.join(':');
      } else {
        url.hostname = value;
        url.port = '';
      }

      break;

    case 'protocol':
      url.protocol = value.toLowerCase();
      url.slashes = !fn;
      break;

    case 'pathname':
    case 'hash':
      if (value) {
        var char = part === 'pathname' ? '/' : '#';
        url[part] = value.charAt(0) !== char ? char + value : value;
      } else {
        url[part] = value;
      }

      break;

    default:
      url[part] = value;
  }

  for (var i = 0; i < rules.length; i++) {
    var ins = rules[i];
    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
  }

  url.origin = url.protocol && url.host && url.protocol !== 'file:' ? url.protocol + '//' + url.host : 'null';
  url.href = url.toString();
  return url;
}
/**
 * Transform the properties back in to a valid and full URL string.
 *
 * @param {Function} stringify Optional query stringify function.
 * @returns {String} Compiled version of the URL.
 * @public
 */


function toString(stringify) {
  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;
  var query,
      url = this,
      protocol = url.protocol;
  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';
  var result = protocol + (url.slashes ? '//' : '');

  if (url.username) {
    result += url.username;
    if (url.password) result += ':' + url.password;
    result += '@';
  }

  result += url.host + url.pathname;
  query = 'object' === typeof url.query ? stringify(url.query) : url.query;
  if (query) result += '?' !== query.charAt(0) ? '?' + query : query;
  if (url.hash) result += url.hash;
  return result;
}

Url.prototype = {
  set: set,
  toString: toString
}; //
// Expose the URL parser and some additional properties that might be useful for
// others or testing.
//

Url.extractProtocol = extractProtocol;
Url.location = lolcation;
Url.trimLeft = trimLeft;
Url.qs = qs;
module.exports = Url;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/url/url.js":
/*!*********************************!*\
  !*** ./node_modules/url/url.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


var punycode = __webpack_require__(/*! punycode */ "./node_modules/node-libs-browser/node_modules/punycode/punycode.js");

var util = __webpack_require__(/*! ./util */ "./node_modules/url/util.js");

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;
exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
} // Reference: RFC 3986, RFC 1808, RFC 2396
// define these here so at least they only have to be
// compiled once on the first module load.


var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,
    // Special case for a simple path URL
simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
    // RFC 2396: characters reserved for delimiting URLs.
// We actually just auto-escape these.
delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],
    // RFC 2396: characters not allowed for various reasons.
unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),
    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
// Note that any invalid chars are also handled, but these
// are the ones that are *expected* to be seen, so we fast-path
// them.
nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
unsafeProtocol = {
  'javascript': true,
  'javascript:': true
},
    // protocols that never have a hostname.
hostlessProtocol = {
  'javascript': true,
  'javascript:': true
},
    // protocols that always contain a // bit.
slashedProtocol = {
  'http': true,
  'https': true,
  'ftp': true,
  'gopher': true,
  'file': true,
  'http:': true,
  'https:': true,
  'ftp:': true,
  'gopher:': true,
  'file:': true
},
    querystring = __webpack_require__(/*! querystring */ "./node_modules/querystring-es3/index.js");

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;
  var u = new Url();
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  } // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916


  var queryIndex = url.indexOf('?'),
      splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);
  var rest = url; // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"

  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);

    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];

      if (simplePath[2]) {
        this.search = simplePath[2];

        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }

      return this;
    }
  }

  var proto = protocolPattern.exec(rest);

  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  } // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.


  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';

    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c
    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.
    // find the first instance of any hostEndingChars
    var hostEnd = -1;

    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
    } // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.


    var auth, atSign;

    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    } // Now we have a portion which is definitely the auth.
    // Pull that off.


    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    } // the host is the remaining to the left of the first non-host char


    hostEnd = -1;

    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
    } // if we still have not hit it, then the entire thing is a host.


    if (hostEnd === -1) hostEnd = rest.length;
    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd); // pull out port.

    this.parseHost(); // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.

    this.hostname = this.hostname || ''; // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.

    var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']'; // validate a little.

    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);

      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;

        if (!part.match(hostnamePartPattern)) {
          var newpart = '';

          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          } // we test again with ASCII char only


          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);

            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }

            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }

            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host; // strip [ and ] from the hostname
    // the host field still retains them, though

    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);

      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  } // now rest is set to the post-host stuff.
  // chop off any delim chars.


  if (!unsafeProtocol[lowerProto]) {
    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1) continue;
      var esc = encodeURIComponent(ae);

      if (esc === ae) {
        esc = escape(ae);
      }

      rest = rest.split(ae).join(esc);
    }
  } // chop off from the tail first.


  var hash = rest.indexOf('#');

  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }

  var qm = rest.indexOf('?');

  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);

    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }

    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }

  if (rest) this.pathname = rest;

  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {
    this.pathname = '/';
  } //to support http.request


  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  } // finally, reconstruct the href based on what has been validated.


  this.href = this.format();
  return this;
}; // format a parsed object into a url string


function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function () {
  var auth = this.auth || '';

  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');

    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query && util.isObject(this.query) && Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || query && '?' + query || '';
  if (protocol && protocol.substr(-1) !== ':') protocol += ':'; // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.

  if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;
  pathname = pathname.replace(/[?#]/g, function (match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');
  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function (relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function (relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);

  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  } // hash is always overridden, no matter what.
  // even href="" will remove it.


  result.hash = relative.hash; // if the relative url is empty, then there's nothing left to do here.

  if (relative.href === '') {
    result.href = result.format();
    return result;
  } // hrefs like //foo/bar always cut to the protocol.


  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);

    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol') result[rkey] = relative[rkey];
    } //urlParse appends trailing / to urls like http://www.example.com


    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);

      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }

      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;

    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');

      while (relPath.length && !(relative.host = relPath.shift()));

      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }

    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port; // to support http.request

    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }

    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',
      isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',
      mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname,
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol]; // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.

  if (psychotic) {
    result.hostname = '';
    result.port = null;

    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;else srcPath.unshift(result.host);
    }

    result.host = '';

    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;

      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;else relPath.unshift(relative.host);
      }

      relative.host = null;
    }

    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = relative.host || relative.host === '' ? relative.host : result.host;
    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath; // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift(); //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')

      var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }

    result.search = relative.search;
    result.query = relative.query; //to support http.request

    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
    }

    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null; //to support http.request

    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }

    result.href = result.format();
    return result;
  } // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.


  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === ''; // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0

  var up = 0;

  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];

    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  } // if the path is allowed to go above the root, restore leading ..s


  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && srcPath.join('/').substr(-1) !== '/') {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' || srcPath[0] && srcPath[0].charAt(0) === '/'; // put the host back

  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' : srcPath.length ? srcPath.shift() : ''; //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')

    var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;

    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || result.host && srcPath.length;

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  } //to support request.http


  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');
  }

  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function () {
  var host = this.host;
  var port = portPattern.exec(host);

  if (port) {
    port = port[0];

    if (port !== ':') {
      this.port = port.substr(1);
    }

    host = host.substr(0, host.length - port.length);
  }

  if (host) this.hostname = host;
};

/***/ }),

/***/ "./node_modules/url/util.js":
/*!**********************************!*\
  !*** ./node_modules/url/util.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isString: function (arg) {
    return typeof arg === 'string';
  },
  isObject: function (arg) {
    return typeof arg === 'object' && arg !== null;
  },
  isNull: function (arg) {
    return arg === null;
  },
  isNullOrUndefined: function (arg) {
    return arg == null;
  }
};

/***/ }),

/***/ "./node_modules/value-equal/index.js":
/*!*******************************************!*\
  !*** ./node_modules/value-equal/index.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

function valueEqual(a, b) {
  if (a === b) return true;
  if (a == null || b == null) return false;

  if (Array.isArray(a)) {
    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
      return valueEqual(item, b[index]);
    });
  }

  var aType = typeof a === 'undefined' ? 'undefined' : _typeof(a);
  var bType = typeof b === 'undefined' ? 'undefined' : _typeof(b);
  if (aType !== bType) return false;

  if (aType === 'object') {
    var aValue = a.valueOf();
    var bValue = b.valueOf();
    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);
    var aKeys = Object.keys(a);
    var bKeys = Object.keys(b);
    if (aKeys.length !== bKeys.length) return false;
    return aKeys.every(function (key) {
      return valueEqual(a[key], b[key]);
    });
  }

  return false;
}

/* harmony default export */ __webpack_exports__["default"] = (valueEqual);

/***/ }),

/***/ "./node_modules/webpack/buildin/amd-options.js":
/*!****************************************!*\
  !*** (webpack)/buildin/amd-options.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(this, {}))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g; // This works in non-strict mode

g = function () {
  return this;
}();

try {
  // This works if eval is allowed (see CSP)
  g = g || new Function("return this")();
} catch (e) {
  // This works if the window reference is available
  if (typeof window === "object") g = window;
} // g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}


module.exports = g;

/***/ }),

/***/ "./node_modules/webpack/buildin/harmony-module.js":
/*!*******************************************!*\
  !*** (webpack)/buildin/harmony-module.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (originalModule) {
  if (!originalModule.webpackPolyfill) {
    var module = Object.create(originalModule); // module.parent = undefined by default

    if (!module.children) module.children = [];
    Object.defineProperty(module, "loaded", {
      enumerable: true,
      get: function () {
        return module.l;
      }
    });
    Object.defineProperty(module, "id", {
      enumerable: true,
      get: function () {
        return module.i;
      }
    });
    Object.defineProperty(module, "exports", {
      enumerable: true
    });
    module.webpackPolyfill = 1;
  }

  return module;
};

/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function (module) {
  if (!module.webpackPolyfill) {
    module.deprecate = function () {};

    module.paths = []; // module.parent = undefined by default

    if (!module.children) module.children = [];
    Object.defineProperty(module, "loaded", {
      enumerable: true,
      get: function () {
        return module.l;
      }
    });
    Object.defineProperty(module, "id", {
      enumerable: true,
      get: function () {
        return module.i;
      }
    });
    module.webpackPolyfill = 1;
  }

  return module;
};

/***/ })

}]);
//# sourceMappingURL=0.chunk.js.map